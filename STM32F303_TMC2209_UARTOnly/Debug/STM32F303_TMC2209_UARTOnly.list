
STM32F303_TMC2209_UARTOnly.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  080060e8  080060e8  000160e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800664c  0800664c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800664c  0800664c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800664c  0800664c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800664c  0800664c  0001664c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006650  08006650  00016650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000007e0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000850  20000850  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c7c6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020d3  00000000  00000000  0002c866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  0002e940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000840  00000000  00000000  0002f258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c2a2  00000000  00000000  0002fa98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c878  00000000  00000000  0004bd3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fbc0  00000000  00000000  000585b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f8172  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bc0  00000000  00000000  000f81c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060d0 	.word	0x080060d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080060d0 	.word	0x080060d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <tmc2209_readWriteArray>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	60b9      	str	r1, [r7, #8]
 8000278:	607a      	str	r2, [r7, #4]
 800027a:	603b      	str	r3, [r7, #0]
 800027c:	4603      	mov	r3, r0
 800027e:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8000280:	480e      	ldr	r0, [pc, #56]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000282:	f003 fc95 	bl	8003bb0 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, data, writeLength,3000);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	b29a      	uxth	r2, r3
 800028a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800028e:	68b9      	ldr	r1, [r7, #8]
 8000290:	480a      	ldr	r0, [pc, #40]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000292:	f002 ffdb 	bl	800324c <HAL_UART_Transmit>
//	HAL_UART_Transmit_IT(&huart1, data, writeLength);


	if(readLength > 0){
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d00a      	beq.n	80002b2 <tmc2209_readWriteArray+0x42>
		HAL_HalfDuplex_EnableReceiver(&huart1);
 800029c:	4807      	ldr	r0, [pc, #28]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 800029e:	f003 fcd9 	bl	8003c54 <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart1, data, readLength,3000);
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002aa:	68b9      	ldr	r1, [r7, #8]
 80002ac:	4803      	ldr	r0, [pc, #12]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 80002ae:	f003 f861 	bl	8003374 <HAL_UART_Receive>
//		HAL_UART_Receive_IT(&huart1, data, readLength);
	}
}
 80002b2:	bf00      	nop
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	2000008c 	.word	0x2000008c

080002c0 <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 80002ca:	2201      	movs	r2, #1
 80002cc:	6839      	ldr	r1, [r7, #0]
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f004 fb66 	bl	80049a0 <tmc_CRC8>
 80002d4:	4603      	mov	r3, r0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <reset>:

static uint8_t reset()
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	return tmc2209_reset(&TMC2209);
 80002e4:	4802      	ldr	r0, [pc, #8]	; (80002f0 <reset+0x10>)
 80002e6:	f004 fd93 	bl	8004e10 <tmc2209_reset>
 80002ea:	4603      	mov	r3, r0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000194 	.word	0x20000194

080002f4 <restore>:

static uint8_t restore()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 80002f8:	4802      	ldr	r0, [pc, #8]	; (8000304 <restore+0x10>)
 80002fa:	f004 fdc3 	bl	8004e84 <tmc2209_restore>
 80002fe:	4603      	mov	r3, r0
}
 8000300:	4618      	mov	r0, r3
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000194 	.word	0x20000194

08000308 <TMC2209_INIT>:


void TMC2209_INIT()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 800030e:	2201      	movs	r2, #1
 8000310:	2101      	movs	r1, #1
 8000312:	2007      	movs	r0, #7
 8000314:	f004 fa8c 	bl	8004830 <tmc_fillCRC8Table>

	TMC2209_config.reset = reset;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <TMC2209_INIT+0x38>)
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <TMC2209_INIT+0x3c>)
 800031c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config.restore = restore;
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <TMC2209_INIT+0x38>)
 8000322:	4a09      	ldr	r2, [pc, #36]	; (8000348 <TMC2209_INIT+0x40>)
 8000324:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <TMC2209_INIT+0x44>)
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <TMC2209_INIT+0x38>)
 800032e:	2200      	movs	r2, #0
 8000330:	2100      	movs	r1, #0
 8000332:	4807      	ldr	r0, [pc, #28]	; (8000350 <TMC2209_INIT+0x48>)
 8000334:	f004 fc88 	bl	8004c48 <tmc2209_init>


	//restore();
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	2000041c 	.word	0x2000041c
 8000344:	080002e1 	.word	0x080002e1
 8000348:	080002f5 	.word	0x080002f5
 800034c:	080062fc 	.word	0x080062fc
 8000350:	20000194 	.word	0x20000194

08000354 <HAL_UART_RxCpltCallback>:
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	//int32_t SGTHRS_value = 0;
	uartflag1 = 1;
 800035c:	4b04      	ldr	r3, [pc, #16]	; (8000370 <HAL_UART_RxCpltCallback+0x1c>)
 800035e:	2201      	movs	r2, #1
 8000360:	701a      	strb	r2, [r3, #0]
	printf("uart_timer\r\n");
 8000362:	4804      	ldr	r0, [pc, #16]	; (8000374 <HAL_UART_RxCpltCallback+0x20>)
 8000364:	f004 fe60 	bl	8005028 <puts>
	//HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
	//SGTHRS_value = tmc2209_readInt(&TMC2209, TMC2209_SGTHRS);
	//currentdata();
}
 8000368:	bf00      	nop
 800036a:	3708      	adds	r7, #8
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000630 	.word	0x20000630
 8000374:	080060e8 	.word	0x080060e8

08000378 <TMCsetup>:
//			end_stop_state &= ~1;
//		}
//	}
//}

void TMCsetup(){
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
	int32_t value = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	607b      	str	r3, [r7, #4]

	value = 22;
 8000382:	2316      	movs	r3, #22
 8000384:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, value);	//実行電流
 8000386:	2110      	movs	r1, #16
 8000388:	48c8      	ldr	r0, [pc, #800]	; (80006ac <TMCsetup+0x334>)
 800038a:	f004 fbfa 	bl	8004b82 <tmc2209_readInt>
 800038e:	4603      	mov	r3, r0
 8000390:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	021b      	lsls	r3, r3, #8
 8000398:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800039c:	4313      	orrs	r3, r2
 800039e:	461a      	mov	r2, r3
 80003a0:	2110      	movs	r1, #16
 80003a2:	48c2      	ldr	r0, [pc, #776]	; (80006ac <TMCsetup+0x334>)
 80003a4:	f004 fb9d 	bl	8004ae2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80003a8:	f000 ffac 	bl	8001304 <HAL_GetTick>
 80003ac:	4603      	mov	r3, r0
 80003ae:	4619      	mov	r1, r3
 80003b0:	48be      	ldr	r0, [pc, #760]	; (80006ac <TMCsetup+0x334>)
 80003b2:	f004 fd1c 	bl	8004dee <tmc2209_periodicJob>
	HAL_Delay(100);
 80003b6:	2064      	movs	r0, #100	; 0x64
 80003b8:	f000 ffb0 	bl	800131c <HAL_Delay>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 80003bc:	2110      	movs	r1, #16
 80003be:	48bb      	ldr	r0, [pc, #748]	; (80006ac <TMCsetup+0x334>)
 80003c0:	f004 fbdf 	bl	8004b82 <tmc2209_readInt>
 80003c4:	4603      	mov	r3, r0
 80003c6:	121b      	asrs	r3, r3, #8
 80003c8:	f003 031f 	and.w	r3, r3, #31
 80003cc:	607b      	str	r3, [r7, #4]
	printf("IRUN: %ld\r\n", value);
 80003ce:	6879      	ldr	r1, [r7, #4]
 80003d0:	48b7      	ldr	r0, [pc, #732]	; (80006b0 <TMCsetup+0x338>)
 80003d2:	f004 fda3 	bl	8004f1c <iprintf>

	value= 16;																						//モーター待機時の電流の設定
 80003d6:	2310      	movs	r3, #16
 80003d8:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, value);
 80003da:	2110      	movs	r1, #16
 80003dc:	48b3      	ldr	r0, [pc, #716]	; (80006ac <TMCsetup+0x334>)
 80003de:	f004 fbd0 	bl	8004b82 <tmc2209_readInt>
 80003e2:	4603      	mov	r3, r0
 80003e4:	f023 021f 	bic.w	r2, r3, #31
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f003 031f 	and.w	r3, r3, #31
 80003ee:	4313      	orrs	r3, r2
 80003f0:	461a      	mov	r2, r3
 80003f2:	2110      	movs	r1, #16
 80003f4:	48ad      	ldr	r0, [pc, #692]	; (80006ac <TMCsetup+0x334>)
 80003f6:	f004 fb74 	bl	8004ae2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80003fa:	f000 ff83 	bl	8001304 <HAL_GetTick>
 80003fe:	4603      	mov	r3, r0
 8000400:	4619      	mov	r1, r3
 8000402:	48aa      	ldr	r0, [pc, #680]	; (80006ac <TMCsetup+0x334>)
 8000404:	f004 fcf3 	bl	8004dee <tmc2209_periodicJob>
	HAL_Delay(100);
 8000408:	2064      	movs	r0, #100	; 0x64
 800040a:	f000 ff87 	bl	800131c <HAL_Delay>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);	//保持電流
 800040e:	2110      	movs	r1, #16
 8000410:	48a6      	ldr	r0, [pc, #664]	; (80006ac <TMCsetup+0x334>)
 8000412:	f004 fbb6 	bl	8004b82 <tmc2209_readInt>
 8000416:	4603      	mov	r3, r0
 8000418:	f003 031f 	and.w	r3, r3, #31
 800041c:	607b      	str	r3, [r7, #4]
	printf("IHOLD: %ld\r\n", value);
 800041e:	6879      	ldr	r1, [r7, #4]
 8000420:	48a4      	ldr	r0, [pc, #656]	; (80006b4 <TMCsetup+0x33c>)
 8000422:	f004 fd7b 	bl	8004f1c <iprintf>

	value=0;
 8000426:	2300      	movs	r3, #0
 8000428:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK,TMC2209_PDN_DISABLE_SHIFT);
 800042a:	2100      	movs	r1, #0
 800042c:	489f      	ldr	r0, [pc, #636]	; (80006ac <TMCsetup+0x334>)
 800042e:	f004 fba8 	bl	8004b82 <tmc2209_readInt>
 8000432:	4603      	mov	r3, r0
 8000434:	119b      	asrs	r3, r3, #6
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	607b      	str	r3, [r7, #4]
	printf("pdn_disable : %ld\r\n", value);
 800043c:	6879      	ldr	r1, [r7, #4]
 800043e:	489e      	ldr	r0, [pc, #632]	; (80006b8 <TMCsetup+0x340>)
 8000440:	f004 fd6c 	bl	8004f1c <iprintf>
	value = 1;
 8000444:	2301      	movs	r3, #1
 8000446:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK, TMC2209_PDN_DISABLE_SHIFT, value);
 8000448:	2100      	movs	r1, #0
 800044a:	4898      	ldr	r0, [pc, #608]	; (80006ac <TMCsetup+0x334>)
 800044c:	f004 fb99 	bl	8004b82 <tmc2209_readInt>
 8000450:	4603      	mov	r3, r0
 8000452:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	019b      	lsls	r3, r3, #6
 800045a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800045e:	4313      	orrs	r3, r2
 8000460:	461a      	mov	r2, r3
 8000462:	2100      	movs	r1, #0
 8000464:	4891      	ldr	r0, [pc, #580]	; (80006ac <TMCsetup+0x334>)
 8000466:	f004 fb3c 	bl	8004ae2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800046a:	f000 ff4b 	bl	8001304 <HAL_GetTick>
 800046e:	4603      	mov	r3, r0
 8000470:	4619      	mov	r1, r3
 8000472:	488e      	ldr	r0, [pc, #568]	; (80006ac <TMCsetup+0x334>)
 8000474:	f004 fcbb 	bl	8004dee <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK, TMC2209_PDN_DISABLE_SHIFT);
 8000478:	2100      	movs	r1, #0
 800047a:	488c      	ldr	r0, [pc, #560]	; (80006ac <TMCsetup+0x334>)
 800047c:	f004 fb81 	bl	8004b82 <tmc2209_readInt>
 8000480:	4603      	mov	r3, r0
 8000482:	119b      	asrs	r3, r3, #6
 8000484:	f003 0301 	and.w	r3, r3, #1
 8000488:	607b      	str	r3, [r7, #4]
	printf("pdn_disable : %ld\r\n", value);
 800048a:	6879      	ldr	r1, [r7, #4]
 800048c:	488a      	ldr	r0, [pc, #552]	; (80006b8 <TMCsetup+0x340>)
 800048e:	f004 fd45 	bl	8004f1c <iprintf>

	value=300;
 8000492:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000496:	607b      	str	r3, [r7, #4]
	tmc2209_writeInt(&TMC2209, TMC2209_TCOOLTHRS, value);
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	2114      	movs	r1, #20
 800049c:	4883      	ldr	r0, [pc, #524]	; (80006ac <TMCsetup+0x334>)
 800049e:	f004 fb20 	bl	8004ae2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80004a2:	f000 ff2f 	bl	8001304 <HAL_GetTick>
 80004a6:	4603      	mov	r3, r0
 80004a8:	4619      	mov	r1, r3
 80004aa:	4880      	ldr	r0, [pc, #512]	; (80006ac <TMCsetup+0x334>)
 80004ac:	f004 fc9f 	bl	8004dee <tmc2209_periodicJob>
	printf("TCOOLTHRS: %ld\r\n", value);
 80004b0:	6879      	ldr	r1, [r7, #4]
 80004b2:	4882      	ldr	r0, [pc, #520]	; (80006bc <TMCsetup+0x344>)
 80004b4:	f004 fd32 	bl	8004f1c <iprintf>

	value=0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK,TMC2209_EN_SPREADCYCLE_SHIFT);
 80004bc:	2100      	movs	r1, #0
 80004be:	487b      	ldr	r0, [pc, #492]	; (80006ac <TMCsetup+0x334>)
 80004c0:	f004 fb5f 	bl	8004b82 <tmc2209_readInt>
 80004c4:	4603      	mov	r3, r0
 80004c6:	109b      	asrs	r3, r3, #2
 80004c8:	f003 0301 	and.w	r3, r3, #1
 80004cc:	607b      	str	r3, [r7, #4]
	printf("SPREADCYCLE : %ld\r\n", value);
 80004ce:	6879      	ldr	r1, [r7, #4]
 80004d0:	487b      	ldr	r0, [pc, #492]	; (80006c0 <TMCsetup+0x348>)
 80004d2:	f004 fd23 	bl	8004f1c <iprintf>
	value = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK, TMC2209_EN_SPREADCYCLE_SHIFT ,value);
 80004da:	2100      	movs	r1, #0
 80004dc:	4873      	ldr	r0, [pc, #460]	; (80006ac <TMCsetup+0x334>)
 80004de:	f004 fb50 	bl	8004b82 <tmc2209_readInt>
 80004e2:	4603      	mov	r3, r0
 80004e4:	f023 0204 	bic.w	r2, r3, #4
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	f003 0304 	and.w	r3, r3, #4
 80004f0:	4313      	orrs	r3, r2
 80004f2:	461a      	mov	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	486d      	ldr	r0, [pc, #436]	; (80006ac <TMCsetup+0x334>)
 80004f8:	f004 faf3 	bl	8004ae2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80004fc:	f000 ff02 	bl	8001304 <HAL_GetTick>
 8000500:	4603      	mov	r3, r0
 8000502:	4619      	mov	r1, r3
 8000504:	4869      	ldr	r0, [pc, #420]	; (80006ac <TMCsetup+0x334>)
 8000506:	f004 fc72 	bl	8004dee <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK,TMC2209_EN_SPREADCYCLE_SHIFT);
 800050a:	2100      	movs	r1, #0
 800050c:	4867      	ldr	r0, [pc, #412]	; (80006ac <TMCsetup+0x334>)
 800050e:	f004 fb38 	bl	8004b82 <tmc2209_readInt>
 8000512:	4603      	mov	r3, r0
 8000514:	109b      	asrs	r3, r3, #2
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
	printf("SPREADCYCLE : %ld\r\n", value);
 800051c:	6879      	ldr	r1, [r7, #4]
 800051e:	4868      	ldr	r0, [pc, #416]	; (80006c0 <TMCsetup+0x348>)
 8000520:	f004 fcfc 	bl	8004f1c <iprintf>
//	value=10;
//	tmc2209_writeInt(&TMC2209, TMC2209_TPWMTHRS, value);
//	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
//	printf("TPWMTHRS: %ld\r\n", value);

	value=0;
 8000524:	2300      	movs	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK,TMC2209_INTERNAL_RSENSE_SHIFT);
 8000528:	2100      	movs	r1, #0
 800052a:	4860      	ldr	r0, [pc, #384]	; (80006ac <TMCsetup+0x334>)
 800052c:	f004 fb29 	bl	8004b82 <tmc2209_readInt>
 8000530:	4603      	mov	r3, r0
 8000532:	105b      	asrs	r3, r3, #1
 8000534:	f003 0301 	and.w	r3, r3, #1
 8000538:	607b      	str	r3, [r7, #4]
	printf("RSENSE : %ld\r\n", value);
 800053a:	6879      	ldr	r1, [r7, #4]
 800053c:	4861      	ldr	r0, [pc, #388]	; (80006c4 <TMCsetup+0x34c>)
 800053e:	f004 fced 	bl	8004f1c <iprintf>
	value = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK, TMC2209_INTERNAL_RSENSE_SHIFT, value);
 8000546:	2100      	movs	r1, #0
 8000548:	4858      	ldr	r0, [pc, #352]	; (80006ac <TMCsetup+0x334>)
 800054a:	f004 fb1a 	bl	8004b82 <tmc2209_readInt>
 800054e:	4603      	mov	r3, r0
 8000550:	f023 0202 	bic.w	r2, r3, #2
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	f003 0302 	and.w	r3, r3, #2
 800055c:	4313      	orrs	r3, r2
 800055e:	461a      	mov	r2, r3
 8000560:	2100      	movs	r1, #0
 8000562:	4852      	ldr	r0, [pc, #328]	; (80006ac <TMCsetup+0x334>)
 8000564:	f004 fabd 	bl	8004ae2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000568:	f000 fecc 	bl	8001304 <HAL_GetTick>
 800056c:	4603      	mov	r3, r0
 800056e:	4619      	mov	r1, r3
 8000570:	484e      	ldr	r0, [pc, #312]	; (80006ac <TMCsetup+0x334>)
 8000572:	f004 fc3c 	bl	8004dee <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK, TMC2209_INTERNAL_RSENSE_SHIFT);
 8000576:	2100      	movs	r1, #0
 8000578:	484c      	ldr	r0, [pc, #304]	; (80006ac <TMCsetup+0x334>)
 800057a:	f004 fb02 	bl	8004b82 <tmc2209_readInt>
 800057e:	4603      	mov	r3, r0
 8000580:	105b      	asrs	r3, r3, #1
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	607b      	str	r3, [r7, #4]
	printf("RSENSE : %ld\r\n", value);
 8000588:	6879      	ldr	r1, [r7, #4]
 800058a:	484e      	ldr	r0, [pc, #312]	; (80006c4 <TMCsetup+0x34c>)
 800058c:	f004 fcc6 	bl	8004f1c <iprintf>

	value=0;
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_FREQ_MASK, TMC2209_PWM_FREQ_SHIFT);
 8000594:	2170      	movs	r1, #112	; 0x70
 8000596:	4845      	ldr	r0, [pc, #276]	; (80006ac <TMCsetup+0x334>)
 8000598:	f004 faf3 	bl	8004b82 <tmc2209_readInt>
 800059c:	4603      	mov	r3, r0
 800059e:	141b      	asrs	r3, r3, #16
 80005a0:	f003 0303 	and.w	r3, r3, #3
 80005a4:	607b      	str	r3, [r7, #4]
	printf("PWM_FREQ : %ld\r\n", value);
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	4847      	ldr	r0, [pc, #284]	; (80006c8 <TMCsetup+0x350>)
 80005aa:	f004 fcb7 	bl	8004f1c <iprintf>
	value=1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_FREQ_MASK, TMC2209_PWM_FREQ_SHIFT, value);
 80005b2:	2170      	movs	r1, #112	; 0x70
 80005b4:	483d      	ldr	r0, [pc, #244]	; (80006ac <TMCsetup+0x334>)
 80005b6:	f004 fae4 	bl	8004b82 <tmc2209_readInt>
 80005ba:	4603      	mov	r3, r0
 80005bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	041b      	lsls	r3, r3, #16
 80005c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80005c8:	4313      	orrs	r3, r2
 80005ca:	461a      	mov	r2, r3
 80005cc:	2170      	movs	r1, #112	; 0x70
 80005ce:	4837      	ldr	r0, [pc, #220]	; (80006ac <TMCsetup+0x334>)
 80005d0:	f004 fa87 	bl	8004ae2 <tmc2209_writeInt>
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_FREQ_MASK, TMC2209_PWM_FREQ_SHIFT);
 80005d4:	2170      	movs	r1, #112	; 0x70
 80005d6:	4835      	ldr	r0, [pc, #212]	; (80006ac <TMCsetup+0x334>)
 80005d8:	f004 fad3 	bl	8004b82 <tmc2209_readInt>
 80005dc:	4603      	mov	r3, r0
 80005de:	141b      	asrs	r3, r3, #16
 80005e0:	f003 0303 	and.w	r3, r3, #3
 80005e4:	607b      	str	r3, [r7, #4]
	printf("PWM_FREQ : %ld\r\n", value);
 80005e6:	6879      	ldr	r1, [r7, #4]
 80005e8:	4837      	ldr	r0, [pc, #220]	; (80006c8 <TMCsetup+0x350>)
 80005ea:	f004 fc97 	bl	8004f1c <iprintf>

	value=0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209,TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT);
 80005f2:	2142      	movs	r1, #66	; 0x42
 80005f4:	482d      	ldr	r0, [pc, #180]	; (80006ac <TMCsetup+0x334>)
 80005f6:	f004 fac4 	bl	8004b82 <tmc2209_readInt>
 80005fa:	4603      	mov	r3, r0
 80005fc:	13db      	asrs	r3, r3, #15
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	607b      	str	r3, [r7, #4]
	printf("SEIMIN : %ld\r\n", value);
 8000604:	6879      	ldr	r1, [r7, #4]
 8000606:	4831      	ldr	r0, [pc, #196]	; (80006cc <TMCsetup+0x354>)
 8000608:	f004 fc88 	bl	8004f1c <iprintf>

	value=0;
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_DRVSTATUS, TMC2209_CS_ACTUAL_MASK, TMC2209_CS_ACTUAL_SHIFT);
 8000610:	216f      	movs	r1, #111	; 0x6f
 8000612:	4826      	ldr	r0, [pc, #152]	; (80006ac <TMCsetup+0x334>)
 8000614:	f004 fab5 	bl	8004b82 <tmc2209_readInt>
 8000618:	4603      	mov	r3, r0
 800061a:	141b      	asrs	r3, r3, #16
 800061c:	f003 031f 	and.w	r3, r3, #31
 8000620:	607b      	str	r3, [r7, #4]
	printf("DRVSTATUS : %ld\r\n", value);
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	482a      	ldr	r0, [pc, #168]	; (80006d0 <TMCsetup+0x358>)
 8000626:	f004 fc79 	bl	8004f1c <iprintf>

	value=0;
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK,TMC2209_MSTEP_REG_SELECT_SHIFT);	//uartでのmicrostepの有効化
 800062e:	2100      	movs	r1, #0
 8000630:	481e      	ldr	r0, [pc, #120]	; (80006ac <TMCsetup+0x334>)
 8000632:	f004 faa6 	bl	8004b82 <tmc2209_readInt>
 8000636:	4603      	mov	r3, r0
 8000638:	11db      	asrs	r3, r3, #7
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	607b      	str	r3, [r7, #4]
	printf("mstep_before : %ld\r\n", value);
 8000640:	6879      	ldr	r1, [r7, #4]
 8000642:	4824      	ldr	r0, [pc, #144]	; (80006d4 <TMCsetup+0x35c>)
 8000644:	f004 fc6a 	bl	8004f1c <iprintf>
	value = 1;
 8000648:	2301      	movs	r3, #1
 800064a:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT,value);
 800064c:	2100      	movs	r1, #0
 800064e:	4817      	ldr	r0, [pc, #92]	; (80006ac <TMCsetup+0x334>)
 8000650:	f004 fa97 	bl	8004b82 <tmc2209_readInt>
 8000654:	4603      	mov	r3, r0
 8000656:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	01db      	lsls	r3, r3, #7
 800065e:	b2db      	uxtb	r3, r3
 8000660:	4313      	orrs	r3, r2
 8000662:	461a      	mov	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	4811      	ldr	r0, [pc, #68]	; (80006ac <TMCsetup+0x334>)
 8000668:	f004 fa3b 	bl	8004ae2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800066c:	f000 fe4a 	bl	8001304 <HAL_GetTick>
 8000670:	4603      	mov	r3, r0
 8000672:	4619      	mov	r1, r3
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <TMCsetup+0x334>)
 8000676:	f004 fbba 	bl	8004dee <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT);
 800067a:	2100      	movs	r1, #0
 800067c:	480b      	ldr	r0, [pc, #44]	; (80006ac <TMCsetup+0x334>)
 800067e:	f004 fa80 	bl	8004b82 <tmc2209_readInt>
 8000682:	4603      	mov	r3, r0
 8000684:	11db      	asrs	r3, r3, #7
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	607b      	str	r3, [r7, #4]
	printf("mstep_after : %ld\r\n", value);
 800068c:	6879      	ldr	r1, [r7, #4]
 800068e:	4812      	ldr	r0, [pc, #72]	; (80006d8 <TMCsetup+0x360>)
 8000690:	f004 fc44 	bl	8004f1c <iprintf>

	value=0;
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);	//保持トルクの設定
 8000698:	216c      	movs	r1, #108	; 0x6c
 800069a:	4804      	ldr	r0, [pc, #16]	; (80006ac <TMCsetup+0x334>)
 800069c:	f004 fa71 	bl	8004b82 <tmc2209_readInt>
 80006a0:	4603      	mov	r3, r0
 80006a2:	f003 030f 	and.w	r3, r3, #15
 80006a6:	607b      	str	r3, [r7, #4]
	printf("toff_before : %ld\r\n", value);
 80006a8:	6879      	ldr	r1, [r7, #4]
 80006aa:	e017      	b.n	80006dc <TMCsetup+0x364>
 80006ac:	20000194 	.word	0x20000194
 80006b0:	080060f4 	.word	0x080060f4
 80006b4:	08006100 	.word	0x08006100
 80006b8:	08006110 	.word	0x08006110
 80006bc:	08006124 	.word	0x08006124
 80006c0:	08006138 	.word	0x08006138
 80006c4:	0800614c 	.word	0x0800614c
 80006c8:	0800615c 	.word	0x0800615c
 80006cc:	08006170 	.word	0x08006170
 80006d0:	08006180 	.word	0x08006180
 80006d4:	08006194 	.word	0x08006194
 80006d8:	080061ac 	.word	0x080061ac
 80006dc:	48c8      	ldr	r0, [pc, #800]	; (8000a00 <TMCsetup+0x688>)
 80006de:	f004 fc1d 	bl	8004f1c <iprintf>
	value = 3;
 80006e2:	2303      	movs	r3, #3
 80006e4:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT,value);
 80006e6:	216c      	movs	r1, #108	; 0x6c
 80006e8:	48c6      	ldr	r0, [pc, #792]	; (8000a04 <TMCsetup+0x68c>)
 80006ea:	f004 fa4a 	bl	8004b82 <tmc2209_readInt>
 80006ee:	4603      	mov	r3, r0
 80006f0:	f023 020f 	bic.w	r2, r3, #15
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f003 030f 	and.w	r3, r3, #15
 80006fa:	4313      	orrs	r3, r2
 80006fc:	461a      	mov	r2, r3
 80006fe:	216c      	movs	r1, #108	; 0x6c
 8000700:	48c0      	ldr	r0, [pc, #768]	; (8000a04 <TMCsetup+0x68c>)
 8000702:	f004 f9ee 	bl	8004ae2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000706:	f000 fdfd 	bl	8001304 <HAL_GetTick>
 800070a:	4603      	mov	r3, r0
 800070c:	4619      	mov	r1, r3
 800070e:	48bd      	ldr	r0, [pc, #756]	; (8000a04 <TMCsetup+0x68c>)
 8000710:	f004 fb6d 	bl	8004dee <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 8000714:	216c      	movs	r1, #108	; 0x6c
 8000716:	48bb      	ldr	r0, [pc, #748]	; (8000a04 <TMCsetup+0x68c>)
 8000718:	f004 fa33 	bl	8004b82 <tmc2209_readInt>
 800071c:	4603      	mov	r3, r0
 800071e:	f003 030f 	and.w	r3, r3, #15
 8000722:	607b      	str	r3, [r7, #4]
	printf("toff_after : %ld\r\n", value);
 8000724:	6879      	ldr	r1, [r7, #4]
 8000726:	48b8      	ldr	r0, [pc, #736]	; (8000a08 <TMCsetup+0x690>)
 8000728:	f004 fbf8 	bl	8004f1c <iprintf>

	value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);	//microstepの設定
 800072c:	216c      	movs	r1, #108	; 0x6c
 800072e:	48b5      	ldr	r0, [pc, #724]	; (8000a04 <TMCsetup+0x68c>)
 8000730:	f004 fa27 	bl	8004b82 <tmc2209_readInt>
 8000734:	4603      	mov	r3, r0
 8000736:	161b      	asrs	r3, r3, #24
 8000738:	f003 030f 	and.w	r3, r3, #15
 800073c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000740:	fa42 f303 	asr.w	r3, r2, r3
 8000744:	607b      	str	r3, [r7, #4]
	printf("microstep_before : %ld\r\n", value);
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	48b0      	ldr	r0, [pc, #704]	; (8000a0c <TMCsetup+0x694>)
 800074a:	f004 fbe7 	bl	8004f1c <iprintf>
	value = 4;
 800074e:	2304      	movs	r3, #4
 8000750:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT,value);
 8000752:	216c      	movs	r1, #108	; 0x6c
 8000754:	48ab      	ldr	r0, [pc, #684]	; (8000a04 <TMCsetup+0x68c>)
 8000756:	f004 fa14 	bl	8004b82 <tmc2209_readInt>
 800075a:	4603      	mov	r3, r0
 800075c:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	061b      	lsls	r3, r3, #24
 8000764:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000768:	4313      	orrs	r3, r2
 800076a:	461a      	mov	r2, r3
 800076c:	216c      	movs	r1, #108	; 0x6c
 800076e:	48a5      	ldr	r0, [pc, #660]	; (8000a04 <TMCsetup+0x68c>)
 8000770:	f004 f9b7 	bl	8004ae2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000774:	f000 fdc6 	bl	8001304 <HAL_GetTick>
 8000778:	4603      	mov	r3, r0
 800077a:	4619      	mov	r1, r3
 800077c:	48a1      	ldr	r0, [pc, #644]	; (8000a04 <TMCsetup+0x68c>)
 800077e:	f004 fb36 	bl	8004dee <tmc2209_periodicJob>
	value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);
 8000782:	216c      	movs	r1, #108	; 0x6c
 8000784:	489f      	ldr	r0, [pc, #636]	; (8000a04 <TMCsetup+0x68c>)
 8000786:	f004 f9fc 	bl	8004b82 <tmc2209_readInt>
 800078a:	4603      	mov	r3, r0
 800078c:	161b      	asrs	r3, r3, #24
 800078e:	f003 030f 	and.w	r3, r3, #15
 8000792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000796:	fa42 f303 	asr.w	r3, r2, r3
 800079a:	607b      	str	r3, [r7, #4]
	printf("microstep_after : %ld\r\n", value);
 800079c:	6879      	ldr	r1, [r7, #4]
 800079e:	489c      	ldr	r0, [pc, #624]	; (8000a10 <TMCsetup+0x698>)
 80007a0:	f004 fbbc 	bl	8004f1c <iprintf>

	value=4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT, value);
 80007a8:	2110      	movs	r1, #16
 80007aa:	4896      	ldr	r0, [pc, #600]	; (8000a04 <TMCsetup+0x68c>)
 80007ac:	f004 f9e9 	bl	8004b82 <tmc2209_readInt>
 80007b0:	4603      	mov	r3, r0
 80007b2:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	041b      	lsls	r3, r3, #16
 80007ba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80007be:	4313      	orrs	r3, r2
 80007c0:	461a      	mov	r2, r3
 80007c2:	2110      	movs	r1, #16
 80007c4:	488f      	ldr	r0, [pc, #572]	; (8000a04 <TMCsetup+0x68c>)
 80007c6:	f004 f98c 	bl	8004ae2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80007ca:	f000 fd9b 	bl	8001304 <HAL_GetTick>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4619      	mov	r1, r3
 80007d2:	488c      	ldr	r0, [pc, #560]	; (8000a04 <TMCsetup+0x68c>)
 80007d4:	f004 fb0b 	bl	8004dee <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT);
 80007d8:	2110      	movs	r1, #16
 80007da:	488a      	ldr	r0, [pc, #552]	; (8000a04 <TMCsetup+0x68c>)
 80007dc:	f004 f9d1 	bl	8004b82 <tmc2209_readInt>
 80007e0:	4603      	mov	r3, r0
 80007e2:	141b      	asrs	r3, r3, #16
 80007e4:	f003 030f 	and.w	r3, r3, #15
 80007e8:	607b      	str	r3, [r7, #4]
	printf("IHOLDDELAY: %ld\r\n", value);
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	4889      	ldr	r0, [pc, #548]	; (8000a14 <TMCsetup+0x69c>)
 80007ee:	f004 fb95 	bl	8004f1c <iprintf>

	value=100;											//SG_RESULTと比較して、
 80007f2:	2364      	movs	r3, #100	; 0x64
 80007f4:	607b      	str	r3, [r7, #4]
	tmc2209_writeInt(&TMC2209, TMC2209_SGTHRS, value);
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	2140      	movs	r1, #64	; 0x40
 80007fa:	4882      	ldr	r0, [pc, #520]	; (8000a04 <TMCsetup+0x68c>)
 80007fc:	f004 f971 	bl	8004ae2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000800:	f000 fd80 	bl	8001304 <HAL_GetTick>
 8000804:	4603      	mov	r3, r0
 8000806:	4619      	mov	r1, r3
 8000808:	487e      	ldr	r0, [pc, #504]	; (8000a04 <TMCsetup+0x68c>)
 800080a:	f004 faf0 	bl	8004dee <tmc2209_periodicJob>
	value = tmc2209_readInt(&TMC2209, TMC2209_SGTHRS);
 800080e:	2140      	movs	r1, #64	; 0x40
 8000810:	487c      	ldr	r0, [pc, #496]	; (8000a04 <TMCsetup+0x68c>)
 8000812:	f004 f9b6 	bl	8004b82 <tmc2209_readInt>
 8000816:	6078      	str	r0, [r7, #4]
	printf("SGTHRS: %ld\r\n", value);
 8000818:	6879      	ldr	r1, [r7, #4]
 800081a:	487f      	ldr	r0, [pc, #508]	; (8000a18 <TMCsetup+0x6a0>)
 800081c:	f004 fb7e 	bl	8004f1c <iprintf>

	value = 100;
 8000820:	2364      	movs	r3, #100	; 0x64
 8000822:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT, value);
 8000824:	2170      	movs	r1, #112	; 0x70
 8000826:	4877      	ldr	r0, [pc, #476]	; (8000a04 <TMCsetup+0x68c>)
 8000828:	f004 f9ab 	bl	8004b82 <tmc2209_readInt>
 800082c:	4603      	mov	r3, r0
 800082e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	021b      	lsls	r3, r3, #8
 8000836:	b29b      	uxth	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	461a      	mov	r2, r3
 800083c:	2170      	movs	r1, #112	; 0x70
 800083e:	4871      	ldr	r0, [pc, #452]	; (8000a04 <TMCsetup+0x68c>)
 8000840:	f004 f94f 	bl	8004ae2 <tmc2209_writeInt>
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT);
 8000844:	2170      	movs	r1, #112	; 0x70
 8000846:	486f      	ldr	r0, [pc, #444]	; (8000a04 <TMCsetup+0x68c>)
 8000848:	f004 f99b 	bl	8004b82 <tmc2209_readInt>
 800084c:	4603      	mov	r3, r0
 800084e:	121b      	asrs	r3, r3, #8
 8000850:	b2db      	uxtb	r3, r3
 8000852:	607b      	str	r3, [r7, #4]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000854:	f000 fd56 	bl	8001304 <HAL_GetTick>
 8000858:	4603      	mov	r3, r0
 800085a:	4619      	mov	r1, r3
 800085c:	4869      	ldr	r0, [pc, #420]	; (8000a04 <TMCsetup+0x68c>)
 800085e:	f004 fac6 	bl	8004dee <tmc2209_periodicJob>
	printf("PWM_GRAD: %ld\r\n", value);
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	486d      	ldr	r0, [pc, #436]	; (8000a1c <TMCsetup+0x6a4>)
 8000866:	f004 fb59 	bl	8004f1c <iprintf>


	value=5;
 800086a:	2305      	movs	r3, #5
 800086c:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEMIN_MASK, TMC2209_SEMIN_SHIFT, value);
 800086e:	2142      	movs	r1, #66	; 0x42
 8000870:	4864      	ldr	r0, [pc, #400]	; (8000a04 <TMCsetup+0x68c>)
 8000872:	f004 f986 	bl	8004b82 <tmc2209_readInt>
 8000876:	4603      	mov	r3, r0
 8000878:	f023 020f 	bic.w	r2, r3, #15
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	4313      	orrs	r3, r2
 8000884:	461a      	mov	r2, r3
 8000886:	2142      	movs	r1, #66	; 0x42
 8000888:	485e      	ldr	r0, [pc, #376]	; (8000a04 <TMCsetup+0x68c>)
 800088a:	f004 f92a 	bl	8004ae2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800088e:	f000 fd39 	bl	8001304 <HAL_GetTick>
 8000892:	4603      	mov	r3, r0
 8000894:	4619      	mov	r1, r3
 8000896:	485b      	ldr	r0, [pc, #364]	; (8000a04 <TMCsetup+0x68c>)
 8000898:	f004 faa9 	bl	8004dee <tmc2209_periodicJob>
	printf("SEMIN: %ld\r\n", value);
 800089c:	6879      	ldr	r1, [r7, #4]
 800089e:	4860      	ldr	r0, [pc, #384]	; (8000a20 <TMCsetup+0x6a8>)
 80008a0:	f004 fb3c 	bl	8004f1c <iprintf>

	value = 2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEMAX_MASK, TMC2209_SEMAX_SHIFT, value);
 80008a8:	2142      	movs	r1, #66	; 0x42
 80008aa:	4856      	ldr	r0, [pc, #344]	; (8000a04 <TMCsetup+0x68c>)
 80008ac:	f004 f969 	bl	8004b82 <tmc2209_readInt>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80008be:	4313      	orrs	r3, r2
 80008c0:	461a      	mov	r2, r3
 80008c2:	2142      	movs	r1, #66	; 0x42
 80008c4:	484f      	ldr	r0, [pc, #316]	; (8000a04 <TMCsetup+0x68c>)
 80008c6:	f004 f90c 	bl	8004ae2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80008ca:	f000 fd1b 	bl	8001304 <HAL_GetTick>
 80008ce:	4603      	mov	r3, r0
 80008d0:	4619      	mov	r1, r3
 80008d2:	484c      	ldr	r0, [pc, #304]	; (8000a04 <TMCsetup+0x68c>)
 80008d4:	f004 fa8b 	bl	8004dee <tmc2209_periodicJob>
	printf("SEMAX: %ld\r\n", value);
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	4852      	ldr	r0, [pc, #328]	; (8000a24 <TMCsetup+0x6ac>)
 80008dc:	f004 fb1e 	bl	8004f1c <iprintf>

	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT);
 80008e0:	216c      	movs	r1, #108	; 0x6c
 80008e2:	4848      	ldr	r0, [pc, #288]	; (8000a04 <TMCsetup+0x68c>)
 80008e4:	f004 f94d 	bl	8004b82 <tmc2209_readInt>
 80008e8:	4603      	mov	r3, r0
 80008ea:	13db      	asrs	r3, r3, #15
 80008ec:	f003 0303 	and.w	r3, r3, #3
 80008f0:	607b      	str	r3, [r7, #4]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80008f2:	f000 fd07 	bl	8001304 <HAL_GetTick>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4619      	mov	r1, r3
 80008fa:	4842      	ldr	r0, [pc, #264]	; (8000a04 <TMCsetup+0x68c>)
 80008fc:	f004 fa77 	bl	8004dee <tmc2209_periodicJob>
	value = 1;
 8000900:	2301      	movs	r3, #1
 8000902:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT, value);
 8000904:	216c      	movs	r1, #108	; 0x6c
 8000906:	483f      	ldr	r0, [pc, #252]	; (8000a04 <TMCsetup+0x68c>)
 8000908:	f004 f93b 	bl	8004b82 <tmc2209_readInt>
 800090c:	4603      	mov	r3, r0
 800090e:	f423 32c0 	bic.w	r2, r3, #98304	; 0x18000
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	03db      	lsls	r3, r3, #15
 8000916:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800091a:	4313      	orrs	r3, r2
 800091c:	461a      	mov	r2, r3
 800091e:	216c      	movs	r1, #108	; 0x6c
 8000920:	4838      	ldr	r0, [pc, #224]	; (8000a04 <TMCsetup+0x68c>)
 8000922:	f004 f8de 	bl	8004ae2 <tmc2209_writeInt>
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT);
 8000926:	216c      	movs	r1, #108	; 0x6c
 8000928:	4836      	ldr	r0, [pc, #216]	; (8000a04 <TMCsetup+0x68c>)
 800092a:	f004 f92a 	bl	8004b82 <tmc2209_readInt>
 800092e:	4603      	mov	r3, r0
 8000930:	13db      	asrs	r3, r3, #15
 8000932:	f003 0303 	and.w	r3, r3, #3
 8000936:	607b      	str	r3, [r7, #4]
	printf("TBL: %ld\r\n", value);
 8000938:	6879      	ldr	r1, [r7, #4]
 800093a:	483b      	ldr	r0, [pc, #236]	; (8000a28 <TMCsetup+0x6b0>)
 800093c:	f004 faee 	bl	8004f1c <iprintf>

	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT);
 8000940:	2170      	movs	r1, #112	; 0x70
 8000942:	4830      	ldr	r0, [pc, #192]	; (8000a04 <TMCsetup+0x68c>)
 8000944:	f004 f91d 	bl	8004b82 <tmc2209_readInt>
 8000948:	4603      	mov	r3, r0
 800094a:	121b      	asrs	r3, r3, #8
 800094c:	b2db      	uxtb	r3, r3
 800094e:	607b      	str	r3, [r7, #4]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000950:	f000 fcd8 	bl	8001304 <HAL_GetTick>
 8000954:	4603      	mov	r3, r0
 8000956:	4619      	mov	r1, r3
 8000958:	482a      	ldr	r0, [pc, #168]	; (8000a04 <TMCsetup+0x68c>)
 800095a:	f004 fa48 	bl	8004dee <tmc2209_periodicJob>
	printf("PWM_GRAD: %ld\r\n", value);
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	482e      	ldr	r0, [pc, #184]	; (8000a1c <TMCsetup+0x6a4>)
 8000962:	f004 fadb 	bl	8004f1c <iprintf>

	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_AUTOSCALE_MASK, TMC2209_PWM_AUTOSCALE_SHIFT);
 8000966:	2170      	movs	r1, #112	; 0x70
 8000968:	4826      	ldr	r0, [pc, #152]	; (8000a04 <TMCsetup+0x68c>)
 800096a:	f004 f90a 	bl	8004b82 <tmc2209_readInt>
 800096e:	4603      	mov	r3, r0
 8000970:	149b      	asrs	r3, r3, #18
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000978:	f000 fcc4 	bl	8001304 <HAL_GetTick>
 800097c:	4603      	mov	r3, r0
 800097e:	4619      	mov	r1, r3
 8000980:	4820      	ldr	r0, [pc, #128]	; (8000a04 <TMCsetup+0x68c>)
 8000982:	f004 fa34 	bl	8004dee <tmc2209_periodicJob>
	printf("autoscale: %ld\r\n", value);
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	4828      	ldr	r0, [pc, #160]	; (8000a2c <TMCsetup+0x6b4>)
 800098a:	f004 fac7 	bl	8004f1c <iprintf>

	value = tmc2209_readInt(&TMC2209,TMC2209_PWM_AUTO);
 800098e:	2172      	movs	r1, #114	; 0x72
 8000990:	481c      	ldr	r0, [pc, #112]	; (8000a04 <TMCsetup+0x68c>)
 8000992:	f004 f8f6 	bl	8004b82 <tmc2209_readInt>
 8000996:	6078      	str	r0, [r7, #4]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000998:	f000 fcb4 	bl	8001304 <HAL_GetTick>
 800099c:	4603      	mov	r3, r0
 800099e:	4619      	mov	r1, r3
 80009a0:	4818      	ldr	r0, [pc, #96]	; (8000a04 <TMCsetup+0x68c>)
 80009a2:	f004 fa24 	bl	8004dee <tmc2209_periodicJob>
	printf("PWMAuto: %ld\r\n", value);
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	4821      	ldr	r0, [pc, #132]	; (8000a30 <TMCsetup+0x6b8>)
 80009aa:	f004 fab7 	bl	8004f1c <iprintf>

	value = tmc2209_readInt(&TMC2209,TMC2209_PWMSCALE);
 80009ae:	2171      	movs	r1, #113	; 0x71
 80009b0:	4814      	ldr	r0, [pc, #80]	; (8000a04 <TMCsetup+0x68c>)
 80009b2:	f004 f8e6 	bl	8004b82 <tmc2209_readInt>
 80009b6:	6078      	str	r0, [r7, #4]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80009b8:	f000 fca4 	bl	8001304 <HAL_GetTick>
 80009bc:	4603      	mov	r3, r0
 80009be:	4619      	mov	r1, r3
 80009c0:	4810      	ldr	r0, [pc, #64]	; (8000a04 <TMCsetup+0x68c>)
 80009c2:	f004 fa14 	bl	8004dee <tmc2209_periodicJob>
	printf("PWMSCALE: %ld\r\n", value);
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	481a      	ldr	r0, [pc, #104]	; (8000a34 <TMCsetup+0x6bc>)
 80009ca:	f004 faa7 	bl	8004f1c <iprintf>

	value = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, 0x07, TMC2209_FCLKTRIM_MASK, TMC2209_FCLKTRIM_SHIFT);
 80009d2:	2107      	movs	r1, #7
 80009d4:	480b      	ldr	r0, [pc, #44]	; (8000a04 <TMCsetup+0x68c>)
 80009d6:	f004 f8d4 	bl	8004b82 <tmc2209_readInt>
 80009da:	4603      	mov	r3, r0
 80009dc:	f003 031f 	and.w	r3, r3, #31
 80009e0:	607b      	str	r3, [r7, #4]

	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80009e2:	f000 fc8f 	bl	8001304 <HAL_GetTick>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4619      	mov	r1, r3
 80009ea:	4806      	ldr	r0, [pc, #24]	; (8000a04 <TMCsetup+0x68c>)
 80009ec:	f004 f9ff 	bl	8004dee <tmc2209_periodicJob>
	printf("frequency: %ld\r\n", value);
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	4811      	ldr	r0, [pc, #68]	; (8000a38 <TMCsetup+0x6c0>)
 80009f4:	f004 fa92 	bl	8004f1c <iprintf>

}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	080061c0 	.word	0x080061c0
 8000a04:	20000194 	.word	0x20000194
 8000a08:	080061d4 	.word	0x080061d4
 8000a0c:	080061e8 	.word	0x080061e8
 8000a10:	08006204 	.word	0x08006204
 8000a14:	0800621c 	.word	0x0800621c
 8000a18:	08006230 	.word	0x08006230
 8000a1c:	08006240 	.word	0x08006240
 8000a20:	08006250 	.word	0x08006250
 8000a24:	08006260 	.word	0x08006260
 8000a28:	08006270 	.word	0x08006270
 8000a2c:	0800627c 	.word	0x0800627c
 8000a30:	08006290 	.word	0x08006290
 8000a34:	080062a0 	.word	0x080062a0
 8000a38:	080062b0 	.word	0x080062b0

08000a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a3c:	b5b0      	push	{r4, r5, r7, lr}
 8000a3e:	b08c      	sub	sp, #48	; 0x30
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8000a42:	4b87      	ldr	r3, [pc, #540]	; (8000c60 <main+0x224>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f004 faf4 	bl	8005038 <setbuf>
	//uint8_t buffer[256];
	//char rxbuf[1];
	char start[] ="1:front,2:back\r\n";
 8000a50:	4b84      	ldr	r3, [pc, #528]	; (8000c64 <main+0x228>)
 8000a52:	f107 0418 	add.w	r4, r7, #24
 8000a56:	461d      	mov	r5, r3
 8000a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a5c:	682b      	ldr	r3, [r5, #0]
 8000a5e:	7023      	strb	r3, [r4, #0]
//	char front[] ="front turn\r\n";
//	char back[] ="back turn\r\n";
	char nonans[] ="Not Understand \r\n";
 8000a60:	4b81      	ldr	r3, [pc, #516]	; (8000c68 <main+0x22c>)
 8000a62:	1d3c      	adds	r4, r7, #4
 8000a64:	461d      	mov	r5, r3
 8000a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6a:	682b      	ldr	r3, [r5, #0]
 8000a6c:	8023      	strh	r3, [r4, #0]
	char rxbuf[1];
	uint32_t value=0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a72:	f000 fbed 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a76:	f000 f905 	bl	8000c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7a:	f000 f9bb 	bl	8000df4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a7e:	f000 f989 	bl	8000d94 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000a82:	f000 f957 	bl	8000d34 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //int getserial=0;
  TMC2209_INIT();
 8000a86:	f7ff fc3f 	bl	8000308 <TMC2209_INIT>
//  TMCsetup();
  printf("Hello\r\n");
 8000a8a:	4878      	ldr	r0, [pc, #480]	; (8000c6c <main+0x230>)
 8000a8c:	f004 facc 	bl	8005028 <puts>
  HAL_UART_Transmit(&huart2,(uint8_t *)start,sizeof(start),3000);
 8000a90:	f107 0118 	add.w	r1, r7, #24
 8000a94:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a98:	2211      	movs	r2, #17
 8000a9a:	4875      	ldr	r0, [pc, #468]	; (8000c70 <main+0x234>)
 8000a9c:	f002 fbd6 	bl	800324c <HAL_UART_Transmit>
  //HAL_TIM_Base_Start_IT(&htim2);
//  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);

  rxbuf[0]=0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	703b      	strb	r3, [r7, #0]
  uartflag1=0;
 8000aa4:	4b73      	ldr	r3, [pc, #460]	; (8000c74 <main+0x238>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
  uint8_t stall_value=0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    /* USER CODE BEGIN 3 */
//	  currentcheck();
	  //example read register value
	  //int32_t value = 0;
	  HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	486e      	ldr	r0, [pc, #440]	; (8000c70 <main+0x234>)
 8000ab8:	f002 fd2d 	bl	8003516 <HAL_UART_Receive_IT>
//	  while(uartflag1==0){
//		  ;
//	  }
	  HAL_UART_Transmit(&huart2,(uint8_t *)rxbuf,sizeof(rxbuf),100);
 8000abc:	4639      	mov	r1, r7
 8000abe:	2364      	movs	r3, #100	; 0x64
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	486b      	ldr	r0, [pc, #428]	; (8000c70 <main+0x234>)
 8000ac4:	f002 fbc2 	bl	800324c <HAL_UART_Transmit>
//	  stall_value=0;
	  stall_value=TMC2209_FIELD_READ(&TMC2209, 0x06, TMC2209_DIAG_MASK, TMC2209_DIAG_SHIFT);
 8000ac8:	2106      	movs	r1, #6
 8000aca:	486b      	ldr	r0, [pc, #428]	; (8000c78 <main+0x23c>)
 8000acc:	f004 f859 	bl	8004b82 <tmc2209_readInt>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	111b      	asrs	r3, r3, #4
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	  HAL_Delay(10);
 8000ade:	200a      	movs	r0, #10
 8000ae0:	f000 fc1c 	bl	800131c <HAL_Delay>
//	  printf("stall: %d \r\n",stall_value);
	  if(stall_value==1){
 8000ae4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d11c      	bne.n	8000b26 <main+0xea>
		  value = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
		  TMC2209_FIELD_UPDATE(&TMC2209, 0x22, TMC2209_VACTUAL_MASK, TMC2209_VACTUAL_SHIFT,value);
 8000af0:	2122      	movs	r1, #34	; 0x22
 8000af2:	4861      	ldr	r0, [pc, #388]	; (8000c78 <main+0x23c>)
 8000af4:	f004 f845 	bl	8004b82 <tmc2209_readInt>
 8000af8:	4603      	mov	r3, r0
 8000afa:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000b04:	4313      	orrs	r3, r2
 8000b06:	461a      	mov	r2, r3
 8000b08:	2122      	movs	r1, #34	; 0x22
 8000b0a:	485b      	ldr	r0, [pc, #364]	; (8000c78 <main+0x23c>)
 8000b0c:	f003 ffe9 	bl	8004ae2 <tmc2209_writeInt>
		  printf("stall:\r\n");
 8000b10:	485a      	ldr	r0, [pc, #360]	; (8000c7c <main+0x240>)
 8000b12:	f004 fa89 	bl	8005028 <puts>
		  stall_value=0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		  while(uartflag1!=1){
 8000b1c:	bf00      	nop
 8000b1e:	4b55      	ldr	r3, [pc, #340]	; (8000c74 <main+0x238>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d1fb      	bne.n	8000b1e <main+0xe2>

		  }
	  }

	  if(rxbuf[0]!=0 && uartflag1==1){
 8000b26:	783b      	ldrb	r3, [r7, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d07e      	beq.n	8000c2a <main+0x1ee>
 8000b2c:	4b51      	ldr	r3, [pc, #324]	; (8000c74 <main+0x238>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d17a      	bne.n	8000c2a <main+0x1ee>
		  switch(rxbuf[0]){
 8000b34:	783b      	ldrb	r3, [r7, #0]
 8000b36:	2b73      	cmp	r3, #115	; 0x73
 8000b38:	d00e      	beq.n	8000b58 <main+0x11c>
 8000b3a:	2b73      	cmp	r3, #115	; 0x73
 8000b3c:	dc68      	bgt.n	8000c10 <main+0x1d4>
 8000b3e:	2b64      	cmp	r3, #100	; 0x64
 8000b40:	d025      	beq.n	8000b8e <main+0x152>
 8000b42:	2b64      	cmp	r3, #100	; 0x64
 8000b44:	dc64      	bgt.n	8000c10 <main+0x1d4>
 8000b46:	2b61      	cmp	r3, #97	; 0x61
 8000b48:	d00b      	beq.n	8000b62 <main+0x126>
 8000b4a:	2b61      	cmp	r3, #97	; 0x61
 8000b4c:	dc60      	bgt.n	8000c10 <main+0x1d4>
 8000b4e:	2b31      	cmp	r3, #49	; 0x31
 8000b50:	d033      	beq.n	8000bba <main+0x17e>
 8000b52:	2b32      	cmp	r3, #50	; 0x32
 8000b54:	d047      	beq.n	8000be6 <main+0x1aa>
 8000b56:	e05b      	b.n	8000c10 <main+0x1d4>
		  case's':
			  TMCsetup();
 8000b58:	f7ff fc0e 	bl	8000378 <TMCsetup>
			  rxbuf[0]=0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	703b      	strb	r3, [r7, #0]
			  break;
 8000b60:	e060      	b.n	8000c24 <main+0x1e8>
		  case'a':
			  value = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
			  TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_SHAFT_MASK, TMC2209_SHAFT_SHIFT ,value);
 8000b66:	2100      	movs	r1, #0
 8000b68:	4843      	ldr	r0, [pc, #268]	; (8000c78 <main+0x23c>)
 8000b6a:	f004 f80a 	bl	8004b82 <tmc2209_readInt>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	f023 0208 	bic.w	r2, r3, #8
 8000b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	f003 0308 	and.w	r3, r3, #8
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	461a      	mov	r2, r3
 8000b80:	2100      	movs	r1, #0
 8000b82:	483d      	ldr	r0, [pc, #244]	; (8000c78 <main+0x23c>)
 8000b84:	f003 ffad 	bl	8004ae2 <tmc2209_writeInt>
			  rxbuf[0]=0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	703b      	strb	r3, [r7, #0]
			  break;
 8000b8c:	e04a      	b.n	8000c24 <main+0x1e8>
		  case'd':
			  value = 1;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
			  TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_SHAFT_MASK, TMC2209_SHAFT_SHIFT ,value);
 8000b92:	2100      	movs	r1, #0
 8000b94:	4838      	ldr	r0, [pc, #224]	; (8000c78 <main+0x23c>)
 8000b96:	f003 fff4 	bl	8004b82 <tmc2209_readInt>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f023 0208 	bic.w	r2, r3, #8
 8000ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	f003 0308 	and.w	r3, r3, #8
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	461a      	mov	r2, r3
 8000bac:	2100      	movs	r1, #0
 8000bae:	4832      	ldr	r0, [pc, #200]	; (8000c78 <main+0x23c>)
 8000bb0:	f003 ff97 	bl	8004ae2 <tmc2209_writeInt>
			  rxbuf[0]=0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	703b      	strb	r3, [r7, #0]
			  break;
 8000bb8:	e034      	b.n	8000c24 <main+0x1e8>

		  case'1':
			  value = 10000;
 8000bba:	f242 7310 	movw	r3, #10000	; 0x2710
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
			  TMC2209_FIELD_UPDATE(&TMC2209, 0x22, TMC2209_VACTUAL_MASK, TMC2209_VACTUAL_SHIFT,value);
 8000bc0:	2122      	movs	r1, #34	; 0x22
 8000bc2:	482d      	ldr	r0, [pc, #180]	; (8000c78 <main+0x23c>)
 8000bc4:	f003 ffdd 	bl	8004b82 <tmc2209_readInt>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	2122      	movs	r1, #34	; 0x22
 8000bda:	4827      	ldr	r0, [pc, #156]	; (8000c78 <main+0x23c>)
 8000bdc:	f003 ff81 	bl	8004ae2 <tmc2209_writeInt>
			  rxbuf[0]=0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	703b      	strb	r3, [r7, #0]
			  break;
 8000be4:	e01e      	b.n	8000c24 <main+0x1e8>

		  case'2':
			  value = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
			  TMC2209_FIELD_UPDATE(&TMC2209, 0x22, TMC2209_VACTUAL_MASK, TMC2209_VACTUAL_SHIFT,value);
 8000bea:	2122      	movs	r1, #34	; 0x22
 8000bec:	4822      	ldr	r0, [pc, #136]	; (8000c78 <main+0x23c>)
 8000bee:	f003 ffc8 	bl	8004b82 <tmc2209_readInt>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bfa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	461a      	mov	r2, r3
 8000c02:	2122      	movs	r1, #34	; 0x22
 8000c04:	481c      	ldr	r0, [pc, #112]	; (8000c78 <main+0x23c>)
 8000c06:	f003 ff6c 	bl	8004ae2 <tmc2209_writeInt>
			  rxbuf[0]=0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	703b      	strb	r3, [r7, #0]
			  break;
 8000c0e:	e009      	b.n	8000c24 <main+0x1e8>

		  default:
			  HAL_UART_Transmit(&huart2,(uint8_t *)nonans, sizeof(nonans),3000);
 8000c10:	1d39      	adds	r1, r7, #4
 8000c12:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000c16:	2212      	movs	r2, #18
 8000c18:	4815      	ldr	r0, [pc, #84]	; (8000c70 <main+0x234>)
 8000c1a:	f002 fb17 	bl	800324c <HAL_UART_Transmit>
			  rxbuf[0]=0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	703b      	strb	r3, [r7, #0]
			  break;
 8000c22:	bf00      	nop

		  }
		  uartflag1=0;
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <main+0x238>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
	  }
	  if(end_stop_state==1){
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <main+0x244>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	f47f af3e 	bne.w	8000ab0 <main+0x74>
		  value = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
		  TMC2209_FIELD_UPDATE(&TMC2209, 0x22, TMC2209_VACTUAL_MASK, TMC2209_VACTUAL_SHIFT,value);
 8000c38:	2122      	movs	r1, #34	; 0x22
 8000c3a:	480f      	ldr	r0, [pc, #60]	; (8000c78 <main+0x23c>)
 8000c3c:	f003 ffa1 	bl	8004b82 <tmc2209_readInt>
 8000c40:	4603      	mov	r3, r0
 8000c42:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	461a      	mov	r2, r3
 8000c50:	2122      	movs	r1, #34	; 0x22
 8000c52:	4809      	ldr	r0, [pc, #36]	; (8000c78 <main+0x23c>)
 8000c54:	f003 ff45 	bl	8004ae2 <tmc2209_writeInt>
		  end_stop_state=0;
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <main+0x244>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
 8000c5e:	e727      	b.n	8000ab0 <main+0x74>
 8000c60:	2000000c 	.word	0x2000000c
 8000c64:	080062d4 	.word	0x080062d4
 8000c68:	080062e8 	.word	0x080062e8
 8000c6c:	080062c4 	.word	0x080062c4
 8000c70:	20000110 	.word	0x20000110
 8000c74:	20000630 	.word	0x20000630
 8000c78:	20000194 	.word	0x20000194
 8000c7c:	080062cc 	.word	0x080062cc
 8000c80:	20000631 	.word	0x20000631

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b096      	sub	sp, #88	; 0x58
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c8e:	2228      	movs	r2, #40	; 0x28
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f004 f93a 	bl	8004f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]
 8000cb6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc0:	2310      	movs	r3, #16
 8000cc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ccc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000cd0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 fe7a 	bl	80019d0 <HAL_RCC_OscConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000ce2:	f000 f8fb 	bl	8000edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce6:	230f      	movs	r3, #15
 8000ce8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cea:	2302      	movs	r3, #2
 8000cec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	2102      	movs	r1, #2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 fea2 	bl	8002a4c <HAL_RCC_ClockConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d0e:	f000 f8e5 	bl	8000edc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f002 f8cb 	bl	8002eb8 <HAL_RCCEx_PeriphCLKConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000d28:	f000 f8d8 	bl	8000edc <Error_Handler>
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	3758      	adds	r7, #88	; 0x58
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <MX_USART1_UART_Init+0x54>)
 8000d3a:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <MX_USART1_UART_Init+0x58>)
 8000d3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <MX_USART1_UART_Init+0x54>)
 8000d40:	4a13      	ldr	r2, [pc, #76]	; (8000d90 <MX_USART1_UART_Init+0x5c>)
 8000d42:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d44:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <MX_USART1_UART_Init+0x54>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_USART1_UART_Init+0x54>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d50:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <MX_USART1_UART_Init+0x54>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_USART1_UART_Init+0x54>)
 8000d58:	220c      	movs	r2, #12
 8000d5a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <MX_USART1_UART_Init+0x54>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_USART1_UART_Init+0x54>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <MX_USART1_UART_Init+0x54>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_USART1_UART_Init+0x54>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000d74:	4804      	ldr	r0, [pc, #16]	; (8000d88 <MX_USART1_UART_Init+0x54>)
 8000d76:	f002 fa13 	bl	80031a0 <HAL_HalfDuplex_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000d80:	f000 f8ac 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	2000008c 	.word	0x2000008c
 8000d8c:	40013800 	.word	0x40013800
 8000d90:	0007a120 	.word	0x0007a120

08000d94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000d9a:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <MX_USART2_UART_Init+0x5c>)
 8000d9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dba:	220c      	movs	r2, #12
 8000dbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dd8:	f002 f994 	bl	8003104 <HAL_UART_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000de2:	f000 f87b 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000110 	.word	0x20000110
 8000df0:	40004400 	.word	0x40004400

08000df4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e0a:	4b28      	ldr	r3, [pc, #160]	; (8000eac <MX_GPIO_Init+0xb8>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	4a27      	ldr	r2, [pc, #156]	; (8000eac <MX_GPIO_Init+0xb8>)
 8000e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e14:	6153      	str	r3, [r2, #20]
 8000e16:	4b25      	ldr	r3, [pc, #148]	; (8000eac <MX_GPIO_Init+0xb8>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b22      	ldr	r3, [pc, #136]	; (8000eac <MX_GPIO_Init+0xb8>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	4a21      	ldr	r2, [pc, #132]	; (8000eac <MX_GPIO_Init+0xb8>)
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	6153      	str	r3, [r2, #20]
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <MX_GPIO_Init+0xb8>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <MX_GPIO_Init+0xb8>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	4a1b      	ldr	r2, [pc, #108]	; (8000eac <MX_GPIO_Init+0xb8>)
 8000e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e44:	6153      	str	r3, [r2, #20]
 8000e46:	4b19      	ldr	r3, [pc, #100]	; (8000eac <MX_GPIO_Init+0xb8>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2130      	movs	r1, #48	; 0x30
 8000e56:	4816      	ldr	r0, [pc, #88]	; (8000eb0 <MX_GPIO_Init+0xbc>)
 8000e58:	f000 fd7e 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e5c:	2330      	movs	r3, #48	; 0x30
 8000e5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	4619      	mov	r1, r3
 8000e72:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <MX_GPIO_Init+0xbc>)
 8000e74:	f000 fbfe 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e78:	2340      	movs	r3, #64	; 0x40
 8000e7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e7c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000e80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <MX_GPIO_Init+0xbc>)
 8000e8e:	f000 fbf1 	bl	8001674 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2101      	movs	r1, #1
 8000e96:	2017      	movs	r0, #23
 8000e98:	f000 fb3f 	bl	800151a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e9c:	2017      	movs	r0, #23
 8000e9e:	f000 fb58 	bl	8001552 <HAL_NVIC_EnableIRQ>

}
 8000ea2:	bf00      	nop
 8000ea4:	3720      	adds	r7, #32
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	48000400 	.word	0x48000400

08000eb4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	230a      	movs	r3, #10
 8000ec6:	68b9      	ldr	r1, [r7, #8]
 8000ec8:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <_write+0x24>)
 8000eca:	f002 f9bf 	bl	800324c <HAL_UART_Transmit>
//  HAL_UART_Transmit_IT(&huart2,(uint8_t *)ptr,len);

  return len;
 8000ece:	687b      	ldr	r3, [r7, #4]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000110 	.word	0x20000110

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <Error_Handler+0x8>
	...

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <HAL_MspInit+0x44>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <HAL_MspInit+0x44>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6193      	str	r3, [r2, #24]
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_MspInit+0x44>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_MspInit+0x44>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <HAL_MspInit+0x44>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f10:	61d3      	str	r3, [r2, #28]
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_MspInit+0x44>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000

08000f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08c      	sub	sp, #48	; 0x30
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a38      	ldr	r2, [pc, #224]	; (8001030 <HAL_UART_MspInit+0x100>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d132      	bne.n	8000fb8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f52:	4b38      	ldr	r3, [pc, #224]	; (8001034 <HAL_UART_MspInit+0x104>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	4a37      	ldr	r2, [pc, #220]	; (8001034 <HAL_UART_MspInit+0x104>)
 8000f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5c:	6193      	str	r3, [r2, #24]
 8000f5e:	4b35      	ldr	r3, [pc, #212]	; (8001034 <HAL_UART_MspInit+0x104>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f66:	61bb      	str	r3, [r7, #24]
 8000f68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	4b32      	ldr	r3, [pc, #200]	; (8001034 <HAL_UART_MspInit+0x104>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	4a31      	ldr	r2, [pc, #196]	; (8001034 <HAL_UART_MspInit+0x104>)
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f74:	6153      	str	r3, [r2, #20]
 8000f76:	4b2f      	ldr	r3, [pc, #188]	; (8001034 <HAL_UART_MspInit+0x104>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f88:	2312      	movs	r3, #18
 8000f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f94:	2307      	movs	r3, #7
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa2:	f000 fb67 	bl	8001674 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2101      	movs	r1, #1
 8000faa:	2025      	movs	r0, #37	; 0x25
 8000fac:	f000 fab5 	bl	800151a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fb0:	2025      	movs	r0, #37	; 0x25
 8000fb2:	f000 face 	bl	8001552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fb6:	e036      	b.n	8001026 <HAL_UART_MspInit+0xf6>
  else if(huart->Instance==USART2)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a1e      	ldr	r2, [pc, #120]	; (8001038 <HAL_UART_MspInit+0x108>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d131      	bne.n	8001026 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <HAL_UART_MspInit+0x104>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <HAL_UART_MspInit+0x104>)
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fcc:	61d3      	str	r3, [r2, #28]
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <HAL_UART_MspInit+0x104>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b16      	ldr	r3, [pc, #88]	; (8001034 <HAL_UART_MspInit+0x104>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	4a15      	ldr	r2, [pc, #84]	; (8001034 <HAL_UART_MspInit+0x104>)
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	6153      	str	r3, [r2, #20]
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <HAL_UART_MspInit+0x104>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000ff2:	f248 0304 	movw	r3, #32772	; 0x8004
 8000ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001004:	2307      	movs	r3, #7
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4619      	mov	r1, r3
 800100e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001012:	f000 fb2f 	bl	8001674 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	2026      	movs	r0, #38	; 0x26
 800101c:	f000 fa7d 	bl	800151a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001020:	2026      	movs	r0, #38	; 0x26
 8001022:	f000 fa96 	bl	8001552 <HAL_NVIC_EnableIRQ>
}
 8001026:	bf00      	nop
 8001028:	3730      	adds	r7, #48	; 0x30
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40013800 	.word	0x40013800
 8001034:	40021000 	.word	0x40021000
 8001038:	40004400 	.word	0x40004400

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <NMI_Handler+0x4>

08001042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <HardFault_Handler+0x4>

08001048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <MemManage_Handler+0x4>

0800104e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <UsageFault_Handler+0x4>

0800105a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001088:	f000 f928 	bl	80012dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001094:	2040      	movs	r0, #64	; 0x40
 8001096:	f000 fc77 	bl	8001988 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <USART1_IRQHandler+0x10>)
 80010a6:	f002 fa85 	bl	80035b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000008c 	.word	0x2000008c

080010b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <USART2_IRQHandler+0x10>)
 80010ba:	f002 fa7b 	bl	80035b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000110 	.word	0x20000110

080010c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	e00a      	b.n	80010f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010da:	f3af 8000 	nop.w
 80010de:	4601      	mov	r1, r0
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	60ba      	str	r2, [r7, #8]
 80010e6:	b2ca      	uxtb	r2, r1
 80010e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	3301      	adds	r3, #1
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	dbf0      	blt.n	80010da <_read+0x12>
	}

return len;
 80010f8:	687b      	ldr	r3, [r7, #4]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
	return -1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800112a:	605a      	str	r2, [r3, #4]
	return 0;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <_isatty>:

int _isatty(int file)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
	return 1;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
	return 0;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001174:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <_sbrk+0x5c>)
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <_sbrk+0x60>)
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <_sbrk+0x64>)
 800118a:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <_sbrk+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	429a      	cmp	r2, r3
 800119a:	d207      	bcs.n	80011ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800119c:	f003 fe8c 	bl	8004eb8 <__errno>
 80011a0:	4603      	mov	r3, r0
 80011a2:	220c      	movs	r2, #12
 80011a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011aa:	e009      	b.n	80011c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <_sbrk+0x64>)
 80011bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20003000 	.word	0x20003000
 80011cc:	00000400 	.word	0x00000400
 80011d0:	20000634 	.word	0x20000634
 80011d4:	20000850 	.word	0x20000850

080011d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <SystemInit+0x20>)
 80011de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <SystemInit+0x20>)
 80011e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001234 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <LoopForever+0x6>)
  ldr r1, =_edata
 8001202:	490e      	ldr	r1, [pc, #56]	; (800123c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001204:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <LoopForever+0xe>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001218:	4c0b      	ldr	r4, [pc, #44]	; (8001248 <LoopForever+0x16>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001226:	f7ff ffd7 	bl	80011d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122a:	f003 fe4b 	bl	8004ec4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800122e:	f7ff fc05 	bl	8000a3c <main>

08001232 <LoopForever>:

LoopForever:
    b LoopForever
 8001232:	e7fe      	b.n	8001232 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001234:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001240:	08006654 	.word	0x08006654
  ldr r2, =_sbss
 8001244:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001248:	20000850 	.word	0x20000850

0800124c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC1_2_IRQHandler>
	...

08001250 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_Init+0x28>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a07      	ldr	r2, [pc, #28]	; (8001278 <HAL_Init+0x28>)
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001260:	2003      	movs	r0, #3
 8001262:	f000 f94f 	bl	8001504 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001266:	2000      	movs	r0, #0
 8001268:	f000 f808 	bl	800127c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800126c:	f7ff fe3c 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40022000 	.word	0x40022000

0800127c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_InitTick+0x54>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_InitTick+0x58>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001292:	fbb3 f3f1 	udiv	r3, r3, r1
 8001296:	fbb2 f3f3 	udiv	r3, r2, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f967 	bl	800156e <HAL_SYSTICK_Config>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00e      	b.n	80012c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d80a      	bhi.n	80012c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b0:	2200      	movs	r2, #0
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012b8:	f000 f92f 	bl	800151a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012bc:	4a06      	ldr	r2, [pc, #24]	; (80012d8 <HAL_InitTick+0x5c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000000 	.word	0x20000000
 80012d4:	20000008 	.word	0x20000008
 80012d8:	20000004 	.word	0x20000004

080012dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x20>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_IncTick+0x24>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <HAL_IncTick+0x24>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000008 	.word	0x20000008
 8001300:	20000638 	.word	0x20000638

08001304 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return uwTick;  
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_GetTick+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000638 	.word	0x20000638

0800131c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001324:	f7ff ffee 	bl	8001304 <HAL_GetTick>
 8001328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001334:	d005      	beq.n	8001342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_Delay+0x44>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4413      	add	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001342:	bf00      	nop
 8001344:	f7ff ffde 	bl	8001304 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	429a      	cmp	r2, r3
 8001352:	d8f7      	bhi.n	8001344 <HAL_Delay+0x28>
  {
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000008 	.word	0x20000008

08001364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001380:	4013      	ands	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800138c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001396:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	60d3      	str	r3, [r2, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <__NVIC_GetPriorityGrouping+0x18>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	f003 0307 	and.w	r3, r3, #7
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	db0b      	blt.n	80013f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	f003 021f 	and.w	r2, r3, #31
 80013e0:	4907      	ldr	r1, [pc, #28]	; (8001400 <__NVIC_EnableIRQ+0x38>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	2001      	movs	r0, #1
 80013ea:	fa00 f202 	lsl.w	r2, r0, r2
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000e100 	.word	0xe000e100

08001404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	2b00      	cmp	r3, #0
 8001416:	db0a      	blt.n	800142e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	490c      	ldr	r1, [pc, #48]	; (8001450 <__NVIC_SetPriority+0x4c>)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	0112      	lsls	r2, r2, #4
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	440b      	add	r3, r1
 8001428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800142c:	e00a      	b.n	8001444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4908      	ldr	r1, [pc, #32]	; (8001454 <__NVIC_SetPriority+0x50>)
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	3b04      	subs	r3, #4
 800143c:	0112      	lsls	r2, r2, #4
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	440b      	add	r3, r1
 8001442:	761a      	strb	r2, [r3, #24]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000e100 	.word	0xe000e100
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001458:	b480      	push	{r7}
 800145a:	b089      	sub	sp, #36	; 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f1c3 0307 	rsb	r3, r3, #7
 8001472:	2b04      	cmp	r3, #4
 8001474:	bf28      	it	cs
 8001476:	2304      	movcs	r3, #4
 8001478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3304      	adds	r3, #4
 800147e:	2b06      	cmp	r3, #6
 8001480:	d902      	bls.n	8001488 <NVIC_EncodePriority+0x30>
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3b03      	subs	r3, #3
 8001486:	e000      	b.n	800148a <NVIC_EncodePriority+0x32>
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	401a      	ands	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	43d9      	mvns	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	4313      	orrs	r3, r2
         );
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d0:	d301      	bcc.n	80014d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00f      	b.n	80014f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <SysTick_Config+0x40>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014de:	210f      	movs	r1, #15
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014e4:	f7ff ff8e 	bl	8001404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <SysTick_Config+0x40>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <SysTick_Config+0x40>)
 80014f0:	2207      	movs	r2, #7
 80014f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	e000e010 	.word	0xe000e010

08001504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff29 	bl	8001364 <__NVIC_SetPriorityGrouping>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800152c:	f7ff ff3e 	bl	80013ac <__NVIC_GetPriorityGrouping>
 8001530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	6978      	ldr	r0, [r7, #20]
 8001538:	f7ff ff8e 	bl	8001458 <NVIC_EncodePriority>
 800153c:	4602      	mov	r2, r0
 800153e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff5d 	bl	8001404 <__NVIC_SetPriority>
}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff31 	bl	80013c8 <__NVIC_EnableIRQ>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ffa2 	bl	80014c0 <SysTick_Config>
 800157c:	4603      	mov	r3, r0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001594:	2b02      	cmp	r3, #2
 8001596:	d008      	beq.n	80015aa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2204      	movs	r2, #4
 800159c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e020      	b.n	80015ec <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 020e 	bic.w	r2, r2, #14
 80015b8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0201 	bic.w	r2, r2, #1
 80015c8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d2:	2101      	movs	r1, #1
 80015d4:	fa01 f202 	lsl.w	r2, r1, r2
 80015d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800160a:	2b02      	cmp	r3, #2
 800160c:	d005      	beq.n	800161a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2204      	movs	r2, #4
 8001612:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e027      	b.n	800166a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 020e 	bic.w	r2, r2, #14
 8001628:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0201 	bic.w	r2, r2, #1
 8001638:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001642:	2101      	movs	r1, #1
 8001644:	fa01 f202 	lsl.w	r2, r1, r2
 8001648:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	4798      	blx	r3
    } 
  }
  return status;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001682:	e14e      	b.n	8001922 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 8140 	beq.w	800191c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d005      	beq.n	80016b4 <HAL_GPIO_Init+0x40>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d130      	bne.n	8001716 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ea:	2201      	movs	r2, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	f003 0201 	and.w	r2, r3, #1
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	2b03      	cmp	r3, #3
 8001720:	d017      	beq.n	8001752 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d123      	bne.n	80017a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	08da      	lsrs	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3208      	adds	r2, #8
 8001766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	08da      	lsrs	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3208      	adds	r2, #8
 80017a0:	6939      	ldr	r1, [r7, #16]
 80017a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0203 	and.w	r2, r3, #3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 809a 	beq.w	800191c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e8:	4b55      	ldr	r3, [pc, #340]	; (8001940 <HAL_GPIO_Init+0x2cc>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a54      	ldr	r2, [pc, #336]	; (8001940 <HAL_GPIO_Init+0x2cc>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b52      	ldr	r3, [pc, #328]	; (8001940 <HAL_GPIO_Init+0x2cc>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001800:	4a50      	ldr	r2, [pc, #320]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800182a:	d013      	beq.n	8001854 <HAL_GPIO_Init+0x1e0>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a46      	ldr	r2, [pc, #280]	; (8001948 <HAL_GPIO_Init+0x2d4>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d00d      	beq.n	8001850 <HAL_GPIO_Init+0x1dc>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a45      	ldr	r2, [pc, #276]	; (800194c <HAL_GPIO_Init+0x2d8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d007      	beq.n	800184c <HAL_GPIO_Init+0x1d8>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a44      	ldr	r2, [pc, #272]	; (8001950 <HAL_GPIO_Init+0x2dc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d101      	bne.n	8001848 <HAL_GPIO_Init+0x1d4>
 8001844:	2303      	movs	r3, #3
 8001846:	e006      	b.n	8001856 <HAL_GPIO_Init+0x1e2>
 8001848:	2305      	movs	r3, #5
 800184a:	e004      	b.n	8001856 <HAL_GPIO_Init+0x1e2>
 800184c:	2302      	movs	r3, #2
 800184e:	e002      	b.n	8001856 <HAL_GPIO_Init+0x1e2>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <HAL_GPIO_Init+0x1e2>
 8001854:	2300      	movs	r3, #0
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	f002 0203 	and.w	r2, r2, #3
 800185c:	0092      	lsls	r2, r2, #2
 800185e:	4093      	lsls	r3, r2
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001866:	4937      	ldr	r1, [pc, #220]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	3302      	adds	r3, #2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001874:	4b37      	ldr	r3, [pc, #220]	; (8001954 <HAL_GPIO_Init+0x2e0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	43db      	mvns	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001898:	4a2e      	ldr	r2, [pc, #184]	; (8001954 <HAL_GPIO_Init+0x2e0>)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800189e:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <HAL_GPIO_Init+0x2e0>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018c2:	4a24      	ldr	r2, [pc, #144]	; (8001954 <HAL_GPIO_Init+0x2e0>)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018c8:	4b22      	ldr	r3, [pc, #136]	; (8001954 <HAL_GPIO_Init+0x2e0>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018ec:	4a19      	ldr	r2, [pc, #100]	; (8001954 <HAL_GPIO_Init+0x2e0>)
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <HAL_GPIO_Init+0x2e0>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4313      	orrs	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001916:	4a0f      	ldr	r2, [pc, #60]	; (8001954 <HAL_GPIO_Init+0x2e0>)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	3301      	adds	r3, #1
 8001920:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	f47f aea9 	bne.w	8001684 <HAL_GPIO_Init+0x10>
  }
}
 8001932:	bf00      	nop
 8001934:	bf00      	nop
 8001936:	371c      	adds	r7, #28
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	40021000 	.word	0x40021000
 8001944:	40010000 	.word	0x40010000
 8001948:	48000400 	.word	0x48000400
 800194c:	48000800 	.word	0x48000800
 8001950:	48000c00 	.word	0x48000c00
 8001954:	40010400 	.word	0x40010400

08001958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	807b      	strh	r3, [r7, #2]
 8001964:	4613      	mov	r3, r2
 8001966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001968:	787b      	ldrb	r3, [r7, #1]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800196e:	887a      	ldrh	r2, [r7, #2]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001974:	e002      	b.n	800197c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001976:	887a      	ldrh	r2, [r7, #2]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	4013      	ands	r3, r2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d006      	beq.n	80019ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f806 	bl	80019b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40010400 	.word	0x40010400

080019b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019e0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	f001 b823 	b.w	8002a3c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 817d 	beq.w	8001d06 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a0c:	4bbc      	ldr	r3, [pc, #752]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d00c      	beq.n	8001a32 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a18:	4bb9      	ldr	r3, [pc, #740]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d15c      	bne.n	8001ade <HAL_RCC_OscConfig+0x10e>
 8001a24:	4bb6      	ldr	r3, [pc, #728]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a30:	d155      	bne.n	8001ade <HAL_RCC_OscConfig+0x10e>
 8001a32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a36:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001a3e:	fa93 f3a3 	rbit	r3, r3
 8001a42:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a46:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4a:	fab3 f383 	clz	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	095b      	lsrs	r3, r3, #5
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d102      	bne.n	8001a64 <HAL_RCC_OscConfig+0x94>
 8001a5e:	4ba8      	ldr	r3, [pc, #672]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	e015      	b.n	8001a90 <HAL_RCC_OscConfig+0xc0>
 8001a64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a68:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a70:	fa93 f3a3 	rbit	r3, r3
 8001a74:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a7c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a80:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001a84:	fa93 f3a3 	rbit	r3, r3
 8001a88:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001a8c:	4b9c      	ldr	r3, [pc, #624]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a94:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001a98:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a9c:	fa92 f2a2 	rbit	r2, r2
 8001aa0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001aa4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001aa8:	fab2 f282 	clz	r2, r2
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	f042 0220 	orr.w	r2, r2, #32
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	f002 021f 	and.w	r2, r2, #31
 8001ab8:	2101      	movs	r1, #1
 8001aba:	fa01 f202 	lsl.w	r2, r1, r2
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 811f 	beq.w	8001d04 <HAL_RCC_OscConfig+0x334>
 8001ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f040 8116 	bne.w	8001d04 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	f000 bfaf 	b.w	8002a3c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aee:	d106      	bne.n	8001afe <HAL_RCC_OscConfig+0x12e>
 8001af0:	4b83      	ldr	r3, [pc, #524]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a82      	ldr	r2, [pc, #520]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	e036      	b.n	8001b6c <HAL_RCC_OscConfig+0x19c>
 8001afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x158>
 8001b0e:	4b7c      	ldr	r3, [pc, #496]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a7b      	ldr	r2, [pc, #492]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b79      	ldr	r3, [pc, #484]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a78      	ldr	r2, [pc, #480]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001b20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	e021      	b.n	8001b6c <HAL_RCC_OscConfig+0x19c>
 8001b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x184>
 8001b3a:	4b71      	ldr	r3, [pc, #452]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a70      	ldr	r2, [pc, #448]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b6e      	ldr	r3, [pc, #440]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a6d      	ldr	r2, [pc, #436]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e00b      	b.n	8001b6c <HAL_RCC_OscConfig+0x19c>
 8001b54:	4b6a      	ldr	r3, [pc, #424]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a69      	ldr	r2, [pc, #420]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b67      	ldr	r3, [pc, #412]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a66      	ldr	r2, [pc, #408]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b6c:	4b64      	ldr	r3, [pc, #400]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	f023 020f 	bic.w	r2, r3, #15
 8001b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	495f      	ldr	r1, [pc, #380]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d059      	beq.n	8001c4a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7ff fbb5 	bl	8001304 <HAL_GetTick>
 8001b9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9e:	e00a      	b.n	8001bb6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff fbb0 	bl	8001304 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b64      	cmp	r3, #100	; 0x64
 8001bae:	d902      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	f000 bf43 	b.w	8002a3c <HAL_RCC_OscConfig+0x106c>
 8001bb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bba:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001bc2:	fa93 f3a3 	rbit	r3, r3
 8001bc6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001bca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	fab3 f383 	clz	r3, r3
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	095b      	lsrs	r3, r3, #5
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d102      	bne.n	8001be8 <HAL_RCC_OscConfig+0x218>
 8001be2:	4b47      	ldr	r3, [pc, #284]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	e015      	b.n	8001c14 <HAL_RCC_OscConfig+0x244>
 8001be8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bec:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001bfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c00:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c04:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001c08:	fa93 f3a3 	rbit	r3, r3
 8001c0c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001c10:	4b3b      	ldr	r3, [pc, #236]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c18:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001c1c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001c20:	fa92 f2a2 	rbit	r2, r2
 8001c24:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001c28:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001c2c:	fab2 f282 	clz	r2, r2
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	f042 0220 	orr.w	r2, r2, #32
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	f002 021f 	and.w	r2, r2, #31
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0ab      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x1d0>
 8001c48:	e05d      	b.n	8001d06 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4a:	f7ff fb5b 	bl	8001304 <HAL_GetTick>
 8001c4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c52:	e00a      	b.n	8001c6a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c54:	f7ff fb56 	bl	8001304 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b64      	cmp	r3, #100	; 0x64
 8001c62:	d902      	bls.n	8001c6a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	f000 bee9 	b.w	8002a3c <HAL_RCC_OscConfig+0x106c>
 8001c6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c6e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001c7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c82:	fab3 f383 	clz	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	095b      	lsrs	r3, r3, #5
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d102      	bne.n	8001c9c <HAL_RCC_OscConfig+0x2cc>
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	e015      	b.n	8001cc8 <HAL_RCC_OscConfig+0x2f8>
 8001c9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ca0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001cb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cb4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001cb8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_RCC_OscConfig+0x330>)
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ccc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001cd0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001cd4:	fa92 f2a2 	rbit	r2, r2
 8001cd8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001cdc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001ce0:	fab2 f282 	clz	r2, r2
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	f042 0220 	orr.w	r2, r2, #32
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	f002 021f 	and.w	r2, r2, #31
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1ab      	bne.n	8001c54 <HAL_RCC_OscConfig+0x284>
 8001cfc:	e003      	b.n	8001d06 <HAL_RCC_OscConfig+0x336>
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 817d 	beq.w	8002016 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d1c:	4ba6      	ldr	r3, [pc, #664]	; (8001fb8 <HAL_RCC_OscConfig+0x5e8>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 030c 	and.w	r3, r3, #12
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00b      	beq.n	8001d40 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d28:	4ba3      	ldr	r3, [pc, #652]	; (8001fb8 <HAL_RCC_OscConfig+0x5e8>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 030c 	and.w	r3, r3, #12
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d172      	bne.n	8001e1a <HAL_RCC_OscConfig+0x44a>
 8001d34:	4ba0      	ldr	r3, [pc, #640]	; (8001fb8 <HAL_RCC_OscConfig+0x5e8>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d16c      	bne.n	8001e1a <HAL_RCC_OscConfig+0x44a>
 8001d40:	2302      	movs	r3, #2
 8001d42:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001d52:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	095b      	lsrs	r3, r3, #5
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d102      	bne.n	8001d70 <HAL_RCC_OscConfig+0x3a0>
 8001d6a:	4b93      	ldr	r3, [pc, #588]	; (8001fb8 <HAL_RCC_OscConfig+0x5e8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	e013      	b.n	8001d98 <HAL_RCC_OscConfig+0x3c8>
 8001d70:	2302      	movs	r3, #2
 8001d72:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001d82:	2302      	movs	r3, #2
 8001d84:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d88:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001d94:	4b88      	ldr	r3, [pc, #544]	; (8001fb8 <HAL_RCC_OscConfig+0x5e8>)
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	2202      	movs	r2, #2
 8001d9a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001d9e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001da2:	fa92 f2a2 	rbit	r2, r2
 8001da6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001daa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001dae:	fab2 f282 	clz	r2, r2
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	f042 0220 	orr.w	r2, r2, #32
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	f002 021f 	and.w	r2, r2, #31
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00a      	beq.n	8001de0 <HAL_RCC_OscConfig+0x410>
 8001dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d002      	beq.n	8001de0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f000 be2e 	b.w	8002a3c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de0:	4b75      	ldr	r3, [pc, #468]	; (8001fb8 <HAL_RCC_OscConfig+0x5e8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	21f8      	movs	r1, #248	; 0xf8
 8001df6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001dfe:	fa91 f1a1 	rbit	r1, r1
 8001e02:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001e06:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001e0a:	fab1 f181 	clz	r1, r1
 8001e0e:	b2c9      	uxtb	r1, r1
 8001e10:	408b      	lsls	r3, r1
 8001e12:	4969      	ldr	r1, [pc, #420]	; (8001fb8 <HAL_RCC_OscConfig+0x5e8>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e18:	e0fd      	b.n	8002016 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8088 	beq.w	8001f3c <HAL_RCC_OscConfig+0x56c>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001e36:	fa93 f3a3 	rbit	r3, r3
 8001e3a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001e3e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e42:	fab3 f383 	clz	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	461a      	mov	r2, r3
 8001e54:	2301      	movs	r3, #1
 8001e56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff fa54 	bl	8001304 <HAL_GetTick>
 8001e5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e60:	e00a      	b.n	8001e78 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e62:	f7ff fa4f 	bl	8001304 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d902      	bls.n	8001e78 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	f000 bde2 	b.w	8002a3c <HAL_RCC_OscConfig+0x106c>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001e8a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	095b      	lsrs	r3, r3, #5
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d102      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x4d8>
 8001ea2:	4b45      	ldr	r3, [pc, #276]	; (8001fb8 <HAL_RCC_OscConfig+0x5e8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	e013      	b.n	8001ed0 <HAL_RCC_OscConfig+0x500>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001eba:	2302      	movs	r3, #2
 8001ebc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ec0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001ecc:	4b3a      	ldr	r3, [pc, #232]	; (8001fb8 <HAL_RCC_OscConfig+0x5e8>)
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001ed6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001eda:	fa92 f2a2 	rbit	r2, r2
 8001ede:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001ee2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001ee6:	fab2 f282 	clz	r2, r2
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	f042 0220 	orr.w	r2, r2, #32
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	f002 021f 	and.w	r2, r2, #31
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0af      	beq.n	8001e62 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f02:	4b2d      	ldr	r3, [pc, #180]	; (8001fb8 <HAL_RCC_OscConfig+0x5e8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	21f8      	movs	r1, #248	; 0xf8
 8001f18:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f20:	fa91 f1a1 	rbit	r1, r1
 8001f24:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001f28:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001f2c:	fab1 f181 	clz	r1, r1
 8001f30:	b2c9      	uxtb	r1, r1
 8001f32:	408b      	lsls	r3, r1
 8001f34:	4920      	ldr	r1, [pc, #128]	; (8001fb8 <HAL_RCC_OscConfig+0x5e8>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]
 8001f3a:	e06c      	b.n	8002016 <HAL_RCC_OscConfig+0x646>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001f4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	461a      	mov	r2, r3
 8001f64:	2300      	movs	r3, #0
 8001f66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7ff f9cc 	bl	8001304 <HAL_GetTick>
 8001f6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f70:	e00a      	b.n	8001f88 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f72:	f7ff f9c7 	bl	8001304 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d902      	bls.n	8001f88 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	f000 bd5a 	b.w	8002a3c <HAL_RCC_OscConfig+0x106c>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001f9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	095b      	lsrs	r3, r3, #5
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d104      	bne.n	8001fbc <HAL_RCC_OscConfig+0x5ec>
 8001fb2:	4b01      	ldr	r3, [pc, #4]	; (8001fb8 <HAL_RCC_OscConfig+0x5e8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	e015      	b.n	8001fe4 <HAL_RCC_OscConfig+0x614>
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001fce:	2302      	movs	r3, #2
 8001fd0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001fd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001fe0:	4bc8      	ldr	r3, [pc, #800]	; (8002304 <HAL_RCC_OscConfig+0x934>)
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001fea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001fee:	fa92 f2a2 	rbit	r2, r2
 8001ff2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001ff6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001ffa:	fab2 f282 	clz	r2, r2
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	f042 0220 	orr.w	r2, r2, #32
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	f002 021f 	and.w	r2, r2, #31
 800200a:	2101      	movs	r1, #1
 800200c:	fa01 f202 	lsl.w	r2, r1, r2
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1ad      	bne.n	8001f72 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 8110 	beq.w	800224c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800202c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002030:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d079      	beq.n	8002130 <HAL_RCC_OscConfig+0x760>
 800203c:	2301      	movs	r3, #1
 800203e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800204e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	4bab      	ldr	r3, [pc, #684]	; (8002308 <HAL_RCC_OscConfig+0x938>)
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	461a      	mov	r2, r3
 8002062:	2301      	movs	r3, #1
 8002064:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002066:	f7ff f94d 	bl	8001304 <HAL_GetTick>
 800206a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206e:	e00a      	b.n	8002086 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002070:	f7ff f948 	bl	8001304 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d902      	bls.n	8002086 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	f000 bcdb 	b.w	8002a3c <HAL_RCC_OscConfig+0x106c>
 8002086:	2302      	movs	r3, #2
 8002088:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002090:	fa93 f3a3 	rbit	r3, r3
 8002094:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80020a0:	2202      	movs	r2, #2
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	fa93 f2a3 	rbit	r2, r3
 80020b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020c4:	2202      	movs	r2, #2
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	fa93 f2a3 	rbit	r2, r3
 80020d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80020de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e0:	4b88      	ldr	r3, [pc, #544]	; (8002304 <HAL_RCC_OscConfig+0x934>)
 80020e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020ec:	2102      	movs	r1, #2
 80020ee:	6019      	str	r1, [r3, #0]
 80020f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	fa93 f1a3 	rbit	r1, r3
 80020fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002102:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002106:	6019      	str	r1, [r3, #0]
  return result;
 8002108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800211c:	b2db      	uxtb	r3, r3
 800211e:	f003 031f 	and.w	r3, r3, #31
 8002122:	2101      	movs	r1, #1
 8002124:	fa01 f303 	lsl.w	r3, r1, r3
 8002128:	4013      	ands	r3, r2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0a0      	beq.n	8002070 <HAL_RCC_OscConfig+0x6a0>
 800212e:	e08d      	b.n	800224c <HAL_RCC_OscConfig+0x87c>
 8002130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002134:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002138:	2201      	movs	r2, #1
 800213a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002140:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	fa93 f2a3 	rbit	r2, r3
 800214a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002152:	601a      	str	r2, [r3, #0]
  return result;
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800215c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	4b68      	ldr	r3, [pc, #416]	; (8002308 <HAL_RCC_OscConfig+0x938>)
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	461a      	mov	r2, r3
 800216e:	2300      	movs	r3, #0
 8002170:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002172:	f7ff f8c7 	bl	8001304 <HAL_GetTick>
 8002176:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800217a:	e00a      	b.n	8002192 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800217c:	f7ff f8c2 	bl	8001304 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d902      	bls.n	8002192 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	f000 bc55 	b.w	8002a3c <HAL_RCC_OscConfig+0x106c>
 8002192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002196:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800219a:	2202      	movs	r2, #2
 800219c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	fa93 f2a3 	rbit	r2, r3
 80021ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80021be:	2202      	movs	r2, #2
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	fa93 f2a3 	rbit	r2, r3
 80021d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80021e2:	2202      	movs	r2, #2
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	fa93 f2a3 	rbit	r2, r3
 80021f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80021fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <HAL_RCC_OscConfig+0x934>)
 8002200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002206:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800220a:	2102      	movs	r1, #2
 800220c:	6019      	str	r1, [r3, #0]
 800220e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002212:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	fa93 f1a3 	rbit	r1, r3
 800221c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002220:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002224:	6019      	str	r1, [r3, #0]
  return result;
 8002226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	2101      	movs	r1, #1
 8002242:	fa01 f303 	lsl.w	r3, r1, r3
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d197      	bne.n	800217c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800224c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002250:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 81a1 	beq.w	80025a4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002262:	2300      	movs	r3, #0
 8002264:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002268:	4b26      	ldr	r3, [pc, #152]	; (8002304 <HAL_RCC_OscConfig+0x934>)
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d116      	bne.n	80022a2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002274:	4b23      	ldr	r3, [pc, #140]	; (8002304 <HAL_RCC_OscConfig+0x934>)
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	4a22      	ldr	r2, [pc, #136]	; (8002304 <HAL_RCC_OscConfig+0x934>)
 800227a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227e:	61d3      	str	r3, [r2, #28]
 8002280:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_RCC_OscConfig+0x934>)
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002296:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800229a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800229c:	2301      	movs	r3, #1
 800229e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a2:	4b1a      	ldr	r3, [pc, #104]	; (800230c <HAL_RCC_OscConfig+0x93c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d11a      	bne.n	80022e4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ae:	4b17      	ldr	r3, [pc, #92]	; (800230c <HAL_RCC_OscConfig+0x93c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a16      	ldr	r2, [pc, #88]	; (800230c <HAL_RCC_OscConfig+0x93c>)
 80022b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ba:	f7ff f823 	bl	8001304 <HAL_GetTick>
 80022be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c2:	e009      	b.n	80022d8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c4:	f7ff f81e 	bl	8001304 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b64      	cmp	r3, #100	; 0x64
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e3b1      	b.n	8002a3c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <HAL_RCC_OscConfig+0x93c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0ef      	beq.n	80022c4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d10d      	bne.n	8002310 <HAL_RCC_OscConfig+0x940>
 80022f4:	4b03      	ldr	r3, [pc, #12]	; (8002304 <HAL_RCC_OscConfig+0x934>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4a02      	ldr	r2, [pc, #8]	; (8002304 <HAL_RCC_OscConfig+0x934>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6213      	str	r3, [r2, #32]
 8002300:	e03c      	b.n	800237c <HAL_RCC_OscConfig+0x9ac>
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000
 8002308:	10908120 	.word	0x10908120
 800230c:	40007000 	.word	0x40007000
 8002310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002314:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10c      	bne.n	800233a <HAL_RCC_OscConfig+0x96a>
 8002320:	4bc1      	ldr	r3, [pc, #772]	; (8002628 <HAL_RCC_OscConfig+0xc58>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	4ac0      	ldr	r2, [pc, #768]	; (8002628 <HAL_RCC_OscConfig+0xc58>)
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	6213      	str	r3, [r2, #32]
 800232c:	4bbe      	ldr	r3, [pc, #760]	; (8002628 <HAL_RCC_OscConfig+0xc58>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4abd      	ldr	r2, [pc, #756]	; (8002628 <HAL_RCC_OscConfig+0xc58>)
 8002332:	f023 0304 	bic.w	r3, r3, #4
 8002336:	6213      	str	r3, [r2, #32]
 8002338:	e020      	b.n	800237c <HAL_RCC_OscConfig+0x9ac>
 800233a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2b05      	cmp	r3, #5
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0x994>
 800234a:	4bb7      	ldr	r3, [pc, #732]	; (8002628 <HAL_RCC_OscConfig+0xc58>)
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	4ab6      	ldr	r2, [pc, #728]	; (8002628 <HAL_RCC_OscConfig+0xc58>)
 8002350:	f043 0304 	orr.w	r3, r3, #4
 8002354:	6213      	str	r3, [r2, #32]
 8002356:	4bb4      	ldr	r3, [pc, #720]	; (8002628 <HAL_RCC_OscConfig+0xc58>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	4ab3      	ldr	r2, [pc, #716]	; (8002628 <HAL_RCC_OscConfig+0xc58>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6213      	str	r3, [r2, #32]
 8002362:	e00b      	b.n	800237c <HAL_RCC_OscConfig+0x9ac>
 8002364:	4bb0      	ldr	r3, [pc, #704]	; (8002628 <HAL_RCC_OscConfig+0xc58>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	4aaf      	ldr	r2, [pc, #700]	; (8002628 <HAL_RCC_OscConfig+0xc58>)
 800236a:	f023 0301 	bic.w	r3, r3, #1
 800236e:	6213      	str	r3, [r2, #32]
 8002370:	4bad      	ldr	r3, [pc, #692]	; (8002628 <HAL_RCC_OscConfig+0xc58>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4aac      	ldr	r2, [pc, #688]	; (8002628 <HAL_RCC_OscConfig+0xc58>)
 8002376:	f023 0304 	bic.w	r3, r3, #4
 800237a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800237c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002380:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 8081 	beq.w	8002490 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238e:	f7fe ffb9 	bl	8001304 <HAL_GetTick>
 8002392:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002396:	e00b      	b.n	80023b0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002398:	f7fe ffb4 	bl	8001304 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e345      	b.n	8002a3c <HAL_RCC_OscConfig+0x106c>
 80023b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80023b8:	2202      	movs	r2, #2
 80023ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	fa93 f2a3 	rbit	r2, r3
 80023ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80023dc:	2202      	movs	r2, #2
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	fa93 f2a3 	rbit	r2, r3
 80023ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80023f6:	601a      	str	r2, [r3, #0]
  return result;
 80023f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002400:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f043 0302 	orr.w	r3, r3, #2
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d102      	bne.n	800241c <HAL_RCC_OscConfig+0xa4c>
 8002416:	4b84      	ldr	r3, [pc, #528]	; (8002628 <HAL_RCC_OscConfig+0xc58>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	e013      	b.n	8002444 <HAL_RCC_OscConfig+0xa74>
 800241c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002420:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002424:	2202      	movs	r2, #2
 8002426:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	fa93 f2a3 	rbit	r2, r3
 8002436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	4b79      	ldr	r3, [pc, #484]	; (8002628 <HAL_RCC_OscConfig+0xc58>)
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002448:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800244c:	2102      	movs	r1, #2
 800244e:	6011      	str	r1, [r2, #0]
 8002450:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002454:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	fa92 f1a2 	rbit	r1, r2
 800245e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002462:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002466:	6011      	str	r1, [r2, #0]
  return result;
 8002468:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800246c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	fab2 f282 	clz	r2, r2
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	f002 021f 	and.w	r2, r2, #31
 8002482:	2101      	movs	r1, #1
 8002484:	fa01 f202 	lsl.w	r2, r1, r2
 8002488:	4013      	ands	r3, r2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d084      	beq.n	8002398 <HAL_RCC_OscConfig+0x9c8>
 800248e:	e07f      	b.n	8002590 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002490:	f7fe ff38 	bl	8001304 <HAL_GetTick>
 8002494:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002498:	e00b      	b.n	80024b2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe ff33 	bl	8001304 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e2c4      	b.n	8002a3c <HAL_RCC_OscConfig+0x106c>
 80024b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80024ba:	2202      	movs	r2, #2
 80024bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	fa93 f2a3 	rbit	r2, r3
 80024cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80024de:	2202      	movs	r2, #2
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	fa93 f2a3 	rbit	r2, r3
 80024f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80024f8:	601a      	str	r2, [r3, #0]
  return result;
 80024fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fe:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002502:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	b2db      	uxtb	r3, r3
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	b2db      	uxtb	r3, r3
 800250e:	f043 0302 	orr.w	r3, r3, #2
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d102      	bne.n	800251e <HAL_RCC_OscConfig+0xb4e>
 8002518:	4b43      	ldr	r3, [pc, #268]	; (8002628 <HAL_RCC_OscConfig+0xc58>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	e013      	b.n	8002546 <HAL_RCC_OscConfig+0xb76>
 800251e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002522:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002526:	2202      	movs	r2, #2
 8002528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	fa93 f2a3 	rbit	r2, r3
 8002538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	4b39      	ldr	r3, [pc, #228]	; (8002628 <HAL_RCC_OscConfig+0xc58>)
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800254a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800254e:	2102      	movs	r1, #2
 8002550:	6011      	str	r1, [r2, #0]
 8002552:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002556:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	fa92 f1a2 	rbit	r1, r2
 8002560:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002564:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002568:	6011      	str	r1, [r2, #0]
  return result;
 800256a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800256e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	fab2 f282 	clz	r2, r2
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	f002 021f 	and.w	r2, r2, #31
 8002584:	2101      	movs	r1, #1
 8002586:	fa01 f202 	lsl.w	r2, r1, r2
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d184      	bne.n	800249a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002590:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002594:	2b01      	cmp	r3, #1
 8002596:	d105      	bne.n	80025a4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002598:	4b23      	ldr	r3, [pc, #140]	; (8002628 <HAL_RCC_OscConfig+0xc58>)
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	4a22      	ldr	r2, [pc, #136]	; (8002628 <HAL_RCC_OscConfig+0xc58>)
 800259e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 8242 	beq.w	8002a3a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b6:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <HAL_RCC_OscConfig+0xc58>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b08      	cmp	r3, #8
 80025c0:	f000 8213 	beq.w	80029ea <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	f040 8162 	bne.w	800289a <HAL_RCC_OscConfig+0xeca>
 80025d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025da:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80025de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	fa93 f2a3 	rbit	r2, r3
 80025f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80025fa:	601a      	str	r2, [r3, #0]
  return result;
 80025fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002600:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002604:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002610:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	461a      	mov	r2, r3
 8002618:	2300      	movs	r3, #0
 800261a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7fe fe72 	bl	8001304 <HAL_GetTick>
 8002620:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002624:	e00c      	b.n	8002640 <HAL_RCC_OscConfig+0xc70>
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262c:	f7fe fe6a 	bl	8001304 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e1fd      	b.n	8002a3c <HAL_RCC_OscConfig+0x106c>
 8002640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002644:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002648:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800264c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002652:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	fa93 f2a3 	rbit	r2, r3
 800265c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002660:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002664:	601a      	str	r2, [r3, #0]
  return result;
 8002666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800266e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d102      	bne.n	800268a <HAL_RCC_OscConfig+0xcba>
 8002684:	4bb0      	ldr	r3, [pc, #704]	; (8002948 <HAL_RCC_OscConfig+0xf78>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	e027      	b.n	80026da <HAL_RCC_OscConfig+0xd0a>
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002692:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002696:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	fa93 f2a3 	rbit	r2, r3
 80026a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026aa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80026b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	fa93 f2a3 	rbit	r2, r3
 80026cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	4b9c      	ldr	r3, [pc, #624]	; (8002948 <HAL_RCC_OscConfig+0xf78>)
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026de:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80026e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026e6:	6011      	str	r1, [r2, #0]
 80026e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026ec:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	fa92 f1a2 	rbit	r1, r2
 80026f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026fa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80026fe:	6011      	str	r1, [r2, #0]
  return result;
 8002700:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002704:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	fab2 f282 	clz	r2, r2
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	f042 0220 	orr.w	r2, r2, #32
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	f002 021f 	and.w	r2, r2, #31
 800271a:	2101      	movs	r1, #1
 800271c:	fa01 f202 	lsl.w	r2, r1, r2
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d182      	bne.n	800262c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002726:	4b88      	ldr	r3, [pc, #544]	; (8002948 <HAL_RCC_OscConfig+0xf78>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800272e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002732:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800273a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	430b      	orrs	r3, r1
 8002748:	497f      	ldr	r1, [pc, #508]	; (8002948 <HAL_RCC_OscConfig+0xf78>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
 800274e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002752:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002756:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800275a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002760:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	fa93 f2a3 	rbit	r2, r3
 800276a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002772:	601a      	str	r2, [r3, #0]
  return result;
 8002774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002778:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800277c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002788:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	461a      	mov	r2, r3
 8002790:	2301      	movs	r3, #1
 8002792:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe fdb6 	bl	8001304 <HAL_GetTick>
 8002798:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800279c:	e009      	b.n	80027b2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279e:	f7fe fdb1 	bl	8001304 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e144      	b.n	8002a3c <HAL_RCC_OscConfig+0x106c>
 80027b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80027ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	fa93 f2a3 	rbit	r2, r3
 80027ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80027d6:	601a      	str	r2, [r3, #0]
  return result;
 80027d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027dc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80027e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	095b      	lsrs	r3, r3, #5
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d102      	bne.n	80027fc <HAL_RCC_OscConfig+0xe2c>
 80027f6:	4b54      	ldr	r3, [pc, #336]	; (8002948 <HAL_RCC_OscConfig+0xf78>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	e027      	b.n	800284c <HAL_RCC_OscConfig+0xe7c>
 80027fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002800:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002804:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	fa93 f2a3 	rbit	r2, r3
 8002818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002826:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800282a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002834:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	fa93 f2a3 	rbit	r2, r3
 800283e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002842:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	4b3f      	ldr	r3, [pc, #252]	; (8002948 <HAL_RCC_OscConfig+0xf78>)
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002850:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002854:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002858:	6011      	str	r1, [r2, #0]
 800285a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800285e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	fa92 f1a2 	rbit	r1, r2
 8002868:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800286c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002870:	6011      	str	r1, [r2, #0]
  return result;
 8002872:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002876:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	fab2 f282 	clz	r2, r2
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	f042 0220 	orr.w	r2, r2, #32
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	f002 021f 	and.w	r2, r2, #31
 800288c:	2101      	movs	r1, #1
 800288e:	fa01 f202 	lsl.w	r2, r1, r2
 8002892:	4013      	ands	r3, r2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d082      	beq.n	800279e <HAL_RCC_OscConfig+0xdce>
 8002898:	e0cf      	b.n	8002a3a <HAL_RCC_OscConfig+0x106a>
 800289a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80028a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ac:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	fa93 f2a3 	rbit	r2, r3
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80028be:	601a      	str	r2, [r3, #0]
  return result;
 80028c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80028c8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	461a      	mov	r2, r3
 80028dc:	2300      	movs	r3, #0
 80028de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7fe fd10 	bl	8001304 <HAL_GetTick>
 80028e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e8:	e009      	b.n	80028fe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ea:	f7fe fd0b 	bl	8001304 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e09e      	b.n	8002a3c <HAL_RCC_OscConfig+0x106c>
 80028fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002902:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002906:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800290a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002910:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	fa93 f2a3 	rbit	r2, r3
 800291a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002922:	601a      	str	r2, [r3, #0]
  return result;
 8002924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002928:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800292c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	095b      	lsrs	r3, r3, #5
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b01      	cmp	r3, #1
 8002940:	d104      	bne.n	800294c <HAL_RCC_OscConfig+0xf7c>
 8002942:	4b01      	ldr	r3, [pc, #4]	; (8002948 <HAL_RCC_OscConfig+0xf78>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	e029      	b.n	800299c <HAL_RCC_OscConfig+0xfcc>
 8002948:	40021000 	.word	0x40021000
 800294c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002950:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002954:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	fa93 f2a3 	rbit	r2, r3
 8002968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002976:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800297a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002984:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	fa93 f2a3 	rbit	r2, r3
 800298e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002992:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <HAL_RCC_OscConfig+0x1078>)
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029a0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80029a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029a8:	6011      	str	r1, [r2, #0]
 80029aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029ae:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	fa92 f1a2 	rbit	r1, r2
 80029b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029bc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80029c0:	6011      	str	r1, [r2, #0]
  return result;
 80029c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029c6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	fab2 f282 	clz	r2, r2
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	f042 0220 	orr.w	r2, r2, #32
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	f002 021f 	and.w	r2, r2, #31
 80029dc:	2101      	movs	r1, #1
 80029de:	fa01 f202 	lsl.w	r2, r1, r2
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d180      	bne.n	80028ea <HAL_RCC_OscConfig+0xf1a>
 80029e8:	e027      	b.n	8002a3a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e01e      	b.n	8002a3c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_RCC_OscConfig+0x1078>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a0a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d10b      	bne.n	8002a36 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d001      	beq.n	8002a3a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40021000 	.word	0x40021000

08002a4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b09e      	sub	sp, #120	; 0x78
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e162      	b.n	8002d2a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a64:	4b90      	ldr	r3, [pc, #576]	; (8002ca8 <HAL_RCC_ClockConfig+0x25c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d910      	bls.n	8002a94 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b8d      	ldr	r3, [pc, #564]	; (8002ca8 <HAL_RCC_ClockConfig+0x25c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 0207 	bic.w	r2, r3, #7
 8002a7a:	498b      	ldr	r1, [pc, #556]	; (8002ca8 <HAL_RCC_ClockConfig+0x25c>)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b89      	ldr	r3, [pc, #548]	; (8002ca8 <HAL_RCC_ClockConfig+0x25c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e14a      	b.n	8002d2a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa0:	4b82      	ldr	r3, [pc, #520]	; (8002cac <HAL_RCC_ClockConfig+0x260>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	497f      	ldr	r1, [pc, #508]	; (8002cac <HAL_RCC_ClockConfig+0x260>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 80dc 	beq.w	8002c78 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d13c      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xf6>
 8002ac8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002acc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad8:	fab3 f383 	clz	r3, r3
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d102      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xa6>
 8002aec:	4b6f      	ldr	r3, [pc, #444]	; (8002cac <HAL_RCC_ClockConfig+0x260>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	e00f      	b.n	8002b12 <HAL_RCC_ClockConfig+0xc6>
 8002af2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002af6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002afa:	fa93 f3a3 	rbit	r3, r3
 8002afe:	667b      	str	r3, [r7, #100]	; 0x64
 8002b00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b04:	663b      	str	r3, [r7, #96]	; 0x60
 8002b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b08:	fa93 f3a3 	rbit	r3, r3
 8002b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b0e:	4b67      	ldr	r3, [pc, #412]	; (8002cac <HAL_RCC_ClockConfig+0x260>)
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b16:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b1a:	fa92 f2a2 	rbit	r2, r2
 8002b1e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002b20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b22:	fab2 f282 	clz	r2, r2
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	f042 0220 	orr.w	r2, r2, #32
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	f002 021f 	and.w	r2, r2, #31
 8002b32:	2101      	movs	r1, #1
 8002b34:	fa01 f202 	lsl.w	r2, r1, r2
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d17b      	bne.n	8002c36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e0f3      	b.n	8002d2a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d13c      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x178>
 8002b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b4e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d102      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x128>
 8002b6e:	4b4f      	ldr	r3, [pc, #316]	; (8002cac <HAL_RCC_ClockConfig+0x260>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	e00f      	b.n	8002b94 <HAL_RCC_ClockConfig+0x148>
 8002b74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	647b      	str	r3, [r7, #68]	; 0x44
 8002b82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b86:	643b      	str	r3, [r7, #64]	; 0x40
 8002b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b90:	4b46      	ldr	r3, [pc, #280]	; (8002cac <HAL_RCC_ClockConfig+0x260>)
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b98:	63ba      	str	r2, [r7, #56]	; 0x38
 8002b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b9c:	fa92 f2a2 	rbit	r2, r2
 8002ba0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ba4:	fab2 f282 	clz	r2, r2
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	f042 0220 	orr.w	r2, r2, #32
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f002 021f 	and.w	r2, r2, #31
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d13a      	bne.n	8002c36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0b2      	b.n	8002d2a <HAL_RCC_ClockConfig+0x2de>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd2:	fab3 f383 	clz	r3, r3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	095b      	lsrs	r3, r3, #5
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d102      	bne.n	8002bec <HAL_RCC_ClockConfig+0x1a0>
 8002be6:	4b31      	ldr	r3, [pc, #196]	; (8002cac <HAL_RCC_ClockConfig+0x260>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	e00d      	b.n	8002c08 <HAL_RCC_ClockConfig+0x1bc>
 8002bec:	2302      	movs	r3, #2
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	623b      	str	r3, [r7, #32]
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	4b29      	ldr	r3, [pc, #164]	; (8002cac <HAL_RCC_ClockConfig+0x260>)
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	2202      	movs	r2, #2
 8002c0a:	61ba      	str	r2, [r7, #24]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	fa92 f2a2 	rbit	r2, r2
 8002c12:	617a      	str	r2, [r7, #20]
  return result;
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	fab2 f282 	clz	r2, r2
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	f042 0220 	orr.w	r2, r2, #32
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	f002 021f 	and.w	r2, r2, #31
 8002c26:	2101      	movs	r1, #1
 8002c28:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e079      	b.n	8002d2a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c36:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <HAL_RCC_ClockConfig+0x260>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f023 0203 	bic.w	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	491a      	ldr	r1, [pc, #104]	; (8002cac <HAL_RCC_ClockConfig+0x260>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c48:	f7fe fb5c 	bl	8001304 <HAL_GetTick>
 8002c4c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c50:	f7fe fb58 	bl	8001304 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e061      	b.n	8002d2a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c66:	4b11      	ldr	r3, [pc, #68]	; (8002cac <HAL_RCC_ClockConfig+0x260>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 020c 	and.w	r2, r3, #12
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d1eb      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_RCC_ClockConfig+0x25c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d214      	bcs.n	8002cb0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <HAL_RCC_ClockConfig+0x25c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 0207 	bic.w	r2, r3, #7
 8002c8e:	4906      	ldr	r1, [pc, #24]	; (8002ca8 <HAL_RCC_ClockConfig+0x25c>)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <HAL_RCC_ClockConfig+0x25c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d005      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e040      	b.n	8002d2a <HAL_RCC_ClockConfig+0x2de>
 8002ca8:	40022000 	.word	0x40022000
 8002cac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <HAL_RCC_ClockConfig+0x2e8>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	491a      	ldr	r1, [pc, #104]	; (8002d34 <HAL_RCC_ClockConfig+0x2e8>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d009      	beq.n	8002cee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cda:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <HAL_RCC_ClockConfig+0x2e8>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4912      	ldr	r1, [pc, #72]	; (8002d34 <HAL_RCC_ClockConfig+0x2e8>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002cee:	f000 f829 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 8002cf2:	4601      	mov	r1, r0
 8002cf4:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <HAL_RCC_ClockConfig+0x2e8>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cfc:	22f0      	movs	r2, #240	; 0xf0
 8002cfe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	fa92 f2a2 	rbit	r2, r2
 8002d06:	60fa      	str	r2, [r7, #12]
  return result;
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	fab2 f282 	clz	r2, r2
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	40d3      	lsrs	r3, r2
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <HAL_RCC_ClockConfig+0x2ec>)
 8002d14:	5cd3      	ldrb	r3, [r2, r3]
 8002d16:	fa21 f303 	lsr.w	r3, r1, r3
 8002d1a:	4a08      	ldr	r2, [pc, #32]	; (8002d3c <HAL_RCC_ClockConfig+0x2f0>)
 8002d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d1e:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <HAL_RCC_ClockConfig+0x2f4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe faaa 	bl	800127c <HAL_InitTick>
  
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3778      	adds	r7, #120	; 0x78
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000
 8002d38:	080064fc 	.word	0x080064fc
 8002d3c:	20000000 	.word	0x20000000
 8002d40:	20000004 	.word	0x20000004

08002d44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b08b      	sub	sp, #44	; 0x2c
 8002d48:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61bb      	str	r3, [r7, #24]
 8002d52:	2300      	movs	r3, #0
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002d5e:	4b29      	ldr	r3, [pc, #164]	; (8002e04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d002      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0x30>
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d003      	beq.n	8002d7a <HAL_RCC_GetSysClockFreq+0x36>
 8002d72:	e03c      	b.n	8002dee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d74:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d76:	623b      	str	r3, [r7, #32]
      break;
 8002d78:	e03c      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d80:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002d84:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	fa92 f2a2 	rbit	r2, r2
 8002d8c:	607a      	str	r2, [r7, #4]
  return result;
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	fab2 f282 	clz	r2, r2
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	40d3      	lsrs	r3, r2
 8002d98:	4a1c      	ldr	r2, [pc, #112]	; (8002e0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d9a:	5cd3      	ldrb	r3, [r2, r3]
 8002d9c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d9e:	4b19      	ldr	r3, [pc, #100]	; (8002e04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	220f      	movs	r2, #15
 8002da8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	fa92 f2a2 	rbit	r2, r2
 8002db0:	60fa      	str	r2, [r7, #12]
  return result;
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	fab2 f282 	clz	r2, r2
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	40d3      	lsrs	r3, r2
 8002dbc:	4a14      	ldr	r2, [pc, #80]	; (8002e10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002dbe:	5cd3      	ldrb	r3, [r2, r3]
 8002dc0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002dcc:	4a0e      	ldr	r2, [pc, #56]	; (8002e08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	fb02 f303 	mul.w	r3, r2, r3
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
 8002ddc:	e004      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	4a0c      	ldr	r2, [pc, #48]	; (8002e14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002de2:	fb02 f303 	mul.w	r3, r2, r3
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	623b      	str	r3, [r7, #32]
      break;
 8002dec:	e002      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002df0:	623b      	str	r3, [r7, #32]
      break;
 8002df2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002df4:	6a3b      	ldr	r3, [r7, #32]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	372c      	adds	r7, #44	; 0x2c
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000
 8002e08:	007a1200 	.word	0x007a1200
 8002e0c:	08006514 	.word	0x08006514
 8002e10:	08006524 	.word	0x08006524
 8002e14:	003d0900 	.word	0x003d0900

08002e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e1c:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	20000000 	.word	0x20000000

08002e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e36:	f7ff ffef 	bl	8002e18 <HAL_RCC_GetHCLKFreq>
 8002e3a:	4601      	mov	r1, r0
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e44:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	fa92 f2a2 	rbit	r2, r2
 8002e50:	603a      	str	r2, [r7, #0]
  return result;
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	fab2 f282 	clz	r2, r2
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	40d3      	lsrs	r3, r2
 8002e5c:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e5e:	5cd3      	ldrb	r3, [r2, r3]
 8002e60:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	0800650c 	.word	0x0800650c

08002e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e7a:	f7ff ffcd 	bl	8002e18 <HAL_RCC_GetHCLKFreq>
 8002e7e:	4601      	mov	r1, r0
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002e88:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002e8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	fa92 f2a2 	rbit	r2, r2
 8002e94:	603a      	str	r2, [r7, #0]
  return result;
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	fab2 f282 	clz	r2, r2
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	40d3      	lsrs	r3, r2
 8002ea0:	4a04      	ldr	r2, [pc, #16]	; (8002eb4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ea2:	5cd3      	ldrb	r3, [r2, r3]
 8002ea4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	0800650c 	.word	0x0800650c

08002eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b092      	sub	sp, #72	; 0x48
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 80cd 	beq.w	8003076 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002edc:	4b86      	ldr	r3, [pc, #536]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10e      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee8:	4b83      	ldr	r3, [pc, #524]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	4a82      	ldr	r2, [pc, #520]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	61d3      	str	r3, [r2, #28]
 8002ef4:	4b80      	ldr	r3, [pc, #512]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f06:	4b7d      	ldr	r3, [pc, #500]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d118      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f12:	4b7a      	ldr	r3, [pc, #488]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a79      	ldr	r2, [pc, #484]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1e:	f7fe f9f1 	bl	8001304 <HAL_GetTick>
 8002f22:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f24:	e008      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f26:	f7fe f9ed 	bl	8001304 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b64      	cmp	r3, #100	; 0x64
 8002f32:	d901      	bls.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e0db      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f38:	4b70      	ldr	r3, [pc, #448]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f44:	4b6c      	ldr	r3, [pc, #432]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d07d      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d076      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f62:	4b65      	ldr	r3, [pc, #404]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f70:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f7c:	fab3 f383 	clz	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	4b5e      	ldr	r3, [pc, #376]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f98:	fa93 f3a3 	rbit	r3, r3
 8002f9c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4b55      	ldr	r3, [pc, #340]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002faa:	4413      	add	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fb4:	4a50      	ldr	r2, [pc, #320]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d045      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7fe f99e 	bl	8001304 <HAL_GetTick>
 8002fc8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fca:	e00a      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fcc:	f7fe f99a 	bl	8001304 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e086      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe8:	fa93 f3a3 	rbit	r3, r3
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
 8002fee:	2302      	movs	r3, #2
 8002ff0:	623b      	str	r3, [r7, #32]
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	61fb      	str	r3, [r7, #28]
  return result;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffc:	fab3 f383 	clz	r3, r3
 8003000:	b2db      	uxtb	r3, r3
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f043 0302 	orr.w	r3, r3, #2
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d102      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003010:	4b39      	ldr	r3, [pc, #228]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	e007      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003016:	2302      	movs	r3, #2
 8003018:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	4b35      	ldr	r3, [pc, #212]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	2202      	movs	r2, #2
 8003028:	613a      	str	r2, [r7, #16]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	fa92 f2a2 	rbit	r2, r2
 8003030:	60fa      	str	r2, [r7, #12]
  return result;
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	fab2 f282 	clz	r2, r2
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	f002 021f 	and.w	r2, r2, #31
 8003044:	2101      	movs	r1, #1
 8003046:	fa01 f202 	lsl.w	r2, r1, r2
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0bd      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003050:	4b29      	ldr	r3, [pc, #164]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	4926      	ldr	r1, [pc, #152]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800305e:	4313      	orrs	r3, r2
 8003060:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003062:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003066:	2b01      	cmp	r3, #1
 8003068:	d105      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800306a:	4b23      	ldr	r3, [pc, #140]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	4a22      	ldr	r2, [pc, #136]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003074:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d008      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003082:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f023 0203 	bic.w	r2, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	491a      	ldr	r1, [pc, #104]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003090:	4313      	orrs	r3, r2
 8003092:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030a0:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	f023 0210 	bic.w	r2, r3, #16
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4912      	ldr	r1, [pc, #72]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d008      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030be:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	490b      	ldr	r1, [pc, #44]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	4903      	ldr	r1, [pc, #12]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3748      	adds	r7, #72	; 0x48
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40007000 	.word	0x40007000
 8003100:	10908100 	.word	0x10908100

08003104 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e040      	b.n	8003198 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd ff02 	bl	8000f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2224      	movs	r2, #36	; 0x24
 8003130:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0201 	bic.w	r2, r2, #1
 8003140:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fdd8 	bl	8003cf8 <UART_SetConfig>
 8003148:	4603      	mov	r3, r0
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e022      	b.n	8003198 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 ff02 	bl	8003f64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800316e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800317e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 ff89 	bl	80040a8 <UART_CheckIdleState>
 8003196:	4603      	mov	r3, r0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e048      	b.n	8003244 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fd feb4 	bl	8000f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2224      	movs	r2, #36	; 0x24
 80031cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0201 	bic.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fd8a 	bl	8003cf8 <UART_SetConfig>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e02a      	b.n	8003244 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 feb4 	bl	8003f64 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800320a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800321a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0208 	orr.w	r2, r2, #8
 800322a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 ff33 	bl	80040a8 <UART_CheckIdleState>
 8003242:	4603      	mov	r3, r0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08a      	sub	sp, #40	; 0x28
 8003250:	af02      	add	r7, sp, #8
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	4613      	mov	r3, r2
 800325a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003260:	2b20      	cmp	r3, #32
 8003262:	f040 8082 	bne.w	800336a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <HAL_UART_Transmit+0x26>
 800326c:	88fb      	ldrh	r3, [r7, #6]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e07a      	b.n	800336c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_UART_Transmit+0x38>
 8003280:	2302      	movs	r3, #2
 8003282:	e073      	b.n	800336c <HAL_UART_Transmit+0x120>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2221      	movs	r2, #33	; 0x21
 8003298:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800329a:	f7fe f833 	bl	8001304 <HAL_GetTick>
 800329e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	88fa      	ldrh	r2, [r7, #6]
 80032a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	88fa      	ldrh	r2, [r7, #6]
 80032ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b8:	d108      	bne.n	80032cc <HAL_UART_Transmit+0x80>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d104      	bne.n	80032cc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	61bb      	str	r3, [r7, #24]
 80032ca:	e003      	b.n	80032d4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80032dc:	e02d      	b.n	800333a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2200      	movs	r2, #0
 80032e6:	2180      	movs	r1, #128	; 0x80
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 ff26 	bl	800413a <UART_WaitOnFlagUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e039      	b.n	800336c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10b      	bne.n	8003316 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	881a      	ldrh	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800330a:	b292      	uxth	r2, r2
 800330c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	3302      	adds	r3, #2
 8003312:	61bb      	str	r3, [r7, #24]
 8003314:	e008      	b.n	8003328 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	781a      	ldrb	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	b292      	uxth	r2, r2
 8003320:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3301      	adds	r3, #1
 8003326:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1cb      	bne.n	80032de <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2200      	movs	r2, #0
 800334e:	2140      	movs	r1, #64	; 0x40
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 fef2 	bl	800413a <UART_WaitOnFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e005      	b.n	800336c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	e000      	b.n	800336c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800336a:	2302      	movs	r3, #2
  }
}
 800336c:	4618      	mov	r0, r3
 800336e:	3720      	adds	r7, #32
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	; 0x28
 8003378:	af02      	add	r7, sp, #8
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	4613      	mov	r3, r2
 8003382:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003388:	2b20      	cmp	r3, #32
 800338a:	f040 80bf 	bne.w	800350c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <HAL_UART_Receive+0x26>
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e0b7      	b.n	800350e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_UART_Receive+0x38>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e0b0      	b.n	800350e <HAL_UART_Receive+0x19a>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2222      	movs	r2, #34	; 0x22
 80033c0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033c8:	f7fd ff9c 	bl	8001304 <HAL_GetTick>
 80033cc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	88fa      	ldrh	r2, [r7, #6]
 80033d2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	88fa      	ldrh	r2, [r7, #6]
 80033da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e6:	d10e      	bne.n	8003406 <HAL_UART_Receive+0x92>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d105      	bne.n	80033fc <HAL_UART_Receive+0x88>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80033f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033fa:	e02d      	b.n	8003458 <HAL_UART_Receive+0xe4>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	22ff      	movs	r2, #255	; 0xff
 8003400:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003404:	e028      	b.n	8003458 <HAL_UART_Receive+0xe4>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10d      	bne.n	800342a <HAL_UART_Receive+0xb6>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d104      	bne.n	8003420 <HAL_UART_Receive+0xac>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	22ff      	movs	r2, #255	; 0xff
 800341a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800341e:	e01b      	b.n	8003458 <HAL_UART_Receive+0xe4>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	227f      	movs	r2, #127	; 0x7f
 8003424:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003428:	e016      	b.n	8003458 <HAL_UART_Receive+0xe4>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003432:	d10d      	bne.n	8003450 <HAL_UART_Receive+0xdc>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d104      	bne.n	8003446 <HAL_UART_Receive+0xd2>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	227f      	movs	r2, #127	; 0x7f
 8003440:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003444:	e008      	b.n	8003458 <HAL_UART_Receive+0xe4>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	223f      	movs	r2, #63	; 0x3f
 800344a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800344e:	e003      	b.n	8003458 <HAL_UART_Receive+0xe4>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800345e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003468:	d108      	bne.n	800347c <HAL_UART_Receive+0x108>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d104      	bne.n	800347c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	e003      	b.n	8003484 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003480:	2300      	movs	r3, #0
 8003482:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800348c:	e033      	b.n	80034f6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2200      	movs	r2, #0
 8003496:	2120      	movs	r1, #32
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fe4e 	bl	800413a <UART_WaitOnFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e032      	b.n	800350e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10c      	bne.n	80034c8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	8a7b      	ldrh	r3, [r7, #18]
 80034b8:	4013      	ands	r3, r2
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	3302      	adds	r3, #2
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	e00d      	b.n	80034e4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	8a7b      	ldrh	r3, [r7, #18]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	4013      	ands	r3, r2
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3301      	adds	r3, #1
 80034e2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1c5      	bne.n	800348e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2220      	movs	r2, #32
 8003506:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	e000      	b.n	800350e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800350c:	2302      	movs	r3, #2
  }
}
 800350e:	4618      	mov	r0, r3
 8003510:	3720      	adds	r7, #32
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b08a      	sub	sp, #40	; 0x28
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	4613      	mov	r3, r2
 8003522:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003528:	2b20      	cmp	r3, #32
 800352a:	d13d      	bne.n	80035a8 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <HAL_UART_Receive_IT+0x22>
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e036      	b.n	80035aa <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_UART_Receive_IT+0x34>
 8003546:	2302      	movs	r3, #2
 8003548:	e02f      	b.n	80035aa <HAL_UART_Receive_IT+0x94>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d018      	beq.n	8003598 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	e853 3f00 	ldrex	r3, [r3]
 8003572:	613b      	str	r3, [r7, #16]
   return(result);
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	623b      	str	r3, [r7, #32]
 8003586:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003588:	69f9      	ldr	r1, [r7, #28]
 800358a:	6a3a      	ldr	r2, [r7, #32]
 800358c:	e841 2300 	strex	r3, r2, [r1]
 8003590:	61bb      	str	r3, [r7, #24]
   return(result);
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1e6      	bne.n	8003566 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	461a      	mov	r2, r3
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 fe90 	bl	80042c4 <UART_Start_Receive_IT>
 80035a4:	4603      	mov	r3, r0
 80035a6:	e000      	b.n	80035aa <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035a8:	2302      	movs	r3, #2
  }
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3728      	adds	r7, #40	; 0x28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b0ba      	sub	sp, #232	; 0xe8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80035de:	f640 030f 	movw	r3, #2063	; 0x80f
 80035e2:	4013      	ands	r3, r2
 80035e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80035e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d115      	bne.n	800361c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00f      	beq.n	800361c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	2b00      	cmp	r3, #0
 8003606:	d009      	beq.n	800361c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 82a3 	beq.w	8003b58 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	4798      	blx	r3
      }
      return;
 800361a:	e29d      	b.n	8003b58 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800361c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8117 	beq.w	8003854 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003632:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003636:	4b85      	ldr	r3, [pc, #532]	; (800384c <HAL_UART_IRQHandler+0x298>)
 8003638:	4013      	ands	r3, r2
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 810a 	beq.w	8003854 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d011      	beq.n	8003670 <HAL_UART_IRQHandler+0xbc>
 800364c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00b      	beq.n	8003670 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2201      	movs	r2, #1
 800365e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003666:	f043 0201 	orr.w	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d011      	beq.n	80036a0 <HAL_UART_IRQHandler+0xec>
 800367c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00b      	beq.n	80036a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2202      	movs	r2, #2
 800368e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003696:	f043 0204 	orr.w	r2, r3, #4
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d011      	beq.n	80036d0 <HAL_UART_IRQHandler+0x11c>
 80036ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00b      	beq.n	80036d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2204      	movs	r2, #4
 80036be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036c6:	f043 0202 	orr.w	r2, r3, #2
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d017      	beq.n	800370c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d105      	bne.n	80036f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80036e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00b      	beq.n	800370c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2208      	movs	r2, #8
 80036fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003702:	f043 0208 	orr.w	r2, r3, #8
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800370c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003714:	2b00      	cmp	r3, #0
 8003716:	d012      	beq.n	800373e <HAL_UART_IRQHandler+0x18a>
 8003718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800371c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00c      	beq.n	800373e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800372c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003734:	f043 0220 	orr.w	r2, r3, #32
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 8209 	beq.w	8003b5c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800374a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00d      	beq.n	8003772 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b00      	cmp	r3, #0
 8003760:	d007      	beq.n	8003772 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003778:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003786:	2b40      	cmp	r3, #64	; 0x40
 8003788:	d005      	beq.n	8003796 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800378a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800378e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003792:	2b00      	cmp	r3, #0
 8003794:	d04f      	beq.n	8003836 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fe40 	bl	800441c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a6:	2b40      	cmp	r3, #64	; 0x40
 80037a8:	d141      	bne.n	800382e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3308      	adds	r3, #8
 80037b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037b8:	e853 3f00 	ldrex	r3, [r3]
 80037bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3308      	adds	r3, #8
 80037d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80037e6:	e841 2300 	strex	r3, r2, [r1]
 80037ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1d9      	bne.n	80037aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d013      	beq.n	8003826 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	4a13      	ldr	r2, [pc, #76]	; (8003850 <HAL_UART_IRQHandler+0x29c>)
 8003804:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	4618      	mov	r0, r3
 800380c:	f7fd fef4 	bl	80015f8 <HAL_DMA_Abort_IT>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d017      	beq.n	8003846 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003820:	4610      	mov	r0, r2
 8003822:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003824:	e00f      	b.n	8003846 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f9ac 	bl	8003b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382c:	e00b      	b.n	8003846 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f9a8 	bl	8003b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003834:	e007      	b.n	8003846 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f9a4 	bl	8003b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003844:	e18a      	b.n	8003b5c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003846:	bf00      	nop
    return;
 8003848:	e188      	b.n	8003b5c <HAL_UART_IRQHandler+0x5a8>
 800384a:	bf00      	nop
 800384c:	04000120 	.word	0x04000120
 8003850:	080044e3 	.word	0x080044e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003858:	2b01      	cmp	r3, #1
 800385a:	f040 8143 	bne.w	8003ae4 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800385e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 813c 	beq.w	8003ae4 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800386c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 8135 	beq.w	8003ae4 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2210      	movs	r2, #16
 8003880:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388c:	2b40      	cmp	r3, #64	; 0x40
 800388e:	f040 80b1 	bne.w	80039f4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800389e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 815c 	beq.w	8003b60 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80038ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038b2:	429a      	cmp	r2, r3
 80038b4:	f080 8154 	bcs.w	8003b60 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	f000 8085 	beq.w	80039d8 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038fc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003904:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003908:	e841 2300 	strex	r3, r2, [r1]
 800390c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003910:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1da      	bne.n	80038ce <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3308      	adds	r3, #8
 800391e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003920:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003922:	e853 3f00 	ldrex	r3, [r3]
 8003926:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003928:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800392a:	f023 0301 	bic.w	r3, r3, #1
 800392e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3308      	adds	r3, #8
 8003938:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800393c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003940:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003944:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003948:	e841 2300 	strex	r3, r2, [r1]
 800394c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800394e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e1      	bne.n	8003918 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3308      	adds	r3, #8
 800395a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800395e:	e853 3f00 	ldrex	r3, [r3]
 8003962:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800396a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3308      	adds	r3, #8
 8003974:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003978:	66fa      	str	r2, [r7, #108]	; 0x6c
 800397a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800397e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003986:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e3      	bne.n	8003954 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a0:	e853 3f00 	ldrex	r3, [r3]
 80039a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039a8:	f023 0310 	bic.w	r3, r3, #16
 80039ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80039bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039c2:	e841 2300 	strex	r3, r2, [r1]
 80039c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1e4      	bne.n	8003998 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fd fdd7 	bl	8001586 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	4619      	mov	r1, r3
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f8d3 	bl	8003b98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039f2:	e0b5      	b.n	8003b60 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 80a7 	beq.w	8003b64 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003a16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 80a2 	beq.w	8003b64 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a42:	647b      	str	r3, [r7, #68]	; 0x44
 8003a44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a4a:	e841 2300 	strex	r3, r2, [r1]
 8003a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1e4      	bne.n	8003a20 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3308      	adds	r3, #8
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	623b      	str	r3, [r7, #32]
   return(result);
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	f023 0301 	bic.w	r3, r3, #1
 8003a6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3308      	adds	r3, #8
 8003a76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a7a:	633a      	str	r2, [r7, #48]	; 0x30
 8003a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e3      	bne.n	8003a56 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2220      	movs	r2, #32
 8003a92:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
 8003aac:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f023 0310 	bic.w	r3, r3, #16
 8003ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ac2:	61fb      	str	r3, [r7, #28]
 8003ac4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	69b9      	ldr	r1, [r7, #24]
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	617b      	str	r3, [r7, #20]
   return(result);
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e4      	bne.n	8003aa0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ad6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ada:	4619      	mov	r1, r3
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f85b 	bl	8003b98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ae2:	e03f      	b.n	8003b64 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00e      	beq.n	8003b0e <HAL_UART_IRQHandler+0x55a>
 8003af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fe87 	bl	800481a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b0c:	e02d      	b.n	8003b6a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00e      	beq.n	8003b38 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d008      	beq.n	8003b38 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d01c      	beq.n	8003b68 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	4798      	blx	r3
    }
    return;
 8003b36:	e017      	b.n	8003b68 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d012      	beq.n	8003b6a <HAL_UART_IRQHandler+0x5b6>
 8003b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00c      	beq.n	8003b6a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fcdc 	bl	800450e <UART_EndTransmit_IT>
    return;
 8003b56:	e008      	b.n	8003b6a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003b58:	bf00      	nop
 8003b5a:	e006      	b.n	8003b6a <HAL_UART_IRQHandler+0x5b6>
    return;
 8003b5c:	bf00      	nop
 8003b5e:	e004      	b.n	8003b6a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003b60:	bf00      	nop
 8003b62:	e002      	b.n	8003b6a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003b64:	bf00      	nop
 8003b66:	e000      	b.n	8003b6a <HAL_UART_IRQHandler+0x5b6>
    return;
 8003b68:	bf00      	nop
  }

}
 8003b6a:	37e8      	adds	r7, #232	; 0xe8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b08f      	sub	sp, #60	; 0x3c
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_HalfDuplex_EnableTransmitter+0x16>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e040      	b.n	8003c48 <HAL_HalfDuplex_EnableTransmitter+0x98>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2224      	movs	r2, #36	; 0x24
 8003bd2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	f023 030c 	bic.w	r3, r3, #12
 8003be8:	637b      	str	r3, [r7, #52]	; 0x34
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bf4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e6      	bne.n	8003bd4 <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
 8003c12:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f043 0308 	orr.w	r3, r3, #8
 8003c1a:	633b      	str	r3, [r7, #48]	; 0x30
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c28:	6979      	ldr	r1, [r7, #20]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	e841 2300 	strex	r3, r2, [r1]
 8003c30:	613b      	str	r3, [r7, #16]
   return(result);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e6      	bne.n	8003c06 <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	373c      	adds	r7, #60	; 0x3c
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b08f      	sub	sp, #60	; 0x3c
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_HalfDuplex_EnableReceiver+0x16>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e040      	b.n	8003cec <HAL_HalfDuplex_EnableReceiver+0x98>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2224      	movs	r2, #36	; 0x24
 8003c76:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	e853 3f00 	ldrex	r3, [r3]
 8003c84:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	f023 030c 	bic.w	r3, r3, #12
 8003c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c98:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e6      	bne.n	8003c78 <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	e853 3f00 	ldrex	r3, [r3]
 8003cb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f043 0304 	orr.w	r3, r3, #4
 8003cbe:	633b      	str	r3, [r7, #48]	; 0x30
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc8:	61bb      	str	r3, [r7, #24]
 8003cca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ccc:	6979      	ldr	r1, [r7, #20]
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	e841 2300 	strex	r3, r2, [r1]
 8003cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1e6      	bne.n	8003caa <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	373c      	adds	r7, #60	; 0x3c
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	4b8a      	ldr	r3, [pc, #552]	; (8003f4c <UART_SetConfig+0x254>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6812      	ldr	r2, [r2, #0]
 8003d2a:	6979      	ldr	r1, [r7, #20]
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a78      	ldr	r2, [pc, #480]	; (8003f50 <UART_SetConfig+0x258>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d120      	bne.n	8003db6 <UART_SetConfig+0xbe>
 8003d74:	4b77      	ldr	r3, [pc, #476]	; (8003f54 <UART_SetConfig+0x25c>)
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	d817      	bhi.n	8003db0 <UART_SetConfig+0xb8>
 8003d80:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <UART_SetConfig+0x90>)
 8003d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d86:	bf00      	nop
 8003d88:	08003d99 	.word	0x08003d99
 8003d8c:	08003da5 	.word	0x08003da5
 8003d90:	08003dab 	.word	0x08003dab
 8003d94:	08003d9f 	.word	0x08003d9f
 8003d98:	2300      	movs	r3, #0
 8003d9a:	77fb      	strb	r3, [r7, #31]
 8003d9c:	e01d      	b.n	8003dda <UART_SetConfig+0xe2>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	77fb      	strb	r3, [r7, #31]
 8003da2:	e01a      	b.n	8003dda <UART_SetConfig+0xe2>
 8003da4:	2304      	movs	r3, #4
 8003da6:	77fb      	strb	r3, [r7, #31]
 8003da8:	e017      	b.n	8003dda <UART_SetConfig+0xe2>
 8003daa:	2308      	movs	r3, #8
 8003dac:	77fb      	strb	r3, [r7, #31]
 8003dae:	e014      	b.n	8003dda <UART_SetConfig+0xe2>
 8003db0:	2310      	movs	r3, #16
 8003db2:	77fb      	strb	r3, [r7, #31]
 8003db4:	e011      	b.n	8003dda <UART_SetConfig+0xe2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a67      	ldr	r2, [pc, #412]	; (8003f58 <UART_SetConfig+0x260>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d102      	bne.n	8003dc6 <UART_SetConfig+0xce>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	77fb      	strb	r3, [r7, #31]
 8003dc4:	e009      	b.n	8003dda <UART_SetConfig+0xe2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a64      	ldr	r2, [pc, #400]	; (8003f5c <UART_SetConfig+0x264>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d102      	bne.n	8003dd6 <UART_SetConfig+0xde>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	77fb      	strb	r3, [r7, #31]
 8003dd4:	e001      	b.n	8003dda <UART_SetConfig+0xe2>
 8003dd6:	2310      	movs	r3, #16
 8003dd8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de2:	d15b      	bne.n	8003e9c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003de4:	7ffb      	ldrb	r3, [r7, #31]
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d827      	bhi.n	8003e3a <UART_SetConfig+0x142>
 8003dea:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <UART_SetConfig+0xf8>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003e15 	.word	0x08003e15
 8003df4:	08003e1d 	.word	0x08003e1d
 8003df8:	08003e25 	.word	0x08003e25
 8003dfc:	08003e3b 	.word	0x08003e3b
 8003e00:	08003e2b 	.word	0x08003e2b
 8003e04:	08003e3b 	.word	0x08003e3b
 8003e08:	08003e3b 	.word	0x08003e3b
 8003e0c:	08003e3b 	.word	0x08003e3b
 8003e10:	08003e33 	.word	0x08003e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e14:	f7ff f80c 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 8003e18:	61b8      	str	r0, [r7, #24]
        break;
 8003e1a:	e013      	b.n	8003e44 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e1c:	f7ff f82a 	bl	8002e74 <HAL_RCC_GetPCLK2Freq>
 8003e20:	61b8      	str	r0, [r7, #24]
        break;
 8003e22:	e00f      	b.n	8003e44 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e24:	4b4e      	ldr	r3, [pc, #312]	; (8003f60 <UART_SetConfig+0x268>)
 8003e26:	61bb      	str	r3, [r7, #24]
        break;
 8003e28:	e00c      	b.n	8003e44 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2a:	f7fe ff8b 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 8003e2e:	61b8      	str	r0, [r7, #24]
        break;
 8003e30:	e008      	b.n	8003e44 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e36:	61bb      	str	r3, [r7, #24]
        break;
 8003e38:	e004      	b.n	8003e44 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	77bb      	strb	r3, [r7, #30]
        break;
 8003e42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d074      	beq.n	8003f34 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	005a      	lsls	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	085b      	lsrs	r3, r3, #1
 8003e54:	441a      	add	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b0f      	cmp	r3, #15
 8003e66:	d916      	bls.n	8003e96 <UART_SetConfig+0x19e>
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6e:	d212      	bcs.n	8003e96 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	f023 030f 	bic.w	r3, r3, #15
 8003e78:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	085b      	lsrs	r3, r3, #1
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	89fb      	ldrh	r3, [r7, #14]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	89fa      	ldrh	r2, [r7, #14]
 8003e92:	60da      	str	r2, [r3, #12]
 8003e94:	e04e      	b.n	8003f34 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	77bb      	strb	r3, [r7, #30]
 8003e9a:	e04b      	b.n	8003f34 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e9c:	7ffb      	ldrb	r3, [r7, #31]
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d827      	bhi.n	8003ef2 <UART_SetConfig+0x1fa>
 8003ea2:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <UART_SetConfig+0x1b0>)
 8003ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea8:	08003ecd 	.word	0x08003ecd
 8003eac:	08003ed5 	.word	0x08003ed5
 8003eb0:	08003edd 	.word	0x08003edd
 8003eb4:	08003ef3 	.word	0x08003ef3
 8003eb8:	08003ee3 	.word	0x08003ee3
 8003ebc:	08003ef3 	.word	0x08003ef3
 8003ec0:	08003ef3 	.word	0x08003ef3
 8003ec4:	08003ef3 	.word	0x08003ef3
 8003ec8:	08003eeb 	.word	0x08003eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ecc:	f7fe ffb0 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 8003ed0:	61b8      	str	r0, [r7, #24]
        break;
 8003ed2:	e013      	b.n	8003efc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed4:	f7fe ffce 	bl	8002e74 <HAL_RCC_GetPCLK2Freq>
 8003ed8:	61b8      	str	r0, [r7, #24]
        break;
 8003eda:	e00f      	b.n	8003efc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003edc:	4b20      	ldr	r3, [pc, #128]	; (8003f60 <UART_SetConfig+0x268>)
 8003ede:	61bb      	str	r3, [r7, #24]
        break;
 8003ee0:	e00c      	b.n	8003efc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ee2:	f7fe ff2f 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 8003ee6:	61b8      	str	r0, [r7, #24]
        break;
 8003ee8:	e008      	b.n	8003efc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eee:	61bb      	str	r3, [r7, #24]
        break;
 8003ef0:	e004      	b.n	8003efc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	77bb      	strb	r3, [r7, #30]
        break;
 8003efa:	bf00      	nop
    }

    if (pclk != 0U)
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d018      	beq.n	8003f34 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	085a      	lsrs	r2, r3, #1
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	441a      	add	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	2b0f      	cmp	r3, #15
 8003f1c:	d908      	bls.n	8003f30 <UART_SetConfig+0x238>
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f24:	d204      	bcs.n	8003f30 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	60da      	str	r2, [r3, #12]
 8003f2e:	e001      	b.n	8003f34 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f40:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3720      	adds	r7, #32
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	efff69f3 	.word	0xefff69f3
 8003f50:	40013800 	.word	0x40013800
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40004400 	.word	0x40004400
 8003f5c:	40004800 	.word	0x40004800
 8003f60:	007a1200 	.word	0x007a1200

08003f64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	f003 0310 	and.w	r3, r3, #16
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	f003 0320 	and.w	r3, r3, #32
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01a      	beq.n	800407a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004062:	d10a      	bne.n	800407a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	605a      	str	r2, [r3, #4]
  }
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040b8:	f7fd f924 	bl	8001304 <HAL_GetTick>
 80040bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d10e      	bne.n	80040ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f82d 	bl	800413a <UART_WaitOnFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e023      	b.n	8004132 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d10e      	bne.n	8004116 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f817 	bl	800413a <UART_WaitOnFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e00d      	b.n	8004132 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b09c      	sub	sp, #112	; 0x70
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	603b      	str	r3, [r7, #0]
 8004146:	4613      	mov	r3, r2
 8004148:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800414a:	e0a5      	b.n	8004298 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800414c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800414e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004152:	f000 80a1 	beq.w	8004298 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004156:	f7fd f8d5 	bl	8001304 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004162:	429a      	cmp	r2, r3
 8004164:	d302      	bcc.n	800416c <UART_WaitOnFlagUntilTimeout+0x32>
 8004166:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004168:	2b00      	cmp	r3, #0
 800416a:	d13e      	bne.n	80041ea <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800417a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800417c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004180:	667b      	str	r3, [r7, #100]	; 0x64
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800418a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800418c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004190:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e6      	bne.n	800416c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3308      	adds	r3, #8
 80041a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b0:	f023 0301 	bic.w	r3, r3, #1
 80041b4:	663b      	str	r3, [r7, #96]	; 0x60
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3308      	adds	r3, #8
 80041bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041be:	64ba      	str	r2, [r7, #72]	; 0x48
 80041c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e5      	bne.n	800419e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2220      	movs	r2, #32
 80041dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e067      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d04f      	beq.n	8004298 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004206:	d147      	bne.n	8004298 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004210:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004226:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004230:	637b      	str	r3, [r7, #52]	; 0x34
 8004232:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800423e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e6      	bne.n	8004212 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3308      	adds	r3, #8
 800424a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	e853 3f00 	ldrex	r3, [r3]
 8004252:	613b      	str	r3, [r7, #16]
   return(result);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f023 0301 	bic.w	r3, r3, #1
 800425a:	66bb      	str	r3, [r7, #104]	; 0x68
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3308      	adds	r3, #8
 8004262:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004264:	623a      	str	r2, [r7, #32]
 8004266:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	69f9      	ldr	r1, [r7, #28]
 800426a:	6a3a      	ldr	r2, [r7, #32]
 800426c:	e841 2300 	strex	r3, r2, [r1]
 8004270:	61bb      	str	r3, [r7, #24]
   return(result);
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e5      	bne.n	8004244 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e010      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69da      	ldr	r2, [r3, #28]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	4013      	ands	r3, r2
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	bf0c      	ite	eq
 80042a8:	2301      	moveq	r3, #1
 80042aa:	2300      	movne	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	461a      	mov	r2, r3
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	f43f af4a 	beq.w	800414c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3770      	adds	r7, #112	; 0x70
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b091      	sub	sp, #68	; 0x44
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	4613      	mov	r3, r2
 80042d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	88fa      	ldrh	r2, [r7, #6]
 80042dc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	88fa      	ldrh	r2, [r7, #6]
 80042e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f6:	d10e      	bne.n	8004316 <UART_Start_Receive_IT+0x52>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d105      	bne.n	800430c <UART_Start_Receive_IT+0x48>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004306:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800430a:	e02d      	b.n	8004368 <UART_Start_Receive_IT+0xa4>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	22ff      	movs	r2, #255	; 0xff
 8004310:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004314:	e028      	b.n	8004368 <UART_Start_Receive_IT+0xa4>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10d      	bne.n	800433a <UART_Start_Receive_IT+0x76>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d104      	bne.n	8004330 <UART_Start_Receive_IT+0x6c>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	22ff      	movs	r2, #255	; 0xff
 800432a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800432e:	e01b      	b.n	8004368 <UART_Start_Receive_IT+0xa4>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	227f      	movs	r2, #127	; 0x7f
 8004334:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004338:	e016      	b.n	8004368 <UART_Start_Receive_IT+0xa4>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004342:	d10d      	bne.n	8004360 <UART_Start_Receive_IT+0x9c>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d104      	bne.n	8004356 <UART_Start_Receive_IT+0x92>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	227f      	movs	r2, #127	; 0x7f
 8004350:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004354:	e008      	b.n	8004368 <UART_Start_Receive_IT+0xa4>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	223f      	movs	r2, #63	; 0x3f
 800435a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800435e:	e003      	b.n	8004368 <UART_Start_Receive_IT+0xa4>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2222      	movs	r2, #34	; 0x22
 8004374:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3308      	adds	r3, #8
 800437c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3308      	adds	r3, #8
 8004394:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004396:	637a      	str	r2, [r7, #52]	; 0x34
 8004398:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800439c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800439e:	e841 2300 	strex	r3, r2, [r1]
 80043a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1e5      	bne.n	8004376 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b2:	d107      	bne.n	80043c4 <UART_Start_Receive_IT+0x100>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d103      	bne.n	80043c4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4a15      	ldr	r2, [pc, #84]	; (8004414 <UART_Start_Receive_IT+0x150>)
 80043c0:	665a      	str	r2, [r3, #100]	; 0x64
 80043c2:	e002      	b.n	80043ca <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4a14      	ldr	r2, [pc, #80]	; (8004418 <UART_Start_Receive_IT+0x154>)
 80043c8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	e853 3f00 	ldrex	r3, [r3]
 80043de:	613b      	str	r3, [r7, #16]
   return(result);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80043e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f0:	623b      	str	r3, [r7, #32]
 80043f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	69f9      	ldr	r1, [r7, #28]
 80043f6:	6a3a      	ldr	r2, [r7, #32]
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e6      	bne.n	80043d2 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3744      	adds	r7, #68	; 0x44
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	080046bf 	.word	0x080046bf
 8004418:	08004563 	.word	0x08004563

0800441c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800441c:	b480      	push	{r7}
 800441e:	b095      	sub	sp, #84	; 0x54
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004438:	64fb      	str	r3, [r7, #76]	; 0x4c
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004442:	643b      	str	r3, [r7, #64]	; 0x40
 8004444:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004448:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e6      	bne.n	8004424 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3308      	adds	r3, #8
 800445c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	e853 3f00 	ldrex	r3, [r3]
 8004464:	61fb      	str	r3, [r7, #28]
   return(result);
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	f023 0301 	bic.w	r3, r3, #1
 800446c:	64bb      	str	r3, [r7, #72]	; 0x48
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3308      	adds	r3, #8
 8004474:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004476:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004478:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800447c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800447e:	e841 2300 	strex	r3, r2, [r1]
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1e5      	bne.n	8004456 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800448e:	2b01      	cmp	r3, #1
 8004490:	d118      	bne.n	80044c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	60bb      	str	r3, [r7, #8]
   return(result);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f023 0310 	bic.w	r3, r3, #16
 80044a6:	647b      	str	r3, [r7, #68]	; 0x44
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6979      	ldr	r1, [r7, #20]
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	613b      	str	r3, [r7, #16]
   return(result);
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e6      	bne.n	8004492 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80044d6:	bf00      	nop
 80044d8:	3754      	adds	r7, #84	; 0x54
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7ff fb3f 	bl	8003b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004506:	bf00      	nop
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b088      	sub	sp, #32
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	60bb      	str	r3, [r7, #8]
   return(result);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800452a:	61fb      	str	r3, [r7, #28]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	61bb      	str	r3, [r7, #24]
 8004536:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6979      	ldr	r1, [r7, #20]
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	613b      	str	r3, [r7, #16]
   return(result);
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e6      	bne.n	8004516 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff fb0b 	bl	8003b70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800455a:	bf00      	nop
 800455c:	3720      	adds	r7, #32
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b096      	sub	sp, #88	; 0x58
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004570:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004578:	2b22      	cmp	r3, #34	; 0x22
 800457a:	f040 8094 	bne.w	80046a6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004584:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004588:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800458c:	b2d9      	uxtb	r1, r3
 800458e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004592:	b2da      	uxtb	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004598:	400a      	ands	r2, r1
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d177      	bne.n	80046b6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045da:	653b      	str	r3, [r7, #80]	; 0x50
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	461a      	mov	r2, r3
 80045e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045e4:	647b      	str	r3, [r7, #68]	; 0x44
 80045e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045ec:	e841 2300 	strex	r3, r2, [r1]
 80045f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e6      	bne.n	80045c6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3308      	adds	r3, #8
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	e853 3f00 	ldrex	r3, [r3]
 8004606:	623b      	str	r3, [r7, #32]
   return(result);
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	f023 0301 	bic.w	r3, r3, #1
 800460e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3308      	adds	r3, #8
 8004616:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004618:	633a      	str	r2, [r7, #48]	; 0x30
 800461a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800461e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004620:	e841 2300 	strex	r3, r2, [r1]
 8004624:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1e5      	bne.n	80045f8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800463c:	2b01      	cmp	r3, #1
 800463e:	d12e      	bne.n	800469e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	e853 3f00 	ldrex	r3, [r3]
 8004652:	60fb      	str	r3, [r7, #12]
   return(result);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0310 	bic.w	r3, r3, #16
 800465a:	64bb      	str	r3, [r7, #72]	; 0x48
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	461a      	mov	r2, r3
 8004662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004664:	61fb      	str	r3, [r7, #28]
 8004666:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004668:	69b9      	ldr	r1, [r7, #24]
 800466a:	69fa      	ldr	r2, [r7, #28]
 800466c:	e841 2300 	strex	r3, r2, [r1]
 8004670:	617b      	str	r3, [r7, #20]
   return(result);
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1e6      	bne.n	8004646 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	f003 0310 	and.w	r3, r3, #16
 8004682:	2b10      	cmp	r3, #16
 8004684:	d103      	bne.n	800468e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2210      	movs	r2, #16
 800468c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004694:	4619      	mov	r1, r3
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7ff fa7e 	bl	8003b98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800469c:	e00b      	b.n	80046b6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fb fe58 	bl	8000354 <HAL_UART_RxCpltCallback>
}
 80046a4:	e007      	b.n	80046b6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699a      	ldr	r2, [r3, #24]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0208 	orr.w	r2, r2, #8
 80046b4:	619a      	str	r2, [r3, #24]
}
 80046b6:	bf00      	nop
 80046b8:	3758      	adds	r7, #88	; 0x58
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b096      	sub	sp, #88	; 0x58
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046d4:	2b22      	cmp	r3, #34	; 0x22
 80046d6:	f040 8094 	bne.w	8004802 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80046e0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80046ea:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80046ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80046f2:	4013      	ands	r3, r2
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fe:	1c9a      	adds	r2, r3, #2
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d177      	bne.n	8004812 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472a:	e853 3f00 	ldrex	r3, [r3]
 800472e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004732:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004740:	643b      	str	r3, [r7, #64]	; 0x40
 8004742:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004744:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004746:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004748:	e841 2300 	strex	r3, r2, [r1]
 800474c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1e6      	bne.n	8004722 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3308      	adds	r3, #8
 800475a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	e853 3f00 	ldrex	r3, [r3]
 8004762:	61fb      	str	r3, [r7, #28]
   return(result);
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f023 0301 	bic.w	r3, r3, #1
 800476a:	64bb      	str	r3, [r7, #72]	; 0x48
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3308      	adds	r3, #8
 8004772:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004774:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004776:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004778:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800477a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800477c:	e841 2300 	strex	r3, r2, [r1]
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1e5      	bne.n	8004754 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2220      	movs	r2, #32
 800478c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004798:	2b01      	cmp	r3, #1
 800479a:	d12e      	bne.n	80047fa <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	e853 3f00 	ldrex	r3, [r3]
 80047ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f023 0310 	bic.w	r3, r3, #16
 80047b6:	647b      	str	r3, [r7, #68]	; 0x44
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	461a      	mov	r2, r3
 80047be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c4:	6979      	ldr	r1, [r7, #20]
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	e841 2300 	strex	r3, r2, [r1]
 80047cc:	613b      	str	r3, [r7, #16]
   return(result);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e6      	bne.n	80047a2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f003 0310 	and.w	r3, r3, #16
 80047de:	2b10      	cmp	r3, #16
 80047e0:	d103      	bne.n	80047ea <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2210      	movs	r2, #16
 80047e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047f0:	4619      	mov	r1, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7ff f9d0 	bl	8003b98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047f8:	e00b      	b.n	8004812 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fb fdaa 	bl	8000354 <HAL_UART_RxCpltCallback>
}
 8004800:	e007      	b.n	8004812 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	699a      	ldr	r2, [r3, #24]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 0208 	orr.w	r2, r2, #8
 8004810:	619a      	str	r2, [r3, #24]
}
 8004812:	bf00      	nop
 8004814:	3758      	adds	r7, #88	; 0x58
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	71fb      	strb	r3, [r7, #7]
 800483a:	460b      	mov	r3, r1
 800483c:	71bb      	strb	r3, [r7, #6]
 800483e:	4613      	mov	r3, r2
 8004840:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8004842:	797b      	ldrb	r3, [r7, #5]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d901      	bls.n	800484c <tmc_fillCRC8Table+0x1c>
		return 0;
 8004848:	2300      	movs	r3, #0
 800484a:	e09e      	b.n	800498a <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 800484c:	797a      	ldrb	r2, [r7, #5]
 800484e:	4951      	ldr	r1, [pc, #324]	; (8004994 <tmc_fillCRC8Table+0x164>)
 8004850:	4613      	mov	r3, r2
 8004852:	01db      	lsls	r3, r3, #7
 8004854:	4413      	add	r3, r2
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	440b      	add	r3, r1
 800485a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800485e:	79fa      	ldrb	r2, [r7, #7]
 8004860:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 8004862:	797a      	ldrb	r2, [r7, #5]
 8004864:	494b      	ldr	r1, [pc, #300]	; (8004994 <tmc_fillCRC8Table+0x164>)
 8004866:	4613      	mov	r3, r2
 8004868:	01db      	lsls	r3, r3, #7
 800486a:	4413      	add	r3, r2
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	440b      	add	r3, r1
 8004870:	f203 1301 	addw	r3, r3, #257	; 0x101
 8004874:	79ba      	ldrb	r2, [r7, #6]
 8004876:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 8004878:	797a      	ldrb	r2, [r7, #5]
 800487a:	4613      	mov	r3, r2
 800487c:	01db      	lsls	r3, r3, #7
 800487e:	4413      	add	r3, r2
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	4a44      	ldr	r2, [pc, #272]	; (8004994 <tmc_fillCRC8Table+0x164>)
 8004884:	4413      	add	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 8004888:	79fb      	ldrb	r3, [r7, #7]
 800488a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800488e:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8004890:	4b41      	ldr	r3, [pc, #260]	; (8004998 <tmc_fillCRC8Table+0x168>)
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	e074      	b.n	8004980 <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 8004896:	79bb      	ldrb	r3, [r7, #6]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d004      	beq.n	80048a6 <tmc_fillCRC8Table+0x76>
 800489c:	6978      	ldr	r0, [r7, #20]
 800489e:	f000 f8f7 	bl	8004a90 <flipBitsInBytes>
 80048a2:	4603      	mov	r3, r0
 80048a4:	e000      	b.n	80048a8 <tmc_fillCRC8Table+0x78>
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 80048aa:	2300      	movs	r3, #0
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	e035      	b.n	800491c <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	0fdb      	lsrs	r3, r3, #31
 80048b4:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <tmc_fillCRC8Table+0x9a>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	e000      	b.n	80048cc <tmc_fillCRC8Table+0x9c>
 80048ca:	2300      	movs	r3, #0
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	4053      	eors	r3, r2
 80048d0:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <tmc_fillCRC8Table+0xb2>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	021b      	lsls	r3, r3, #8
 80048e0:	e000      	b.n	80048e4 <tmc_fillCRC8Table+0xb4>
 80048e2:	2300      	movs	r3, #0
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	4053      	eors	r3, r2
 80048e8:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <tmc_fillCRC8Table+0xca>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	041b      	lsls	r3, r3, #16
 80048f8:	e000      	b.n	80048fc <tmc_fillCRC8Table+0xcc>
 80048fa:	2300      	movs	r3, #0
 80048fc:	69fa      	ldr	r2, [r7, #28]
 80048fe:	4053      	eors	r3, r2
 8004900:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 8004902:	7afb      	ldrb	r3, [r7, #11]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <tmc_fillCRC8Table+0xde>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	061b      	lsls	r3, r3, #24
 800490c:	e000      	b.n	8004910 <tmc_fillCRC8Table+0xe0>
 800490e:	2300      	movs	r3, #0
 8004910:	69fa      	ldr	r2, [r7, #28]
 8004912:	4053      	eors	r3, r2
 8004914:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	3301      	adds	r3, #1
 800491a:	613b      	str	r3, [r7, #16]
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	2b07      	cmp	r3, #7
 8004920:	ddc6      	ble.n	80048b0 <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 8004922:	79bb      	ldrb	r3, [r7, #6]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d004      	beq.n	8004932 <tmc_fillCRC8Table+0x102>
 8004928:	69f8      	ldr	r0, [r7, #28]
 800492a:	f000 f8b1 	bl	8004a90 <flipBitsInBytes>
 800492e:	4603      	mov	r3, r0
 8004930:	e000      	b.n	8004934 <tmc_fillCRC8Table+0x104>
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	61ba      	str	r2, [r7, #24]
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	0a1b      	lsrs	r3, r3, #8
 8004946:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	61ba      	str	r2, [r7, #24]
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	0a1b      	lsrs	r3, r3, #8
 8004958:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	61ba      	str	r2, [r7, #24]
 8004960:	69fa      	ldr	r2, [r7, #28]
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	0a1b      	lsrs	r3, r3, #8
 800496a:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	61ba      	str	r2, [r7, #24]
 8004972:	69fa      	ldr	r2, [r7, #28]
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	4a06      	ldr	r2, [pc, #24]	; (800499c <tmc_fillCRC8Table+0x16c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d186      	bne.n	8004896 <tmc_fillCRC8Table+0x66>
	}

	return 1;
 8004988:	2301      	movs	r3, #1
}
 800498a:	4618      	mov	r0, r3
 800498c:	3720      	adds	r7, #32
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	2000063c 	.word	0x2000063c
 8004998:	03020100 	.word	0x03020100
 800499c:	04030200 	.word	0x04030200

080049a0 <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	4613      	mov	r3, r2
 80049ac:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 80049b2:	79fb      	ldrb	r3, [r7, #7]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d901      	bls.n	80049bc <tmc_CRC8+0x1c>
		return 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	e02c      	b.n	8004a16 <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 80049bc:	79fa      	ldrb	r2, [r7, #7]
 80049be:	4613      	mov	r3, r2
 80049c0:	01db      	lsls	r3, r3, #7
 80049c2:	4413      	add	r3, r2
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	4a16      	ldr	r2, [pc, #88]	; (8004a20 <tmc_CRC8+0x80>)
 80049c8:	4413      	add	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]

	while(bytes--)
 80049cc:	e00b      	b.n	80049e6 <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	60fa      	str	r2, [r7, #12]
 80049d4:	781a      	ldrb	r2, [r3, #0]
 80049d6:	7dfb      	ldrb	r3, [r7, #23]
 80049d8:	4053      	eors	r3, r2
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	461a      	mov	r2, r3
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4413      	add	r3, r2
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	1e5a      	subs	r2, r3, #1
 80049ea:	60ba      	str	r2, [r7, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1ee      	bne.n	80049ce <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 80049f0:	79fa      	ldrb	r2, [r7, #7]
 80049f2:	490b      	ldr	r1, [pc, #44]	; (8004a20 <tmc_CRC8+0x80>)
 80049f4:	4613      	mov	r3, r2
 80049f6:	01db      	lsls	r3, r3, #7
 80049f8:	4413      	add	r3, r2
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	440b      	add	r3, r1
 80049fe:	f203 1301 	addw	r3, r3, #257	; 0x101
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d005      	beq.n	8004a14 <tmc_CRC8+0x74>
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 f80a 	bl	8004a24 <flipByte>
 8004a10:	4603      	mov	r3, r0
 8004a12:	e000      	b.n	8004a16 <tmc_CRC8+0x76>
 8004a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	2000063c 	.word	0x2000063c

08004a24 <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	085b      	lsrs	r3, r3, #1
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	b25b      	sxtb	r3, r3
 8004a36:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8004a3a:	b25a      	sxtb	r2, r3
 8004a3c:	79fb      	ldrb	r3, [r7, #7]
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	b25b      	sxtb	r3, r3
 8004a42:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8004a46:	b25b      	sxtb	r3, r3
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	b25b      	sxtb	r3, r3
 8004a4c:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	089b      	lsrs	r3, r3, #2
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	b25b      	sxtb	r3, r3
 8004a56:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8004a5a:	b25a      	sxtb	r2, r3
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	b25b      	sxtb	r3, r3
 8004a62:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8004a66:	b25b      	sxtb	r3, r3
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	b25b      	sxtb	r3, r3
 8004a6c:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 8004a6e:	79fb      	ldrb	r3, [r7, #7]
 8004a70:	091b      	lsrs	r3, r3, #4
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	b25a      	sxtb	r2, r3
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	b25b      	sxtb	r3, r3
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	b25b      	sxtb	r3, r3
 8004a80:	71fb      	strb	r3, [r7, #7]

	return value;
 8004a82:	79fb      	ldrb	r3, [r7, #7]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	085b      	lsrs	r3, r3, #1
 8004a9c:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	089b      	lsrs	r3, r3, #2
 8004ab0:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 8004abc:	4313      	orrs	r3, r2
 8004abe:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	091b      	lsrs	r3, r3, #4
 8004ac4:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	607b      	str	r3, [r7, #4]

	return value;
 8004ad4:	687b      	ldr	r3, [r7, #4]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b086      	sub	sp, #24
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	460b      	mov	r3, r1
 8004aec:	607a      	str	r2, [r7, #4]
 8004aee:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];

	data[0] = 0x05;
 8004af0:	2305      	movs	r3, #5
 8004af2:	743b      	strb	r3, [r7, #16]
	data[1] = tmc2209->slaveAddress;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8004afa:	747b      	strb	r3, [r7, #17]
	data[2] = address | TMC_WRITE_BIT;
 8004afc:	7afb      	ldrb	r3, [r7, #11]
 8004afe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	74bb      	strb	r3, [r7, #18]
	data[3] = (value >> 24) & 0xFF;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	0e1b      	lsrs	r3, r3, #24
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	74fb      	strb	r3, [r7, #19]
	data[4] = (value >> 16) & 0xFF;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	141b      	asrs	r3, r3, #16
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	753b      	strb	r3, [r7, #20]
	data[5] = (value >> 8 ) & 0xFF;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	121b      	asrs	r3, r3, #8
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	757b      	strb	r3, [r7, #21]
	data[6] = (value      ) & 0xFF;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	75bb      	strb	r3, [r7, #22]
	data[7] = tmc2209_CRC8(data, 7);
 8004b24:	f107 0310 	add.w	r3, r7, #16
 8004b28:	2107      	movs	r1, #7
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fb fbc8 	bl	80002c0 <tmc2209_CRC8>
 8004b30:	4603      	mov	r3, r0
 8004b32:	75fb      	strb	r3, [r7, #23]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8004b3c:	f107 0110 	add.w	r1, r7, #16
 8004b40:	2300      	movs	r3, #0
 8004b42:	2208      	movs	r2, #8
 8004b44:	f7fb fb94 	bl	8000270 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
 8004b48:	7afb      	ldrb	r3, [r7, #11]
 8004b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b4e:	72fb      	strb	r3, [r7, #11]
	tmc2209->config->shadowRegister[address] = value;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	7afb      	ldrb	r3, [r7, #11]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	605a      	str	r2, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
 8004b5e:	7afb      	ldrb	r3, [r7, #11]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	f893 2204 	ldrb.w	r2, [r3, #516]	; 0x204
 8004b68:	7afb      	ldrb	r3, [r7, #11]
 8004b6a:	f042 0208 	orr.w	r2, r2, #8
 8004b6e:	b2d1      	uxtb	r1, r2
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4413      	add	r3, r2
 8004b74:	460a      	mov	r2, r1
 8004b76:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 8004b7a:	bf00      	nop
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 8004b82:	b590      	push	{r4, r7, lr}
 8004b84:	b085      	sub	sp, #20
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60bb      	str	r3, [r7, #8]
 8004b92:	2300      	movs	r3, #0
 8004b94:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 8004b96:	78fb      	ldrb	r3, [r7, #3]
 8004b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b9c:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 8004b9e:	78fb      	ldrb	r3, [r7, #3]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d106      	bne.n	8004bbe <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	e03f      	b.n	8004c3e <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 8004bbe:	2305      	movs	r3, #5
 8004bc0:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8004bc8:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 8004bce:	f107 0308 	add.w	r3, r7, #8
 8004bd2:	2103      	movs	r1, #3
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fb fb73 	bl	80002c0 <tmc2209_CRC8>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8004be6:	f107 0108 	add.w	r1, r7, #8
 8004bea:	2308      	movs	r3, #8
 8004bec:	2204      	movs	r2, #4
 8004bee:	f7fb fb3f 	bl	8000270 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 8004bf2:	7a3b      	ldrb	r3, [r7, #8]
 8004bf4:	2b05      	cmp	r3, #5
 8004bf6:	d001      	beq.n	8004bfc <tmc2209_readInt+0x7a>
		return 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	e020      	b.n	8004c3e <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 8004bfc:	7a7b      	ldrb	r3, [r7, #9]
 8004bfe:	2bff      	cmp	r3, #255	; 0xff
 8004c00:	d001      	beq.n	8004c06 <tmc2209_readInt+0x84>
		return 0;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e01b      	b.n	8004c3e <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 8004c06:	7abb      	ldrb	r3, [r7, #10]
 8004c08:	78fa      	ldrb	r2, [r7, #3]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d001      	beq.n	8004c12 <tmc2209_readInt+0x90>
		return 0;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e015      	b.n	8004c3e <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 8004c12:	7bfc      	ldrb	r4, [r7, #15]
 8004c14:	f107 0308 	add.w	r3, r7, #8
 8004c18:	2107      	movs	r1, #7
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fb fb50 	bl	80002c0 <tmc2209_CRC8>
 8004c20:	4603      	mov	r3, r0
 8004c22:	429c      	cmp	r4, r3
 8004c24:	d001      	beq.n	8004c2a <tmc2209_readInt+0xa8>
		return 0;
 8004c26:	2300      	movs	r3, #0
 8004c28:	e009      	b.n	8004c3e <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 8004c2a:	7afb      	ldrb	r3, [r7, #11]
 8004c2c:	061a      	lsls	r2, r3, #24
 8004c2e:	7b3b      	ldrb	r3, [r7, #12]
 8004c30:	041b      	lsls	r3, r3, #16
 8004c32:	4313      	orrs	r3, r2
 8004c34:	7b7a      	ldrb	r2, [r7, #13]
 8004c36:	0212      	lsls	r2, r2, #8
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	7bba      	ldrb	r2, [r7, #14]
 8004c3c:	4313      	orrs	r3, r2
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd90      	pop	{r4, r7, pc}
	...

08004c48 <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	607b      	str	r3, [r7, #4]
 8004c52:	460b      	mov	r3, r1
 8004c54:	72fb      	strb	r3, [r7, #11]
 8004c56:	4613      	mov	r3, r2
 8004c58:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	7aba      	ldrb	r2, [r7, #10]
 8004c5e:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	7afa      	ldrb	r2, [r7, #11]
 8004c78:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2200      	movs	r2, #0
 8004c82:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	e017      	b.n	8004cc2 <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 8004c92:	4a11      	ldr	r2, [pc, #68]	; (8004cd8 <tmc2209_init+0x90>)
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	4413      	add	r3, r2
 8004c98:	7819      	ldrb	r1, [r3, #0]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004ca4:	460a      	mov	r2, r1
 8004ca6:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	6a3a      	ldr	r2, [r7, #32]
 8004cae:	4413      	add	r3, r2
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68f9      	ldr	r1, [r7, #12]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8004cc6:	d9e4      	bls.n	8004c92 <tmc2209_init+0x4a>
	}
}
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	08006534 	.word	0x08006534

08004cdc <writeConfiguration>:

static void writeConfiguration(TMC2209TypeDef *tmc2209)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = &tmc2209->config->configIndex;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	60bb      	str	r3, [r7, #8]
	const int32_t *settings;

	if(tmc2209->config->state == CONFIG_RESTORE)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d131      	bne.n	8004d5a <writeConfiguration+0x7e>
	{
		settings = tmc2209->config->shadowRegister;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	60fb      	str	r3, [r7, #12]
		// Find the next restorable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8004cfe:	e005      	b.n	8004d0c <writeConfiguration+0x30>
		{
			(*ptr)++;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	3301      	adds	r3, #1
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	b25b      	sxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	db3b      	blt.n	8004d8e <writeConfiguration+0xb2>
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0e9      	beq.n	8004d00 <writeConfiguration+0x24>
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	461a      	mov	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4413      	add	r3, r2
 8004d36:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d025      	beq.n	8004d8e <writeConfiguration+0xb2>
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0d3      	beq.n	8004d00 <writeConfiguration+0x24>
 8004d58:	e019      	b.n	8004d8e <writeConfiguration+0xb2>
		}
	}
	else
	{
		settings = tmc2209->registerResetState;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	60fb      	str	r3, [r7, #12]
		// Find the next resettable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8004d60:	e005      	b.n	8004d6e <writeConfiguration+0x92>
		{
			(*ptr)++;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	3301      	adds	r3, #1
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	b25b      	sxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	db0a      	blt.n	8004d8e <writeConfiguration+0xb2>
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4413      	add	r3, r2
 8004d82:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004d86:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d1e9      	bne.n	8004d62 <writeConfiguration+0x86>
		}
	}

	if(*ptr < TMC2209_REGISTER_COUNT)
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	b25b      	sxtb	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	db12      	blt.n	8004dbe <writeConfiguration+0xe2>
	{
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	7819      	ldrb	r1, [r3, #0]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4413      	add	r3, r2
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7ff fe99 	bl	8004ae2 <tmc2209_writeInt>
		(*ptr)++;
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	3301      	adds	r3, #1
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	701a      	strb	r2, [r3, #0]
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
		}

		tmc2209->config->state = CONFIG_READY;
	}
}
 8004dbc:	e013      	b.n	8004de6 <writeConfiguration+0x10a>
		if(tmc2209->config->callback)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d009      	beq.n	8004dde <writeConfiguration+0x102>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	7812      	ldrb	r2, [r2, #0]
 8004dd8:	4611      	mov	r1, r2
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2200      	movs	r2, #0
 8004de4:	701a      	strb	r2, [r3, #0]
}
 8004de6:	bf00      	nop
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <tmc2209_periodicJob>:

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b082      	sub	sp, #8
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	6039      	str	r1, [r7, #0]
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <tmc2209_periodicJob+0x1c>
	{
		writeConfiguration(tmc2209);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7ff ff6a 	bl	8004cdc <writeConfiguration>
		return;
 8004e08:	bf00      	nop
	}
}
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <tmc2209_reset+0x16>
		return false;
 8004e22:	2300      	movs	r3, #0
 8004e24:	e028      	b.n	8004e78 <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	e019      	b.n	8004e60 <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	f023 0308 	bic.w	r3, r3, #8
 8004e3c:	b2d9      	uxtb	r1, r3
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004e48:	460a      	mov	r2, r1
 8004e4a:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	2200      	movs	r2, #0
 8004e58:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b7f      	cmp	r3, #127	; 0x7f
 8004e64:	d9e2      	bls.n	8004e2c <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2200      	movs	r2, #0
 8004e74:	705a      	strb	r2, [r3, #1]

	return true;
 8004e76:	2301      	movs	r3, #1
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <tmc2209_restore+0x16>
		return false;
 8004e96:	2300      	movs	r3, #0
 8004e98:	e008      	b.n	8004eac <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	705a      	strb	r2, [r3, #1]

	return true;
 8004eaa:	2301      	movs	r3, #1
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <__errno>:
 8004eb8:	4b01      	ldr	r3, [pc, #4]	; (8004ec0 <__errno+0x8>)
 8004eba:	6818      	ldr	r0, [r3, #0]
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	2000000c 	.word	0x2000000c

08004ec4 <__libc_init_array>:
 8004ec4:	b570      	push	{r4, r5, r6, lr}
 8004ec6:	4d0d      	ldr	r5, [pc, #52]	; (8004efc <__libc_init_array+0x38>)
 8004ec8:	4c0d      	ldr	r4, [pc, #52]	; (8004f00 <__libc_init_array+0x3c>)
 8004eca:	1b64      	subs	r4, r4, r5
 8004ecc:	10a4      	asrs	r4, r4, #2
 8004ece:	2600      	movs	r6, #0
 8004ed0:	42a6      	cmp	r6, r4
 8004ed2:	d109      	bne.n	8004ee8 <__libc_init_array+0x24>
 8004ed4:	4d0b      	ldr	r5, [pc, #44]	; (8004f04 <__libc_init_array+0x40>)
 8004ed6:	4c0c      	ldr	r4, [pc, #48]	; (8004f08 <__libc_init_array+0x44>)
 8004ed8:	f001 f8fa 	bl	80060d0 <_init>
 8004edc:	1b64      	subs	r4, r4, r5
 8004ede:	10a4      	asrs	r4, r4, #2
 8004ee0:	2600      	movs	r6, #0
 8004ee2:	42a6      	cmp	r6, r4
 8004ee4:	d105      	bne.n	8004ef2 <__libc_init_array+0x2e>
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}
 8004ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eec:	4798      	blx	r3
 8004eee:	3601      	adds	r6, #1
 8004ef0:	e7ee      	b.n	8004ed0 <__libc_init_array+0xc>
 8004ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ef6:	4798      	blx	r3
 8004ef8:	3601      	adds	r6, #1
 8004efa:	e7f2      	b.n	8004ee2 <__libc_init_array+0x1e>
 8004efc:	0800664c 	.word	0x0800664c
 8004f00:	0800664c 	.word	0x0800664c
 8004f04:	0800664c 	.word	0x0800664c
 8004f08:	08006650 	.word	0x08006650

08004f0c <memset>:
 8004f0c:	4402      	add	r2, r0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d100      	bne.n	8004f16 <memset+0xa>
 8004f14:	4770      	bx	lr
 8004f16:	f803 1b01 	strb.w	r1, [r3], #1
 8004f1a:	e7f9      	b.n	8004f10 <memset+0x4>

08004f1c <iprintf>:
 8004f1c:	b40f      	push	{r0, r1, r2, r3}
 8004f1e:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <iprintf+0x2c>)
 8004f20:	b513      	push	{r0, r1, r4, lr}
 8004f22:	681c      	ldr	r4, [r3, #0]
 8004f24:	b124      	cbz	r4, 8004f30 <iprintf+0x14>
 8004f26:	69a3      	ldr	r3, [r4, #24]
 8004f28:	b913      	cbnz	r3, 8004f30 <iprintf+0x14>
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f000 fb2c 	bl	8005588 <__sinit>
 8004f30:	ab05      	add	r3, sp, #20
 8004f32:	9a04      	ldr	r2, [sp, #16]
 8004f34:	68a1      	ldr	r1, [r4, #8]
 8004f36:	9301      	str	r3, [sp, #4]
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f000 fd3d 	bl	80059b8 <_vfiprintf_r>
 8004f3e:	b002      	add	sp, #8
 8004f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f44:	b004      	add	sp, #16
 8004f46:	4770      	bx	lr
 8004f48:	2000000c 	.word	0x2000000c

08004f4c <_puts_r>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	460e      	mov	r6, r1
 8004f50:	4605      	mov	r5, r0
 8004f52:	b118      	cbz	r0, 8004f5c <_puts_r+0x10>
 8004f54:	6983      	ldr	r3, [r0, #24]
 8004f56:	b90b      	cbnz	r3, 8004f5c <_puts_r+0x10>
 8004f58:	f000 fb16 	bl	8005588 <__sinit>
 8004f5c:	69ab      	ldr	r3, [r5, #24]
 8004f5e:	68ac      	ldr	r4, [r5, #8]
 8004f60:	b913      	cbnz	r3, 8004f68 <_puts_r+0x1c>
 8004f62:	4628      	mov	r0, r5
 8004f64:	f000 fb10 	bl	8005588 <__sinit>
 8004f68:	4b2c      	ldr	r3, [pc, #176]	; (800501c <_puts_r+0xd0>)
 8004f6a:	429c      	cmp	r4, r3
 8004f6c:	d120      	bne.n	8004fb0 <_puts_r+0x64>
 8004f6e:	686c      	ldr	r4, [r5, #4]
 8004f70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f72:	07db      	lsls	r3, r3, #31
 8004f74:	d405      	bmi.n	8004f82 <_puts_r+0x36>
 8004f76:	89a3      	ldrh	r3, [r4, #12]
 8004f78:	0598      	lsls	r0, r3, #22
 8004f7a:	d402      	bmi.n	8004f82 <_puts_r+0x36>
 8004f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f7e:	f000 fba1 	bl	80056c4 <__retarget_lock_acquire_recursive>
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	0719      	lsls	r1, r3, #28
 8004f86:	d51d      	bpl.n	8004fc4 <_puts_r+0x78>
 8004f88:	6923      	ldr	r3, [r4, #16]
 8004f8a:	b1db      	cbz	r3, 8004fc4 <_puts_r+0x78>
 8004f8c:	3e01      	subs	r6, #1
 8004f8e:	68a3      	ldr	r3, [r4, #8]
 8004f90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f94:	3b01      	subs	r3, #1
 8004f96:	60a3      	str	r3, [r4, #8]
 8004f98:	bb39      	cbnz	r1, 8004fea <_puts_r+0x9e>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	da38      	bge.n	8005010 <_puts_r+0xc4>
 8004f9e:	4622      	mov	r2, r4
 8004fa0:	210a      	movs	r1, #10
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	f000 f916 	bl	80051d4 <__swbuf_r>
 8004fa8:	3001      	adds	r0, #1
 8004faa:	d011      	beq.n	8004fd0 <_puts_r+0x84>
 8004fac:	250a      	movs	r5, #10
 8004fae:	e011      	b.n	8004fd4 <_puts_r+0x88>
 8004fb0:	4b1b      	ldr	r3, [pc, #108]	; (8005020 <_puts_r+0xd4>)
 8004fb2:	429c      	cmp	r4, r3
 8004fb4:	d101      	bne.n	8004fba <_puts_r+0x6e>
 8004fb6:	68ac      	ldr	r4, [r5, #8]
 8004fb8:	e7da      	b.n	8004f70 <_puts_r+0x24>
 8004fba:	4b1a      	ldr	r3, [pc, #104]	; (8005024 <_puts_r+0xd8>)
 8004fbc:	429c      	cmp	r4, r3
 8004fbe:	bf08      	it	eq
 8004fc0:	68ec      	ldreq	r4, [r5, #12]
 8004fc2:	e7d5      	b.n	8004f70 <_puts_r+0x24>
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	f000 f956 	bl	8005278 <__swsetup_r>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d0dd      	beq.n	8004f8c <_puts_r+0x40>
 8004fd0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004fd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fd6:	07da      	lsls	r2, r3, #31
 8004fd8:	d405      	bmi.n	8004fe6 <_puts_r+0x9a>
 8004fda:	89a3      	ldrh	r3, [r4, #12]
 8004fdc:	059b      	lsls	r3, r3, #22
 8004fde:	d402      	bmi.n	8004fe6 <_puts_r+0x9a>
 8004fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fe2:	f000 fb70 	bl	80056c6 <__retarget_lock_release_recursive>
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	bd70      	pop	{r4, r5, r6, pc}
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	da04      	bge.n	8004ff8 <_puts_r+0xac>
 8004fee:	69a2      	ldr	r2, [r4, #24]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	dc06      	bgt.n	8005002 <_puts_r+0xb6>
 8004ff4:	290a      	cmp	r1, #10
 8004ff6:	d004      	beq.n	8005002 <_puts_r+0xb6>
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	6022      	str	r2, [r4, #0]
 8004ffe:	7019      	strb	r1, [r3, #0]
 8005000:	e7c5      	b.n	8004f8e <_puts_r+0x42>
 8005002:	4622      	mov	r2, r4
 8005004:	4628      	mov	r0, r5
 8005006:	f000 f8e5 	bl	80051d4 <__swbuf_r>
 800500a:	3001      	adds	r0, #1
 800500c:	d1bf      	bne.n	8004f8e <_puts_r+0x42>
 800500e:	e7df      	b.n	8004fd0 <_puts_r+0x84>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	250a      	movs	r5, #10
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	6022      	str	r2, [r4, #0]
 8005018:	701d      	strb	r5, [r3, #0]
 800501a:	e7db      	b.n	8004fd4 <_puts_r+0x88>
 800501c:	080065d8 	.word	0x080065d8
 8005020:	080065f8 	.word	0x080065f8
 8005024:	080065b8 	.word	0x080065b8

08005028 <puts>:
 8005028:	4b02      	ldr	r3, [pc, #8]	; (8005034 <puts+0xc>)
 800502a:	4601      	mov	r1, r0
 800502c:	6818      	ldr	r0, [r3, #0]
 800502e:	f7ff bf8d 	b.w	8004f4c <_puts_r>
 8005032:	bf00      	nop
 8005034:	2000000c 	.word	0x2000000c

08005038 <setbuf>:
 8005038:	2900      	cmp	r1, #0
 800503a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800503e:	bf0c      	ite	eq
 8005040:	2202      	moveq	r2, #2
 8005042:	2200      	movne	r2, #0
 8005044:	f000 b800 	b.w	8005048 <setvbuf>

08005048 <setvbuf>:
 8005048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800504c:	461d      	mov	r5, r3
 800504e:	4b5d      	ldr	r3, [pc, #372]	; (80051c4 <setvbuf+0x17c>)
 8005050:	681f      	ldr	r7, [r3, #0]
 8005052:	4604      	mov	r4, r0
 8005054:	460e      	mov	r6, r1
 8005056:	4690      	mov	r8, r2
 8005058:	b127      	cbz	r7, 8005064 <setvbuf+0x1c>
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	b913      	cbnz	r3, 8005064 <setvbuf+0x1c>
 800505e:	4638      	mov	r0, r7
 8005060:	f000 fa92 	bl	8005588 <__sinit>
 8005064:	4b58      	ldr	r3, [pc, #352]	; (80051c8 <setvbuf+0x180>)
 8005066:	429c      	cmp	r4, r3
 8005068:	d167      	bne.n	800513a <setvbuf+0xf2>
 800506a:	687c      	ldr	r4, [r7, #4]
 800506c:	f1b8 0f02 	cmp.w	r8, #2
 8005070:	d006      	beq.n	8005080 <setvbuf+0x38>
 8005072:	f1b8 0f01 	cmp.w	r8, #1
 8005076:	f200 809f 	bhi.w	80051b8 <setvbuf+0x170>
 800507a:	2d00      	cmp	r5, #0
 800507c:	f2c0 809c 	blt.w	80051b8 <setvbuf+0x170>
 8005080:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005082:	07db      	lsls	r3, r3, #31
 8005084:	d405      	bmi.n	8005092 <setvbuf+0x4a>
 8005086:	89a3      	ldrh	r3, [r4, #12]
 8005088:	0598      	lsls	r0, r3, #22
 800508a:	d402      	bmi.n	8005092 <setvbuf+0x4a>
 800508c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800508e:	f000 fb19 	bl	80056c4 <__retarget_lock_acquire_recursive>
 8005092:	4621      	mov	r1, r4
 8005094:	4638      	mov	r0, r7
 8005096:	f000 f9e3 	bl	8005460 <_fflush_r>
 800509a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800509c:	b141      	cbz	r1, 80050b0 <setvbuf+0x68>
 800509e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050a2:	4299      	cmp	r1, r3
 80050a4:	d002      	beq.n	80050ac <setvbuf+0x64>
 80050a6:	4638      	mov	r0, r7
 80050a8:	f000 fb7c 	bl	80057a4 <_free_r>
 80050ac:	2300      	movs	r3, #0
 80050ae:	6363      	str	r3, [r4, #52]	; 0x34
 80050b0:	2300      	movs	r3, #0
 80050b2:	61a3      	str	r3, [r4, #24]
 80050b4:	6063      	str	r3, [r4, #4]
 80050b6:	89a3      	ldrh	r3, [r4, #12]
 80050b8:	0619      	lsls	r1, r3, #24
 80050ba:	d503      	bpl.n	80050c4 <setvbuf+0x7c>
 80050bc:	6921      	ldr	r1, [r4, #16]
 80050be:	4638      	mov	r0, r7
 80050c0:	f000 fb70 	bl	80057a4 <_free_r>
 80050c4:	89a3      	ldrh	r3, [r4, #12]
 80050c6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80050ca:	f023 0303 	bic.w	r3, r3, #3
 80050ce:	f1b8 0f02 	cmp.w	r8, #2
 80050d2:	81a3      	strh	r3, [r4, #12]
 80050d4:	d06c      	beq.n	80051b0 <setvbuf+0x168>
 80050d6:	ab01      	add	r3, sp, #4
 80050d8:	466a      	mov	r2, sp
 80050da:	4621      	mov	r1, r4
 80050dc:	4638      	mov	r0, r7
 80050de:	f000 faf3 	bl	80056c8 <__swhatbuf_r>
 80050e2:	89a3      	ldrh	r3, [r4, #12]
 80050e4:	4318      	orrs	r0, r3
 80050e6:	81a0      	strh	r0, [r4, #12]
 80050e8:	2d00      	cmp	r5, #0
 80050ea:	d130      	bne.n	800514e <setvbuf+0x106>
 80050ec:	9d00      	ldr	r5, [sp, #0]
 80050ee:	4628      	mov	r0, r5
 80050f0:	f000 fb50 	bl	8005794 <malloc>
 80050f4:	4606      	mov	r6, r0
 80050f6:	2800      	cmp	r0, #0
 80050f8:	d155      	bne.n	80051a6 <setvbuf+0x15e>
 80050fa:	f8dd 9000 	ldr.w	r9, [sp]
 80050fe:	45a9      	cmp	r9, r5
 8005100:	d14a      	bne.n	8005198 <setvbuf+0x150>
 8005102:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005106:	2200      	movs	r2, #0
 8005108:	60a2      	str	r2, [r4, #8]
 800510a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800510e:	6022      	str	r2, [r4, #0]
 8005110:	6122      	str	r2, [r4, #16]
 8005112:	2201      	movs	r2, #1
 8005114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005118:	6162      	str	r2, [r4, #20]
 800511a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800511c:	f043 0302 	orr.w	r3, r3, #2
 8005120:	07d2      	lsls	r2, r2, #31
 8005122:	81a3      	strh	r3, [r4, #12]
 8005124:	d405      	bmi.n	8005132 <setvbuf+0xea>
 8005126:	f413 7f00 	tst.w	r3, #512	; 0x200
 800512a:	d102      	bne.n	8005132 <setvbuf+0xea>
 800512c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800512e:	f000 faca 	bl	80056c6 <__retarget_lock_release_recursive>
 8005132:	4628      	mov	r0, r5
 8005134:	b003      	add	sp, #12
 8005136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800513a:	4b24      	ldr	r3, [pc, #144]	; (80051cc <setvbuf+0x184>)
 800513c:	429c      	cmp	r4, r3
 800513e:	d101      	bne.n	8005144 <setvbuf+0xfc>
 8005140:	68bc      	ldr	r4, [r7, #8]
 8005142:	e793      	b.n	800506c <setvbuf+0x24>
 8005144:	4b22      	ldr	r3, [pc, #136]	; (80051d0 <setvbuf+0x188>)
 8005146:	429c      	cmp	r4, r3
 8005148:	bf08      	it	eq
 800514a:	68fc      	ldreq	r4, [r7, #12]
 800514c:	e78e      	b.n	800506c <setvbuf+0x24>
 800514e:	2e00      	cmp	r6, #0
 8005150:	d0cd      	beq.n	80050ee <setvbuf+0xa6>
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	b913      	cbnz	r3, 800515c <setvbuf+0x114>
 8005156:	4638      	mov	r0, r7
 8005158:	f000 fa16 	bl	8005588 <__sinit>
 800515c:	f1b8 0f01 	cmp.w	r8, #1
 8005160:	bf08      	it	eq
 8005162:	89a3      	ldrheq	r3, [r4, #12]
 8005164:	6026      	str	r6, [r4, #0]
 8005166:	bf04      	itt	eq
 8005168:	f043 0301 	orreq.w	r3, r3, #1
 800516c:	81a3      	strheq	r3, [r4, #12]
 800516e:	89a2      	ldrh	r2, [r4, #12]
 8005170:	f012 0308 	ands.w	r3, r2, #8
 8005174:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005178:	d01c      	beq.n	80051b4 <setvbuf+0x16c>
 800517a:	07d3      	lsls	r3, r2, #31
 800517c:	bf41      	itttt	mi
 800517e:	2300      	movmi	r3, #0
 8005180:	426d      	negmi	r5, r5
 8005182:	60a3      	strmi	r3, [r4, #8]
 8005184:	61a5      	strmi	r5, [r4, #24]
 8005186:	bf58      	it	pl
 8005188:	60a5      	strpl	r5, [r4, #8]
 800518a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800518c:	f015 0501 	ands.w	r5, r5, #1
 8005190:	d115      	bne.n	80051be <setvbuf+0x176>
 8005192:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005196:	e7c8      	b.n	800512a <setvbuf+0xe2>
 8005198:	4648      	mov	r0, r9
 800519a:	f000 fafb 	bl	8005794 <malloc>
 800519e:	4606      	mov	r6, r0
 80051a0:	2800      	cmp	r0, #0
 80051a2:	d0ae      	beq.n	8005102 <setvbuf+0xba>
 80051a4:	464d      	mov	r5, r9
 80051a6:	89a3      	ldrh	r3, [r4, #12]
 80051a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ac:	81a3      	strh	r3, [r4, #12]
 80051ae:	e7d0      	b.n	8005152 <setvbuf+0x10a>
 80051b0:	2500      	movs	r5, #0
 80051b2:	e7a8      	b.n	8005106 <setvbuf+0xbe>
 80051b4:	60a3      	str	r3, [r4, #8]
 80051b6:	e7e8      	b.n	800518a <setvbuf+0x142>
 80051b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80051bc:	e7b9      	b.n	8005132 <setvbuf+0xea>
 80051be:	2500      	movs	r5, #0
 80051c0:	e7b7      	b.n	8005132 <setvbuf+0xea>
 80051c2:	bf00      	nop
 80051c4:	2000000c 	.word	0x2000000c
 80051c8:	080065d8 	.word	0x080065d8
 80051cc:	080065f8 	.word	0x080065f8
 80051d0:	080065b8 	.word	0x080065b8

080051d4 <__swbuf_r>:
 80051d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d6:	460e      	mov	r6, r1
 80051d8:	4614      	mov	r4, r2
 80051da:	4605      	mov	r5, r0
 80051dc:	b118      	cbz	r0, 80051e6 <__swbuf_r+0x12>
 80051de:	6983      	ldr	r3, [r0, #24]
 80051e0:	b90b      	cbnz	r3, 80051e6 <__swbuf_r+0x12>
 80051e2:	f000 f9d1 	bl	8005588 <__sinit>
 80051e6:	4b21      	ldr	r3, [pc, #132]	; (800526c <__swbuf_r+0x98>)
 80051e8:	429c      	cmp	r4, r3
 80051ea:	d12b      	bne.n	8005244 <__swbuf_r+0x70>
 80051ec:	686c      	ldr	r4, [r5, #4]
 80051ee:	69a3      	ldr	r3, [r4, #24]
 80051f0:	60a3      	str	r3, [r4, #8]
 80051f2:	89a3      	ldrh	r3, [r4, #12]
 80051f4:	071a      	lsls	r2, r3, #28
 80051f6:	d52f      	bpl.n	8005258 <__swbuf_r+0x84>
 80051f8:	6923      	ldr	r3, [r4, #16]
 80051fa:	b36b      	cbz	r3, 8005258 <__swbuf_r+0x84>
 80051fc:	6923      	ldr	r3, [r4, #16]
 80051fe:	6820      	ldr	r0, [r4, #0]
 8005200:	1ac0      	subs	r0, r0, r3
 8005202:	6963      	ldr	r3, [r4, #20]
 8005204:	b2f6      	uxtb	r6, r6
 8005206:	4283      	cmp	r3, r0
 8005208:	4637      	mov	r7, r6
 800520a:	dc04      	bgt.n	8005216 <__swbuf_r+0x42>
 800520c:	4621      	mov	r1, r4
 800520e:	4628      	mov	r0, r5
 8005210:	f000 f926 	bl	8005460 <_fflush_r>
 8005214:	bb30      	cbnz	r0, 8005264 <__swbuf_r+0x90>
 8005216:	68a3      	ldr	r3, [r4, #8]
 8005218:	3b01      	subs	r3, #1
 800521a:	60a3      	str	r3, [r4, #8]
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	6022      	str	r2, [r4, #0]
 8005222:	701e      	strb	r6, [r3, #0]
 8005224:	6963      	ldr	r3, [r4, #20]
 8005226:	3001      	adds	r0, #1
 8005228:	4283      	cmp	r3, r0
 800522a:	d004      	beq.n	8005236 <__swbuf_r+0x62>
 800522c:	89a3      	ldrh	r3, [r4, #12]
 800522e:	07db      	lsls	r3, r3, #31
 8005230:	d506      	bpl.n	8005240 <__swbuf_r+0x6c>
 8005232:	2e0a      	cmp	r6, #10
 8005234:	d104      	bne.n	8005240 <__swbuf_r+0x6c>
 8005236:	4621      	mov	r1, r4
 8005238:	4628      	mov	r0, r5
 800523a:	f000 f911 	bl	8005460 <_fflush_r>
 800523e:	b988      	cbnz	r0, 8005264 <__swbuf_r+0x90>
 8005240:	4638      	mov	r0, r7
 8005242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005244:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <__swbuf_r+0x9c>)
 8005246:	429c      	cmp	r4, r3
 8005248:	d101      	bne.n	800524e <__swbuf_r+0x7a>
 800524a:	68ac      	ldr	r4, [r5, #8]
 800524c:	e7cf      	b.n	80051ee <__swbuf_r+0x1a>
 800524e:	4b09      	ldr	r3, [pc, #36]	; (8005274 <__swbuf_r+0xa0>)
 8005250:	429c      	cmp	r4, r3
 8005252:	bf08      	it	eq
 8005254:	68ec      	ldreq	r4, [r5, #12]
 8005256:	e7ca      	b.n	80051ee <__swbuf_r+0x1a>
 8005258:	4621      	mov	r1, r4
 800525a:	4628      	mov	r0, r5
 800525c:	f000 f80c 	bl	8005278 <__swsetup_r>
 8005260:	2800      	cmp	r0, #0
 8005262:	d0cb      	beq.n	80051fc <__swbuf_r+0x28>
 8005264:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005268:	e7ea      	b.n	8005240 <__swbuf_r+0x6c>
 800526a:	bf00      	nop
 800526c:	080065d8 	.word	0x080065d8
 8005270:	080065f8 	.word	0x080065f8
 8005274:	080065b8 	.word	0x080065b8

08005278 <__swsetup_r>:
 8005278:	4b32      	ldr	r3, [pc, #200]	; (8005344 <__swsetup_r+0xcc>)
 800527a:	b570      	push	{r4, r5, r6, lr}
 800527c:	681d      	ldr	r5, [r3, #0]
 800527e:	4606      	mov	r6, r0
 8005280:	460c      	mov	r4, r1
 8005282:	b125      	cbz	r5, 800528e <__swsetup_r+0x16>
 8005284:	69ab      	ldr	r3, [r5, #24]
 8005286:	b913      	cbnz	r3, 800528e <__swsetup_r+0x16>
 8005288:	4628      	mov	r0, r5
 800528a:	f000 f97d 	bl	8005588 <__sinit>
 800528e:	4b2e      	ldr	r3, [pc, #184]	; (8005348 <__swsetup_r+0xd0>)
 8005290:	429c      	cmp	r4, r3
 8005292:	d10f      	bne.n	80052b4 <__swsetup_r+0x3c>
 8005294:	686c      	ldr	r4, [r5, #4]
 8005296:	89a3      	ldrh	r3, [r4, #12]
 8005298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800529c:	0719      	lsls	r1, r3, #28
 800529e:	d42c      	bmi.n	80052fa <__swsetup_r+0x82>
 80052a0:	06dd      	lsls	r5, r3, #27
 80052a2:	d411      	bmi.n	80052c8 <__swsetup_r+0x50>
 80052a4:	2309      	movs	r3, #9
 80052a6:	6033      	str	r3, [r6, #0]
 80052a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80052ac:	81a3      	strh	r3, [r4, #12]
 80052ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052b2:	e03e      	b.n	8005332 <__swsetup_r+0xba>
 80052b4:	4b25      	ldr	r3, [pc, #148]	; (800534c <__swsetup_r+0xd4>)
 80052b6:	429c      	cmp	r4, r3
 80052b8:	d101      	bne.n	80052be <__swsetup_r+0x46>
 80052ba:	68ac      	ldr	r4, [r5, #8]
 80052bc:	e7eb      	b.n	8005296 <__swsetup_r+0x1e>
 80052be:	4b24      	ldr	r3, [pc, #144]	; (8005350 <__swsetup_r+0xd8>)
 80052c0:	429c      	cmp	r4, r3
 80052c2:	bf08      	it	eq
 80052c4:	68ec      	ldreq	r4, [r5, #12]
 80052c6:	e7e6      	b.n	8005296 <__swsetup_r+0x1e>
 80052c8:	0758      	lsls	r0, r3, #29
 80052ca:	d512      	bpl.n	80052f2 <__swsetup_r+0x7a>
 80052cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052ce:	b141      	cbz	r1, 80052e2 <__swsetup_r+0x6a>
 80052d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052d4:	4299      	cmp	r1, r3
 80052d6:	d002      	beq.n	80052de <__swsetup_r+0x66>
 80052d8:	4630      	mov	r0, r6
 80052da:	f000 fa63 	bl	80057a4 <_free_r>
 80052de:	2300      	movs	r3, #0
 80052e0:	6363      	str	r3, [r4, #52]	; 0x34
 80052e2:	89a3      	ldrh	r3, [r4, #12]
 80052e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052e8:	81a3      	strh	r3, [r4, #12]
 80052ea:	2300      	movs	r3, #0
 80052ec:	6063      	str	r3, [r4, #4]
 80052ee:	6923      	ldr	r3, [r4, #16]
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	89a3      	ldrh	r3, [r4, #12]
 80052f4:	f043 0308 	orr.w	r3, r3, #8
 80052f8:	81a3      	strh	r3, [r4, #12]
 80052fa:	6923      	ldr	r3, [r4, #16]
 80052fc:	b94b      	cbnz	r3, 8005312 <__swsetup_r+0x9a>
 80052fe:	89a3      	ldrh	r3, [r4, #12]
 8005300:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005308:	d003      	beq.n	8005312 <__swsetup_r+0x9a>
 800530a:	4621      	mov	r1, r4
 800530c:	4630      	mov	r0, r6
 800530e:	f000 fa01 	bl	8005714 <__smakebuf_r>
 8005312:	89a0      	ldrh	r0, [r4, #12]
 8005314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005318:	f010 0301 	ands.w	r3, r0, #1
 800531c:	d00a      	beq.n	8005334 <__swsetup_r+0xbc>
 800531e:	2300      	movs	r3, #0
 8005320:	60a3      	str	r3, [r4, #8]
 8005322:	6963      	ldr	r3, [r4, #20]
 8005324:	425b      	negs	r3, r3
 8005326:	61a3      	str	r3, [r4, #24]
 8005328:	6923      	ldr	r3, [r4, #16]
 800532a:	b943      	cbnz	r3, 800533e <__swsetup_r+0xc6>
 800532c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005330:	d1ba      	bne.n	80052a8 <__swsetup_r+0x30>
 8005332:	bd70      	pop	{r4, r5, r6, pc}
 8005334:	0781      	lsls	r1, r0, #30
 8005336:	bf58      	it	pl
 8005338:	6963      	ldrpl	r3, [r4, #20]
 800533a:	60a3      	str	r3, [r4, #8]
 800533c:	e7f4      	b.n	8005328 <__swsetup_r+0xb0>
 800533e:	2000      	movs	r0, #0
 8005340:	e7f7      	b.n	8005332 <__swsetup_r+0xba>
 8005342:	bf00      	nop
 8005344:	2000000c 	.word	0x2000000c
 8005348:	080065d8 	.word	0x080065d8
 800534c:	080065f8 	.word	0x080065f8
 8005350:	080065b8 	.word	0x080065b8

08005354 <__sflush_r>:
 8005354:	898a      	ldrh	r2, [r1, #12]
 8005356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800535a:	4605      	mov	r5, r0
 800535c:	0710      	lsls	r0, r2, #28
 800535e:	460c      	mov	r4, r1
 8005360:	d458      	bmi.n	8005414 <__sflush_r+0xc0>
 8005362:	684b      	ldr	r3, [r1, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	dc05      	bgt.n	8005374 <__sflush_r+0x20>
 8005368:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800536a:	2b00      	cmp	r3, #0
 800536c:	dc02      	bgt.n	8005374 <__sflush_r+0x20>
 800536e:	2000      	movs	r0, #0
 8005370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005374:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005376:	2e00      	cmp	r6, #0
 8005378:	d0f9      	beq.n	800536e <__sflush_r+0x1a>
 800537a:	2300      	movs	r3, #0
 800537c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005380:	682f      	ldr	r7, [r5, #0]
 8005382:	602b      	str	r3, [r5, #0]
 8005384:	d032      	beq.n	80053ec <__sflush_r+0x98>
 8005386:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	075a      	lsls	r2, r3, #29
 800538c:	d505      	bpl.n	800539a <__sflush_r+0x46>
 800538e:	6863      	ldr	r3, [r4, #4]
 8005390:	1ac0      	subs	r0, r0, r3
 8005392:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005394:	b10b      	cbz	r3, 800539a <__sflush_r+0x46>
 8005396:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005398:	1ac0      	subs	r0, r0, r3
 800539a:	2300      	movs	r3, #0
 800539c:	4602      	mov	r2, r0
 800539e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053a0:	6a21      	ldr	r1, [r4, #32]
 80053a2:	4628      	mov	r0, r5
 80053a4:	47b0      	blx	r6
 80053a6:	1c43      	adds	r3, r0, #1
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	d106      	bne.n	80053ba <__sflush_r+0x66>
 80053ac:	6829      	ldr	r1, [r5, #0]
 80053ae:	291d      	cmp	r1, #29
 80053b0:	d82c      	bhi.n	800540c <__sflush_r+0xb8>
 80053b2:	4a2a      	ldr	r2, [pc, #168]	; (800545c <__sflush_r+0x108>)
 80053b4:	40ca      	lsrs	r2, r1
 80053b6:	07d6      	lsls	r6, r2, #31
 80053b8:	d528      	bpl.n	800540c <__sflush_r+0xb8>
 80053ba:	2200      	movs	r2, #0
 80053bc:	6062      	str	r2, [r4, #4]
 80053be:	04d9      	lsls	r1, r3, #19
 80053c0:	6922      	ldr	r2, [r4, #16]
 80053c2:	6022      	str	r2, [r4, #0]
 80053c4:	d504      	bpl.n	80053d0 <__sflush_r+0x7c>
 80053c6:	1c42      	adds	r2, r0, #1
 80053c8:	d101      	bne.n	80053ce <__sflush_r+0x7a>
 80053ca:	682b      	ldr	r3, [r5, #0]
 80053cc:	b903      	cbnz	r3, 80053d0 <__sflush_r+0x7c>
 80053ce:	6560      	str	r0, [r4, #84]	; 0x54
 80053d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053d2:	602f      	str	r7, [r5, #0]
 80053d4:	2900      	cmp	r1, #0
 80053d6:	d0ca      	beq.n	800536e <__sflush_r+0x1a>
 80053d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053dc:	4299      	cmp	r1, r3
 80053de:	d002      	beq.n	80053e6 <__sflush_r+0x92>
 80053e0:	4628      	mov	r0, r5
 80053e2:	f000 f9df 	bl	80057a4 <_free_r>
 80053e6:	2000      	movs	r0, #0
 80053e8:	6360      	str	r0, [r4, #52]	; 0x34
 80053ea:	e7c1      	b.n	8005370 <__sflush_r+0x1c>
 80053ec:	6a21      	ldr	r1, [r4, #32]
 80053ee:	2301      	movs	r3, #1
 80053f0:	4628      	mov	r0, r5
 80053f2:	47b0      	blx	r6
 80053f4:	1c41      	adds	r1, r0, #1
 80053f6:	d1c7      	bne.n	8005388 <__sflush_r+0x34>
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0c4      	beq.n	8005388 <__sflush_r+0x34>
 80053fe:	2b1d      	cmp	r3, #29
 8005400:	d001      	beq.n	8005406 <__sflush_r+0xb2>
 8005402:	2b16      	cmp	r3, #22
 8005404:	d101      	bne.n	800540a <__sflush_r+0xb6>
 8005406:	602f      	str	r7, [r5, #0]
 8005408:	e7b1      	b.n	800536e <__sflush_r+0x1a>
 800540a:	89a3      	ldrh	r3, [r4, #12]
 800540c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005410:	81a3      	strh	r3, [r4, #12]
 8005412:	e7ad      	b.n	8005370 <__sflush_r+0x1c>
 8005414:	690f      	ldr	r7, [r1, #16]
 8005416:	2f00      	cmp	r7, #0
 8005418:	d0a9      	beq.n	800536e <__sflush_r+0x1a>
 800541a:	0793      	lsls	r3, r2, #30
 800541c:	680e      	ldr	r6, [r1, #0]
 800541e:	bf08      	it	eq
 8005420:	694b      	ldreq	r3, [r1, #20]
 8005422:	600f      	str	r7, [r1, #0]
 8005424:	bf18      	it	ne
 8005426:	2300      	movne	r3, #0
 8005428:	eba6 0807 	sub.w	r8, r6, r7
 800542c:	608b      	str	r3, [r1, #8]
 800542e:	f1b8 0f00 	cmp.w	r8, #0
 8005432:	dd9c      	ble.n	800536e <__sflush_r+0x1a>
 8005434:	6a21      	ldr	r1, [r4, #32]
 8005436:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005438:	4643      	mov	r3, r8
 800543a:	463a      	mov	r2, r7
 800543c:	4628      	mov	r0, r5
 800543e:	47b0      	blx	r6
 8005440:	2800      	cmp	r0, #0
 8005442:	dc06      	bgt.n	8005452 <__sflush_r+0xfe>
 8005444:	89a3      	ldrh	r3, [r4, #12]
 8005446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800544a:	81a3      	strh	r3, [r4, #12]
 800544c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005450:	e78e      	b.n	8005370 <__sflush_r+0x1c>
 8005452:	4407      	add	r7, r0
 8005454:	eba8 0800 	sub.w	r8, r8, r0
 8005458:	e7e9      	b.n	800542e <__sflush_r+0xda>
 800545a:	bf00      	nop
 800545c:	20400001 	.word	0x20400001

08005460 <_fflush_r>:
 8005460:	b538      	push	{r3, r4, r5, lr}
 8005462:	690b      	ldr	r3, [r1, #16]
 8005464:	4605      	mov	r5, r0
 8005466:	460c      	mov	r4, r1
 8005468:	b913      	cbnz	r3, 8005470 <_fflush_r+0x10>
 800546a:	2500      	movs	r5, #0
 800546c:	4628      	mov	r0, r5
 800546e:	bd38      	pop	{r3, r4, r5, pc}
 8005470:	b118      	cbz	r0, 800547a <_fflush_r+0x1a>
 8005472:	6983      	ldr	r3, [r0, #24]
 8005474:	b90b      	cbnz	r3, 800547a <_fflush_r+0x1a>
 8005476:	f000 f887 	bl	8005588 <__sinit>
 800547a:	4b14      	ldr	r3, [pc, #80]	; (80054cc <_fflush_r+0x6c>)
 800547c:	429c      	cmp	r4, r3
 800547e:	d11b      	bne.n	80054b8 <_fflush_r+0x58>
 8005480:	686c      	ldr	r4, [r5, #4]
 8005482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0ef      	beq.n	800546a <_fflush_r+0xa>
 800548a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800548c:	07d0      	lsls	r0, r2, #31
 800548e:	d404      	bmi.n	800549a <_fflush_r+0x3a>
 8005490:	0599      	lsls	r1, r3, #22
 8005492:	d402      	bmi.n	800549a <_fflush_r+0x3a>
 8005494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005496:	f000 f915 	bl	80056c4 <__retarget_lock_acquire_recursive>
 800549a:	4628      	mov	r0, r5
 800549c:	4621      	mov	r1, r4
 800549e:	f7ff ff59 	bl	8005354 <__sflush_r>
 80054a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054a4:	07da      	lsls	r2, r3, #31
 80054a6:	4605      	mov	r5, r0
 80054a8:	d4e0      	bmi.n	800546c <_fflush_r+0xc>
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	059b      	lsls	r3, r3, #22
 80054ae:	d4dd      	bmi.n	800546c <_fflush_r+0xc>
 80054b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054b2:	f000 f908 	bl	80056c6 <__retarget_lock_release_recursive>
 80054b6:	e7d9      	b.n	800546c <_fflush_r+0xc>
 80054b8:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <_fflush_r+0x70>)
 80054ba:	429c      	cmp	r4, r3
 80054bc:	d101      	bne.n	80054c2 <_fflush_r+0x62>
 80054be:	68ac      	ldr	r4, [r5, #8]
 80054c0:	e7df      	b.n	8005482 <_fflush_r+0x22>
 80054c2:	4b04      	ldr	r3, [pc, #16]	; (80054d4 <_fflush_r+0x74>)
 80054c4:	429c      	cmp	r4, r3
 80054c6:	bf08      	it	eq
 80054c8:	68ec      	ldreq	r4, [r5, #12]
 80054ca:	e7da      	b.n	8005482 <_fflush_r+0x22>
 80054cc:	080065d8 	.word	0x080065d8
 80054d0:	080065f8 	.word	0x080065f8
 80054d4:	080065b8 	.word	0x080065b8

080054d8 <std>:
 80054d8:	2300      	movs	r3, #0
 80054da:	b510      	push	{r4, lr}
 80054dc:	4604      	mov	r4, r0
 80054de:	e9c0 3300 	strd	r3, r3, [r0]
 80054e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054e6:	6083      	str	r3, [r0, #8]
 80054e8:	8181      	strh	r1, [r0, #12]
 80054ea:	6643      	str	r3, [r0, #100]	; 0x64
 80054ec:	81c2      	strh	r2, [r0, #14]
 80054ee:	6183      	str	r3, [r0, #24]
 80054f0:	4619      	mov	r1, r3
 80054f2:	2208      	movs	r2, #8
 80054f4:	305c      	adds	r0, #92	; 0x5c
 80054f6:	f7ff fd09 	bl	8004f0c <memset>
 80054fa:	4b05      	ldr	r3, [pc, #20]	; (8005510 <std+0x38>)
 80054fc:	6263      	str	r3, [r4, #36]	; 0x24
 80054fe:	4b05      	ldr	r3, [pc, #20]	; (8005514 <std+0x3c>)
 8005500:	62a3      	str	r3, [r4, #40]	; 0x28
 8005502:	4b05      	ldr	r3, [pc, #20]	; (8005518 <std+0x40>)
 8005504:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005506:	4b05      	ldr	r3, [pc, #20]	; (800551c <std+0x44>)
 8005508:	6224      	str	r4, [r4, #32]
 800550a:	6323      	str	r3, [r4, #48]	; 0x30
 800550c:	bd10      	pop	{r4, pc}
 800550e:	bf00      	nop
 8005510:	08005f61 	.word	0x08005f61
 8005514:	08005f83 	.word	0x08005f83
 8005518:	08005fbb 	.word	0x08005fbb
 800551c:	08005fdf 	.word	0x08005fdf

08005520 <_cleanup_r>:
 8005520:	4901      	ldr	r1, [pc, #4]	; (8005528 <_cleanup_r+0x8>)
 8005522:	f000 b8af 	b.w	8005684 <_fwalk_reent>
 8005526:	bf00      	nop
 8005528:	08005461 	.word	0x08005461

0800552c <__sfmoreglue>:
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	2268      	movs	r2, #104	; 0x68
 8005530:	1e4d      	subs	r5, r1, #1
 8005532:	4355      	muls	r5, r2
 8005534:	460e      	mov	r6, r1
 8005536:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800553a:	f000 f99f 	bl	800587c <_malloc_r>
 800553e:	4604      	mov	r4, r0
 8005540:	b140      	cbz	r0, 8005554 <__sfmoreglue+0x28>
 8005542:	2100      	movs	r1, #0
 8005544:	e9c0 1600 	strd	r1, r6, [r0]
 8005548:	300c      	adds	r0, #12
 800554a:	60a0      	str	r0, [r4, #8]
 800554c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005550:	f7ff fcdc 	bl	8004f0c <memset>
 8005554:	4620      	mov	r0, r4
 8005556:	bd70      	pop	{r4, r5, r6, pc}

08005558 <__sfp_lock_acquire>:
 8005558:	4801      	ldr	r0, [pc, #4]	; (8005560 <__sfp_lock_acquire+0x8>)
 800555a:	f000 b8b3 	b.w	80056c4 <__retarget_lock_acquire_recursive>
 800555e:	bf00      	nop
 8005560:	20000841 	.word	0x20000841

08005564 <__sfp_lock_release>:
 8005564:	4801      	ldr	r0, [pc, #4]	; (800556c <__sfp_lock_release+0x8>)
 8005566:	f000 b8ae 	b.w	80056c6 <__retarget_lock_release_recursive>
 800556a:	bf00      	nop
 800556c:	20000841 	.word	0x20000841

08005570 <__sinit_lock_acquire>:
 8005570:	4801      	ldr	r0, [pc, #4]	; (8005578 <__sinit_lock_acquire+0x8>)
 8005572:	f000 b8a7 	b.w	80056c4 <__retarget_lock_acquire_recursive>
 8005576:	bf00      	nop
 8005578:	20000842 	.word	0x20000842

0800557c <__sinit_lock_release>:
 800557c:	4801      	ldr	r0, [pc, #4]	; (8005584 <__sinit_lock_release+0x8>)
 800557e:	f000 b8a2 	b.w	80056c6 <__retarget_lock_release_recursive>
 8005582:	bf00      	nop
 8005584:	20000842 	.word	0x20000842

08005588 <__sinit>:
 8005588:	b510      	push	{r4, lr}
 800558a:	4604      	mov	r4, r0
 800558c:	f7ff fff0 	bl	8005570 <__sinit_lock_acquire>
 8005590:	69a3      	ldr	r3, [r4, #24]
 8005592:	b11b      	cbz	r3, 800559c <__sinit+0x14>
 8005594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005598:	f7ff bff0 	b.w	800557c <__sinit_lock_release>
 800559c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80055a0:	6523      	str	r3, [r4, #80]	; 0x50
 80055a2:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <__sinit+0x68>)
 80055a4:	4a13      	ldr	r2, [pc, #76]	; (80055f4 <__sinit+0x6c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80055aa:	42a3      	cmp	r3, r4
 80055ac:	bf04      	itt	eq
 80055ae:	2301      	moveq	r3, #1
 80055b0:	61a3      	streq	r3, [r4, #24]
 80055b2:	4620      	mov	r0, r4
 80055b4:	f000 f820 	bl	80055f8 <__sfp>
 80055b8:	6060      	str	r0, [r4, #4]
 80055ba:	4620      	mov	r0, r4
 80055bc:	f000 f81c 	bl	80055f8 <__sfp>
 80055c0:	60a0      	str	r0, [r4, #8]
 80055c2:	4620      	mov	r0, r4
 80055c4:	f000 f818 	bl	80055f8 <__sfp>
 80055c8:	2200      	movs	r2, #0
 80055ca:	60e0      	str	r0, [r4, #12]
 80055cc:	2104      	movs	r1, #4
 80055ce:	6860      	ldr	r0, [r4, #4]
 80055d0:	f7ff ff82 	bl	80054d8 <std>
 80055d4:	68a0      	ldr	r0, [r4, #8]
 80055d6:	2201      	movs	r2, #1
 80055d8:	2109      	movs	r1, #9
 80055da:	f7ff ff7d 	bl	80054d8 <std>
 80055de:	68e0      	ldr	r0, [r4, #12]
 80055e0:	2202      	movs	r2, #2
 80055e2:	2112      	movs	r1, #18
 80055e4:	f7ff ff78 	bl	80054d8 <std>
 80055e8:	2301      	movs	r3, #1
 80055ea:	61a3      	str	r3, [r4, #24]
 80055ec:	e7d2      	b.n	8005594 <__sinit+0xc>
 80055ee:	bf00      	nop
 80055f0:	080065b4 	.word	0x080065b4
 80055f4:	08005521 	.word	0x08005521

080055f8 <__sfp>:
 80055f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fa:	4607      	mov	r7, r0
 80055fc:	f7ff ffac 	bl	8005558 <__sfp_lock_acquire>
 8005600:	4b1e      	ldr	r3, [pc, #120]	; (800567c <__sfp+0x84>)
 8005602:	681e      	ldr	r6, [r3, #0]
 8005604:	69b3      	ldr	r3, [r6, #24]
 8005606:	b913      	cbnz	r3, 800560e <__sfp+0x16>
 8005608:	4630      	mov	r0, r6
 800560a:	f7ff ffbd 	bl	8005588 <__sinit>
 800560e:	3648      	adds	r6, #72	; 0x48
 8005610:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005614:	3b01      	subs	r3, #1
 8005616:	d503      	bpl.n	8005620 <__sfp+0x28>
 8005618:	6833      	ldr	r3, [r6, #0]
 800561a:	b30b      	cbz	r3, 8005660 <__sfp+0x68>
 800561c:	6836      	ldr	r6, [r6, #0]
 800561e:	e7f7      	b.n	8005610 <__sfp+0x18>
 8005620:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005624:	b9d5      	cbnz	r5, 800565c <__sfp+0x64>
 8005626:	4b16      	ldr	r3, [pc, #88]	; (8005680 <__sfp+0x88>)
 8005628:	60e3      	str	r3, [r4, #12]
 800562a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800562e:	6665      	str	r5, [r4, #100]	; 0x64
 8005630:	f000 f847 	bl	80056c2 <__retarget_lock_init_recursive>
 8005634:	f7ff ff96 	bl	8005564 <__sfp_lock_release>
 8005638:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800563c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005640:	6025      	str	r5, [r4, #0]
 8005642:	61a5      	str	r5, [r4, #24]
 8005644:	2208      	movs	r2, #8
 8005646:	4629      	mov	r1, r5
 8005648:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800564c:	f7ff fc5e 	bl	8004f0c <memset>
 8005650:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005654:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005658:	4620      	mov	r0, r4
 800565a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800565c:	3468      	adds	r4, #104	; 0x68
 800565e:	e7d9      	b.n	8005614 <__sfp+0x1c>
 8005660:	2104      	movs	r1, #4
 8005662:	4638      	mov	r0, r7
 8005664:	f7ff ff62 	bl	800552c <__sfmoreglue>
 8005668:	4604      	mov	r4, r0
 800566a:	6030      	str	r0, [r6, #0]
 800566c:	2800      	cmp	r0, #0
 800566e:	d1d5      	bne.n	800561c <__sfp+0x24>
 8005670:	f7ff ff78 	bl	8005564 <__sfp_lock_release>
 8005674:	230c      	movs	r3, #12
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	e7ee      	b.n	8005658 <__sfp+0x60>
 800567a:	bf00      	nop
 800567c:	080065b4 	.word	0x080065b4
 8005680:	ffff0001 	.word	0xffff0001

08005684 <_fwalk_reent>:
 8005684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005688:	4606      	mov	r6, r0
 800568a:	4688      	mov	r8, r1
 800568c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005690:	2700      	movs	r7, #0
 8005692:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005696:	f1b9 0901 	subs.w	r9, r9, #1
 800569a:	d505      	bpl.n	80056a8 <_fwalk_reent+0x24>
 800569c:	6824      	ldr	r4, [r4, #0]
 800569e:	2c00      	cmp	r4, #0
 80056a0:	d1f7      	bne.n	8005692 <_fwalk_reent+0xe>
 80056a2:	4638      	mov	r0, r7
 80056a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056a8:	89ab      	ldrh	r3, [r5, #12]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d907      	bls.n	80056be <_fwalk_reent+0x3a>
 80056ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056b2:	3301      	adds	r3, #1
 80056b4:	d003      	beq.n	80056be <_fwalk_reent+0x3a>
 80056b6:	4629      	mov	r1, r5
 80056b8:	4630      	mov	r0, r6
 80056ba:	47c0      	blx	r8
 80056bc:	4307      	orrs	r7, r0
 80056be:	3568      	adds	r5, #104	; 0x68
 80056c0:	e7e9      	b.n	8005696 <_fwalk_reent+0x12>

080056c2 <__retarget_lock_init_recursive>:
 80056c2:	4770      	bx	lr

080056c4 <__retarget_lock_acquire_recursive>:
 80056c4:	4770      	bx	lr

080056c6 <__retarget_lock_release_recursive>:
 80056c6:	4770      	bx	lr

080056c8 <__swhatbuf_r>:
 80056c8:	b570      	push	{r4, r5, r6, lr}
 80056ca:	460e      	mov	r6, r1
 80056cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056d0:	2900      	cmp	r1, #0
 80056d2:	b096      	sub	sp, #88	; 0x58
 80056d4:	4614      	mov	r4, r2
 80056d6:	461d      	mov	r5, r3
 80056d8:	da08      	bge.n	80056ec <__swhatbuf_r+0x24>
 80056da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	602a      	str	r2, [r5, #0]
 80056e2:	061a      	lsls	r2, r3, #24
 80056e4:	d410      	bmi.n	8005708 <__swhatbuf_r+0x40>
 80056e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056ea:	e00e      	b.n	800570a <__swhatbuf_r+0x42>
 80056ec:	466a      	mov	r2, sp
 80056ee:	f000 fc9d 	bl	800602c <_fstat_r>
 80056f2:	2800      	cmp	r0, #0
 80056f4:	dbf1      	blt.n	80056da <__swhatbuf_r+0x12>
 80056f6:	9a01      	ldr	r2, [sp, #4]
 80056f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80056fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005700:	425a      	negs	r2, r3
 8005702:	415a      	adcs	r2, r3
 8005704:	602a      	str	r2, [r5, #0]
 8005706:	e7ee      	b.n	80056e6 <__swhatbuf_r+0x1e>
 8005708:	2340      	movs	r3, #64	; 0x40
 800570a:	2000      	movs	r0, #0
 800570c:	6023      	str	r3, [r4, #0]
 800570e:	b016      	add	sp, #88	; 0x58
 8005710:	bd70      	pop	{r4, r5, r6, pc}
	...

08005714 <__smakebuf_r>:
 8005714:	898b      	ldrh	r3, [r1, #12]
 8005716:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005718:	079d      	lsls	r5, r3, #30
 800571a:	4606      	mov	r6, r0
 800571c:	460c      	mov	r4, r1
 800571e:	d507      	bpl.n	8005730 <__smakebuf_r+0x1c>
 8005720:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	6123      	str	r3, [r4, #16]
 8005728:	2301      	movs	r3, #1
 800572a:	6163      	str	r3, [r4, #20]
 800572c:	b002      	add	sp, #8
 800572e:	bd70      	pop	{r4, r5, r6, pc}
 8005730:	ab01      	add	r3, sp, #4
 8005732:	466a      	mov	r2, sp
 8005734:	f7ff ffc8 	bl	80056c8 <__swhatbuf_r>
 8005738:	9900      	ldr	r1, [sp, #0]
 800573a:	4605      	mov	r5, r0
 800573c:	4630      	mov	r0, r6
 800573e:	f000 f89d 	bl	800587c <_malloc_r>
 8005742:	b948      	cbnz	r0, 8005758 <__smakebuf_r+0x44>
 8005744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005748:	059a      	lsls	r2, r3, #22
 800574a:	d4ef      	bmi.n	800572c <__smakebuf_r+0x18>
 800574c:	f023 0303 	bic.w	r3, r3, #3
 8005750:	f043 0302 	orr.w	r3, r3, #2
 8005754:	81a3      	strh	r3, [r4, #12]
 8005756:	e7e3      	b.n	8005720 <__smakebuf_r+0xc>
 8005758:	4b0d      	ldr	r3, [pc, #52]	; (8005790 <__smakebuf_r+0x7c>)
 800575a:	62b3      	str	r3, [r6, #40]	; 0x28
 800575c:	89a3      	ldrh	r3, [r4, #12]
 800575e:	6020      	str	r0, [r4, #0]
 8005760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005764:	81a3      	strh	r3, [r4, #12]
 8005766:	9b00      	ldr	r3, [sp, #0]
 8005768:	6163      	str	r3, [r4, #20]
 800576a:	9b01      	ldr	r3, [sp, #4]
 800576c:	6120      	str	r0, [r4, #16]
 800576e:	b15b      	cbz	r3, 8005788 <__smakebuf_r+0x74>
 8005770:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005774:	4630      	mov	r0, r6
 8005776:	f000 fc6b 	bl	8006050 <_isatty_r>
 800577a:	b128      	cbz	r0, 8005788 <__smakebuf_r+0x74>
 800577c:	89a3      	ldrh	r3, [r4, #12]
 800577e:	f023 0303 	bic.w	r3, r3, #3
 8005782:	f043 0301 	orr.w	r3, r3, #1
 8005786:	81a3      	strh	r3, [r4, #12]
 8005788:	89a0      	ldrh	r0, [r4, #12]
 800578a:	4305      	orrs	r5, r0
 800578c:	81a5      	strh	r5, [r4, #12]
 800578e:	e7cd      	b.n	800572c <__smakebuf_r+0x18>
 8005790:	08005521 	.word	0x08005521

08005794 <malloc>:
 8005794:	4b02      	ldr	r3, [pc, #8]	; (80057a0 <malloc+0xc>)
 8005796:	4601      	mov	r1, r0
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	f000 b86f 	b.w	800587c <_malloc_r>
 800579e:	bf00      	nop
 80057a0:	2000000c 	.word	0x2000000c

080057a4 <_free_r>:
 80057a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057a6:	2900      	cmp	r1, #0
 80057a8:	d044      	beq.n	8005834 <_free_r+0x90>
 80057aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ae:	9001      	str	r0, [sp, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f1a1 0404 	sub.w	r4, r1, #4
 80057b6:	bfb8      	it	lt
 80057b8:	18e4      	addlt	r4, r4, r3
 80057ba:	f000 fc6b 	bl	8006094 <__malloc_lock>
 80057be:	4a1e      	ldr	r2, [pc, #120]	; (8005838 <_free_r+0x94>)
 80057c0:	9801      	ldr	r0, [sp, #4]
 80057c2:	6813      	ldr	r3, [r2, #0]
 80057c4:	b933      	cbnz	r3, 80057d4 <_free_r+0x30>
 80057c6:	6063      	str	r3, [r4, #4]
 80057c8:	6014      	str	r4, [r2, #0]
 80057ca:	b003      	add	sp, #12
 80057cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057d0:	f000 bc66 	b.w	80060a0 <__malloc_unlock>
 80057d4:	42a3      	cmp	r3, r4
 80057d6:	d908      	bls.n	80057ea <_free_r+0x46>
 80057d8:	6825      	ldr	r5, [r4, #0]
 80057da:	1961      	adds	r1, r4, r5
 80057dc:	428b      	cmp	r3, r1
 80057de:	bf01      	itttt	eq
 80057e0:	6819      	ldreq	r1, [r3, #0]
 80057e2:	685b      	ldreq	r3, [r3, #4]
 80057e4:	1949      	addeq	r1, r1, r5
 80057e6:	6021      	streq	r1, [r4, #0]
 80057e8:	e7ed      	b.n	80057c6 <_free_r+0x22>
 80057ea:	461a      	mov	r2, r3
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	b10b      	cbz	r3, 80057f4 <_free_r+0x50>
 80057f0:	42a3      	cmp	r3, r4
 80057f2:	d9fa      	bls.n	80057ea <_free_r+0x46>
 80057f4:	6811      	ldr	r1, [r2, #0]
 80057f6:	1855      	adds	r5, r2, r1
 80057f8:	42a5      	cmp	r5, r4
 80057fa:	d10b      	bne.n	8005814 <_free_r+0x70>
 80057fc:	6824      	ldr	r4, [r4, #0]
 80057fe:	4421      	add	r1, r4
 8005800:	1854      	adds	r4, r2, r1
 8005802:	42a3      	cmp	r3, r4
 8005804:	6011      	str	r1, [r2, #0]
 8005806:	d1e0      	bne.n	80057ca <_free_r+0x26>
 8005808:	681c      	ldr	r4, [r3, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	6053      	str	r3, [r2, #4]
 800580e:	4421      	add	r1, r4
 8005810:	6011      	str	r1, [r2, #0]
 8005812:	e7da      	b.n	80057ca <_free_r+0x26>
 8005814:	d902      	bls.n	800581c <_free_r+0x78>
 8005816:	230c      	movs	r3, #12
 8005818:	6003      	str	r3, [r0, #0]
 800581a:	e7d6      	b.n	80057ca <_free_r+0x26>
 800581c:	6825      	ldr	r5, [r4, #0]
 800581e:	1961      	adds	r1, r4, r5
 8005820:	428b      	cmp	r3, r1
 8005822:	bf04      	itt	eq
 8005824:	6819      	ldreq	r1, [r3, #0]
 8005826:	685b      	ldreq	r3, [r3, #4]
 8005828:	6063      	str	r3, [r4, #4]
 800582a:	bf04      	itt	eq
 800582c:	1949      	addeq	r1, r1, r5
 800582e:	6021      	streq	r1, [r4, #0]
 8005830:	6054      	str	r4, [r2, #4]
 8005832:	e7ca      	b.n	80057ca <_free_r+0x26>
 8005834:	b003      	add	sp, #12
 8005836:	bd30      	pop	{r4, r5, pc}
 8005838:	20000844 	.word	0x20000844

0800583c <sbrk_aligned>:
 800583c:	b570      	push	{r4, r5, r6, lr}
 800583e:	4e0e      	ldr	r6, [pc, #56]	; (8005878 <sbrk_aligned+0x3c>)
 8005840:	460c      	mov	r4, r1
 8005842:	6831      	ldr	r1, [r6, #0]
 8005844:	4605      	mov	r5, r0
 8005846:	b911      	cbnz	r1, 800584e <sbrk_aligned+0x12>
 8005848:	f000 fb7a 	bl	8005f40 <_sbrk_r>
 800584c:	6030      	str	r0, [r6, #0]
 800584e:	4621      	mov	r1, r4
 8005850:	4628      	mov	r0, r5
 8005852:	f000 fb75 	bl	8005f40 <_sbrk_r>
 8005856:	1c43      	adds	r3, r0, #1
 8005858:	d00a      	beq.n	8005870 <sbrk_aligned+0x34>
 800585a:	1cc4      	adds	r4, r0, #3
 800585c:	f024 0403 	bic.w	r4, r4, #3
 8005860:	42a0      	cmp	r0, r4
 8005862:	d007      	beq.n	8005874 <sbrk_aligned+0x38>
 8005864:	1a21      	subs	r1, r4, r0
 8005866:	4628      	mov	r0, r5
 8005868:	f000 fb6a 	bl	8005f40 <_sbrk_r>
 800586c:	3001      	adds	r0, #1
 800586e:	d101      	bne.n	8005874 <sbrk_aligned+0x38>
 8005870:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005874:	4620      	mov	r0, r4
 8005876:	bd70      	pop	{r4, r5, r6, pc}
 8005878:	20000848 	.word	0x20000848

0800587c <_malloc_r>:
 800587c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005880:	1ccd      	adds	r5, r1, #3
 8005882:	f025 0503 	bic.w	r5, r5, #3
 8005886:	3508      	adds	r5, #8
 8005888:	2d0c      	cmp	r5, #12
 800588a:	bf38      	it	cc
 800588c:	250c      	movcc	r5, #12
 800588e:	2d00      	cmp	r5, #0
 8005890:	4607      	mov	r7, r0
 8005892:	db01      	blt.n	8005898 <_malloc_r+0x1c>
 8005894:	42a9      	cmp	r1, r5
 8005896:	d905      	bls.n	80058a4 <_malloc_r+0x28>
 8005898:	230c      	movs	r3, #12
 800589a:	603b      	str	r3, [r7, #0]
 800589c:	2600      	movs	r6, #0
 800589e:	4630      	mov	r0, r6
 80058a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058a4:	4e2e      	ldr	r6, [pc, #184]	; (8005960 <_malloc_r+0xe4>)
 80058a6:	f000 fbf5 	bl	8006094 <__malloc_lock>
 80058aa:	6833      	ldr	r3, [r6, #0]
 80058ac:	461c      	mov	r4, r3
 80058ae:	bb34      	cbnz	r4, 80058fe <_malloc_r+0x82>
 80058b0:	4629      	mov	r1, r5
 80058b2:	4638      	mov	r0, r7
 80058b4:	f7ff ffc2 	bl	800583c <sbrk_aligned>
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	4604      	mov	r4, r0
 80058bc:	d14d      	bne.n	800595a <_malloc_r+0xde>
 80058be:	6834      	ldr	r4, [r6, #0]
 80058c0:	4626      	mov	r6, r4
 80058c2:	2e00      	cmp	r6, #0
 80058c4:	d140      	bne.n	8005948 <_malloc_r+0xcc>
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	4631      	mov	r1, r6
 80058ca:	4638      	mov	r0, r7
 80058cc:	eb04 0803 	add.w	r8, r4, r3
 80058d0:	f000 fb36 	bl	8005f40 <_sbrk_r>
 80058d4:	4580      	cmp	r8, r0
 80058d6:	d13a      	bne.n	800594e <_malloc_r+0xd2>
 80058d8:	6821      	ldr	r1, [r4, #0]
 80058da:	3503      	adds	r5, #3
 80058dc:	1a6d      	subs	r5, r5, r1
 80058de:	f025 0503 	bic.w	r5, r5, #3
 80058e2:	3508      	adds	r5, #8
 80058e4:	2d0c      	cmp	r5, #12
 80058e6:	bf38      	it	cc
 80058e8:	250c      	movcc	r5, #12
 80058ea:	4629      	mov	r1, r5
 80058ec:	4638      	mov	r0, r7
 80058ee:	f7ff ffa5 	bl	800583c <sbrk_aligned>
 80058f2:	3001      	adds	r0, #1
 80058f4:	d02b      	beq.n	800594e <_malloc_r+0xd2>
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	442b      	add	r3, r5
 80058fa:	6023      	str	r3, [r4, #0]
 80058fc:	e00e      	b.n	800591c <_malloc_r+0xa0>
 80058fe:	6822      	ldr	r2, [r4, #0]
 8005900:	1b52      	subs	r2, r2, r5
 8005902:	d41e      	bmi.n	8005942 <_malloc_r+0xc6>
 8005904:	2a0b      	cmp	r2, #11
 8005906:	d916      	bls.n	8005936 <_malloc_r+0xba>
 8005908:	1961      	adds	r1, r4, r5
 800590a:	42a3      	cmp	r3, r4
 800590c:	6025      	str	r5, [r4, #0]
 800590e:	bf18      	it	ne
 8005910:	6059      	strne	r1, [r3, #4]
 8005912:	6863      	ldr	r3, [r4, #4]
 8005914:	bf08      	it	eq
 8005916:	6031      	streq	r1, [r6, #0]
 8005918:	5162      	str	r2, [r4, r5]
 800591a:	604b      	str	r3, [r1, #4]
 800591c:	4638      	mov	r0, r7
 800591e:	f104 060b 	add.w	r6, r4, #11
 8005922:	f000 fbbd 	bl	80060a0 <__malloc_unlock>
 8005926:	f026 0607 	bic.w	r6, r6, #7
 800592a:	1d23      	adds	r3, r4, #4
 800592c:	1af2      	subs	r2, r6, r3
 800592e:	d0b6      	beq.n	800589e <_malloc_r+0x22>
 8005930:	1b9b      	subs	r3, r3, r6
 8005932:	50a3      	str	r3, [r4, r2]
 8005934:	e7b3      	b.n	800589e <_malloc_r+0x22>
 8005936:	6862      	ldr	r2, [r4, #4]
 8005938:	42a3      	cmp	r3, r4
 800593a:	bf0c      	ite	eq
 800593c:	6032      	streq	r2, [r6, #0]
 800593e:	605a      	strne	r2, [r3, #4]
 8005940:	e7ec      	b.n	800591c <_malloc_r+0xa0>
 8005942:	4623      	mov	r3, r4
 8005944:	6864      	ldr	r4, [r4, #4]
 8005946:	e7b2      	b.n	80058ae <_malloc_r+0x32>
 8005948:	4634      	mov	r4, r6
 800594a:	6876      	ldr	r6, [r6, #4]
 800594c:	e7b9      	b.n	80058c2 <_malloc_r+0x46>
 800594e:	230c      	movs	r3, #12
 8005950:	603b      	str	r3, [r7, #0]
 8005952:	4638      	mov	r0, r7
 8005954:	f000 fba4 	bl	80060a0 <__malloc_unlock>
 8005958:	e7a1      	b.n	800589e <_malloc_r+0x22>
 800595a:	6025      	str	r5, [r4, #0]
 800595c:	e7de      	b.n	800591c <_malloc_r+0xa0>
 800595e:	bf00      	nop
 8005960:	20000844 	.word	0x20000844

08005964 <__sfputc_r>:
 8005964:	6893      	ldr	r3, [r2, #8]
 8005966:	3b01      	subs	r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	b410      	push	{r4}
 800596c:	6093      	str	r3, [r2, #8]
 800596e:	da08      	bge.n	8005982 <__sfputc_r+0x1e>
 8005970:	6994      	ldr	r4, [r2, #24]
 8005972:	42a3      	cmp	r3, r4
 8005974:	db01      	blt.n	800597a <__sfputc_r+0x16>
 8005976:	290a      	cmp	r1, #10
 8005978:	d103      	bne.n	8005982 <__sfputc_r+0x1e>
 800597a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800597e:	f7ff bc29 	b.w	80051d4 <__swbuf_r>
 8005982:	6813      	ldr	r3, [r2, #0]
 8005984:	1c58      	adds	r0, r3, #1
 8005986:	6010      	str	r0, [r2, #0]
 8005988:	7019      	strb	r1, [r3, #0]
 800598a:	4608      	mov	r0, r1
 800598c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005990:	4770      	bx	lr

08005992 <__sfputs_r>:
 8005992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005994:	4606      	mov	r6, r0
 8005996:	460f      	mov	r7, r1
 8005998:	4614      	mov	r4, r2
 800599a:	18d5      	adds	r5, r2, r3
 800599c:	42ac      	cmp	r4, r5
 800599e:	d101      	bne.n	80059a4 <__sfputs_r+0x12>
 80059a0:	2000      	movs	r0, #0
 80059a2:	e007      	b.n	80059b4 <__sfputs_r+0x22>
 80059a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059a8:	463a      	mov	r2, r7
 80059aa:	4630      	mov	r0, r6
 80059ac:	f7ff ffda 	bl	8005964 <__sfputc_r>
 80059b0:	1c43      	adds	r3, r0, #1
 80059b2:	d1f3      	bne.n	800599c <__sfputs_r+0xa>
 80059b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059b8 <_vfiprintf_r>:
 80059b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059bc:	460d      	mov	r5, r1
 80059be:	b09d      	sub	sp, #116	; 0x74
 80059c0:	4614      	mov	r4, r2
 80059c2:	4698      	mov	r8, r3
 80059c4:	4606      	mov	r6, r0
 80059c6:	b118      	cbz	r0, 80059d0 <_vfiprintf_r+0x18>
 80059c8:	6983      	ldr	r3, [r0, #24]
 80059ca:	b90b      	cbnz	r3, 80059d0 <_vfiprintf_r+0x18>
 80059cc:	f7ff fddc 	bl	8005588 <__sinit>
 80059d0:	4b89      	ldr	r3, [pc, #548]	; (8005bf8 <_vfiprintf_r+0x240>)
 80059d2:	429d      	cmp	r5, r3
 80059d4:	d11b      	bne.n	8005a0e <_vfiprintf_r+0x56>
 80059d6:	6875      	ldr	r5, [r6, #4]
 80059d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059da:	07d9      	lsls	r1, r3, #31
 80059dc:	d405      	bmi.n	80059ea <_vfiprintf_r+0x32>
 80059de:	89ab      	ldrh	r3, [r5, #12]
 80059e0:	059a      	lsls	r2, r3, #22
 80059e2:	d402      	bmi.n	80059ea <_vfiprintf_r+0x32>
 80059e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059e6:	f7ff fe6d 	bl	80056c4 <__retarget_lock_acquire_recursive>
 80059ea:	89ab      	ldrh	r3, [r5, #12]
 80059ec:	071b      	lsls	r3, r3, #28
 80059ee:	d501      	bpl.n	80059f4 <_vfiprintf_r+0x3c>
 80059f0:	692b      	ldr	r3, [r5, #16]
 80059f2:	b9eb      	cbnz	r3, 8005a30 <_vfiprintf_r+0x78>
 80059f4:	4629      	mov	r1, r5
 80059f6:	4630      	mov	r0, r6
 80059f8:	f7ff fc3e 	bl	8005278 <__swsetup_r>
 80059fc:	b1c0      	cbz	r0, 8005a30 <_vfiprintf_r+0x78>
 80059fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a00:	07dc      	lsls	r4, r3, #31
 8005a02:	d50e      	bpl.n	8005a22 <_vfiprintf_r+0x6a>
 8005a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a08:	b01d      	add	sp, #116	; 0x74
 8005a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a0e:	4b7b      	ldr	r3, [pc, #492]	; (8005bfc <_vfiprintf_r+0x244>)
 8005a10:	429d      	cmp	r5, r3
 8005a12:	d101      	bne.n	8005a18 <_vfiprintf_r+0x60>
 8005a14:	68b5      	ldr	r5, [r6, #8]
 8005a16:	e7df      	b.n	80059d8 <_vfiprintf_r+0x20>
 8005a18:	4b79      	ldr	r3, [pc, #484]	; (8005c00 <_vfiprintf_r+0x248>)
 8005a1a:	429d      	cmp	r5, r3
 8005a1c:	bf08      	it	eq
 8005a1e:	68f5      	ldreq	r5, [r6, #12]
 8005a20:	e7da      	b.n	80059d8 <_vfiprintf_r+0x20>
 8005a22:	89ab      	ldrh	r3, [r5, #12]
 8005a24:	0598      	lsls	r0, r3, #22
 8005a26:	d4ed      	bmi.n	8005a04 <_vfiprintf_r+0x4c>
 8005a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a2a:	f7ff fe4c 	bl	80056c6 <__retarget_lock_release_recursive>
 8005a2e:	e7e9      	b.n	8005a04 <_vfiprintf_r+0x4c>
 8005a30:	2300      	movs	r3, #0
 8005a32:	9309      	str	r3, [sp, #36]	; 0x24
 8005a34:	2320      	movs	r3, #32
 8005a36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a3e:	2330      	movs	r3, #48	; 0x30
 8005a40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005c04 <_vfiprintf_r+0x24c>
 8005a44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a48:	f04f 0901 	mov.w	r9, #1
 8005a4c:	4623      	mov	r3, r4
 8005a4e:	469a      	mov	sl, r3
 8005a50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a54:	b10a      	cbz	r2, 8005a5a <_vfiprintf_r+0xa2>
 8005a56:	2a25      	cmp	r2, #37	; 0x25
 8005a58:	d1f9      	bne.n	8005a4e <_vfiprintf_r+0x96>
 8005a5a:	ebba 0b04 	subs.w	fp, sl, r4
 8005a5e:	d00b      	beq.n	8005a78 <_vfiprintf_r+0xc0>
 8005a60:	465b      	mov	r3, fp
 8005a62:	4622      	mov	r2, r4
 8005a64:	4629      	mov	r1, r5
 8005a66:	4630      	mov	r0, r6
 8005a68:	f7ff ff93 	bl	8005992 <__sfputs_r>
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	f000 80aa 	beq.w	8005bc6 <_vfiprintf_r+0x20e>
 8005a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a74:	445a      	add	r2, fp
 8005a76:	9209      	str	r2, [sp, #36]	; 0x24
 8005a78:	f89a 3000 	ldrb.w	r3, [sl]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 80a2 	beq.w	8005bc6 <_vfiprintf_r+0x20e>
 8005a82:	2300      	movs	r3, #0
 8005a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a8c:	f10a 0a01 	add.w	sl, sl, #1
 8005a90:	9304      	str	r3, [sp, #16]
 8005a92:	9307      	str	r3, [sp, #28]
 8005a94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a98:	931a      	str	r3, [sp, #104]	; 0x68
 8005a9a:	4654      	mov	r4, sl
 8005a9c:	2205      	movs	r2, #5
 8005a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aa2:	4858      	ldr	r0, [pc, #352]	; (8005c04 <_vfiprintf_r+0x24c>)
 8005aa4:	f7fa fb94 	bl	80001d0 <memchr>
 8005aa8:	9a04      	ldr	r2, [sp, #16]
 8005aaa:	b9d8      	cbnz	r0, 8005ae4 <_vfiprintf_r+0x12c>
 8005aac:	06d1      	lsls	r1, r2, #27
 8005aae:	bf44      	itt	mi
 8005ab0:	2320      	movmi	r3, #32
 8005ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ab6:	0713      	lsls	r3, r2, #28
 8005ab8:	bf44      	itt	mi
 8005aba:	232b      	movmi	r3, #43	; 0x2b
 8005abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ac4:	2b2a      	cmp	r3, #42	; 0x2a
 8005ac6:	d015      	beq.n	8005af4 <_vfiprintf_r+0x13c>
 8005ac8:	9a07      	ldr	r2, [sp, #28]
 8005aca:	4654      	mov	r4, sl
 8005acc:	2000      	movs	r0, #0
 8005ace:	f04f 0c0a 	mov.w	ip, #10
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ad8:	3b30      	subs	r3, #48	; 0x30
 8005ada:	2b09      	cmp	r3, #9
 8005adc:	d94e      	bls.n	8005b7c <_vfiprintf_r+0x1c4>
 8005ade:	b1b0      	cbz	r0, 8005b0e <_vfiprintf_r+0x156>
 8005ae0:	9207      	str	r2, [sp, #28]
 8005ae2:	e014      	b.n	8005b0e <_vfiprintf_r+0x156>
 8005ae4:	eba0 0308 	sub.w	r3, r0, r8
 8005ae8:	fa09 f303 	lsl.w	r3, r9, r3
 8005aec:	4313      	orrs	r3, r2
 8005aee:	9304      	str	r3, [sp, #16]
 8005af0:	46a2      	mov	sl, r4
 8005af2:	e7d2      	b.n	8005a9a <_vfiprintf_r+0xe2>
 8005af4:	9b03      	ldr	r3, [sp, #12]
 8005af6:	1d19      	adds	r1, r3, #4
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	9103      	str	r1, [sp, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	bfbb      	ittet	lt
 8005b00:	425b      	neglt	r3, r3
 8005b02:	f042 0202 	orrlt.w	r2, r2, #2
 8005b06:	9307      	strge	r3, [sp, #28]
 8005b08:	9307      	strlt	r3, [sp, #28]
 8005b0a:	bfb8      	it	lt
 8005b0c:	9204      	strlt	r2, [sp, #16]
 8005b0e:	7823      	ldrb	r3, [r4, #0]
 8005b10:	2b2e      	cmp	r3, #46	; 0x2e
 8005b12:	d10c      	bne.n	8005b2e <_vfiprintf_r+0x176>
 8005b14:	7863      	ldrb	r3, [r4, #1]
 8005b16:	2b2a      	cmp	r3, #42	; 0x2a
 8005b18:	d135      	bne.n	8005b86 <_vfiprintf_r+0x1ce>
 8005b1a:	9b03      	ldr	r3, [sp, #12]
 8005b1c:	1d1a      	adds	r2, r3, #4
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	9203      	str	r2, [sp, #12]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	bfb8      	it	lt
 8005b26:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005b2a:	3402      	adds	r4, #2
 8005b2c:	9305      	str	r3, [sp, #20]
 8005b2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005c14 <_vfiprintf_r+0x25c>
 8005b32:	7821      	ldrb	r1, [r4, #0]
 8005b34:	2203      	movs	r2, #3
 8005b36:	4650      	mov	r0, sl
 8005b38:	f7fa fb4a 	bl	80001d0 <memchr>
 8005b3c:	b140      	cbz	r0, 8005b50 <_vfiprintf_r+0x198>
 8005b3e:	2340      	movs	r3, #64	; 0x40
 8005b40:	eba0 000a 	sub.w	r0, r0, sl
 8005b44:	fa03 f000 	lsl.w	r0, r3, r0
 8005b48:	9b04      	ldr	r3, [sp, #16]
 8005b4a:	4303      	orrs	r3, r0
 8005b4c:	3401      	adds	r4, #1
 8005b4e:	9304      	str	r3, [sp, #16]
 8005b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b54:	482c      	ldr	r0, [pc, #176]	; (8005c08 <_vfiprintf_r+0x250>)
 8005b56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b5a:	2206      	movs	r2, #6
 8005b5c:	f7fa fb38 	bl	80001d0 <memchr>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d03f      	beq.n	8005be4 <_vfiprintf_r+0x22c>
 8005b64:	4b29      	ldr	r3, [pc, #164]	; (8005c0c <_vfiprintf_r+0x254>)
 8005b66:	bb1b      	cbnz	r3, 8005bb0 <_vfiprintf_r+0x1f8>
 8005b68:	9b03      	ldr	r3, [sp, #12]
 8005b6a:	3307      	adds	r3, #7
 8005b6c:	f023 0307 	bic.w	r3, r3, #7
 8005b70:	3308      	adds	r3, #8
 8005b72:	9303      	str	r3, [sp, #12]
 8005b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b76:	443b      	add	r3, r7
 8005b78:	9309      	str	r3, [sp, #36]	; 0x24
 8005b7a:	e767      	b.n	8005a4c <_vfiprintf_r+0x94>
 8005b7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b80:	460c      	mov	r4, r1
 8005b82:	2001      	movs	r0, #1
 8005b84:	e7a5      	b.n	8005ad2 <_vfiprintf_r+0x11a>
 8005b86:	2300      	movs	r3, #0
 8005b88:	3401      	adds	r4, #1
 8005b8a:	9305      	str	r3, [sp, #20]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	f04f 0c0a 	mov.w	ip, #10
 8005b92:	4620      	mov	r0, r4
 8005b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b98:	3a30      	subs	r2, #48	; 0x30
 8005b9a:	2a09      	cmp	r2, #9
 8005b9c:	d903      	bls.n	8005ba6 <_vfiprintf_r+0x1ee>
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0c5      	beq.n	8005b2e <_vfiprintf_r+0x176>
 8005ba2:	9105      	str	r1, [sp, #20]
 8005ba4:	e7c3      	b.n	8005b2e <_vfiprintf_r+0x176>
 8005ba6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005baa:	4604      	mov	r4, r0
 8005bac:	2301      	movs	r3, #1
 8005bae:	e7f0      	b.n	8005b92 <_vfiprintf_r+0x1da>
 8005bb0:	ab03      	add	r3, sp, #12
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	462a      	mov	r2, r5
 8005bb6:	4b16      	ldr	r3, [pc, #88]	; (8005c10 <_vfiprintf_r+0x258>)
 8005bb8:	a904      	add	r1, sp, #16
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f3af 8000 	nop.w
 8005bc0:	4607      	mov	r7, r0
 8005bc2:	1c78      	adds	r0, r7, #1
 8005bc4:	d1d6      	bne.n	8005b74 <_vfiprintf_r+0x1bc>
 8005bc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bc8:	07d9      	lsls	r1, r3, #31
 8005bca:	d405      	bmi.n	8005bd8 <_vfiprintf_r+0x220>
 8005bcc:	89ab      	ldrh	r3, [r5, #12]
 8005bce:	059a      	lsls	r2, r3, #22
 8005bd0:	d402      	bmi.n	8005bd8 <_vfiprintf_r+0x220>
 8005bd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bd4:	f7ff fd77 	bl	80056c6 <__retarget_lock_release_recursive>
 8005bd8:	89ab      	ldrh	r3, [r5, #12]
 8005bda:	065b      	lsls	r3, r3, #25
 8005bdc:	f53f af12 	bmi.w	8005a04 <_vfiprintf_r+0x4c>
 8005be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005be2:	e711      	b.n	8005a08 <_vfiprintf_r+0x50>
 8005be4:	ab03      	add	r3, sp, #12
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	462a      	mov	r2, r5
 8005bea:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <_vfiprintf_r+0x258>)
 8005bec:	a904      	add	r1, sp, #16
 8005bee:	4630      	mov	r0, r6
 8005bf0:	f000 f880 	bl	8005cf4 <_printf_i>
 8005bf4:	e7e4      	b.n	8005bc0 <_vfiprintf_r+0x208>
 8005bf6:	bf00      	nop
 8005bf8:	080065d8 	.word	0x080065d8
 8005bfc:	080065f8 	.word	0x080065f8
 8005c00:	080065b8 	.word	0x080065b8
 8005c04:	08006618 	.word	0x08006618
 8005c08:	08006622 	.word	0x08006622
 8005c0c:	00000000 	.word	0x00000000
 8005c10:	08005993 	.word	0x08005993
 8005c14:	0800661e 	.word	0x0800661e

08005c18 <_printf_common>:
 8005c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c1c:	4616      	mov	r6, r2
 8005c1e:	4699      	mov	r9, r3
 8005c20:	688a      	ldr	r2, [r1, #8]
 8005c22:	690b      	ldr	r3, [r1, #16]
 8005c24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	bfb8      	it	lt
 8005c2c:	4613      	movlt	r3, r2
 8005c2e:	6033      	str	r3, [r6, #0]
 8005c30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c34:	4607      	mov	r7, r0
 8005c36:	460c      	mov	r4, r1
 8005c38:	b10a      	cbz	r2, 8005c3e <_printf_common+0x26>
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	6033      	str	r3, [r6, #0]
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	0699      	lsls	r1, r3, #26
 8005c42:	bf42      	ittt	mi
 8005c44:	6833      	ldrmi	r3, [r6, #0]
 8005c46:	3302      	addmi	r3, #2
 8005c48:	6033      	strmi	r3, [r6, #0]
 8005c4a:	6825      	ldr	r5, [r4, #0]
 8005c4c:	f015 0506 	ands.w	r5, r5, #6
 8005c50:	d106      	bne.n	8005c60 <_printf_common+0x48>
 8005c52:	f104 0a19 	add.w	sl, r4, #25
 8005c56:	68e3      	ldr	r3, [r4, #12]
 8005c58:	6832      	ldr	r2, [r6, #0]
 8005c5a:	1a9b      	subs	r3, r3, r2
 8005c5c:	42ab      	cmp	r3, r5
 8005c5e:	dc26      	bgt.n	8005cae <_printf_common+0x96>
 8005c60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c64:	1e13      	subs	r3, r2, #0
 8005c66:	6822      	ldr	r2, [r4, #0]
 8005c68:	bf18      	it	ne
 8005c6a:	2301      	movne	r3, #1
 8005c6c:	0692      	lsls	r2, r2, #26
 8005c6e:	d42b      	bmi.n	8005cc8 <_printf_common+0xb0>
 8005c70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c74:	4649      	mov	r1, r9
 8005c76:	4638      	mov	r0, r7
 8005c78:	47c0      	blx	r8
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	d01e      	beq.n	8005cbc <_printf_common+0xa4>
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	68e5      	ldr	r5, [r4, #12]
 8005c82:	6832      	ldr	r2, [r6, #0]
 8005c84:	f003 0306 	and.w	r3, r3, #6
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	bf08      	it	eq
 8005c8c:	1aad      	subeq	r5, r5, r2
 8005c8e:	68a3      	ldr	r3, [r4, #8]
 8005c90:	6922      	ldr	r2, [r4, #16]
 8005c92:	bf0c      	ite	eq
 8005c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c98:	2500      	movne	r5, #0
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	bfc4      	itt	gt
 8005c9e:	1a9b      	subgt	r3, r3, r2
 8005ca0:	18ed      	addgt	r5, r5, r3
 8005ca2:	2600      	movs	r6, #0
 8005ca4:	341a      	adds	r4, #26
 8005ca6:	42b5      	cmp	r5, r6
 8005ca8:	d11a      	bne.n	8005ce0 <_printf_common+0xc8>
 8005caa:	2000      	movs	r0, #0
 8005cac:	e008      	b.n	8005cc0 <_printf_common+0xa8>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	4652      	mov	r2, sl
 8005cb2:	4649      	mov	r1, r9
 8005cb4:	4638      	mov	r0, r7
 8005cb6:	47c0      	blx	r8
 8005cb8:	3001      	adds	r0, #1
 8005cba:	d103      	bne.n	8005cc4 <_printf_common+0xac>
 8005cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc4:	3501      	adds	r5, #1
 8005cc6:	e7c6      	b.n	8005c56 <_printf_common+0x3e>
 8005cc8:	18e1      	adds	r1, r4, r3
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	2030      	movs	r0, #48	; 0x30
 8005cce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cd2:	4422      	add	r2, r4
 8005cd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cdc:	3302      	adds	r3, #2
 8005cde:	e7c7      	b.n	8005c70 <_printf_common+0x58>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	4622      	mov	r2, r4
 8005ce4:	4649      	mov	r1, r9
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	47c0      	blx	r8
 8005cea:	3001      	adds	r0, #1
 8005cec:	d0e6      	beq.n	8005cbc <_printf_common+0xa4>
 8005cee:	3601      	adds	r6, #1
 8005cf0:	e7d9      	b.n	8005ca6 <_printf_common+0x8e>
	...

08005cf4 <_printf_i>:
 8005cf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf8:	7e0f      	ldrb	r7, [r1, #24]
 8005cfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cfc:	2f78      	cmp	r7, #120	; 0x78
 8005cfe:	4691      	mov	r9, r2
 8005d00:	4680      	mov	r8, r0
 8005d02:	460c      	mov	r4, r1
 8005d04:	469a      	mov	sl, r3
 8005d06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d0a:	d807      	bhi.n	8005d1c <_printf_i+0x28>
 8005d0c:	2f62      	cmp	r7, #98	; 0x62
 8005d0e:	d80a      	bhi.n	8005d26 <_printf_i+0x32>
 8005d10:	2f00      	cmp	r7, #0
 8005d12:	f000 80d8 	beq.w	8005ec6 <_printf_i+0x1d2>
 8005d16:	2f58      	cmp	r7, #88	; 0x58
 8005d18:	f000 80a3 	beq.w	8005e62 <_printf_i+0x16e>
 8005d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d24:	e03a      	b.n	8005d9c <_printf_i+0xa8>
 8005d26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d2a:	2b15      	cmp	r3, #21
 8005d2c:	d8f6      	bhi.n	8005d1c <_printf_i+0x28>
 8005d2e:	a101      	add	r1, pc, #4	; (adr r1, 8005d34 <_printf_i+0x40>)
 8005d30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d34:	08005d8d 	.word	0x08005d8d
 8005d38:	08005da1 	.word	0x08005da1
 8005d3c:	08005d1d 	.word	0x08005d1d
 8005d40:	08005d1d 	.word	0x08005d1d
 8005d44:	08005d1d 	.word	0x08005d1d
 8005d48:	08005d1d 	.word	0x08005d1d
 8005d4c:	08005da1 	.word	0x08005da1
 8005d50:	08005d1d 	.word	0x08005d1d
 8005d54:	08005d1d 	.word	0x08005d1d
 8005d58:	08005d1d 	.word	0x08005d1d
 8005d5c:	08005d1d 	.word	0x08005d1d
 8005d60:	08005ead 	.word	0x08005ead
 8005d64:	08005dd1 	.word	0x08005dd1
 8005d68:	08005e8f 	.word	0x08005e8f
 8005d6c:	08005d1d 	.word	0x08005d1d
 8005d70:	08005d1d 	.word	0x08005d1d
 8005d74:	08005ecf 	.word	0x08005ecf
 8005d78:	08005d1d 	.word	0x08005d1d
 8005d7c:	08005dd1 	.word	0x08005dd1
 8005d80:	08005d1d 	.word	0x08005d1d
 8005d84:	08005d1d 	.word	0x08005d1d
 8005d88:	08005e97 	.word	0x08005e97
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	1d1a      	adds	r2, r3, #4
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	602a      	str	r2, [r5, #0]
 8005d94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e0a3      	b.n	8005ee8 <_printf_i+0x1f4>
 8005da0:	6820      	ldr	r0, [r4, #0]
 8005da2:	6829      	ldr	r1, [r5, #0]
 8005da4:	0606      	lsls	r6, r0, #24
 8005da6:	f101 0304 	add.w	r3, r1, #4
 8005daa:	d50a      	bpl.n	8005dc2 <_printf_i+0xce>
 8005dac:	680e      	ldr	r6, [r1, #0]
 8005dae:	602b      	str	r3, [r5, #0]
 8005db0:	2e00      	cmp	r6, #0
 8005db2:	da03      	bge.n	8005dbc <_printf_i+0xc8>
 8005db4:	232d      	movs	r3, #45	; 0x2d
 8005db6:	4276      	negs	r6, r6
 8005db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dbc:	485e      	ldr	r0, [pc, #376]	; (8005f38 <_printf_i+0x244>)
 8005dbe:	230a      	movs	r3, #10
 8005dc0:	e019      	b.n	8005df6 <_printf_i+0x102>
 8005dc2:	680e      	ldr	r6, [r1, #0]
 8005dc4:	602b      	str	r3, [r5, #0]
 8005dc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005dca:	bf18      	it	ne
 8005dcc:	b236      	sxthne	r6, r6
 8005dce:	e7ef      	b.n	8005db0 <_printf_i+0xbc>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	6820      	ldr	r0, [r4, #0]
 8005dd4:	1d19      	adds	r1, r3, #4
 8005dd6:	6029      	str	r1, [r5, #0]
 8005dd8:	0601      	lsls	r1, r0, #24
 8005dda:	d501      	bpl.n	8005de0 <_printf_i+0xec>
 8005ddc:	681e      	ldr	r6, [r3, #0]
 8005dde:	e002      	b.n	8005de6 <_printf_i+0xf2>
 8005de0:	0646      	lsls	r6, r0, #25
 8005de2:	d5fb      	bpl.n	8005ddc <_printf_i+0xe8>
 8005de4:	881e      	ldrh	r6, [r3, #0]
 8005de6:	4854      	ldr	r0, [pc, #336]	; (8005f38 <_printf_i+0x244>)
 8005de8:	2f6f      	cmp	r7, #111	; 0x6f
 8005dea:	bf0c      	ite	eq
 8005dec:	2308      	moveq	r3, #8
 8005dee:	230a      	movne	r3, #10
 8005df0:	2100      	movs	r1, #0
 8005df2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005df6:	6865      	ldr	r5, [r4, #4]
 8005df8:	60a5      	str	r5, [r4, #8]
 8005dfa:	2d00      	cmp	r5, #0
 8005dfc:	bfa2      	ittt	ge
 8005dfe:	6821      	ldrge	r1, [r4, #0]
 8005e00:	f021 0104 	bicge.w	r1, r1, #4
 8005e04:	6021      	strge	r1, [r4, #0]
 8005e06:	b90e      	cbnz	r6, 8005e0c <_printf_i+0x118>
 8005e08:	2d00      	cmp	r5, #0
 8005e0a:	d04d      	beq.n	8005ea8 <_printf_i+0x1b4>
 8005e0c:	4615      	mov	r5, r2
 8005e0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e12:	fb03 6711 	mls	r7, r3, r1, r6
 8005e16:	5dc7      	ldrb	r7, [r0, r7]
 8005e18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e1c:	4637      	mov	r7, r6
 8005e1e:	42bb      	cmp	r3, r7
 8005e20:	460e      	mov	r6, r1
 8005e22:	d9f4      	bls.n	8005e0e <_printf_i+0x11a>
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	d10b      	bne.n	8005e40 <_printf_i+0x14c>
 8005e28:	6823      	ldr	r3, [r4, #0]
 8005e2a:	07de      	lsls	r6, r3, #31
 8005e2c:	d508      	bpl.n	8005e40 <_printf_i+0x14c>
 8005e2e:	6923      	ldr	r3, [r4, #16]
 8005e30:	6861      	ldr	r1, [r4, #4]
 8005e32:	4299      	cmp	r1, r3
 8005e34:	bfde      	ittt	le
 8005e36:	2330      	movle	r3, #48	; 0x30
 8005e38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e3c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005e40:	1b52      	subs	r2, r2, r5
 8005e42:	6122      	str	r2, [r4, #16]
 8005e44:	f8cd a000 	str.w	sl, [sp]
 8005e48:	464b      	mov	r3, r9
 8005e4a:	aa03      	add	r2, sp, #12
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	4640      	mov	r0, r8
 8005e50:	f7ff fee2 	bl	8005c18 <_printf_common>
 8005e54:	3001      	adds	r0, #1
 8005e56:	d14c      	bne.n	8005ef2 <_printf_i+0x1fe>
 8005e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e5c:	b004      	add	sp, #16
 8005e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e62:	4835      	ldr	r0, [pc, #212]	; (8005f38 <_printf_i+0x244>)
 8005e64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e68:	6829      	ldr	r1, [r5, #0]
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e70:	6029      	str	r1, [r5, #0]
 8005e72:	061d      	lsls	r5, r3, #24
 8005e74:	d514      	bpl.n	8005ea0 <_printf_i+0x1ac>
 8005e76:	07df      	lsls	r7, r3, #31
 8005e78:	bf44      	itt	mi
 8005e7a:	f043 0320 	orrmi.w	r3, r3, #32
 8005e7e:	6023      	strmi	r3, [r4, #0]
 8005e80:	b91e      	cbnz	r6, 8005e8a <_printf_i+0x196>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	f023 0320 	bic.w	r3, r3, #32
 8005e88:	6023      	str	r3, [r4, #0]
 8005e8a:	2310      	movs	r3, #16
 8005e8c:	e7b0      	b.n	8005df0 <_printf_i+0xfc>
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	f043 0320 	orr.w	r3, r3, #32
 8005e94:	6023      	str	r3, [r4, #0]
 8005e96:	2378      	movs	r3, #120	; 0x78
 8005e98:	4828      	ldr	r0, [pc, #160]	; (8005f3c <_printf_i+0x248>)
 8005e9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e9e:	e7e3      	b.n	8005e68 <_printf_i+0x174>
 8005ea0:	0659      	lsls	r1, r3, #25
 8005ea2:	bf48      	it	mi
 8005ea4:	b2b6      	uxthmi	r6, r6
 8005ea6:	e7e6      	b.n	8005e76 <_printf_i+0x182>
 8005ea8:	4615      	mov	r5, r2
 8005eaa:	e7bb      	b.n	8005e24 <_printf_i+0x130>
 8005eac:	682b      	ldr	r3, [r5, #0]
 8005eae:	6826      	ldr	r6, [r4, #0]
 8005eb0:	6961      	ldr	r1, [r4, #20]
 8005eb2:	1d18      	adds	r0, r3, #4
 8005eb4:	6028      	str	r0, [r5, #0]
 8005eb6:	0635      	lsls	r5, r6, #24
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	d501      	bpl.n	8005ec0 <_printf_i+0x1cc>
 8005ebc:	6019      	str	r1, [r3, #0]
 8005ebe:	e002      	b.n	8005ec6 <_printf_i+0x1d2>
 8005ec0:	0670      	lsls	r0, r6, #25
 8005ec2:	d5fb      	bpl.n	8005ebc <_printf_i+0x1c8>
 8005ec4:	8019      	strh	r1, [r3, #0]
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	6123      	str	r3, [r4, #16]
 8005eca:	4615      	mov	r5, r2
 8005ecc:	e7ba      	b.n	8005e44 <_printf_i+0x150>
 8005ece:	682b      	ldr	r3, [r5, #0]
 8005ed0:	1d1a      	adds	r2, r3, #4
 8005ed2:	602a      	str	r2, [r5, #0]
 8005ed4:	681d      	ldr	r5, [r3, #0]
 8005ed6:	6862      	ldr	r2, [r4, #4]
 8005ed8:	2100      	movs	r1, #0
 8005eda:	4628      	mov	r0, r5
 8005edc:	f7fa f978 	bl	80001d0 <memchr>
 8005ee0:	b108      	cbz	r0, 8005ee6 <_printf_i+0x1f2>
 8005ee2:	1b40      	subs	r0, r0, r5
 8005ee4:	6060      	str	r0, [r4, #4]
 8005ee6:	6863      	ldr	r3, [r4, #4]
 8005ee8:	6123      	str	r3, [r4, #16]
 8005eea:	2300      	movs	r3, #0
 8005eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ef0:	e7a8      	b.n	8005e44 <_printf_i+0x150>
 8005ef2:	6923      	ldr	r3, [r4, #16]
 8005ef4:	462a      	mov	r2, r5
 8005ef6:	4649      	mov	r1, r9
 8005ef8:	4640      	mov	r0, r8
 8005efa:	47d0      	blx	sl
 8005efc:	3001      	adds	r0, #1
 8005efe:	d0ab      	beq.n	8005e58 <_printf_i+0x164>
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	079b      	lsls	r3, r3, #30
 8005f04:	d413      	bmi.n	8005f2e <_printf_i+0x23a>
 8005f06:	68e0      	ldr	r0, [r4, #12]
 8005f08:	9b03      	ldr	r3, [sp, #12]
 8005f0a:	4298      	cmp	r0, r3
 8005f0c:	bfb8      	it	lt
 8005f0e:	4618      	movlt	r0, r3
 8005f10:	e7a4      	b.n	8005e5c <_printf_i+0x168>
 8005f12:	2301      	movs	r3, #1
 8005f14:	4632      	mov	r2, r6
 8005f16:	4649      	mov	r1, r9
 8005f18:	4640      	mov	r0, r8
 8005f1a:	47d0      	blx	sl
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d09b      	beq.n	8005e58 <_printf_i+0x164>
 8005f20:	3501      	adds	r5, #1
 8005f22:	68e3      	ldr	r3, [r4, #12]
 8005f24:	9903      	ldr	r1, [sp, #12]
 8005f26:	1a5b      	subs	r3, r3, r1
 8005f28:	42ab      	cmp	r3, r5
 8005f2a:	dcf2      	bgt.n	8005f12 <_printf_i+0x21e>
 8005f2c:	e7eb      	b.n	8005f06 <_printf_i+0x212>
 8005f2e:	2500      	movs	r5, #0
 8005f30:	f104 0619 	add.w	r6, r4, #25
 8005f34:	e7f5      	b.n	8005f22 <_printf_i+0x22e>
 8005f36:	bf00      	nop
 8005f38:	08006629 	.word	0x08006629
 8005f3c:	0800663a 	.word	0x0800663a

08005f40 <_sbrk_r>:
 8005f40:	b538      	push	{r3, r4, r5, lr}
 8005f42:	4d06      	ldr	r5, [pc, #24]	; (8005f5c <_sbrk_r+0x1c>)
 8005f44:	2300      	movs	r3, #0
 8005f46:	4604      	mov	r4, r0
 8005f48:	4608      	mov	r0, r1
 8005f4a:	602b      	str	r3, [r5, #0]
 8005f4c:	f7fb f90e 	bl	800116c <_sbrk>
 8005f50:	1c43      	adds	r3, r0, #1
 8005f52:	d102      	bne.n	8005f5a <_sbrk_r+0x1a>
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	b103      	cbz	r3, 8005f5a <_sbrk_r+0x1a>
 8005f58:	6023      	str	r3, [r4, #0]
 8005f5a:	bd38      	pop	{r3, r4, r5, pc}
 8005f5c:	2000084c 	.word	0x2000084c

08005f60 <__sread>:
 8005f60:	b510      	push	{r4, lr}
 8005f62:	460c      	mov	r4, r1
 8005f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f68:	f000 f8a0 	bl	80060ac <_read_r>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	bfab      	itete	ge
 8005f70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f72:	89a3      	ldrhlt	r3, [r4, #12]
 8005f74:	181b      	addge	r3, r3, r0
 8005f76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f7a:	bfac      	ite	ge
 8005f7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f7e:	81a3      	strhlt	r3, [r4, #12]
 8005f80:	bd10      	pop	{r4, pc}

08005f82 <__swrite>:
 8005f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f86:	461f      	mov	r7, r3
 8005f88:	898b      	ldrh	r3, [r1, #12]
 8005f8a:	05db      	lsls	r3, r3, #23
 8005f8c:	4605      	mov	r5, r0
 8005f8e:	460c      	mov	r4, r1
 8005f90:	4616      	mov	r6, r2
 8005f92:	d505      	bpl.n	8005fa0 <__swrite+0x1e>
 8005f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f98:	2302      	movs	r3, #2
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f000 f868 	bl	8006070 <_lseek_r>
 8005fa0:	89a3      	ldrh	r3, [r4, #12]
 8005fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005faa:	81a3      	strh	r3, [r4, #12]
 8005fac:	4632      	mov	r2, r6
 8005fae:	463b      	mov	r3, r7
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb6:	f000 b817 	b.w	8005fe8 <_write_r>

08005fba <__sseek>:
 8005fba:	b510      	push	{r4, lr}
 8005fbc:	460c      	mov	r4, r1
 8005fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fc2:	f000 f855 	bl	8006070 <_lseek_r>
 8005fc6:	1c43      	adds	r3, r0, #1
 8005fc8:	89a3      	ldrh	r3, [r4, #12]
 8005fca:	bf15      	itete	ne
 8005fcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005fd6:	81a3      	strheq	r3, [r4, #12]
 8005fd8:	bf18      	it	ne
 8005fda:	81a3      	strhne	r3, [r4, #12]
 8005fdc:	bd10      	pop	{r4, pc}

08005fde <__sclose>:
 8005fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe2:	f000 b813 	b.w	800600c <_close_r>
	...

08005fe8 <_write_r>:
 8005fe8:	b538      	push	{r3, r4, r5, lr}
 8005fea:	4d07      	ldr	r5, [pc, #28]	; (8006008 <_write_r+0x20>)
 8005fec:	4604      	mov	r4, r0
 8005fee:	4608      	mov	r0, r1
 8005ff0:	4611      	mov	r1, r2
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	602a      	str	r2, [r5, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f7fa ff5c 	bl	8000eb4 <_write>
 8005ffc:	1c43      	adds	r3, r0, #1
 8005ffe:	d102      	bne.n	8006006 <_write_r+0x1e>
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	b103      	cbz	r3, 8006006 <_write_r+0x1e>
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	bd38      	pop	{r3, r4, r5, pc}
 8006008:	2000084c 	.word	0x2000084c

0800600c <_close_r>:
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	4d06      	ldr	r5, [pc, #24]	; (8006028 <_close_r+0x1c>)
 8006010:	2300      	movs	r3, #0
 8006012:	4604      	mov	r4, r0
 8006014:	4608      	mov	r0, r1
 8006016:	602b      	str	r3, [r5, #0]
 8006018:	f7fb f873 	bl	8001102 <_close>
 800601c:	1c43      	adds	r3, r0, #1
 800601e:	d102      	bne.n	8006026 <_close_r+0x1a>
 8006020:	682b      	ldr	r3, [r5, #0]
 8006022:	b103      	cbz	r3, 8006026 <_close_r+0x1a>
 8006024:	6023      	str	r3, [r4, #0]
 8006026:	bd38      	pop	{r3, r4, r5, pc}
 8006028:	2000084c 	.word	0x2000084c

0800602c <_fstat_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4d07      	ldr	r5, [pc, #28]	; (800604c <_fstat_r+0x20>)
 8006030:	2300      	movs	r3, #0
 8006032:	4604      	mov	r4, r0
 8006034:	4608      	mov	r0, r1
 8006036:	4611      	mov	r1, r2
 8006038:	602b      	str	r3, [r5, #0]
 800603a:	f7fb f86e 	bl	800111a <_fstat>
 800603e:	1c43      	adds	r3, r0, #1
 8006040:	d102      	bne.n	8006048 <_fstat_r+0x1c>
 8006042:	682b      	ldr	r3, [r5, #0]
 8006044:	b103      	cbz	r3, 8006048 <_fstat_r+0x1c>
 8006046:	6023      	str	r3, [r4, #0]
 8006048:	bd38      	pop	{r3, r4, r5, pc}
 800604a:	bf00      	nop
 800604c:	2000084c 	.word	0x2000084c

08006050 <_isatty_r>:
 8006050:	b538      	push	{r3, r4, r5, lr}
 8006052:	4d06      	ldr	r5, [pc, #24]	; (800606c <_isatty_r+0x1c>)
 8006054:	2300      	movs	r3, #0
 8006056:	4604      	mov	r4, r0
 8006058:	4608      	mov	r0, r1
 800605a:	602b      	str	r3, [r5, #0]
 800605c:	f7fb f86d 	bl	800113a <_isatty>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d102      	bne.n	800606a <_isatty_r+0x1a>
 8006064:	682b      	ldr	r3, [r5, #0]
 8006066:	b103      	cbz	r3, 800606a <_isatty_r+0x1a>
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	2000084c 	.word	0x2000084c

08006070 <_lseek_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	4d07      	ldr	r5, [pc, #28]	; (8006090 <_lseek_r+0x20>)
 8006074:	4604      	mov	r4, r0
 8006076:	4608      	mov	r0, r1
 8006078:	4611      	mov	r1, r2
 800607a:	2200      	movs	r2, #0
 800607c:	602a      	str	r2, [r5, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	f7fb f866 	bl	8001150 <_lseek>
 8006084:	1c43      	adds	r3, r0, #1
 8006086:	d102      	bne.n	800608e <_lseek_r+0x1e>
 8006088:	682b      	ldr	r3, [r5, #0]
 800608a:	b103      	cbz	r3, 800608e <_lseek_r+0x1e>
 800608c:	6023      	str	r3, [r4, #0]
 800608e:	bd38      	pop	{r3, r4, r5, pc}
 8006090:	2000084c 	.word	0x2000084c

08006094 <__malloc_lock>:
 8006094:	4801      	ldr	r0, [pc, #4]	; (800609c <__malloc_lock+0x8>)
 8006096:	f7ff bb15 	b.w	80056c4 <__retarget_lock_acquire_recursive>
 800609a:	bf00      	nop
 800609c:	20000840 	.word	0x20000840

080060a0 <__malloc_unlock>:
 80060a0:	4801      	ldr	r0, [pc, #4]	; (80060a8 <__malloc_unlock+0x8>)
 80060a2:	f7ff bb10 	b.w	80056c6 <__retarget_lock_release_recursive>
 80060a6:	bf00      	nop
 80060a8:	20000840 	.word	0x20000840

080060ac <_read_r>:
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	4d07      	ldr	r5, [pc, #28]	; (80060cc <_read_r+0x20>)
 80060b0:	4604      	mov	r4, r0
 80060b2:	4608      	mov	r0, r1
 80060b4:	4611      	mov	r1, r2
 80060b6:	2200      	movs	r2, #0
 80060b8:	602a      	str	r2, [r5, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	f7fb f804 	bl	80010c8 <_read>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d102      	bne.n	80060ca <_read_r+0x1e>
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	b103      	cbz	r3, 80060ca <_read_r+0x1e>
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	bd38      	pop	{r3, r4, r5, pc}
 80060cc:	2000084c 	.word	0x2000084c

080060d0 <_init>:
 80060d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d2:	bf00      	nop
 80060d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060d6:	bc08      	pop	{r3}
 80060d8:	469e      	mov	lr, r3
 80060da:	4770      	bx	lr

080060dc <_fini>:
 80060dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060de:	bf00      	nop
 80060e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e2:	bc08      	pop	{r3}
 80060e4:	469e      	mov	lr, r3
 80060e6:	4770      	bx	lr
