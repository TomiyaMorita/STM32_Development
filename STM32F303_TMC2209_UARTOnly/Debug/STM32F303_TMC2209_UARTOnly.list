
STM32F303_TMC2209_UARTOnly.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800614c  0800614c  0001614c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066b0  080066b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080066b0  080066b0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066b0  080066b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066b0  080066b0  000166b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066b4  080066b4  000166b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080066b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000007e0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000850  20000850  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c7d8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000210b  00000000  00000000  0002c878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  0002e988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000840  00000000  00000000  0002f2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c2a2  00000000  00000000  0002fae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c898  00000000  00000000  0004bd82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fbcc  00000000  00000000  0005861a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f81e6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bbc  00000000  00000000  000f8238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006134 	.word	0x08006134

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006134 	.word	0x08006134

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <tmc2209_readWriteArray>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	60b9      	str	r1, [r7, #8]
 8000278:	607a      	str	r2, [r7, #4]
 800027a:	603b      	str	r3, [r7, #0]
 800027c:	4603      	mov	r3, r0
 800027e:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8000280:	480e      	ldr	r0, [pc, #56]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000282:	f003 fcc7 	bl	8003c14 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, data, writeLength,3000);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	b29a      	uxth	r2, r3
 800028a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800028e:	68b9      	ldr	r1, [r7, #8]
 8000290:	480a      	ldr	r0, [pc, #40]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000292:	f003 f80d 	bl	80032b0 <HAL_UART_Transmit>
//	HAL_UART_Transmit_IT(&huart1, data, writeLength);


	if(readLength > 0){
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d00a      	beq.n	80002b2 <tmc2209_readWriteArray+0x42>
		HAL_HalfDuplex_EnableReceiver(&huart1);
 800029c:	4807      	ldr	r0, [pc, #28]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 800029e:	f003 fd0b 	bl	8003cb8 <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart1, data, readLength,3000);
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002aa:	68b9      	ldr	r1, [r7, #8]
 80002ac:	4803      	ldr	r0, [pc, #12]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 80002ae:	f003 f893 	bl	80033d8 <HAL_UART_Receive>
//		HAL_UART_Receive_IT(&huart1, data, readLength);
	}
}
 80002b2:	bf00      	nop
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	2000008c 	.word	0x2000008c

080002c0 <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 80002ca:	2201      	movs	r2, #1
 80002cc:	6839      	ldr	r1, [r7, #0]
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f004 fb98 	bl	8004a04 <tmc_CRC8>
 80002d4:	4603      	mov	r3, r0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <reset>:

static uint8_t reset()
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	return tmc2209_reset(&TMC2209);
 80002e4:	4802      	ldr	r0, [pc, #8]	; (80002f0 <reset+0x10>)
 80002e6:	f004 fdc5 	bl	8004e74 <tmc2209_reset>
 80002ea:	4603      	mov	r3, r0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000194 	.word	0x20000194

080002f4 <restore>:

static uint8_t restore()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 80002f8:	4802      	ldr	r0, [pc, #8]	; (8000304 <restore+0x10>)
 80002fa:	f004 fdf5 	bl	8004ee8 <tmc2209_restore>
 80002fe:	4603      	mov	r3, r0
}
 8000300:	4618      	mov	r0, r3
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000194 	.word	0x20000194

08000308 <TMC2209_INIT>:


void TMC2209_INIT()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 800030e:	2201      	movs	r2, #1
 8000310:	2101      	movs	r1, #1
 8000312:	2007      	movs	r0, #7
 8000314:	f004 fabe 	bl	8004894 <tmc_fillCRC8Table>

	TMC2209_config.reset = reset;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <TMC2209_INIT+0x38>)
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <TMC2209_INIT+0x3c>)
 800031c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config.restore = restore;
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <TMC2209_INIT+0x38>)
 8000322:	4a09      	ldr	r2, [pc, #36]	; (8000348 <TMC2209_INIT+0x40>)
 8000324:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <TMC2209_INIT+0x44>)
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <TMC2209_INIT+0x38>)
 800032e:	2200      	movs	r2, #0
 8000330:	2100      	movs	r1, #0
 8000332:	4807      	ldr	r0, [pc, #28]	; (8000350 <TMC2209_INIT+0x48>)
 8000334:	f004 fcba 	bl	8004cac <tmc2209_init>


	//restore();
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	2000041c 	.word	0x2000041c
 8000344:	080002e1 	.word	0x080002e1
 8000348:	080002f5 	.word	0x080002f5
 800034c:	08006360 	.word	0x08006360
 8000350:	20000194 	.word	0x20000194

08000354 <HAL_UART_RxCpltCallback>:
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	//int32_t SGTHRS_value = 0;
	uartflag1 = 1;
 800035c:	4b04      	ldr	r3, [pc, #16]	; (8000370 <HAL_UART_RxCpltCallback+0x1c>)
 800035e:	2201      	movs	r2, #1
 8000360:	701a      	strb	r2, [r3, #0]
	printf("uart_timer\r\n");
 8000362:	4804      	ldr	r0, [pc, #16]	; (8000374 <HAL_UART_RxCpltCallback+0x20>)
 8000364:	f004 fe92 	bl	800508c <puts>
	//HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
	//SGTHRS_value = tmc2209_readInt(&TMC2209, TMC2209_SGTHRS);
	//currentdata();
}
 8000368:	bf00      	nop
 800036a:	3708      	adds	r7, #8
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000630 	.word	0x20000630
 8000374:	0800614c 	.word	0x0800614c

08000378 <TMCsetup>:
//			end_stop_state &= ~1;
//		}
//	}
//}

void TMCsetup(){
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
	int32_t value = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	607b      	str	r3, [r7, #4]

	value = 16;
 8000382:	2310      	movs	r3, #16
 8000384:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, value);	//実行電流
 8000386:	2110      	movs	r1, #16
 8000388:	48c8      	ldr	r0, [pc, #800]	; (80006ac <TMCsetup+0x334>)
 800038a:	f004 fc2c 	bl	8004be6 <tmc2209_readInt>
 800038e:	4603      	mov	r3, r0
 8000390:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	021b      	lsls	r3, r3, #8
 8000398:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800039c:	4313      	orrs	r3, r2
 800039e:	461a      	mov	r2, r3
 80003a0:	2110      	movs	r1, #16
 80003a2:	48c2      	ldr	r0, [pc, #776]	; (80006ac <TMCsetup+0x334>)
 80003a4:	f004 fbcf 	bl	8004b46 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80003a8:	f000 ffde 	bl	8001368 <HAL_GetTick>
 80003ac:	4603      	mov	r3, r0
 80003ae:	4619      	mov	r1, r3
 80003b0:	48be      	ldr	r0, [pc, #760]	; (80006ac <TMCsetup+0x334>)
 80003b2:	f004 fd4e 	bl	8004e52 <tmc2209_periodicJob>
	HAL_Delay(100);
 80003b6:	2064      	movs	r0, #100	; 0x64
 80003b8:	f000 ffe2 	bl	8001380 <HAL_Delay>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 80003bc:	2110      	movs	r1, #16
 80003be:	48bb      	ldr	r0, [pc, #748]	; (80006ac <TMCsetup+0x334>)
 80003c0:	f004 fc11 	bl	8004be6 <tmc2209_readInt>
 80003c4:	4603      	mov	r3, r0
 80003c6:	121b      	asrs	r3, r3, #8
 80003c8:	f003 031f 	and.w	r3, r3, #31
 80003cc:	607b      	str	r3, [r7, #4]
	printf("IRUN: %ld\r\n", value);
 80003ce:	6879      	ldr	r1, [r7, #4]
 80003d0:	48b7      	ldr	r0, [pc, #732]	; (80006b0 <TMCsetup+0x338>)
 80003d2:	f004 fdd5 	bl	8004f80 <iprintf>

	value= 16;																						//モーター待機時の電流の設定
 80003d6:	2310      	movs	r3, #16
 80003d8:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, value);
 80003da:	2110      	movs	r1, #16
 80003dc:	48b3      	ldr	r0, [pc, #716]	; (80006ac <TMCsetup+0x334>)
 80003de:	f004 fc02 	bl	8004be6 <tmc2209_readInt>
 80003e2:	4603      	mov	r3, r0
 80003e4:	f023 021f 	bic.w	r2, r3, #31
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f003 031f 	and.w	r3, r3, #31
 80003ee:	4313      	orrs	r3, r2
 80003f0:	461a      	mov	r2, r3
 80003f2:	2110      	movs	r1, #16
 80003f4:	48ad      	ldr	r0, [pc, #692]	; (80006ac <TMCsetup+0x334>)
 80003f6:	f004 fba6 	bl	8004b46 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80003fa:	f000 ffb5 	bl	8001368 <HAL_GetTick>
 80003fe:	4603      	mov	r3, r0
 8000400:	4619      	mov	r1, r3
 8000402:	48aa      	ldr	r0, [pc, #680]	; (80006ac <TMCsetup+0x334>)
 8000404:	f004 fd25 	bl	8004e52 <tmc2209_periodicJob>
	HAL_Delay(100);
 8000408:	2064      	movs	r0, #100	; 0x64
 800040a:	f000 ffb9 	bl	8001380 <HAL_Delay>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);	//保持電流
 800040e:	2110      	movs	r1, #16
 8000410:	48a6      	ldr	r0, [pc, #664]	; (80006ac <TMCsetup+0x334>)
 8000412:	f004 fbe8 	bl	8004be6 <tmc2209_readInt>
 8000416:	4603      	mov	r3, r0
 8000418:	f003 031f 	and.w	r3, r3, #31
 800041c:	607b      	str	r3, [r7, #4]
	printf("IHOLD: %ld\r\n", value);
 800041e:	6879      	ldr	r1, [r7, #4]
 8000420:	48a4      	ldr	r0, [pc, #656]	; (80006b4 <TMCsetup+0x33c>)
 8000422:	f004 fdad 	bl	8004f80 <iprintf>

	value=0;
 8000426:	2300      	movs	r3, #0
 8000428:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK,TMC2209_PDN_DISABLE_SHIFT);
 800042a:	2100      	movs	r1, #0
 800042c:	489f      	ldr	r0, [pc, #636]	; (80006ac <TMCsetup+0x334>)
 800042e:	f004 fbda 	bl	8004be6 <tmc2209_readInt>
 8000432:	4603      	mov	r3, r0
 8000434:	119b      	asrs	r3, r3, #6
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	607b      	str	r3, [r7, #4]
	printf("pdn_disable : %ld\r\n", value);
 800043c:	6879      	ldr	r1, [r7, #4]
 800043e:	489e      	ldr	r0, [pc, #632]	; (80006b8 <TMCsetup+0x340>)
 8000440:	f004 fd9e 	bl	8004f80 <iprintf>
	value = 1;
 8000444:	2301      	movs	r3, #1
 8000446:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK, TMC2209_PDN_DISABLE_SHIFT, value);
 8000448:	2100      	movs	r1, #0
 800044a:	4898      	ldr	r0, [pc, #608]	; (80006ac <TMCsetup+0x334>)
 800044c:	f004 fbcb 	bl	8004be6 <tmc2209_readInt>
 8000450:	4603      	mov	r3, r0
 8000452:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	019b      	lsls	r3, r3, #6
 800045a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800045e:	4313      	orrs	r3, r2
 8000460:	461a      	mov	r2, r3
 8000462:	2100      	movs	r1, #0
 8000464:	4891      	ldr	r0, [pc, #580]	; (80006ac <TMCsetup+0x334>)
 8000466:	f004 fb6e 	bl	8004b46 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800046a:	f000 ff7d 	bl	8001368 <HAL_GetTick>
 800046e:	4603      	mov	r3, r0
 8000470:	4619      	mov	r1, r3
 8000472:	488e      	ldr	r0, [pc, #568]	; (80006ac <TMCsetup+0x334>)
 8000474:	f004 fced 	bl	8004e52 <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK, TMC2209_PDN_DISABLE_SHIFT);
 8000478:	2100      	movs	r1, #0
 800047a:	488c      	ldr	r0, [pc, #560]	; (80006ac <TMCsetup+0x334>)
 800047c:	f004 fbb3 	bl	8004be6 <tmc2209_readInt>
 8000480:	4603      	mov	r3, r0
 8000482:	119b      	asrs	r3, r3, #6
 8000484:	f003 0301 	and.w	r3, r3, #1
 8000488:	607b      	str	r3, [r7, #4]
	printf("pdn_disable : %ld\r\n", value);
 800048a:	6879      	ldr	r1, [r7, #4]
 800048c:	488a      	ldr	r0, [pc, #552]	; (80006b8 <TMCsetup+0x340>)
 800048e:	f004 fd77 	bl	8004f80 <iprintf>

	value=300;
 8000492:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000496:	607b      	str	r3, [r7, #4]
	tmc2209_writeInt(&TMC2209, TMC2209_TCOOLTHRS, value);
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	2114      	movs	r1, #20
 800049c:	4883      	ldr	r0, [pc, #524]	; (80006ac <TMCsetup+0x334>)
 800049e:	f004 fb52 	bl	8004b46 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80004a2:	f000 ff61 	bl	8001368 <HAL_GetTick>
 80004a6:	4603      	mov	r3, r0
 80004a8:	4619      	mov	r1, r3
 80004aa:	4880      	ldr	r0, [pc, #512]	; (80006ac <TMCsetup+0x334>)
 80004ac:	f004 fcd1 	bl	8004e52 <tmc2209_periodicJob>
	printf("TCOOLTHRS: %ld\r\n", value);
 80004b0:	6879      	ldr	r1, [r7, #4]
 80004b2:	4882      	ldr	r0, [pc, #520]	; (80006bc <TMCsetup+0x344>)
 80004b4:	f004 fd64 	bl	8004f80 <iprintf>

	value=0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK,TMC2209_EN_SPREADCYCLE_SHIFT);
 80004bc:	2100      	movs	r1, #0
 80004be:	487b      	ldr	r0, [pc, #492]	; (80006ac <TMCsetup+0x334>)
 80004c0:	f004 fb91 	bl	8004be6 <tmc2209_readInt>
 80004c4:	4603      	mov	r3, r0
 80004c6:	109b      	asrs	r3, r3, #2
 80004c8:	f003 0301 	and.w	r3, r3, #1
 80004cc:	607b      	str	r3, [r7, #4]
	printf("SPREADCYCLE : %ld\r\n", value);
 80004ce:	6879      	ldr	r1, [r7, #4]
 80004d0:	487b      	ldr	r0, [pc, #492]	; (80006c0 <TMCsetup+0x348>)
 80004d2:	f004 fd55 	bl	8004f80 <iprintf>
	value = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK, TMC2209_EN_SPREADCYCLE_SHIFT ,value);
 80004da:	2100      	movs	r1, #0
 80004dc:	4873      	ldr	r0, [pc, #460]	; (80006ac <TMCsetup+0x334>)
 80004de:	f004 fb82 	bl	8004be6 <tmc2209_readInt>
 80004e2:	4603      	mov	r3, r0
 80004e4:	f023 0204 	bic.w	r2, r3, #4
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	f003 0304 	and.w	r3, r3, #4
 80004f0:	4313      	orrs	r3, r2
 80004f2:	461a      	mov	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	486d      	ldr	r0, [pc, #436]	; (80006ac <TMCsetup+0x334>)
 80004f8:	f004 fb25 	bl	8004b46 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80004fc:	f000 ff34 	bl	8001368 <HAL_GetTick>
 8000500:	4603      	mov	r3, r0
 8000502:	4619      	mov	r1, r3
 8000504:	4869      	ldr	r0, [pc, #420]	; (80006ac <TMCsetup+0x334>)
 8000506:	f004 fca4 	bl	8004e52 <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK,TMC2209_EN_SPREADCYCLE_SHIFT);
 800050a:	2100      	movs	r1, #0
 800050c:	4867      	ldr	r0, [pc, #412]	; (80006ac <TMCsetup+0x334>)
 800050e:	f004 fb6a 	bl	8004be6 <tmc2209_readInt>
 8000512:	4603      	mov	r3, r0
 8000514:	109b      	asrs	r3, r3, #2
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
	printf("SPREADCYCLE : %ld\r\n", value);
 800051c:	6879      	ldr	r1, [r7, #4]
 800051e:	4868      	ldr	r0, [pc, #416]	; (80006c0 <TMCsetup+0x348>)
 8000520:	f004 fd2e 	bl	8004f80 <iprintf>
//	value=10;
//	tmc2209_writeInt(&TMC2209, TMC2209_TPWMTHRS, value);
//	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
//	printf("TPWMTHRS: %ld\r\n", value);

	value=0;
 8000524:	2300      	movs	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK,TMC2209_INTERNAL_RSENSE_SHIFT);
 8000528:	2100      	movs	r1, #0
 800052a:	4860      	ldr	r0, [pc, #384]	; (80006ac <TMCsetup+0x334>)
 800052c:	f004 fb5b 	bl	8004be6 <tmc2209_readInt>
 8000530:	4603      	mov	r3, r0
 8000532:	105b      	asrs	r3, r3, #1
 8000534:	f003 0301 	and.w	r3, r3, #1
 8000538:	607b      	str	r3, [r7, #4]
	printf("RSENSE : %ld\r\n", value);
 800053a:	6879      	ldr	r1, [r7, #4]
 800053c:	4861      	ldr	r0, [pc, #388]	; (80006c4 <TMCsetup+0x34c>)
 800053e:	f004 fd1f 	bl	8004f80 <iprintf>
	value = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK, TMC2209_INTERNAL_RSENSE_SHIFT, value);
 8000546:	2100      	movs	r1, #0
 8000548:	4858      	ldr	r0, [pc, #352]	; (80006ac <TMCsetup+0x334>)
 800054a:	f004 fb4c 	bl	8004be6 <tmc2209_readInt>
 800054e:	4603      	mov	r3, r0
 8000550:	f023 0202 	bic.w	r2, r3, #2
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	f003 0302 	and.w	r3, r3, #2
 800055c:	4313      	orrs	r3, r2
 800055e:	461a      	mov	r2, r3
 8000560:	2100      	movs	r1, #0
 8000562:	4852      	ldr	r0, [pc, #328]	; (80006ac <TMCsetup+0x334>)
 8000564:	f004 faef 	bl	8004b46 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000568:	f000 fefe 	bl	8001368 <HAL_GetTick>
 800056c:	4603      	mov	r3, r0
 800056e:	4619      	mov	r1, r3
 8000570:	484e      	ldr	r0, [pc, #312]	; (80006ac <TMCsetup+0x334>)
 8000572:	f004 fc6e 	bl	8004e52 <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK, TMC2209_INTERNAL_RSENSE_SHIFT);
 8000576:	2100      	movs	r1, #0
 8000578:	484c      	ldr	r0, [pc, #304]	; (80006ac <TMCsetup+0x334>)
 800057a:	f004 fb34 	bl	8004be6 <tmc2209_readInt>
 800057e:	4603      	mov	r3, r0
 8000580:	105b      	asrs	r3, r3, #1
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	607b      	str	r3, [r7, #4]
	printf("RSENSE : %ld\r\n", value);
 8000588:	6879      	ldr	r1, [r7, #4]
 800058a:	484e      	ldr	r0, [pc, #312]	; (80006c4 <TMCsetup+0x34c>)
 800058c:	f004 fcf8 	bl	8004f80 <iprintf>

	value=0;
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_FREQ_MASK, TMC2209_PWM_FREQ_SHIFT);
 8000594:	2170      	movs	r1, #112	; 0x70
 8000596:	4845      	ldr	r0, [pc, #276]	; (80006ac <TMCsetup+0x334>)
 8000598:	f004 fb25 	bl	8004be6 <tmc2209_readInt>
 800059c:	4603      	mov	r3, r0
 800059e:	141b      	asrs	r3, r3, #16
 80005a0:	f003 0303 	and.w	r3, r3, #3
 80005a4:	607b      	str	r3, [r7, #4]
	printf("PWM_FREQ : %ld\r\n", value);
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	4847      	ldr	r0, [pc, #284]	; (80006c8 <TMCsetup+0x350>)
 80005aa:	f004 fce9 	bl	8004f80 <iprintf>
	value=1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_FREQ_MASK, TMC2209_PWM_FREQ_SHIFT, value);
 80005b2:	2170      	movs	r1, #112	; 0x70
 80005b4:	483d      	ldr	r0, [pc, #244]	; (80006ac <TMCsetup+0x334>)
 80005b6:	f004 fb16 	bl	8004be6 <tmc2209_readInt>
 80005ba:	4603      	mov	r3, r0
 80005bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	041b      	lsls	r3, r3, #16
 80005c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80005c8:	4313      	orrs	r3, r2
 80005ca:	461a      	mov	r2, r3
 80005cc:	2170      	movs	r1, #112	; 0x70
 80005ce:	4837      	ldr	r0, [pc, #220]	; (80006ac <TMCsetup+0x334>)
 80005d0:	f004 fab9 	bl	8004b46 <tmc2209_writeInt>
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_FREQ_MASK, TMC2209_PWM_FREQ_SHIFT);
 80005d4:	2170      	movs	r1, #112	; 0x70
 80005d6:	4835      	ldr	r0, [pc, #212]	; (80006ac <TMCsetup+0x334>)
 80005d8:	f004 fb05 	bl	8004be6 <tmc2209_readInt>
 80005dc:	4603      	mov	r3, r0
 80005de:	141b      	asrs	r3, r3, #16
 80005e0:	f003 0303 	and.w	r3, r3, #3
 80005e4:	607b      	str	r3, [r7, #4]
	printf("PWM_FREQ : %ld\r\n", value);
 80005e6:	6879      	ldr	r1, [r7, #4]
 80005e8:	4837      	ldr	r0, [pc, #220]	; (80006c8 <TMCsetup+0x350>)
 80005ea:	f004 fcc9 	bl	8004f80 <iprintf>

	value=0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209,TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT);
 80005f2:	2142      	movs	r1, #66	; 0x42
 80005f4:	482d      	ldr	r0, [pc, #180]	; (80006ac <TMCsetup+0x334>)
 80005f6:	f004 faf6 	bl	8004be6 <tmc2209_readInt>
 80005fa:	4603      	mov	r3, r0
 80005fc:	13db      	asrs	r3, r3, #15
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	607b      	str	r3, [r7, #4]
	printf("SEIMIN : %ld\r\n", value);
 8000604:	6879      	ldr	r1, [r7, #4]
 8000606:	4831      	ldr	r0, [pc, #196]	; (80006cc <TMCsetup+0x354>)
 8000608:	f004 fcba 	bl	8004f80 <iprintf>

	value=0;
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_DRVSTATUS, TMC2209_CS_ACTUAL_MASK, TMC2209_CS_ACTUAL_SHIFT);
 8000610:	216f      	movs	r1, #111	; 0x6f
 8000612:	4826      	ldr	r0, [pc, #152]	; (80006ac <TMCsetup+0x334>)
 8000614:	f004 fae7 	bl	8004be6 <tmc2209_readInt>
 8000618:	4603      	mov	r3, r0
 800061a:	141b      	asrs	r3, r3, #16
 800061c:	f003 031f 	and.w	r3, r3, #31
 8000620:	607b      	str	r3, [r7, #4]
	printf("DRVSTATUS : %ld\r\n", value);
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	482a      	ldr	r0, [pc, #168]	; (80006d0 <TMCsetup+0x358>)
 8000626:	f004 fcab 	bl	8004f80 <iprintf>

	value=0;
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK,TMC2209_MSTEP_REG_SELECT_SHIFT);	//uartでのmicrostepの有効化
 800062e:	2100      	movs	r1, #0
 8000630:	481e      	ldr	r0, [pc, #120]	; (80006ac <TMCsetup+0x334>)
 8000632:	f004 fad8 	bl	8004be6 <tmc2209_readInt>
 8000636:	4603      	mov	r3, r0
 8000638:	11db      	asrs	r3, r3, #7
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	607b      	str	r3, [r7, #4]
	printf("mstep_before : %ld\r\n", value);
 8000640:	6879      	ldr	r1, [r7, #4]
 8000642:	4824      	ldr	r0, [pc, #144]	; (80006d4 <TMCsetup+0x35c>)
 8000644:	f004 fc9c 	bl	8004f80 <iprintf>
	value = 1;
 8000648:	2301      	movs	r3, #1
 800064a:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT,value);
 800064c:	2100      	movs	r1, #0
 800064e:	4817      	ldr	r0, [pc, #92]	; (80006ac <TMCsetup+0x334>)
 8000650:	f004 fac9 	bl	8004be6 <tmc2209_readInt>
 8000654:	4603      	mov	r3, r0
 8000656:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	01db      	lsls	r3, r3, #7
 800065e:	b2db      	uxtb	r3, r3
 8000660:	4313      	orrs	r3, r2
 8000662:	461a      	mov	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	4811      	ldr	r0, [pc, #68]	; (80006ac <TMCsetup+0x334>)
 8000668:	f004 fa6d 	bl	8004b46 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800066c:	f000 fe7c 	bl	8001368 <HAL_GetTick>
 8000670:	4603      	mov	r3, r0
 8000672:	4619      	mov	r1, r3
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <TMCsetup+0x334>)
 8000676:	f004 fbec 	bl	8004e52 <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT);
 800067a:	2100      	movs	r1, #0
 800067c:	480b      	ldr	r0, [pc, #44]	; (80006ac <TMCsetup+0x334>)
 800067e:	f004 fab2 	bl	8004be6 <tmc2209_readInt>
 8000682:	4603      	mov	r3, r0
 8000684:	11db      	asrs	r3, r3, #7
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	607b      	str	r3, [r7, #4]
	printf("mstep_after : %ld\r\n", value);
 800068c:	6879      	ldr	r1, [r7, #4]
 800068e:	4812      	ldr	r0, [pc, #72]	; (80006d8 <TMCsetup+0x360>)
 8000690:	f004 fc76 	bl	8004f80 <iprintf>

	value=0;
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);	//保持トルクの設定
 8000698:	216c      	movs	r1, #108	; 0x6c
 800069a:	4804      	ldr	r0, [pc, #16]	; (80006ac <TMCsetup+0x334>)
 800069c:	f004 faa3 	bl	8004be6 <tmc2209_readInt>
 80006a0:	4603      	mov	r3, r0
 80006a2:	f003 030f 	and.w	r3, r3, #15
 80006a6:	607b      	str	r3, [r7, #4]
	printf("toff_before : %ld\r\n", value);
 80006a8:	6879      	ldr	r1, [r7, #4]
 80006aa:	e017      	b.n	80006dc <TMCsetup+0x364>
 80006ac:	20000194 	.word	0x20000194
 80006b0:	08006158 	.word	0x08006158
 80006b4:	08006164 	.word	0x08006164
 80006b8:	08006174 	.word	0x08006174
 80006bc:	08006188 	.word	0x08006188
 80006c0:	0800619c 	.word	0x0800619c
 80006c4:	080061b0 	.word	0x080061b0
 80006c8:	080061c0 	.word	0x080061c0
 80006cc:	080061d4 	.word	0x080061d4
 80006d0:	080061e4 	.word	0x080061e4
 80006d4:	080061f8 	.word	0x080061f8
 80006d8:	08006210 	.word	0x08006210
 80006dc:	48c8      	ldr	r0, [pc, #800]	; (8000a00 <TMCsetup+0x688>)
 80006de:	f004 fc4f 	bl	8004f80 <iprintf>
	value = 3;
 80006e2:	2303      	movs	r3, #3
 80006e4:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT,value);
 80006e6:	216c      	movs	r1, #108	; 0x6c
 80006e8:	48c6      	ldr	r0, [pc, #792]	; (8000a04 <TMCsetup+0x68c>)
 80006ea:	f004 fa7c 	bl	8004be6 <tmc2209_readInt>
 80006ee:	4603      	mov	r3, r0
 80006f0:	f023 020f 	bic.w	r2, r3, #15
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f003 030f 	and.w	r3, r3, #15
 80006fa:	4313      	orrs	r3, r2
 80006fc:	461a      	mov	r2, r3
 80006fe:	216c      	movs	r1, #108	; 0x6c
 8000700:	48c0      	ldr	r0, [pc, #768]	; (8000a04 <TMCsetup+0x68c>)
 8000702:	f004 fa20 	bl	8004b46 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000706:	f000 fe2f 	bl	8001368 <HAL_GetTick>
 800070a:	4603      	mov	r3, r0
 800070c:	4619      	mov	r1, r3
 800070e:	48bd      	ldr	r0, [pc, #756]	; (8000a04 <TMCsetup+0x68c>)
 8000710:	f004 fb9f 	bl	8004e52 <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 8000714:	216c      	movs	r1, #108	; 0x6c
 8000716:	48bb      	ldr	r0, [pc, #748]	; (8000a04 <TMCsetup+0x68c>)
 8000718:	f004 fa65 	bl	8004be6 <tmc2209_readInt>
 800071c:	4603      	mov	r3, r0
 800071e:	f003 030f 	and.w	r3, r3, #15
 8000722:	607b      	str	r3, [r7, #4]
	printf("toff_after : %ld\r\n", value);
 8000724:	6879      	ldr	r1, [r7, #4]
 8000726:	48b8      	ldr	r0, [pc, #736]	; (8000a08 <TMCsetup+0x690>)
 8000728:	f004 fc2a 	bl	8004f80 <iprintf>

	value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);	//microstepの設定
 800072c:	216c      	movs	r1, #108	; 0x6c
 800072e:	48b5      	ldr	r0, [pc, #724]	; (8000a04 <TMCsetup+0x68c>)
 8000730:	f004 fa59 	bl	8004be6 <tmc2209_readInt>
 8000734:	4603      	mov	r3, r0
 8000736:	161b      	asrs	r3, r3, #24
 8000738:	f003 030f 	and.w	r3, r3, #15
 800073c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000740:	fa42 f303 	asr.w	r3, r2, r3
 8000744:	607b      	str	r3, [r7, #4]
	printf("microstep_before : %ld\r\n", value);
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	48b0      	ldr	r0, [pc, #704]	; (8000a0c <TMCsetup+0x694>)
 800074a:	f004 fc19 	bl	8004f80 <iprintf>
	value = 4;
 800074e:	2304      	movs	r3, #4
 8000750:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT,value);
 8000752:	216c      	movs	r1, #108	; 0x6c
 8000754:	48ab      	ldr	r0, [pc, #684]	; (8000a04 <TMCsetup+0x68c>)
 8000756:	f004 fa46 	bl	8004be6 <tmc2209_readInt>
 800075a:	4603      	mov	r3, r0
 800075c:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	061b      	lsls	r3, r3, #24
 8000764:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000768:	4313      	orrs	r3, r2
 800076a:	461a      	mov	r2, r3
 800076c:	216c      	movs	r1, #108	; 0x6c
 800076e:	48a5      	ldr	r0, [pc, #660]	; (8000a04 <TMCsetup+0x68c>)
 8000770:	f004 f9e9 	bl	8004b46 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000774:	f000 fdf8 	bl	8001368 <HAL_GetTick>
 8000778:	4603      	mov	r3, r0
 800077a:	4619      	mov	r1, r3
 800077c:	48a1      	ldr	r0, [pc, #644]	; (8000a04 <TMCsetup+0x68c>)
 800077e:	f004 fb68 	bl	8004e52 <tmc2209_periodicJob>
	value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);
 8000782:	216c      	movs	r1, #108	; 0x6c
 8000784:	489f      	ldr	r0, [pc, #636]	; (8000a04 <TMCsetup+0x68c>)
 8000786:	f004 fa2e 	bl	8004be6 <tmc2209_readInt>
 800078a:	4603      	mov	r3, r0
 800078c:	161b      	asrs	r3, r3, #24
 800078e:	f003 030f 	and.w	r3, r3, #15
 8000792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000796:	fa42 f303 	asr.w	r3, r2, r3
 800079a:	607b      	str	r3, [r7, #4]
	printf("microstep_after : %ld\r\n", value);
 800079c:	6879      	ldr	r1, [r7, #4]
 800079e:	489c      	ldr	r0, [pc, #624]	; (8000a10 <TMCsetup+0x698>)
 80007a0:	f004 fbee 	bl	8004f80 <iprintf>

	value=4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT, value);
 80007a8:	2110      	movs	r1, #16
 80007aa:	4896      	ldr	r0, [pc, #600]	; (8000a04 <TMCsetup+0x68c>)
 80007ac:	f004 fa1b 	bl	8004be6 <tmc2209_readInt>
 80007b0:	4603      	mov	r3, r0
 80007b2:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	041b      	lsls	r3, r3, #16
 80007ba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80007be:	4313      	orrs	r3, r2
 80007c0:	461a      	mov	r2, r3
 80007c2:	2110      	movs	r1, #16
 80007c4:	488f      	ldr	r0, [pc, #572]	; (8000a04 <TMCsetup+0x68c>)
 80007c6:	f004 f9be 	bl	8004b46 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80007ca:	f000 fdcd 	bl	8001368 <HAL_GetTick>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4619      	mov	r1, r3
 80007d2:	488c      	ldr	r0, [pc, #560]	; (8000a04 <TMCsetup+0x68c>)
 80007d4:	f004 fb3d 	bl	8004e52 <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT);
 80007d8:	2110      	movs	r1, #16
 80007da:	488a      	ldr	r0, [pc, #552]	; (8000a04 <TMCsetup+0x68c>)
 80007dc:	f004 fa03 	bl	8004be6 <tmc2209_readInt>
 80007e0:	4603      	mov	r3, r0
 80007e2:	141b      	asrs	r3, r3, #16
 80007e4:	f003 030f 	and.w	r3, r3, #15
 80007e8:	607b      	str	r3, [r7, #4]
	printf("IHOLDDELAY: %ld\r\n", value);
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	4889      	ldr	r0, [pc, #548]	; (8000a14 <TMCsetup+0x69c>)
 80007ee:	f004 fbc7 	bl	8004f80 <iprintf>

	value=50;											//SG_RESULTと比較して、
 80007f2:	2332      	movs	r3, #50	; 0x32
 80007f4:	607b      	str	r3, [r7, #4]
	tmc2209_writeInt(&TMC2209, TMC2209_SGTHRS, value);
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	2140      	movs	r1, #64	; 0x40
 80007fa:	4882      	ldr	r0, [pc, #520]	; (8000a04 <TMCsetup+0x68c>)
 80007fc:	f004 f9a3 	bl	8004b46 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000800:	f000 fdb2 	bl	8001368 <HAL_GetTick>
 8000804:	4603      	mov	r3, r0
 8000806:	4619      	mov	r1, r3
 8000808:	487e      	ldr	r0, [pc, #504]	; (8000a04 <TMCsetup+0x68c>)
 800080a:	f004 fb22 	bl	8004e52 <tmc2209_periodicJob>
	value = tmc2209_readInt(&TMC2209, TMC2209_SGTHRS);
 800080e:	2140      	movs	r1, #64	; 0x40
 8000810:	487c      	ldr	r0, [pc, #496]	; (8000a04 <TMCsetup+0x68c>)
 8000812:	f004 f9e8 	bl	8004be6 <tmc2209_readInt>
 8000816:	6078      	str	r0, [r7, #4]
	printf("SGTHRS: %ld\r\n", value);
 8000818:	6879      	ldr	r1, [r7, #4]
 800081a:	487f      	ldr	r0, [pc, #508]	; (8000a18 <TMCsetup+0x6a0>)
 800081c:	f004 fbb0 	bl	8004f80 <iprintf>

	value = 100;
 8000820:	2364      	movs	r3, #100	; 0x64
 8000822:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT, value);
 8000824:	2170      	movs	r1, #112	; 0x70
 8000826:	4877      	ldr	r0, [pc, #476]	; (8000a04 <TMCsetup+0x68c>)
 8000828:	f004 f9dd 	bl	8004be6 <tmc2209_readInt>
 800082c:	4603      	mov	r3, r0
 800082e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	021b      	lsls	r3, r3, #8
 8000836:	b29b      	uxth	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	461a      	mov	r2, r3
 800083c:	2170      	movs	r1, #112	; 0x70
 800083e:	4871      	ldr	r0, [pc, #452]	; (8000a04 <TMCsetup+0x68c>)
 8000840:	f004 f981 	bl	8004b46 <tmc2209_writeInt>
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT);
 8000844:	2170      	movs	r1, #112	; 0x70
 8000846:	486f      	ldr	r0, [pc, #444]	; (8000a04 <TMCsetup+0x68c>)
 8000848:	f004 f9cd 	bl	8004be6 <tmc2209_readInt>
 800084c:	4603      	mov	r3, r0
 800084e:	121b      	asrs	r3, r3, #8
 8000850:	b2db      	uxtb	r3, r3
 8000852:	607b      	str	r3, [r7, #4]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000854:	f000 fd88 	bl	8001368 <HAL_GetTick>
 8000858:	4603      	mov	r3, r0
 800085a:	4619      	mov	r1, r3
 800085c:	4869      	ldr	r0, [pc, #420]	; (8000a04 <TMCsetup+0x68c>)
 800085e:	f004 faf8 	bl	8004e52 <tmc2209_periodicJob>
	printf("PWM_GRAD: %ld\r\n", value);
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	486d      	ldr	r0, [pc, #436]	; (8000a1c <TMCsetup+0x6a4>)
 8000866:	f004 fb8b 	bl	8004f80 <iprintf>


	value=5;
 800086a:	2305      	movs	r3, #5
 800086c:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEMIN_MASK, TMC2209_SEMIN_SHIFT, value);
 800086e:	2142      	movs	r1, #66	; 0x42
 8000870:	4864      	ldr	r0, [pc, #400]	; (8000a04 <TMCsetup+0x68c>)
 8000872:	f004 f9b8 	bl	8004be6 <tmc2209_readInt>
 8000876:	4603      	mov	r3, r0
 8000878:	f023 020f 	bic.w	r2, r3, #15
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	4313      	orrs	r3, r2
 8000884:	461a      	mov	r2, r3
 8000886:	2142      	movs	r1, #66	; 0x42
 8000888:	485e      	ldr	r0, [pc, #376]	; (8000a04 <TMCsetup+0x68c>)
 800088a:	f004 f95c 	bl	8004b46 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800088e:	f000 fd6b 	bl	8001368 <HAL_GetTick>
 8000892:	4603      	mov	r3, r0
 8000894:	4619      	mov	r1, r3
 8000896:	485b      	ldr	r0, [pc, #364]	; (8000a04 <TMCsetup+0x68c>)
 8000898:	f004 fadb 	bl	8004e52 <tmc2209_periodicJob>
	printf("SEMIN: %ld\r\n", value);
 800089c:	6879      	ldr	r1, [r7, #4]
 800089e:	4860      	ldr	r0, [pc, #384]	; (8000a20 <TMCsetup+0x6a8>)
 80008a0:	f004 fb6e 	bl	8004f80 <iprintf>

	value = 2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEMAX_MASK, TMC2209_SEMAX_SHIFT, value);
 80008a8:	2142      	movs	r1, #66	; 0x42
 80008aa:	4856      	ldr	r0, [pc, #344]	; (8000a04 <TMCsetup+0x68c>)
 80008ac:	f004 f99b 	bl	8004be6 <tmc2209_readInt>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80008be:	4313      	orrs	r3, r2
 80008c0:	461a      	mov	r2, r3
 80008c2:	2142      	movs	r1, #66	; 0x42
 80008c4:	484f      	ldr	r0, [pc, #316]	; (8000a04 <TMCsetup+0x68c>)
 80008c6:	f004 f93e 	bl	8004b46 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80008ca:	f000 fd4d 	bl	8001368 <HAL_GetTick>
 80008ce:	4603      	mov	r3, r0
 80008d0:	4619      	mov	r1, r3
 80008d2:	484c      	ldr	r0, [pc, #304]	; (8000a04 <TMCsetup+0x68c>)
 80008d4:	f004 fabd 	bl	8004e52 <tmc2209_periodicJob>
	printf("SEMAX: %ld\r\n", value);
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	4852      	ldr	r0, [pc, #328]	; (8000a24 <TMCsetup+0x6ac>)
 80008dc:	f004 fb50 	bl	8004f80 <iprintf>

	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT);
 80008e0:	216c      	movs	r1, #108	; 0x6c
 80008e2:	4848      	ldr	r0, [pc, #288]	; (8000a04 <TMCsetup+0x68c>)
 80008e4:	f004 f97f 	bl	8004be6 <tmc2209_readInt>
 80008e8:	4603      	mov	r3, r0
 80008ea:	13db      	asrs	r3, r3, #15
 80008ec:	f003 0303 	and.w	r3, r3, #3
 80008f0:	607b      	str	r3, [r7, #4]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80008f2:	f000 fd39 	bl	8001368 <HAL_GetTick>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4619      	mov	r1, r3
 80008fa:	4842      	ldr	r0, [pc, #264]	; (8000a04 <TMCsetup+0x68c>)
 80008fc:	f004 faa9 	bl	8004e52 <tmc2209_periodicJob>
	value = 1;
 8000900:	2301      	movs	r3, #1
 8000902:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT, value);
 8000904:	216c      	movs	r1, #108	; 0x6c
 8000906:	483f      	ldr	r0, [pc, #252]	; (8000a04 <TMCsetup+0x68c>)
 8000908:	f004 f96d 	bl	8004be6 <tmc2209_readInt>
 800090c:	4603      	mov	r3, r0
 800090e:	f423 32c0 	bic.w	r2, r3, #98304	; 0x18000
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	03db      	lsls	r3, r3, #15
 8000916:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800091a:	4313      	orrs	r3, r2
 800091c:	461a      	mov	r2, r3
 800091e:	216c      	movs	r1, #108	; 0x6c
 8000920:	4838      	ldr	r0, [pc, #224]	; (8000a04 <TMCsetup+0x68c>)
 8000922:	f004 f910 	bl	8004b46 <tmc2209_writeInt>
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT);
 8000926:	216c      	movs	r1, #108	; 0x6c
 8000928:	4836      	ldr	r0, [pc, #216]	; (8000a04 <TMCsetup+0x68c>)
 800092a:	f004 f95c 	bl	8004be6 <tmc2209_readInt>
 800092e:	4603      	mov	r3, r0
 8000930:	13db      	asrs	r3, r3, #15
 8000932:	f003 0303 	and.w	r3, r3, #3
 8000936:	607b      	str	r3, [r7, #4]
	printf("TBL: %ld\r\n", value);
 8000938:	6879      	ldr	r1, [r7, #4]
 800093a:	483b      	ldr	r0, [pc, #236]	; (8000a28 <TMCsetup+0x6b0>)
 800093c:	f004 fb20 	bl	8004f80 <iprintf>

	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT);
 8000940:	2170      	movs	r1, #112	; 0x70
 8000942:	4830      	ldr	r0, [pc, #192]	; (8000a04 <TMCsetup+0x68c>)
 8000944:	f004 f94f 	bl	8004be6 <tmc2209_readInt>
 8000948:	4603      	mov	r3, r0
 800094a:	121b      	asrs	r3, r3, #8
 800094c:	b2db      	uxtb	r3, r3
 800094e:	607b      	str	r3, [r7, #4]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000950:	f000 fd0a 	bl	8001368 <HAL_GetTick>
 8000954:	4603      	mov	r3, r0
 8000956:	4619      	mov	r1, r3
 8000958:	482a      	ldr	r0, [pc, #168]	; (8000a04 <TMCsetup+0x68c>)
 800095a:	f004 fa7a 	bl	8004e52 <tmc2209_periodicJob>
	printf("PWM_GRAD: %ld\r\n", value);
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	482e      	ldr	r0, [pc, #184]	; (8000a1c <TMCsetup+0x6a4>)
 8000962:	f004 fb0d 	bl	8004f80 <iprintf>

	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_AUTOSCALE_MASK, TMC2209_PWM_AUTOSCALE_SHIFT);
 8000966:	2170      	movs	r1, #112	; 0x70
 8000968:	4826      	ldr	r0, [pc, #152]	; (8000a04 <TMCsetup+0x68c>)
 800096a:	f004 f93c 	bl	8004be6 <tmc2209_readInt>
 800096e:	4603      	mov	r3, r0
 8000970:	149b      	asrs	r3, r3, #18
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000978:	f000 fcf6 	bl	8001368 <HAL_GetTick>
 800097c:	4603      	mov	r3, r0
 800097e:	4619      	mov	r1, r3
 8000980:	4820      	ldr	r0, [pc, #128]	; (8000a04 <TMCsetup+0x68c>)
 8000982:	f004 fa66 	bl	8004e52 <tmc2209_periodicJob>
	printf("autoscale: %ld\r\n", value);
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	4828      	ldr	r0, [pc, #160]	; (8000a2c <TMCsetup+0x6b4>)
 800098a:	f004 faf9 	bl	8004f80 <iprintf>

	value = tmc2209_readInt(&TMC2209,TMC2209_PWM_AUTO);
 800098e:	2172      	movs	r1, #114	; 0x72
 8000990:	481c      	ldr	r0, [pc, #112]	; (8000a04 <TMCsetup+0x68c>)
 8000992:	f004 f928 	bl	8004be6 <tmc2209_readInt>
 8000996:	6078      	str	r0, [r7, #4]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000998:	f000 fce6 	bl	8001368 <HAL_GetTick>
 800099c:	4603      	mov	r3, r0
 800099e:	4619      	mov	r1, r3
 80009a0:	4818      	ldr	r0, [pc, #96]	; (8000a04 <TMCsetup+0x68c>)
 80009a2:	f004 fa56 	bl	8004e52 <tmc2209_periodicJob>
	printf("PWMAuto: %ld\r\n", value);
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	4821      	ldr	r0, [pc, #132]	; (8000a30 <TMCsetup+0x6b8>)
 80009aa:	f004 fae9 	bl	8004f80 <iprintf>

	value = tmc2209_readInt(&TMC2209,TMC2209_PWMSCALE);
 80009ae:	2171      	movs	r1, #113	; 0x71
 80009b0:	4814      	ldr	r0, [pc, #80]	; (8000a04 <TMCsetup+0x68c>)
 80009b2:	f004 f918 	bl	8004be6 <tmc2209_readInt>
 80009b6:	6078      	str	r0, [r7, #4]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80009b8:	f000 fcd6 	bl	8001368 <HAL_GetTick>
 80009bc:	4603      	mov	r3, r0
 80009be:	4619      	mov	r1, r3
 80009c0:	4810      	ldr	r0, [pc, #64]	; (8000a04 <TMCsetup+0x68c>)
 80009c2:	f004 fa46 	bl	8004e52 <tmc2209_periodicJob>
	printf("PWMSCALE: %ld\r\n", value);
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	481a      	ldr	r0, [pc, #104]	; (8000a34 <TMCsetup+0x6bc>)
 80009ca:	f004 fad9 	bl	8004f80 <iprintf>

	value = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, 0x07, TMC2209_FCLKTRIM_MASK, TMC2209_FCLKTRIM_SHIFT);
 80009d2:	2107      	movs	r1, #7
 80009d4:	480b      	ldr	r0, [pc, #44]	; (8000a04 <TMCsetup+0x68c>)
 80009d6:	f004 f906 	bl	8004be6 <tmc2209_readInt>
 80009da:	4603      	mov	r3, r0
 80009dc:	f003 031f 	and.w	r3, r3, #31
 80009e0:	607b      	str	r3, [r7, #4]

	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80009e2:	f000 fcc1 	bl	8001368 <HAL_GetTick>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4619      	mov	r1, r3
 80009ea:	4806      	ldr	r0, [pc, #24]	; (8000a04 <TMCsetup+0x68c>)
 80009ec:	f004 fa31 	bl	8004e52 <tmc2209_periodicJob>
	printf("frequency: %ld\r\n", value);
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	4811      	ldr	r0, [pc, #68]	; (8000a38 <TMCsetup+0x6c0>)
 80009f4:	f004 fac4 	bl	8004f80 <iprintf>

//	value = 0;
//	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_INDEX_OTPW_MASK, TMC2209_INDEX_OTPW_SHIFT,value);

}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	08006224 	.word	0x08006224
 8000a04:	20000194 	.word	0x20000194
 8000a08:	08006238 	.word	0x08006238
 8000a0c:	0800624c 	.word	0x0800624c
 8000a10:	08006268 	.word	0x08006268
 8000a14:	08006280 	.word	0x08006280
 8000a18:	08006294 	.word	0x08006294
 8000a1c:	080062a4 	.word	0x080062a4
 8000a20:	080062b4 	.word	0x080062b4
 8000a24:	080062c4 	.word	0x080062c4
 8000a28:	080062d4 	.word	0x080062d4
 8000a2c:	080062e0 	.word	0x080062e0
 8000a30:	080062f4 	.word	0x080062f4
 8000a34:	08006304 	.word	0x08006304
 8000a38:	08006314 	.word	0x08006314

08000a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a3c:	b5b0      	push	{r4, r5, r7, lr}
 8000a3e:	b08e      	sub	sp, #56	; 0x38
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8000a42:	4ba0      	ldr	r3, [pc, #640]	; (8000cc4 <main+0x288>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f004 fb26 	bl	800509c <setbuf>
	//uint8_t buffer[256];
	//char rxbuf[1];
	char start[] ="1:front,2:back\r\n";
 8000a50:	4b9d      	ldr	r3, [pc, #628]	; (8000cc8 <main+0x28c>)
 8000a52:	f107 0418 	add.w	r4, r7, #24
 8000a56:	461d      	mov	r5, r3
 8000a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a5c:	682b      	ldr	r3, [r5, #0]
 8000a5e:	7023      	strb	r3, [r4, #0]
//	char front[] ="front turn\r\n";
//	char back[] ="back turn\r\n";
	char nonans[] ="Not Understand \r\n";
 8000a60:	4b9a      	ldr	r3, [pc, #616]	; (8000ccc <main+0x290>)
 8000a62:	1d3c      	adds	r4, r7, #4
 8000a64:	461d      	mov	r5, r3
 8000a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6a:	682b      	ldr	r3, [r5, #0]
 8000a6c:	8023      	strh	r3, [r4, #0]
	char rxbuf[1];
	int value=0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	633b      	str	r3, [r7, #48]	; 0x30
	int setvalue=0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a76:	f000 fc1d 	bl	80012b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7a:	f000 f935 	bl	8000ce8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7e:	f000 f9eb 	bl	8000e58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a82:	f000 f9b9 	bl	8000df8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000a86:	f000 f987 	bl	8000d98 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //int getserial=0;
  TMC2209_INIT();
 8000a8a:	f7ff fc3d 	bl	8000308 <TMC2209_INIT>
//  TMCsetup();
  printf("Hello\r\n");
 8000a8e:	4890      	ldr	r0, [pc, #576]	; (8000cd0 <main+0x294>)
 8000a90:	f004 fafc 	bl	800508c <puts>
  HAL_UART_Transmit(&huart2,(uint8_t *)start,sizeof(start),3000);
 8000a94:	f107 0118 	add.w	r1, r7, #24
 8000a98:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a9c:	2211      	movs	r2, #17
 8000a9e:	488d      	ldr	r0, [pc, #564]	; (8000cd4 <main+0x298>)
 8000aa0:	f002 fc06 	bl	80032b0 <HAL_UART_Transmit>
  TMCsetup();
 8000aa4:	f7ff fc68 	bl	8000378 <TMCsetup>
  //HAL_TIM_Base_Start_IT(&htim2);
//  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);

  rxbuf[0]=0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	703b      	strb	r3, [r7, #0]
  uartflag1=0;
 8000aac:	4b8a      	ldr	r3, [pc, #552]	; (8000cd8 <main+0x29c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
  uint8_t stall_value=0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    /* USER CODE BEGIN 3 */
//	  currentcheck();
	  //example read register value
	  //int32_t value = 0;
	  HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
 8000ab8:	463b      	mov	r3, r7
 8000aba:	2201      	movs	r2, #1
 8000abc:	4619      	mov	r1, r3
 8000abe:	4885      	ldr	r0, [pc, #532]	; (8000cd4 <main+0x298>)
 8000ac0:	f002 fd5b 	bl	800357a <HAL_UART_Receive_IT>
//	  while(uartflag1==0){
//		  ;
//	  }
	  HAL_UART_Transmit(&huart2,(uint8_t *)rxbuf,sizeof(rxbuf),100);
 8000ac4:	4639      	mov	r1, r7
 8000ac6:	2364      	movs	r3, #100	; 0x64
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4882      	ldr	r0, [pc, #520]	; (8000cd4 <main+0x298>)
 8000acc:	f002 fbf0 	bl	80032b0 <HAL_UART_Transmit>
	  stall_value=0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	  stall_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IOIN, TMC2209_DIAG_MASK, TMC2209_DIAG_SHIFT);
 8000ad6:	2106      	movs	r1, #6
 8000ad8:	4880      	ldr	r0, [pc, #512]	; (8000cdc <main+0x2a0>)
 8000ada:	f004 f884 	bl	8004be6 <tmc2209_readInt>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	111b      	asrs	r3, r3, #4
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
//	  index_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_MSCNT, TMC2209_MSCNT_MASK, TMC2209_MSCNT_SHIFT);
//	  index_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_MSCURACT, TMC2209_CUR_A_MASK, TMC2209_CUR_A_SHIFT);

//	  index_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_INDEX_STEP_MASK, TMC2209_INDEX_STEP_SHIFT);
//	  index_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_INDEX_OTPW_MASK, TMC2209_INDEX_OTPW_SHIFT);
	  HAL_Delay(10);
 8000aec:	200a      	movs	r0, #10
 8000aee:	f000 fc47 	bl	8001380 <HAL_Delay>
//	  printf("stall: %d \r\n",stall_value);
//	  printf("index: %d \r\n",index_value);

	  if(stall_value==1){
 8000af2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d11c      	bne.n	8000b34 <main+0xf8>
		  value = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
		  TMC2209_FIELD_UPDATE(&TMC2209, 0x22, TMC2209_VACTUAL_MASK, TMC2209_VACTUAL_SHIFT,value);
 8000afe:	2122      	movs	r1, #34	; 0x22
 8000b00:	4876      	ldr	r0, [pc, #472]	; (8000cdc <main+0x2a0>)
 8000b02:	f004 f870 	bl	8004be6 <tmc2209_readInt>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b0e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000b12:	4313      	orrs	r3, r2
 8000b14:	461a      	mov	r2, r3
 8000b16:	2122      	movs	r1, #34	; 0x22
 8000b18:	4870      	ldr	r0, [pc, #448]	; (8000cdc <main+0x2a0>)
 8000b1a:	f004 f814 	bl	8004b46 <tmc2209_writeInt>
		  printf("stall:\r\n");
 8000b1e:	4870      	ldr	r0, [pc, #448]	; (8000ce0 <main+0x2a4>)
 8000b20:	f004 fab4 	bl	800508c <puts>
		  stall_value=0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		  while(uartflag1!=1){
 8000b2a:	bf00      	nop
 8000b2c:	4b6a      	ldr	r3, [pc, #424]	; (8000cd8 <main+0x29c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d1fb      	bne.n	8000b2c <main+0xf0>

		  }
	  }

	  if(rxbuf[0]!=0 && uartflag1==1){
 8000b34:	783b      	ldrb	r3, [r7, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f000 80a9 	beq.w	8000c8e <main+0x252>
 8000b3c:	4b66      	ldr	r3, [pc, #408]	; (8000cd8 <main+0x29c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	f040 80a4 	bne.w	8000c8e <main+0x252>
		  switch(rxbuf[0]){
 8000b46:	783b      	ldrb	r3, [r7, #0]
 8000b48:	2b73      	cmp	r3, #115	; 0x73
 8000b4a:	d016      	beq.n	8000b7a <main+0x13e>
 8000b4c:	2b73      	cmp	r3, #115	; 0x73
 8000b4e:	f300 8091 	bgt.w	8000c74 <main+0x238>
 8000b52:	2b64      	cmp	r3, #100	; 0x64
 8000b54:	d02c      	beq.n	8000bb0 <main+0x174>
 8000b56:	2b64      	cmp	r3, #100	; 0x64
 8000b58:	f300 808c 	bgt.w	8000c74 <main+0x238>
 8000b5c:	2b61      	cmp	r3, #97	; 0x61
 8000b5e:	d011      	beq.n	8000b84 <main+0x148>
 8000b60:	2b61      	cmp	r3, #97	; 0x61
 8000b62:	f300 8087 	bgt.w	8000c74 <main+0x238>
 8000b66:	2b33      	cmp	r3, #51	; 0x33
 8000b68:	d06e      	beq.n	8000c48 <main+0x20c>
 8000b6a:	2b33      	cmp	r3, #51	; 0x33
 8000b6c:	f300 8082 	bgt.w	8000c74 <main+0x238>
 8000b70:	2b31      	cmp	r3, #49	; 0x31
 8000b72:	d033      	beq.n	8000bdc <main+0x1a0>
 8000b74:	2b32      	cmp	r3, #50	; 0x32
 8000b76:	d052      	beq.n	8000c1e <main+0x1e2>
 8000b78:	e07c      	b.n	8000c74 <main+0x238>
		  case's':
			  TMCsetup();
 8000b7a:	f7ff fbfd 	bl	8000378 <TMCsetup>
			  rxbuf[0]=0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	703b      	strb	r3, [r7, #0]
			  break;
 8000b82:	e081      	b.n	8000c88 <main+0x24c>
		  case'a':
			  value = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
			  TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_SHAFT_MASK, TMC2209_SHAFT_SHIFT ,value);
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4854      	ldr	r0, [pc, #336]	; (8000cdc <main+0x2a0>)
 8000b8c:	f004 f82b 	bl	8004be6 <tmc2209_readInt>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f023 0208 	bic.w	r2, r3, #8
 8000b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	484d      	ldr	r0, [pc, #308]	; (8000cdc <main+0x2a0>)
 8000ba6:	f003 ffce 	bl	8004b46 <tmc2209_writeInt>
			  rxbuf[0]=0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	703b      	strb	r3, [r7, #0]
			  break;
 8000bae:	e06b      	b.n	8000c88 <main+0x24c>
		  case'd':
			  value = 1;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
			  TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_SHAFT_MASK, TMC2209_SHAFT_SHIFT ,value);
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4849      	ldr	r0, [pc, #292]	; (8000cdc <main+0x2a0>)
 8000bb8:	f004 f815 	bl	8004be6 <tmc2209_readInt>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	f023 0208 	bic.w	r2, r3, #8
 8000bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	f003 0308 	and.w	r3, r3, #8
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	461a      	mov	r2, r3
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4842      	ldr	r0, [pc, #264]	; (8000cdc <main+0x2a0>)
 8000bd2:	f003 ffb8 	bl	8004b46 <tmc2209_writeInt>
			  rxbuf[0]=0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	703b      	strb	r3, [r7, #0]
			  break;
 8000bda:	e055      	b.n	8000c88 <main+0x24c>

		  case'1':
//			  setrev = 1000;
//			  setvalue = setrev*setrev;
			  for(int i = 0;i<=10000;i+=100){
 8000bdc:	2300      	movs	r3, #0
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
 8000be0:	e015      	b.n	8000c0e <main+0x1d2>
				  TMC2209_FIELD_UPDATE(&TMC2209, 0x22, TMC2209_VACTUAL_MASK, TMC2209_VACTUAL_SHIFT,i);
 8000be2:	2122      	movs	r1, #34	; 0x22
 8000be4:	483d      	ldr	r0, [pc, #244]	; (8000cdc <main+0x2a0>)
 8000be6:	f003 fffe 	bl	8004be6 <tmc2209_readInt>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bf2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	2122      	movs	r1, #34	; 0x22
 8000bfc:	4837      	ldr	r0, [pc, #220]	; (8000cdc <main+0x2a0>)
 8000bfe:	f003 ffa2 	bl	8004b46 <tmc2209_writeInt>
				  HAL_Delay(100);
 8000c02:	2064      	movs	r0, #100	; 0x64
 8000c04:	f000 fbbc 	bl	8001380 <HAL_Delay>
			  for(int i = 0;i<=10000;i+=100){
 8000c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c0a:	3364      	adds	r3, #100	; 0x64
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8000c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c10:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c14:	4293      	cmp	r3, r2
 8000c16:	dde4      	ble.n	8000be2 <main+0x1a6>
//			  for(int i = 0;i<=setrev;i+=1){
//				  motorrev=(10000*((i*i)/setvalue));
//				  TMC2209_FIELD_UPDATE(&TMC2209, 0x22, TMC2209_VACTUAL_MASK, TMC2209_VACTUAL_SHIFT,motorrev);
//				  HAL_Delay(10);
//			  }
			  rxbuf[0]=0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	703b      	strb	r3, [r7, #0]
			  break;
 8000c1c:	e034      	b.n	8000c88 <main+0x24c>

		  case'2':
			  value = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
			  TMC2209_FIELD_UPDATE(&TMC2209, 0x22, TMC2209_VACTUAL_MASK, TMC2209_VACTUAL_SHIFT,value);
 8000c22:	2122      	movs	r1, #34	; 0x22
 8000c24:	482d      	ldr	r0, [pc, #180]	; (8000cdc <main+0x2a0>)
 8000c26:	f003 ffde 	bl	8004be6 <tmc2209_readInt>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c32:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000c36:	4313      	orrs	r3, r2
 8000c38:	461a      	mov	r2, r3
 8000c3a:	2122      	movs	r1, #34	; 0x22
 8000c3c:	4827      	ldr	r0, [pc, #156]	; (8000cdc <main+0x2a0>)
 8000c3e:	f003 ff82 	bl	8004b46 <tmc2209_writeInt>
			  rxbuf[0]=0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	703b      	strb	r3, [r7, #0]
			  break;
 8000c46:	e01f      	b.n	8000c88 <main+0x24c>

		  case'3':
			  value = 10000;
 8000c48:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
			  TMC2209_FIELD_UPDATE(&TMC2209, 0x22, TMC2209_VACTUAL_MASK, TMC2209_VACTUAL_SHIFT,value);
 8000c4e:	2122      	movs	r1, #34	; 0x22
 8000c50:	4822      	ldr	r0, [pc, #136]	; (8000cdc <main+0x2a0>)
 8000c52:	f003 ffc8 	bl	8004be6 <tmc2209_readInt>
 8000c56:	4603      	mov	r3, r0
 8000c58:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000c62:	4313      	orrs	r3, r2
 8000c64:	461a      	mov	r2, r3
 8000c66:	2122      	movs	r1, #34	; 0x22
 8000c68:	481c      	ldr	r0, [pc, #112]	; (8000cdc <main+0x2a0>)
 8000c6a:	f003 ff6c 	bl	8004b46 <tmc2209_writeInt>
			  rxbuf[0]=0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	703b      	strb	r3, [r7, #0]
			  break;
 8000c72:	e009      	b.n	8000c88 <main+0x24c>

		  default:
			  HAL_UART_Transmit(&huart2,(uint8_t *)nonans, sizeof(nonans),3000);
 8000c74:	1d39      	adds	r1, r7, #4
 8000c76:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000c7a:	2212      	movs	r2, #18
 8000c7c:	4815      	ldr	r0, [pc, #84]	; (8000cd4 <main+0x298>)
 8000c7e:	f002 fb17 	bl	80032b0 <HAL_UART_Transmit>
			  rxbuf[0]=0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	703b      	strb	r3, [r7, #0]
			  break;
 8000c86:	bf00      	nop

		  }
		  uartflag1=0;
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <main+0x29c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
	  }
	  if(end_stop_state==1){
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <main+0x2a8>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	f47f af10 	bne.w	8000ab8 <main+0x7c>
		  value = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
		  TMC2209_FIELD_UPDATE(&TMC2209, 0x22, TMC2209_VACTUAL_MASK, TMC2209_VACTUAL_SHIFT,value);
 8000c9c:	2122      	movs	r1, #34	; 0x22
 8000c9e:	480f      	ldr	r0, [pc, #60]	; (8000cdc <main+0x2a0>)
 8000ca0:	f003 ffa1 	bl	8004be6 <tmc2209_readInt>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	2122      	movs	r1, #34	; 0x22
 8000cb6:	4809      	ldr	r0, [pc, #36]	; (8000cdc <main+0x2a0>)
 8000cb8:	f003 ff45 	bl	8004b46 <tmc2209_writeInt>
		  end_stop_state=0;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <main+0x2a8>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
 8000cc2:	e6f9      	b.n	8000ab8 <main+0x7c>
 8000cc4:	2000000c 	.word	0x2000000c
 8000cc8:	08006338 	.word	0x08006338
 8000ccc:	0800634c 	.word	0x0800634c
 8000cd0:	08006328 	.word	0x08006328
 8000cd4:	20000110 	.word	0x20000110
 8000cd8:	20000630 	.word	0x20000630
 8000cdc:	20000194 	.word	0x20000194
 8000ce0:	08006330 	.word	0x08006330
 8000ce4:	20000631 	.word	0x20000631

08000ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b096      	sub	sp, #88	; 0x58
 8000cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cf2:	2228      	movs	r2, #40	; 0x28
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f004 f93a 	bl	8004f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
 8000d1a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d20:	2301      	movs	r3, #1
 8000d22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d24:	2310      	movs	r3, #16
 8000d26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d30:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d34:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 fe7a 	bl	8001a34 <HAL_RCC_OscConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000d46:	f000 f8fb 	bl	8000f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	2102      	movs	r1, #2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f001 fea2 	bl	8002ab0 <HAL_RCC_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d72:	f000 f8e5 	bl	8000f40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d76:	2301      	movs	r3, #1
 8000d78:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	4618      	mov	r0, r3
 8000d82:	f002 f8cb 	bl	8002f1c <HAL_RCCEx_PeriphCLKConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000d8c:	f000 f8d8 	bl	8000f40 <Error_Handler>
  }
}
 8000d90:	bf00      	nop
 8000d92:	3758      	adds	r7, #88	; 0x58
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <MX_USART1_UART_Init+0x54>)
 8000d9e:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_USART1_UART_Init+0x54>)
 8000da4:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <MX_USART1_UART_Init+0x5c>)
 8000da6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000da8:	4b10      	ldr	r3, [pc, #64]	; (8000dec <MX_USART1_UART_Init+0x54>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_USART1_UART_Init+0x54>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000db4:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <MX_USART1_UART_Init+0x54>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_USART1_UART_Init+0x54>)
 8000dbc:	220c      	movs	r2, #12
 8000dbe:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <MX_USART1_UART_Init+0x54>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_USART1_UART_Init+0x54>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <MX_USART1_UART_Init+0x54>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_USART1_UART_Init+0x54>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000dd8:	4804      	ldr	r0, [pc, #16]	; (8000dec <MX_USART1_UART_Init+0x54>)
 8000dda:	f002 fa13 	bl	8003204 <HAL_HalfDuplex_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000de4:	f000 f8ac 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	2000008c 	.word	0x2000008c
 8000df0:	40013800 	.word	0x40013800
 8000df4:	0007a120 	.word	0x0007a120

08000df8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000dfe:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <MX_USART2_UART_Init+0x5c>)
 8000e00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_USART2_UART_Init+0x58>)
 8000e3c:	f002 f994 	bl	8003168 <HAL_UART_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e46:	f000 f87b 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000110 	.word	0x20000110
 8000e54:	40004400 	.word	0x40004400

08000e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e6e:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <MX_GPIO_Init+0xb8>)
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	4a27      	ldr	r2, [pc, #156]	; (8000f10 <MX_GPIO_Init+0xb8>)
 8000e74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e78:	6153      	str	r3, [r2, #20]
 8000e7a:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <MX_GPIO_Init+0xb8>)
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <MX_GPIO_Init+0xb8>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	4a21      	ldr	r2, [pc, #132]	; (8000f10 <MX_GPIO_Init+0xb8>)
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e90:	6153      	str	r3, [r2, #20]
 8000e92:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <MX_GPIO_Init+0xb8>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <MX_GPIO_Init+0xb8>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <MX_GPIO_Init+0xb8>)
 8000ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea8:	6153      	str	r3, [r2, #20]
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <MX_GPIO_Init+0xb8>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2130      	movs	r1, #48	; 0x30
 8000eba:	4816      	ldr	r0, [pc, #88]	; (8000f14 <MX_GPIO_Init+0xbc>)
 8000ebc:	f000 fd7e 	bl	80019bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ec0:	2330      	movs	r3, #48	; 0x30
 8000ec2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	480f      	ldr	r0, [pc, #60]	; (8000f14 <MX_GPIO_Init+0xbc>)
 8000ed8:	f000 fbfe 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000edc:	2340      	movs	r3, #64	; 0x40
 8000ede:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ee0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000ee4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4808      	ldr	r0, [pc, #32]	; (8000f14 <MX_GPIO_Init+0xbc>)
 8000ef2:	f000 fbf1 	bl	80016d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2101      	movs	r1, #1
 8000efa:	2017      	movs	r0, #23
 8000efc:	f000 fb3f 	bl	800157e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f00:	2017      	movs	r0, #23
 8000f02:	f000 fb58 	bl	80015b6 <HAL_NVIC_EnableIRQ>

}
 8000f06:	bf00      	nop
 8000f08:	3720      	adds	r7, #32
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000
 8000f14:	48000400 	.word	0x48000400

08000f18 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	230a      	movs	r3, #10
 8000f2a:	68b9      	ldr	r1, [r7, #8]
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <_write+0x24>)
 8000f2e:	f002 f9bf 	bl	80032b0 <HAL_UART_Transmit>
//  HAL_UART_Transmit_IT(&huart2,(uint8_t *)ptr,len);

  return len;
 8000f32:	687b      	ldr	r3, [r7, #4]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000110 	.word	0x20000110

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <Error_Handler+0x8>
	...

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_MspInit+0x44>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <HAL_MspInit+0x44>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6193      	str	r3, [r2, #24]
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_MspInit+0x44>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_MspInit+0x44>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <HAL_MspInit+0x44>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	61d3      	str	r3, [r2, #28]
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_MspInit+0x44>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000

08000f94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	; 0x30
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a38      	ldr	r2, [pc, #224]	; (8001094 <HAL_UART_MspInit+0x100>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d132      	bne.n	800101c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fb6:	4b38      	ldr	r3, [pc, #224]	; (8001098 <HAL_UART_MspInit+0x104>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	4a37      	ldr	r2, [pc, #220]	; (8001098 <HAL_UART_MspInit+0x104>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc0:	6193      	str	r3, [r2, #24]
 8000fc2:	4b35      	ldr	r3, [pc, #212]	; (8001098 <HAL_UART_MspInit+0x104>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fca:	61bb      	str	r3, [r7, #24]
 8000fcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b32      	ldr	r3, [pc, #200]	; (8001098 <HAL_UART_MspInit+0x104>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	4a31      	ldr	r2, [pc, #196]	; (8001098 <HAL_UART_MspInit+0x104>)
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	6153      	str	r3, [r2, #20]
 8000fda:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <HAL_UART_MspInit+0x104>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fec:	2312      	movs	r3, #18
 8000fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001006:	f000 fb67 	bl	80016d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2101      	movs	r1, #1
 800100e:	2025      	movs	r0, #37	; 0x25
 8001010:	f000 fab5 	bl	800157e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001014:	2025      	movs	r0, #37	; 0x25
 8001016:	f000 face 	bl	80015b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800101a:	e036      	b.n	800108a <HAL_UART_MspInit+0xf6>
  else if(huart->Instance==USART2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a1e      	ldr	r2, [pc, #120]	; (800109c <HAL_UART_MspInit+0x108>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d131      	bne.n	800108a <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <HAL_UART_MspInit+0x104>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	4a1b      	ldr	r2, [pc, #108]	; (8001098 <HAL_UART_MspInit+0x104>)
 800102c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001030:	61d3      	str	r3, [r2, #28]
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <HAL_UART_MspInit+0x104>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <HAL_UART_MspInit+0x104>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	4a15      	ldr	r2, [pc, #84]	; (8001098 <HAL_UART_MspInit+0x104>)
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	6153      	str	r3, [r2, #20]
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <HAL_UART_MspInit+0x104>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001056:	f248 0304 	movw	r3, #32772	; 0x8004
 800105a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001068:	2307      	movs	r3, #7
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	4619      	mov	r1, r3
 8001072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001076:	f000 fb2f 	bl	80016d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	2026      	movs	r0, #38	; 0x26
 8001080:	f000 fa7d 	bl	800157e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001084:	2026      	movs	r0, #38	; 0x26
 8001086:	f000 fa96 	bl	80015b6 <HAL_NVIC_EnableIRQ>
}
 800108a:	bf00      	nop
 800108c:	3730      	adds	r7, #48	; 0x30
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40013800 	.word	0x40013800
 8001098:	40021000 	.word	0x40021000
 800109c:	40004400 	.word	0x40004400

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <NMI_Handler+0x4>

080010a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <HardFault_Handler+0x4>

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <MemManage_Handler+0x4>

080010b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <UsageFault_Handler+0x4>

080010be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ec:	f000 f928 	bl	8001340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80010f8:	2040      	movs	r0, #64	; 0x40
 80010fa:	f000 fc77 	bl	80019ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <USART1_IRQHandler+0x10>)
 800110a:	f002 fa85 	bl	8003618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000008c 	.word	0x2000008c

08001118 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <USART2_IRQHandler+0x10>)
 800111e:	f002 fa7b 	bl	8003618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000110 	.word	0x20000110

0800112c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	e00a      	b.n	8001154 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800113e:	f3af 8000 	nop.w
 8001142:	4601      	mov	r1, r0
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	60ba      	str	r2, [r7, #8]
 800114a:	b2ca      	uxtb	r2, r1
 800114c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	dbf0      	blt.n	800113e <_read+0x12>
	}

return len;
 800115c:	687b      	ldr	r3, [r7, #4]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
	return -1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800118e:	605a      	str	r2, [r3, #4]
	return 0;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <_isatty>:

int _isatty(int file)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
	return 1;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
	return 0;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d8:	4a14      	ldr	r2, [pc, #80]	; (800122c <_sbrk+0x5c>)
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <_sbrk+0x60>)
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <_sbrk+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d102      	bne.n	80011f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <_sbrk+0x64>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	; (8001238 <_sbrk+0x68>)
 80011f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <_sbrk+0x64>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d207      	bcs.n	8001210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001200:	f003 fe8c 	bl	8004f1c <__errno>
 8001204:	4603      	mov	r3, r0
 8001206:	220c      	movs	r2, #12
 8001208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800120e:	e009      	b.n	8001224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <_sbrk+0x64>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <_sbrk+0x64>)
 8001220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001222:	68fb      	ldr	r3, [r7, #12]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20003000 	.word	0x20003000
 8001230:	00000400 	.word	0x00000400
 8001234:	20000634 	.word	0x20000634
 8001238:	20000850 	.word	0x20000850

0800123c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <SystemInit+0x20>)
 8001242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001246:	4a05      	ldr	r2, [pc, #20]	; (800125c <SystemInit+0x20>)
 8001248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800124c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001260:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001298 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001264:	480d      	ldr	r0, [pc, #52]	; (800129c <LoopForever+0x6>)
  ldr r1, =_edata
 8001266:	490e      	ldr	r1, [pc, #56]	; (80012a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001268:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <LoopForever+0xe>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800127c:	4c0b      	ldr	r4, [pc, #44]	; (80012ac <LoopForever+0x16>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800128a:	f7ff ffd7 	bl	800123c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128e:	f003 fe4b 	bl	8004f28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001292:	f7ff fbd3 	bl	8000a3c <main>

08001296 <LoopForever>:

LoopForever:
    b LoopForever
 8001296:	e7fe      	b.n	8001296 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001298:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800129c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012a4:	080066b8 	.word	0x080066b8
  ldr r2, =_sbss
 80012a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012ac:	20000850 	.word	0x20000850

080012b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC1_2_IRQHandler>
	...

080012b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_Init+0x28>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a07      	ldr	r2, [pc, #28]	; (80012dc <HAL_Init+0x28>)
 80012be:	f043 0310 	orr.w	r3, r3, #16
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c4:	2003      	movs	r0, #3
 80012c6:	f000 f94f 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 f808 	bl	80012e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d0:	f7ff fe3c 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40022000 	.word	0x40022000

080012e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_InitTick+0x54>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_InitTick+0x58>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f967 	bl	80015d2 <HAL_SYSTICK_Config>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e00e      	b.n	800132c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d80a      	bhi.n	800132a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001314:	2200      	movs	r2, #0
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800131c:	f000 f92f 	bl	800157e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001320:	4a06      	ldr	r2, [pc, #24]	; (800133c <HAL_InitTick+0x5c>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e000      	b.n	800132c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000000 	.word	0x20000000
 8001338:	20000008 	.word	0x20000008
 800133c:	20000004 	.word	0x20000004

08001340 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x20>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x24>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <HAL_IncTick+0x24>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000008 	.word	0x20000008
 8001364:	20000638 	.word	0x20000638

08001368 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;  
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_GetTick+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000638 	.word	0x20000638

08001380 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001388:	f7ff ffee 	bl	8001368 <HAL_GetTick>
 800138c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001398:	d005      	beq.n	80013a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_Delay+0x44>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013a6:	bf00      	nop
 80013a8:	f7ff ffde 	bl	8001368 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d8f7      	bhi.n	80013a8 <HAL_Delay+0x28>
  {
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008

080013c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e4:	4013      	ands	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fa:	4a04      	ldr	r2, [pc, #16]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	60d3      	str	r3, [r2, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <__NVIC_GetPriorityGrouping+0x18>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	f003 0307 	and.w	r3, r3, #7
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	db0b      	blt.n	8001456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f003 021f 	and.w	r2, r3, #31
 8001444:	4907      	ldr	r1, [pc, #28]	; (8001464 <__NVIC_EnableIRQ+0x38>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	2001      	movs	r0, #1
 800144e:	fa00 f202 	lsl.w	r2, r0, r2
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e100 	.word	0xe000e100

08001468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	db0a      	blt.n	8001492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	490c      	ldr	r1, [pc, #48]	; (80014b4 <__NVIC_SetPriority+0x4c>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	0112      	lsls	r2, r2, #4
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	440b      	add	r3, r1
 800148c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001490:	e00a      	b.n	80014a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4908      	ldr	r1, [pc, #32]	; (80014b8 <__NVIC_SetPriority+0x50>)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	3b04      	subs	r3, #4
 80014a0:	0112      	lsls	r2, r2, #4
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	440b      	add	r3, r1
 80014a6:	761a      	strb	r2, [r3, #24]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000e100 	.word	0xe000e100
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f1c3 0307 	rsb	r3, r3, #7
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	bf28      	it	cs
 80014da:	2304      	movcs	r3, #4
 80014dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3304      	adds	r3, #4
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d902      	bls.n	80014ec <NVIC_EncodePriority+0x30>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3b03      	subs	r3, #3
 80014ea:	e000      	b.n	80014ee <NVIC_EncodePriority+0x32>
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001504:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43d9      	mvns	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	4313      	orrs	r3, r2
         );
}
 8001516:	4618      	mov	r0, r3
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001534:	d301      	bcc.n	800153a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001536:	2301      	movs	r3, #1
 8001538:	e00f      	b.n	800155a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <SysTick_Config+0x40>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001542:	210f      	movs	r1, #15
 8001544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001548:	f7ff ff8e 	bl	8001468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SysTick_Config+0x40>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <SysTick_Config+0x40>)
 8001554:	2207      	movs	r2, #7
 8001556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	e000e010 	.word	0xe000e010

08001568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff29 	bl	80013c8 <__NVIC_SetPriorityGrouping>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001590:	f7ff ff3e 	bl	8001410 <__NVIC_GetPriorityGrouping>
 8001594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	f7ff ff8e 	bl	80014bc <NVIC_EncodePriority>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff5d 	bl	8001468 <__NVIC_SetPriority>
}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff31 	bl	800142c <__NVIC_EnableIRQ>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ffa2 	bl	8001524 <SysTick_Config>
 80015e0:	4603      	mov	r3, r0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d008      	beq.n	800160e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2204      	movs	r2, #4
 8001600:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e020      	b.n	8001650 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 020e 	bic.w	r2, r2, #14
 800161c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0201 	bic.w	r2, r2, #1
 800162c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001636:	2101      	movs	r1, #1
 8001638:	fa01 f202 	lsl.w	r2, r1, r2
 800163c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800166e:	2b02      	cmp	r3, #2
 8001670:	d005      	beq.n	800167e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2204      	movs	r2, #4
 8001676:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	73fb      	strb	r3, [r7, #15]
 800167c:	e027      	b.n	80016ce <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 020e 	bic.w	r2, r2, #14
 800168c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0201 	bic.w	r2, r2, #1
 800169c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a6:	2101      	movs	r1, #1
 80016a8:	fa01 f202 	lsl.w	r2, r1, r2
 80016ac:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	4798      	blx	r3
    } 
  }
  return status;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e6:	e14e      	b.n	8001986 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	4013      	ands	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8140 	beq.w	8001980 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	2b01      	cmp	r3, #1
 800170a:	d005      	beq.n	8001718 <HAL_GPIO_Init+0x40>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d130      	bne.n	800177a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	2203      	movs	r2, #3
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	68da      	ldr	r2, [r3, #12]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800174e:	2201      	movs	r2, #1
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	091b      	lsrs	r3, r3, #4
 8001764:	f003 0201 	and.w	r2, r3, #1
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	2b03      	cmp	r3, #3
 8001784:	d017      	beq.n	80017b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	2203      	movs	r2, #3
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d123      	bne.n	800180a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	08da      	lsrs	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3208      	adds	r2, #8
 80017ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	220f      	movs	r2, #15
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	691a      	ldr	r2, [r3, #16]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	08da      	lsrs	r2, r3, #3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3208      	adds	r2, #8
 8001804:	6939      	ldr	r1, [r7, #16]
 8001806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2203      	movs	r2, #3
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0203 	and.w	r2, r3, #3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 809a 	beq.w	8001980 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184c:	4b55      	ldr	r3, [pc, #340]	; (80019a4 <HAL_GPIO_Init+0x2cc>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a54      	ldr	r2, [pc, #336]	; (80019a4 <HAL_GPIO_Init+0x2cc>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6193      	str	r3, [r2, #24]
 8001858:	4b52      	ldr	r3, [pc, #328]	; (80019a4 <HAL_GPIO_Init+0x2cc>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001864:	4a50      	ldr	r2, [pc, #320]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	089b      	lsrs	r3, r3, #2
 800186a:	3302      	adds	r3, #2
 800186c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	220f      	movs	r2, #15
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800188e:	d013      	beq.n	80018b8 <HAL_GPIO_Init+0x1e0>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a46      	ldr	r2, [pc, #280]	; (80019ac <HAL_GPIO_Init+0x2d4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d00d      	beq.n	80018b4 <HAL_GPIO_Init+0x1dc>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a45      	ldr	r2, [pc, #276]	; (80019b0 <HAL_GPIO_Init+0x2d8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d007      	beq.n	80018b0 <HAL_GPIO_Init+0x1d8>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a44      	ldr	r2, [pc, #272]	; (80019b4 <HAL_GPIO_Init+0x2dc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d101      	bne.n	80018ac <HAL_GPIO_Init+0x1d4>
 80018a8:	2303      	movs	r3, #3
 80018aa:	e006      	b.n	80018ba <HAL_GPIO_Init+0x1e2>
 80018ac:	2305      	movs	r3, #5
 80018ae:	e004      	b.n	80018ba <HAL_GPIO_Init+0x1e2>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e002      	b.n	80018ba <HAL_GPIO_Init+0x1e2>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <HAL_GPIO_Init+0x1e2>
 80018b8:	2300      	movs	r3, #0
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	f002 0203 	and.w	r2, r2, #3
 80018c0:	0092      	lsls	r2, r2, #2
 80018c2:	4093      	lsls	r3, r2
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ca:	4937      	ldr	r1, [pc, #220]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	3302      	adds	r3, #2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018d8:	4b37      	ldr	r3, [pc, #220]	; (80019b8 <HAL_GPIO_Init+0x2e0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018fc:	4a2e      	ldr	r2, [pc, #184]	; (80019b8 <HAL_GPIO_Init+0x2e0>)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001902:	4b2d      	ldr	r3, [pc, #180]	; (80019b8 <HAL_GPIO_Init+0x2e0>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	43db      	mvns	r3, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001926:	4a24      	ldr	r2, [pc, #144]	; (80019b8 <HAL_GPIO_Init+0x2e0>)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800192c:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_GPIO_Init+0x2e0>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	43db      	mvns	r3, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001950:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <HAL_GPIO_Init+0x2e0>)
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_GPIO_Init+0x2e0>)
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800197a:	4a0f      	ldr	r2, [pc, #60]	; (80019b8 <HAL_GPIO_Init+0x2e0>)
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	3301      	adds	r3, #1
 8001984:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	f47f aea9 	bne.w	80016e8 <HAL_GPIO_Init+0x10>
  }
}
 8001996:	bf00      	nop
 8001998:	bf00      	nop
 800199a:	371c      	adds	r7, #28
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010000 	.word	0x40010000
 80019ac:	48000400 	.word	0x48000400
 80019b0:	48000800 	.word	0x48000800
 80019b4:	48000c00 	.word	0x48000c00
 80019b8:	40010400 	.word	0x40010400

080019bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	807b      	strh	r3, [r7, #2]
 80019c8:	4613      	mov	r3, r2
 80019ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019cc:	787b      	ldrb	r3, [r7, #1]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019d2:	887a      	ldrh	r2, [r7, #2]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019d8:	e002      	b.n	80019e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019da:	887a      	ldrh	r2, [r7, #2]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d006      	beq.n	8001a10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a02:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f806 	bl	8001a1c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40010400 	.word	0x40010400

08001a1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a44:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	f001 b823 	b.w	8002aa0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 817d 	beq.w	8001d6a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a70:	4bbc      	ldr	r3, [pc, #752]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d00c      	beq.n	8001a96 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a7c:	4bb9      	ldr	r3, [pc, #740]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d15c      	bne.n	8001b42 <HAL_RCC_OscConfig+0x10e>
 8001a88:	4bb6      	ldr	r3, [pc, #728]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a94:	d155      	bne.n	8001b42 <HAL_RCC_OscConfig+0x10e>
 8001a96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a9a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001aaa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aae:	fab3 f383 	clz	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	095b      	lsrs	r3, r3, #5
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d102      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x94>
 8001ac2:	4ba8      	ldr	r3, [pc, #672]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	e015      	b.n	8001af4 <HAL_RCC_OscConfig+0xc0>
 8001ac8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001acc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001ad4:	fa93 f3a3 	rbit	r3, r3
 8001ad8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ae4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001af0:	4b9c      	ldr	r3, [pc, #624]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001af8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001afc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b00:	fa92 f2a2 	rbit	r2, r2
 8001b04:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001b08:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001b0c:	fab2 f282 	clz	r2, r2
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	f042 0220 	orr.w	r2, r2, #32
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	f002 021f 	and.w	r2, r2, #31
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 811f 	beq.w	8001d68 <HAL_RCC_OscConfig+0x334>
 8001b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f040 8116 	bne.w	8001d68 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	f000 bfaf 	b.w	8002aa0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b52:	d106      	bne.n	8001b62 <HAL_RCC_OscConfig+0x12e>
 8001b54:	4b83      	ldr	r3, [pc, #524]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a82      	ldr	r2, [pc, #520]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	e036      	b.n	8001bd0 <HAL_RCC_OscConfig+0x19c>
 8001b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x158>
 8001b72:	4b7c      	ldr	r3, [pc, #496]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a7b      	ldr	r2, [pc, #492]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	4b79      	ldr	r3, [pc, #484]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a78      	ldr	r2, [pc, #480]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e021      	b.n	8001bd0 <HAL_RCC_OscConfig+0x19c>
 8001b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x184>
 8001b9e:	4b71      	ldr	r3, [pc, #452]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a70      	ldr	r2, [pc, #448]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	4b6e      	ldr	r3, [pc, #440]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a6d      	ldr	r2, [pc, #436]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e00b      	b.n	8001bd0 <HAL_RCC_OscConfig+0x19c>
 8001bb8:	4b6a      	ldr	r3, [pc, #424]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a69      	ldr	r2, [pc, #420]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b67      	ldr	r3, [pc, #412]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a66      	ldr	r2, [pc, #408]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bce:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bd0:	4b64      	ldr	r3, [pc, #400]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	f023 020f 	bic.w	r2, r3, #15
 8001bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	495f      	ldr	r1, [pc, #380]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d059      	beq.n	8001cae <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7ff fbb5 	bl	8001368 <HAL_GetTick>
 8001bfe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	e00a      	b.n	8001c1a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff fbb0 	bl	8001368 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b64      	cmp	r3, #100	; 0x64
 8001c12:	d902      	bls.n	8001c1a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	f000 bf43 	b.w	8002aa0 <HAL_RCC_OscConfig+0x106c>
 8001c1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c1e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001c2e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	095b      	lsrs	r3, r3, #5
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d102      	bne.n	8001c4c <HAL_RCC_OscConfig+0x218>
 8001c46:	4b47      	ldr	r3, [pc, #284]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	e015      	b.n	8001c78 <HAL_RCC_OscConfig+0x244>
 8001c4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c50:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c54:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c64:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c68:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001c6c:	fa93 f3a3 	rbit	r3, r3
 8001c70:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001c74:	4b3b      	ldr	r3, [pc, #236]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c7c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001c80:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001c84:	fa92 f2a2 	rbit	r2, r2
 8001c88:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001c8c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001c90:	fab2 f282 	clz	r2, r2
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	f042 0220 	orr.w	r2, r2, #32
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	f002 021f 	and.w	r2, r2, #31
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0ab      	beq.n	8001c04 <HAL_RCC_OscConfig+0x1d0>
 8001cac:	e05d      	b.n	8001d6a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cae:	f7ff fb5b 	bl	8001368 <HAL_GetTick>
 8001cb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7ff fb56 	bl	8001368 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b64      	cmp	r3, #100	; 0x64
 8001cc6:	d902      	bls.n	8001cce <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	f000 bee9 	b.w	8002aa0 <HAL_RCC_OscConfig+0x106c>
 8001cce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cd2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001ce2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	095b      	lsrs	r3, r3, #5
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d102      	bne.n	8001d00 <HAL_RCC_OscConfig+0x2cc>
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	e015      	b.n	8001d2c <HAL_RCC_OscConfig+0x2f8>
 8001d00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d04:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d18:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d1c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001d28:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d30:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001d34:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d38:	fa92 f2a2 	rbit	r2, r2
 8001d3c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001d40:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001d44:	fab2 f282 	clz	r2, r2
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	f042 0220 	orr.w	r2, r2, #32
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	f002 021f 	and.w	r2, r2, #31
 8001d54:	2101      	movs	r1, #1
 8001d56:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1ab      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x284>
 8001d60:	e003      	b.n	8001d6a <HAL_RCC_OscConfig+0x336>
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 817d 	beq.w	800207a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d80:	4ba6      	ldr	r3, [pc, #664]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00b      	beq.n	8001da4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d8c:	4ba3      	ldr	r3, [pc, #652]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 030c 	and.w	r3, r3, #12
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d172      	bne.n	8001e7e <HAL_RCC_OscConfig+0x44a>
 8001d98:	4ba0      	ldr	r3, [pc, #640]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d16c      	bne.n	8001e7e <HAL_RCC_OscConfig+0x44a>
 8001da4:	2302      	movs	r3, #2
 8001da6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001db6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dba:	fab3 f383 	clz	r3, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	095b      	lsrs	r3, r3, #5
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d102      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x3a0>
 8001dce:	4b93      	ldr	r3, [pc, #588]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	e013      	b.n	8001dfc <HAL_RCC_OscConfig+0x3c8>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001de6:	2302      	movs	r3, #2
 8001de8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001dec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001df8:	4b88      	ldr	r3, [pc, #544]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001e02:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e06:	fa92 f2a2 	rbit	r2, r2
 8001e0a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001e0e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001e12:	fab2 f282 	clz	r2, r2
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	f042 0220 	orr.w	r2, r2, #32
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	f002 021f 	and.w	r2, r2, #31
 8001e22:	2101      	movs	r1, #1
 8001e24:	fa01 f202 	lsl.w	r2, r1, r2
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00a      	beq.n	8001e44 <HAL_RCC_OscConfig+0x410>
 8001e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d002      	beq.n	8001e44 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f000 be2e 	b.w	8002aa0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e44:	4b75      	ldr	r3, [pc, #468]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	21f8      	movs	r1, #248	; 0xf8
 8001e5a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e62:	fa91 f1a1 	rbit	r1, r1
 8001e66:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001e6a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001e6e:	fab1 f181 	clz	r1, r1
 8001e72:	b2c9      	uxtb	r1, r1
 8001e74:	408b      	lsls	r3, r1
 8001e76:	4969      	ldr	r1, [pc, #420]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7c:	e0fd      	b.n	800207a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8088 	beq.w	8001fa0 <HAL_RCC_OscConfig+0x56c>
 8001e90:	2301      	movs	r3, #1
 8001e92:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001ea2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001eb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	2301      	movs	r3, #1
 8001eba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fa54 	bl	8001368 <HAL_GetTick>
 8001ec0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec4:	e00a      	b.n	8001edc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec6:	f7ff fa4f 	bl	8001368 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d902      	bls.n	8001edc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	f000 bde2 	b.w	8002aa0 <HAL_RCC_OscConfig+0x106c>
 8001edc:	2302      	movs	r3, #2
 8001ede:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001eee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	095b      	lsrs	r3, r3, #5
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d102      	bne.n	8001f0c <HAL_RCC_OscConfig+0x4d8>
 8001f06:	4b45      	ldr	r3, [pc, #276]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	e013      	b.n	8001f34 <HAL_RCC_OscConfig+0x500>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f1e:	2302      	movs	r3, #2
 8001f20:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f24:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001f28:	fa93 f3a3 	rbit	r3, r3
 8001f2c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001f30:	4b3a      	ldr	r3, [pc, #232]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	2202      	movs	r2, #2
 8001f36:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001f3a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f3e:	fa92 f2a2 	rbit	r2, r2
 8001f42:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001f46:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001f4a:	fab2 f282 	clz	r2, r2
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	f042 0220 	orr.w	r2, r2, #32
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	f002 021f 	and.w	r2, r2, #31
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0af      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f66:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	21f8      	movs	r1, #248	; 0xf8
 8001f7c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f84:	fa91 f1a1 	rbit	r1, r1
 8001f88:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001f8c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001f90:	fab1 f181 	clz	r1, r1
 8001f94:	b2c9      	uxtb	r1, r1
 8001f96:	408b      	lsls	r3, r1
 8001f98:	4920      	ldr	r1, [pc, #128]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]
 8001f9e:	e06c      	b.n	800207a <HAL_RCC_OscConfig+0x646>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001fb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2300      	movs	r3, #0
 8001fca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7ff f9cc 	bl	8001368 <HAL_GetTick>
 8001fd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd6:	f7ff f9c7 	bl	8001368 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d902      	bls.n	8001fec <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	f000 bd5a 	b.w	8002aa0 <HAL_RCC_OscConfig+0x106c>
 8001fec:	2302      	movs	r3, #2
 8001fee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	095b      	lsrs	r3, r3, #5
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d104      	bne.n	8002020 <HAL_RCC_OscConfig+0x5ec>
 8002016:	4b01      	ldr	r3, [pc, #4]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	e015      	b.n	8002048 <HAL_RCC_OscConfig+0x614>
 800201c:	40021000 	.word	0x40021000
 8002020:	2302      	movs	r3, #2
 8002022:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002032:	2302      	movs	r3, #2
 8002034:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002038:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800203c:	fa93 f3a3 	rbit	r3, r3
 8002040:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002044:	4bc8      	ldr	r3, [pc, #800]	; (8002368 <HAL_RCC_OscConfig+0x934>)
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	2202      	movs	r2, #2
 800204a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800204e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002052:	fa92 f2a2 	rbit	r2, r2
 8002056:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800205a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800205e:	fab2 f282 	clz	r2, r2
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	f042 0220 	orr.w	r2, r2, #32
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	f002 021f 	and.w	r2, r2, #31
 800206e:	2101      	movs	r1, #1
 8002070:	fa01 f202 	lsl.w	r2, r1, r2
 8002074:	4013      	ands	r3, r2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1ad      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8110 	beq.w	80022b0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002094:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d079      	beq.n	8002194 <HAL_RCC_OscConfig+0x760>
 80020a0:	2301      	movs	r3, #1
 80020a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80020b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	4bab      	ldr	r3, [pc, #684]	; (800236c <HAL_RCC_OscConfig+0x938>)
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	461a      	mov	r2, r3
 80020c6:	2301      	movs	r3, #1
 80020c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ca:	f7ff f94d 	bl	8001368 <HAL_GetTick>
 80020ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d4:	f7ff f948 	bl	8001368 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d902      	bls.n	80020ea <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	f000 bcdb 	b.w	8002aa0 <HAL_RCC_OscConfig+0x106c>
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80020fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002100:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002104:	2202      	movs	r2, #2
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	fa93 f2a3 	rbit	r2, r3
 8002116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002128:	2202      	movs	r2, #2
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	fa93 f2a3 	rbit	r2, r3
 800213a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002142:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002144:	4b88      	ldr	r3, [pc, #544]	; (8002368 <HAL_RCC_OscConfig+0x934>)
 8002146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002150:	2102      	movs	r1, #2
 8002152:	6019      	str	r1, [r3, #0]
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	fa93 f1a3 	rbit	r1, r3
 8002162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002166:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800216a:	6019      	str	r1, [r3, #0]
  return result;
 800216c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002170:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002180:	b2db      	uxtb	r3, r3
 8002182:	f003 031f 	and.w	r3, r3, #31
 8002186:	2101      	movs	r1, #1
 8002188:	fa01 f303 	lsl.w	r3, r1, r3
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0a0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x6a0>
 8002192:	e08d      	b.n	80022b0 <HAL_RCC_OscConfig+0x87c>
 8002194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002198:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800219c:	2201      	movs	r2, #1
 800219e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	fa93 f2a3 	rbit	r2, r3
 80021ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021b6:	601a      	str	r2, [r3, #0]
  return result;
 80021b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021c0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c2:	fab3 f383 	clz	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b68      	ldr	r3, [pc, #416]	; (800236c <HAL_RCC_OscConfig+0x938>)
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	461a      	mov	r2, r3
 80021d2:	2300      	movs	r3, #0
 80021d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d6:	f7ff f8c7 	bl	8001368 <HAL_GetTick>
 80021da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e0:	f7ff f8c2 	bl	8001368 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d902      	bls.n	80021f6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	f000 bc55 	b.w	8002aa0 <HAL_RCC_OscConfig+0x106c>
 80021f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021fe:	2202      	movs	r2, #2
 8002200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002206:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	fa93 f2a3 	rbit	r2, r3
 8002210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002214:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002222:	2202      	movs	r2, #2
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	fa93 f2a3 	rbit	r2, r3
 8002234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002238:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002242:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002246:	2202      	movs	r2, #2
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	fa93 f2a3 	rbit	r2, r3
 8002258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002260:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002262:	4b41      	ldr	r3, [pc, #260]	; (8002368 <HAL_RCC_OscConfig+0x934>)
 8002264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800226e:	2102      	movs	r1, #2
 8002270:	6019      	str	r1, [r3, #0]
 8002272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002276:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	fa93 f1a3 	rbit	r1, r3
 8002280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002284:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002288:	6019      	str	r1, [r3, #0]
  return result;
 800228a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	fab3 f383 	clz	r3, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	2101      	movs	r1, #1
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d197      	bne.n	80021e0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 81a1 	beq.w	8002608 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022cc:	4b26      	ldr	r3, [pc, #152]	; (8002368 <HAL_RCC_OscConfig+0x934>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d116      	bne.n	8002306 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d8:	4b23      	ldr	r3, [pc, #140]	; (8002368 <HAL_RCC_OscConfig+0x934>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	4a22      	ldr	r2, [pc, #136]	; (8002368 <HAL_RCC_OscConfig+0x934>)
 80022de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e2:	61d3      	str	r3, [r2, #28]
 80022e4:	4b20      	ldr	r3, [pc, #128]	; (8002368 <HAL_RCC_OscConfig+0x934>)
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80022ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80022fe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002300:	2301      	movs	r3, #1
 8002302:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002306:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <HAL_RCC_OscConfig+0x93c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d11a      	bne.n	8002348 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002312:	4b17      	ldr	r3, [pc, #92]	; (8002370 <HAL_RCC_OscConfig+0x93c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a16      	ldr	r2, [pc, #88]	; (8002370 <HAL_RCC_OscConfig+0x93c>)
 8002318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231e:	f7ff f823 	bl	8001368 <HAL_GetTick>
 8002322:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002326:	e009      	b.n	800233c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002328:	f7ff f81e 	bl	8001368 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b64      	cmp	r3, #100	; 0x64
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e3b1      	b.n	8002aa0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <HAL_RCC_OscConfig+0x93c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0ef      	beq.n	8002328 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d10d      	bne.n	8002374 <HAL_RCC_OscConfig+0x940>
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <HAL_RCC_OscConfig+0x934>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4a02      	ldr	r2, [pc, #8]	; (8002368 <HAL_RCC_OscConfig+0x934>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6213      	str	r3, [r2, #32]
 8002364:	e03c      	b.n	80023e0 <HAL_RCC_OscConfig+0x9ac>
 8002366:	bf00      	nop
 8002368:	40021000 	.word	0x40021000
 800236c:	10908120 	.word	0x10908120
 8002370:	40007000 	.word	0x40007000
 8002374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002378:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10c      	bne.n	800239e <HAL_RCC_OscConfig+0x96a>
 8002384:	4bc1      	ldr	r3, [pc, #772]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	4ac0      	ldr	r2, [pc, #768]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 800238a:	f023 0301 	bic.w	r3, r3, #1
 800238e:	6213      	str	r3, [r2, #32]
 8002390:	4bbe      	ldr	r3, [pc, #760]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	4abd      	ldr	r2, [pc, #756]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 8002396:	f023 0304 	bic.w	r3, r3, #4
 800239a:	6213      	str	r3, [r2, #32]
 800239c:	e020      	b.n	80023e0 <HAL_RCC_OscConfig+0x9ac>
 800239e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	2b05      	cmp	r3, #5
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x994>
 80023ae:	4bb7      	ldr	r3, [pc, #732]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4ab6      	ldr	r2, [pc, #728]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80023b4:	f043 0304 	orr.w	r3, r3, #4
 80023b8:	6213      	str	r3, [r2, #32]
 80023ba:	4bb4      	ldr	r3, [pc, #720]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4ab3      	ldr	r2, [pc, #716]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6213      	str	r3, [r2, #32]
 80023c6:	e00b      	b.n	80023e0 <HAL_RCC_OscConfig+0x9ac>
 80023c8:	4bb0      	ldr	r3, [pc, #704]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4aaf      	ldr	r2, [pc, #700]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80023ce:	f023 0301 	bic.w	r3, r3, #1
 80023d2:	6213      	str	r3, [r2, #32]
 80023d4:	4bad      	ldr	r3, [pc, #692]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4aac      	ldr	r2, [pc, #688]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80023da:	f023 0304 	bic.w	r3, r3, #4
 80023de:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 8081 	beq.w	80024f4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f2:	f7fe ffb9 	bl	8001368 <HAL_GetTick>
 80023f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fa:	e00b      	b.n	8002414 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023fc:	f7fe ffb4 	bl	8001368 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	f241 3288 	movw	r2, #5000	; 0x1388
 800240c:	4293      	cmp	r3, r2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e345      	b.n	8002aa0 <HAL_RCC_OscConfig+0x106c>
 8002414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002418:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800241c:	2202      	movs	r2, #2
 800241e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002424:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	fa93 f2a3 	rbit	r2, r3
 800242e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002432:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002440:	2202      	movs	r2, #2
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002448:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	fa93 f2a3 	rbit	r2, r3
 8002452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002456:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800245a:	601a      	str	r2, [r3, #0]
  return result;
 800245c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002460:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002464:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	095b      	lsrs	r3, r3, #5
 800246e:	b2db      	uxtb	r3, r3
 8002470:	f043 0302 	orr.w	r3, r3, #2
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d102      	bne.n	8002480 <HAL_RCC_OscConfig+0xa4c>
 800247a:	4b84      	ldr	r3, [pc, #528]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	e013      	b.n	80024a8 <HAL_RCC_OscConfig+0xa74>
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002488:	2202      	movs	r2, #2
 800248a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002490:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	fa93 f2a3 	rbit	r2, r3
 800249a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	4b79      	ldr	r3, [pc, #484]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80024b0:	2102      	movs	r1, #2
 80024b2:	6011      	str	r1, [r2, #0]
 80024b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	fa92 f1a2 	rbit	r1, r2
 80024c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024c6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80024ca:	6011      	str	r1, [r2, #0]
  return result;
 80024cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024d0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	fab2 f282 	clz	r2, r2
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	f002 021f 	and.w	r2, r2, #31
 80024e6:	2101      	movs	r1, #1
 80024e8:	fa01 f202 	lsl.w	r2, r1, r2
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d084      	beq.n	80023fc <HAL_RCC_OscConfig+0x9c8>
 80024f2:	e07f      	b.n	80025f4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f4:	f7fe ff38 	bl	8001368 <HAL_GetTick>
 80024f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fc:	e00b      	b.n	8002516 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7fe ff33 	bl	8001368 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	; 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e2c4      	b.n	8002aa0 <HAL_RCC_OscConfig+0x106c>
 8002516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800251e:	2202      	movs	r2, #2
 8002520:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002526:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	fa93 f2a3 	rbit	r2, r3
 8002530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002534:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002542:	2202      	movs	r2, #2
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	fa93 f2a3 	rbit	r2, r3
 8002554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002558:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800255c:	601a      	str	r2, [r3, #0]
  return result;
 800255e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002562:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002566:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002568:	fab3 f383 	clz	r3, r3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	095b      	lsrs	r3, r3, #5
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f043 0302 	orr.w	r3, r3, #2
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d102      	bne.n	8002582 <HAL_RCC_OscConfig+0xb4e>
 800257c:	4b43      	ldr	r3, [pc, #268]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	e013      	b.n	80025aa <HAL_RCC_OscConfig+0xb76>
 8002582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002586:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800258a:	2202      	movs	r2, #2
 800258c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002592:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	fa93 f2a3 	rbit	r2, r3
 800259c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	4b39      	ldr	r3, [pc, #228]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80025b2:	2102      	movs	r1, #2
 80025b4:	6011      	str	r1, [r2, #0]
 80025b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	fa92 f1a2 	rbit	r1, r2
 80025c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025c8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025cc:	6011      	str	r1, [r2, #0]
  return result;
 80025ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025d2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	fab2 f282 	clz	r2, r2
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	f002 021f 	and.w	r2, r2, #31
 80025e8:	2101      	movs	r1, #1
 80025ea:	fa01 f202 	lsl.w	r2, r1, r2
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d184      	bne.n	80024fe <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025f4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d105      	bne.n	8002608 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fc:	4b23      	ldr	r3, [pc, #140]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	4a22      	ldr	r2, [pc, #136]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 8002602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002606:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 8242 	beq.w	8002a9e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800261a:	4b1c      	ldr	r3, [pc, #112]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b08      	cmp	r3, #8
 8002624:	f000 8213 	beq.w	8002a4e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	2b02      	cmp	r3, #2
 8002636:	f040 8162 	bne.w	80028fe <HAL_RCC_OscConfig+0xeca>
 800263a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002642:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002646:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	fa93 f2a3 	rbit	r2, r3
 8002656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800265e:	601a      	str	r2, [r3, #0]
  return result;
 8002660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002664:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002668:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002674:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	461a      	mov	r2, r3
 800267c:	2300      	movs	r3, #0
 800267e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7fe fe72 	bl	8001368 <HAL_GetTick>
 8002684:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002688:	e00c      	b.n	80026a4 <HAL_RCC_OscConfig+0xc70>
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002690:	f7fe fe6a 	bl	8001368 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e1fd      	b.n	8002aa0 <HAL_RCC_OscConfig+0x106c>
 80026a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80026ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	fa93 f2a3 	rbit	r2, r3
 80026c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026c8:	601a      	str	r2, [r3, #0]
  return result;
 80026ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d4:	fab3 f383 	clz	r3, r3
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d102      	bne.n	80026ee <HAL_RCC_OscConfig+0xcba>
 80026e8:	4bb0      	ldr	r3, [pc, #704]	; (80029ac <HAL_RCC_OscConfig+0xf78>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	e027      	b.n	800273e <HAL_RCC_OscConfig+0xd0a>
 80026ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002700:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	fa93 f2a3 	rbit	r2, r3
 800270a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002718:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800271c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002726:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	fa93 f2a3 	rbit	r2, r3
 8002730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002734:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	4b9c      	ldr	r3, [pc, #624]	; (80029ac <HAL_RCC_OscConfig+0xf78>)
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002742:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002746:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800274a:	6011      	str	r1, [r2, #0]
 800274c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002750:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	fa92 f1a2 	rbit	r1, r2
 800275a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800275e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002762:	6011      	str	r1, [r2, #0]
  return result;
 8002764:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002768:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	fab2 f282 	clz	r2, r2
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	f042 0220 	orr.w	r2, r2, #32
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	f002 021f 	and.w	r2, r2, #31
 800277e:	2101      	movs	r1, #1
 8002780:	fa01 f202 	lsl.w	r2, r1, r2
 8002784:	4013      	ands	r3, r2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d182      	bne.n	8002690 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800278a:	4b88      	ldr	r3, [pc, #544]	; (80029ac <HAL_RCC_OscConfig+0xf78>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002796:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800279e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	430b      	orrs	r3, r1
 80027ac:	497f      	ldr	r1, [pc, #508]	; (80029ac <HAL_RCC_OscConfig+0xf78>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
 80027b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80027ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	fa93 f2a3 	rbit	r2, r3
 80027ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80027d6:	601a      	str	r2, [r3, #0]
  return result;
 80027d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027dc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80027e0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	461a      	mov	r2, r3
 80027f4:	2301      	movs	r3, #1
 80027f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe fdb6 	bl	8001368 <HAL_GetTick>
 80027fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002800:	e009      	b.n	8002816 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002802:	f7fe fdb1 	bl	8001368 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e144      	b.n	8002aa0 <HAL_RCC_OscConfig+0x106c>
 8002816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800281e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002822:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002828:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	fa93 f2a3 	rbit	r2, r3
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800283a:	601a      	str	r2, [r3, #0]
  return result;
 800283c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002840:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002844:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d102      	bne.n	8002860 <HAL_RCC_OscConfig+0xe2c>
 800285a:	4b54      	ldr	r3, [pc, #336]	; (80029ac <HAL_RCC_OscConfig+0xf78>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	e027      	b.n	80028b0 <HAL_RCC_OscConfig+0xe7c>
 8002860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002864:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002868:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800286c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002872:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	fa93 f2a3 	rbit	r2, r3
 800287c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002880:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800288e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002898:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	fa93 f2a3 	rbit	r2, r3
 80028a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	4b3f      	ldr	r3, [pc, #252]	; (80029ac <HAL_RCC_OscConfig+0xf78>)
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028b4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80028b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028bc:	6011      	str	r1, [r2, #0]
 80028be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028c2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	fa92 f1a2 	rbit	r1, r2
 80028cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028d0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80028d4:	6011      	str	r1, [r2, #0]
  return result;
 80028d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028da:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	fab2 f282 	clz	r2, r2
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	f042 0220 	orr.w	r2, r2, #32
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	f002 021f 	and.w	r2, r2, #31
 80028f0:	2101      	movs	r1, #1
 80028f2:	fa01 f202 	lsl.w	r2, r1, r2
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d082      	beq.n	8002802 <HAL_RCC_OscConfig+0xdce>
 80028fc:	e0cf      	b.n	8002a9e <HAL_RCC_OscConfig+0x106a>
 80028fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002902:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002906:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800290a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002910:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	fa93 f2a3 	rbit	r2, r3
 800291a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002922:	601a      	str	r2, [r3, #0]
  return result;
 8002924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002928:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800292c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002938:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	461a      	mov	r2, r3
 8002940:	2300      	movs	r3, #0
 8002942:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7fe fd10 	bl	8001368 <HAL_GetTick>
 8002948:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800294c:	e009      	b.n	8002962 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294e:	f7fe fd0b 	bl	8001368 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e09e      	b.n	8002aa0 <HAL_RCC_OscConfig+0x106c>
 8002962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002966:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800296a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800296e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002974:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	fa93 f2a3 	rbit	r2, r3
 800297e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002982:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002986:	601a      	str	r2, [r3, #0]
  return result;
 8002988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002990:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	095b      	lsrs	r3, r3, #5
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d104      	bne.n	80029b0 <HAL_RCC_OscConfig+0xf7c>
 80029a6:	4b01      	ldr	r3, [pc, #4]	; (80029ac <HAL_RCC_OscConfig+0xf78>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	e029      	b.n	8002a00 <HAL_RCC_OscConfig+0xfcc>
 80029ac:	40021000 	.word	0x40021000
 80029b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	fa93 f2a3 	rbit	r2, r3
 80029cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029da:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	fa93 f2a3 	rbit	r2, r3
 80029f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <HAL_RCC_OscConfig+0x1078>)
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a04:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a0c:	6011      	str	r1, [r2, #0]
 8002a0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a12:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	fa92 f1a2 	rbit	r1, r2
 8002a1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a20:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a24:	6011      	str	r1, [r2, #0]
  return result;
 8002a26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a2a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	fab2 f282 	clz	r2, r2
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	f042 0220 	orr.w	r2, r2, #32
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	f002 021f 	and.w	r2, r2, #31
 8002a40:	2101      	movs	r1, #1
 8002a42:	fa01 f202 	lsl.w	r2, r1, r2
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d180      	bne.n	800294e <HAL_RCC_OscConfig+0xf1a>
 8002a4c:	e027      	b.n	8002a9e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e01e      	b.n	8002aa0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a62:	4b12      	ldr	r3, [pc, #72]	; (8002aac <HAL_RCC_OscConfig+0x1078>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a6a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a6e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d10b      	bne.n	8002a9a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000

08002ab0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b09e      	sub	sp, #120	; 0x78
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e162      	b.n	8002d8e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b90      	ldr	r3, [pc, #576]	; (8002d0c <HAL_RCC_ClockConfig+0x25c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d910      	bls.n	8002af8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b8d      	ldr	r3, [pc, #564]	; (8002d0c <HAL_RCC_ClockConfig+0x25c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 0207 	bic.w	r2, r3, #7
 8002ade:	498b      	ldr	r1, [pc, #556]	; (8002d0c <HAL_RCC_ClockConfig+0x25c>)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	4b89      	ldr	r3, [pc, #548]	; (8002d0c <HAL_RCC_ClockConfig+0x25c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e14a      	b.n	8002d8e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b04:	4b82      	ldr	r3, [pc, #520]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	497f      	ldr	r1, [pc, #508]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80dc 	beq.w	8002cdc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d13c      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xf6>
 8002b2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b30:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3c:	fab3 f383 	clz	r3, r3
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d102      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xa6>
 8002b50:	4b6f      	ldr	r3, [pc, #444]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	e00f      	b.n	8002b76 <HAL_RCC_ClockConfig+0xc6>
 8002b56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	667b      	str	r3, [r7, #100]	; 0x64
 8002b64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b68:	663b      	str	r3, [r7, #96]	; 0x60
 8002b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b72:	4b67      	ldr	r3, [pc, #412]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b7a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b7e:	fa92 f2a2 	rbit	r2, r2
 8002b82:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002b84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b86:	fab2 f282 	clz	r2, r2
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	f042 0220 	orr.w	r2, r2, #32
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	f002 021f 	and.w	r2, r2, #31
 8002b96:	2101      	movs	r1, #1
 8002b98:	fa01 f202 	lsl.w	r2, r1, r2
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d17b      	bne.n	8002c9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e0f3      	b.n	8002d8e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d13c      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x178>
 8002bae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bb2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d102      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x128>
 8002bd2:	4b4f      	ldr	r3, [pc, #316]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	e00f      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x148>
 8002bd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bdc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	647b      	str	r3, [r7, #68]	; 0x44
 8002be6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bea:	643b      	str	r3, [r7, #64]	; 0x40
 8002bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bf4:	4b46      	ldr	r3, [pc, #280]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bfc:	63ba      	str	r2, [r7, #56]	; 0x38
 8002bfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c00:	fa92 f2a2 	rbit	r2, r2
 8002c04:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c08:	fab2 f282 	clz	r2, r2
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	f042 0220 	orr.w	r2, r2, #32
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	f002 021f 	and.w	r2, r2, #31
 8002c18:	2101      	movs	r1, #1
 8002c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d13a      	bne.n	8002c9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0b2      	b.n	8002d8e <HAL_RCC_ClockConfig+0x2de>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	095b      	lsrs	r3, r3, #5
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d102      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x1a0>
 8002c4a:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	e00d      	b.n	8002c6c <HAL_RCC_ClockConfig+0x1bc>
 8002c50:	2302      	movs	r3, #2
 8002c52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	623b      	str	r3, [r7, #32]
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	4b29      	ldr	r3, [pc, #164]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	61ba      	str	r2, [r7, #24]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	fa92 f2a2 	rbit	r2, r2
 8002c76:	617a      	str	r2, [r7, #20]
  return result;
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	fab2 f282 	clz	r2, r2
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	f042 0220 	orr.w	r2, r2, #32
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	f002 021f 	and.w	r2, r2, #31
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e079      	b.n	8002d8e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f023 0203 	bic.w	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	491a      	ldr	r1, [pc, #104]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cac:	f7fe fb5c 	bl	8001368 <HAL_GetTick>
 8002cb0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb4:	f7fe fb58 	bl	8001368 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e061      	b.n	8002d8e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 020c 	and.w	r2, r3, #12
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d1eb      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_ClockConfig+0x25c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d214      	bcs.n	8002d14 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <HAL_RCC_ClockConfig+0x25c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 0207 	bic.w	r2, r3, #7
 8002cf2:	4906      	ldr	r1, [pc, #24]	; (8002d0c <HAL_RCC_ClockConfig+0x25c>)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfa:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <HAL_RCC_ClockConfig+0x25c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d005      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e040      	b.n	8002d8e <HAL_RCC_ClockConfig+0x2de>
 8002d0c:	40022000 	.word	0x40022000
 8002d10:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d20:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <HAL_RCC_ClockConfig+0x2e8>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	491a      	ldr	r1, [pc, #104]	; (8002d98 <HAL_RCC_ClockConfig+0x2e8>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d3e:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <HAL_RCC_ClockConfig+0x2e8>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4912      	ldr	r1, [pc, #72]	; (8002d98 <HAL_RCC_ClockConfig+0x2e8>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d52:	f000 f829 	bl	8002da8 <HAL_RCC_GetSysClockFreq>
 8002d56:	4601      	mov	r1, r0
 8002d58:	4b0f      	ldr	r3, [pc, #60]	; (8002d98 <HAL_RCC_ClockConfig+0x2e8>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d60:	22f0      	movs	r2, #240	; 0xf0
 8002d62:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	fa92 f2a2 	rbit	r2, r2
 8002d6a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	fab2 f282 	clz	r2, r2
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	40d3      	lsrs	r3, r2
 8002d76:	4a09      	ldr	r2, [pc, #36]	; (8002d9c <HAL_RCC_ClockConfig+0x2ec>)
 8002d78:	5cd3      	ldrb	r3, [r2, r3]
 8002d7a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d7e:	4a08      	ldr	r2, [pc, #32]	; (8002da0 <HAL_RCC_ClockConfig+0x2f0>)
 8002d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d82:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <HAL_RCC_ClockConfig+0x2f4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe faaa 	bl	80012e0 <HAL_InitTick>
  
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3778      	adds	r7, #120	; 0x78
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	08006560 	.word	0x08006560
 8002da0:	20000000 	.word	0x20000000
 8002da4:	20000004 	.word	0x20000004

08002da8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b08b      	sub	sp, #44	; 0x2c
 8002dac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
 8002db6:	2300      	movs	r3, #0
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002dc2:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d002      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x30>
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d003      	beq.n	8002dde <HAL_RCC_GetSysClockFreq+0x36>
 8002dd6:	e03c      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dd8:	4b24      	ldr	r3, [pc, #144]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dda:	623b      	str	r3, [r7, #32]
      break;
 8002ddc:	e03c      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002de4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002de8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	fa92 f2a2 	rbit	r2, r2
 8002df0:	607a      	str	r2, [r7, #4]
  return result;
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	fab2 f282 	clz	r2, r2
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	40d3      	lsrs	r3, r2
 8002dfc:	4a1c      	ldr	r2, [pc, #112]	; (8002e70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002dfe:	5cd3      	ldrb	r3, [r2, r3]
 8002e00:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e02:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	fa92 f2a2 	rbit	r2, r2
 8002e14:	60fa      	str	r2, [r7, #12]
  return result;
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	fab2 f282 	clz	r2, r2
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	40d3      	lsrs	r3, r2
 8002e20:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e22:	5cd3      	ldrb	r3, [r2, r3]
 8002e24:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e30:	4a0e      	ldr	r2, [pc, #56]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	fb02 f303 	mul.w	r3, r2, r3
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e40:	e004      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	4a0c      	ldr	r2, [pc, #48]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e46:	fb02 f303 	mul.w	r3, r2, r3
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	623b      	str	r3, [r7, #32]
      break;
 8002e50:	e002      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e54:	623b      	str	r3, [r7, #32]
      break;
 8002e56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e58:	6a3b      	ldr	r3, [r7, #32]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	372c      	adds	r7, #44	; 0x2c
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	007a1200 	.word	0x007a1200
 8002e70:	08006578 	.word	0x08006578
 8002e74:	08006588 	.word	0x08006588
 8002e78:	003d0900 	.word	0x003d0900

08002e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000000 	.word	0x20000000

08002e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e9a:	f7ff ffef 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 8002e9e:	4601      	mov	r1, r0
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ea8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002eac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	fa92 f2a2 	rbit	r2, r2
 8002eb4:	603a      	str	r2, [r7, #0]
  return result;
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	fab2 f282 	clz	r2, r2
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	40d3      	lsrs	r3, r2
 8002ec0:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002ec2:	5cd3      	ldrb	r3, [r2, r3]
 8002ec4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	08006570 	.word	0x08006570

08002ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ede:	f7ff ffcd 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 8002ee2:	4601      	mov	r1, r0
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002eec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002ef0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	fa92 f2a2 	rbit	r2, r2
 8002ef8:	603a      	str	r2, [r7, #0]
  return result;
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	fab2 f282 	clz	r2, r2
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	40d3      	lsrs	r3, r2
 8002f04:	4a04      	ldr	r2, [pc, #16]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f06:	5cd3      	ldrb	r3, [r2, r3]
 8002f08:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021000 	.word	0x40021000
 8002f18:	08006570 	.word	0x08006570

08002f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b092      	sub	sp, #72	; 0x48
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80cd 	beq.w	80030da <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f40:	4b86      	ldr	r3, [pc, #536]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10e      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f4c:	4b83      	ldr	r3, [pc, #524]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	4a82      	ldr	r2, [pc, #520]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f56:	61d3      	str	r3, [r2, #28]
 8002f58:	4b80      	ldr	r3, [pc, #512]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f64:	2301      	movs	r3, #1
 8002f66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6a:	4b7d      	ldr	r3, [pc, #500]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d118      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f76:	4b7a      	ldr	r3, [pc, #488]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a79      	ldr	r2, [pc, #484]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f82:	f7fe f9f1 	bl	8001368 <HAL_GetTick>
 8002f86:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f88:	e008      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f8a:	f7fe f9ed 	bl	8001368 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b64      	cmp	r3, #100	; 0x64
 8002f96:	d901      	bls.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e0db      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9c:	4b70      	ldr	r3, [pc, #448]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fa8:	4b6c      	ldr	r3, [pc, #432]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d07d      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d076      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fc6:	4b65      	ldr	r3, [pc, #404]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fd4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	fa93 f3a3 	rbit	r3, r3
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fe0:	fab3 f383 	clz	r3, r3
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b5e      	ldr	r3, [pc, #376]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	461a      	mov	r2, r3
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ff8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003004:	fab3 f383 	clz	r3, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	461a      	mov	r2, r3
 800300c:	4b55      	ldr	r3, [pc, #340]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	461a      	mov	r2, r3
 8003014:	2300      	movs	r3, #0
 8003016:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003018:	4a50      	ldr	r2, [pc, #320]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800301a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800301e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d045      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fe f99e 	bl	8001368 <HAL_GetTick>
 800302c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302e:	e00a      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f7fe f99a 	bl	8001368 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	; 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e086      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003046:	2302      	movs	r3, #2
 8003048:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
 8003052:	2302      	movs	r3, #2
 8003054:	623b      	str	r3, [r7, #32]
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	fa93 f3a3 	rbit	r3, r3
 800305c:	61fb      	str	r3, [r7, #28]
  return result;
 800305e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003060:	fab3 f383 	clz	r3, r3
 8003064:	b2db      	uxtb	r3, r3
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f043 0302 	orr.w	r3, r3, #2
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d102      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003074:	4b39      	ldr	r3, [pc, #228]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	e007      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800307a:	2302      	movs	r3, #2
 800307c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	4b35      	ldr	r3, [pc, #212]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	2202      	movs	r2, #2
 800308c:	613a      	str	r2, [r7, #16]
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	fa92 f2a2 	rbit	r2, r2
 8003094:	60fa      	str	r2, [r7, #12]
  return result;
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	fab2 f282 	clz	r2, r2
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	f002 021f 	and.w	r2, r2, #31
 80030a8:	2101      	movs	r1, #1
 80030aa:	fa01 f202 	lsl.w	r2, r1, r2
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0bd      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80030b4:	4b29      	ldr	r3, [pc, #164]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4926      	ldr	r1, [pc, #152]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d105      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ce:	4b23      	ldr	r3, [pc, #140]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	4a22      	ldr	r2, [pc, #136]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d008      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030e6:	4b1d      	ldr	r3, [pc, #116]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	f023 0203 	bic.w	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	491a      	ldr	r1, [pc, #104]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003104:	4b15      	ldr	r3, [pc, #84]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	f023 0210 	bic.w	r2, r3, #16
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	4912      	ldr	r1, [pc, #72]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003112:	4313      	orrs	r3, r2
 8003114:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003122:	4b0e      	ldr	r3, [pc, #56]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	490b      	ldr	r1, [pc, #44]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003130:	4313      	orrs	r3, r2
 8003132:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003140:	4b06      	ldr	r3, [pc, #24]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003144:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	4903      	ldr	r1, [pc, #12]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800314e:	4313      	orrs	r3, r2
 8003150:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3748      	adds	r7, #72	; 0x48
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000
 8003160:	40007000 	.word	0x40007000
 8003164:	10908100 	.word	0x10908100

08003168 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e040      	b.n	80031fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd ff02 	bl	8000f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2224      	movs	r2, #36	; 0x24
 8003194:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fdd8 	bl	8003d5c <UART_SetConfig>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e022      	b.n	80031fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 ff02 	bl	8003fc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 ff89 	bl	800410c <UART_CheckIdleState>
 80031fa:	4603      	mov	r3, r0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e048      	b.n	80032a8 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fd feb4 	bl	8000f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2224      	movs	r2, #36	; 0x24
 8003230:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0201 	bic.w	r2, r2, #1
 8003240:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fd8a 	bl	8003d5c <UART_SetConfig>
 8003248:	4603      	mov	r3, r0
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e02a      	b.n	80032a8 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 feb4 	bl	8003fc8 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800326e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800327e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0208 	orr.w	r2, r2, #8
 800328e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 ff33 	bl	800410c <UART_CheckIdleState>
 80032a6:	4603      	mov	r3, r0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	f040 8082 	bne.w	80033ce <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HAL_UART_Transmit+0x26>
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e07a      	b.n	80033d0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_UART_Transmit+0x38>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e073      	b.n	80033d0 <HAL_UART_Transmit+0x120>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2221      	movs	r2, #33	; 0x21
 80032fc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032fe:	f7fe f833 	bl	8001368 <HAL_GetTick>
 8003302:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	88fa      	ldrh	r2, [r7, #6]
 8003308:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	88fa      	ldrh	r2, [r7, #6]
 8003310:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331c:	d108      	bne.n	8003330 <HAL_UART_Transmit+0x80>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d104      	bne.n	8003330 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	61bb      	str	r3, [r7, #24]
 800332e:	e003      	b.n	8003338 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003334:	2300      	movs	r3, #0
 8003336:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003340:	e02d      	b.n	800339e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2200      	movs	r2, #0
 800334a:	2180      	movs	r1, #128	; 0x80
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 ff26 	bl	800419e <UART_WaitOnFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e039      	b.n	80033d0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10b      	bne.n	800337a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	881a      	ldrh	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800336e:	b292      	uxth	r2, r2
 8003370:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	3302      	adds	r3, #2
 8003376:	61bb      	str	r3, [r7, #24]
 8003378:	e008      	b.n	800338c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	781a      	ldrb	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	b292      	uxth	r2, r2
 8003384:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	3301      	adds	r3, #1
 800338a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1cb      	bne.n	8003342 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2200      	movs	r2, #0
 80033b2:	2140      	movs	r1, #64	; 0x40
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 fef2 	bl	800419e <UART_WaitOnFlagUntilTimeout>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e005      	b.n	80033d0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e000      	b.n	80033d0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80033ce:	2302      	movs	r3, #2
  }
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3720      	adds	r7, #32
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	; 0x28
 80033dc:	af02      	add	r7, sp, #8
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	4613      	mov	r3, r2
 80033e6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ec:	2b20      	cmp	r3, #32
 80033ee:	f040 80bf 	bne.w	8003570 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <HAL_UART_Receive+0x26>
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e0b7      	b.n	8003572 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_UART_Receive+0x38>
 800340c:	2302      	movs	r3, #2
 800340e:	e0b0      	b.n	8003572 <HAL_UART_Receive+0x19a>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2222      	movs	r2, #34	; 0x22
 8003424:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800342c:	f7fd ff9c 	bl	8001368 <HAL_GetTick>
 8003430:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	88fa      	ldrh	r2, [r7, #6]
 8003436:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	88fa      	ldrh	r2, [r7, #6]
 800343e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344a:	d10e      	bne.n	800346a <HAL_UART_Receive+0x92>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <HAL_UART_Receive+0x88>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f240 12ff 	movw	r2, #511	; 0x1ff
 800345a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800345e:	e02d      	b.n	80034bc <HAL_UART_Receive+0xe4>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	22ff      	movs	r2, #255	; 0xff
 8003464:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003468:	e028      	b.n	80034bc <HAL_UART_Receive+0xe4>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10d      	bne.n	800348e <HAL_UART_Receive+0xb6>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d104      	bne.n	8003484 <HAL_UART_Receive+0xac>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	22ff      	movs	r2, #255	; 0xff
 800347e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003482:	e01b      	b.n	80034bc <HAL_UART_Receive+0xe4>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	227f      	movs	r2, #127	; 0x7f
 8003488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800348c:	e016      	b.n	80034bc <HAL_UART_Receive+0xe4>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003496:	d10d      	bne.n	80034b4 <HAL_UART_Receive+0xdc>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d104      	bne.n	80034aa <HAL_UART_Receive+0xd2>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	227f      	movs	r2, #127	; 0x7f
 80034a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034a8:	e008      	b.n	80034bc <HAL_UART_Receive+0xe4>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	223f      	movs	r2, #63	; 0x3f
 80034ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034b2:	e003      	b.n	80034bc <HAL_UART_Receive+0xe4>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80034c2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034cc:	d108      	bne.n	80034e0 <HAL_UART_Receive+0x108>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d104      	bne.n	80034e0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	e003      	b.n	80034e8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80034f0:	e033      	b.n	800355a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2200      	movs	r2, #0
 80034fa:	2120      	movs	r1, #32
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 fe4e 	bl	800419e <UART_WaitOnFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e032      	b.n	8003572 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10c      	bne.n	800352c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003518:	b29a      	uxth	r2, r3
 800351a:	8a7b      	ldrh	r3, [r7, #18]
 800351c:	4013      	ands	r3, r2
 800351e:	b29a      	uxth	r2, r3
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	3302      	adds	r3, #2
 8003528:	61bb      	str	r3, [r7, #24]
 800352a:	e00d      	b.n	8003548 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003532:	b29b      	uxth	r3, r3
 8003534:	b2da      	uxtb	r2, r3
 8003536:	8a7b      	ldrh	r3, [r7, #18]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	4013      	ands	r3, r2
 800353c:	b2da      	uxtb	r2, r3
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3301      	adds	r3, #1
 8003546:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1c5      	bne.n	80034f2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	e000      	b.n	8003572 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003570:	2302      	movs	r3, #2
  }
}
 8003572:	4618      	mov	r0, r3
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b08a      	sub	sp, #40	; 0x28
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	4613      	mov	r3, r2
 8003586:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800358c:	2b20      	cmp	r3, #32
 800358e:	d13d      	bne.n	800360c <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_UART_Receive_IT+0x22>
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e036      	b.n	800360e <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_UART_Receive_IT+0x34>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e02f      	b.n	800360e <HAL_UART_Receive_IT+0x94>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d018      	beq.n	80035fc <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	e853 3f00 	ldrex	r3, [r3]
 80035d6:	613b      	str	r3, [r7, #16]
   return(result);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	461a      	mov	r2, r3
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	623b      	str	r3, [r7, #32]
 80035ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ec:	69f9      	ldr	r1, [r7, #28]
 80035ee:	6a3a      	ldr	r2, [r7, #32]
 80035f0:	e841 2300 	strex	r3, r2, [r1]
 80035f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e6      	bne.n	80035ca <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035fc:	88fb      	ldrh	r3, [r7, #6]
 80035fe:	461a      	mov	r2, r3
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 fe90 	bl	8004328 <UART_Start_Receive_IT>
 8003608:	4603      	mov	r3, r0
 800360a:	e000      	b.n	800360e <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800360c:	2302      	movs	r3, #2
  }
}
 800360e:	4618      	mov	r0, r3
 8003610:	3728      	adds	r7, #40	; 0x28
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b0ba      	sub	sp, #232	; 0xe8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800363e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003642:	f640 030f 	movw	r3, #2063	; 0x80f
 8003646:	4013      	ands	r3, r2
 8003648:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800364c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d115      	bne.n	8003680 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00f      	beq.n	8003680 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b00      	cmp	r3, #0
 800366a:	d009      	beq.n	8003680 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 82a3 	beq.w	8003bbc <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
      }
      return;
 800367e:	e29d      	b.n	8003bbc <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003680:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 8117 	beq.w	80038b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800368a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d106      	bne.n	80036a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003696:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800369a:	4b85      	ldr	r3, [pc, #532]	; (80038b0 <HAL_UART_IRQHandler+0x298>)
 800369c:	4013      	ands	r3, r2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 810a 	beq.w	80038b8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d011      	beq.n	80036d4 <HAL_UART_IRQHandler+0xbc>
 80036b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00b      	beq.n	80036d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2201      	movs	r2, #1
 80036c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ca:	f043 0201 	orr.w	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d011      	beq.n	8003704 <HAL_UART_IRQHandler+0xec>
 80036e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00b      	beq.n	8003704 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2202      	movs	r2, #2
 80036f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036fa:	f043 0204 	orr.w	r2, r3, #4
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d011      	beq.n	8003734 <HAL_UART_IRQHandler+0x11c>
 8003710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00b      	beq.n	8003734 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2204      	movs	r2, #4
 8003722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800372a:	f043 0202 	orr.w	r2, r3, #2
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b00      	cmp	r3, #0
 800373e:	d017      	beq.n	8003770 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d105      	bne.n	8003758 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800374c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003750:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00b      	beq.n	8003770 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2208      	movs	r2, #8
 800375e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003766:	f043 0208 	orr.w	r2, r3, #8
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003778:	2b00      	cmp	r3, #0
 800377a:	d012      	beq.n	80037a2 <HAL_UART_IRQHandler+0x18a>
 800377c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003780:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00c      	beq.n	80037a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003790:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003798:	f043 0220 	orr.w	r2, r3, #32
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 8209 	beq.w	8003bc0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00d      	beq.n	80037d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ea:	2b40      	cmp	r3, #64	; 0x40
 80037ec:	d005      	beq.n	80037fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d04f      	beq.n	800389a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fe40 	bl	8004480 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380a:	2b40      	cmp	r3, #64	; 0x40
 800380c:	d141      	bne.n	8003892 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3308      	adds	r3, #8
 8003814:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800381c:	e853 3f00 	ldrex	r3, [r3]
 8003820:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003824:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800382c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3308      	adds	r3, #8
 8003836:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800383a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800383e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003842:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003846:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800384a:	e841 2300 	strex	r3, r2, [r1]
 800384e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003852:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1d9      	bne.n	800380e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385e:	2b00      	cmp	r3, #0
 8003860:	d013      	beq.n	800388a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	4a13      	ldr	r2, [pc, #76]	; (80038b4 <HAL_UART_IRQHandler+0x29c>)
 8003868:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	4618      	mov	r0, r3
 8003870:	f7fd fef4 	bl	800165c <HAL_DMA_Abort_IT>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d017      	beq.n	80038aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003884:	4610      	mov	r0, r2
 8003886:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003888:	e00f      	b.n	80038aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f9ac 	bl	8003be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003890:	e00b      	b.n	80038aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f9a8 	bl	8003be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003898:	e007      	b.n	80038aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f9a4 	bl	8003be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80038a8:	e18a      	b.n	8003bc0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038aa:	bf00      	nop
    return;
 80038ac:	e188      	b.n	8003bc0 <HAL_UART_IRQHandler+0x5a8>
 80038ae:	bf00      	nop
 80038b0:	04000120 	.word	0x04000120
 80038b4:	08004547 	.word	0x08004547

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038bc:	2b01      	cmp	r3, #1
 80038be:	f040 8143 	bne.w	8003b48 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80038c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c6:	f003 0310 	and.w	r3, r3, #16
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 813c 	beq.w	8003b48 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8135 	beq.w	8003b48 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2210      	movs	r2, #16
 80038e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	f040 80b1 	bne.w	8003a58 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003902:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 815c 	beq.w	8003bc4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003912:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003916:	429a      	cmp	r2, r3
 8003918:	f080 8154 	bcs.w	8003bc4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003922:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	2b20      	cmp	r3, #32
 800392e:	f000 8085 	beq.w	8003a3c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800393e:	e853 3f00 	ldrex	r3, [r3]
 8003942:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003946:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800394a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800394e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800395c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003960:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003964:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003968:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800396c:	e841 2300 	strex	r3, r2, [r1]
 8003970:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003974:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1da      	bne.n	8003932 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3308      	adds	r3, #8
 8003982:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003986:	e853 3f00 	ldrex	r3, [r3]
 800398a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800398c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800398e:	f023 0301 	bic.w	r3, r3, #1
 8003992:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	3308      	adds	r3, #8
 800399c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039a0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039a4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039ac:	e841 2300 	strex	r3, r2, [r1]
 80039b0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e1      	bne.n	800397c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3308      	adds	r3, #8
 80039be:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039c2:	e853 3f00 	ldrex	r3, [r3]
 80039c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3308      	adds	r3, #8
 80039d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039dc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039e4:	e841 2300 	strex	r3, r2, [r1]
 80039e8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1e3      	bne.n	80039b8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a0c:	f023 0310 	bic.w	r3, r3, #16
 8003a10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a26:	e841 2300 	strex	r3, r2, [r1]
 8003a2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1e4      	bne.n	80039fc <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fd fdd7 	bl	80015ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	4619      	mov	r1, r3
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f8d3 	bl	8003bfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a56:	e0b5      	b.n	8003bc4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80a7 	beq.w	8003bc8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003a7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 80a2 	beq.w	8003bc8 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8c:	e853 3f00 	ldrex	r3, [r3]
 8003a90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8003aa8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003aac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e4      	bne.n	8003a84 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3308      	adds	r3, #8
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	623b      	str	r3, [r7, #32]
   return(result);
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	f023 0301 	bic.w	r3, r3, #1
 8003ad0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3308      	adds	r3, #8
 8003ada:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ade:	633a      	str	r2, [r7, #48]	; 0x30
 8003ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e3      	bne.n	8003aba <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2220      	movs	r2, #32
 8003af6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	e853 3f00 	ldrex	r3, [r3]
 8003b10:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f023 0310 	bic.w	r3, r3, #16
 8003b18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2a:	69b9      	ldr	r1, [r7, #24]
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	617b      	str	r3, [r7, #20]
   return(result);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1e4      	bne.n	8003b04 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b3e:	4619      	mov	r1, r3
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f85b 	bl	8003bfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b46:	e03f      	b.n	8003bc8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00e      	beq.n	8003b72 <HAL_UART_IRQHandler+0x55a>
 8003b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fe87 	bl	800487e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b70:	e02d      	b.n	8003bce <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00e      	beq.n	8003b9c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d008      	beq.n	8003b9c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d01c      	beq.n	8003bcc <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	4798      	blx	r3
    }
    return;
 8003b9a:	e017      	b.n	8003bcc <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d012      	beq.n	8003bce <HAL_UART_IRQHandler+0x5b6>
 8003ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00c      	beq.n	8003bce <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fcdc 	bl	8004572 <UART_EndTransmit_IT>
    return;
 8003bba:	e008      	b.n	8003bce <HAL_UART_IRQHandler+0x5b6>
      return;
 8003bbc:	bf00      	nop
 8003bbe:	e006      	b.n	8003bce <HAL_UART_IRQHandler+0x5b6>
    return;
 8003bc0:	bf00      	nop
 8003bc2:	e004      	b.n	8003bce <HAL_UART_IRQHandler+0x5b6>
      return;
 8003bc4:	bf00      	nop
 8003bc6:	e002      	b.n	8003bce <HAL_UART_IRQHandler+0x5b6>
      return;
 8003bc8:	bf00      	nop
 8003bca:	e000      	b.n	8003bce <HAL_UART_IRQHandler+0x5b6>
    return;
 8003bcc:	bf00      	nop
  }

}
 8003bce:	37e8      	adds	r7, #232	; 0xe8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b08f      	sub	sp, #60	; 0x3c
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_HalfDuplex_EnableTransmitter+0x16>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e040      	b.n	8003cac <HAL_HalfDuplex_EnableTransmitter+0x98>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2224      	movs	r2, #36	; 0x24
 8003c36:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f023 030c 	bic.w	r3, r3, #12
 8003c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c58:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e6      	bne.n	8003c38 <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	e853 3f00 	ldrex	r3, [r3]
 8003c76:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f043 0308 	orr.w	r3, r3, #8
 8003c7e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	61bb      	str	r3, [r7, #24]
 8003c8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	6979      	ldr	r1, [r7, #20]
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	613b      	str	r3, [r7, #16]
   return(result);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e6      	bne.n	8003c6a <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	373c      	adds	r7, #60	; 0x3c
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b08f      	sub	sp, #60	; 0x3c
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d101      	bne.n	8003cce <HAL_HalfDuplex_EnableReceiver+0x16>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e040      	b.n	8003d50 <HAL_HalfDuplex_EnableReceiver+0x98>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2224      	movs	r2, #36	; 0x24
 8003cda:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	f023 030c 	bic.w	r3, r3, #12
 8003cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cfc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e6      	bne.n	8003cdc <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	e853 3f00 	ldrex	r3, [r3]
 8003d1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f043 0304 	orr.w	r3, r3, #4
 8003d22:	633b      	str	r3, [r7, #48]	; 0x30
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d30:	6979      	ldr	r1, [r7, #20]
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	e841 2300 	strex	r3, r2, [r1]
 8003d38:	613b      	str	r3, [r7, #16]
   return(result);
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e6      	bne.n	8003d0e <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	373c      	adds	r7, #60	; 0x3c
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	4b8a      	ldr	r3, [pc, #552]	; (8003fb0 <UART_SetConfig+0x254>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6812      	ldr	r2, [r2, #0]
 8003d8e:	6979      	ldr	r1, [r7, #20]
 8003d90:	430b      	orrs	r3, r1
 8003d92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a78      	ldr	r2, [pc, #480]	; (8003fb4 <UART_SetConfig+0x258>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d120      	bne.n	8003e1a <UART_SetConfig+0xbe>
 8003dd8:	4b77      	ldr	r3, [pc, #476]	; (8003fb8 <UART_SetConfig+0x25c>)
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	f003 0303 	and.w	r3, r3, #3
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d817      	bhi.n	8003e14 <UART_SetConfig+0xb8>
 8003de4:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <UART_SetConfig+0x90>)
 8003de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dea:	bf00      	nop
 8003dec:	08003dfd 	.word	0x08003dfd
 8003df0:	08003e09 	.word	0x08003e09
 8003df4:	08003e0f 	.word	0x08003e0f
 8003df8:	08003e03 	.word	0x08003e03
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	77fb      	strb	r3, [r7, #31]
 8003e00:	e01d      	b.n	8003e3e <UART_SetConfig+0xe2>
 8003e02:	2302      	movs	r3, #2
 8003e04:	77fb      	strb	r3, [r7, #31]
 8003e06:	e01a      	b.n	8003e3e <UART_SetConfig+0xe2>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	77fb      	strb	r3, [r7, #31]
 8003e0c:	e017      	b.n	8003e3e <UART_SetConfig+0xe2>
 8003e0e:	2308      	movs	r3, #8
 8003e10:	77fb      	strb	r3, [r7, #31]
 8003e12:	e014      	b.n	8003e3e <UART_SetConfig+0xe2>
 8003e14:	2310      	movs	r3, #16
 8003e16:	77fb      	strb	r3, [r7, #31]
 8003e18:	e011      	b.n	8003e3e <UART_SetConfig+0xe2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a67      	ldr	r2, [pc, #412]	; (8003fbc <UART_SetConfig+0x260>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d102      	bne.n	8003e2a <UART_SetConfig+0xce>
 8003e24:	2300      	movs	r3, #0
 8003e26:	77fb      	strb	r3, [r7, #31]
 8003e28:	e009      	b.n	8003e3e <UART_SetConfig+0xe2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a64      	ldr	r2, [pc, #400]	; (8003fc0 <UART_SetConfig+0x264>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d102      	bne.n	8003e3a <UART_SetConfig+0xde>
 8003e34:	2300      	movs	r3, #0
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	e001      	b.n	8003e3e <UART_SetConfig+0xe2>
 8003e3a:	2310      	movs	r3, #16
 8003e3c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e46:	d15b      	bne.n	8003f00 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003e48:	7ffb      	ldrb	r3, [r7, #31]
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d827      	bhi.n	8003e9e <UART_SetConfig+0x142>
 8003e4e:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <UART_SetConfig+0xf8>)
 8003e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e54:	08003e79 	.word	0x08003e79
 8003e58:	08003e81 	.word	0x08003e81
 8003e5c:	08003e89 	.word	0x08003e89
 8003e60:	08003e9f 	.word	0x08003e9f
 8003e64:	08003e8f 	.word	0x08003e8f
 8003e68:	08003e9f 	.word	0x08003e9f
 8003e6c:	08003e9f 	.word	0x08003e9f
 8003e70:	08003e9f 	.word	0x08003e9f
 8003e74:	08003e97 	.word	0x08003e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e78:	f7ff f80c 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8003e7c:	61b8      	str	r0, [r7, #24]
        break;
 8003e7e:	e013      	b.n	8003ea8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e80:	f7ff f82a 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 8003e84:	61b8      	str	r0, [r7, #24]
        break;
 8003e86:	e00f      	b.n	8003ea8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e88:	4b4e      	ldr	r3, [pc, #312]	; (8003fc4 <UART_SetConfig+0x268>)
 8003e8a:	61bb      	str	r3, [r7, #24]
        break;
 8003e8c:	e00c      	b.n	8003ea8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e8e:	f7fe ff8b 	bl	8002da8 <HAL_RCC_GetSysClockFreq>
 8003e92:	61b8      	str	r0, [r7, #24]
        break;
 8003e94:	e008      	b.n	8003ea8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e9a:	61bb      	str	r3, [r7, #24]
        break;
 8003e9c:	e004      	b.n	8003ea8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	77bb      	strb	r3, [r7, #30]
        break;
 8003ea6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d074      	beq.n	8003f98 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	005a      	lsls	r2, r3, #1
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	085b      	lsrs	r3, r3, #1
 8003eb8:	441a      	add	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	2b0f      	cmp	r3, #15
 8003eca:	d916      	bls.n	8003efa <UART_SetConfig+0x19e>
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed2:	d212      	bcs.n	8003efa <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f023 030f 	bic.w	r3, r3, #15
 8003edc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	085b      	lsrs	r3, r3, #1
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	89fb      	ldrh	r3, [r7, #14]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	89fa      	ldrh	r2, [r7, #14]
 8003ef6:	60da      	str	r2, [r3, #12]
 8003ef8:	e04e      	b.n	8003f98 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	77bb      	strb	r3, [r7, #30]
 8003efe:	e04b      	b.n	8003f98 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f00:	7ffb      	ldrb	r3, [r7, #31]
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d827      	bhi.n	8003f56 <UART_SetConfig+0x1fa>
 8003f06:	a201      	add	r2, pc, #4	; (adr r2, 8003f0c <UART_SetConfig+0x1b0>)
 8003f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0c:	08003f31 	.word	0x08003f31
 8003f10:	08003f39 	.word	0x08003f39
 8003f14:	08003f41 	.word	0x08003f41
 8003f18:	08003f57 	.word	0x08003f57
 8003f1c:	08003f47 	.word	0x08003f47
 8003f20:	08003f57 	.word	0x08003f57
 8003f24:	08003f57 	.word	0x08003f57
 8003f28:	08003f57 	.word	0x08003f57
 8003f2c:	08003f4f 	.word	0x08003f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f30:	f7fe ffb0 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8003f34:	61b8      	str	r0, [r7, #24]
        break;
 8003f36:	e013      	b.n	8003f60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f38:	f7fe ffce 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 8003f3c:	61b8      	str	r0, [r7, #24]
        break;
 8003f3e:	e00f      	b.n	8003f60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f40:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <UART_SetConfig+0x268>)
 8003f42:	61bb      	str	r3, [r7, #24]
        break;
 8003f44:	e00c      	b.n	8003f60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f46:	f7fe ff2f 	bl	8002da8 <HAL_RCC_GetSysClockFreq>
 8003f4a:	61b8      	str	r0, [r7, #24]
        break;
 8003f4c:	e008      	b.n	8003f60 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f52:	61bb      	str	r3, [r7, #24]
        break;
 8003f54:	e004      	b.n	8003f60 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	77bb      	strb	r3, [r7, #30]
        break;
 8003f5e:	bf00      	nop
    }

    if (pclk != 0U)
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d018      	beq.n	8003f98 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	085a      	lsrs	r2, r3, #1
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	441a      	add	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	2b0f      	cmp	r3, #15
 8003f80:	d908      	bls.n	8003f94 <UART_SetConfig+0x238>
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f88:	d204      	bcs.n	8003f94 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	60da      	str	r2, [r3, #12]
 8003f92:	e001      	b.n	8003f98 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003fa4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	efff69f3 	.word	0xefff69f3
 8003fb4:	40013800 	.word	0x40013800
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40004400 	.word	0x40004400
 8003fc0:	40004800 	.word	0x40004800
 8003fc4:	007a1200 	.word	0x007a1200

08003fc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01a      	beq.n	80040de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040c6:	d10a      	bne.n	80040de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	605a      	str	r2, [r3, #4]
  }
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af02      	add	r7, sp, #8
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800411c:	f7fd f924 	bl	8001368 <HAL_GetTick>
 8004120:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b08      	cmp	r3, #8
 800412e:	d10e      	bne.n	800414e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004130:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f82d 	bl	800419e <UART_WaitOnFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e023      	b.n	8004196 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b04      	cmp	r3, #4
 800415a:	d10e      	bne.n	800417a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800415c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f817 	bl	800419e <UART_WaitOnFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e00d      	b.n	8004196 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2220      	movs	r2, #32
 8004184:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b09c      	sub	sp, #112	; 0x70
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	603b      	str	r3, [r7, #0]
 80041aa:	4613      	mov	r3, r2
 80041ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ae:	e0a5      	b.n	80042fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041b6:	f000 80a1 	beq.w	80042fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ba:	f7fd f8d5 	bl	8001368 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d302      	bcc.n	80041d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80041ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d13e      	bne.n	800424e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041e4:	667b      	str	r3, [r7, #100]	; 0x64
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80041fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e6      	bne.n	80041d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3308      	adds	r3, #8
 8004208:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	663b      	str	r3, [r7, #96]	; 0x60
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3308      	adds	r3, #8
 8004220:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004222:	64ba      	str	r2, [r7, #72]	; 0x48
 8004224:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004228:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e5      	bne.n	8004202 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2220      	movs	r2, #32
 800423a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2220      	movs	r2, #32
 8004240:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e067      	b.n	800431e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d04f      	beq.n	80042fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800426a:	d147      	bne.n	80042fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004274:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800428a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004294:	637b      	str	r3, [r7, #52]	; 0x34
 8004296:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800429a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800429c:	e841 2300 	strex	r3, r2, [r1]
 80042a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e6      	bne.n	8004276 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3308      	adds	r3, #8
 80042ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	e853 3f00 	ldrex	r3, [r3]
 80042b6:	613b      	str	r3, [r7, #16]
   return(result);
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f023 0301 	bic.w	r3, r3, #1
 80042be:	66bb      	str	r3, [r7, #104]	; 0x68
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3308      	adds	r3, #8
 80042c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042c8:	623a      	str	r2, [r7, #32]
 80042ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042cc:	69f9      	ldr	r1, [r7, #28]
 80042ce:	6a3a      	ldr	r2, [r7, #32]
 80042d0:	e841 2300 	strex	r3, r2, [r1]
 80042d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e5      	bne.n	80042a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e010      	b.n	800431e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69da      	ldr	r2, [r3, #28]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	4013      	ands	r3, r2
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	429a      	cmp	r2, r3
 800430a:	bf0c      	ite	eq
 800430c:	2301      	moveq	r3, #1
 800430e:	2300      	movne	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	461a      	mov	r2, r3
 8004314:	79fb      	ldrb	r3, [r7, #7]
 8004316:	429a      	cmp	r2, r3
 8004318:	f43f af4a 	beq.w	80041b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3770      	adds	r7, #112	; 0x70
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004328:	b480      	push	{r7}
 800432a:	b091      	sub	sp, #68	; 0x44
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	4613      	mov	r3, r2
 8004334:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	88fa      	ldrh	r2, [r7, #6]
 8004340:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	88fa      	ldrh	r2, [r7, #6]
 8004348:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435a:	d10e      	bne.n	800437a <UART_Start_Receive_IT+0x52>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d105      	bne.n	8004370 <UART_Start_Receive_IT+0x48>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f240 12ff 	movw	r2, #511	; 0x1ff
 800436a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800436e:	e02d      	b.n	80043cc <UART_Start_Receive_IT+0xa4>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	22ff      	movs	r2, #255	; 0xff
 8004374:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004378:	e028      	b.n	80043cc <UART_Start_Receive_IT+0xa4>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10d      	bne.n	800439e <UART_Start_Receive_IT+0x76>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d104      	bne.n	8004394 <UART_Start_Receive_IT+0x6c>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	22ff      	movs	r2, #255	; 0xff
 800438e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004392:	e01b      	b.n	80043cc <UART_Start_Receive_IT+0xa4>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	227f      	movs	r2, #127	; 0x7f
 8004398:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800439c:	e016      	b.n	80043cc <UART_Start_Receive_IT+0xa4>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043a6:	d10d      	bne.n	80043c4 <UART_Start_Receive_IT+0x9c>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d104      	bne.n	80043ba <UART_Start_Receive_IT+0x92>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	227f      	movs	r2, #127	; 0x7f
 80043b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043b8:	e008      	b.n	80043cc <UART_Start_Receive_IT+0xa4>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	223f      	movs	r2, #63	; 0x3f
 80043be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043c2:	e003      	b.n	80043cc <UART_Start_Receive_IT+0xa4>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2222      	movs	r2, #34	; 0x22
 80043d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3308      	adds	r3, #8
 80043e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e4:	e853 3f00 	ldrex	r3, [r3]
 80043e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3308      	adds	r3, #8
 80043f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043fa:	637a      	str	r2, [r7, #52]	; 0x34
 80043fc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004402:	e841 2300 	strex	r3, r2, [r1]
 8004406:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1e5      	bne.n	80043da <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004416:	d107      	bne.n	8004428 <UART_Start_Receive_IT+0x100>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d103      	bne.n	8004428 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4a15      	ldr	r2, [pc, #84]	; (8004478 <UART_Start_Receive_IT+0x150>)
 8004424:	665a      	str	r2, [r3, #100]	; 0x64
 8004426:	e002      	b.n	800442e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4a14      	ldr	r2, [pc, #80]	; (800447c <UART_Start_Receive_IT+0x154>)
 800442c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	e853 3f00 	ldrex	r3, [r3]
 8004442:	613b      	str	r3, [r7, #16]
   return(result);
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800444a:	63bb      	str	r3, [r7, #56]	; 0x38
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	461a      	mov	r2, r3
 8004452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004454:	623b      	str	r3, [r7, #32]
 8004456:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004458:	69f9      	ldr	r1, [r7, #28]
 800445a:	6a3a      	ldr	r2, [r7, #32]
 800445c:	e841 2300 	strex	r3, r2, [r1]
 8004460:	61bb      	str	r3, [r7, #24]
   return(result);
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1e6      	bne.n	8004436 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3744      	adds	r7, #68	; 0x44
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	08004723 	.word	0x08004723
 800447c:	080045c7 	.word	0x080045c7

08004480 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004480:	b480      	push	{r7}
 8004482:	b095      	sub	sp, #84	; 0x54
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004490:	e853 3f00 	ldrex	r3, [r3]
 8004494:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800449c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a6:	643b      	str	r3, [r7, #64]	; 0x40
 80044a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044ae:	e841 2300 	strex	r3, r2, [r1]
 80044b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1e6      	bne.n	8004488 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3308      	adds	r3, #8
 80044c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	e853 3f00 	ldrex	r3, [r3]
 80044c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	f023 0301 	bic.w	r3, r3, #1
 80044d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3308      	adds	r3, #8
 80044d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e2:	e841 2300 	strex	r3, r2, [r1]
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1e5      	bne.n	80044ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d118      	bne.n	8004528 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	e853 3f00 	ldrex	r3, [r3]
 8004502:	60bb      	str	r3, [r7, #8]
   return(result);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f023 0310 	bic.w	r3, r3, #16
 800450a:	647b      	str	r3, [r7, #68]	; 0x44
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	461a      	mov	r2, r3
 8004512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004514:	61bb      	str	r3, [r7, #24]
 8004516:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004518:	6979      	ldr	r1, [r7, #20]
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	e841 2300 	strex	r3, r2, [r1]
 8004520:	613b      	str	r3, [r7, #16]
   return(result);
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e6      	bne.n	80044f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	665a      	str	r2, [r3, #100]	; 0x64
}
 800453a:	bf00      	nop
 800453c:	3754      	adds	r7, #84	; 0x54
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f7ff fb3f 	bl	8003be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b088      	sub	sp, #32
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	60bb      	str	r3, [r7, #8]
   return(result);
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800458e:	61fb      	str	r3, [r7, #28]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	461a      	mov	r2, r3
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	6979      	ldr	r1, [r7, #20]
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	613b      	str	r3, [r7, #16]
   return(result);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e6      	bne.n	800457a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff fb0b 	bl	8003bd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045be:	bf00      	nop
 80045c0:	3720      	adds	r7, #32
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b096      	sub	sp, #88	; 0x58
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80045d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045dc:	2b22      	cmp	r3, #34	; 0x22
 80045de:	f040 8094 	bne.w	800470a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80045e8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80045ec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80045f0:	b2d9      	uxtb	r1, r3
 80045f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fc:	400a      	ands	r2, r1
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d177      	bne.n	800471a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004632:	e853 3f00 	ldrex	r3, [r3]
 8004636:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800463e:	653b      	str	r3, [r7, #80]	; 0x50
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004648:	647b      	str	r3, [r7, #68]	; 0x44
 800464a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800464e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e6      	bne.n	800462a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3308      	adds	r3, #8
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	e853 3f00 	ldrex	r3, [r3]
 800466a:	623b      	str	r3, [r7, #32]
   return(result);
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	f023 0301 	bic.w	r3, r3, #1
 8004672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3308      	adds	r3, #8
 800467a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800467c:	633a      	str	r2, [r7, #48]	; 0x30
 800467e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004680:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004684:	e841 2300 	strex	r3, r2, [r1]
 8004688:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1e5      	bne.n	800465c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d12e      	bne.n	8004702 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	e853 3f00 	ldrex	r3, [r3]
 80046b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0310 	bic.w	r3, r3, #16
 80046be:	64bb      	str	r3, [r7, #72]	; 0x48
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046c8:	61fb      	str	r3, [r7, #28]
 80046ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046cc:	69b9      	ldr	r1, [r7, #24]
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	e841 2300 	strex	r3, r2, [r1]
 80046d4:	617b      	str	r3, [r7, #20]
   return(result);
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e6      	bne.n	80046aa <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f003 0310 	and.w	r3, r3, #16
 80046e6:	2b10      	cmp	r3, #16
 80046e8:	d103      	bne.n	80046f2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2210      	movs	r2, #16
 80046f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80046f8:	4619      	mov	r1, r3
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff fa7e 	bl	8003bfc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004700:	e00b      	b.n	800471a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fb fe26 	bl	8000354 <HAL_UART_RxCpltCallback>
}
 8004708:	e007      	b.n	800471a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	699a      	ldr	r2, [r3, #24]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0208 	orr.w	r2, r2, #8
 8004718:	619a      	str	r2, [r3, #24]
}
 800471a:	bf00      	nop
 800471c:	3758      	adds	r7, #88	; 0x58
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b096      	sub	sp, #88	; 0x58
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004730:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004738:	2b22      	cmp	r3, #34	; 0x22
 800473a:	f040 8094 	bne.w	8004866 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004744:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800474e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004752:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004756:	4013      	ands	r3, r2
 8004758:	b29a      	uxth	r2, r3
 800475a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800475c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004762:	1c9a      	adds	r2, r3, #2
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800476e:	b29b      	uxth	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d177      	bne.n	8004876 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478e:	e853 3f00 	ldrex	r3, [r3]
 8004792:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800479a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	461a      	mov	r2, r3
 80047a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a4:	643b      	str	r3, [r7, #64]	; 0x40
 80047a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047ac:	e841 2300 	strex	r3, r2, [r1]
 80047b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1e6      	bne.n	8004786 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3308      	adds	r3, #8
 80047be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	e853 3f00 	ldrex	r3, [r3]
 80047c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f023 0301 	bic.w	r3, r3, #1
 80047ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3308      	adds	r3, #8
 80047d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047e0:	e841 2300 	strex	r3, r2, [r1]
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1e5      	bne.n	80047b8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d12e      	bne.n	800485e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	e853 3f00 	ldrex	r3, [r3]
 8004812:	60bb      	str	r3, [r7, #8]
   return(result);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f023 0310 	bic.w	r3, r3, #16
 800481a:	647b      	str	r3, [r7, #68]	; 0x44
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004828:	6979      	ldr	r1, [r7, #20]
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	e841 2300 	strex	r3, r2, [r1]
 8004830:	613b      	str	r3, [r7, #16]
   return(result);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e6      	bne.n	8004806 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	f003 0310 	and.w	r3, r3, #16
 8004842:	2b10      	cmp	r3, #16
 8004844:	d103      	bne.n	800484e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2210      	movs	r2, #16
 800484c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004854:	4619      	mov	r1, r3
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff f9d0 	bl	8003bfc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800485c:	e00b      	b.n	8004876 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fb fd78 	bl	8000354 <HAL_UART_RxCpltCallback>
}
 8004864:	e007      	b.n	8004876 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699a      	ldr	r2, [r3, #24]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 0208 	orr.w	r2, r2, #8
 8004874:	619a      	str	r2, [r3, #24]
}
 8004876:	bf00      	nop
 8004878:	3758      	adds	r7, #88	; 0x58
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	71fb      	strb	r3, [r7, #7]
 800489e:	460b      	mov	r3, r1
 80048a0:	71bb      	strb	r3, [r7, #6]
 80048a2:	4613      	mov	r3, r2
 80048a4:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 80048a6:	797b      	ldrb	r3, [r7, #5]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d901      	bls.n	80048b0 <tmc_fillCRC8Table+0x1c>
		return 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	e09e      	b.n	80049ee <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 80048b0:	797a      	ldrb	r2, [r7, #5]
 80048b2:	4951      	ldr	r1, [pc, #324]	; (80049f8 <tmc_fillCRC8Table+0x164>)
 80048b4:	4613      	mov	r3, r2
 80048b6:	01db      	lsls	r3, r3, #7
 80048b8:	4413      	add	r3, r2
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	440b      	add	r3, r1
 80048be:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80048c2:	79fa      	ldrb	r2, [r7, #7]
 80048c4:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 80048c6:	797a      	ldrb	r2, [r7, #5]
 80048c8:	494b      	ldr	r1, [pc, #300]	; (80049f8 <tmc_fillCRC8Table+0x164>)
 80048ca:	4613      	mov	r3, r2
 80048cc:	01db      	lsls	r3, r3, #7
 80048ce:	4413      	add	r3, r2
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	440b      	add	r3, r1
 80048d4:	f203 1301 	addw	r3, r3, #257	; 0x101
 80048d8:	79ba      	ldrb	r2, [r7, #6]
 80048da:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 80048dc:	797a      	ldrb	r2, [r7, #5]
 80048de:	4613      	mov	r3, r2
 80048e0:	01db      	lsls	r3, r3, #7
 80048e2:	4413      	add	r3, r2
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	4a44      	ldr	r2, [pc, #272]	; (80049f8 <tmc_fillCRC8Table+0x164>)
 80048e8:	4413      	add	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 80048ec:	79fb      	ldrb	r3, [r7, #7]
 80048ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f2:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 80048f4:	4b41      	ldr	r3, [pc, #260]	; (80049fc <tmc_fillCRC8Table+0x168>)
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	e074      	b.n	80049e4 <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 80048fa:	79bb      	ldrb	r3, [r7, #6]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d004      	beq.n	800490a <tmc_fillCRC8Table+0x76>
 8004900:	6978      	ldr	r0, [r7, #20]
 8004902:	f000 f8f7 	bl	8004af4 <flipBitsInBytes>
 8004906:	4603      	mov	r3, r0
 8004908:	e000      	b.n	800490c <tmc_fillCRC8Table+0x78>
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 800490e:	2300      	movs	r3, #0
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	e035      	b.n	8004980 <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	0fdb      	lsrs	r3, r3, #31
 8004918:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <tmc_fillCRC8Table+0x9a>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	e000      	b.n	8004930 <tmc_fillCRC8Table+0x9c>
 800492e:	2300      	movs	r3, #0
 8004930:	69fa      	ldr	r2, [r7, #28]
 8004932:	4053      	eors	r3, r2
 8004934:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <tmc_fillCRC8Table+0xb2>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	021b      	lsls	r3, r3, #8
 8004944:	e000      	b.n	8004948 <tmc_fillCRC8Table+0xb4>
 8004946:	2300      	movs	r3, #0
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	4053      	eors	r3, r2
 800494c:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <tmc_fillCRC8Table+0xca>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	041b      	lsls	r3, r3, #16
 800495c:	e000      	b.n	8004960 <tmc_fillCRC8Table+0xcc>
 800495e:	2300      	movs	r3, #0
 8004960:	69fa      	ldr	r2, [r7, #28]
 8004962:	4053      	eors	r3, r2
 8004964:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 8004966:	7afb      	ldrb	r3, [r7, #11]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <tmc_fillCRC8Table+0xde>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	061b      	lsls	r3, r3, #24
 8004970:	e000      	b.n	8004974 <tmc_fillCRC8Table+0xe0>
 8004972:	2300      	movs	r3, #0
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	4053      	eors	r3, r2
 8004978:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	3301      	adds	r3, #1
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2b07      	cmp	r3, #7
 8004984:	ddc6      	ble.n	8004914 <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 8004986:	79bb      	ldrb	r3, [r7, #6]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d004      	beq.n	8004996 <tmc_fillCRC8Table+0x102>
 800498c:	69f8      	ldr	r0, [r7, #28]
 800498e:	f000 f8b1 	bl	8004af4 <flipBitsInBytes>
 8004992:	4603      	mov	r3, r0
 8004994:	e000      	b.n	8004998 <tmc_fillCRC8Table+0x104>
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	61ba      	str	r2, [r7, #24]
 80049a0:	69fa      	ldr	r2, [r7, #28]
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	61ba      	str	r2, [r7, #24]
 80049b2:	69fa      	ldr	r2, [r7, #28]
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	0a1b      	lsrs	r3, r3, #8
 80049bc:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	61ba      	str	r2, [r7, #24]
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	0a1b      	lsrs	r3, r3, #8
 80049ce:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	61ba      	str	r2, [r7, #24]
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	4a06      	ldr	r2, [pc, #24]	; (8004a00 <tmc_fillCRC8Table+0x16c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d186      	bne.n	80048fa <tmc_fillCRC8Table+0x66>
	}

	return 1;
 80049ec:	2301      	movs	r3, #1
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3720      	adds	r7, #32
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	2000063c 	.word	0x2000063c
 80049fc:	03020100 	.word	0x03020100
 8004a00:	04030200 	.word	0x04030200

08004a04 <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8004a12:	2300      	movs	r3, #0
 8004a14:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d901      	bls.n	8004a20 <tmc_CRC8+0x1c>
		return 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	e02c      	b.n	8004a7a <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 8004a20:	79fa      	ldrb	r2, [r7, #7]
 8004a22:	4613      	mov	r3, r2
 8004a24:	01db      	lsls	r3, r3, #7
 8004a26:	4413      	add	r3, r2
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	4a16      	ldr	r2, [pc, #88]	; (8004a84 <tmc_CRC8+0x80>)
 8004a2c:	4413      	add	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]

	while(bytes--)
 8004a30:	e00b      	b.n	8004a4a <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	60fa      	str	r2, [r7, #12]
 8004a38:	781a      	ldrb	r2, [r3, #0]
 8004a3a:	7dfb      	ldrb	r3, [r7, #23]
 8004a3c:	4053      	eors	r3, r2
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	461a      	mov	r2, r3
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	4413      	add	r3, r2
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	1e5a      	subs	r2, r3, #1
 8004a4e:	60ba      	str	r2, [r7, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1ee      	bne.n	8004a32 <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 8004a54:	79fa      	ldrb	r2, [r7, #7]
 8004a56:	490b      	ldr	r1, [pc, #44]	; (8004a84 <tmc_CRC8+0x80>)
 8004a58:	4613      	mov	r3, r2
 8004a5a:	01db      	lsls	r3, r3, #7
 8004a5c:	4413      	add	r3, r2
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	440b      	add	r3, r1
 8004a62:	f203 1301 	addw	r3, r3, #257	; 0x101
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <tmc_CRC8+0x74>
 8004a6c:	7dfb      	ldrb	r3, [r7, #23]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 f80a 	bl	8004a88 <flipByte>
 8004a74:	4603      	mov	r3, r0
 8004a76:	e000      	b.n	8004a7a <tmc_CRC8+0x76>
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	2000063c 	.word	0x2000063c

08004a88 <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 8004a92:	79fb      	ldrb	r3, [r7, #7]
 8004a94:	085b      	lsrs	r3, r3, #1
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	b25b      	sxtb	r3, r3
 8004a9a:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8004a9e:	b25a      	sxtb	r2, r3
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	b25b      	sxtb	r3, r3
 8004aa6:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8004aaa:	b25b      	sxtb	r3, r3
 8004aac:	4313      	orrs	r3, r2
 8004aae:	b25b      	sxtb	r3, r3
 8004ab0:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	089b      	lsrs	r3, r3, #2
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	b25b      	sxtb	r3, r3
 8004aba:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8004abe:	b25a      	sxtb	r2, r3
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	b25b      	sxtb	r3, r3
 8004ac6:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8004aca:	b25b      	sxtb	r3, r3
 8004acc:	4313      	orrs	r3, r2
 8004ace:	b25b      	sxtb	r3, r3
 8004ad0:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	091b      	lsrs	r3, r3, #4
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	b25a      	sxtb	r2, r3
 8004ada:	79fb      	ldrb	r3, [r7, #7]
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	b25b      	sxtb	r3, r3
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	b25b      	sxtb	r3, r3
 8004ae4:	71fb      	strb	r3, [r7, #7]

	return value;
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	085b      	lsrs	r3, r3, #1
 8004b00:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	089b      	lsrs	r3, r3, #2
 8004b14:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 8004b20:	4313      	orrs	r3, r2
 8004b22:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	091b      	lsrs	r3, r3, #4
 8004b28:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8004b34:	4313      	orrs	r3, r2
 8004b36:	607b      	str	r3, [r7, #4]

	return value;
 8004b38:	687b      	ldr	r3, [r7, #4]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b086      	sub	sp, #24
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];

	data[0] = 0x05;
 8004b54:	2305      	movs	r3, #5
 8004b56:	743b      	strb	r3, [r7, #16]
	data[1] = tmc2209->slaveAddress;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8004b5e:	747b      	strb	r3, [r7, #17]
	data[2] = address | TMC_WRITE_BIT;
 8004b60:	7afb      	ldrb	r3, [r7, #11]
 8004b62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	74bb      	strb	r3, [r7, #18]
	data[3] = (value >> 24) & 0xFF;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	0e1b      	lsrs	r3, r3, #24
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	74fb      	strb	r3, [r7, #19]
	data[4] = (value >> 16) & 0xFF;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	141b      	asrs	r3, r3, #16
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	753b      	strb	r3, [r7, #20]
	data[5] = (value >> 8 ) & 0xFF;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	121b      	asrs	r3, r3, #8
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	757b      	strb	r3, [r7, #21]
	data[6] = (value      ) & 0xFF;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	75bb      	strb	r3, [r7, #22]
	data[7] = tmc2209_CRC8(data, 7);
 8004b88:	f107 0310 	add.w	r3, r7, #16
 8004b8c:	2107      	movs	r1, #7
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fb fb96 	bl	80002c0 <tmc2209_CRC8>
 8004b94:	4603      	mov	r3, r0
 8004b96:	75fb      	strb	r3, [r7, #23]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8004ba0:	f107 0110 	add.w	r1, r7, #16
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2208      	movs	r2, #8
 8004ba8:	f7fb fb62 	bl	8000270 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
 8004bac:	7afb      	ldrb	r3, [r7, #11]
 8004bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bb2:	72fb      	strb	r3, [r7, #11]
	tmc2209->config->shadowRegister[address] = value;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	7afb      	ldrb	r3, [r7, #11]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	605a      	str	r2, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
 8004bc2:	7afb      	ldrb	r3, [r7, #11]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f893 2204 	ldrb.w	r2, [r3, #516]	; 0x204
 8004bcc:	7afb      	ldrb	r3, [r7, #11]
 8004bce:	f042 0208 	orr.w	r2, r2, #8
 8004bd2:	b2d1      	uxtb	r1, r2
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	460a      	mov	r2, r1
 8004bda:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 8004bde:	bf00      	nop
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 8004be6:	b590      	push	{r4, r7, lr}
 8004be8:	b085      	sub	sp, #20
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 8004bfa:	78fb      	ldrb	r3, [r7, #3]
 8004bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c00:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	4413      	add	r3, r2
 8004c08:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d106      	bne.n	8004c22 <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	e03f      	b.n	8004ca2 <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 8004c22:	2305      	movs	r3, #5
 8004c24:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8004c2c:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 8004c2e:	78fb      	ldrb	r3, [r7, #3]
 8004c30:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 8004c32:	f107 0308 	add.w	r3, r7, #8
 8004c36:	2103      	movs	r1, #3
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fb fb41 	bl	80002c0 <tmc2209_CRC8>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8004c4a:	f107 0108 	add.w	r1, r7, #8
 8004c4e:	2308      	movs	r3, #8
 8004c50:	2204      	movs	r2, #4
 8004c52:	f7fb fb0d 	bl	8000270 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 8004c56:	7a3b      	ldrb	r3, [r7, #8]
 8004c58:	2b05      	cmp	r3, #5
 8004c5a:	d001      	beq.n	8004c60 <tmc2209_readInt+0x7a>
		return 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e020      	b.n	8004ca2 <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 8004c60:	7a7b      	ldrb	r3, [r7, #9]
 8004c62:	2bff      	cmp	r3, #255	; 0xff
 8004c64:	d001      	beq.n	8004c6a <tmc2209_readInt+0x84>
		return 0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	e01b      	b.n	8004ca2 <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 8004c6a:	7abb      	ldrb	r3, [r7, #10]
 8004c6c:	78fa      	ldrb	r2, [r7, #3]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d001      	beq.n	8004c76 <tmc2209_readInt+0x90>
		return 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	e015      	b.n	8004ca2 <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 8004c76:	7bfc      	ldrb	r4, [r7, #15]
 8004c78:	f107 0308 	add.w	r3, r7, #8
 8004c7c:	2107      	movs	r1, #7
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fb fb1e 	bl	80002c0 <tmc2209_CRC8>
 8004c84:	4603      	mov	r3, r0
 8004c86:	429c      	cmp	r4, r3
 8004c88:	d001      	beq.n	8004c8e <tmc2209_readInt+0xa8>
		return 0;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	e009      	b.n	8004ca2 <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 8004c8e:	7afb      	ldrb	r3, [r7, #11]
 8004c90:	061a      	lsls	r2, r3, #24
 8004c92:	7b3b      	ldrb	r3, [r7, #12]
 8004c94:	041b      	lsls	r3, r3, #16
 8004c96:	4313      	orrs	r3, r2
 8004c98:	7b7a      	ldrb	r2, [r7, #13]
 8004c9a:	0212      	lsls	r2, r2, #8
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	7bba      	ldrb	r2, [r7, #14]
 8004ca0:	4313      	orrs	r3, r2
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd90      	pop	{r4, r7, pc}
	...

08004cac <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	607b      	str	r3, [r7, #4]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	72fb      	strb	r3, [r7, #11]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	7aba      	ldrb	r2, [r7, #10]
 8004cc2:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	7afa      	ldrb	r2, [r7, #11]
 8004cdc:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2200      	movs	r2, #0
 8004cee:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	e017      	b.n	8004d26 <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 8004cf6:	4a11      	ldr	r2, [pc, #68]	; (8004d3c <tmc2209_init+0x90>)
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	7819      	ldrb	r1, [r3, #0]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d08:	460a      	mov	r2, r1
 8004d0a:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	6a3a      	ldr	r2, [r7, #32]
 8004d12:	4413      	add	r3, r2
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68f9      	ldr	r1, [r7, #12]
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	3301      	adds	r3, #1
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2b7f      	cmp	r3, #127	; 0x7f
 8004d2a:	d9e4      	bls.n	8004cf6 <tmc2209_init+0x4a>
	}
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	371c      	adds	r7, #28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	08006598 	.word	0x08006598

08004d40 <writeConfiguration>:

static void writeConfiguration(TMC2209TypeDef *tmc2209)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = &tmc2209->config->configIndex;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	60bb      	str	r3, [r7, #8]
	const int32_t *settings;

	if(tmc2209->config->state == CONFIG_RESTORE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d131      	bne.n	8004dbe <writeConfiguration+0x7e>
	{
		settings = tmc2209->config->shadowRegister;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	60fb      	str	r3, [r7, #12]
		// Find the next restorable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8004d62:	e005      	b.n	8004d70 <writeConfiguration+0x30>
		{
			(*ptr)++;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	b25b      	sxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	db3b      	blt.n	8004df2 <writeConfiguration+0xb2>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4413      	add	r3, r2
 8004d84:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0e9      	beq.n	8004d64 <writeConfiguration+0x24>
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	461a      	mov	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d025      	beq.n	8004df2 <writeConfiguration+0xb2>
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4413      	add	r3, r2
 8004db0:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0d3      	beq.n	8004d64 <writeConfiguration+0x24>
 8004dbc:	e019      	b.n	8004df2 <writeConfiguration+0xb2>
		}
	}
	else
	{
		settings = tmc2209->registerResetState;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	60fb      	str	r3, [r7, #12]
		// Find the next resettable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8004dc4:	e005      	b.n	8004dd2 <writeConfiguration+0x92>
		{
			(*ptr)++;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	b25b      	sxtb	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	db0a      	blt.n	8004df2 <writeConfiguration+0xb2>
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4413      	add	r3, r2
 8004de6:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004dea:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d1e9      	bne.n	8004dc6 <writeConfiguration+0x86>
		}
	}

	if(*ptr < TMC2209_REGISTER_COUNT)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	b25b      	sxtb	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	db12      	blt.n	8004e22 <writeConfiguration+0xe2>
	{
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	7819      	ldrb	r1, [r3, #0]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	4413      	add	r3, r2
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7ff fe99 	bl	8004b46 <tmc2209_writeInt>
		(*ptr)++;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	701a      	strb	r2, [r3, #0]
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
		}

		tmc2209->config->state = CONFIG_READY;
	}
}
 8004e20:	e013      	b.n	8004e4a <writeConfiguration+0x10a>
		if(tmc2209->config->callback)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d009      	beq.n	8004e42 <writeConfiguration+0x102>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	7812      	ldrb	r2, [r2, #0]
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]
}
 8004e4a:	bf00      	nop
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <tmc2209_periodicJob>:

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	6039      	str	r1, [r7, #0]
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <tmc2209_periodicJob+0x1c>
	{
		writeConfiguration(tmc2209);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff ff6a 	bl	8004d40 <writeConfiguration>
		return;
 8004e6c:	bf00      	nop
	}
}
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <tmc2209_reset+0x16>
		return false;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e028      	b.n	8004edc <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	e019      	b.n	8004ec4 <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	f023 0308 	bic.w	r3, r3, #8
 8004ea0:	b2d9      	uxtb	r1, r3
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004eac:	460a      	mov	r2, r1
 8004eae:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	2200      	movs	r2, #0
 8004ebc:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ec8:	d9e2      	bls.n	8004e90 <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	705a      	strb	r2, [r3, #1]

	return true;
 8004eda:	2301      	movs	r3, #1
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3714      	adds	r7, #20
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <tmc2209_restore+0x16>
		return false;
 8004efa:	2300      	movs	r3, #0
 8004efc:	e008      	b.n	8004f10 <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2202      	movs	r2, #2
 8004f04:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	705a      	strb	r2, [r3, #1]

	return true;
 8004f0e:	2301      	movs	r3, #1
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <__errno>:
 8004f1c:	4b01      	ldr	r3, [pc, #4]	; (8004f24 <__errno+0x8>)
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	2000000c 	.word	0x2000000c

08004f28 <__libc_init_array>:
 8004f28:	b570      	push	{r4, r5, r6, lr}
 8004f2a:	4d0d      	ldr	r5, [pc, #52]	; (8004f60 <__libc_init_array+0x38>)
 8004f2c:	4c0d      	ldr	r4, [pc, #52]	; (8004f64 <__libc_init_array+0x3c>)
 8004f2e:	1b64      	subs	r4, r4, r5
 8004f30:	10a4      	asrs	r4, r4, #2
 8004f32:	2600      	movs	r6, #0
 8004f34:	42a6      	cmp	r6, r4
 8004f36:	d109      	bne.n	8004f4c <__libc_init_array+0x24>
 8004f38:	4d0b      	ldr	r5, [pc, #44]	; (8004f68 <__libc_init_array+0x40>)
 8004f3a:	4c0c      	ldr	r4, [pc, #48]	; (8004f6c <__libc_init_array+0x44>)
 8004f3c:	f001 f8fa 	bl	8006134 <_init>
 8004f40:	1b64      	subs	r4, r4, r5
 8004f42:	10a4      	asrs	r4, r4, #2
 8004f44:	2600      	movs	r6, #0
 8004f46:	42a6      	cmp	r6, r4
 8004f48:	d105      	bne.n	8004f56 <__libc_init_array+0x2e>
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f50:	4798      	blx	r3
 8004f52:	3601      	adds	r6, #1
 8004f54:	e7ee      	b.n	8004f34 <__libc_init_array+0xc>
 8004f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5a:	4798      	blx	r3
 8004f5c:	3601      	adds	r6, #1
 8004f5e:	e7f2      	b.n	8004f46 <__libc_init_array+0x1e>
 8004f60:	080066b0 	.word	0x080066b0
 8004f64:	080066b0 	.word	0x080066b0
 8004f68:	080066b0 	.word	0x080066b0
 8004f6c:	080066b4 	.word	0x080066b4

08004f70 <memset>:
 8004f70:	4402      	add	r2, r0
 8004f72:	4603      	mov	r3, r0
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d100      	bne.n	8004f7a <memset+0xa>
 8004f78:	4770      	bx	lr
 8004f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f7e:	e7f9      	b.n	8004f74 <memset+0x4>

08004f80 <iprintf>:
 8004f80:	b40f      	push	{r0, r1, r2, r3}
 8004f82:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <iprintf+0x2c>)
 8004f84:	b513      	push	{r0, r1, r4, lr}
 8004f86:	681c      	ldr	r4, [r3, #0]
 8004f88:	b124      	cbz	r4, 8004f94 <iprintf+0x14>
 8004f8a:	69a3      	ldr	r3, [r4, #24]
 8004f8c:	b913      	cbnz	r3, 8004f94 <iprintf+0x14>
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f000 fb2c 	bl	80055ec <__sinit>
 8004f94:	ab05      	add	r3, sp, #20
 8004f96:	9a04      	ldr	r2, [sp, #16]
 8004f98:	68a1      	ldr	r1, [r4, #8]
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f000 fd3d 	bl	8005a1c <_vfiprintf_r>
 8004fa2:	b002      	add	sp, #8
 8004fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fa8:	b004      	add	sp, #16
 8004faa:	4770      	bx	lr
 8004fac:	2000000c 	.word	0x2000000c

08004fb0 <_puts_r>:
 8004fb0:	b570      	push	{r4, r5, r6, lr}
 8004fb2:	460e      	mov	r6, r1
 8004fb4:	4605      	mov	r5, r0
 8004fb6:	b118      	cbz	r0, 8004fc0 <_puts_r+0x10>
 8004fb8:	6983      	ldr	r3, [r0, #24]
 8004fba:	b90b      	cbnz	r3, 8004fc0 <_puts_r+0x10>
 8004fbc:	f000 fb16 	bl	80055ec <__sinit>
 8004fc0:	69ab      	ldr	r3, [r5, #24]
 8004fc2:	68ac      	ldr	r4, [r5, #8]
 8004fc4:	b913      	cbnz	r3, 8004fcc <_puts_r+0x1c>
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	f000 fb10 	bl	80055ec <__sinit>
 8004fcc:	4b2c      	ldr	r3, [pc, #176]	; (8005080 <_puts_r+0xd0>)
 8004fce:	429c      	cmp	r4, r3
 8004fd0:	d120      	bne.n	8005014 <_puts_r+0x64>
 8004fd2:	686c      	ldr	r4, [r5, #4]
 8004fd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fd6:	07db      	lsls	r3, r3, #31
 8004fd8:	d405      	bmi.n	8004fe6 <_puts_r+0x36>
 8004fda:	89a3      	ldrh	r3, [r4, #12]
 8004fdc:	0598      	lsls	r0, r3, #22
 8004fde:	d402      	bmi.n	8004fe6 <_puts_r+0x36>
 8004fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fe2:	f000 fba1 	bl	8005728 <__retarget_lock_acquire_recursive>
 8004fe6:	89a3      	ldrh	r3, [r4, #12]
 8004fe8:	0719      	lsls	r1, r3, #28
 8004fea:	d51d      	bpl.n	8005028 <_puts_r+0x78>
 8004fec:	6923      	ldr	r3, [r4, #16]
 8004fee:	b1db      	cbz	r3, 8005028 <_puts_r+0x78>
 8004ff0:	3e01      	subs	r6, #1
 8004ff2:	68a3      	ldr	r3, [r4, #8]
 8004ff4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	60a3      	str	r3, [r4, #8]
 8004ffc:	bb39      	cbnz	r1, 800504e <_puts_r+0x9e>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	da38      	bge.n	8005074 <_puts_r+0xc4>
 8005002:	4622      	mov	r2, r4
 8005004:	210a      	movs	r1, #10
 8005006:	4628      	mov	r0, r5
 8005008:	f000 f916 	bl	8005238 <__swbuf_r>
 800500c:	3001      	adds	r0, #1
 800500e:	d011      	beq.n	8005034 <_puts_r+0x84>
 8005010:	250a      	movs	r5, #10
 8005012:	e011      	b.n	8005038 <_puts_r+0x88>
 8005014:	4b1b      	ldr	r3, [pc, #108]	; (8005084 <_puts_r+0xd4>)
 8005016:	429c      	cmp	r4, r3
 8005018:	d101      	bne.n	800501e <_puts_r+0x6e>
 800501a:	68ac      	ldr	r4, [r5, #8]
 800501c:	e7da      	b.n	8004fd4 <_puts_r+0x24>
 800501e:	4b1a      	ldr	r3, [pc, #104]	; (8005088 <_puts_r+0xd8>)
 8005020:	429c      	cmp	r4, r3
 8005022:	bf08      	it	eq
 8005024:	68ec      	ldreq	r4, [r5, #12]
 8005026:	e7d5      	b.n	8004fd4 <_puts_r+0x24>
 8005028:	4621      	mov	r1, r4
 800502a:	4628      	mov	r0, r5
 800502c:	f000 f956 	bl	80052dc <__swsetup_r>
 8005030:	2800      	cmp	r0, #0
 8005032:	d0dd      	beq.n	8004ff0 <_puts_r+0x40>
 8005034:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005038:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800503a:	07da      	lsls	r2, r3, #31
 800503c:	d405      	bmi.n	800504a <_puts_r+0x9a>
 800503e:	89a3      	ldrh	r3, [r4, #12]
 8005040:	059b      	lsls	r3, r3, #22
 8005042:	d402      	bmi.n	800504a <_puts_r+0x9a>
 8005044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005046:	f000 fb70 	bl	800572a <__retarget_lock_release_recursive>
 800504a:	4628      	mov	r0, r5
 800504c:	bd70      	pop	{r4, r5, r6, pc}
 800504e:	2b00      	cmp	r3, #0
 8005050:	da04      	bge.n	800505c <_puts_r+0xac>
 8005052:	69a2      	ldr	r2, [r4, #24]
 8005054:	429a      	cmp	r2, r3
 8005056:	dc06      	bgt.n	8005066 <_puts_r+0xb6>
 8005058:	290a      	cmp	r1, #10
 800505a:	d004      	beq.n	8005066 <_puts_r+0xb6>
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	6022      	str	r2, [r4, #0]
 8005062:	7019      	strb	r1, [r3, #0]
 8005064:	e7c5      	b.n	8004ff2 <_puts_r+0x42>
 8005066:	4622      	mov	r2, r4
 8005068:	4628      	mov	r0, r5
 800506a:	f000 f8e5 	bl	8005238 <__swbuf_r>
 800506e:	3001      	adds	r0, #1
 8005070:	d1bf      	bne.n	8004ff2 <_puts_r+0x42>
 8005072:	e7df      	b.n	8005034 <_puts_r+0x84>
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	250a      	movs	r5, #10
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	6022      	str	r2, [r4, #0]
 800507c:	701d      	strb	r5, [r3, #0]
 800507e:	e7db      	b.n	8005038 <_puts_r+0x88>
 8005080:	0800663c 	.word	0x0800663c
 8005084:	0800665c 	.word	0x0800665c
 8005088:	0800661c 	.word	0x0800661c

0800508c <puts>:
 800508c:	4b02      	ldr	r3, [pc, #8]	; (8005098 <puts+0xc>)
 800508e:	4601      	mov	r1, r0
 8005090:	6818      	ldr	r0, [r3, #0]
 8005092:	f7ff bf8d 	b.w	8004fb0 <_puts_r>
 8005096:	bf00      	nop
 8005098:	2000000c 	.word	0x2000000c

0800509c <setbuf>:
 800509c:	2900      	cmp	r1, #0
 800509e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050a2:	bf0c      	ite	eq
 80050a4:	2202      	moveq	r2, #2
 80050a6:	2200      	movne	r2, #0
 80050a8:	f000 b800 	b.w	80050ac <setvbuf>

080050ac <setvbuf>:
 80050ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80050b0:	461d      	mov	r5, r3
 80050b2:	4b5d      	ldr	r3, [pc, #372]	; (8005228 <setvbuf+0x17c>)
 80050b4:	681f      	ldr	r7, [r3, #0]
 80050b6:	4604      	mov	r4, r0
 80050b8:	460e      	mov	r6, r1
 80050ba:	4690      	mov	r8, r2
 80050bc:	b127      	cbz	r7, 80050c8 <setvbuf+0x1c>
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	b913      	cbnz	r3, 80050c8 <setvbuf+0x1c>
 80050c2:	4638      	mov	r0, r7
 80050c4:	f000 fa92 	bl	80055ec <__sinit>
 80050c8:	4b58      	ldr	r3, [pc, #352]	; (800522c <setvbuf+0x180>)
 80050ca:	429c      	cmp	r4, r3
 80050cc:	d167      	bne.n	800519e <setvbuf+0xf2>
 80050ce:	687c      	ldr	r4, [r7, #4]
 80050d0:	f1b8 0f02 	cmp.w	r8, #2
 80050d4:	d006      	beq.n	80050e4 <setvbuf+0x38>
 80050d6:	f1b8 0f01 	cmp.w	r8, #1
 80050da:	f200 809f 	bhi.w	800521c <setvbuf+0x170>
 80050de:	2d00      	cmp	r5, #0
 80050e0:	f2c0 809c 	blt.w	800521c <setvbuf+0x170>
 80050e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050e6:	07db      	lsls	r3, r3, #31
 80050e8:	d405      	bmi.n	80050f6 <setvbuf+0x4a>
 80050ea:	89a3      	ldrh	r3, [r4, #12]
 80050ec:	0598      	lsls	r0, r3, #22
 80050ee:	d402      	bmi.n	80050f6 <setvbuf+0x4a>
 80050f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050f2:	f000 fb19 	bl	8005728 <__retarget_lock_acquire_recursive>
 80050f6:	4621      	mov	r1, r4
 80050f8:	4638      	mov	r0, r7
 80050fa:	f000 f9e3 	bl	80054c4 <_fflush_r>
 80050fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005100:	b141      	cbz	r1, 8005114 <setvbuf+0x68>
 8005102:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005106:	4299      	cmp	r1, r3
 8005108:	d002      	beq.n	8005110 <setvbuf+0x64>
 800510a:	4638      	mov	r0, r7
 800510c:	f000 fb7c 	bl	8005808 <_free_r>
 8005110:	2300      	movs	r3, #0
 8005112:	6363      	str	r3, [r4, #52]	; 0x34
 8005114:	2300      	movs	r3, #0
 8005116:	61a3      	str	r3, [r4, #24]
 8005118:	6063      	str	r3, [r4, #4]
 800511a:	89a3      	ldrh	r3, [r4, #12]
 800511c:	0619      	lsls	r1, r3, #24
 800511e:	d503      	bpl.n	8005128 <setvbuf+0x7c>
 8005120:	6921      	ldr	r1, [r4, #16]
 8005122:	4638      	mov	r0, r7
 8005124:	f000 fb70 	bl	8005808 <_free_r>
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800512e:	f023 0303 	bic.w	r3, r3, #3
 8005132:	f1b8 0f02 	cmp.w	r8, #2
 8005136:	81a3      	strh	r3, [r4, #12]
 8005138:	d06c      	beq.n	8005214 <setvbuf+0x168>
 800513a:	ab01      	add	r3, sp, #4
 800513c:	466a      	mov	r2, sp
 800513e:	4621      	mov	r1, r4
 8005140:	4638      	mov	r0, r7
 8005142:	f000 faf3 	bl	800572c <__swhatbuf_r>
 8005146:	89a3      	ldrh	r3, [r4, #12]
 8005148:	4318      	orrs	r0, r3
 800514a:	81a0      	strh	r0, [r4, #12]
 800514c:	2d00      	cmp	r5, #0
 800514e:	d130      	bne.n	80051b2 <setvbuf+0x106>
 8005150:	9d00      	ldr	r5, [sp, #0]
 8005152:	4628      	mov	r0, r5
 8005154:	f000 fb50 	bl	80057f8 <malloc>
 8005158:	4606      	mov	r6, r0
 800515a:	2800      	cmp	r0, #0
 800515c:	d155      	bne.n	800520a <setvbuf+0x15e>
 800515e:	f8dd 9000 	ldr.w	r9, [sp]
 8005162:	45a9      	cmp	r9, r5
 8005164:	d14a      	bne.n	80051fc <setvbuf+0x150>
 8005166:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800516a:	2200      	movs	r2, #0
 800516c:	60a2      	str	r2, [r4, #8]
 800516e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005172:	6022      	str	r2, [r4, #0]
 8005174:	6122      	str	r2, [r4, #16]
 8005176:	2201      	movs	r2, #1
 8005178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800517c:	6162      	str	r2, [r4, #20]
 800517e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005180:	f043 0302 	orr.w	r3, r3, #2
 8005184:	07d2      	lsls	r2, r2, #31
 8005186:	81a3      	strh	r3, [r4, #12]
 8005188:	d405      	bmi.n	8005196 <setvbuf+0xea>
 800518a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800518e:	d102      	bne.n	8005196 <setvbuf+0xea>
 8005190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005192:	f000 faca 	bl	800572a <__retarget_lock_release_recursive>
 8005196:	4628      	mov	r0, r5
 8005198:	b003      	add	sp, #12
 800519a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800519e:	4b24      	ldr	r3, [pc, #144]	; (8005230 <setvbuf+0x184>)
 80051a0:	429c      	cmp	r4, r3
 80051a2:	d101      	bne.n	80051a8 <setvbuf+0xfc>
 80051a4:	68bc      	ldr	r4, [r7, #8]
 80051a6:	e793      	b.n	80050d0 <setvbuf+0x24>
 80051a8:	4b22      	ldr	r3, [pc, #136]	; (8005234 <setvbuf+0x188>)
 80051aa:	429c      	cmp	r4, r3
 80051ac:	bf08      	it	eq
 80051ae:	68fc      	ldreq	r4, [r7, #12]
 80051b0:	e78e      	b.n	80050d0 <setvbuf+0x24>
 80051b2:	2e00      	cmp	r6, #0
 80051b4:	d0cd      	beq.n	8005152 <setvbuf+0xa6>
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	b913      	cbnz	r3, 80051c0 <setvbuf+0x114>
 80051ba:	4638      	mov	r0, r7
 80051bc:	f000 fa16 	bl	80055ec <__sinit>
 80051c0:	f1b8 0f01 	cmp.w	r8, #1
 80051c4:	bf08      	it	eq
 80051c6:	89a3      	ldrheq	r3, [r4, #12]
 80051c8:	6026      	str	r6, [r4, #0]
 80051ca:	bf04      	itt	eq
 80051cc:	f043 0301 	orreq.w	r3, r3, #1
 80051d0:	81a3      	strheq	r3, [r4, #12]
 80051d2:	89a2      	ldrh	r2, [r4, #12]
 80051d4:	f012 0308 	ands.w	r3, r2, #8
 80051d8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80051dc:	d01c      	beq.n	8005218 <setvbuf+0x16c>
 80051de:	07d3      	lsls	r3, r2, #31
 80051e0:	bf41      	itttt	mi
 80051e2:	2300      	movmi	r3, #0
 80051e4:	426d      	negmi	r5, r5
 80051e6:	60a3      	strmi	r3, [r4, #8]
 80051e8:	61a5      	strmi	r5, [r4, #24]
 80051ea:	bf58      	it	pl
 80051ec:	60a5      	strpl	r5, [r4, #8]
 80051ee:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80051f0:	f015 0501 	ands.w	r5, r5, #1
 80051f4:	d115      	bne.n	8005222 <setvbuf+0x176>
 80051f6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80051fa:	e7c8      	b.n	800518e <setvbuf+0xe2>
 80051fc:	4648      	mov	r0, r9
 80051fe:	f000 fafb 	bl	80057f8 <malloc>
 8005202:	4606      	mov	r6, r0
 8005204:	2800      	cmp	r0, #0
 8005206:	d0ae      	beq.n	8005166 <setvbuf+0xba>
 8005208:	464d      	mov	r5, r9
 800520a:	89a3      	ldrh	r3, [r4, #12]
 800520c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005210:	81a3      	strh	r3, [r4, #12]
 8005212:	e7d0      	b.n	80051b6 <setvbuf+0x10a>
 8005214:	2500      	movs	r5, #0
 8005216:	e7a8      	b.n	800516a <setvbuf+0xbe>
 8005218:	60a3      	str	r3, [r4, #8]
 800521a:	e7e8      	b.n	80051ee <setvbuf+0x142>
 800521c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005220:	e7b9      	b.n	8005196 <setvbuf+0xea>
 8005222:	2500      	movs	r5, #0
 8005224:	e7b7      	b.n	8005196 <setvbuf+0xea>
 8005226:	bf00      	nop
 8005228:	2000000c 	.word	0x2000000c
 800522c:	0800663c 	.word	0x0800663c
 8005230:	0800665c 	.word	0x0800665c
 8005234:	0800661c 	.word	0x0800661c

08005238 <__swbuf_r>:
 8005238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523a:	460e      	mov	r6, r1
 800523c:	4614      	mov	r4, r2
 800523e:	4605      	mov	r5, r0
 8005240:	b118      	cbz	r0, 800524a <__swbuf_r+0x12>
 8005242:	6983      	ldr	r3, [r0, #24]
 8005244:	b90b      	cbnz	r3, 800524a <__swbuf_r+0x12>
 8005246:	f000 f9d1 	bl	80055ec <__sinit>
 800524a:	4b21      	ldr	r3, [pc, #132]	; (80052d0 <__swbuf_r+0x98>)
 800524c:	429c      	cmp	r4, r3
 800524e:	d12b      	bne.n	80052a8 <__swbuf_r+0x70>
 8005250:	686c      	ldr	r4, [r5, #4]
 8005252:	69a3      	ldr	r3, [r4, #24]
 8005254:	60a3      	str	r3, [r4, #8]
 8005256:	89a3      	ldrh	r3, [r4, #12]
 8005258:	071a      	lsls	r2, r3, #28
 800525a:	d52f      	bpl.n	80052bc <__swbuf_r+0x84>
 800525c:	6923      	ldr	r3, [r4, #16]
 800525e:	b36b      	cbz	r3, 80052bc <__swbuf_r+0x84>
 8005260:	6923      	ldr	r3, [r4, #16]
 8005262:	6820      	ldr	r0, [r4, #0]
 8005264:	1ac0      	subs	r0, r0, r3
 8005266:	6963      	ldr	r3, [r4, #20]
 8005268:	b2f6      	uxtb	r6, r6
 800526a:	4283      	cmp	r3, r0
 800526c:	4637      	mov	r7, r6
 800526e:	dc04      	bgt.n	800527a <__swbuf_r+0x42>
 8005270:	4621      	mov	r1, r4
 8005272:	4628      	mov	r0, r5
 8005274:	f000 f926 	bl	80054c4 <_fflush_r>
 8005278:	bb30      	cbnz	r0, 80052c8 <__swbuf_r+0x90>
 800527a:	68a3      	ldr	r3, [r4, #8]
 800527c:	3b01      	subs	r3, #1
 800527e:	60a3      	str	r3, [r4, #8]
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	6022      	str	r2, [r4, #0]
 8005286:	701e      	strb	r6, [r3, #0]
 8005288:	6963      	ldr	r3, [r4, #20]
 800528a:	3001      	adds	r0, #1
 800528c:	4283      	cmp	r3, r0
 800528e:	d004      	beq.n	800529a <__swbuf_r+0x62>
 8005290:	89a3      	ldrh	r3, [r4, #12]
 8005292:	07db      	lsls	r3, r3, #31
 8005294:	d506      	bpl.n	80052a4 <__swbuf_r+0x6c>
 8005296:	2e0a      	cmp	r6, #10
 8005298:	d104      	bne.n	80052a4 <__swbuf_r+0x6c>
 800529a:	4621      	mov	r1, r4
 800529c:	4628      	mov	r0, r5
 800529e:	f000 f911 	bl	80054c4 <_fflush_r>
 80052a2:	b988      	cbnz	r0, 80052c8 <__swbuf_r+0x90>
 80052a4:	4638      	mov	r0, r7
 80052a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052a8:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <__swbuf_r+0x9c>)
 80052aa:	429c      	cmp	r4, r3
 80052ac:	d101      	bne.n	80052b2 <__swbuf_r+0x7a>
 80052ae:	68ac      	ldr	r4, [r5, #8]
 80052b0:	e7cf      	b.n	8005252 <__swbuf_r+0x1a>
 80052b2:	4b09      	ldr	r3, [pc, #36]	; (80052d8 <__swbuf_r+0xa0>)
 80052b4:	429c      	cmp	r4, r3
 80052b6:	bf08      	it	eq
 80052b8:	68ec      	ldreq	r4, [r5, #12]
 80052ba:	e7ca      	b.n	8005252 <__swbuf_r+0x1a>
 80052bc:	4621      	mov	r1, r4
 80052be:	4628      	mov	r0, r5
 80052c0:	f000 f80c 	bl	80052dc <__swsetup_r>
 80052c4:	2800      	cmp	r0, #0
 80052c6:	d0cb      	beq.n	8005260 <__swbuf_r+0x28>
 80052c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80052cc:	e7ea      	b.n	80052a4 <__swbuf_r+0x6c>
 80052ce:	bf00      	nop
 80052d0:	0800663c 	.word	0x0800663c
 80052d4:	0800665c 	.word	0x0800665c
 80052d8:	0800661c 	.word	0x0800661c

080052dc <__swsetup_r>:
 80052dc:	4b32      	ldr	r3, [pc, #200]	; (80053a8 <__swsetup_r+0xcc>)
 80052de:	b570      	push	{r4, r5, r6, lr}
 80052e0:	681d      	ldr	r5, [r3, #0]
 80052e2:	4606      	mov	r6, r0
 80052e4:	460c      	mov	r4, r1
 80052e6:	b125      	cbz	r5, 80052f2 <__swsetup_r+0x16>
 80052e8:	69ab      	ldr	r3, [r5, #24]
 80052ea:	b913      	cbnz	r3, 80052f2 <__swsetup_r+0x16>
 80052ec:	4628      	mov	r0, r5
 80052ee:	f000 f97d 	bl	80055ec <__sinit>
 80052f2:	4b2e      	ldr	r3, [pc, #184]	; (80053ac <__swsetup_r+0xd0>)
 80052f4:	429c      	cmp	r4, r3
 80052f6:	d10f      	bne.n	8005318 <__swsetup_r+0x3c>
 80052f8:	686c      	ldr	r4, [r5, #4]
 80052fa:	89a3      	ldrh	r3, [r4, #12]
 80052fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005300:	0719      	lsls	r1, r3, #28
 8005302:	d42c      	bmi.n	800535e <__swsetup_r+0x82>
 8005304:	06dd      	lsls	r5, r3, #27
 8005306:	d411      	bmi.n	800532c <__swsetup_r+0x50>
 8005308:	2309      	movs	r3, #9
 800530a:	6033      	str	r3, [r6, #0]
 800530c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005310:	81a3      	strh	r3, [r4, #12]
 8005312:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005316:	e03e      	b.n	8005396 <__swsetup_r+0xba>
 8005318:	4b25      	ldr	r3, [pc, #148]	; (80053b0 <__swsetup_r+0xd4>)
 800531a:	429c      	cmp	r4, r3
 800531c:	d101      	bne.n	8005322 <__swsetup_r+0x46>
 800531e:	68ac      	ldr	r4, [r5, #8]
 8005320:	e7eb      	b.n	80052fa <__swsetup_r+0x1e>
 8005322:	4b24      	ldr	r3, [pc, #144]	; (80053b4 <__swsetup_r+0xd8>)
 8005324:	429c      	cmp	r4, r3
 8005326:	bf08      	it	eq
 8005328:	68ec      	ldreq	r4, [r5, #12]
 800532a:	e7e6      	b.n	80052fa <__swsetup_r+0x1e>
 800532c:	0758      	lsls	r0, r3, #29
 800532e:	d512      	bpl.n	8005356 <__swsetup_r+0x7a>
 8005330:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005332:	b141      	cbz	r1, 8005346 <__swsetup_r+0x6a>
 8005334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005338:	4299      	cmp	r1, r3
 800533a:	d002      	beq.n	8005342 <__swsetup_r+0x66>
 800533c:	4630      	mov	r0, r6
 800533e:	f000 fa63 	bl	8005808 <_free_r>
 8005342:	2300      	movs	r3, #0
 8005344:	6363      	str	r3, [r4, #52]	; 0x34
 8005346:	89a3      	ldrh	r3, [r4, #12]
 8005348:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800534c:	81a3      	strh	r3, [r4, #12]
 800534e:	2300      	movs	r3, #0
 8005350:	6063      	str	r3, [r4, #4]
 8005352:	6923      	ldr	r3, [r4, #16]
 8005354:	6023      	str	r3, [r4, #0]
 8005356:	89a3      	ldrh	r3, [r4, #12]
 8005358:	f043 0308 	orr.w	r3, r3, #8
 800535c:	81a3      	strh	r3, [r4, #12]
 800535e:	6923      	ldr	r3, [r4, #16]
 8005360:	b94b      	cbnz	r3, 8005376 <__swsetup_r+0x9a>
 8005362:	89a3      	ldrh	r3, [r4, #12]
 8005364:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800536c:	d003      	beq.n	8005376 <__swsetup_r+0x9a>
 800536e:	4621      	mov	r1, r4
 8005370:	4630      	mov	r0, r6
 8005372:	f000 fa01 	bl	8005778 <__smakebuf_r>
 8005376:	89a0      	ldrh	r0, [r4, #12]
 8005378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800537c:	f010 0301 	ands.w	r3, r0, #1
 8005380:	d00a      	beq.n	8005398 <__swsetup_r+0xbc>
 8005382:	2300      	movs	r3, #0
 8005384:	60a3      	str	r3, [r4, #8]
 8005386:	6963      	ldr	r3, [r4, #20]
 8005388:	425b      	negs	r3, r3
 800538a:	61a3      	str	r3, [r4, #24]
 800538c:	6923      	ldr	r3, [r4, #16]
 800538e:	b943      	cbnz	r3, 80053a2 <__swsetup_r+0xc6>
 8005390:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005394:	d1ba      	bne.n	800530c <__swsetup_r+0x30>
 8005396:	bd70      	pop	{r4, r5, r6, pc}
 8005398:	0781      	lsls	r1, r0, #30
 800539a:	bf58      	it	pl
 800539c:	6963      	ldrpl	r3, [r4, #20]
 800539e:	60a3      	str	r3, [r4, #8]
 80053a0:	e7f4      	b.n	800538c <__swsetup_r+0xb0>
 80053a2:	2000      	movs	r0, #0
 80053a4:	e7f7      	b.n	8005396 <__swsetup_r+0xba>
 80053a6:	bf00      	nop
 80053a8:	2000000c 	.word	0x2000000c
 80053ac:	0800663c 	.word	0x0800663c
 80053b0:	0800665c 	.word	0x0800665c
 80053b4:	0800661c 	.word	0x0800661c

080053b8 <__sflush_r>:
 80053b8:	898a      	ldrh	r2, [r1, #12]
 80053ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053be:	4605      	mov	r5, r0
 80053c0:	0710      	lsls	r0, r2, #28
 80053c2:	460c      	mov	r4, r1
 80053c4:	d458      	bmi.n	8005478 <__sflush_r+0xc0>
 80053c6:	684b      	ldr	r3, [r1, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	dc05      	bgt.n	80053d8 <__sflush_r+0x20>
 80053cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	dc02      	bgt.n	80053d8 <__sflush_r+0x20>
 80053d2:	2000      	movs	r0, #0
 80053d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053da:	2e00      	cmp	r6, #0
 80053dc:	d0f9      	beq.n	80053d2 <__sflush_r+0x1a>
 80053de:	2300      	movs	r3, #0
 80053e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053e4:	682f      	ldr	r7, [r5, #0]
 80053e6:	602b      	str	r3, [r5, #0]
 80053e8:	d032      	beq.n	8005450 <__sflush_r+0x98>
 80053ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053ec:	89a3      	ldrh	r3, [r4, #12]
 80053ee:	075a      	lsls	r2, r3, #29
 80053f0:	d505      	bpl.n	80053fe <__sflush_r+0x46>
 80053f2:	6863      	ldr	r3, [r4, #4]
 80053f4:	1ac0      	subs	r0, r0, r3
 80053f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053f8:	b10b      	cbz	r3, 80053fe <__sflush_r+0x46>
 80053fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053fc:	1ac0      	subs	r0, r0, r3
 80053fe:	2300      	movs	r3, #0
 8005400:	4602      	mov	r2, r0
 8005402:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005404:	6a21      	ldr	r1, [r4, #32]
 8005406:	4628      	mov	r0, r5
 8005408:	47b0      	blx	r6
 800540a:	1c43      	adds	r3, r0, #1
 800540c:	89a3      	ldrh	r3, [r4, #12]
 800540e:	d106      	bne.n	800541e <__sflush_r+0x66>
 8005410:	6829      	ldr	r1, [r5, #0]
 8005412:	291d      	cmp	r1, #29
 8005414:	d82c      	bhi.n	8005470 <__sflush_r+0xb8>
 8005416:	4a2a      	ldr	r2, [pc, #168]	; (80054c0 <__sflush_r+0x108>)
 8005418:	40ca      	lsrs	r2, r1
 800541a:	07d6      	lsls	r6, r2, #31
 800541c:	d528      	bpl.n	8005470 <__sflush_r+0xb8>
 800541e:	2200      	movs	r2, #0
 8005420:	6062      	str	r2, [r4, #4]
 8005422:	04d9      	lsls	r1, r3, #19
 8005424:	6922      	ldr	r2, [r4, #16]
 8005426:	6022      	str	r2, [r4, #0]
 8005428:	d504      	bpl.n	8005434 <__sflush_r+0x7c>
 800542a:	1c42      	adds	r2, r0, #1
 800542c:	d101      	bne.n	8005432 <__sflush_r+0x7a>
 800542e:	682b      	ldr	r3, [r5, #0]
 8005430:	b903      	cbnz	r3, 8005434 <__sflush_r+0x7c>
 8005432:	6560      	str	r0, [r4, #84]	; 0x54
 8005434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005436:	602f      	str	r7, [r5, #0]
 8005438:	2900      	cmp	r1, #0
 800543a:	d0ca      	beq.n	80053d2 <__sflush_r+0x1a>
 800543c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005440:	4299      	cmp	r1, r3
 8005442:	d002      	beq.n	800544a <__sflush_r+0x92>
 8005444:	4628      	mov	r0, r5
 8005446:	f000 f9df 	bl	8005808 <_free_r>
 800544a:	2000      	movs	r0, #0
 800544c:	6360      	str	r0, [r4, #52]	; 0x34
 800544e:	e7c1      	b.n	80053d4 <__sflush_r+0x1c>
 8005450:	6a21      	ldr	r1, [r4, #32]
 8005452:	2301      	movs	r3, #1
 8005454:	4628      	mov	r0, r5
 8005456:	47b0      	blx	r6
 8005458:	1c41      	adds	r1, r0, #1
 800545a:	d1c7      	bne.n	80053ec <__sflush_r+0x34>
 800545c:	682b      	ldr	r3, [r5, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0c4      	beq.n	80053ec <__sflush_r+0x34>
 8005462:	2b1d      	cmp	r3, #29
 8005464:	d001      	beq.n	800546a <__sflush_r+0xb2>
 8005466:	2b16      	cmp	r3, #22
 8005468:	d101      	bne.n	800546e <__sflush_r+0xb6>
 800546a:	602f      	str	r7, [r5, #0]
 800546c:	e7b1      	b.n	80053d2 <__sflush_r+0x1a>
 800546e:	89a3      	ldrh	r3, [r4, #12]
 8005470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005474:	81a3      	strh	r3, [r4, #12]
 8005476:	e7ad      	b.n	80053d4 <__sflush_r+0x1c>
 8005478:	690f      	ldr	r7, [r1, #16]
 800547a:	2f00      	cmp	r7, #0
 800547c:	d0a9      	beq.n	80053d2 <__sflush_r+0x1a>
 800547e:	0793      	lsls	r3, r2, #30
 8005480:	680e      	ldr	r6, [r1, #0]
 8005482:	bf08      	it	eq
 8005484:	694b      	ldreq	r3, [r1, #20]
 8005486:	600f      	str	r7, [r1, #0]
 8005488:	bf18      	it	ne
 800548a:	2300      	movne	r3, #0
 800548c:	eba6 0807 	sub.w	r8, r6, r7
 8005490:	608b      	str	r3, [r1, #8]
 8005492:	f1b8 0f00 	cmp.w	r8, #0
 8005496:	dd9c      	ble.n	80053d2 <__sflush_r+0x1a>
 8005498:	6a21      	ldr	r1, [r4, #32]
 800549a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800549c:	4643      	mov	r3, r8
 800549e:	463a      	mov	r2, r7
 80054a0:	4628      	mov	r0, r5
 80054a2:	47b0      	blx	r6
 80054a4:	2800      	cmp	r0, #0
 80054a6:	dc06      	bgt.n	80054b6 <__sflush_r+0xfe>
 80054a8:	89a3      	ldrh	r3, [r4, #12]
 80054aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054ae:	81a3      	strh	r3, [r4, #12]
 80054b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054b4:	e78e      	b.n	80053d4 <__sflush_r+0x1c>
 80054b6:	4407      	add	r7, r0
 80054b8:	eba8 0800 	sub.w	r8, r8, r0
 80054bc:	e7e9      	b.n	8005492 <__sflush_r+0xda>
 80054be:	bf00      	nop
 80054c0:	20400001 	.word	0x20400001

080054c4 <_fflush_r>:
 80054c4:	b538      	push	{r3, r4, r5, lr}
 80054c6:	690b      	ldr	r3, [r1, #16]
 80054c8:	4605      	mov	r5, r0
 80054ca:	460c      	mov	r4, r1
 80054cc:	b913      	cbnz	r3, 80054d4 <_fflush_r+0x10>
 80054ce:	2500      	movs	r5, #0
 80054d0:	4628      	mov	r0, r5
 80054d2:	bd38      	pop	{r3, r4, r5, pc}
 80054d4:	b118      	cbz	r0, 80054de <_fflush_r+0x1a>
 80054d6:	6983      	ldr	r3, [r0, #24]
 80054d8:	b90b      	cbnz	r3, 80054de <_fflush_r+0x1a>
 80054da:	f000 f887 	bl	80055ec <__sinit>
 80054de:	4b14      	ldr	r3, [pc, #80]	; (8005530 <_fflush_r+0x6c>)
 80054e0:	429c      	cmp	r4, r3
 80054e2:	d11b      	bne.n	800551c <_fflush_r+0x58>
 80054e4:	686c      	ldr	r4, [r5, #4]
 80054e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0ef      	beq.n	80054ce <_fflush_r+0xa>
 80054ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054f0:	07d0      	lsls	r0, r2, #31
 80054f2:	d404      	bmi.n	80054fe <_fflush_r+0x3a>
 80054f4:	0599      	lsls	r1, r3, #22
 80054f6:	d402      	bmi.n	80054fe <_fflush_r+0x3a>
 80054f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054fa:	f000 f915 	bl	8005728 <__retarget_lock_acquire_recursive>
 80054fe:	4628      	mov	r0, r5
 8005500:	4621      	mov	r1, r4
 8005502:	f7ff ff59 	bl	80053b8 <__sflush_r>
 8005506:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005508:	07da      	lsls	r2, r3, #31
 800550a:	4605      	mov	r5, r0
 800550c:	d4e0      	bmi.n	80054d0 <_fflush_r+0xc>
 800550e:	89a3      	ldrh	r3, [r4, #12]
 8005510:	059b      	lsls	r3, r3, #22
 8005512:	d4dd      	bmi.n	80054d0 <_fflush_r+0xc>
 8005514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005516:	f000 f908 	bl	800572a <__retarget_lock_release_recursive>
 800551a:	e7d9      	b.n	80054d0 <_fflush_r+0xc>
 800551c:	4b05      	ldr	r3, [pc, #20]	; (8005534 <_fflush_r+0x70>)
 800551e:	429c      	cmp	r4, r3
 8005520:	d101      	bne.n	8005526 <_fflush_r+0x62>
 8005522:	68ac      	ldr	r4, [r5, #8]
 8005524:	e7df      	b.n	80054e6 <_fflush_r+0x22>
 8005526:	4b04      	ldr	r3, [pc, #16]	; (8005538 <_fflush_r+0x74>)
 8005528:	429c      	cmp	r4, r3
 800552a:	bf08      	it	eq
 800552c:	68ec      	ldreq	r4, [r5, #12]
 800552e:	e7da      	b.n	80054e6 <_fflush_r+0x22>
 8005530:	0800663c 	.word	0x0800663c
 8005534:	0800665c 	.word	0x0800665c
 8005538:	0800661c 	.word	0x0800661c

0800553c <std>:
 800553c:	2300      	movs	r3, #0
 800553e:	b510      	push	{r4, lr}
 8005540:	4604      	mov	r4, r0
 8005542:	e9c0 3300 	strd	r3, r3, [r0]
 8005546:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800554a:	6083      	str	r3, [r0, #8]
 800554c:	8181      	strh	r1, [r0, #12]
 800554e:	6643      	str	r3, [r0, #100]	; 0x64
 8005550:	81c2      	strh	r2, [r0, #14]
 8005552:	6183      	str	r3, [r0, #24]
 8005554:	4619      	mov	r1, r3
 8005556:	2208      	movs	r2, #8
 8005558:	305c      	adds	r0, #92	; 0x5c
 800555a:	f7ff fd09 	bl	8004f70 <memset>
 800555e:	4b05      	ldr	r3, [pc, #20]	; (8005574 <std+0x38>)
 8005560:	6263      	str	r3, [r4, #36]	; 0x24
 8005562:	4b05      	ldr	r3, [pc, #20]	; (8005578 <std+0x3c>)
 8005564:	62a3      	str	r3, [r4, #40]	; 0x28
 8005566:	4b05      	ldr	r3, [pc, #20]	; (800557c <std+0x40>)
 8005568:	62e3      	str	r3, [r4, #44]	; 0x2c
 800556a:	4b05      	ldr	r3, [pc, #20]	; (8005580 <std+0x44>)
 800556c:	6224      	str	r4, [r4, #32]
 800556e:	6323      	str	r3, [r4, #48]	; 0x30
 8005570:	bd10      	pop	{r4, pc}
 8005572:	bf00      	nop
 8005574:	08005fc5 	.word	0x08005fc5
 8005578:	08005fe7 	.word	0x08005fe7
 800557c:	0800601f 	.word	0x0800601f
 8005580:	08006043 	.word	0x08006043

08005584 <_cleanup_r>:
 8005584:	4901      	ldr	r1, [pc, #4]	; (800558c <_cleanup_r+0x8>)
 8005586:	f000 b8af 	b.w	80056e8 <_fwalk_reent>
 800558a:	bf00      	nop
 800558c:	080054c5 	.word	0x080054c5

08005590 <__sfmoreglue>:
 8005590:	b570      	push	{r4, r5, r6, lr}
 8005592:	2268      	movs	r2, #104	; 0x68
 8005594:	1e4d      	subs	r5, r1, #1
 8005596:	4355      	muls	r5, r2
 8005598:	460e      	mov	r6, r1
 800559a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800559e:	f000 f99f 	bl	80058e0 <_malloc_r>
 80055a2:	4604      	mov	r4, r0
 80055a4:	b140      	cbz	r0, 80055b8 <__sfmoreglue+0x28>
 80055a6:	2100      	movs	r1, #0
 80055a8:	e9c0 1600 	strd	r1, r6, [r0]
 80055ac:	300c      	adds	r0, #12
 80055ae:	60a0      	str	r0, [r4, #8]
 80055b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055b4:	f7ff fcdc 	bl	8004f70 <memset>
 80055b8:	4620      	mov	r0, r4
 80055ba:	bd70      	pop	{r4, r5, r6, pc}

080055bc <__sfp_lock_acquire>:
 80055bc:	4801      	ldr	r0, [pc, #4]	; (80055c4 <__sfp_lock_acquire+0x8>)
 80055be:	f000 b8b3 	b.w	8005728 <__retarget_lock_acquire_recursive>
 80055c2:	bf00      	nop
 80055c4:	20000841 	.word	0x20000841

080055c8 <__sfp_lock_release>:
 80055c8:	4801      	ldr	r0, [pc, #4]	; (80055d0 <__sfp_lock_release+0x8>)
 80055ca:	f000 b8ae 	b.w	800572a <__retarget_lock_release_recursive>
 80055ce:	bf00      	nop
 80055d0:	20000841 	.word	0x20000841

080055d4 <__sinit_lock_acquire>:
 80055d4:	4801      	ldr	r0, [pc, #4]	; (80055dc <__sinit_lock_acquire+0x8>)
 80055d6:	f000 b8a7 	b.w	8005728 <__retarget_lock_acquire_recursive>
 80055da:	bf00      	nop
 80055dc:	20000842 	.word	0x20000842

080055e0 <__sinit_lock_release>:
 80055e0:	4801      	ldr	r0, [pc, #4]	; (80055e8 <__sinit_lock_release+0x8>)
 80055e2:	f000 b8a2 	b.w	800572a <__retarget_lock_release_recursive>
 80055e6:	bf00      	nop
 80055e8:	20000842 	.word	0x20000842

080055ec <__sinit>:
 80055ec:	b510      	push	{r4, lr}
 80055ee:	4604      	mov	r4, r0
 80055f0:	f7ff fff0 	bl	80055d4 <__sinit_lock_acquire>
 80055f4:	69a3      	ldr	r3, [r4, #24]
 80055f6:	b11b      	cbz	r3, 8005600 <__sinit+0x14>
 80055f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055fc:	f7ff bff0 	b.w	80055e0 <__sinit_lock_release>
 8005600:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005604:	6523      	str	r3, [r4, #80]	; 0x50
 8005606:	4b13      	ldr	r3, [pc, #76]	; (8005654 <__sinit+0x68>)
 8005608:	4a13      	ldr	r2, [pc, #76]	; (8005658 <__sinit+0x6c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	62a2      	str	r2, [r4, #40]	; 0x28
 800560e:	42a3      	cmp	r3, r4
 8005610:	bf04      	itt	eq
 8005612:	2301      	moveq	r3, #1
 8005614:	61a3      	streq	r3, [r4, #24]
 8005616:	4620      	mov	r0, r4
 8005618:	f000 f820 	bl	800565c <__sfp>
 800561c:	6060      	str	r0, [r4, #4]
 800561e:	4620      	mov	r0, r4
 8005620:	f000 f81c 	bl	800565c <__sfp>
 8005624:	60a0      	str	r0, [r4, #8]
 8005626:	4620      	mov	r0, r4
 8005628:	f000 f818 	bl	800565c <__sfp>
 800562c:	2200      	movs	r2, #0
 800562e:	60e0      	str	r0, [r4, #12]
 8005630:	2104      	movs	r1, #4
 8005632:	6860      	ldr	r0, [r4, #4]
 8005634:	f7ff ff82 	bl	800553c <std>
 8005638:	68a0      	ldr	r0, [r4, #8]
 800563a:	2201      	movs	r2, #1
 800563c:	2109      	movs	r1, #9
 800563e:	f7ff ff7d 	bl	800553c <std>
 8005642:	68e0      	ldr	r0, [r4, #12]
 8005644:	2202      	movs	r2, #2
 8005646:	2112      	movs	r1, #18
 8005648:	f7ff ff78 	bl	800553c <std>
 800564c:	2301      	movs	r3, #1
 800564e:	61a3      	str	r3, [r4, #24]
 8005650:	e7d2      	b.n	80055f8 <__sinit+0xc>
 8005652:	bf00      	nop
 8005654:	08006618 	.word	0x08006618
 8005658:	08005585 	.word	0x08005585

0800565c <__sfp>:
 800565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565e:	4607      	mov	r7, r0
 8005660:	f7ff ffac 	bl	80055bc <__sfp_lock_acquire>
 8005664:	4b1e      	ldr	r3, [pc, #120]	; (80056e0 <__sfp+0x84>)
 8005666:	681e      	ldr	r6, [r3, #0]
 8005668:	69b3      	ldr	r3, [r6, #24]
 800566a:	b913      	cbnz	r3, 8005672 <__sfp+0x16>
 800566c:	4630      	mov	r0, r6
 800566e:	f7ff ffbd 	bl	80055ec <__sinit>
 8005672:	3648      	adds	r6, #72	; 0x48
 8005674:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005678:	3b01      	subs	r3, #1
 800567a:	d503      	bpl.n	8005684 <__sfp+0x28>
 800567c:	6833      	ldr	r3, [r6, #0]
 800567e:	b30b      	cbz	r3, 80056c4 <__sfp+0x68>
 8005680:	6836      	ldr	r6, [r6, #0]
 8005682:	e7f7      	b.n	8005674 <__sfp+0x18>
 8005684:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005688:	b9d5      	cbnz	r5, 80056c0 <__sfp+0x64>
 800568a:	4b16      	ldr	r3, [pc, #88]	; (80056e4 <__sfp+0x88>)
 800568c:	60e3      	str	r3, [r4, #12]
 800568e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005692:	6665      	str	r5, [r4, #100]	; 0x64
 8005694:	f000 f847 	bl	8005726 <__retarget_lock_init_recursive>
 8005698:	f7ff ff96 	bl	80055c8 <__sfp_lock_release>
 800569c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80056a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80056a4:	6025      	str	r5, [r4, #0]
 80056a6:	61a5      	str	r5, [r4, #24]
 80056a8:	2208      	movs	r2, #8
 80056aa:	4629      	mov	r1, r5
 80056ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80056b0:	f7ff fc5e 	bl	8004f70 <memset>
 80056b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80056b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80056bc:	4620      	mov	r0, r4
 80056be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056c0:	3468      	adds	r4, #104	; 0x68
 80056c2:	e7d9      	b.n	8005678 <__sfp+0x1c>
 80056c4:	2104      	movs	r1, #4
 80056c6:	4638      	mov	r0, r7
 80056c8:	f7ff ff62 	bl	8005590 <__sfmoreglue>
 80056cc:	4604      	mov	r4, r0
 80056ce:	6030      	str	r0, [r6, #0]
 80056d0:	2800      	cmp	r0, #0
 80056d2:	d1d5      	bne.n	8005680 <__sfp+0x24>
 80056d4:	f7ff ff78 	bl	80055c8 <__sfp_lock_release>
 80056d8:	230c      	movs	r3, #12
 80056da:	603b      	str	r3, [r7, #0]
 80056dc:	e7ee      	b.n	80056bc <__sfp+0x60>
 80056de:	bf00      	nop
 80056e0:	08006618 	.word	0x08006618
 80056e4:	ffff0001 	.word	0xffff0001

080056e8 <_fwalk_reent>:
 80056e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056ec:	4606      	mov	r6, r0
 80056ee:	4688      	mov	r8, r1
 80056f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80056f4:	2700      	movs	r7, #0
 80056f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056fa:	f1b9 0901 	subs.w	r9, r9, #1
 80056fe:	d505      	bpl.n	800570c <_fwalk_reent+0x24>
 8005700:	6824      	ldr	r4, [r4, #0]
 8005702:	2c00      	cmp	r4, #0
 8005704:	d1f7      	bne.n	80056f6 <_fwalk_reent+0xe>
 8005706:	4638      	mov	r0, r7
 8005708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800570c:	89ab      	ldrh	r3, [r5, #12]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d907      	bls.n	8005722 <_fwalk_reent+0x3a>
 8005712:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005716:	3301      	adds	r3, #1
 8005718:	d003      	beq.n	8005722 <_fwalk_reent+0x3a>
 800571a:	4629      	mov	r1, r5
 800571c:	4630      	mov	r0, r6
 800571e:	47c0      	blx	r8
 8005720:	4307      	orrs	r7, r0
 8005722:	3568      	adds	r5, #104	; 0x68
 8005724:	e7e9      	b.n	80056fa <_fwalk_reent+0x12>

08005726 <__retarget_lock_init_recursive>:
 8005726:	4770      	bx	lr

08005728 <__retarget_lock_acquire_recursive>:
 8005728:	4770      	bx	lr

0800572a <__retarget_lock_release_recursive>:
 800572a:	4770      	bx	lr

0800572c <__swhatbuf_r>:
 800572c:	b570      	push	{r4, r5, r6, lr}
 800572e:	460e      	mov	r6, r1
 8005730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005734:	2900      	cmp	r1, #0
 8005736:	b096      	sub	sp, #88	; 0x58
 8005738:	4614      	mov	r4, r2
 800573a:	461d      	mov	r5, r3
 800573c:	da08      	bge.n	8005750 <__swhatbuf_r+0x24>
 800573e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	602a      	str	r2, [r5, #0]
 8005746:	061a      	lsls	r2, r3, #24
 8005748:	d410      	bmi.n	800576c <__swhatbuf_r+0x40>
 800574a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800574e:	e00e      	b.n	800576e <__swhatbuf_r+0x42>
 8005750:	466a      	mov	r2, sp
 8005752:	f000 fc9d 	bl	8006090 <_fstat_r>
 8005756:	2800      	cmp	r0, #0
 8005758:	dbf1      	blt.n	800573e <__swhatbuf_r+0x12>
 800575a:	9a01      	ldr	r2, [sp, #4]
 800575c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005760:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005764:	425a      	negs	r2, r3
 8005766:	415a      	adcs	r2, r3
 8005768:	602a      	str	r2, [r5, #0]
 800576a:	e7ee      	b.n	800574a <__swhatbuf_r+0x1e>
 800576c:	2340      	movs	r3, #64	; 0x40
 800576e:	2000      	movs	r0, #0
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	b016      	add	sp, #88	; 0x58
 8005774:	bd70      	pop	{r4, r5, r6, pc}
	...

08005778 <__smakebuf_r>:
 8005778:	898b      	ldrh	r3, [r1, #12]
 800577a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800577c:	079d      	lsls	r5, r3, #30
 800577e:	4606      	mov	r6, r0
 8005780:	460c      	mov	r4, r1
 8005782:	d507      	bpl.n	8005794 <__smakebuf_r+0x1c>
 8005784:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005788:	6023      	str	r3, [r4, #0]
 800578a:	6123      	str	r3, [r4, #16]
 800578c:	2301      	movs	r3, #1
 800578e:	6163      	str	r3, [r4, #20]
 8005790:	b002      	add	sp, #8
 8005792:	bd70      	pop	{r4, r5, r6, pc}
 8005794:	ab01      	add	r3, sp, #4
 8005796:	466a      	mov	r2, sp
 8005798:	f7ff ffc8 	bl	800572c <__swhatbuf_r>
 800579c:	9900      	ldr	r1, [sp, #0]
 800579e:	4605      	mov	r5, r0
 80057a0:	4630      	mov	r0, r6
 80057a2:	f000 f89d 	bl	80058e0 <_malloc_r>
 80057a6:	b948      	cbnz	r0, 80057bc <__smakebuf_r+0x44>
 80057a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ac:	059a      	lsls	r2, r3, #22
 80057ae:	d4ef      	bmi.n	8005790 <__smakebuf_r+0x18>
 80057b0:	f023 0303 	bic.w	r3, r3, #3
 80057b4:	f043 0302 	orr.w	r3, r3, #2
 80057b8:	81a3      	strh	r3, [r4, #12]
 80057ba:	e7e3      	b.n	8005784 <__smakebuf_r+0xc>
 80057bc:	4b0d      	ldr	r3, [pc, #52]	; (80057f4 <__smakebuf_r+0x7c>)
 80057be:	62b3      	str	r3, [r6, #40]	; 0x28
 80057c0:	89a3      	ldrh	r3, [r4, #12]
 80057c2:	6020      	str	r0, [r4, #0]
 80057c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c8:	81a3      	strh	r3, [r4, #12]
 80057ca:	9b00      	ldr	r3, [sp, #0]
 80057cc:	6163      	str	r3, [r4, #20]
 80057ce:	9b01      	ldr	r3, [sp, #4]
 80057d0:	6120      	str	r0, [r4, #16]
 80057d2:	b15b      	cbz	r3, 80057ec <__smakebuf_r+0x74>
 80057d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057d8:	4630      	mov	r0, r6
 80057da:	f000 fc6b 	bl	80060b4 <_isatty_r>
 80057de:	b128      	cbz	r0, 80057ec <__smakebuf_r+0x74>
 80057e0:	89a3      	ldrh	r3, [r4, #12]
 80057e2:	f023 0303 	bic.w	r3, r3, #3
 80057e6:	f043 0301 	orr.w	r3, r3, #1
 80057ea:	81a3      	strh	r3, [r4, #12]
 80057ec:	89a0      	ldrh	r0, [r4, #12]
 80057ee:	4305      	orrs	r5, r0
 80057f0:	81a5      	strh	r5, [r4, #12]
 80057f2:	e7cd      	b.n	8005790 <__smakebuf_r+0x18>
 80057f4:	08005585 	.word	0x08005585

080057f8 <malloc>:
 80057f8:	4b02      	ldr	r3, [pc, #8]	; (8005804 <malloc+0xc>)
 80057fa:	4601      	mov	r1, r0
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	f000 b86f 	b.w	80058e0 <_malloc_r>
 8005802:	bf00      	nop
 8005804:	2000000c 	.word	0x2000000c

08005808 <_free_r>:
 8005808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800580a:	2900      	cmp	r1, #0
 800580c:	d044      	beq.n	8005898 <_free_r+0x90>
 800580e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005812:	9001      	str	r0, [sp, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	f1a1 0404 	sub.w	r4, r1, #4
 800581a:	bfb8      	it	lt
 800581c:	18e4      	addlt	r4, r4, r3
 800581e:	f000 fc6b 	bl	80060f8 <__malloc_lock>
 8005822:	4a1e      	ldr	r2, [pc, #120]	; (800589c <_free_r+0x94>)
 8005824:	9801      	ldr	r0, [sp, #4]
 8005826:	6813      	ldr	r3, [r2, #0]
 8005828:	b933      	cbnz	r3, 8005838 <_free_r+0x30>
 800582a:	6063      	str	r3, [r4, #4]
 800582c:	6014      	str	r4, [r2, #0]
 800582e:	b003      	add	sp, #12
 8005830:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005834:	f000 bc66 	b.w	8006104 <__malloc_unlock>
 8005838:	42a3      	cmp	r3, r4
 800583a:	d908      	bls.n	800584e <_free_r+0x46>
 800583c:	6825      	ldr	r5, [r4, #0]
 800583e:	1961      	adds	r1, r4, r5
 8005840:	428b      	cmp	r3, r1
 8005842:	bf01      	itttt	eq
 8005844:	6819      	ldreq	r1, [r3, #0]
 8005846:	685b      	ldreq	r3, [r3, #4]
 8005848:	1949      	addeq	r1, r1, r5
 800584a:	6021      	streq	r1, [r4, #0]
 800584c:	e7ed      	b.n	800582a <_free_r+0x22>
 800584e:	461a      	mov	r2, r3
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	b10b      	cbz	r3, 8005858 <_free_r+0x50>
 8005854:	42a3      	cmp	r3, r4
 8005856:	d9fa      	bls.n	800584e <_free_r+0x46>
 8005858:	6811      	ldr	r1, [r2, #0]
 800585a:	1855      	adds	r5, r2, r1
 800585c:	42a5      	cmp	r5, r4
 800585e:	d10b      	bne.n	8005878 <_free_r+0x70>
 8005860:	6824      	ldr	r4, [r4, #0]
 8005862:	4421      	add	r1, r4
 8005864:	1854      	adds	r4, r2, r1
 8005866:	42a3      	cmp	r3, r4
 8005868:	6011      	str	r1, [r2, #0]
 800586a:	d1e0      	bne.n	800582e <_free_r+0x26>
 800586c:	681c      	ldr	r4, [r3, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	6053      	str	r3, [r2, #4]
 8005872:	4421      	add	r1, r4
 8005874:	6011      	str	r1, [r2, #0]
 8005876:	e7da      	b.n	800582e <_free_r+0x26>
 8005878:	d902      	bls.n	8005880 <_free_r+0x78>
 800587a:	230c      	movs	r3, #12
 800587c:	6003      	str	r3, [r0, #0]
 800587e:	e7d6      	b.n	800582e <_free_r+0x26>
 8005880:	6825      	ldr	r5, [r4, #0]
 8005882:	1961      	adds	r1, r4, r5
 8005884:	428b      	cmp	r3, r1
 8005886:	bf04      	itt	eq
 8005888:	6819      	ldreq	r1, [r3, #0]
 800588a:	685b      	ldreq	r3, [r3, #4]
 800588c:	6063      	str	r3, [r4, #4]
 800588e:	bf04      	itt	eq
 8005890:	1949      	addeq	r1, r1, r5
 8005892:	6021      	streq	r1, [r4, #0]
 8005894:	6054      	str	r4, [r2, #4]
 8005896:	e7ca      	b.n	800582e <_free_r+0x26>
 8005898:	b003      	add	sp, #12
 800589a:	bd30      	pop	{r4, r5, pc}
 800589c:	20000844 	.word	0x20000844

080058a0 <sbrk_aligned>:
 80058a0:	b570      	push	{r4, r5, r6, lr}
 80058a2:	4e0e      	ldr	r6, [pc, #56]	; (80058dc <sbrk_aligned+0x3c>)
 80058a4:	460c      	mov	r4, r1
 80058a6:	6831      	ldr	r1, [r6, #0]
 80058a8:	4605      	mov	r5, r0
 80058aa:	b911      	cbnz	r1, 80058b2 <sbrk_aligned+0x12>
 80058ac:	f000 fb7a 	bl	8005fa4 <_sbrk_r>
 80058b0:	6030      	str	r0, [r6, #0]
 80058b2:	4621      	mov	r1, r4
 80058b4:	4628      	mov	r0, r5
 80058b6:	f000 fb75 	bl	8005fa4 <_sbrk_r>
 80058ba:	1c43      	adds	r3, r0, #1
 80058bc:	d00a      	beq.n	80058d4 <sbrk_aligned+0x34>
 80058be:	1cc4      	adds	r4, r0, #3
 80058c0:	f024 0403 	bic.w	r4, r4, #3
 80058c4:	42a0      	cmp	r0, r4
 80058c6:	d007      	beq.n	80058d8 <sbrk_aligned+0x38>
 80058c8:	1a21      	subs	r1, r4, r0
 80058ca:	4628      	mov	r0, r5
 80058cc:	f000 fb6a 	bl	8005fa4 <_sbrk_r>
 80058d0:	3001      	adds	r0, #1
 80058d2:	d101      	bne.n	80058d8 <sbrk_aligned+0x38>
 80058d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80058d8:	4620      	mov	r0, r4
 80058da:	bd70      	pop	{r4, r5, r6, pc}
 80058dc:	20000848 	.word	0x20000848

080058e0 <_malloc_r>:
 80058e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e4:	1ccd      	adds	r5, r1, #3
 80058e6:	f025 0503 	bic.w	r5, r5, #3
 80058ea:	3508      	adds	r5, #8
 80058ec:	2d0c      	cmp	r5, #12
 80058ee:	bf38      	it	cc
 80058f0:	250c      	movcc	r5, #12
 80058f2:	2d00      	cmp	r5, #0
 80058f4:	4607      	mov	r7, r0
 80058f6:	db01      	blt.n	80058fc <_malloc_r+0x1c>
 80058f8:	42a9      	cmp	r1, r5
 80058fa:	d905      	bls.n	8005908 <_malloc_r+0x28>
 80058fc:	230c      	movs	r3, #12
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	2600      	movs	r6, #0
 8005902:	4630      	mov	r0, r6
 8005904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005908:	4e2e      	ldr	r6, [pc, #184]	; (80059c4 <_malloc_r+0xe4>)
 800590a:	f000 fbf5 	bl	80060f8 <__malloc_lock>
 800590e:	6833      	ldr	r3, [r6, #0]
 8005910:	461c      	mov	r4, r3
 8005912:	bb34      	cbnz	r4, 8005962 <_malloc_r+0x82>
 8005914:	4629      	mov	r1, r5
 8005916:	4638      	mov	r0, r7
 8005918:	f7ff ffc2 	bl	80058a0 <sbrk_aligned>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	4604      	mov	r4, r0
 8005920:	d14d      	bne.n	80059be <_malloc_r+0xde>
 8005922:	6834      	ldr	r4, [r6, #0]
 8005924:	4626      	mov	r6, r4
 8005926:	2e00      	cmp	r6, #0
 8005928:	d140      	bne.n	80059ac <_malloc_r+0xcc>
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	4631      	mov	r1, r6
 800592e:	4638      	mov	r0, r7
 8005930:	eb04 0803 	add.w	r8, r4, r3
 8005934:	f000 fb36 	bl	8005fa4 <_sbrk_r>
 8005938:	4580      	cmp	r8, r0
 800593a:	d13a      	bne.n	80059b2 <_malloc_r+0xd2>
 800593c:	6821      	ldr	r1, [r4, #0]
 800593e:	3503      	adds	r5, #3
 8005940:	1a6d      	subs	r5, r5, r1
 8005942:	f025 0503 	bic.w	r5, r5, #3
 8005946:	3508      	adds	r5, #8
 8005948:	2d0c      	cmp	r5, #12
 800594a:	bf38      	it	cc
 800594c:	250c      	movcc	r5, #12
 800594e:	4629      	mov	r1, r5
 8005950:	4638      	mov	r0, r7
 8005952:	f7ff ffa5 	bl	80058a0 <sbrk_aligned>
 8005956:	3001      	adds	r0, #1
 8005958:	d02b      	beq.n	80059b2 <_malloc_r+0xd2>
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	442b      	add	r3, r5
 800595e:	6023      	str	r3, [r4, #0]
 8005960:	e00e      	b.n	8005980 <_malloc_r+0xa0>
 8005962:	6822      	ldr	r2, [r4, #0]
 8005964:	1b52      	subs	r2, r2, r5
 8005966:	d41e      	bmi.n	80059a6 <_malloc_r+0xc6>
 8005968:	2a0b      	cmp	r2, #11
 800596a:	d916      	bls.n	800599a <_malloc_r+0xba>
 800596c:	1961      	adds	r1, r4, r5
 800596e:	42a3      	cmp	r3, r4
 8005970:	6025      	str	r5, [r4, #0]
 8005972:	bf18      	it	ne
 8005974:	6059      	strne	r1, [r3, #4]
 8005976:	6863      	ldr	r3, [r4, #4]
 8005978:	bf08      	it	eq
 800597a:	6031      	streq	r1, [r6, #0]
 800597c:	5162      	str	r2, [r4, r5]
 800597e:	604b      	str	r3, [r1, #4]
 8005980:	4638      	mov	r0, r7
 8005982:	f104 060b 	add.w	r6, r4, #11
 8005986:	f000 fbbd 	bl	8006104 <__malloc_unlock>
 800598a:	f026 0607 	bic.w	r6, r6, #7
 800598e:	1d23      	adds	r3, r4, #4
 8005990:	1af2      	subs	r2, r6, r3
 8005992:	d0b6      	beq.n	8005902 <_malloc_r+0x22>
 8005994:	1b9b      	subs	r3, r3, r6
 8005996:	50a3      	str	r3, [r4, r2]
 8005998:	e7b3      	b.n	8005902 <_malloc_r+0x22>
 800599a:	6862      	ldr	r2, [r4, #4]
 800599c:	42a3      	cmp	r3, r4
 800599e:	bf0c      	ite	eq
 80059a0:	6032      	streq	r2, [r6, #0]
 80059a2:	605a      	strne	r2, [r3, #4]
 80059a4:	e7ec      	b.n	8005980 <_malloc_r+0xa0>
 80059a6:	4623      	mov	r3, r4
 80059a8:	6864      	ldr	r4, [r4, #4]
 80059aa:	e7b2      	b.n	8005912 <_malloc_r+0x32>
 80059ac:	4634      	mov	r4, r6
 80059ae:	6876      	ldr	r6, [r6, #4]
 80059b0:	e7b9      	b.n	8005926 <_malloc_r+0x46>
 80059b2:	230c      	movs	r3, #12
 80059b4:	603b      	str	r3, [r7, #0]
 80059b6:	4638      	mov	r0, r7
 80059b8:	f000 fba4 	bl	8006104 <__malloc_unlock>
 80059bc:	e7a1      	b.n	8005902 <_malloc_r+0x22>
 80059be:	6025      	str	r5, [r4, #0]
 80059c0:	e7de      	b.n	8005980 <_malloc_r+0xa0>
 80059c2:	bf00      	nop
 80059c4:	20000844 	.word	0x20000844

080059c8 <__sfputc_r>:
 80059c8:	6893      	ldr	r3, [r2, #8]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	b410      	push	{r4}
 80059d0:	6093      	str	r3, [r2, #8]
 80059d2:	da08      	bge.n	80059e6 <__sfputc_r+0x1e>
 80059d4:	6994      	ldr	r4, [r2, #24]
 80059d6:	42a3      	cmp	r3, r4
 80059d8:	db01      	blt.n	80059de <__sfputc_r+0x16>
 80059da:	290a      	cmp	r1, #10
 80059dc:	d103      	bne.n	80059e6 <__sfputc_r+0x1e>
 80059de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059e2:	f7ff bc29 	b.w	8005238 <__swbuf_r>
 80059e6:	6813      	ldr	r3, [r2, #0]
 80059e8:	1c58      	adds	r0, r3, #1
 80059ea:	6010      	str	r0, [r2, #0]
 80059ec:	7019      	strb	r1, [r3, #0]
 80059ee:	4608      	mov	r0, r1
 80059f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <__sfputs_r>:
 80059f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f8:	4606      	mov	r6, r0
 80059fa:	460f      	mov	r7, r1
 80059fc:	4614      	mov	r4, r2
 80059fe:	18d5      	adds	r5, r2, r3
 8005a00:	42ac      	cmp	r4, r5
 8005a02:	d101      	bne.n	8005a08 <__sfputs_r+0x12>
 8005a04:	2000      	movs	r0, #0
 8005a06:	e007      	b.n	8005a18 <__sfputs_r+0x22>
 8005a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a0c:	463a      	mov	r2, r7
 8005a0e:	4630      	mov	r0, r6
 8005a10:	f7ff ffda 	bl	80059c8 <__sfputc_r>
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	d1f3      	bne.n	8005a00 <__sfputs_r+0xa>
 8005a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a1c <_vfiprintf_r>:
 8005a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a20:	460d      	mov	r5, r1
 8005a22:	b09d      	sub	sp, #116	; 0x74
 8005a24:	4614      	mov	r4, r2
 8005a26:	4698      	mov	r8, r3
 8005a28:	4606      	mov	r6, r0
 8005a2a:	b118      	cbz	r0, 8005a34 <_vfiprintf_r+0x18>
 8005a2c:	6983      	ldr	r3, [r0, #24]
 8005a2e:	b90b      	cbnz	r3, 8005a34 <_vfiprintf_r+0x18>
 8005a30:	f7ff fddc 	bl	80055ec <__sinit>
 8005a34:	4b89      	ldr	r3, [pc, #548]	; (8005c5c <_vfiprintf_r+0x240>)
 8005a36:	429d      	cmp	r5, r3
 8005a38:	d11b      	bne.n	8005a72 <_vfiprintf_r+0x56>
 8005a3a:	6875      	ldr	r5, [r6, #4]
 8005a3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a3e:	07d9      	lsls	r1, r3, #31
 8005a40:	d405      	bmi.n	8005a4e <_vfiprintf_r+0x32>
 8005a42:	89ab      	ldrh	r3, [r5, #12]
 8005a44:	059a      	lsls	r2, r3, #22
 8005a46:	d402      	bmi.n	8005a4e <_vfiprintf_r+0x32>
 8005a48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a4a:	f7ff fe6d 	bl	8005728 <__retarget_lock_acquire_recursive>
 8005a4e:	89ab      	ldrh	r3, [r5, #12]
 8005a50:	071b      	lsls	r3, r3, #28
 8005a52:	d501      	bpl.n	8005a58 <_vfiprintf_r+0x3c>
 8005a54:	692b      	ldr	r3, [r5, #16]
 8005a56:	b9eb      	cbnz	r3, 8005a94 <_vfiprintf_r+0x78>
 8005a58:	4629      	mov	r1, r5
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	f7ff fc3e 	bl	80052dc <__swsetup_r>
 8005a60:	b1c0      	cbz	r0, 8005a94 <_vfiprintf_r+0x78>
 8005a62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a64:	07dc      	lsls	r4, r3, #31
 8005a66:	d50e      	bpl.n	8005a86 <_vfiprintf_r+0x6a>
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a6c:	b01d      	add	sp, #116	; 0x74
 8005a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a72:	4b7b      	ldr	r3, [pc, #492]	; (8005c60 <_vfiprintf_r+0x244>)
 8005a74:	429d      	cmp	r5, r3
 8005a76:	d101      	bne.n	8005a7c <_vfiprintf_r+0x60>
 8005a78:	68b5      	ldr	r5, [r6, #8]
 8005a7a:	e7df      	b.n	8005a3c <_vfiprintf_r+0x20>
 8005a7c:	4b79      	ldr	r3, [pc, #484]	; (8005c64 <_vfiprintf_r+0x248>)
 8005a7e:	429d      	cmp	r5, r3
 8005a80:	bf08      	it	eq
 8005a82:	68f5      	ldreq	r5, [r6, #12]
 8005a84:	e7da      	b.n	8005a3c <_vfiprintf_r+0x20>
 8005a86:	89ab      	ldrh	r3, [r5, #12]
 8005a88:	0598      	lsls	r0, r3, #22
 8005a8a:	d4ed      	bmi.n	8005a68 <_vfiprintf_r+0x4c>
 8005a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a8e:	f7ff fe4c 	bl	800572a <__retarget_lock_release_recursive>
 8005a92:	e7e9      	b.n	8005a68 <_vfiprintf_r+0x4c>
 8005a94:	2300      	movs	r3, #0
 8005a96:	9309      	str	r3, [sp, #36]	; 0x24
 8005a98:	2320      	movs	r3, #32
 8005a9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aa2:	2330      	movs	r3, #48	; 0x30
 8005aa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005c68 <_vfiprintf_r+0x24c>
 8005aa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005aac:	f04f 0901 	mov.w	r9, #1
 8005ab0:	4623      	mov	r3, r4
 8005ab2:	469a      	mov	sl, r3
 8005ab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ab8:	b10a      	cbz	r2, 8005abe <_vfiprintf_r+0xa2>
 8005aba:	2a25      	cmp	r2, #37	; 0x25
 8005abc:	d1f9      	bne.n	8005ab2 <_vfiprintf_r+0x96>
 8005abe:	ebba 0b04 	subs.w	fp, sl, r4
 8005ac2:	d00b      	beq.n	8005adc <_vfiprintf_r+0xc0>
 8005ac4:	465b      	mov	r3, fp
 8005ac6:	4622      	mov	r2, r4
 8005ac8:	4629      	mov	r1, r5
 8005aca:	4630      	mov	r0, r6
 8005acc:	f7ff ff93 	bl	80059f6 <__sfputs_r>
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	f000 80aa 	beq.w	8005c2a <_vfiprintf_r+0x20e>
 8005ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ad8:	445a      	add	r2, fp
 8005ada:	9209      	str	r2, [sp, #36]	; 0x24
 8005adc:	f89a 3000 	ldrb.w	r3, [sl]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 80a2 	beq.w	8005c2a <_vfiprintf_r+0x20e>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005aec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005af0:	f10a 0a01 	add.w	sl, sl, #1
 8005af4:	9304      	str	r3, [sp, #16]
 8005af6:	9307      	str	r3, [sp, #28]
 8005af8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005afc:	931a      	str	r3, [sp, #104]	; 0x68
 8005afe:	4654      	mov	r4, sl
 8005b00:	2205      	movs	r2, #5
 8005b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b06:	4858      	ldr	r0, [pc, #352]	; (8005c68 <_vfiprintf_r+0x24c>)
 8005b08:	f7fa fb62 	bl	80001d0 <memchr>
 8005b0c:	9a04      	ldr	r2, [sp, #16]
 8005b0e:	b9d8      	cbnz	r0, 8005b48 <_vfiprintf_r+0x12c>
 8005b10:	06d1      	lsls	r1, r2, #27
 8005b12:	bf44      	itt	mi
 8005b14:	2320      	movmi	r3, #32
 8005b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b1a:	0713      	lsls	r3, r2, #28
 8005b1c:	bf44      	itt	mi
 8005b1e:	232b      	movmi	r3, #43	; 0x2b
 8005b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b24:	f89a 3000 	ldrb.w	r3, [sl]
 8005b28:	2b2a      	cmp	r3, #42	; 0x2a
 8005b2a:	d015      	beq.n	8005b58 <_vfiprintf_r+0x13c>
 8005b2c:	9a07      	ldr	r2, [sp, #28]
 8005b2e:	4654      	mov	r4, sl
 8005b30:	2000      	movs	r0, #0
 8005b32:	f04f 0c0a 	mov.w	ip, #10
 8005b36:	4621      	mov	r1, r4
 8005b38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b3c:	3b30      	subs	r3, #48	; 0x30
 8005b3e:	2b09      	cmp	r3, #9
 8005b40:	d94e      	bls.n	8005be0 <_vfiprintf_r+0x1c4>
 8005b42:	b1b0      	cbz	r0, 8005b72 <_vfiprintf_r+0x156>
 8005b44:	9207      	str	r2, [sp, #28]
 8005b46:	e014      	b.n	8005b72 <_vfiprintf_r+0x156>
 8005b48:	eba0 0308 	sub.w	r3, r0, r8
 8005b4c:	fa09 f303 	lsl.w	r3, r9, r3
 8005b50:	4313      	orrs	r3, r2
 8005b52:	9304      	str	r3, [sp, #16]
 8005b54:	46a2      	mov	sl, r4
 8005b56:	e7d2      	b.n	8005afe <_vfiprintf_r+0xe2>
 8005b58:	9b03      	ldr	r3, [sp, #12]
 8005b5a:	1d19      	adds	r1, r3, #4
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	9103      	str	r1, [sp, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	bfbb      	ittet	lt
 8005b64:	425b      	neglt	r3, r3
 8005b66:	f042 0202 	orrlt.w	r2, r2, #2
 8005b6a:	9307      	strge	r3, [sp, #28]
 8005b6c:	9307      	strlt	r3, [sp, #28]
 8005b6e:	bfb8      	it	lt
 8005b70:	9204      	strlt	r2, [sp, #16]
 8005b72:	7823      	ldrb	r3, [r4, #0]
 8005b74:	2b2e      	cmp	r3, #46	; 0x2e
 8005b76:	d10c      	bne.n	8005b92 <_vfiprintf_r+0x176>
 8005b78:	7863      	ldrb	r3, [r4, #1]
 8005b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b7c:	d135      	bne.n	8005bea <_vfiprintf_r+0x1ce>
 8005b7e:	9b03      	ldr	r3, [sp, #12]
 8005b80:	1d1a      	adds	r2, r3, #4
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	9203      	str	r2, [sp, #12]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	bfb8      	it	lt
 8005b8a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005b8e:	3402      	adds	r4, #2
 8005b90:	9305      	str	r3, [sp, #20]
 8005b92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005c78 <_vfiprintf_r+0x25c>
 8005b96:	7821      	ldrb	r1, [r4, #0]
 8005b98:	2203      	movs	r2, #3
 8005b9a:	4650      	mov	r0, sl
 8005b9c:	f7fa fb18 	bl	80001d0 <memchr>
 8005ba0:	b140      	cbz	r0, 8005bb4 <_vfiprintf_r+0x198>
 8005ba2:	2340      	movs	r3, #64	; 0x40
 8005ba4:	eba0 000a 	sub.w	r0, r0, sl
 8005ba8:	fa03 f000 	lsl.w	r0, r3, r0
 8005bac:	9b04      	ldr	r3, [sp, #16]
 8005bae:	4303      	orrs	r3, r0
 8005bb0:	3401      	adds	r4, #1
 8005bb2:	9304      	str	r3, [sp, #16]
 8005bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bb8:	482c      	ldr	r0, [pc, #176]	; (8005c6c <_vfiprintf_r+0x250>)
 8005bba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bbe:	2206      	movs	r2, #6
 8005bc0:	f7fa fb06 	bl	80001d0 <memchr>
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d03f      	beq.n	8005c48 <_vfiprintf_r+0x22c>
 8005bc8:	4b29      	ldr	r3, [pc, #164]	; (8005c70 <_vfiprintf_r+0x254>)
 8005bca:	bb1b      	cbnz	r3, 8005c14 <_vfiprintf_r+0x1f8>
 8005bcc:	9b03      	ldr	r3, [sp, #12]
 8005bce:	3307      	adds	r3, #7
 8005bd0:	f023 0307 	bic.w	r3, r3, #7
 8005bd4:	3308      	adds	r3, #8
 8005bd6:	9303      	str	r3, [sp, #12]
 8005bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bda:	443b      	add	r3, r7
 8005bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8005bde:	e767      	b.n	8005ab0 <_vfiprintf_r+0x94>
 8005be0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005be4:	460c      	mov	r4, r1
 8005be6:	2001      	movs	r0, #1
 8005be8:	e7a5      	b.n	8005b36 <_vfiprintf_r+0x11a>
 8005bea:	2300      	movs	r3, #0
 8005bec:	3401      	adds	r4, #1
 8005bee:	9305      	str	r3, [sp, #20]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	f04f 0c0a 	mov.w	ip, #10
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bfc:	3a30      	subs	r2, #48	; 0x30
 8005bfe:	2a09      	cmp	r2, #9
 8005c00:	d903      	bls.n	8005c0a <_vfiprintf_r+0x1ee>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0c5      	beq.n	8005b92 <_vfiprintf_r+0x176>
 8005c06:	9105      	str	r1, [sp, #20]
 8005c08:	e7c3      	b.n	8005b92 <_vfiprintf_r+0x176>
 8005c0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c0e:	4604      	mov	r4, r0
 8005c10:	2301      	movs	r3, #1
 8005c12:	e7f0      	b.n	8005bf6 <_vfiprintf_r+0x1da>
 8005c14:	ab03      	add	r3, sp, #12
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	462a      	mov	r2, r5
 8005c1a:	4b16      	ldr	r3, [pc, #88]	; (8005c74 <_vfiprintf_r+0x258>)
 8005c1c:	a904      	add	r1, sp, #16
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f3af 8000 	nop.w
 8005c24:	4607      	mov	r7, r0
 8005c26:	1c78      	adds	r0, r7, #1
 8005c28:	d1d6      	bne.n	8005bd8 <_vfiprintf_r+0x1bc>
 8005c2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c2c:	07d9      	lsls	r1, r3, #31
 8005c2e:	d405      	bmi.n	8005c3c <_vfiprintf_r+0x220>
 8005c30:	89ab      	ldrh	r3, [r5, #12]
 8005c32:	059a      	lsls	r2, r3, #22
 8005c34:	d402      	bmi.n	8005c3c <_vfiprintf_r+0x220>
 8005c36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c38:	f7ff fd77 	bl	800572a <__retarget_lock_release_recursive>
 8005c3c:	89ab      	ldrh	r3, [r5, #12]
 8005c3e:	065b      	lsls	r3, r3, #25
 8005c40:	f53f af12 	bmi.w	8005a68 <_vfiprintf_r+0x4c>
 8005c44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c46:	e711      	b.n	8005a6c <_vfiprintf_r+0x50>
 8005c48:	ab03      	add	r3, sp, #12
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	462a      	mov	r2, r5
 8005c4e:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <_vfiprintf_r+0x258>)
 8005c50:	a904      	add	r1, sp, #16
 8005c52:	4630      	mov	r0, r6
 8005c54:	f000 f880 	bl	8005d58 <_printf_i>
 8005c58:	e7e4      	b.n	8005c24 <_vfiprintf_r+0x208>
 8005c5a:	bf00      	nop
 8005c5c:	0800663c 	.word	0x0800663c
 8005c60:	0800665c 	.word	0x0800665c
 8005c64:	0800661c 	.word	0x0800661c
 8005c68:	0800667c 	.word	0x0800667c
 8005c6c:	08006686 	.word	0x08006686
 8005c70:	00000000 	.word	0x00000000
 8005c74:	080059f7 	.word	0x080059f7
 8005c78:	08006682 	.word	0x08006682

08005c7c <_printf_common>:
 8005c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c80:	4616      	mov	r6, r2
 8005c82:	4699      	mov	r9, r3
 8005c84:	688a      	ldr	r2, [r1, #8]
 8005c86:	690b      	ldr	r3, [r1, #16]
 8005c88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	bfb8      	it	lt
 8005c90:	4613      	movlt	r3, r2
 8005c92:	6033      	str	r3, [r6, #0]
 8005c94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c98:	4607      	mov	r7, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	b10a      	cbz	r2, 8005ca2 <_printf_common+0x26>
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	6033      	str	r3, [r6, #0]
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	0699      	lsls	r1, r3, #26
 8005ca6:	bf42      	ittt	mi
 8005ca8:	6833      	ldrmi	r3, [r6, #0]
 8005caa:	3302      	addmi	r3, #2
 8005cac:	6033      	strmi	r3, [r6, #0]
 8005cae:	6825      	ldr	r5, [r4, #0]
 8005cb0:	f015 0506 	ands.w	r5, r5, #6
 8005cb4:	d106      	bne.n	8005cc4 <_printf_common+0x48>
 8005cb6:	f104 0a19 	add.w	sl, r4, #25
 8005cba:	68e3      	ldr	r3, [r4, #12]
 8005cbc:	6832      	ldr	r2, [r6, #0]
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	42ab      	cmp	r3, r5
 8005cc2:	dc26      	bgt.n	8005d12 <_printf_common+0x96>
 8005cc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cc8:	1e13      	subs	r3, r2, #0
 8005cca:	6822      	ldr	r2, [r4, #0]
 8005ccc:	bf18      	it	ne
 8005cce:	2301      	movne	r3, #1
 8005cd0:	0692      	lsls	r2, r2, #26
 8005cd2:	d42b      	bmi.n	8005d2c <_printf_common+0xb0>
 8005cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cd8:	4649      	mov	r1, r9
 8005cda:	4638      	mov	r0, r7
 8005cdc:	47c0      	blx	r8
 8005cde:	3001      	adds	r0, #1
 8005ce0:	d01e      	beq.n	8005d20 <_printf_common+0xa4>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	68e5      	ldr	r5, [r4, #12]
 8005ce6:	6832      	ldr	r2, [r6, #0]
 8005ce8:	f003 0306 	and.w	r3, r3, #6
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	bf08      	it	eq
 8005cf0:	1aad      	subeq	r5, r5, r2
 8005cf2:	68a3      	ldr	r3, [r4, #8]
 8005cf4:	6922      	ldr	r2, [r4, #16]
 8005cf6:	bf0c      	ite	eq
 8005cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cfc:	2500      	movne	r5, #0
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	bfc4      	itt	gt
 8005d02:	1a9b      	subgt	r3, r3, r2
 8005d04:	18ed      	addgt	r5, r5, r3
 8005d06:	2600      	movs	r6, #0
 8005d08:	341a      	adds	r4, #26
 8005d0a:	42b5      	cmp	r5, r6
 8005d0c:	d11a      	bne.n	8005d44 <_printf_common+0xc8>
 8005d0e:	2000      	movs	r0, #0
 8005d10:	e008      	b.n	8005d24 <_printf_common+0xa8>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4652      	mov	r2, sl
 8005d16:	4649      	mov	r1, r9
 8005d18:	4638      	mov	r0, r7
 8005d1a:	47c0      	blx	r8
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d103      	bne.n	8005d28 <_printf_common+0xac>
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d28:	3501      	adds	r5, #1
 8005d2a:	e7c6      	b.n	8005cba <_printf_common+0x3e>
 8005d2c:	18e1      	adds	r1, r4, r3
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	2030      	movs	r0, #48	; 0x30
 8005d32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d36:	4422      	add	r2, r4
 8005d38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d40:	3302      	adds	r3, #2
 8005d42:	e7c7      	b.n	8005cd4 <_printf_common+0x58>
 8005d44:	2301      	movs	r3, #1
 8005d46:	4622      	mov	r2, r4
 8005d48:	4649      	mov	r1, r9
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	47c0      	blx	r8
 8005d4e:	3001      	adds	r0, #1
 8005d50:	d0e6      	beq.n	8005d20 <_printf_common+0xa4>
 8005d52:	3601      	adds	r6, #1
 8005d54:	e7d9      	b.n	8005d0a <_printf_common+0x8e>
	...

08005d58 <_printf_i>:
 8005d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d5c:	7e0f      	ldrb	r7, [r1, #24]
 8005d5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d60:	2f78      	cmp	r7, #120	; 0x78
 8005d62:	4691      	mov	r9, r2
 8005d64:	4680      	mov	r8, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	469a      	mov	sl, r3
 8005d6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d6e:	d807      	bhi.n	8005d80 <_printf_i+0x28>
 8005d70:	2f62      	cmp	r7, #98	; 0x62
 8005d72:	d80a      	bhi.n	8005d8a <_printf_i+0x32>
 8005d74:	2f00      	cmp	r7, #0
 8005d76:	f000 80d8 	beq.w	8005f2a <_printf_i+0x1d2>
 8005d7a:	2f58      	cmp	r7, #88	; 0x58
 8005d7c:	f000 80a3 	beq.w	8005ec6 <_printf_i+0x16e>
 8005d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d88:	e03a      	b.n	8005e00 <_printf_i+0xa8>
 8005d8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d8e:	2b15      	cmp	r3, #21
 8005d90:	d8f6      	bhi.n	8005d80 <_printf_i+0x28>
 8005d92:	a101      	add	r1, pc, #4	; (adr r1, 8005d98 <_printf_i+0x40>)
 8005d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d98:	08005df1 	.word	0x08005df1
 8005d9c:	08005e05 	.word	0x08005e05
 8005da0:	08005d81 	.word	0x08005d81
 8005da4:	08005d81 	.word	0x08005d81
 8005da8:	08005d81 	.word	0x08005d81
 8005dac:	08005d81 	.word	0x08005d81
 8005db0:	08005e05 	.word	0x08005e05
 8005db4:	08005d81 	.word	0x08005d81
 8005db8:	08005d81 	.word	0x08005d81
 8005dbc:	08005d81 	.word	0x08005d81
 8005dc0:	08005d81 	.word	0x08005d81
 8005dc4:	08005f11 	.word	0x08005f11
 8005dc8:	08005e35 	.word	0x08005e35
 8005dcc:	08005ef3 	.word	0x08005ef3
 8005dd0:	08005d81 	.word	0x08005d81
 8005dd4:	08005d81 	.word	0x08005d81
 8005dd8:	08005f33 	.word	0x08005f33
 8005ddc:	08005d81 	.word	0x08005d81
 8005de0:	08005e35 	.word	0x08005e35
 8005de4:	08005d81 	.word	0x08005d81
 8005de8:	08005d81 	.word	0x08005d81
 8005dec:	08005efb 	.word	0x08005efb
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	1d1a      	adds	r2, r3, #4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	602a      	str	r2, [r5, #0]
 8005df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e00:	2301      	movs	r3, #1
 8005e02:	e0a3      	b.n	8005f4c <_printf_i+0x1f4>
 8005e04:	6820      	ldr	r0, [r4, #0]
 8005e06:	6829      	ldr	r1, [r5, #0]
 8005e08:	0606      	lsls	r6, r0, #24
 8005e0a:	f101 0304 	add.w	r3, r1, #4
 8005e0e:	d50a      	bpl.n	8005e26 <_printf_i+0xce>
 8005e10:	680e      	ldr	r6, [r1, #0]
 8005e12:	602b      	str	r3, [r5, #0]
 8005e14:	2e00      	cmp	r6, #0
 8005e16:	da03      	bge.n	8005e20 <_printf_i+0xc8>
 8005e18:	232d      	movs	r3, #45	; 0x2d
 8005e1a:	4276      	negs	r6, r6
 8005e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e20:	485e      	ldr	r0, [pc, #376]	; (8005f9c <_printf_i+0x244>)
 8005e22:	230a      	movs	r3, #10
 8005e24:	e019      	b.n	8005e5a <_printf_i+0x102>
 8005e26:	680e      	ldr	r6, [r1, #0]
 8005e28:	602b      	str	r3, [r5, #0]
 8005e2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e2e:	bf18      	it	ne
 8005e30:	b236      	sxthne	r6, r6
 8005e32:	e7ef      	b.n	8005e14 <_printf_i+0xbc>
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	6820      	ldr	r0, [r4, #0]
 8005e38:	1d19      	adds	r1, r3, #4
 8005e3a:	6029      	str	r1, [r5, #0]
 8005e3c:	0601      	lsls	r1, r0, #24
 8005e3e:	d501      	bpl.n	8005e44 <_printf_i+0xec>
 8005e40:	681e      	ldr	r6, [r3, #0]
 8005e42:	e002      	b.n	8005e4a <_printf_i+0xf2>
 8005e44:	0646      	lsls	r6, r0, #25
 8005e46:	d5fb      	bpl.n	8005e40 <_printf_i+0xe8>
 8005e48:	881e      	ldrh	r6, [r3, #0]
 8005e4a:	4854      	ldr	r0, [pc, #336]	; (8005f9c <_printf_i+0x244>)
 8005e4c:	2f6f      	cmp	r7, #111	; 0x6f
 8005e4e:	bf0c      	ite	eq
 8005e50:	2308      	moveq	r3, #8
 8005e52:	230a      	movne	r3, #10
 8005e54:	2100      	movs	r1, #0
 8005e56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e5a:	6865      	ldr	r5, [r4, #4]
 8005e5c:	60a5      	str	r5, [r4, #8]
 8005e5e:	2d00      	cmp	r5, #0
 8005e60:	bfa2      	ittt	ge
 8005e62:	6821      	ldrge	r1, [r4, #0]
 8005e64:	f021 0104 	bicge.w	r1, r1, #4
 8005e68:	6021      	strge	r1, [r4, #0]
 8005e6a:	b90e      	cbnz	r6, 8005e70 <_printf_i+0x118>
 8005e6c:	2d00      	cmp	r5, #0
 8005e6e:	d04d      	beq.n	8005f0c <_printf_i+0x1b4>
 8005e70:	4615      	mov	r5, r2
 8005e72:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e76:	fb03 6711 	mls	r7, r3, r1, r6
 8005e7a:	5dc7      	ldrb	r7, [r0, r7]
 8005e7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e80:	4637      	mov	r7, r6
 8005e82:	42bb      	cmp	r3, r7
 8005e84:	460e      	mov	r6, r1
 8005e86:	d9f4      	bls.n	8005e72 <_printf_i+0x11a>
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d10b      	bne.n	8005ea4 <_printf_i+0x14c>
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	07de      	lsls	r6, r3, #31
 8005e90:	d508      	bpl.n	8005ea4 <_printf_i+0x14c>
 8005e92:	6923      	ldr	r3, [r4, #16]
 8005e94:	6861      	ldr	r1, [r4, #4]
 8005e96:	4299      	cmp	r1, r3
 8005e98:	bfde      	ittt	le
 8005e9a:	2330      	movle	r3, #48	; 0x30
 8005e9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ea0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005ea4:	1b52      	subs	r2, r2, r5
 8005ea6:	6122      	str	r2, [r4, #16]
 8005ea8:	f8cd a000 	str.w	sl, [sp]
 8005eac:	464b      	mov	r3, r9
 8005eae:	aa03      	add	r2, sp, #12
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	4640      	mov	r0, r8
 8005eb4:	f7ff fee2 	bl	8005c7c <_printf_common>
 8005eb8:	3001      	adds	r0, #1
 8005eba:	d14c      	bne.n	8005f56 <_printf_i+0x1fe>
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ec0:	b004      	add	sp, #16
 8005ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec6:	4835      	ldr	r0, [pc, #212]	; (8005f9c <_printf_i+0x244>)
 8005ec8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ecc:	6829      	ldr	r1, [r5, #0]
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ed4:	6029      	str	r1, [r5, #0]
 8005ed6:	061d      	lsls	r5, r3, #24
 8005ed8:	d514      	bpl.n	8005f04 <_printf_i+0x1ac>
 8005eda:	07df      	lsls	r7, r3, #31
 8005edc:	bf44      	itt	mi
 8005ede:	f043 0320 	orrmi.w	r3, r3, #32
 8005ee2:	6023      	strmi	r3, [r4, #0]
 8005ee4:	b91e      	cbnz	r6, 8005eee <_printf_i+0x196>
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	f023 0320 	bic.w	r3, r3, #32
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	2310      	movs	r3, #16
 8005ef0:	e7b0      	b.n	8005e54 <_printf_i+0xfc>
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	f043 0320 	orr.w	r3, r3, #32
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	2378      	movs	r3, #120	; 0x78
 8005efc:	4828      	ldr	r0, [pc, #160]	; (8005fa0 <_printf_i+0x248>)
 8005efe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f02:	e7e3      	b.n	8005ecc <_printf_i+0x174>
 8005f04:	0659      	lsls	r1, r3, #25
 8005f06:	bf48      	it	mi
 8005f08:	b2b6      	uxthmi	r6, r6
 8005f0a:	e7e6      	b.n	8005eda <_printf_i+0x182>
 8005f0c:	4615      	mov	r5, r2
 8005f0e:	e7bb      	b.n	8005e88 <_printf_i+0x130>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	6826      	ldr	r6, [r4, #0]
 8005f14:	6961      	ldr	r1, [r4, #20]
 8005f16:	1d18      	adds	r0, r3, #4
 8005f18:	6028      	str	r0, [r5, #0]
 8005f1a:	0635      	lsls	r5, r6, #24
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	d501      	bpl.n	8005f24 <_printf_i+0x1cc>
 8005f20:	6019      	str	r1, [r3, #0]
 8005f22:	e002      	b.n	8005f2a <_printf_i+0x1d2>
 8005f24:	0670      	lsls	r0, r6, #25
 8005f26:	d5fb      	bpl.n	8005f20 <_printf_i+0x1c8>
 8005f28:	8019      	strh	r1, [r3, #0]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	6123      	str	r3, [r4, #16]
 8005f2e:	4615      	mov	r5, r2
 8005f30:	e7ba      	b.n	8005ea8 <_printf_i+0x150>
 8005f32:	682b      	ldr	r3, [r5, #0]
 8005f34:	1d1a      	adds	r2, r3, #4
 8005f36:	602a      	str	r2, [r5, #0]
 8005f38:	681d      	ldr	r5, [r3, #0]
 8005f3a:	6862      	ldr	r2, [r4, #4]
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f7fa f946 	bl	80001d0 <memchr>
 8005f44:	b108      	cbz	r0, 8005f4a <_printf_i+0x1f2>
 8005f46:	1b40      	subs	r0, r0, r5
 8005f48:	6060      	str	r0, [r4, #4]
 8005f4a:	6863      	ldr	r3, [r4, #4]
 8005f4c:	6123      	str	r3, [r4, #16]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f54:	e7a8      	b.n	8005ea8 <_printf_i+0x150>
 8005f56:	6923      	ldr	r3, [r4, #16]
 8005f58:	462a      	mov	r2, r5
 8005f5a:	4649      	mov	r1, r9
 8005f5c:	4640      	mov	r0, r8
 8005f5e:	47d0      	blx	sl
 8005f60:	3001      	adds	r0, #1
 8005f62:	d0ab      	beq.n	8005ebc <_printf_i+0x164>
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	079b      	lsls	r3, r3, #30
 8005f68:	d413      	bmi.n	8005f92 <_printf_i+0x23a>
 8005f6a:	68e0      	ldr	r0, [r4, #12]
 8005f6c:	9b03      	ldr	r3, [sp, #12]
 8005f6e:	4298      	cmp	r0, r3
 8005f70:	bfb8      	it	lt
 8005f72:	4618      	movlt	r0, r3
 8005f74:	e7a4      	b.n	8005ec0 <_printf_i+0x168>
 8005f76:	2301      	movs	r3, #1
 8005f78:	4632      	mov	r2, r6
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	4640      	mov	r0, r8
 8005f7e:	47d0      	blx	sl
 8005f80:	3001      	adds	r0, #1
 8005f82:	d09b      	beq.n	8005ebc <_printf_i+0x164>
 8005f84:	3501      	adds	r5, #1
 8005f86:	68e3      	ldr	r3, [r4, #12]
 8005f88:	9903      	ldr	r1, [sp, #12]
 8005f8a:	1a5b      	subs	r3, r3, r1
 8005f8c:	42ab      	cmp	r3, r5
 8005f8e:	dcf2      	bgt.n	8005f76 <_printf_i+0x21e>
 8005f90:	e7eb      	b.n	8005f6a <_printf_i+0x212>
 8005f92:	2500      	movs	r5, #0
 8005f94:	f104 0619 	add.w	r6, r4, #25
 8005f98:	e7f5      	b.n	8005f86 <_printf_i+0x22e>
 8005f9a:	bf00      	nop
 8005f9c:	0800668d 	.word	0x0800668d
 8005fa0:	0800669e 	.word	0x0800669e

08005fa4 <_sbrk_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4d06      	ldr	r5, [pc, #24]	; (8005fc0 <_sbrk_r+0x1c>)
 8005fa8:	2300      	movs	r3, #0
 8005faa:	4604      	mov	r4, r0
 8005fac:	4608      	mov	r0, r1
 8005fae:	602b      	str	r3, [r5, #0]
 8005fb0:	f7fb f90e 	bl	80011d0 <_sbrk>
 8005fb4:	1c43      	adds	r3, r0, #1
 8005fb6:	d102      	bne.n	8005fbe <_sbrk_r+0x1a>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	b103      	cbz	r3, 8005fbe <_sbrk_r+0x1a>
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	bd38      	pop	{r3, r4, r5, pc}
 8005fc0:	2000084c 	.word	0x2000084c

08005fc4 <__sread>:
 8005fc4:	b510      	push	{r4, lr}
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fcc:	f000 f8a0 	bl	8006110 <_read_r>
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	bfab      	itete	ge
 8005fd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8005fd8:	181b      	addge	r3, r3, r0
 8005fda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fde:	bfac      	ite	ge
 8005fe0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fe2:	81a3      	strhlt	r3, [r4, #12]
 8005fe4:	bd10      	pop	{r4, pc}

08005fe6 <__swrite>:
 8005fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fea:	461f      	mov	r7, r3
 8005fec:	898b      	ldrh	r3, [r1, #12]
 8005fee:	05db      	lsls	r3, r3, #23
 8005ff0:	4605      	mov	r5, r0
 8005ff2:	460c      	mov	r4, r1
 8005ff4:	4616      	mov	r6, r2
 8005ff6:	d505      	bpl.n	8006004 <__swrite+0x1e>
 8005ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	2200      	movs	r2, #0
 8006000:	f000 f868 	bl	80060d4 <_lseek_r>
 8006004:	89a3      	ldrh	r3, [r4, #12]
 8006006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800600a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800600e:	81a3      	strh	r3, [r4, #12]
 8006010:	4632      	mov	r2, r6
 8006012:	463b      	mov	r3, r7
 8006014:	4628      	mov	r0, r5
 8006016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800601a:	f000 b817 	b.w	800604c <_write_r>

0800601e <__sseek>:
 800601e:	b510      	push	{r4, lr}
 8006020:	460c      	mov	r4, r1
 8006022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006026:	f000 f855 	bl	80060d4 <_lseek_r>
 800602a:	1c43      	adds	r3, r0, #1
 800602c:	89a3      	ldrh	r3, [r4, #12]
 800602e:	bf15      	itete	ne
 8006030:	6560      	strne	r0, [r4, #84]	; 0x54
 8006032:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006036:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800603a:	81a3      	strheq	r3, [r4, #12]
 800603c:	bf18      	it	ne
 800603e:	81a3      	strhne	r3, [r4, #12]
 8006040:	bd10      	pop	{r4, pc}

08006042 <__sclose>:
 8006042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006046:	f000 b813 	b.w	8006070 <_close_r>
	...

0800604c <_write_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4d07      	ldr	r5, [pc, #28]	; (800606c <_write_r+0x20>)
 8006050:	4604      	mov	r4, r0
 8006052:	4608      	mov	r0, r1
 8006054:	4611      	mov	r1, r2
 8006056:	2200      	movs	r2, #0
 8006058:	602a      	str	r2, [r5, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	f7fa ff5c 	bl	8000f18 <_write>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d102      	bne.n	800606a <_write_r+0x1e>
 8006064:	682b      	ldr	r3, [r5, #0]
 8006066:	b103      	cbz	r3, 800606a <_write_r+0x1e>
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	2000084c 	.word	0x2000084c

08006070 <_close_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	4d06      	ldr	r5, [pc, #24]	; (800608c <_close_r+0x1c>)
 8006074:	2300      	movs	r3, #0
 8006076:	4604      	mov	r4, r0
 8006078:	4608      	mov	r0, r1
 800607a:	602b      	str	r3, [r5, #0]
 800607c:	f7fb f873 	bl	8001166 <_close>
 8006080:	1c43      	adds	r3, r0, #1
 8006082:	d102      	bne.n	800608a <_close_r+0x1a>
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	b103      	cbz	r3, 800608a <_close_r+0x1a>
 8006088:	6023      	str	r3, [r4, #0]
 800608a:	bd38      	pop	{r3, r4, r5, pc}
 800608c:	2000084c 	.word	0x2000084c

08006090 <_fstat_r>:
 8006090:	b538      	push	{r3, r4, r5, lr}
 8006092:	4d07      	ldr	r5, [pc, #28]	; (80060b0 <_fstat_r+0x20>)
 8006094:	2300      	movs	r3, #0
 8006096:	4604      	mov	r4, r0
 8006098:	4608      	mov	r0, r1
 800609a:	4611      	mov	r1, r2
 800609c:	602b      	str	r3, [r5, #0]
 800609e:	f7fb f86e 	bl	800117e <_fstat>
 80060a2:	1c43      	adds	r3, r0, #1
 80060a4:	d102      	bne.n	80060ac <_fstat_r+0x1c>
 80060a6:	682b      	ldr	r3, [r5, #0]
 80060a8:	b103      	cbz	r3, 80060ac <_fstat_r+0x1c>
 80060aa:	6023      	str	r3, [r4, #0]
 80060ac:	bd38      	pop	{r3, r4, r5, pc}
 80060ae:	bf00      	nop
 80060b0:	2000084c 	.word	0x2000084c

080060b4 <_isatty_r>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	4d06      	ldr	r5, [pc, #24]	; (80060d0 <_isatty_r+0x1c>)
 80060b8:	2300      	movs	r3, #0
 80060ba:	4604      	mov	r4, r0
 80060bc:	4608      	mov	r0, r1
 80060be:	602b      	str	r3, [r5, #0]
 80060c0:	f7fb f86d 	bl	800119e <_isatty>
 80060c4:	1c43      	adds	r3, r0, #1
 80060c6:	d102      	bne.n	80060ce <_isatty_r+0x1a>
 80060c8:	682b      	ldr	r3, [r5, #0]
 80060ca:	b103      	cbz	r3, 80060ce <_isatty_r+0x1a>
 80060cc:	6023      	str	r3, [r4, #0]
 80060ce:	bd38      	pop	{r3, r4, r5, pc}
 80060d0:	2000084c 	.word	0x2000084c

080060d4 <_lseek_r>:
 80060d4:	b538      	push	{r3, r4, r5, lr}
 80060d6:	4d07      	ldr	r5, [pc, #28]	; (80060f4 <_lseek_r+0x20>)
 80060d8:	4604      	mov	r4, r0
 80060da:	4608      	mov	r0, r1
 80060dc:	4611      	mov	r1, r2
 80060de:	2200      	movs	r2, #0
 80060e0:	602a      	str	r2, [r5, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	f7fb f866 	bl	80011b4 <_lseek>
 80060e8:	1c43      	adds	r3, r0, #1
 80060ea:	d102      	bne.n	80060f2 <_lseek_r+0x1e>
 80060ec:	682b      	ldr	r3, [r5, #0]
 80060ee:	b103      	cbz	r3, 80060f2 <_lseek_r+0x1e>
 80060f0:	6023      	str	r3, [r4, #0]
 80060f2:	bd38      	pop	{r3, r4, r5, pc}
 80060f4:	2000084c 	.word	0x2000084c

080060f8 <__malloc_lock>:
 80060f8:	4801      	ldr	r0, [pc, #4]	; (8006100 <__malloc_lock+0x8>)
 80060fa:	f7ff bb15 	b.w	8005728 <__retarget_lock_acquire_recursive>
 80060fe:	bf00      	nop
 8006100:	20000840 	.word	0x20000840

08006104 <__malloc_unlock>:
 8006104:	4801      	ldr	r0, [pc, #4]	; (800610c <__malloc_unlock+0x8>)
 8006106:	f7ff bb10 	b.w	800572a <__retarget_lock_release_recursive>
 800610a:	bf00      	nop
 800610c:	20000840 	.word	0x20000840

08006110 <_read_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4d07      	ldr	r5, [pc, #28]	; (8006130 <_read_r+0x20>)
 8006114:	4604      	mov	r4, r0
 8006116:	4608      	mov	r0, r1
 8006118:	4611      	mov	r1, r2
 800611a:	2200      	movs	r2, #0
 800611c:	602a      	str	r2, [r5, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	f7fb f804 	bl	800112c <_read>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d102      	bne.n	800612e <_read_r+0x1e>
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	b103      	cbz	r3, 800612e <_read_r+0x1e>
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	bd38      	pop	{r3, r4, r5, pc}
 8006130:	2000084c 	.word	0x2000084c

08006134 <_init>:
 8006134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006136:	bf00      	nop
 8006138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800613a:	bc08      	pop	{r3}
 800613c:	469e      	mov	lr, r3
 800613e:	4770      	bx	lr

08006140 <_fini>:
 8006140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006142:	bf00      	nop
 8006144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006146:	bc08      	pop	{r3}
 8006148:	469e      	mov	lr, r3
 800614a:	4770      	bx	lr
