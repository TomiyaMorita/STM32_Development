
STMF446_RMD_command_Simple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005db8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005f88  08005f88  00015f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006088  08006088  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006088  08006088  00016088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006090  08006090  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006090  08006090  00016090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006094  08006094  00016094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000070  08006108  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08006108  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011453  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022fd  00000000  00000000  000314f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  000337f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  000346d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000036e0  00000000  00000000  000354d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011211  00000000  00000000  00038bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5861  00000000  00000000  00049dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f62a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004784  00000000  00000000  0011f67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005f70 	.word	0x08005f70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005f70 	.word	0x08005f70

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <RMD_CANTx>:
void RMD_CANTx(RMD_Motor* rmd);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void RMD_CANTx(RMD_Motor* rmd){	// RMDにcanを送る
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	TxHeader.StdId=rmd->can_id;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a1a      	ldr	r2, [pc, #104]	; (800062c <RMD_CANTx+0x78>)
 80005c2:	6013      	str	r3, [r2, #0]
	TxHeader.IDE = CAN_ID_STD;
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <RMD_CANTx+0x78>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 0x08;
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <RMD_CANTx+0x78>)
 80005cc:	2208      	movs	r2, #8
 80005ce:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <RMD_CANTx+0x78>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <RMD_CANTx+0x78>)
 80005d8:	2200      	movs	r2, #0
 80005da:	751a      	strb	r2, [r3, #20]
//	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)<3){}
	if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)!=0){
 80005dc:	4814      	ldr	r0, [pc, #80]	; (8000630 <RMD_CANTx+0x7c>)
 80005de:	f001 fa53 	bl	8001a88 <HAL_CAN_GetTxMailboxesFreeLevel>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d00c      	beq.n	8000602 <RMD_CANTx+0x4e>
		HAL_CAN_AddTxMessage(&hcan1,&TxHeader,rmd->txcan_data,&TxMailbox);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f103 023b 	add.w	r2, r3, #59	; 0x3b
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <RMD_CANTx+0x80>)
 80005f0:	490e      	ldr	r1, [pc, #56]	; (800062c <RMD_CANTx+0x78>)
 80005f2:	480f      	ldr	r0, [pc, #60]	; (8000630 <RMD_CANTx+0x7c>)
 80005f4:	f001 f96d 	bl	80018d2 <HAL_CAN_AddTxMessage>
		rmd->rmd_send = 1;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2201      	movs	r2, #1
 80005fc:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8000600:	e00d      	b.n	800061e <RMD_CANTx+0x6a>
	}else{
		HAL_CAN_Stop (&hcan1);
 8000602:	480b      	ldr	r0, [pc, #44]	; (8000630 <RMD_CANTx+0x7c>)
 8000604:	f001 f91c 	bl	8001840 <HAL_CAN_Stop>
		HAL_CAN_Start (&hcan1);
 8000608:	4809      	ldr	r0, [pc, #36]	; (8000630 <RMD_CANTx+0x7c>)
 800060a:	f001 f8d5 	bl	80017b8 <HAL_CAN_Start>
		HAL_CAN_AddTxMessage(&hcan1,&TxHeader,rmd->txcan_data,&TxMailbox);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f103 023b 	add.w	r2, r3, #59	; 0x3b
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <RMD_CANTx+0x80>)
 8000616:	4905      	ldr	r1, [pc, #20]	; (800062c <RMD_CANTx+0x78>)
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <RMD_CANTx+0x7c>)
 800061a:	f001 f95a 	bl	80018d2 <HAL_CAN_AddTxMessage>
//		HAL_CAN_AddTxMessage(&hcan1,&TxHeader,rmd->txcan_data,&TxMailbox);
	}
	HAL_Delay(10);
 800061e:	200a      	movs	r0, #10
 8000620:	f000 feca 	bl	80013b8 <HAL_Delay>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200001b0 	.word	0x200001b0
 8000630:	2000008c 	.word	0x2000008c
 8000634:	200001f4 	.word	0x200001f4

08000638 <RMD_calculatuin>:

void RMD_calculatuin(RobotArm* robot_arm, uint8_t whitch_rmd){
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	70fb      	strb	r3, [r7, #3]
	robot_arm->rmd_axis.state = 1;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2201      	movs	r2, #1
 8000648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	robot_arm->rmd_axis.end_state = 0;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2200      	movs	r2, #0
 8000650:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	robot_arm->rmd_axis.rmd_send = 0;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2200      	movs	r2, #0
 8000658:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	if(whitch_rmd==0){
 800065c:	78fb      	ldrb	r3, [r7, #3]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d104      	bne.n	800066c <RMD_calculatuin+0x34>
		robot_arm->rmd_axis.can_id = 0x141;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f240 1241 	movw	r2, #321	; 0x141
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	e006      	b.n	800067a <RMD_calculatuin+0x42>
//		robot_arm->rmd_axis.target_position = robot_arm->rmd_axis.zero+(-90*100) + robot_arm->rmd_axis.target_position;	//垂直から90deg引いた値、水平を0degとしてそこから入力された角度だけRMDを回転させる
	}else if(whitch_rmd==1){
 800066c:	78fb      	ldrb	r3, [r7, #3]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d103      	bne.n	800067a <RMD_calculatuin+0x42>
		robot_arm->rmd_axis.can_id = 0x142;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f44f 72a1 	mov.w	r2, #322	; 0x142
 8000678:	601a      	str	r2, [r3, #0]

	}
	memset(robot_arm->rmd_axis.txcan_data, 0, sizeof(robot_arm->rmd_axis.txcan_data));
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	333b      	adds	r3, #59	; 0x3b
 800067e:	2208      	movs	r2, #8
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f004 fb92 	bl	8004dac <memset>
	if(robot_arm->rmd_axis.motion_state==1){	//RMDを回すステート
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800068e:	2b01      	cmp	r3, #1
 8000690:	d11d      	bne.n	80006ce <RMD_calculatuin+0x96>
		robot_arm->rmd_axis.txcan_data[0] = 0xA4;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	22a4      	movs	r2, #164	; 0xa4
 8000696:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		robot_arm->rmd_axis.txcan_data[2] = 0xC8;	//speed low
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	22c8      	movs	r2, #200	; 0xc8
 800069e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		robot_arm->rmd_axis.txcan_data[3] = 0x00;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2200      	movs	r2, #0
 80006a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		robot_arm->rmd_axis.txcan_data[4] =(robot_arm->rmd_axis.target_position&0xFF);	//poslow
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		robot_arm->rmd_axis.txcan_data[5] =(robot_arm->rmd_axis.target_position>>8)&0xFF;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	121b      	asrs	r3, r3, #8
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		robot_arm->rmd_axis.motion_state=0;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2200      	movs	r2, #0
 80006c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		robot_arm->rmd_axis.poweroff_state = 0;
	}else if(robot_arm->rmd_axis.encoder_state==1){
		robot_arm->rmd_axis.txcan_data[0] = 0x90;
		robot_arm->rmd_axis.encoder_state = 0;
	}
}
 80006cc:	e069      	b.n	80007a2 <RMD_calculatuin+0x16a>
	}else if(robot_arm->rmd_axis.PID_state==1){
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d120      	bne.n	800071a <RMD_calculatuin+0xe2>
		robot_arm->rmd_axis.txcan_data[0] = 0x32;	//PI設定
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2232      	movs	r2, #50	; 0x32
 80006dc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		robot_arm->rmd_axis.txcan_data[2] = 0x64;	//anglePidKp 64
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2264      	movs	r2, #100	; 0x64
 80006e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		robot_arm->rmd_axis.txcan_data[3] = 0xC8;	//anglePidKi C8
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	22c8      	movs	r2, #200	; 0xc8
 80006ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		robot_arm->rmd_axis.txcan_data[4] = 0x64;	//speedPidKp 64
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2264      	movs	r2, #100	; 0x64
 80006f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		robot_arm->rmd_axis.txcan_data[5] = 0x14;	//speedPidKi 14
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2214      	movs	r2, #20
 80006fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		robot_arm->rmd_axis.txcan_data[6] = 0x50;	//iqPidKp 50
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2250      	movs	r2, #80	; 0x50
 8000704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		robot_arm->rmd_axis.txcan_data[7] = 0x1E;	//iqPidKi 1E
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	221e      	movs	r2, #30
 800070c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		robot_arm->rmd_axis.PID_state=0;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
}
 8000718:	e043      	b.n	80007a2 <RMD_calculatuin+0x16a>
	}else if(robot_arm->rmd_axis.offset_state==1){
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000720:	2b01      	cmp	r3, #1
 8000722:	d115      	bne.n	8000750 <RMD_calculatuin+0x118>
		robot_arm->rmd_axis.txcan_data[0] = 0x91;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2291      	movs	r2, #145	; 0x91
 8000728:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		robot_arm->rmd_axis.txcan_data[6] = robot_arm->rmd_axis.offset&0xFF;	//position_offset
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	691b      	ldr	r3, [r3, #16]
 8000730:	b2da      	uxtb	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		robot_arm->rmd_axis.txcan_data[7] = robot_arm->rmd_axis.offset>>8;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	691b      	ldr	r3, [r3, #16]
 800073c:	121b      	asrs	r3, r3, #8
 800073e:	b2da      	uxtb	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		robot_arm->rmd_axis.offset_state=0;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 800074e:	e028      	b.n	80007a2 <RMD_calculatuin+0x16a>
	}else if(robot_arm->rmd_axis.poweron_state==1){
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000756:	2b01      	cmp	r3, #1
 8000758:	d108      	bne.n	800076c <RMD_calculatuin+0x134>
		robot_arm->rmd_axis.txcan_data[0] = 0x88;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2288      	movs	r2, #136	; 0x88
 800075e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		robot_arm->rmd_axis.poweron_state=0;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 800076a:	e01a      	b.n	80007a2 <RMD_calculatuin+0x16a>
	}else if(robot_arm->rmd_axis.poweroff_state==1){
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000772:	2b01      	cmp	r3, #1
 8000774:	d108      	bne.n	8000788 <RMD_calculatuin+0x150>
		robot_arm->rmd_axis.txcan_data[0] = 0x80;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		robot_arm->rmd_axis.poweroff_state = 0;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8000786:	e00c      	b.n	80007a2 <RMD_calculatuin+0x16a>
	}else if(robot_arm->rmd_axis.encoder_state==1){
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800078e:	2b01      	cmp	r3, #1
 8000790:	d107      	bne.n	80007a2 <RMD_calculatuin+0x16a>
		robot_arm->rmd_axis.txcan_data[0] = 0x90;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2290      	movs	r2, #144	; 0x90
 8000796:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		robot_arm->rmd_axis.encoder_state = 0;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2200      	movs	r2, #0
 800079e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <SendAll>:
void SendAll(RobotArm* robot_arm)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
	if(robot_arm->rmd_axis.state==1){	//RMDの動作
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d103      	bne.n	80007c4 <SendAll+0x1a>
		RMD_CANTx(&robot_arm->rmd_axis);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fef8 	bl	80005b4 <RMD_CANTx>

	}
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 80007d2:	4b55      	ldr	r3, [pc, #340]	; (8000928 <main+0x15c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f004 fb7c 	bl	8004ed8 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fd78 	bl	80012d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f8b8 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f000 fa1e 	bl	8000c28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007ec:	f000 f9f2 	bl	8000bd4 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80007f0:	f000 f91e 	bl	8000a30 <MX_CAN1_Init>
  MX_TIM2_Init();
 80007f4:	f000 f952 	bl	8000a9c <MX_TIM2_Init>
  MX_TIM3_Init();
 80007f8:	f000 f99e 	bl	8000b38 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  sFilterConfig.FilterBank = 0;
 80007fc:	4b4b      	ldr	r3, [pc, #300]	; (800092c <main+0x160>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000802:	4b4a      	ldr	r3, [pc, #296]	; (800092c <main+0x160>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000808:	4b48      	ldr	r3, [pc, #288]	; (800092c <main+0x160>)
 800080a:	2201      	movs	r2, #1
 800080c:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800080e:	4b47      	ldr	r3, [pc, #284]	; (800092c <main+0x160>)
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000814:	4b45      	ldr	r3, [pc, #276]	; (800092c <main+0x160>)
 8000816:	2200      	movs	r2, #0
 8000818:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800081a:	4b44      	ldr	r3, [pc, #272]	; (800092c <main+0x160>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000820:	4b42      	ldr	r3, [pc, #264]	; (800092c <main+0x160>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000826:	4b41      	ldr	r3, [pc, #260]	; (800092c <main+0x160>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation=ENABLE;
 800082c:	4b3f      	ldr	r3, [pc, #252]	; (800092c <main+0x160>)
 800082e:	2201      	movs	r2, #1
 8000830:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank=14;
 8000832:	4b3e      	ldr	r3, [pc, #248]	; (800092c <main+0x160>)
 8000834:	220e      	movs	r2, #14
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 8000838:	493c      	ldr	r1, [pc, #240]	; (800092c <main+0x160>)
 800083a:	483d      	ldr	r0, [pc, #244]	; (8000930 <main+0x164>)
 800083c:	f000 fedc 	bl	80015f8 <HAL_CAN_ConfigFilter>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <main+0x7e>
  {
	  Error_Handler();
 8000846:	f000 faf5 	bl	8000e34 <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 800084a:	4839      	ldr	r0, [pc, #228]	; (8000930 <main+0x164>)
 800084c:	f000 ffb4 	bl	80017b8 <HAL_CAN_Start>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <main+0x8e>
  {
	  Error_Handler();
 8000856:	f000 faed 	bl	8000e34 <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800085a:	2103      	movs	r1, #3
 800085c:	4834      	ldr	r0, [pc, #208]	; (8000930 <main+0x164>)
 800085e:	f001 fa5a 	bl	8001d16 <HAL_CAN_ActivateNotification>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <main+0xa0>
  {
	  Error_Handler();
 8000868:	f000 fae4 	bl	8000e34 <Error_Handler>
  }
  HAL_UART_Receive_IT(&huart2, (uint8_t *)KeyCommand, 1);
 800086c:	2201      	movs	r2, #1
 800086e:	4931      	ldr	r1, [pc, #196]	; (8000934 <main+0x168>)
 8000870:	4831      	ldr	r0, [pc, #196]	; (8000938 <main+0x16c>)
 8000872:	f003 fad8 	bl	8003e26 <HAL_UART_Receive_IT>
  printf("InIt end\r\n");
 8000876:	4831      	ldr	r0, [pc, #196]	; (800093c <main+0x170>)
 8000878:	f004 fb26 	bl	8004ec8 <puts>
  RobotArm *robot_arm = &ra;
 800087c:	4b30      	ldr	r3, [pc, #192]	; (8000940 <main+0x174>)
 800087e:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_uart_flag=0;
 8000880:	4b30      	ldr	r3, [pc, #192]	; (8000944 <main+0x178>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
	  //受信するまで待つ
	  printf("waiting...\r\n");
 8000886:	4830      	ldr	r0, [pc, #192]	; (8000948 <main+0x17c>)
 8000888:	f004 fb1e 	bl	8004ec8 <puts>
	  while(!get_uart_flag){}
 800088c:	bf00      	nop
 800088e:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <main+0x178>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d0fb      	beq.n	800088e <main+0xc2>
	  printf("waitiUARTflag\r\n");
 8000896:	482d      	ldr	r0, [pc, #180]	; (800094c <main+0x180>)
 8000898:	f004 fb16 	bl	8004ec8 <puts>
	  if(KeyCommand[0]!=0 ){
 800089c:	4b25      	ldr	r3, [pc, #148]	; (8000934 <main+0x168>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d0ed      	beq.n	8000880 <main+0xb4>
		  switch(KeyCommand[0]){
 80008a4:	4b23      	ldr	r3, [pc, #140]	; (8000934 <main+0x168>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b73      	cmp	r3, #115	; 0x73
 80008aa:	d025      	beq.n	80008f8 <main+0x12c>
 80008ac:	2b73      	cmp	r3, #115	; 0x73
 80008ae:	dc2f      	bgt.n	8000910 <main+0x144>
 80008b0:	2b61      	cmp	r3, #97	; 0x61
 80008b2:	d002      	beq.n	80008ba <main+0xee>
 80008b4:	2b64      	cmp	r3, #100	; 0x64
 80008b6:	d00f      	beq.n	80008d8 <main+0x10c>
 80008b8:	e02a      	b.n	8000910 <main+0x144>
		  case'a':
//			  robot_arm->rmd_axis.encoder_state = 1;
//			  RMD_calculatuin(robot_arm, 0);
//			  SendAll(robot_arm);
//			  HAL_Delay(50);
			  robot_arm->rmd_axis.motion_state = 1;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2201      	movs	r2, #1
 80008be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			  robot_arm->rmd_axis.target_position = 0;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
			  RMD_calculatuin(robot_arm, 0);
 80008c8:	2100      	movs	r1, #0
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff feb4 	bl	8000638 <RMD_calculatuin>
			  SendAll(robot_arm);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff ff6a 	bl	80007aa <SendAll>
			  break;
 80008d6:	e022      	b.n	800091e <main+0x152>
		  case'd':
//			  robot_arm->rmd_axis.encoder_state = 1;
//			  RMD_calculatuin(robot_arm, 0);
//			  SendAll(robot_arm);
//			  HAL_Delay(50);
			  robot_arm->rmd_axis.motion_state = 1;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2201      	movs	r2, #1
 80008dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			  robot_arm->rmd_axis.target_position = 50000;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80008e6:	609a      	str	r2, [r3, #8]
			  RMD_calculatuin(robot_arm, 0);
 80008e8:	2100      	movs	r1, #0
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff fea4 	bl	8000638 <RMD_calculatuin>
			  SendAll(robot_arm);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff ff5a 	bl	80007aa <SendAll>
			  break;
 80008f6:	e012      	b.n	800091e <main+0x152>
		  case's':
			  printf("case:s\r\n");
 80008f8:	4815      	ldr	r0, [pc, #84]	; (8000950 <main+0x184>)
 80008fa:	f004 fae5 	bl	8004ec8 <puts>
			  robot_arm->rmd_axis.encoder_state=1;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2201      	movs	r2, #1
 8000902:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			  RMD_calculatuin(robot_arm,0);
 8000906:	2100      	movs	r1, #0
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff fe95 	bl	8000638 <RMD_calculatuin>
			  break;
 800090e:	e006      	b.n	800091e <main+0x152>

		  default:
			  KeyCommand[0]=0;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <main+0x168>)
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
			  printf("No,command\r\n");
 8000916:	480f      	ldr	r0, [pc, #60]	; (8000954 <main+0x188>)
 8000918:	f004 fad6 	bl	8004ec8 <puts>
			  break;
 800091c:	bf00      	nop
		  }
		  KeyCommand[0]=0;
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <main+0x168>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
	  get_uart_flag=0;
 8000924:	e7ac      	b.n	8000880 <main+0xb4>
 8000926:	bf00      	nop
 8000928:	2000000c 	.word	0x2000000c
 800092c:	20000188 	.word	0x20000188
 8000930:	2000008c 	.word	0x2000008c
 8000934:	200001f8 	.word	0x200001f8
 8000938:	20000144 	.word	0x20000144
 800093c:	08005f88 	.word	0x08005f88
 8000940:	200001fc 	.word	0x200001fc
 8000944:	200001f9 	.word	0x200001f9
 8000948:	08005f94 	.word	0x08005f94
 800094c:	08005fa0 	.word	0x08005fa0
 8000950:	08005fb0 	.word	0x08005fb0
 8000954:	08005fb8 	.word	0x08005fb8

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b094      	sub	sp, #80	; 0x50
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	2234      	movs	r2, #52	; 0x34
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f004 fa20 	bl	8004dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	f107 0308 	add.w	r3, r7, #8
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800097c:	2300      	movs	r3, #0
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <SystemClock_Config+0xd0>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	4a28      	ldr	r2, [pc, #160]	; (8000a28 <SystemClock_Config+0xd0>)
 8000986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098a:	6413      	str	r3, [r2, #64]	; 0x40
 800098c:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <SystemClock_Config+0xd0>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000998:	2300      	movs	r3, #0
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <SystemClock_Config+0xd4>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a22      	ldr	r2, [pc, #136]	; (8000a2c <SystemClock_Config+0xd4>)
 80009a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <SystemClock_Config+0xd4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b8:	2301      	movs	r3, #1
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009bc:	2310      	movs	r3, #16
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c0:	2302      	movs	r3, #2
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009c4:	2300      	movs	r3, #0
 80009c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009c8:	2308      	movs	r3, #8
 80009ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 80009cc:	23a0      	movs	r3, #160	; 0xa0
 80009ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009d8:	2302      	movs	r3, #2
 80009da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4618      	mov	r0, r3
 80009e2:	f002 fa89 	bl	8002ef8 <HAL_RCC_OscConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009ec:	f000 fa22 	bl	8000e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f0:	230f      	movs	r3, #15
 80009f2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f4:	2302      	movs	r3, #2
 80009f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a06:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	2105      	movs	r1, #5
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f001 ff28 	bl	8002864 <HAL_RCC_ClockConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a1a:	f000 fa0b 	bl	8000e34 <Error_Handler>
  }
}
 8000a1e:	bf00      	nop
 8000a20:	3750      	adds	r7, #80	; 0x50
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40007000 	.word	0x40007000

08000a30 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a36:	4a18      	ldr	r2, [pc, #96]	; (8000a98 <MX_CAN1_Init+0x68>)
 8000a38:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a4e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000a52:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a5a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a82:	f000 fcbd 	bl	8001400 <HAL_CAN_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a8c:	f000 f9d2 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	2000008c 	.word	0x2000008c
 8000a98:	40006400 	.word	0x40006400

08000a9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000aba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000abe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000ac2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ac6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8000ace:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000ad0:	f240 128f 	movw	r2, #399	; 0x18f
 8000ad4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ae2:	4814      	ldr	r0, [pc, #80]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000ae4:	f002 fca6 	bl	8003434 <HAL_TIM_Base_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000aee:	f000 f9a1 	bl	8000e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000af8:	f107 0308 	add.w	r3, r7, #8
 8000afc:	4619      	mov	r1, r3
 8000afe:	480d      	ldr	r0, [pc, #52]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000b00:	f002 fdef 	bl	80036e2 <HAL_TIM_ConfigClockSource>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b0a:	f000 f993 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b16:	463b      	mov	r3, r7
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4806      	ldr	r0, [pc, #24]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000b1c:	f003 f814 	bl	8003b48 <HAL_TIMEx_MasterConfigSynchronization>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b26:	f000 f985 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200000b4 	.word	0x200000b4

08000b38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b54:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b56:	4a1e      	ldr	r2, [pc, #120]	; (8000bd0 <MX_TIM3_Init+0x98>)
 8000b58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b5c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b6a:	22c7      	movs	r2, #199	; 0xc7
 8000b6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b74:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b76:	2280      	movs	r2, #128	; 0x80
 8000b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b7a:	4814      	ldr	r0, [pc, #80]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b7c:	f002 fc5a 	bl	8003434 <HAL_TIM_Base_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000b86:	f000 f955 	bl	8000e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	4619      	mov	r1, r3
 8000b96:	480d      	ldr	r0, [pc, #52]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b98:	f002 fda3 	bl	80036e2 <HAL_TIM_ConfigClockSource>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000ba2:	f000 f947 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bae:	463b      	mov	r3, r7
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4806      	ldr	r0, [pc, #24]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000bb4:	f002 ffc8 	bl	8003b48 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000bbe:	f000 f939 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200000fc 	.word	0x200000fc
 8000bd0:	40000400 	.word	0x40000400

08000bd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000bda:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <MX_USART2_UART_Init+0x50>)
 8000bdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000c0c:	f003 f82c 	bl	8003c68 <HAL_UART_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c16:	f000 f90d 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000144 	.word	0x20000144
 8000c24:	40004400 	.word	0x40004400

08000c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b37      	ldr	r3, [pc, #220]	; (8000d20 <MX_GPIO_Init+0xf8>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a36      	ldr	r2, [pc, #216]	; (8000d20 <MX_GPIO_Init+0xf8>)
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b34      	ldr	r3, [pc, #208]	; (8000d20 <MX_GPIO_Init+0xf8>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0304 	and.w	r3, r3, #4
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b30      	ldr	r3, [pc, #192]	; (8000d20 <MX_GPIO_Init+0xf8>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a2f      	ldr	r2, [pc, #188]	; (8000d20 <MX_GPIO_Init+0xf8>)
 8000c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <MX_GPIO_Init+0xf8>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <MX_GPIO_Init+0xf8>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a28      	ldr	r2, [pc, #160]	; (8000d20 <MX_GPIO_Init+0xf8>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <MX_GPIO_Init+0xf8>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <MX_GPIO_Init+0xf8>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a21      	ldr	r2, [pc, #132]	; (8000d20 <MX_GPIO_Init+0xf8>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <MX_GPIO_Init+0xf8>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2120      	movs	r1, #32
 8000cb2:	481c      	ldr	r0, [pc, #112]	; (8000d24 <MX_GPIO_Init+0xfc>)
 8000cb4:	f001 fdbc 	bl	8002830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2110      	movs	r1, #16
 8000cbc:	481a      	ldr	r0, [pc, #104]	; (8000d28 <MX_GPIO_Init+0x100>)
 8000cbe:	f001 fdb7 	bl	8002830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cc8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4814      	ldr	r0, [pc, #80]	; (8000d2c <MX_GPIO_Init+0x104>)
 8000cda:	f001 fc15 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cde:	2320      	movs	r3, #32
 8000ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480b      	ldr	r0, [pc, #44]	; (8000d24 <MX_GPIO_Init+0xfc>)
 8000cf6:	f001 fc07 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cfa:	2310      	movs	r3, #16
 8000cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <MX_GPIO_Init+0x100>)
 8000d12:	f001 fbf9 	bl	8002508 <HAL_GPIO_Init>

}
 8000d16:	bf00      	nop
 8000d18:	3728      	adds	r7, #40	; 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000
 8000d28:	40020400 	.word	0x40020400
 8000d2c:	40020800 	.word	0x40020800

08000d30 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)	//printfに必要
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	230a      	movs	r3, #10
 8000d42:	68b9      	ldr	r1, [r7, #8]
 8000d44:	4803      	ldr	r0, [pc, #12]	; (8000d54 <_write+0x24>)
 8000d46:	f002 ffdc 	bl	8003d02 <HAL_UART_Transmit>
  return len;
 8000d4a:	687b      	ldr	r3, [r7, #4]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000144 	.word	0x20000144

08000d58 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef*UartHandle)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

//	HAL_UART_Transmit(&huart2,UART1_Data,1,1000);	//1byte受け取ったら次へ
	get_uart_flag=1;
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HAL_UART_RxCpltCallback+0x20>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, (uint8_t *)KeyCommand, 1);
 8000d66:	2201      	movs	r2, #1
 8000d68:	4904      	ldr	r1, [pc, #16]	; (8000d7c <HAL_UART_RxCpltCallback+0x24>)
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <HAL_UART_RxCpltCallback+0x28>)
 8000d6c:	f003 f85b 	bl	8003e26 <HAL_UART_Receive_IT>

}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200001f9 	.word	0x200001f9
 8000d7c:	200001f8 	.word	0x200001f8
 8000d80:	20000144 	.word	0x20000144

08000d84 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0, &RxHeader, canRxdata);
 8000d8c:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000d8e:	4a24      	ldr	r2, [pc, #144]	; (8000e20 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000d90:	2100      	movs	r1, #0
 8000d92:	4824      	ldr	r0, [pc, #144]	; (8000e24 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000d94:	f000 fead 	bl	8001af2 <HAL_CAN_GetRxMessage>
	 RobotArm *robot_arm = &ra;
 8000d98:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000d9a:	60fb      	str	r3, [r7, #12]
	if(RxHeader.StdId==0x141){
 8000d9c:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f240 1241 	movw	r2, #321	; 0x141
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d134      	bne.n	8000e12 <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
		memcpy(RMDRx_can_data, canRxdata, 8);
 8000da8:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000daa:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000dac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000db0:	e883 0003 	stmia.w	r3, {r0, r1}
		if(RMDRx_can_data[0]==0xA4){
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2ba4      	cmp	r3, #164	; 0xa4
 8000dba:	d119      	bne.n	8000df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
			robot_arm->rmd_axis.reply=((RMDRx_can_data[6] & 0xFF)|((RMDRx_can_data[7] & 0xFF) << 8));	//エンコーダデータ更新
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000dbe:	799b      	ldrb	r3, [r3, #6]
 8000dc0:	b21a      	sxth	r2, r3
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000dc4:	79db      	ldrb	r3, [r3, #7]
 8000dc6:	021b      	lsls	r3, r3, #8
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	b21b      	sxth	r3, r3
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			robot_arm->rmd_axis.temperature = RMDRx_can_data[1] & 0xFF;
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000dd8:	785a      	ldrb	r2, [r3, #1]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			printf("reply:%d\r\n",robot_arm->rmd_axis.reply);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000de6:	4619      	mov	r1, r3
 8000de8:	4811      	ldr	r0, [pc, #68]	; (8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000dea:	f003 ffe7 	bl	8004dbc <iprintf>
		}else if(RMDRx_can_data[0]==0x90){
			robot_arm->rmd_axis.current_val = (RMDRx_can_data[2]) | ((RMDRx_can_data[3])<<8);
//			printf("reply:%d\r\n",robot_arm->rmd_axis.current_val);
		}
	}
}
 8000dee:	e010      	b.n	8000e12 <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
		}else if(RMDRx_can_data[0]==0x90){
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b90      	cmp	r3, #144	; 0x90
 8000df6:	d10c      	bne.n	8000e12 <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
			robot_arm->rmd_axis.current_val = (RMDRx_can_data[2]) | ((RMDRx_can_data[3])<<8);
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000dfa:	789b      	ldrb	r3, [r3, #2]
 8000dfc:	b21a      	sxth	r2, r3
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000e00:	78db      	ldrb	r3, [r3, #3]
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	4313      	orrs	r3, r2
 8000e08:	b21b      	sxth	r3, r3
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200001e4 	.word	0x200001e4
 8000e20:	200001c8 	.word	0x200001c8
 8000e24:	2000008c 	.word	0x2000008c
 8000e28:	200001fc 	.word	0x200001fc
 8000e2c:	200001ec 	.word	0x200001ec
 8000e30:	08005fc4 	.word	0x08005fc4

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("error\r\n");
 8000e3c:	4801      	ldr	r0, [pc, #4]	; (8000e44 <Error_Handler+0x10>)
 8000e3e:	f004 f843 	bl	8004ec8 <puts>
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <Error_Handler+0xe>
 8000e44:	08005fd0 	.word	0x08005fd0

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <HAL_MspInit+0x4c>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	4a0f      	ldr	r2, [pc, #60]	; (8000e94 <HAL_MspInit+0x4c>)
 8000e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <HAL_MspInit+0x4c>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	603b      	str	r3, [r7, #0]
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <HAL_MspInit+0x4c>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <HAL_MspInit+0x4c>)
 8000e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e78:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_MspInit+0x4c>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800

08000e98 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a2a      	ldr	r2, [pc, #168]	; (8000f60 <HAL_CAN_MspInit+0xc8>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d14d      	bne.n	8000f56 <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	4b29      	ldr	r3, [pc, #164]	; (8000f64 <HAL_CAN_MspInit+0xcc>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a28      	ldr	r2, [pc, #160]	; (8000f64 <HAL_CAN_MspInit+0xcc>)
 8000ec4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <HAL_CAN_MspInit+0xcc>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <HAL_CAN_MspInit+0xcc>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a21      	ldr	r2, [pc, #132]	; (8000f64 <HAL_CAN_MspInit+0xcc>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <HAL_CAN_MspInit+0xcc>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ef2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f04:	2309      	movs	r3, #9
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4816      	ldr	r0, [pc, #88]	; (8000f68 <HAL_CAN_MspInit+0xd0>)
 8000f10:	f001 fafa 	bl	8002508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f26:	2309      	movs	r3, #9
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <HAL_CAN_MspInit+0xd0>)
 8000f32:	f001 fae9 	bl	8002508 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2013      	movs	r0, #19
 8000f3c:	f001 fa1b 	bl	8002376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f40:	2013      	movs	r0, #19
 8000f42:	f001 fa34 	bl	80023ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2014      	movs	r0, #20
 8000f4c:	f001 fa13 	bl	8002376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f50:	2014      	movs	r0, #20
 8000f52:	f001 fa2c 	bl	80023ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f56:	bf00      	nop
 8000f58:	3728      	adds	r7, #40	; 0x28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40006400 	.word	0x40006400
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020000 	.word	0x40020000

08000f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f7c:	d116      	bne.n	8000fac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <HAL_TIM_Base_MspInit+0x80>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a19      	ldr	r2, [pc, #100]	; (8000fec <HAL_TIM_Base_MspInit+0x80>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_TIM_Base_MspInit+0x80>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	201c      	movs	r0, #28
 8000fa0:	f001 f9e9 	bl	8002376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fa4:	201c      	movs	r0, #28
 8000fa6:	f001 fa02 	bl	80023ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000faa:	e01a      	b.n	8000fe2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <HAL_TIM_Base_MspInit+0x84>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d115      	bne.n	8000fe2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <HAL_TIM_Base_MspInit+0x80>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <HAL_TIM_Base_MspInit+0x80>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_TIM_Base_MspInit+0x80>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	201d      	movs	r0, #29
 8000fd8:	f001 f9cd 	bl	8002376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fdc:	201d      	movs	r0, #29
 8000fde:	f001 f9e6 	bl	80023ae <HAL_NVIC_EnableIRQ>
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40000400 	.word	0x40000400

08000ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a1d      	ldr	r2, [pc, #116]	; (8001088 <HAL_UART_MspInit+0x94>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d133      	bne.n	800107e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <HAL_UART_MspInit+0x98>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	4a1b      	ldr	r2, [pc, #108]	; (800108c <HAL_UART_MspInit+0x98>)
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	6413      	str	r3, [r2, #64]	; 0x40
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_UART_MspInit+0x98>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <HAL_UART_MspInit+0x98>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a14      	ldr	r2, [pc, #80]	; (800108c <HAL_UART_MspInit+0x98>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_UART_MspInit+0x98>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800104e:	230c      	movs	r3, #12
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800105e:	2307      	movs	r3, #7
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	4809      	ldr	r0, [pc, #36]	; (8001090 <HAL_UART_MspInit+0x9c>)
 800106a:	f001 fa4d 	bl	8002508 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2026      	movs	r0, #38	; 0x26
 8001074:	f001 f97f 	bl	8002376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001078:	2026      	movs	r0, #38	; 0x26
 800107a:	f001 f998 	bl	80023ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40004400 	.word	0x40004400
 800108c:	40023800 	.word	0x40023800
 8001090:	40020000 	.word	0x40020000

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <NMI_Handler+0x4>

0800109a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <MemManage_Handler+0x4>

080010a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e0:	f000 f94a 	bl	8001378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <CAN1_TX_IRQHandler+0x10>)
 80010ee:	f000 fe38 	bl	8001d62 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000008c 	.word	0x2000008c

080010fc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <CAN1_RX0_IRQHandler+0x10>)
 8001102:	f000 fe2e 	bl	8001d62 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000008c 	.word	0x2000008c

08001110 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <TIM2_IRQHandler+0x10>)
 8001116:	f002 f9dc 	bl	80034d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200000b4 	.word	0x200000b4

08001124 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <TIM3_IRQHandler+0x10>)
 800112a:	f002 f9d2 	bl	80034d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200000fc 	.word	0x200000fc

08001138 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <USART2_IRQHandler+0x10>)
 800113e:	f002 fea3 	bl	8003e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000144 	.word	0x20000144

0800114c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	e00a      	b.n	8001174 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800115e:	f3af 8000 	nop.w
 8001162:	4601      	mov	r1, r0
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	60ba      	str	r2, [r7, #8]
 800116a:	b2ca      	uxtb	r2, r1
 800116c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	429a      	cmp	r2, r3
 800117a:	dbf0      	blt.n	800115e <_read+0x12>
	}

return len;
 800117c:	687b      	ldr	r3, [r7, #4]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
	return -1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ae:	605a      	str	r2, [r3, #4]
	return 0;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <_isatty>:

int _isatty(int file)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
	return 1;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
	return 0;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f8:	4a14      	ldr	r2, [pc, #80]	; (800124c <_sbrk+0x5c>)
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <_sbrk+0x60>)
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d102      	bne.n	8001212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <_sbrk+0x64>)
 800120e:	4a12      	ldr	r2, [pc, #72]	; (8001258 <_sbrk+0x68>)
 8001210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	429a      	cmp	r2, r3
 800121e:	d207      	bcs.n	8001230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001220:	f003 fd9a 	bl	8004d58 <__errno>
 8001224:	4603      	mov	r3, r0
 8001226:	220c      	movs	r2, #12
 8001228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800122e:	e009      	b.n	8001244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	4a05      	ldr	r2, [pc, #20]	; (8001254 <_sbrk+0x64>)
 8001240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001242:	68fb      	ldr	r3, [r7, #12]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20020000 	.word	0x20020000
 8001250:	00000400 	.word	0x00000400
 8001254:	20000250 	.word	0x20000250
 8001258:	20000268 	.word	0x20000268

0800125c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <SystemInit+0x20>)
 8001262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001266:	4a05      	ldr	r2, [pc, #20]	; (800127c <SystemInit+0x20>)
 8001268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800126c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001284:	480d      	ldr	r0, [pc, #52]	; (80012bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001286:	490e      	ldr	r1, [pc, #56]	; (80012c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001288:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800128c:	e002      	b.n	8001294 <LoopCopyDataInit>

0800128e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001292:	3304      	adds	r3, #4

08001294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001298:	d3f9      	bcc.n	800128e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800129c:	4c0b      	ldr	r4, [pc, #44]	; (80012cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a0:	e001      	b.n	80012a6 <LoopFillZerobss>

080012a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a4:	3204      	adds	r2, #4

080012a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a8:	d3fb      	bcc.n	80012a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012aa:	f7ff ffd7 	bl	800125c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ae:	f003 fd59 	bl	8004d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012b2:	f7ff fa8b 	bl	80007cc <main>
  bx  lr    
 80012b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012c4:	08006098 	.word	0x08006098
  ldr r2, =_sbss
 80012c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012cc:	20000268 	.word	0x20000268

080012d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC_IRQHandler>
	...

080012d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <HAL_Init+0x40>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <HAL_Init+0x40>)
 80012de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_Init+0x40>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <HAL_Init+0x40>)
 80012ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_Init+0x40>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_Init+0x40>)
 80012f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fc:	2003      	movs	r0, #3
 80012fe:	f001 f82f 	bl	8002360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001302:	2000      	movs	r0, #0
 8001304:	f000 f808 	bl	8001318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001308:	f7ff fd9e 	bl	8000e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023c00 	.word	0x40023c00

08001318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_InitTick+0x54>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_InitTick+0x58>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f001 f847 	bl	80023ca <HAL_SYSTICK_Config>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e00e      	b.n	8001364 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d80a      	bhi.n	8001362 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001354:	f001 f80f 	bl	8002376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <HAL_InitTick+0x5c>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	e000      	b.n	8001364 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000000 	.word	0x20000000
 8001370:	20000008 	.word	0x20000008
 8001374:	20000004 	.word	0x20000004

08001378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x20>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x24>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <HAL_IncTick+0x24>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000008 	.word	0x20000008
 800139c:	20000254 	.word	0x20000254

080013a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <HAL_GetTick+0x14>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000254 	.word	0x20000254

080013b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff ffee 	bl	80013a0 <HAL_GetTick>
 80013c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013d0:	d005      	beq.n	80013de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_Delay+0x44>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013de:	bf00      	nop
 80013e0:	f7ff ffde 	bl	80013a0 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d8f7      	bhi.n	80013e0 <HAL_Delay+0x28>
  {
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000008 	.word	0x20000008

08001400 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e0ed      	b.n	80015ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d102      	bne.n	8001424 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff fd3a 	bl	8000e98 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 0201 	orr.w	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001434:	f7ff ffb4 	bl	80013a0 <HAL_GetTick>
 8001438:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800143a:	e012      	b.n	8001462 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800143c:	f7ff ffb0 	bl	80013a0 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b0a      	cmp	r3, #10
 8001448:	d90b      	bls.n	8001462 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2205      	movs	r2, #5
 800145a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e0c5      	b.n	80015ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0e5      	beq.n	800143c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0202 	bic.w	r2, r2, #2
 800147e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001480:	f7ff ff8e 	bl	80013a0 <HAL_GetTick>
 8001484:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001486:	e012      	b.n	80014ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001488:	f7ff ff8a 	bl	80013a0 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b0a      	cmp	r3, #10
 8001494:	d90b      	bls.n	80014ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2205      	movs	r2, #5
 80014a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e09f      	b.n	80015ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1e5      	bne.n	8001488 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7e1b      	ldrb	r3, [r3, #24]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d108      	bne.n	80014d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	e007      	b.n	80014e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7e5b      	ldrb	r3, [r3, #25]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d108      	bne.n	8001500 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	e007      	b.n	8001510 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800150e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7e9b      	ldrb	r3, [r3, #26]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d108      	bne.n	800152a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0220 	orr.w	r2, r2, #32
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	e007      	b.n	800153a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0220 	bic.w	r2, r2, #32
 8001538:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7edb      	ldrb	r3, [r3, #27]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d108      	bne.n	8001554 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0210 	bic.w	r2, r2, #16
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	e007      	b.n	8001564 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0210 	orr.w	r2, r2, #16
 8001562:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7f1b      	ldrb	r3, [r3, #28]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d108      	bne.n	800157e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0208 	orr.w	r2, r2, #8
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	e007      	b.n	800158e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0208 	bic.w	r2, r2, #8
 800158c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7f5b      	ldrb	r3, [r3, #29]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d108      	bne.n	80015a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f042 0204 	orr.w	r2, r2, #4
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	e007      	b.n	80015b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0204 	bic.w	r2, r2, #4
 80015b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	431a      	orrs	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	ea42 0103 	orr.w	r1, r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	1e5a      	subs	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800160e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001610:	7cfb      	ldrb	r3, [r7, #19]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d003      	beq.n	800161e <HAL_CAN_ConfigFilter+0x26>
 8001616:	7cfb      	ldrb	r3, [r7, #19]
 8001618:	2b02      	cmp	r3, #2
 800161a:	f040 80be 	bne.w	800179a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800161e:	4b65      	ldr	r3, [pc, #404]	; (80017b4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001620:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001628:	f043 0201 	orr.w	r2, r3, #1
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001638:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	431a      	orrs	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f003 031f 	and.w	r3, r3, #31
 800165e:	2201      	movs	r2, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	43db      	mvns	r3, r3
 8001670:	401a      	ands	r2, r3
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d123      	bne.n	80016c8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	43db      	mvns	r3, r3
 800168a:	401a      	ands	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3248      	adds	r2, #72	; 0x48
 80016a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016be:	6979      	ldr	r1, [r7, #20]
 80016c0:	3348      	adds	r3, #72	; 0x48
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	440b      	add	r3, r1
 80016c6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d122      	bne.n	8001716 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	431a      	orrs	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3248      	adds	r2, #72	; 0x48
 80016f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800170a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800170c:	6979      	ldr	r1, [r7, #20]
 800170e:	3348      	adds	r3, #72	; 0x48
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	440b      	add	r3, r1
 8001714:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d109      	bne.n	8001732 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43db      	mvns	r3, r3
 8001728:	401a      	ands	r2, r3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001730:	e007      	b.n	8001742 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	431a      	orrs	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	43db      	mvns	r3, r3
 8001754:	401a      	ands	r2, r3
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800175c:	e007      	b.n	800176e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	431a      	orrs	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d107      	bne.n	8001786 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	431a      	orrs	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800178c:	f023 0201 	bic.w	r2, r3, #1
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e006      	b.n	80017a8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
  }
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	371c      	adds	r7, #28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	40006400 	.word	0x40006400

080017b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d12e      	bne.n	800182a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2202      	movs	r2, #2
 80017d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0201 	bic.w	r2, r2, #1
 80017e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80017e4:	f7ff fddc 	bl	80013a0 <HAL_GetTick>
 80017e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017ea:	e012      	b.n	8001812 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017ec:	f7ff fdd8 	bl	80013a0 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b0a      	cmp	r3, #10
 80017f8:	d90b      	bls.n	8001812 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2205      	movs	r2, #5
 800180a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e012      	b.n	8001838 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1e5      	bne.n	80017ec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	e006      	b.n	8001838 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
  }
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d133      	bne.n	80018bc <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001864:	f7ff fd9c 	bl	80013a0 <HAL_GetTick>
 8001868:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800186a:	e012      	b.n	8001892 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800186c:	f7ff fd98 	bl	80013a0 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b0a      	cmp	r3, #10
 8001878:	d90b      	bls.n	8001892 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2205      	movs	r2, #5
 800188a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e01b      	b.n	80018ca <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0e5      	beq.n	800186c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0202 	bic.w	r2, r2, #2
 80018ae:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	e006      	b.n	80018ca <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
  }
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b089      	sub	sp, #36	; 0x24
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80018f0:	7ffb      	ldrb	r3, [r7, #31]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d003      	beq.n	80018fe <HAL_CAN_AddTxMessage+0x2c>
 80018f6:	7ffb      	ldrb	r3, [r7, #31]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	f040 80b8 	bne.w	8001a6e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10a      	bne.n	800191e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800190e:	2b00      	cmp	r3, #0
 8001910:	d105      	bne.n	800191e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80a0 	beq.w	8001a5e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	0e1b      	lsrs	r3, r3, #24
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d907      	bls.n	800193e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e09e      	b.n	8001a7c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800193e:	2201      	movs	r2, #1
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	409a      	lsls	r2, r3
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d10d      	bne.n	800196c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800195a:	68f9      	ldr	r1, [r7, #12]
 800195c:	6809      	ldr	r1, [r1, #0]
 800195e:	431a      	orrs	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	3318      	adds	r3, #24
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	440b      	add	r3, r1
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	e00f      	b.n	800198c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001976:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800197c:	68f9      	ldr	r1, [r7, #12]
 800197e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001980:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3318      	adds	r3, #24
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	440b      	add	r3, r1
 800198a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6819      	ldr	r1, [r3, #0]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3318      	adds	r3, #24
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	440b      	add	r3, r1
 800199c:	3304      	adds	r3, #4
 800199e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	7d1b      	ldrb	r3, [r3, #20]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d111      	bne.n	80019cc <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	3318      	adds	r3, #24
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	4413      	add	r3, r2
 80019b4:	3304      	adds	r3, #4
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	6811      	ldr	r1, [r2, #0]
 80019bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3318      	adds	r3, #24
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	440b      	add	r3, r1
 80019c8:	3304      	adds	r3, #4
 80019ca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3307      	adds	r3, #7
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	061a      	lsls	r2, r3, #24
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3306      	adds	r3, #6
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	041b      	lsls	r3, r3, #16
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3305      	adds	r3, #5
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	4313      	orrs	r3, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	3204      	adds	r2, #4
 80019ec:	7812      	ldrb	r2, [r2, #0]
 80019ee:	4610      	mov	r0, r2
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	6811      	ldr	r1, [r2, #0]
 80019f4:	ea43 0200 	orr.w	r2, r3, r0
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	440b      	add	r3, r1
 80019fe:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001a02:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3303      	adds	r3, #3
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	061a      	lsls	r2, r3, #24
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3302      	adds	r3, #2
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	041b      	lsls	r3, r3, #16
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	7812      	ldrb	r2, [r2, #0]
 8001a24:	4610      	mov	r0, r2
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	6811      	ldr	r1, [r2, #0]
 8001a2a:	ea43 0200 	orr.w	r2, r3, r0
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	440b      	add	r3, r1
 8001a34:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001a38:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	3318      	adds	r3, #24
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	4413      	add	r3, r2
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	6811      	ldr	r1, [r2, #0]
 8001a4c:	f043 0201 	orr.w	r2, r3, #1
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	3318      	adds	r3, #24
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	440b      	add	r3, r1
 8001a58:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e00e      	b.n	8001a7c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e006      	b.n	8001a7c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
  }
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3724      	adds	r7, #36	; 0x24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a9a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a9c:	7afb      	ldrb	r3, [r7, #11]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d002      	beq.n	8001aa8 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001aa2:	7afb      	ldrb	r3, [r7, #11]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d11d      	bne.n	8001ae4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3301      	adds	r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d002      	beq.n	8001ae4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001af2:	b480      	push	{r7}
 8001af4:	b087      	sub	sp, #28
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b06:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b08:	7dfb      	ldrb	r3, [r7, #23]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d003      	beq.n	8001b16 <HAL_CAN_GetRxMessage+0x24>
 8001b0e:	7dfb      	ldrb	r3, [r7, #23]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	f040 80f3 	bne.w	8001cfc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10e      	bne.n	8001b3a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d116      	bne.n	8001b58 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e0e7      	b.n	8001d0a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d107      	bne.n	8001b58 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0d8      	b.n	8001d0a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	331b      	adds	r3, #27
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	4413      	add	r3, r2
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0204 	and.w	r2, r3, #4
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10c      	bne.n	8001b90 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	331b      	adds	r3, #27
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	4413      	add	r3, r2
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0d5b      	lsrs	r3, r3, #21
 8001b86:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	e00b      	b.n	8001ba8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	331b      	adds	r3, #27
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	4413      	add	r3, r2
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	08db      	lsrs	r3, r3, #3
 8001ba0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	331b      	adds	r3, #27
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	4413      	add	r3, r2
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0202 	and.w	r2, r3, #2
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	331b      	adds	r3, #27
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	4413      	add	r3, r2
 8001bca:	3304      	adds	r3, #4
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 020f 	and.w	r2, r3, #15
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	331b      	adds	r3, #27
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	4413      	add	r3, r2
 8001be2:	3304      	adds	r3, #4
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	0a1b      	lsrs	r3, r3, #8
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	331b      	adds	r3, #27
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	0c1b      	lsrs	r3, r3, #16
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	0a1a      	lsrs	r2, r3, #8
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	3301      	adds	r3, #1
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	4413      	add	r3, r2
 8001c40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	0c1a      	lsrs	r2, r3, #16
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	4413      	add	r3, r2
 8001c5a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	0e1a      	lsrs	r2, r3, #24
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	3303      	adds	r3, #3
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	4413      	add	r3, r2
 8001c74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	0a1a      	lsrs	r2, r3, #8
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	3305      	adds	r3, #5
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	0c1a      	lsrs	r2, r3, #16
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	3306      	adds	r3, #6
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	011b      	lsls	r3, r3, #4
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	0e1a      	lsrs	r2, r3, #24
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	3307      	adds	r3, #7
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d108      	bne.n	8001ce8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0220 	orr.w	r2, r2, #32
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	e007      	b.n	8001cf8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0220 	orr.w	r2, r2, #32
 8001cf6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e006      	b.n	8001d0a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
  }
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d26:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d002      	beq.n	8001d34 <HAL_CAN_ActivateNotification+0x1e>
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d109      	bne.n	8001d48 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6959      	ldr	r1, [r3, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	e006      	b.n	8001d56 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
  }
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b08a      	sub	sp, #40	; 0x28
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d07c      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d023      	beq.n	8001dfa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2201      	movs	r2, #1
 8001db8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f983 	bl	80020d0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001dca:	e016      	b.n	8001dfa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d004      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dde:	e00c      	b.n	8001dfa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d004      	beq.n	8001df4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
 8001df2:	e002      	b.n	8001dfa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f989 	bl	800210c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d024      	beq.n	8001e4e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f963 	bl	80020e4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001e1e:	e016      	b.n	8001e4e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
 8001e32:	e00c      	b.n	8001e4e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d004      	beq.n	8001e48 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
 8001e46:	e002      	b.n	8001e4e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f969 	bl	8002120 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d024      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f943 	bl	80020f8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001e72:	e016      	b.n	8001ea2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d004      	beq.n	8001e88 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
 8001e86:	e00c      	b.n	8001ea2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d004      	beq.n	8001e9c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9a:	e002      	b.n	8001ea2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f949 	bl	8002134 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00c      	beq.n	8001ec6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d007      	beq.n	8001ec6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2210      	movs	r2, #16
 8001ec4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00b      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d006      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2208      	movs	r2, #8
 8001ee0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f930 	bl	8002148 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d009      	beq.n	8001f06 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7fe ff3f 	bl	8000d84 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00c      	beq.n	8001f2a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	f003 0310 	and.w	r3, r3, #16
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d007      	beq.n	8001f2a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2210      	movs	r2, #16
 8001f28:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00b      	beq.n	8001f4c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d006      	beq.n	8001f4c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2208      	movs	r2, #8
 8001f44:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f912 	bl	8002170 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	f003 0310 	and.w	r3, r3, #16
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f8f9 	bl	800215c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00b      	beq.n	8001f8c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d006      	beq.n	8001f8c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2210      	movs	r2, #16
 8001f84:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8fc 	bl	8002184 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00b      	beq.n	8001fae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2208      	movs	r2, #8
 8001fa6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f8f5 	bl	8002198 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d07b      	beq.n	80020b0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d072      	beq.n	80020a8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	f043 0304 	orr.w	r3, r3, #4
 8002014:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800201c:	2b00      	cmp	r3, #0
 800201e:	d043      	beq.n	80020a8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002026:	2b00      	cmp	r3, #0
 8002028:	d03e      	beq.n	80020a8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002030:	2b60      	cmp	r3, #96	; 0x60
 8002032:	d02b      	beq.n	800208c <HAL_CAN_IRQHandler+0x32a>
 8002034:	2b60      	cmp	r3, #96	; 0x60
 8002036:	d82e      	bhi.n	8002096 <HAL_CAN_IRQHandler+0x334>
 8002038:	2b50      	cmp	r3, #80	; 0x50
 800203a:	d022      	beq.n	8002082 <HAL_CAN_IRQHandler+0x320>
 800203c:	2b50      	cmp	r3, #80	; 0x50
 800203e:	d82a      	bhi.n	8002096 <HAL_CAN_IRQHandler+0x334>
 8002040:	2b40      	cmp	r3, #64	; 0x40
 8002042:	d019      	beq.n	8002078 <HAL_CAN_IRQHandler+0x316>
 8002044:	2b40      	cmp	r3, #64	; 0x40
 8002046:	d826      	bhi.n	8002096 <HAL_CAN_IRQHandler+0x334>
 8002048:	2b30      	cmp	r3, #48	; 0x30
 800204a:	d010      	beq.n	800206e <HAL_CAN_IRQHandler+0x30c>
 800204c:	2b30      	cmp	r3, #48	; 0x30
 800204e:	d822      	bhi.n	8002096 <HAL_CAN_IRQHandler+0x334>
 8002050:	2b10      	cmp	r3, #16
 8002052:	d002      	beq.n	800205a <HAL_CAN_IRQHandler+0x2f8>
 8002054:	2b20      	cmp	r3, #32
 8002056:	d005      	beq.n	8002064 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002058:	e01d      	b.n	8002096 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	f043 0308 	orr.w	r3, r3, #8
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002062:	e019      	b.n	8002098 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	f043 0310 	orr.w	r3, r3, #16
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800206c:	e014      	b.n	8002098 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	f043 0320 	orr.w	r3, r3, #32
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002076:	e00f      	b.n	8002098 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002080:	e00a      	b.n	8002098 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800208a:	e005      	b.n	8002098 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002094:	e000      	b.n	8002098 <HAL_CAN_IRQHandler+0x336>
            break;
 8002096:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80020a6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2204      	movs	r2, #4
 80020ae:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d008      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f872 	bl	80021ac <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80020c8:	bf00      	nop
 80020ca:	3728      	adds	r7, #40	; 0x28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <__NVIC_SetPriorityGrouping+0x44>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021dc:	4013      	ands	r3, r2
 80021de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021f2:	4a04      	ldr	r2, [pc, #16]	; (8002204 <__NVIC_SetPriorityGrouping+0x44>)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	60d3      	str	r3, [r2, #12]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <__NVIC_GetPriorityGrouping+0x18>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	f003 0307 	and.w	r3, r3, #7
}
 8002216:	4618      	mov	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	2b00      	cmp	r3, #0
 8002234:	db0b      	blt.n	800224e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	f003 021f 	and.w	r2, r3, #31
 800223c:	4907      	ldr	r1, [pc, #28]	; (800225c <__NVIC_EnableIRQ+0x38>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	2001      	movs	r0, #1
 8002246:	fa00 f202 	lsl.w	r2, r0, r2
 800224a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000e100 	.word	0xe000e100

08002260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002270:	2b00      	cmp	r3, #0
 8002272:	db0a      	blt.n	800228a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	490c      	ldr	r1, [pc, #48]	; (80022ac <__NVIC_SetPriority+0x4c>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	440b      	add	r3, r1
 8002284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002288:	e00a      	b.n	80022a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4908      	ldr	r1, [pc, #32]	; (80022b0 <__NVIC_SetPriority+0x50>)
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	3b04      	subs	r3, #4
 8002298:	0112      	lsls	r2, r2, #4
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	440b      	add	r3, r1
 800229e:	761a      	strb	r2, [r3, #24]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000e100 	.word	0xe000e100
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	; 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f1c3 0307 	rsb	r3, r3, #7
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	bf28      	it	cs
 80022d2:	2304      	movcs	r3, #4
 80022d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3304      	adds	r3, #4
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d902      	bls.n	80022e4 <NVIC_EncodePriority+0x30>
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3b03      	subs	r3, #3
 80022e2:	e000      	b.n	80022e6 <NVIC_EncodePriority+0x32>
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	401a      	ands	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	43d9      	mvns	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	4313      	orrs	r3, r2
         );
}
 800230e:	4618      	mov	r0, r3
 8002310:	3724      	adds	r7, #36	; 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800232c:	d301      	bcc.n	8002332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800232e:	2301      	movs	r3, #1
 8002330:	e00f      	b.n	8002352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002332:	4a0a      	ldr	r2, [pc, #40]	; (800235c <SysTick_Config+0x40>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800233a:	210f      	movs	r1, #15
 800233c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002340:	f7ff ff8e 	bl	8002260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <SysTick_Config+0x40>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800234a:	4b04      	ldr	r3, [pc, #16]	; (800235c <SysTick_Config+0x40>)
 800234c:	2207      	movs	r2, #7
 800234e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	e000e010 	.word	0xe000e010

08002360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ff29 	bl	80021c0 <__NVIC_SetPriorityGrouping>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002388:	f7ff ff3e 	bl	8002208 <__NVIC_GetPriorityGrouping>
 800238c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	6978      	ldr	r0, [r7, #20]
 8002394:	f7ff ff8e 	bl	80022b4 <NVIC_EncodePriority>
 8002398:	4602      	mov	r2, r0
 800239a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff5d 	bl	8002260 <__NVIC_SetPriority>
}
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff31 	bl	8002224 <__NVIC_EnableIRQ>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff ffa2 	bl	800231c <SysTick_Config>
 80023d8:	4603      	mov	r3, r0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023f0:	f7fe ffd6 	bl	80013a0 <HAL_GetTick>
 80023f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d008      	beq.n	8002414 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2280      	movs	r2, #128	; 0x80
 8002406:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e052      	b.n	80024ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0216 	bic.w	r2, r2, #22
 8002422:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002432:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	2b00      	cmp	r3, #0
 800243a:	d103      	bne.n	8002444 <HAL_DMA_Abort+0x62>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0208 	bic.w	r2, r2, #8
 8002452:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0201 	bic.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002464:	e013      	b.n	800248e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002466:	f7fe ff9b 	bl	80013a0 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b05      	cmp	r3, #5
 8002472:	d90c      	bls.n	800248e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2220      	movs	r2, #32
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2203      	movs	r2, #3
 800247e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e015      	b.n	80024ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1e4      	bne.n	8002466 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a0:	223f      	movs	r2, #63	; 0x3f
 80024a2:	409a      	lsls	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d004      	beq.n	80024e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2280      	movs	r2, #128	; 0x80
 80024da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e00c      	b.n	80024fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2205      	movs	r2, #5
 80024e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0201 	bic.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002516:	2300      	movs	r3, #0
 8002518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	e165      	b.n	80027f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002524:	2201      	movs	r2, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	429a      	cmp	r2, r3
 800253e:	f040 8154 	bne.w	80027ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d005      	beq.n	800255a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002556:	2b02      	cmp	r3, #2
 8002558:	d130      	bne.n	80025bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002590:	2201      	movs	r2, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 0201 	and.w	r2, r3, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d017      	beq.n	80025f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d123      	bne.n	800264c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	08da      	lsrs	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3208      	adds	r2, #8
 800260c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	220f      	movs	r2, #15
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	08da      	lsrs	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3208      	adds	r2, #8
 8002646:	69b9      	ldr	r1, [r7, #24]
 8002648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0203 	and.w	r2, r3, #3
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80ae 	beq.w	80027ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b5d      	ldr	r3, [pc, #372]	; (8002808 <HAL_GPIO_Init+0x300>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	4a5c      	ldr	r2, [pc, #368]	; (8002808 <HAL_GPIO_Init+0x300>)
 8002698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800269c:	6453      	str	r3, [r2, #68]	; 0x44
 800269e:	4b5a      	ldr	r3, [pc, #360]	; (8002808 <HAL_GPIO_Init+0x300>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026aa:	4a58      	ldr	r2, [pc, #352]	; (800280c <HAL_GPIO_Init+0x304>)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	3302      	adds	r3, #2
 80026b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	220f      	movs	r2, #15
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a4f      	ldr	r2, [pc, #316]	; (8002810 <HAL_GPIO_Init+0x308>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d025      	beq.n	8002722 <HAL_GPIO_Init+0x21a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4e      	ldr	r2, [pc, #312]	; (8002814 <HAL_GPIO_Init+0x30c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d01f      	beq.n	800271e <HAL_GPIO_Init+0x216>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4d      	ldr	r2, [pc, #308]	; (8002818 <HAL_GPIO_Init+0x310>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d019      	beq.n	800271a <HAL_GPIO_Init+0x212>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4c      	ldr	r2, [pc, #304]	; (800281c <HAL_GPIO_Init+0x314>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d013      	beq.n	8002716 <HAL_GPIO_Init+0x20e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4b      	ldr	r2, [pc, #300]	; (8002820 <HAL_GPIO_Init+0x318>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00d      	beq.n	8002712 <HAL_GPIO_Init+0x20a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4a      	ldr	r2, [pc, #296]	; (8002824 <HAL_GPIO_Init+0x31c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d007      	beq.n	800270e <HAL_GPIO_Init+0x206>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a49      	ldr	r2, [pc, #292]	; (8002828 <HAL_GPIO_Init+0x320>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d101      	bne.n	800270a <HAL_GPIO_Init+0x202>
 8002706:	2306      	movs	r3, #6
 8002708:	e00c      	b.n	8002724 <HAL_GPIO_Init+0x21c>
 800270a:	2307      	movs	r3, #7
 800270c:	e00a      	b.n	8002724 <HAL_GPIO_Init+0x21c>
 800270e:	2305      	movs	r3, #5
 8002710:	e008      	b.n	8002724 <HAL_GPIO_Init+0x21c>
 8002712:	2304      	movs	r3, #4
 8002714:	e006      	b.n	8002724 <HAL_GPIO_Init+0x21c>
 8002716:	2303      	movs	r3, #3
 8002718:	e004      	b.n	8002724 <HAL_GPIO_Init+0x21c>
 800271a:	2302      	movs	r3, #2
 800271c:	e002      	b.n	8002724 <HAL_GPIO_Init+0x21c>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_GPIO_Init+0x21c>
 8002722:	2300      	movs	r3, #0
 8002724:	69fa      	ldr	r2, [r7, #28]
 8002726:	f002 0203 	and.w	r2, r2, #3
 800272a:	0092      	lsls	r2, r2, #2
 800272c:	4093      	lsls	r3, r2
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002734:	4935      	ldr	r1, [pc, #212]	; (800280c <HAL_GPIO_Init+0x304>)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	3302      	adds	r3, #2
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002742:	4b3a      	ldr	r3, [pc, #232]	; (800282c <HAL_GPIO_Init+0x324>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002766:	4a31      	ldr	r2, [pc, #196]	; (800282c <HAL_GPIO_Init+0x324>)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800276c:	4b2f      	ldr	r3, [pc, #188]	; (800282c <HAL_GPIO_Init+0x324>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002790:	4a26      	ldr	r2, [pc, #152]	; (800282c <HAL_GPIO_Init+0x324>)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002796:	4b25      	ldr	r3, [pc, #148]	; (800282c <HAL_GPIO_Init+0x324>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ba:	4a1c      	ldr	r2, [pc, #112]	; (800282c <HAL_GPIO_Init+0x324>)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027c0:	4b1a      	ldr	r3, [pc, #104]	; (800282c <HAL_GPIO_Init+0x324>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027e4:	4a11      	ldr	r2, [pc, #68]	; (800282c <HAL_GPIO_Init+0x324>)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	3301      	adds	r3, #1
 80027ee:	61fb      	str	r3, [r7, #28]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	2b0f      	cmp	r3, #15
 80027f4:	f67f ae96 	bls.w	8002524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	3724      	adds	r7, #36	; 0x24
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800
 800280c:	40013800 	.word	0x40013800
 8002810:	40020000 	.word	0x40020000
 8002814:	40020400 	.word	0x40020400
 8002818:	40020800 	.word	0x40020800
 800281c:	40020c00 	.word	0x40020c00
 8002820:	40021000 	.word	0x40021000
 8002824:	40021400 	.word	0x40021400
 8002828:	40021800 	.word	0x40021800
 800282c:	40013c00 	.word	0x40013c00

08002830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	807b      	strh	r3, [r7, #2]
 800283c:	4613      	mov	r3, r2
 800283e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002840:	787b      	ldrb	r3, [r7, #1]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002846:	887a      	ldrh	r2, [r7, #2]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800284c:	e003      	b.n	8002856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800284e:	887b      	ldrh	r3, [r7, #2]
 8002850:	041a      	lsls	r2, r3, #16
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	619a      	str	r2, [r3, #24]
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
	...

08002864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0cc      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002878:	4b68      	ldr	r3, [pc, #416]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d90c      	bls.n	80028a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002886:	4b65      	ldr	r3, [pc, #404]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	4b63      	ldr	r3, [pc, #396]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0b8      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d020      	beq.n	80028ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b8:	4b59      	ldr	r3, [pc, #356]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	4a58      	ldr	r2, [pc, #352]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d0:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	4a52      	ldr	r2, [pc, #328]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028dc:	4b50      	ldr	r3, [pc, #320]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	494d      	ldr	r1, [pc, #308]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d044      	beq.n	8002984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d107      	bne.n	8002912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002902:	4b47      	ldr	r3, [pc, #284]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d119      	bne.n	8002942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e07f      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d003      	beq.n	8002922 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800291e:	2b03      	cmp	r3, #3
 8002920:	d107      	bne.n	8002932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002922:	4b3f      	ldr	r3, [pc, #252]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e06f      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002932:	4b3b      	ldr	r3, [pc, #236]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e067      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002942:	4b37      	ldr	r3, [pc, #220]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f023 0203 	bic.w	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4934      	ldr	r1, [pc, #208]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002950:	4313      	orrs	r3, r2
 8002952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002954:	f7fe fd24 	bl	80013a0 <HAL_GetTick>
 8002958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295a:	e00a      	b.n	8002972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800295c:	f7fe fd20 	bl	80013a0 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f241 3288 	movw	r2, #5000	; 0x1388
 800296a:	4293      	cmp	r3, r2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e04f      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002972:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 020c 	and.w	r2, r3, #12
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	429a      	cmp	r2, r3
 8002982:	d1eb      	bne.n	800295c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002984:	4b25      	ldr	r3, [pc, #148]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d20c      	bcs.n	80029ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002992:	4b22      	ldr	r3, [pc, #136]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e032      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4916      	ldr	r1, [pc, #88]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d009      	beq.n	80029ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029d6:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	490e      	ldr	r1, [pc, #56]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ea:	f000 f855 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 80029ee:	4602      	mov	r2, r0
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	490a      	ldr	r1, [pc, #40]	; (8002a24 <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	5ccb      	ldrb	r3, [r1, r3]
 80029fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002a02:	4a09      	ldr	r2, [pc, #36]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe fc84 	bl	8001318 <HAL_InitTick>

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023c00 	.word	0x40023c00
 8002a20:	40023800 	.word	0x40023800
 8002a24:	08005fd8 	.word	0x08005fd8
 8002a28:	20000000 	.word	0x20000000
 8002a2c:	20000004 	.word	0x20000004

08002a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a34:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	20000000 	.word	0x20000000

08002a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a4c:	f7ff fff0 	bl	8002a30 <HAL_RCC_GetHCLKFreq>
 8002a50:	4602      	mov	r2, r0
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	0a9b      	lsrs	r3, r3, #10
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4903      	ldr	r1, [pc, #12]	; (8002a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	08005fe8 	.word	0x08005fe8

08002a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a74:	f7ff ffdc 	bl	8002a30 <HAL_RCC_GetHCLKFreq>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	0b5b      	lsrs	r3, r3, #13
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	4903      	ldr	r1, [pc, #12]	; (8002a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a86:	5ccb      	ldrb	r3, [r1, r3]
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40023800 	.word	0x40023800
 8002a94:	08005fe8 	.word	0x08005fe8

08002a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a9c:	b0ae      	sub	sp, #184	; 0xb8
 8002a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002abe:	4bcb      	ldr	r3, [pc, #812]	; (8002dec <HAL_RCC_GetSysClockFreq+0x354>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b0c      	cmp	r3, #12
 8002ac8:	f200 8206 	bhi.w	8002ed8 <HAL_RCC_GetSysClockFreq+0x440>
 8002acc:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad2:	bf00      	nop
 8002ad4:	08002b09 	.word	0x08002b09
 8002ad8:	08002ed9 	.word	0x08002ed9
 8002adc:	08002ed9 	.word	0x08002ed9
 8002ae0:	08002ed9 	.word	0x08002ed9
 8002ae4:	08002b11 	.word	0x08002b11
 8002ae8:	08002ed9 	.word	0x08002ed9
 8002aec:	08002ed9 	.word	0x08002ed9
 8002af0:	08002ed9 	.word	0x08002ed9
 8002af4:	08002b19 	.word	0x08002b19
 8002af8:	08002ed9 	.word	0x08002ed9
 8002afc:	08002ed9 	.word	0x08002ed9
 8002b00:	08002ed9 	.word	0x08002ed9
 8002b04:	08002d09 	.word	0x08002d09
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b08:	4bb9      	ldr	r3, [pc, #740]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002b0e:	e1e7      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b10:	4bb8      	ldr	r3, [pc, #736]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b16:	e1e3      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b18:	4bb4      	ldr	r3, [pc, #720]	; (8002dec <HAL_RCC_GetSysClockFreq+0x354>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b24:	4bb1      	ldr	r3, [pc, #708]	; (8002dec <HAL_RCC_GetSysClockFreq+0x354>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d071      	beq.n	8002c14 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b30:	4bae      	ldr	r3, [pc, #696]	; (8002dec <HAL_RCC_GetSysClockFreq+0x354>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	099b      	lsrs	r3, r3, #6
 8002b36:	2200      	movs	r2, #0
 8002b38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b3c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002b40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b56:	4622      	mov	r2, r4
 8002b58:	462b      	mov	r3, r5
 8002b5a:	f04f 0000 	mov.w	r0, #0
 8002b5e:	f04f 0100 	mov.w	r1, #0
 8002b62:	0159      	lsls	r1, r3, #5
 8002b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b68:	0150      	lsls	r0, r2, #5
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4621      	mov	r1, r4
 8002b70:	1a51      	subs	r1, r2, r1
 8002b72:	6439      	str	r1, [r7, #64]	; 0x40
 8002b74:	4629      	mov	r1, r5
 8002b76:	eb63 0301 	sbc.w	r3, r3, r1
 8002b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002b88:	4649      	mov	r1, r9
 8002b8a:	018b      	lsls	r3, r1, #6
 8002b8c:	4641      	mov	r1, r8
 8002b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b92:	4641      	mov	r1, r8
 8002b94:	018a      	lsls	r2, r1, #6
 8002b96:	4641      	mov	r1, r8
 8002b98:	1a51      	subs	r1, r2, r1
 8002b9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b9c:	4649      	mov	r1, r9
 8002b9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002bb0:	4649      	mov	r1, r9
 8002bb2:	00cb      	lsls	r3, r1, #3
 8002bb4:	4641      	mov	r1, r8
 8002bb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bba:	4641      	mov	r1, r8
 8002bbc:	00ca      	lsls	r2, r1, #3
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	4622      	mov	r2, r4
 8002bc6:	189b      	adds	r3, r3, r2
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bca:	462b      	mov	r3, r5
 8002bcc:	460a      	mov	r2, r1
 8002bce:	eb42 0303 	adc.w	r3, r2, r3
 8002bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002be0:	4629      	mov	r1, r5
 8002be2:	024b      	lsls	r3, r1, #9
 8002be4:	4621      	mov	r1, r4
 8002be6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bea:	4621      	mov	r1, r4
 8002bec:	024a      	lsls	r2, r1, #9
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c00:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002c04:	f7fd fb54 	bl	80002b0 <__aeabi_uldivmod>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c12:	e067      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c14:	4b75      	ldr	r3, [pc, #468]	; (8002dec <HAL_RCC_GetSysClockFreq+0x354>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	099b      	lsrs	r3, r3, #6
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c20:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c2e:	2300      	movs	r3, #0
 8002c30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c32:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002c36:	4622      	mov	r2, r4
 8002c38:	462b      	mov	r3, r5
 8002c3a:	f04f 0000 	mov.w	r0, #0
 8002c3e:	f04f 0100 	mov.w	r1, #0
 8002c42:	0159      	lsls	r1, r3, #5
 8002c44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c48:	0150      	lsls	r0, r2, #5
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4621      	mov	r1, r4
 8002c50:	1a51      	subs	r1, r2, r1
 8002c52:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c54:	4629      	mov	r1, r5
 8002c56:	eb63 0301 	sbc.w	r3, r3, r1
 8002c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002c68:	4649      	mov	r1, r9
 8002c6a:	018b      	lsls	r3, r1, #6
 8002c6c:	4641      	mov	r1, r8
 8002c6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c72:	4641      	mov	r1, r8
 8002c74:	018a      	lsls	r2, r1, #6
 8002c76:	4641      	mov	r1, r8
 8002c78:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c7c:	4649      	mov	r1, r9
 8002c7e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c8e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c96:	4692      	mov	sl, r2
 8002c98:	469b      	mov	fp, r3
 8002c9a:	4623      	mov	r3, r4
 8002c9c:	eb1a 0303 	adds.w	r3, sl, r3
 8002ca0:	623b      	str	r3, [r7, #32]
 8002ca2:	462b      	mov	r3, r5
 8002ca4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	028b      	lsls	r3, r1, #10
 8002cba:	4621      	mov	r1, r4
 8002cbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	028a      	lsls	r2, r1, #10
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ccc:	2200      	movs	r2, #0
 8002cce:	673b      	str	r3, [r7, #112]	; 0x70
 8002cd0:	677a      	str	r2, [r7, #116]	; 0x74
 8002cd2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002cd6:	f7fd faeb 	bl	80002b0 <__aeabi_uldivmod>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4613      	mov	r3, r2
 8002ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ce4:	4b41      	ldr	r3, [pc, #260]	; (8002dec <HAL_RCC_GetSysClockFreq+0x354>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	0c1b      	lsrs	r3, r3, #16
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002cf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d06:	e0eb      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d08:	4b38      	ldr	r3, [pc, #224]	; (8002dec <HAL_RCC_GetSysClockFreq+0x354>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d14:	4b35      	ldr	r3, [pc, #212]	; (8002dec <HAL_RCC_GetSysClockFreq+0x354>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d06b      	beq.n	8002df8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d20:	4b32      	ldr	r3, [pc, #200]	; (8002dec <HAL_RCC_GetSysClockFreq+0x354>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	099b      	lsrs	r3, r3, #6
 8002d26:	2200      	movs	r2, #0
 8002d28:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d32:	663b      	str	r3, [r7, #96]	; 0x60
 8002d34:	2300      	movs	r3, #0
 8002d36:	667b      	str	r3, [r7, #100]	; 0x64
 8002d38:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002d3c:	4622      	mov	r2, r4
 8002d3e:	462b      	mov	r3, r5
 8002d40:	f04f 0000 	mov.w	r0, #0
 8002d44:	f04f 0100 	mov.w	r1, #0
 8002d48:	0159      	lsls	r1, r3, #5
 8002d4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d4e:	0150      	lsls	r0, r2, #5
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4621      	mov	r1, r4
 8002d56:	1a51      	subs	r1, r2, r1
 8002d58:	61b9      	str	r1, [r7, #24]
 8002d5a:	4629      	mov	r1, r5
 8002d5c:	eb63 0301 	sbc.w	r3, r3, r1
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d6e:	4659      	mov	r1, fp
 8002d70:	018b      	lsls	r3, r1, #6
 8002d72:	4651      	mov	r1, sl
 8002d74:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d78:	4651      	mov	r1, sl
 8002d7a:	018a      	lsls	r2, r1, #6
 8002d7c:	4651      	mov	r1, sl
 8002d7e:	ebb2 0801 	subs.w	r8, r2, r1
 8002d82:	4659      	mov	r1, fp
 8002d84:	eb63 0901 	sbc.w	r9, r3, r1
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d94:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d98:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d9c:	4690      	mov	r8, r2
 8002d9e:	4699      	mov	r9, r3
 8002da0:	4623      	mov	r3, r4
 8002da2:	eb18 0303 	adds.w	r3, r8, r3
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	462b      	mov	r3, r5
 8002daa:	eb49 0303 	adc.w	r3, r9, r3
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	024b      	lsls	r3, r1, #9
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	024a      	lsls	r2, r1, #9
 8002dca:	4610      	mov	r0, r2
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dd6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002dd8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ddc:	f7fd fa68 	bl	80002b0 <__aeabi_uldivmod>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4613      	mov	r3, r2
 8002de6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dea:	e065      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x420>
 8002dec:	40023800 	.word	0x40023800
 8002df0:	00f42400 	.word	0x00f42400
 8002df4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df8:	4b3d      	ldr	r3, [pc, #244]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	099b      	lsrs	r3, r3, #6
 8002dfe:	2200      	movs	r2, #0
 8002e00:	4618      	mov	r0, r3
 8002e02:	4611      	mov	r1, r2
 8002e04:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e08:	653b      	str	r3, [r7, #80]	; 0x50
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	657b      	str	r3, [r7, #84]	; 0x54
 8002e0e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002e12:	4642      	mov	r2, r8
 8002e14:	464b      	mov	r3, r9
 8002e16:	f04f 0000 	mov.w	r0, #0
 8002e1a:	f04f 0100 	mov.w	r1, #0
 8002e1e:	0159      	lsls	r1, r3, #5
 8002e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e24:	0150      	lsls	r0, r2, #5
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4641      	mov	r1, r8
 8002e2c:	1a51      	subs	r1, r2, r1
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	4649      	mov	r1, r9
 8002e32:	eb63 0301 	sbc.w	r3, r3, r1
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e44:	4659      	mov	r1, fp
 8002e46:	018b      	lsls	r3, r1, #6
 8002e48:	4651      	mov	r1, sl
 8002e4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e4e:	4651      	mov	r1, sl
 8002e50:	018a      	lsls	r2, r1, #6
 8002e52:	4651      	mov	r1, sl
 8002e54:	1a54      	subs	r4, r2, r1
 8002e56:	4659      	mov	r1, fp
 8002e58:	eb63 0501 	sbc.w	r5, r3, r1
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	f04f 0300 	mov.w	r3, #0
 8002e64:	00eb      	lsls	r3, r5, #3
 8002e66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e6a:	00e2      	lsls	r2, r4, #3
 8002e6c:	4614      	mov	r4, r2
 8002e6e:	461d      	mov	r5, r3
 8002e70:	4643      	mov	r3, r8
 8002e72:	18e3      	adds	r3, r4, r3
 8002e74:	603b      	str	r3, [r7, #0]
 8002e76:	464b      	mov	r3, r9
 8002e78:	eb45 0303 	adc.w	r3, r5, r3
 8002e7c:	607b      	str	r3, [r7, #4]
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e8a:	4629      	mov	r1, r5
 8002e8c:	028b      	lsls	r3, r1, #10
 8002e8e:	4621      	mov	r1, r4
 8002e90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e94:	4621      	mov	r1, r4
 8002e96:	028a      	lsls	r2, r1, #10
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ea4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002ea6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002eaa:	f7fd fa01 	bl	80002b0 <__aeabi_uldivmod>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002eb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	0f1b      	lsrs	r3, r3, #28
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002ec6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002eca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ed6:	e003      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002eda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ede:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ee0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	37b8      	adds	r7, #184	; 0xb8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eee:	bf00      	nop
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	00f42400 	.word	0x00f42400

08002ef8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e28d      	b.n	8003426 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8083 	beq.w	800301e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f18:	4b94      	ldr	r3, [pc, #592]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d019      	beq.n	8002f58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f24:	4b91      	ldr	r3, [pc, #580]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d106      	bne.n	8002f3e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f30:	4b8e      	ldr	r3, [pc, #568]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f3c:	d00c      	beq.n	8002f58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f3e:	4b8b      	ldr	r3, [pc, #556]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f46:	2b0c      	cmp	r3, #12
 8002f48:	d112      	bne.n	8002f70 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f4a:	4b88      	ldr	r3, [pc, #544]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f56:	d10b      	bne.n	8002f70 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f58:	4b84      	ldr	r3, [pc, #528]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d05b      	beq.n	800301c <HAL_RCC_OscConfig+0x124>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d157      	bne.n	800301c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e25a      	b.n	8003426 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f78:	d106      	bne.n	8002f88 <HAL_RCC_OscConfig+0x90>
 8002f7a:	4b7c      	ldr	r3, [pc, #496]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a7b      	ldr	r2, [pc, #492]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e01d      	b.n	8002fc4 <HAL_RCC_OscConfig+0xcc>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0xb4>
 8002f92:	4b76      	ldr	r3, [pc, #472]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a75      	ldr	r2, [pc, #468]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8002f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	4b73      	ldr	r3, [pc, #460]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a72      	ldr	r2, [pc, #456]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e00b      	b.n	8002fc4 <HAL_RCC_OscConfig+0xcc>
 8002fac:	4b6f      	ldr	r3, [pc, #444]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a6e      	ldr	r2, [pc, #440]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8002fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	4b6c      	ldr	r3, [pc, #432]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a6b      	ldr	r2, [pc, #428]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8002fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d013      	beq.n	8002ff4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7fe f9e8 	bl	80013a0 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd4:	f7fe f9e4 	bl	80013a0 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b64      	cmp	r3, #100	; 0x64
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e21f      	b.n	8003426 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	4b61      	ldr	r3, [pc, #388]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0xdc>
 8002ff2:	e014      	b.n	800301e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff4:	f7fe f9d4 	bl	80013a0 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ffc:	f7fe f9d0 	bl	80013a0 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	; 0x64
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e20b      	b.n	8003426 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300e:	4b57      	ldr	r3, [pc, #348]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x104>
 800301a:	e000      	b.n	800301e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800301c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d06f      	beq.n	800310a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800302a:	4b50      	ldr	r3, [pc, #320]	; (800316c <HAL_RCC_OscConfig+0x274>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b00      	cmp	r3, #0
 8003034:	d017      	beq.n	8003066 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003036:	4b4d      	ldr	r3, [pc, #308]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800303e:	2b08      	cmp	r3, #8
 8003040:	d105      	bne.n	800304e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003042:	4b4a      	ldr	r3, [pc, #296]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00b      	beq.n	8003066 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800304e:	4b47      	ldr	r3, [pc, #284]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003056:	2b0c      	cmp	r3, #12
 8003058:	d11c      	bne.n	8003094 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800305a:	4b44      	ldr	r3, [pc, #272]	; (800316c <HAL_RCC_OscConfig+0x274>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d116      	bne.n	8003094 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003066:	4b41      	ldr	r3, [pc, #260]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_RCC_OscConfig+0x186>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d001      	beq.n	800307e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e1d3      	b.n	8003426 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307e:	4b3b      	ldr	r3, [pc, #236]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4937      	ldr	r1, [pc, #220]	; (800316c <HAL_RCC_OscConfig+0x274>)
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003092:	e03a      	b.n	800310a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d020      	beq.n	80030de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800309c:	4b34      	ldr	r3, [pc, #208]	; (8003170 <HAL_RCC_OscConfig+0x278>)
 800309e:	2201      	movs	r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a2:	f7fe f97d 	bl	80013a0 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030aa:	f7fe f979 	bl	80013a0 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e1b4      	b.n	8003426 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030bc:	4b2b      	ldr	r3, [pc, #172]	; (800316c <HAL_RCC_OscConfig+0x274>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c8:	4b28      	ldr	r3, [pc, #160]	; (800316c <HAL_RCC_OscConfig+0x274>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4925      	ldr	r1, [pc, #148]	; (800316c <HAL_RCC_OscConfig+0x274>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]
 80030dc:	e015      	b.n	800310a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030de:	4b24      	ldr	r3, [pc, #144]	; (8003170 <HAL_RCC_OscConfig+0x278>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7fe f95c 	bl	80013a0 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ec:	f7fe f958 	bl	80013a0 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e193      	b.n	8003426 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fe:	4b1b      	ldr	r3, [pc, #108]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d036      	beq.n	8003184 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d016      	beq.n	800314c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_RCC_OscConfig+0x27c>)
 8003120:	2201      	movs	r2, #1
 8003122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003124:	f7fe f93c 	bl	80013a0 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800312c:	f7fe f938 	bl	80013a0 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e173      	b.n	8003426 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313e:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_OscConfig+0x274>)
 8003140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0x234>
 800314a:	e01b      	b.n	8003184 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314c:	4b09      	ldr	r3, [pc, #36]	; (8003174 <HAL_RCC_OscConfig+0x27c>)
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003152:	f7fe f925 	bl	80013a0 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003158:	e00e      	b.n	8003178 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800315a:	f7fe f921 	bl	80013a0 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d907      	bls.n	8003178 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e15c      	b.n	8003426 <HAL_RCC_OscConfig+0x52e>
 800316c:	40023800 	.word	0x40023800
 8003170:	42470000 	.word	0x42470000
 8003174:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003178:	4b8a      	ldr	r3, [pc, #552]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 800317a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1ea      	bne.n	800315a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 8097 	beq.w	80032c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003192:	2300      	movs	r3, #0
 8003194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003196:	4b83      	ldr	r3, [pc, #524]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10f      	bne.n	80031c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	4b7f      	ldr	r3, [pc, #508]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	4a7e      	ldr	r2, [pc, #504]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b0:	6413      	str	r3, [r2, #64]	; 0x40
 80031b2:	4b7c      	ldr	r3, [pc, #496]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031be:	2301      	movs	r3, #1
 80031c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c2:	4b79      	ldr	r3, [pc, #484]	; (80033a8 <HAL_RCC_OscConfig+0x4b0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d118      	bne.n	8003200 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ce:	4b76      	ldr	r3, [pc, #472]	; (80033a8 <HAL_RCC_OscConfig+0x4b0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a75      	ldr	r2, [pc, #468]	; (80033a8 <HAL_RCC_OscConfig+0x4b0>)
 80031d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031da:	f7fe f8e1 	bl	80013a0 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e2:	f7fe f8dd 	bl	80013a0 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e118      	b.n	8003426 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f4:	4b6c      	ldr	r3, [pc, #432]	; (80033a8 <HAL_RCC_OscConfig+0x4b0>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0f0      	beq.n	80031e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d106      	bne.n	8003216 <HAL_RCC_OscConfig+0x31e>
 8003208:	4b66      	ldr	r3, [pc, #408]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	4a65      	ldr	r2, [pc, #404]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6713      	str	r3, [r2, #112]	; 0x70
 8003214:	e01c      	b.n	8003250 <HAL_RCC_OscConfig+0x358>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b05      	cmp	r3, #5
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0x340>
 800321e:	4b61      	ldr	r3, [pc, #388]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	4a60      	ldr	r2, [pc, #384]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 8003224:	f043 0304 	orr.w	r3, r3, #4
 8003228:	6713      	str	r3, [r2, #112]	; 0x70
 800322a:	4b5e      	ldr	r3, [pc, #376]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	4a5d      	ldr	r2, [pc, #372]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6713      	str	r3, [r2, #112]	; 0x70
 8003236:	e00b      	b.n	8003250 <HAL_RCC_OscConfig+0x358>
 8003238:	4b5a      	ldr	r3, [pc, #360]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 800323a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323c:	4a59      	ldr	r2, [pc, #356]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	6713      	str	r3, [r2, #112]	; 0x70
 8003244:	4b57      	ldr	r3, [pc, #348]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	4a56      	ldr	r2, [pc, #344]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 800324a:	f023 0304 	bic.w	r3, r3, #4
 800324e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d015      	beq.n	8003284 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003258:	f7fe f8a2 	bl	80013a0 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325e:	e00a      	b.n	8003276 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003260:	f7fe f89e 	bl	80013a0 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	f241 3288 	movw	r2, #5000	; 0x1388
 800326e:	4293      	cmp	r3, r2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e0d7      	b.n	8003426 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003276:	4b4b      	ldr	r3, [pc, #300]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0ee      	beq.n	8003260 <HAL_RCC_OscConfig+0x368>
 8003282:	e014      	b.n	80032ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003284:	f7fe f88c 	bl	80013a0 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800328c:	f7fe f888 	bl	80013a0 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e0c1      	b.n	8003426 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a2:	4b40      	ldr	r3, [pc, #256]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1ee      	bne.n	800328c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d105      	bne.n	80032c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b4:	4b3b      	ldr	r3, [pc, #236]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	4a3a      	ldr	r2, [pc, #232]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 80032ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80ad 	beq.w	8003424 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032ca:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d060      	beq.n	8003398 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d145      	bne.n	800336a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032de:	4b33      	ldr	r3, [pc, #204]	; (80033ac <HAL_RCC_OscConfig+0x4b4>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fe f85c 	bl	80013a0 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ec:	f7fe f858 	bl	80013a0 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e093      	b.n	8003426 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fe:	4b29      	ldr	r3, [pc, #164]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69da      	ldr	r2, [r3, #28]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	019b      	lsls	r3, r3, #6
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	3b01      	subs	r3, #1
 8003324:	041b      	lsls	r3, r3, #16
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	061b      	lsls	r3, r3, #24
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	071b      	lsls	r3, r3, #28
 8003336:	491b      	ldr	r1, [pc, #108]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 8003338:	4313      	orrs	r3, r2
 800333a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800333c:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <HAL_RCC_OscConfig+0x4b4>)
 800333e:	2201      	movs	r2, #1
 8003340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003342:	f7fe f82d 	bl	80013a0 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334a:	f7fe f829 	bl	80013a0 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e064      	b.n	8003426 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335c:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCC_OscConfig+0x452>
 8003368:	e05c      	b.n	8003424 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336a:	4b10      	ldr	r3, [pc, #64]	; (80033ac <HAL_RCC_OscConfig+0x4b4>)
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fe f816 	bl	80013a0 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003378:	f7fe f812 	bl	80013a0 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e04d      	b.n	8003426 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800338a:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <HAL_RCC_OscConfig+0x4ac>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0x480>
 8003396:	e045      	b.n	8003424 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d107      	bne.n	80033b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e040      	b.n	8003426 <HAL_RCC_OscConfig+0x52e>
 80033a4:	40023800 	.word	0x40023800
 80033a8:	40007000 	.word	0x40007000
 80033ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033b0:	4b1f      	ldr	r3, [pc, #124]	; (8003430 <HAL_RCC_OscConfig+0x538>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d030      	beq.n	8003420 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d129      	bne.n	8003420 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d122      	bne.n	8003420 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033e0:	4013      	ands	r3, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d119      	bne.n	8003420 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	085b      	lsrs	r3, r3, #1
 80033f8:	3b01      	subs	r3, #1
 80033fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d10f      	bne.n	8003420 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800340c:	429a      	cmp	r2, r3
 800340e:	d107      	bne.n	8003420 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800341c:	429a      	cmp	r2, r3
 800341e:	d001      	beq.n	8003424 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e000      	b.n	8003426 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40023800 	.word	0x40023800

08003434 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e041      	b.n	80034ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fd fd86 	bl	8000f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3304      	adds	r3, #4
 8003470:	4619      	mov	r1, r3
 8003472:	4610      	mov	r0, r2
 8003474:	f000 fa2e 	bl	80038d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d122      	bne.n	800352e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d11b      	bne.n	800352e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f06f 0202 	mvn.w	r2, #2
 80034fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f9bf 	bl	8003898 <HAL_TIM_IC_CaptureCallback>
 800351a:	e005      	b.n	8003528 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f9b1 	bl	8003884 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f9c2 	bl	80038ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b04      	cmp	r3, #4
 800353a:	d122      	bne.n	8003582 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	2b04      	cmp	r3, #4
 8003548:	d11b      	bne.n	8003582 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f06f 0204 	mvn.w	r2, #4
 8003552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f995 	bl	8003898 <HAL_TIM_IC_CaptureCallback>
 800356e:	e005      	b.n	800357c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f987 	bl	8003884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f998 	bl	80038ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b08      	cmp	r3, #8
 800358e:	d122      	bne.n	80035d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b08      	cmp	r3, #8
 800359c:	d11b      	bne.n	80035d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f06f 0208 	mvn.w	r2, #8
 80035a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2204      	movs	r2, #4
 80035ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f96b 	bl	8003898 <HAL_TIM_IC_CaptureCallback>
 80035c2:	e005      	b.n	80035d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f95d 	bl	8003884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f96e 	bl	80038ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	2b10      	cmp	r3, #16
 80035e2:	d122      	bne.n	800362a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b10      	cmp	r3, #16
 80035f0:	d11b      	bne.n	800362a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f06f 0210 	mvn.w	r2, #16
 80035fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2208      	movs	r2, #8
 8003600:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f941 	bl	8003898 <HAL_TIM_IC_CaptureCallback>
 8003616:	e005      	b.n	8003624 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f933 	bl	8003884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f944 	bl	80038ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b01      	cmp	r3, #1
 8003636:	d10e      	bne.n	8003656 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b01      	cmp	r3, #1
 8003644:	d107      	bne.n	8003656 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f06f 0201 	mvn.w	r2, #1
 800364e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f90d 	bl	8003870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003660:	2b80      	cmp	r3, #128	; 0x80
 8003662:	d10e      	bne.n	8003682 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366e:	2b80      	cmp	r3, #128	; 0x80
 8003670:	d107      	bne.n	8003682 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800367a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 fae9 	bl	8003c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368c:	2b40      	cmp	r3, #64	; 0x40
 800368e:	d10e      	bne.n	80036ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b40      	cmp	r3, #64	; 0x40
 800369c:	d107      	bne.n	80036ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f909 	bl	80038c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d10e      	bne.n	80036da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d107      	bne.n	80036da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f06f 0220 	mvn.w	r2, #32
 80036d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fab3 	bl	8003c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b084      	sub	sp, #16
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_TIM_ConfigClockSource+0x1c>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e0b4      	b.n	8003868 <HAL_TIM_ConfigClockSource+0x186>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2202      	movs	r2, #2
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800371c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003724:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003736:	d03e      	beq.n	80037b6 <HAL_TIM_ConfigClockSource+0xd4>
 8003738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800373c:	f200 8087 	bhi.w	800384e <HAL_TIM_ConfigClockSource+0x16c>
 8003740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003744:	f000 8086 	beq.w	8003854 <HAL_TIM_ConfigClockSource+0x172>
 8003748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374c:	d87f      	bhi.n	800384e <HAL_TIM_ConfigClockSource+0x16c>
 800374e:	2b70      	cmp	r3, #112	; 0x70
 8003750:	d01a      	beq.n	8003788 <HAL_TIM_ConfigClockSource+0xa6>
 8003752:	2b70      	cmp	r3, #112	; 0x70
 8003754:	d87b      	bhi.n	800384e <HAL_TIM_ConfigClockSource+0x16c>
 8003756:	2b60      	cmp	r3, #96	; 0x60
 8003758:	d050      	beq.n	80037fc <HAL_TIM_ConfigClockSource+0x11a>
 800375a:	2b60      	cmp	r3, #96	; 0x60
 800375c:	d877      	bhi.n	800384e <HAL_TIM_ConfigClockSource+0x16c>
 800375e:	2b50      	cmp	r3, #80	; 0x50
 8003760:	d03c      	beq.n	80037dc <HAL_TIM_ConfigClockSource+0xfa>
 8003762:	2b50      	cmp	r3, #80	; 0x50
 8003764:	d873      	bhi.n	800384e <HAL_TIM_ConfigClockSource+0x16c>
 8003766:	2b40      	cmp	r3, #64	; 0x40
 8003768:	d058      	beq.n	800381c <HAL_TIM_ConfigClockSource+0x13a>
 800376a:	2b40      	cmp	r3, #64	; 0x40
 800376c:	d86f      	bhi.n	800384e <HAL_TIM_ConfigClockSource+0x16c>
 800376e:	2b30      	cmp	r3, #48	; 0x30
 8003770:	d064      	beq.n	800383c <HAL_TIM_ConfigClockSource+0x15a>
 8003772:	2b30      	cmp	r3, #48	; 0x30
 8003774:	d86b      	bhi.n	800384e <HAL_TIM_ConfigClockSource+0x16c>
 8003776:	2b20      	cmp	r3, #32
 8003778:	d060      	beq.n	800383c <HAL_TIM_ConfigClockSource+0x15a>
 800377a:	2b20      	cmp	r3, #32
 800377c:	d867      	bhi.n	800384e <HAL_TIM_ConfigClockSource+0x16c>
 800377e:	2b00      	cmp	r3, #0
 8003780:	d05c      	beq.n	800383c <HAL_TIM_ConfigClockSource+0x15a>
 8003782:	2b10      	cmp	r3, #16
 8003784:	d05a      	beq.n	800383c <HAL_TIM_ConfigClockSource+0x15a>
 8003786:	e062      	b.n	800384e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6818      	ldr	r0, [r3, #0]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	6899      	ldr	r1, [r3, #8]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f000 f9b6 	bl	8003b08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037aa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	609a      	str	r2, [r3, #8]
      break;
 80037b4:	e04f      	b.n	8003856 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	6899      	ldr	r1, [r3, #8]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f000 f99f 	bl	8003b08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037d8:	609a      	str	r2, [r3, #8]
      break;
 80037da:	e03c      	b.n	8003856 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	6859      	ldr	r1, [r3, #4]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	461a      	mov	r2, r3
 80037ea:	f000 f913 	bl	8003a14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2150      	movs	r1, #80	; 0x50
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 f96c 	bl	8003ad2 <TIM_ITRx_SetConfig>
      break;
 80037fa:	e02c      	b.n	8003856 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	6859      	ldr	r1, [r3, #4]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	461a      	mov	r2, r3
 800380a:	f000 f932 	bl	8003a72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2160      	movs	r1, #96	; 0x60
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f95c 	bl	8003ad2 <TIM_ITRx_SetConfig>
      break;
 800381a:	e01c      	b.n	8003856 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	6859      	ldr	r1, [r3, #4]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	461a      	mov	r2, r3
 800382a:	f000 f8f3 	bl	8003a14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2140      	movs	r1, #64	; 0x40
 8003834:	4618      	mov	r0, r3
 8003836:	f000 f94c 	bl	8003ad2 <TIM_ITRx_SetConfig>
      break;
 800383a:	e00c      	b.n	8003856 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f000 f943 	bl	8003ad2 <TIM_ITRx_SetConfig>
      break;
 800384c:	e003      	b.n	8003856 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	73fb      	strb	r3, [r7, #15]
      break;
 8003852:	e000      	b.n	8003856 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003854:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003866:	7bfb      	ldrb	r3, [r7, #15]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a40      	ldr	r2, [pc, #256]	; (80039e8 <TIM_Base_SetConfig+0x114>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d013      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f2:	d00f      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a3d      	ldr	r2, [pc, #244]	; (80039ec <TIM_Base_SetConfig+0x118>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00b      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a3c      	ldr	r2, [pc, #240]	; (80039f0 <TIM_Base_SetConfig+0x11c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d007      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a3b      	ldr	r2, [pc, #236]	; (80039f4 <TIM_Base_SetConfig+0x120>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d003      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a3a      	ldr	r2, [pc, #232]	; (80039f8 <TIM_Base_SetConfig+0x124>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d108      	bne.n	8003926 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a2f      	ldr	r2, [pc, #188]	; (80039e8 <TIM_Base_SetConfig+0x114>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d02b      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003934:	d027      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a2c      	ldr	r2, [pc, #176]	; (80039ec <TIM_Base_SetConfig+0x118>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d023      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a2b      	ldr	r2, [pc, #172]	; (80039f0 <TIM_Base_SetConfig+0x11c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d01f      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a2a      	ldr	r2, [pc, #168]	; (80039f4 <TIM_Base_SetConfig+0x120>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d01b      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a29      	ldr	r2, [pc, #164]	; (80039f8 <TIM_Base_SetConfig+0x124>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d017      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a28      	ldr	r2, [pc, #160]	; (80039fc <TIM_Base_SetConfig+0x128>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d013      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a27      	ldr	r2, [pc, #156]	; (8003a00 <TIM_Base_SetConfig+0x12c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00f      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a26      	ldr	r2, [pc, #152]	; (8003a04 <TIM_Base_SetConfig+0x130>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00b      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a25      	ldr	r2, [pc, #148]	; (8003a08 <TIM_Base_SetConfig+0x134>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d007      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a24      	ldr	r2, [pc, #144]	; (8003a0c <TIM_Base_SetConfig+0x138>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d003      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a23      	ldr	r2, [pc, #140]	; (8003a10 <TIM_Base_SetConfig+0x13c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d108      	bne.n	8003998 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a0a      	ldr	r2, [pc, #40]	; (80039e8 <TIM_Base_SetConfig+0x114>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d003      	beq.n	80039cc <TIM_Base_SetConfig+0xf8>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a0c      	ldr	r2, [pc, #48]	; (80039f8 <TIM_Base_SetConfig+0x124>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d103      	bne.n	80039d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	615a      	str	r2, [r3, #20]
}
 80039da:	bf00      	nop
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40010000 	.word	0x40010000
 80039ec:	40000400 	.word	0x40000400
 80039f0:	40000800 	.word	0x40000800
 80039f4:	40000c00 	.word	0x40000c00
 80039f8:	40010400 	.word	0x40010400
 80039fc:	40014000 	.word	0x40014000
 8003a00:	40014400 	.word	0x40014400
 8003a04:	40014800 	.word	0x40014800
 8003a08:	40001800 	.word	0x40001800
 8003a0c:	40001c00 	.word	0x40001c00
 8003a10:	40002000 	.word	0x40002000

08003a14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f023 0201 	bic.w	r2, r3, #1
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f023 030a 	bic.w	r3, r3, #10
 8003a50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	621a      	str	r2, [r3, #32]
}
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b087      	sub	sp, #28
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	f023 0210 	bic.w	r2, r3, #16
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	031b      	lsls	r3, r3, #12
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003aae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	621a      	str	r2, [r3, #32]
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b085      	sub	sp, #20
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f043 0307 	orr.w	r3, r3, #7
 8003af4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	609a      	str	r2, [r3, #8]
}
 8003afc:	bf00      	nop
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	021a      	lsls	r2, r3, #8
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	609a      	str	r2, [r3, #8]
}
 8003b3c:	bf00      	nop
 8003b3e:	371c      	adds	r7, #28
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e05a      	b.n	8003c16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a21      	ldr	r2, [pc, #132]	; (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d022      	beq.n	8003bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bac:	d01d      	beq.n	8003bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1d      	ldr	r2, [pc, #116]	; (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d018      	beq.n	8003bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a1b      	ldr	r2, [pc, #108]	; (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d013      	beq.n	8003bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1a      	ldr	r2, [pc, #104]	; (8003c30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00e      	beq.n	8003bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a18      	ldr	r2, [pc, #96]	; (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d009      	beq.n	8003bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a17      	ldr	r2, [pc, #92]	; (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d004      	beq.n	8003bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a15      	ldr	r2, [pc, #84]	; (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d10c      	bne.n	8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40010000 	.word	0x40010000
 8003c28:	40000400 	.word	0x40000400
 8003c2c:	40000800 	.word	0x40000800
 8003c30:	40000c00 	.word	0x40000c00
 8003c34:	40010400 	.word	0x40010400
 8003c38:	40014000 	.word	0x40014000
 8003c3c:	40001800 	.word	0x40001800

08003c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e03f      	b.n	8003cfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd f9b0 	bl	8000ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2224      	movs	r2, #36	; 0x24
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fddf 	bl	8004870 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b08a      	sub	sp, #40	; 0x28
 8003d06:	af02      	add	r7, sp, #8
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	603b      	str	r3, [r7, #0]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d17c      	bne.n	8003e1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <HAL_UART_Transmit+0x2c>
 8003d28:	88fb      	ldrh	r3, [r7, #6]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e075      	b.n	8003e1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_UART_Transmit+0x3e>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e06e      	b.n	8003e1e <HAL_UART_Transmit+0x11c>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2221      	movs	r2, #33	; 0x21
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d56:	f7fd fb23 	bl	80013a0 <HAL_GetTick>
 8003d5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	88fa      	ldrh	r2, [r7, #6]
 8003d60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	88fa      	ldrh	r2, [r7, #6]
 8003d66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d70:	d108      	bne.n	8003d84 <HAL_UART_Transmit+0x82>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d104      	bne.n	8003d84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	e003      	b.n	8003d8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d94:	e02a      	b.n	8003dec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2180      	movs	r1, #128	; 0x80
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fb1f 	bl	80043e4 <UART_WaitOnFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e036      	b.n	8003e1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10b      	bne.n	8003dce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	3302      	adds	r3, #2
 8003dca:	61bb      	str	r3, [r7, #24]
 8003dcc:	e007      	b.n	8003dde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	781a      	ldrb	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1cf      	bne.n	8003d96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2140      	movs	r1, #64	; 0x40
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 faef 	bl	80043e4 <UART_WaitOnFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e006      	b.n	8003e1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e000      	b.n	8003e1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e1c:	2302      	movs	r3, #2
  }
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	4613      	mov	r3, r2
 8003e32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d11d      	bne.n	8003e7c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <HAL_UART_Receive_IT+0x26>
 8003e46:	88fb      	ldrh	r3, [r7, #6]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e016      	b.n	8003e7e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_UART_Receive_IT+0x38>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e00f      	b.n	8003e7e <HAL_UART_Receive_IT+0x58>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e6c:	88fb      	ldrh	r3, [r7, #6]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fb24 	bl	80044c0 <UART_Start_Receive_IT>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	e000      	b.n	8003e7e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
  }
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b0ba      	sub	sp, #232	; 0xe8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ec6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10f      	bne.n	8003eee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <HAL_UART_IRQHandler+0x66>
 8003eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 fc07 	bl	80046fa <UART_Receive_IT>
      return;
 8003eec:	e256      	b.n	800439c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003eee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80de 	beq.w	80040b4 <HAL_UART_IRQHandler+0x22c>
 8003ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d106      	bne.n	8003f12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 80d1 	beq.w	80040b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00b      	beq.n	8003f36 <HAL_UART_IRQHandler+0xae>
 8003f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f043 0201 	orr.w	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <HAL_UART_IRQHandler+0xd2>
 8003f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f043 0202 	orr.w	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00b      	beq.n	8003f7e <HAL_UART_IRQHandler+0xf6>
 8003f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f043 0204 	orr.w	r2, r3, #4
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d011      	beq.n	8003fae <HAL_UART_IRQHandler+0x126>
 8003f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d105      	bne.n	8003fa2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	f043 0208 	orr.w	r2, r3, #8
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 81ed 	beq.w	8004392 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fbc:	f003 0320 	and.w	r3, r3, #32
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_UART_IRQHandler+0x14e>
 8003fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc8:	f003 0320 	and.w	r3, r3, #32
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fb92 	bl	80046fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe0:	2b40      	cmp	r3, #64	; 0x40
 8003fe2:	bf0c      	ite	eq
 8003fe4:	2301      	moveq	r3, #1
 8003fe6:	2300      	movne	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d103      	bne.n	8004002 <HAL_UART_IRQHandler+0x17a>
 8003ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d04f      	beq.n	80040a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fa9a 	bl	800453c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	d141      	bne.n	800409a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3314      	adds	r3, #20
 800401c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800402c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004034:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3314      	adds	r3, #20
 800403e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004042:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004046:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800404e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004052:	e841 2300 	strex	r3, r2, [r1]
 8004056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800405a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1d9      	bne.n	8004016 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	2b00      	cmp	r3, #0
 8004068:	d013      	beq.n	8004092 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	4a7d      	ldr	r2, [pc, #500]	; (8004264 <HAL_UART_IRQHandler+0x3dc>)
 8004070:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe fa23 	bl	80024c2 <HAL_DMA_Abort_IT>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d016      	beq.n	80040b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800408c:	4610      	mov	r0, r2
 800408e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004090:	e00e      	b.n	80040b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f990 	bl	80043b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004098:	e00a      	b.n	80040b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f98c 	bl	80043b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a0:	e006      	b.n	80040b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f988 	bl	80043b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80040ae:	e170      	b.n	8004392 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b0:	bf00      	nop
    return;
 80040b2:	e16e      	b.n	8004392 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	f040 814a 	bne.w	8004352 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c2:	f003 0310 	and.w	r3, r3, #16
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 8143 	beq.w	8004352 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 813c 	beq.w	8004352 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040da:	2300      	movs	r3, #0
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fa:	2b40      	cmp	r3, #64	; 0x40
 80040fc:	f040 80b4 	bne.w	8004268 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800410c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 8140 	beq.w	8004396 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800411a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800411e:	429a      	cmp	r2, r3
 8004120:	f080 8139 	bcs.w	8004396 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800412a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004136:	f000 8088 	beq.w	800424a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	330c      	adds	r3, #12
 8004140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004150:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004158:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004166:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800416a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004172:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800417e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1d9      	bne.n	800413a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3314      	adds	r3, #20
 800418c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3314      	adds	r3, #20
 80041a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80041bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1e1      	bne.n	8004186 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3314      	adds	r3, #20
 80041c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041cc:	e853 3f00 	ldrex	r3, [r3]
 80041d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3314      	adds	r3, #20
 80041e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041ee:	e841 2300 	strex	r3, r2, [r1]
 80041f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1e3      	bne.n	80041c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	330c      	adds	r3, #12
 800420e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004212:	e853 3f00 	ldrex	r3, [r3]
 8004216:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800421a:	f023 0310 	bic.w	r3, r3, #16
 800421e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	330c      	adds	r3, #12
 8004228:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800422c:	65ba      	str	r2, [r7, #88]	; 0x58
 800422e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004232:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800423a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e3      	bne.n	8004208 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	4618      	mov	r0, r3
 8004246:	f7fe f8cc 	bl	80023e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004252:	b29b      	uxth	r3, r3
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	b29b      	uxth	r3, r3
 8004258:	4619      	mov	r1, r3
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f8b6 	bl	80043cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004260:	e099      	b.n	8004396 <HAL_UART_IRQHandler+0x50e>
 8004262:	bf00      	nop
 8004264:	08004603 	.word	0x08004603
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004270:	b29b      	uxth	r3, r3
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 808b 	beq.w	800439a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 8086 	beq.w	800439a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	330c      	adds	r3, #12
 8004294:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800429e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80042b2:	647a      	str	r2, [r7, #68]	; 0x44
 80042b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e3      	bne.n	800428e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3314      	adds	r3, #20
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	623b      	str	r3, [r7, #32]
   return(result);
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	f023 0301 	bic.w	r3, r3, #1
 80042dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3314      	adds	r3, #20
 80042e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042ea:	633a      	str	r2, [r7, #48]	; 0x30
 80042ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e3      	bne.n	80042c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	330c      	adds	r3, #12
 8004312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	60fb      	str	r3, [r7, #12]
   return(result);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0310 	bic.w	r3, r3, #16
 8004322:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004330:	61fa      	str	r2, [r7, #28]
 8004332:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	69b9      	ldr	r1, [r7, #24]
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	617b      	str	r3, [r7, #20]
   return(result);
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e3      	bne.n	800430c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004344:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004348:	4619      	mov	r1, r3
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f83e 	bl	80043cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004350:	e023      	b.n	800439a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435a:	2b00      	cmp	r3, #0
 800435c:	d009      	beq.n	8004372 <HAL_UART_IRQHandler+0x4ea>
 800435e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f95d 	bl	800462a <UART_Transmit_IT>
    return;
 8004370:	e014      	b.n	800439c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00e      	beq.n	800439c <HAL_UART_IRQHandler+0x514>
 800437e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	d008      	beq.n	800439c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f99d 	bl	80046ca <UART_EndTransmit_IT>
    return;
 8004390:	e004      	b.n	800439c <HAL_UART_IRQHandler+0x514>
    return;
 8004392:	bf00      	nop
 8004394:	e002      	b.n	800439c <HAL_UART_IRQHandler+0x514>
      return;
 8004396:	bf00      	nop
 8004398:	e000      	b.n	800439c <HAL_UART_IRQHandler+0x514>
      return;
 800439a:	bf00      	nop
  }
}
 800439c:	37e8      	adds	r7, #232	; 0xe8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop

080043a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b090      	sub	sp, #64	; 0x40
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	4613      	mov	r3, r2
 80043f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f4:	e050      	b.n	8004498 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043fc:	d04c      	beq.n	8004498 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004400:	2b00      	cmp	r3, #0
 8004402:	d007      	beq.n	8004414 <UART_WaitOnFlagUntilTimeout+0x30>
 8004404:	f7fc ffcc 	bl	80013a0 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004410:	429a      	cmp	r2, r3
 8004412:	d241      	bcs.n	8004498 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	330c      	adds	r3, #12
 800441a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441e:	e853 3f00 	ldrex	r3, [r3]
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800442a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	330c      	adds	r3, #12
 8004432:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004434:	637a      	str	r2, [r7, #52]	; 0x34
 8004436:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004438:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800443a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800443c:	e841 2300 	strex	r3, r2, [r1]
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1e5      	bne.n	8004414 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3314      	adds	r3, #20
 800444e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	613b      	str	r3, [r7, #16]
   return(result);
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f023 0301 	bic.w	r3, r3, #1
 800445e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3314      	adds	r3, #20
 8004466:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004468:	623a      	str	r2, [r7, #32]
 800446a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	69f9      	ldr	r1, [r7, #28]
 800446e:	6a3a      	ldr	r2, [r7, #32]
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	61bb      	str	r3, [r7, #24]
   return(result);
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e5      	bne.n	8004448 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e00f      	b.n	80044b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4013      	ands	r3, r2
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	461a      	mov	r2, r3
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d09f      	beq.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3740      	adds	r7, #64	; 0x40
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	4613      	mov	r3, r2
 80044cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	88fa      	ldrh	r2, [r7, #6]
 80044d8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	88fa      	ldrh	r2, [r7, #6]
 80044de:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2222      	movs	r2, #34	; 0x22
 80044ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d007      	beq.n	800450e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800450c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695a      	ldr	r2, [r3, #20]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f042 0220 	orr.w	r2, r2, #32
 800452c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800453c:	b480      	push	{r7}
 800453e:	b095      	sub	sp, #84	; 0x54
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	330c      	adds	r3, #12
 800454a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454e:	e853 3f00 	ldrex	r3, [r3]
 8004552:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004556:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800455a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	330c      	adds	r3, #12
 8004562:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004564:	643a      	str	r2, [r7, #64]	; 0x40
 8004566:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800456a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800456c:	e841 2300 	strex	r3, r2, [r1]
 8004570:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e5      	bne.n	8004544 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3314      	adds	r3, #20
 800457e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	61fb      	str	r3, [r7, #28]
   return(result);
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	f023 0301 	bic.w	r3, r3, #1
 800458e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3314      	adds	r3, #20
 8004596:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004598:	62fa      	str	r2, [r7, #44]	; 0x2c
 800459a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800459e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e5      	bne.n	8004578 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d119      	bne.n	80045e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	330c      	adds	r3, #12
 80045ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	e853 3f00 	ldrex	r3, [r3]
 80045c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f023 0310 	bic.w	r3, r3, #16
 80045ca:	647b      	str	r3, [r7, #68]	; 0x44
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	330c      	adds	r3, #12
 80045d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045d4:	61ba      	str	r2, [r7, #24]
 80045d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d8:	6979      	ldr	r1, [r7, #20]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	e841 2300 	strex	r3, r2, [r1]
 80045e0:	613b      	str	r3, [r7, #16]
   return(result);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e5      	bne.n	80045b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045f6:	bf00      	nop
 80045f8:	3754      	adds	r7, #84	; 0x54
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f7ff fecb 	bl	80043b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004622:	bf00      	nop
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800462a:	b480      	push	{r7}
 800462c:	b085      	sub	sp, #20
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b21      	cmp	r3, #33	; 0x21
 800463c:	d13e      	bne.n	80046bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004646:	d114      	bne.n	8004672 <UART_Transmit_IT+0x48>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d110      	bne.n	8004672 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	461a      	mov	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004664:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	1c9a      	adds	r2, r3, #2
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	621a      	str	r2, [r3, #32]
 8004670:	e008      	b.n	8004684 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	1c59      	adds	r1, r3, #1
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6211      	str	r1, [r2, #32]
 800467c:	781a      	ldrb	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b01      	subs	r3, #1
 800468c:	b29b      	uxth	r3, r3
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4619      	mov	r1, r3
 8004692:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10f      	bne.n	80046b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	e000      	b.n	80046be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046bc:	2302      	movs	r3, #2
  }
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b082      	sub	sp, #8
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff fe5a 	bl	80043a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b08c      	sub	sp, #48	; 0x30
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b22      	cmp	r3, #34	; 0x22
 800470c:	f040 80ab 	bne.w	8004866 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004718:	d117      	bne.n	800474a <UART_Receive_IT+0x50>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d113      	bne.n	800474a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004722:	2300      	movs	r3, #0
 8004724:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	b29b      	uxth	r3, r3
 8004734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004738:	b29a      	uxth	r2, r3
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004742:	1c9a      	adds	r2, r3, #2
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	629a      	str	r2, [r3, #40]	; 0x28
 8004748:	e026      	b.n	8004798 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004750:	2300      	movs	r3, #0
 8004752:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475c:	d007      	beq.n	800476e <UART_Receive_IT+0x74>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10a      	bne.n	800477c <UART_Receive_IT+0x82>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d106      	bne.n	800477c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	b2da      	uxtb	r2, r3
 8004776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004778:	701a      	strb	r2, [r3, #0]
 800477a:	e008      	b.n	800478e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	b2db      	uxtb	r3, r3
 8004784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004788:	b2da      	uxtb	r2, r3
 800478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	4619      	mov	r1, r3
 80047a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d15a      	bne.n	8004862 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0220 	bic.w	r2, r2, #32
 80047ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0201 	bic.w	r2, r2, #1
 80047da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d135      	bne.n	8004858 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	330c      	adds	r3, #12
 80047f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	613b      	str	r3, [r7, #16]
   return(result);
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f023 0310 	bic.w	r3, r3, #16
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	330c      	adds	r3, #12
 8004810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004812:	623a      	str	r2, [r7, #32]
 8004814:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	69f9      	ldr	r1, [r7, #28]
 8004818:	6a3a      	ldr	r2, [r7, #32]
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e5      	bne.n	80047f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	2b10      	cmp	r3, #16
 8004832:	d10a      	bne.n	800484a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800484e:	4619      	mov	r1, r3
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff fdbb 	bl	80043cc <HAL_UARTEx_RxEventCallback>
 8004856:	e002      	b.n	800485e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7fc fa7d 	bl	8000d58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	e002      	b.n	8004868 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	e000      	b.n	8004868 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004866:	2302      	movs	r3, #2
  }
}
 8004868:	4618      	mov	r0, r3
 800486a:	3730      	adds	r7, #48	; 0x30
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004874:	b0c0      	sub	sp, #256	; 0x100
 8004876:	af00      	add	r7, sp, #0
 8004878:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800487c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488c:	68d9      	ldr	r1, [r3, #12]
 800488e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	ea40 0301 	orr.w	r3, r0, r1
 8004898:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800489a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048c8:	f021 010c 	bic.w	r1, r1, #12
 80048cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048d6:	430b      	orrs	r3, r1
 80048d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ea:	6999      	ldr	r1, [r3, #24]
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	ea40 0301 	orr.w	r3, r0, r1
 80048f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4b8f      	ldr	r3, [pc, #572]	; (8004b3c <UART_SetConfig+0x2cc>)
 8004900:	429a      	cmp	r2, r3
 8004902:	d005      	beq.n	8004910 <UART_SetConfig+0xa0>
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	4b8d      	ldr	r3, [pc, #564]	; (8004b40 <UART_SetConfig+0x2d0>)
 800490c:	429a      	cmp	r2, r3
 800490e:	d104      	bne.n	800491a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004910:	f7fe f8ae 	bl	8002a70 <HAL_RCC_GetPCLK2Freq>
 8004914:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004918:	e003      	b.n	8004922 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800491a:	f7fe f895 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 800491e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800492c:	f040 810c 	bne.w	8004b48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004934:	2200      	movs	r2, #0
 8004936:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800493a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800493e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004942:	4622      	mov	r2, r4
 8004944:	462b      	mov	r3, r5
 8004946:	1891      	adds	r1, r2, r2
 8004948:	65b9      	str	r1, [r7, #88]	; 0x58
 800494a:	415b      	adcs	r3, r3
 800494c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800494e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004952:	4621      	mov	r1, r4
 8004954:	eb12 0801 	adds.w	r8, r2, r1
 8004958:	4629      	mov	r1, r5
 800495a:	eb43 0901 	adc.w	r9, r3, r1
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800496a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800496e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004972:	4690      	mov	r8, r2
 8004974:	4699      	mov	r9, r3
 8004976:	4623      	mov	r3, r4
 8004978:	eb18 0303 	adds.w	r3, r8, r3
 800497c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004980:	462b      	mov	r3, r5
 8004982:	eb49 0303 	adc.w	r3, r9, r3
 8004986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800498a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004996:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800499a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800499e:	460b      	mov	r3, r1
 80049a0:	18db      	adds	r3, r3, r3
 80049a2:	653b      	str	r3, [r7, #80]	; 0x50
 80049a4:	4613      	mov	r3, r2
 80049a6:	eb42 0303 	adc.w	r3, r2, r3
 80049aa:	657b      	str	r3, [r7, #84]	; 0x54
 80049ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049b4:	f7fb fc7c 	bl	80002b0 <__aeabi_uldivmod>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4b61      	ldr	r3, [pc, #388]	; (8004b44 <UART_SetConfig+0x2d4>)
 80049be:	fba3 2302 	umull	r2, r3, r3, r2
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	011c      	lsls	r4, r3, #4
 80049c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ca:	2200      	movs	r2, #0
 80049cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049d8:	4642      	mov	r2, r8
 80049da:	464b      	mov	r3, r9
 80049dc:	1891      	adds	r1, r2, r2
 80049de:	64b9      	str	r1, [r7, #72]	; 0x48
 80049e0:	415b      	adcs	r3, r3
 80049e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049e8:	4641      	mov	r1, r8
 80049ea:	eb12 0a01 	adds.w	sl, r2, r1
 80049ee:	4649      	mov	r1, r9
 80049f0:	eb43 0b01 	adc.w	fp, r3, r1
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a08:	4692      	mov	sl, r2
 8004a0a:	469b      	mov	fp, r3
 8004a0c:	4643      	mov	r3, r8
 8004a0e:	eb1a 0303 	adds.w	r3, sl, r3
 8004a12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a16:	464b      	mov	r3, r9
 8004a18:	eb4b 0303 	adc.w	r3, fp, r3
 8004a1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a34:	460b      	mov	r3, r1
 8004a36:	18db      	adds	r3, r3, r3
 8004a38:	643b      	str	r3, [r7, #64]	; 0x40
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	eb42 0303 	adc.w	r3, r2, r3
 8004a40:	647b      	str	r3, [r7, #68]	; 0x44
 8004a42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a4a:	f7fb fc31 	bl	80002b0 <__aeabi_uldivmod>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	4611      	mov	r1, r2
 8004a54:	4b3b      	ldr	r3, [pc, #236]	; (8004b44 <UART_SetConfig+0x2d4>)
 8004a56:	fba3 2301 	umull	r2, r3, r3, r1
 8004a5a:	095b      	lsrs	r3, r3, #5
 8004a5c:	2264      	movs	r2, #100	; 0x64
 8004a5e:	fb02 f303 	mul.w	r3, r2, r3
 8004a62:	1acb      	subs	r3, r1, r3
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a6a:	4b36      	ldr	r3, [pc, #216]	; (8004b44 <UART_SetConfig+0x2d4>)
 8004a6c:	fba3 2302 	umull	r2, r3, r3, r2
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a78:	441c      	add	r4, r3
 8004a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	464b      	mov	r3, r9
 8004a90:	1891      	adds	r1, r2, r2
 8004a92:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a94:	415b      	adcs	r3, r3
 8004a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a9c:	4641      	mov	r1, r8
 8004a9e:	1851      	adds	r1, r2, r1
 8004aa0:	6339      	str	r1, [r7, #48]	; 0x30
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	414b      	adcs	r3, r1
 8004aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ab4:	4659      	mov	r1, fp
 8004ab6:	00cb      	lsls	r3, r1, #3
 8004ab8:	4651      	mov	r1, sl
 8004aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004abe:	4651      	mov	r1, sl
 8004ac0:	00ca      	lsls	r2, r1, #3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	4642      	mov	r2, r8
 8004aca:	189b      	adds	r3, r3, r2
 8004acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ad0:	464b      	mov	r3, r9
 8004ad2:	460a      	mov	r2, r1
 8004ad4:	eb42 0303 	adc.w	r3, r2, r3
 8004ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ae8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004aec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004af0:	460b      	mov	r3, r1
 8004af2:	18db      	adds	r3, r3, r3
 8004af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004af6:	4613      	mov	r3, r2
 8004af8:	eb42 0303 	adc.w	r3, r2, r3
 8004afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004afe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b06:	f7fb fbd3 	bl	80002b0 <__aeabi_uldivmod>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <UART_SetConfig+0x2d4>)
 8004b10:	fba3 1302 	umull	r1, r3, r3, r2
 8004b14:	095b      	lsrs	r3, r3, #5
 8004b16:	2164      	movs	r1, #100	; 0x64
 8004b18:	fb01 f303 	mul.w	r3, r1, r3
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	3332      	adds	r3, #50	; 0x32
 8004b22:	4a08      	ldr	r2, [pc, #32]	; (8004b44 <UART_SetConfig+0x2d4>)
 8004b24:	fba2 2303 	umull	r2, r3, r2, r3
 8004b28:	095b      	lsrs	r3, r3, #5
 8004b2a:	f003 0207 	and.w	r2, r3, #7
 8004b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4422      	add	r2, r4
 8004b36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b38:	e105      	b.n	8004d46 <UART_SetConfig+0x4d6>
 8004b3a:	bf00      	nop
 8004b3c:	40011000 	.word	0x40011000
 8004b40:	40011400 	.word	0x40011400
 8004b44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b5a:	4642      	mov	r2, r8
 8004b5c:	464b      	mov	r3, r9
 8004b5e:	1891      	adds	r1, r2, r2
 8004b60:	6239      	str	r1, [r7, #32]
 8004b62:	415b      	adcs	r3, r3
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
 8004b66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b6a:	4641      	mov	r1, r8
 8004b6c:	1854      	adds	r4, r2, r1
 8004b6e:	4649      	mov	r1, r9
 8004b70:	eb43 0501 	adc.w	r5, r3, r1
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	00eb      	lsls	r3, r5, #3
 8004b7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b82:	00e2      	lsls	r2, r4, #3
 8004b84:	4614      	mov	r4, r2
 8004b86:	461d      	mov	r5, r3
 8004b88:	4643      	mov	r3, r8
 8004b8a:	18e3      	adds	r3, r4, r3
 8004b8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b90:	464b      	mov	r3, r9
 8004b92:	eb45 0303 	adc.w	r3, r5, r3
 8004b96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ba6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	008b      	lsls	r3, r1, #2
 8004bba:	4621      	mov	r1, r4
 8004bbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	008a      	lsls	r2, r1, #2
 8004bc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004bc8:	f7fb fb72 	bl	80002b0 <__aeabi_uldivmod>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4b60      	ldr	r3, [pc, #384]	; (8004d54 <UART_SetConfig+0x4e4>)
 8004bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	011c      	lsls	r4, r3, #4
 8004bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004be4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004be8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004bec:	4642      	mov	r2, r8
 8004bee:	464b      	mov	r3, r9
 8004bf0:	1891      	adds	r1, r2, r2
 8004bf2:	61b9      	str	r1, [r7, #24]
 8004bf4:	415b      	adcs	r3, r3
 8004bf6:	61fb      	str	r3, [r7, #28]
 8004bf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bfc:	4641      	mov	r1, r8
 8004bfe:	1851      	adds	r1, r2, r1
 8004c00:	6139      	str	r1, [r7, #16]
 8004c02:	4649      	mov	r1, r9
 8004c04:	414b      	adcs	r3, r1
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c14:	4659      	mov	r1, fp
 8004c16:	00cb      	lsls	r3, r1, #3
 8004c18:	4651      	mov	r1, sl
 8004c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c1e:	4651      	mov	r1, sl
 8004c20:	00ca      	lsls	r2, r1, #3
 8004c22:	4610      	mov	r0, r2
 8004c24:	4619      	mov	r1, r3
 8004c26:	4603      	mov	r3, r0
 8004c28:	4642      	mov	r2, r8
 8004c2a:	189b      	adds	r3, r3, r2
 8004c2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c30:	464b      	mov	r3, r9
 8004c32:	460a      	mov	r2, r1
 8004c34:	eb42 0303 	adc.w	r3, r2, r3
 8004c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	f04f 0300 	mov.w	r3, #0
 8004c50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c54:	4649      	mov	r1, r9
 8004c56:	008b      	lsls	r3, r1, #2
 8004c58:	4641      	mov	r1, r8
 8004c5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c5e:	4641      	mov	r1, r8
 8004c60:	008a      	lsls	r2, r1, #2
 8004c62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c66:	f7fb fb23 	bl	80002b0 <__aeabi_uldivmod>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4b39      	ldr	r3, [pc, #228]	; (8004d54 <UART_SetConfig+0x4e4>)
 8004c70:	fba3 1302 	umull	r1, r3, r3, r2
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	2164      	movs	r1, #100	; 0x64
 8004c78:	fb01 f303 	mul.w	r3, r1, r3
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	3332      	adds	r3, #50	; 0x32
 8004c82:	4a34      	ldr	r2, [pc, #208]	; (8004d54 <UART_SetConfig+0x4e4>)
 8004c84:	fba2 2303 	umull	r2, r3, r2, r3
 8004c88:	095b      	lsrs	r3, r3, #5
 8004c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c8e:	441c      	add	r4, r3
 8004c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c94:	2200      	movs	r2, #0
 8004c96:	673b      	str	r3, [r7, #112]	; 0x70
 8004c98:	677a      	str	r2, [r7, #116]	; 0x74
 8004c9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c9e:	4642      	mov	r2, r8
 8004ca0:	464b      	mov	r3, r9
 8004ca2:	1891      	adds	r1, r2, r2
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	415b      	adcs	r3, r3
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cae:	4641      	mov	r1, r8
 8004cb0:	1851      	adds	r1, r2, r1
 8004cb2:	6039      	str	r1, [r7, #0]
 8004cb4:	4649      	mov	r1, r9
 8004cb6:	414b      	adcs	r3, r1
 8004cb8:	607b      	str	r3, [r7, #4]
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cc6:	4659      	mov	r1, fp
 8004cc8:	00cb      	lsls	r3, r1, #3
 8004cca:	4651      	mov	r1, sl
 8004ccc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cd0:	4651      	mov	r1, sl
 8004cd2:	00ca      	lsls	r2, r1, #3
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4603      	mov	r3, r0
 8004cda:	4642      	mov	r2, r8
 8004cdc:	189b      	adds	r3, r3, r2
 8004cde:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ce0:	464b      	mov	r3, r9
 8004ce2:	460a      	mov	r2, r1
 8004ce4:	eb42 0303 	adc.w	r3, r2, r3
 8004ce8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	663b      	str	r3, [r7, #96]	; 0x60
 8004cf4:	667a      	str	r2, [r7, #100]	; 0x64
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d02:	4649      	mov	r1, r9
 8004d04:	008b      	lsls	r3, r1, #2
 8004d06:	4641      	mov	r1, r8
 8004d08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	008a      	lsls	r2, r1, #2
 8004d10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d14:	f7fb facc 	bl	80002b0 <__aeabi_uldivmod>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <UART_SetConfig+0x4e4>)
 8004d1e:	fba3 1302 	umull	r1, r3, r3, r2
 8004d22:	095b      	lsrs	r3, r3, #5
 8004d24:	2164      	movs	r1, #100	; 0x64
 8004d26:	fb01 f303 	mul.w	r3, r1, r3
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	011b      	lsls	r3, r3, #4
 8004d2e:	3332      	adds	r3, #50	; 0x32
 8004d30:	4a08      	ldr	r2, [pc, #32]	; (8004d54 <UART_SetConfig+0x4e4>)
 8004d32:	fba2 2303 	umull	r2, r3, r2, r3
 8004d36:	095b      	lsrs	r3, r3, #5
 8004d38:	f003 020f 	and.w	r2, r3, #15
 8004d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4422      	add	r2, r4
 8004d44:	609a      	str	r2, [r3, #8]
}
 8004d46:	bf00      	nop
 8004d48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d52:	bf00      	nop
 8004d54:	51eb851f 	.word	0x51eb851f

08004d58 <__errno>:
 8004d58:	4b01      	ldr	r3, [pc, #4]	; (8004d60 <__errno+0x8>)
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	2000000c 	.word	0x2000000c

08004d64 <__libc_init_array>:
 8004d64:	b570      	push	{r4, r5, r6, lr}
 8004d66:	4d0d      	ldr	r5, [pc, #52]	; (8004d9c <__libc_init_array+0x38>)
 8004d68:	4c0d      	ldr	r4, [pc, #52]	; (8004da0 <__libc_init_array+0x3c>)
 8004d6a:	1b64      	subs	r4, r4, r5
 8004d6c:	10a4      	asrs	r4, r4, #2
 8004d6e:	2600      	movs	r6, #0
 8004d70:	42a6      	cmp	r6, r4
 8004d72:	d109      	bne.n	8004d88 <__libc_init_array+0x24>
 8004d74:	4d0b      	ldr	r5, [pc, #44]	; (8004da4 <__libc_init_array+0x40>)
 8004d76:	4c0c      	ldr	r4, [pc, #48]	; (8004da8 <__libc_init_array+0x44>)
 8004d78:	f001 f8fa 	bl	8005f70 <_init>
 8004d7c:	1b64      	subs	r4, r4, r5
 8004d7e:	10a4      	asrs	r4, r4, #2
 8004d80:	2600      	movs	r6, #0
 8004d82:	42a6      	cmp	r6, r4
 8004d84:	d105      	bne.n	8004d92 <__libc_init_array+0x2e>
 8004d86:	bd70      	pop	{r4, r5, r6, pc}
 8004d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d8c:	4798      	blx	r3
 8004d8e:	3601      	adds	r6, #1
 8004d90:	e7ee      	b.n	8004d70 <__libc_init_array+0xc>
 8004d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d96:	4798      	blx	r3
 8004d98:	3601      	adds	r6, #1
 8004d9a:	e7f2      	b.n	8004d82 <__libc_init_array+0x1e>
 8004d9c:	08006090 	.word	0x08006090
 8004da0:	08006090 	.word	0x08006090
 8004da4:	08006090 	.word	0x08006090
 8004da8:	08006094 	.word	0x08006094

08004dac <memset>:
 8004dac:	4402      	add	r2, r0
 8004dae:	4603      	mov	r3, r0
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d100      	bne.n	8004db6 <memset+0xa>
 8004db4:	4770      	bx	lr
 8004db6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dba:	e7f9      	b.n	8004db0 <memset+0x4>

08004dbc <iprintf>:
 8004dbc:	b40f      	push	{r0, r1, r2, r3}
 8004dbe:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <iprintf+0x2c>)
 8004dc0:	b513      	push	{r0, r1, r4, lr}
 8004dc2:	681c      	ldr	r4, [r3, #0]
 8004dc4:	b124      	cbz	r4, 8004dd0 <iprintf+0x14>
 8004dc6:	69a3      	ldr	r3, [r4, #24]
 8004dc8:	b913      	cbnz	r3, 8004dd0 <iprintf+0x14>
 8004dca:	4620      	mov	r0, r4
 8004dcc:	f000 fb2c 	bl	8005428 <__sinit>
 8004dd0:	ab05      	add	r3, sp, #20
 8004dd2:	9a04      	ldr	r2, [sp, #16]
 8004dd4:	68a1      	ldr	r1, [r4, #8]
 8004dd6:	9301      	str	r3, [sp, #4]
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f000 fd3d 	bl	8005858 <_vfiprintf_r>
 8004dde:	b002      	add	sp, #8
 8004de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004de4:	b004      	add	sp, #16
 8004de6:	4770      	bx	lr
 8004de8:	2000000c 	.word	0x2000000c

08004dec <_puts_r>:
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	460e      	mov	r6, r1
 8004df0:	4605      	mov	r5, r0
 8004df2:	b118      	cbz	r0, 8004dfc <_puts_r+0x10>
 8004df4:	6983      	ldr	r3, [r0, #24]
 8004df6:	b90b      	cbnz	r3, 8004dfc <_puts_r+0x10>
 8004df8:	f000 fb16 	bl	8005428 <__sinit>
 8004dfc:	69ab      	ldr	r3, [r5, #24]
 8004dfe:	68ac      	ldr	r4, [r5, #8]
 8004e00:	b913      	cbnz	r3, 8004e08 <_puts_r+0x1c>
 8004e02:	4628      	mov	r0, r5
 8004e04:	f000 fb10 	bl	8005428 <__sinit>
 8004e08:	4b2c      	ldr	r3, [pc, #176]	; (8004ebc <_puts_r+0xd0>)
 8004e0a:	429c      	cmp	r4, r3
 8004e0c:	d120      	bne.n	8004e50 <_puts_r+0x64>
 8004e0e:	686c      	ldr	r4, [r5, #4]
 8004e10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e12:	07db      	lsls	r3, r3, #31
 8004e14:	d405      	bmi.n	8004e22 <_puts_r+0x36>
 8004e16:	89a3      	ldrh	r3, [r4, #12]
 8004e18:	0598      	lsls	r0, r3, #22
 8004e1a:	d402      	bmi.n	8004e22 <_puts_r+0x36>
 8004e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e1e:	f000 fba1 	bl	8005564 <__retarget_lock_acquire_recursive>
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	0719      	lsls	r1, r3, #28
 8004e26:	d51d      	bpl.n	8004e64 <_puts_r+0x78>
 8004e28:	6923      	ldr	r3, [r4, #16]
 8004e2a:	b1db      	cbz	r3, 8004e64 <_puts_r+0x78>
 8004e2c:	3e01      	subs	r6, #1
 8004e2e:	68a3      	ldr	r3, [r4, #8]
 8004e30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e34:	3b01      	subs	r3, #1
 8004e36:	60a3      	str	r3, [r4, #8]
 8004e38:	bb39      	cbnz	r1, 8004e8a <_puts_r+0x9e>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	da38      	bge.n	8004eb0 <_puts_r+0xc4>
 8004e3e:	4622      	mov	r2, r4
 8004e40:	210a      	movs	r1, #10
 8004e42:	4628      	mov	r0, r5
 8004e44:	f000 f916 	bl	8005074 <__swbuf_r>
 8004e48:	3001      	adds	r0, #1
 8004e4a:	d011      	beq.n	8004e70 <_puts_r+0x84>
 8004e4c:	250a      	movs	r5, #10
 8004e4e:	e011      	b.n	8004e74 <_puts_r+0x88>
 8004e50:	4b1b      	ldr	r3, [pc, #108]	; (8004ec0 <_puts_r+0xd4>)
 8004e52:	429c      	cmp	r4, r3
 8004e54:	d101      	bne.n	8004e5a <_puts_r+0x6e>
 8004e56:	68ac      	ldr	r4, [r5, #8]
 8004e58:	e7da      	b.n	8004e10 <_puts_r+0x24>
 8004e5a:	4b1a      	ldr	r3, [pc, #104]	; (8004ec4 <_puts_r+0xd8>)
 8004e5c:	429c      	cmp	r4, r3
 8004e5e:	bf08      	it	eq
 8004e60:	68ec      	ldreq	r4, [r5, #12]
 8004e62:	e7d5      	b.n	8004e10 <_puts_r+0x24>
 8004e64:	4621      	mov	r1, r4
 8004e66:	4628      	mov	r0, r5
 8004e68:	f000 f956 	bl	8005118 <__swsetup_r>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d0dd      	beq.n	8004e2c <_puts_r+0x40>
 8004e70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004e74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e76:	07da      	lsls	r2, r3, #31
 8004e78:	d405      	bmi.n	8004e86 <_puts_r+0x9a>
 8004e7a:	89a3      	ldrh	r3, [r4, #12]
 8004e7c:	059b      	lsls	r3, r3, #22
 8004e7e:	d402      	bmi.n	8004e86 <_puts_r+0x9a>
 8004e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e82:	f000 fb70 	bl	8005566 <__retarget_lock_release_recursive>
 8004e86:	4628      	mov	r0, r5
 8004e88:	bd70      	pop	{r4, r5, r6, pc}
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	da04      	bge.n	8004e98 <_puts_r+0xac>
 8004e8e:	69a2      	ldr	r2, [r4, #24]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	dc06      	bgt.n	8004ea2 <_puts_r+0xb6>
 8004e94:	290a      	cmp	r1, #10
 8004e96:	d004      	beq.n	8004ea2 <_puts_r+0xb6>
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	6022      	str	r2, [r4, #0]
 8004e9e:	7019      	strb	r1, [r3, #0]
 8004ea0:	e7c5      	b.n	8004e2e <_puts_r+0x42>
 8004ea2:	4622      	mov	r2, r4
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	f000 f8e5 	bl	8005074 <__swbuf_r>
 8004eaa:	3001      	adds	r0, #1
 8004eac:	d1bf      	bne.n	8004e2e <_puts_r+0x42>
 8004eae:	e7df      	b.n	8004e70 <_puts_r+0x84>
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	250a      	movs	r5, #10
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	6022      	str	r2, [r4, #0]
 8004eb8:	701d      	strb	r5, [r3, #0]
 8004eba:	e7db      	b.n	8004e74 <_puts_r+0x88>
 8004ebc:	08006014 	.word	0x08006014
 8004ec0:	08006034 	.word	0x08006034
 8004ec4:	08005ff4 	.word	0x08005ff4

08004ec8 <puts>:
 8004ec8:	4b02      	ldr	r3, [pc, #8]	; (8004ed4 <puts+0xc>)
 8004eca:	4601      	mov	r1, r0
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	f7ff bf8d 	b.w	8004dec <_puts_r>
 8004ed2:	bf00      	nop
 8004ed4:	2000000c 	.word	0x2000000c

08004ed8 <setbuf>:
 8004ed8:	2900      	cmp	r1, #0
 8004eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ede:	bf0c      	ite	eq
 8004ee0:	2202      	moveq	r2, #2
 8004ee2:	2200      	movne	r2, #0
 8004ee4:	f000 b800 	b.w	8004ee8 <setvbuf>

08004ee8 <setvbuf>:
 8004ee8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004eec:	461d      	mov	r5, r3
 8004eee:	4b5d      	ldr	r3, [pc, #372]	; (8005064 <setvbuf+0x17c>)
 8004ef0:	681f      	ldr	r7, [r3, #0]
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	460e      	mov	r6, r1
 8004ef6:	4690      	mov	r8, r2
 8004ef8:	b127      	cbz	r7, 8004f04 <setvbuf+0x1c>
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	b913      	cbnz	r3, 8004f04 <setvbuf+0x1c>
 8004efe:	4638      	mov	r0, r7
 8004f00:	f000 fa92 	bl	8005428 <__sinit>
 8004f04:	4b58      	ldr	r3, [pc, #352]	; (8005068 <setvbuf+0x180>)
 8004f06:	429c      	cmp	r4, r3
 8004f08:	d167      	bne.n	8004fda <setvbuf+0xf2>
 8004f0a:	687c      	ldr	r4, [r7, #4]
 8004f0c:	f1b8 0f02 	cmp.w	r8, #2
 8004f10:	d006      	beq.n	8004f20 <setvbuf+0x38>
 8004f12:	f1b8 0f01 	cmp.w	r8, #1
 8004f16:	f200 809f 	bhi.w	8005058 <setvbuf+0x170>
 8004f1a:	2d00      	cmp	r5, #0
 8004f1c:	f2c0 809c 	blt.w	8005058 <setvbuf+0x170>
 8004f20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f22:	07db      	lsls	r3, r3, #31
 8004f24:	d405      	bmi.n	8004f32 <setvbuf+0x4a>
 8004f26:	89a3      	ldrh	r3, [r4, #12]
 8004f28:	0598      	lsls	r0, r3, #22
 8004f2a:	d402      	bmi.n	8004f32 <setvbuf+0x4a>
 8004f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f2e:	f000 fb19 	bl	8005564 <__retarget_lock_acquire_recursive>
 8004f32:	4621      	mov	r1, r4
 8004f34:	4638      	mov	r0, r7
 8004f36:	f000 f9e3 	bl	8005300 <_fflush_r>
 8004f3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f3c:	b141      	cbz	r1, 8004f50 <setvbuf+0x68>
 8004f3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f42:	4299      	cmp	r1, r3
 8004f44:	d002      	beq.n	8004f4c <setvbuf+0x64>
 8004f46:	4638      	mov	r0, r7
 8004f48:	f000 fb7c 	bl	8005644 <_free_r>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	6363      	str	r3, [r4, #52]	; 0x34
 8004f50:	2300      	movs	r3, #0
 8004f52:	61a3      	str	r3, [r4, #24]
 8004f54:	6063      	str	r3, [r4, #4]
 8004f56:	89a3      	ldrh	r3, [r4, #12]
 8004f58:	0619      	lsls	r1, r3, #24
 8004f5a:	d503      	bpl.n	8004f64 <setvbuf+0x7c>
 8004f5c:	6921      	ldr	r1, [r4, #16]
 8004f5e:	4638      	mov	r0, r7
 8004f60:	f000 fb70 	bl	8005644 <_free_r>
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004f6a:	f023 0303 	bic.w	r3, r3, #3
 8004f6e:	f1b8 0f02 	cmp.w	r8, #2
 8004f72:	81a3      	strh	r3, [r4, #12]
 8004f74:	d06c      	beq.n	8005050 <setvbuf+0x168>
 8004f76:	ab01      	add	r3, sp, #4
 8004f78:	466a      	mov	r2, sp
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	4638      	mov	r0, r7
 8004f7e:	f000 faf3 	bl	8005568 <__swhatbuf_r>
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	4318      	orrs	r0, r3
 8004f86:	81a0      	strh	r0, [r4, #12]
 8004f88:	2d00      	cmp	r5, #0
 8004f8a:	d130      	bne.n	8004fee <setvbuf+0x106>
 8004f8c:	9d00      	ldr	r5, [sp, #0]
 8004f8e:	4628      	mov	r0, r5
 8004f90:	f000 fb50 	bl	8005634 <malloc>
 8004f94:	4606      	mov	r6, r0
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d155      	bne.n	8005046 <setvbuf+0x15e>
 8004f9a:	f8dd 9000 	ldr.w	r9, [sp]
 8004f9e:	45a9      	cmp	r9, r5
 8004fa0:	d14a      	bne.n	8005038 <setvbuf+0x150>
 8004fa2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	60a2      	str	r2, [r4, #8]
 8004faa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004fae:	6022      	str	r2, [r4, #0]
 8004fb0:	6122      	str	r2, [r4, #16]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fb8:	6162      	str	r2, [r4, #20]
 8004fba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004fbc:	f043 0302 	orr.w	r3, r3, #2
 8004fc0:	07d2      	lsls	r2, r2, #31
 8004fc2:	81a3      	strh	r3, [r4, #12]
 8004fc4:	d405      	bmi.n	8004fd2 <setvbuf+0xea>
 8004fc6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004fca:	d102      	bne.n	8004fd2 <setvbuf+0xea>
 8004fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fce:	f000 faca 	bl	8005566 <__retarget_lock_release_recursive>
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	b003      	add	sp, #12
 8004fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fda:	4b24      	ldr	r3, [pc, #144]	; (800506c <setvbuf+0x184>)
 8004fdc:	429c      	cmp	r4, r3
 8004fde:	d101      	bne.n	8004fe4 <setvbuf+0xfc>
 8004fe0:	68bc      	ldr	r4, [r7, #8]
 8004fe2:	e793      	b.n	8004f0c <setvbuf+0x24>
 8004fe4:	4b22      	ldr	r3, [pc, #136]	; (8005070 <setvbuf+0x188>)
 8004fe6:	429c      	cmp	r4, r3
 8004fe8:	bf08      	it	eq
 8004fea:	68fc      	ldreq	r4, [r7, #12]
 8004fec:	e78e      	b.n	8004f0c <setvbuf+0x24>
 8004fee:	2e00      	cmp	r6, #0
 8004ff0:	d0cd      	beq.n	8004f8e <setvbuf+0xa6>
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	b913      	cbnz	r3, 8004ffc <setvbuf+0x114>
 8004ff6:	4638      	mov	r0, r7
 8004ff8:	f000 fa16 	bl	8005428 <__sinit>
 8004ffc:	f1b8 0f01 	cmp.w	r8, #1
 8005000:	bf08      	it	eq
 8005002:	89a3      	ldrheq	r3, [r4, #12]
 8005004:	6026      	str	r6, [r4, #0]
 8005006:	bf04      	itt	eq
 8005008:	f043 0301 	orreq.w	r3, r3, #1
 800500c:	81a3      	strheq	r3, [r4, #12]
 800500e:	89a2      	ldrh	r2, [r4, #12]
 8005010:	f012 0308 	ands.w	r3, r2, #8
 8005014:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005018:	d01c      	beq.n	8005054 <setvbuf+0x16c>
 800501a:	07d3      	lsls	r3, r2, #31
 800501c:	bf41      	itttt	mi
 800501e:	2300      	movmi	r3, #0
 8005020:	426d      	negmi	r5, r5
 8005022:	60a3      	strmi	r3, [r4, #8]
 8005024:	61a5      	strmi	r5, [r4, #24]
 8005026:	bf58      	it	pl
 8005028:	60a5      	strpl	r5, [r4, #8]
 800502a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800502c:	f015 0501 	ands.w	r5, r5, #1
 8005030:	d115      	bne.n	800505e <setvbuf+0x176>
 8005032:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005036:	e7c8      	b.n	8004fca <setvbuf+0xe2>
 8005038:	4648      	mov	r0, r9
 800503a:	f000 fafb 	bl	8005634 <malloc>
 800503e:	4606      	mov	r6, r0
 8005040:	2800      	cmp	r0, #0
 8005042:	d0ae      	beq.n	8004fa2 <setvbuf+0xba>
 8005044:	464d      	mov	r5, r9
 8005046:	89a3      	ldrh	r3, [r4, #12]
 8005048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504c:	81a3      	strh	r3, [r4, #12]
 800504e:	e7d0      	b.n	8004ff2 <setvbuf+0x10a>
 8005050:	2500      	movs	r5, #0
 8005052:	e7a8      	b.n	8004fa6 <setvbuf+0xbe>
 8005054:	60a3      	str	r3, [r4, #8]
 8005056:	e7e8      	b.n	800502a <setvbuf+0x142>
 8005058:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800505c:	e7b9      	b.n	8004fd2 <setvbuf+0xea>
 800505e:	2500      	movs	r5, #0
 8005060:	e7b7      	b.n	8004fd2 <setvbuf+0xea>
 8005062:	bf00      	nop
 8005064:	2000000c 	.word	0x2000000c
 8005068:	08006014 	.word	0x08006014
 800506c:	08006034 	.word	0x08006034
 8005070:	08005ff4 	.word	0x08005ff4

08005074 <__swbuf_r>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	460e      	mov	r6, r1
 8005078:	4614      	mov	r4, r2
 800507a:	4605      	mov	r5, r0
 800507c:	b118      	cbz	r0, 8005086 <__swbuf_r+0x12>
 800507e:	6983      	ldr	r3, [r0, #24]
 8005080:	b90b      	cbnz	r3, 8005086 <__swbuf_r+0x12>
 8005082:	f000 f9d1 	bl	8005428 <__sinit>
 8005086:	4b21      	ldr	r3, [pc, #132]	; (800510c <__swbuf_r+0x98>)
 8005088:	429c      	cmp	r4, r3
 800508a:	d12b      	bne.n	80050e4 <__swbuf_r+0x70>
 800508c:	686c      	ldr	r4, [r5, #4]
 800508e:	69a3      	ldr	r3, [r4, #24]
 8005090:	60a3      	str	r3, [r4, #8]
 8005092:	89a3      	ldrh	r3, [r4, #12]
 8005094:	071a      	lsls	r2, r3, #28
 8005096:	d52f      	bpl.n	80050f8 <__swbuf_r+0x84>
 8005098:	6923      	ldr	r3, [r4, #16]
 800509a:	b36b      	cbz	r3, 80050f8 <__swbuf_r+0x84>
 800509c:	6923      	ldr	r3, [r4, #16]
 800509e:	6820      	ldr	r0, [r4, #0]
 80050a0:	1ac0      	subs	r0, r0, r3
 80050a2:	6963      	ldr	r3, [r4, #20]
 80050a4:	b2f6      	uxtb	r6, r6
 80050a6:	4283      	cmp	r3, r0
 80050a8:	4637      	mov	r7, r6
 80050aa:	dc04      	bgt.n	80050b6 <__swbuf_r+0x42>
 80050ac:	4621      	mov	r1, r4
 80050ae:	4628      	mov	r0, r5
 80050b0:	f000 f926 	bl	8005300 <_fflush_r>
 80050b4:	bb30      	cbnz	r0, 8005104 <__swbuf_r+0x90>
 80050b6:	68a3      	ldr	r3, [r4, #8]
 80050b8:	3b01      	subs	r3, #1
 80050ba:	60a3      	str	r3, [r4, #8]
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	6022      	str	r2, [r4, #0]
 80050c2:	701e      	strb	r6, [r3, #0]
 80050c4:	6963      	ldr	r3, [r4, #20]
 80050c6:	3001      	adds	r0, #1
 80050c8:	4283      	cmp	r3, r0
 80050ca:	d004      	beq.n	80050d6 <__swbuf_r+0x62>
 80050cc:	89a3      	ldrh	r3, [r4, #12]
 80050ce:	07db      	lsls	r3, r3, #31
 80050d0:	d506      	bpl.n	80050e0 <__swbuf_r+0x6c>
 80050d2:	2e0a      	cmp	r6, #10
 80050d4:	d104      	bne.n	80050e0 <__swbuf_r+0x6c>
 80050d6:	4621      	mov	r1, r4
 80050d8:	4628      	mov	r0, r5
 80050da:	f000 f911 	bl	8005300 <_fflush_r>
 80050de:	b988      	cbnz	r0, 8005104 <__swbuf_r+0x90>
 80050e0:	4638      	mov	r0, r7
 80050e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050e4:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <__swbuf_r+0x9c>)
 80050e6:	429c      	cmp	r4, r3
 80050e8:	d101      	bne.n	80050ee <__swbuf_r+0x7a>
 80050ea:	68ac      	ldr	r4, [r5, #8]
 80050ec:	e7cf      	b.n	800508e <__swbuf_r+0x1a>
 80050ee:	4b09      	ldr	r3, [pc, #36]	; (8005114 <__swbuf_r+0xa0>)
 80050f0:	429c      	cmp	r4, r3
 80050f2:	bf08      	it	eq
 80050f4:	68ec      	ldreq	r4, [r5, #12]
 80050f6:	e7ca      	b.n	800508e <__swbuf_r+0x1a>
 80050f8:	4621      	mov	r1, r4
 80050fa:	4628      	mov	r0, r5
 80050fc:	f000 f80c 	bl	8005118 <__swsetup_r>
 8005100:	2800      	cmp	r0, #0
 8005102:	d0cb      	beq.n	800509c <__swbuf_r+0x28>
 8005104:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005108:	e7ea      	b.n	80050e0 <__swbuf_r+0x6c>
 800510a:	bf00      	nop
 800510c:	08006014 	.word	0x08006014
 8005110:	08006034 	.word	0x08006034
 8005114:	08005ff4 	.word	0x08005ff4

08005118 <__swsetup_r>:
 8005118:	4b32      	ldr	r3, [pc, #200]	; (80051e4 <__swsetup_r+0xcc>)
 800511a:	b570      	push	{r4, r5, r6, lr}
 800511c:	681d      	ldr	r5, [r3, #0]
 800511e:	4606      	mov	r6, r0
 8005120:	460c      	mov	r4, r1
 8005122:	b125      	cbz	r5, 800512e <__swsetup_r+0x16>
 8005124:	69ab      	ldr	r3, [r5, #24]
 8005126:	b913      	cbnz	r3, 800512e <__swsetup_r+0x16>
 8005128:	4628      	mov	r0, r5
 800512a:	f000 f97d 	bl	8005428 <__sinit>
 800512e:	4b2e      	ldr	r3, [pc, #184]	; (80051e8 <__swsetup_r+0xd0>)
 8005130:	429c      	cmp	r4, r3
 8005132:	d10f      	bne.n	8005154 <__swsetup_r+0x3c>
 8005134:	686c      	ldr	r4, [r5, #4]
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800513c:	0719      	lsls	r1, r3, #28
 800513e:	d42c      	bmi.n	800519a <__swsetup_r+0x82>
 8005140:	06dd      	lsls	r5, r3, #27
 8005142:	d411      	bmi.n	8005168 <__swsetup_r+0x50>
 8005144:	2309      	movs	r3, #9
 8005146:	6033      	str	r3, [r6, #0]
 8005148:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800514c:	81a3      	strh	r3, [r4, #12]
 800514e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005152:	e03e      	b.n	80051d2 <__swsetup_r+0xba>
 8005154:	4b25      	ldr	r3, [pc, #148]	; (80051ec <__swsetup_r+0xd4>)
 8005156:	429c      	cmp	r4, r3
 8005158:	d101      	bne.n	800515e <__swsetup_r+0x46>
 800515a:	68ac      	ldr	r4, [r5, #8]
 800515c:	e7eb      	b.n	8005136 <__swsetup_r+0x1e>
 800515e:	4b24      	ldr	r3, [pc, #144]	; (80051f0 <__swsetup_r+0xd8>)
 8005160:	429c      	cmp	r4, r3
 8005162:	bf08      	it	eq
 8005164:	68ec      	ldreq	r4, [r5, #12]
 8005166:	e7e6      	b.n	8005136 <__swsetup_r+0x1e>
 8005168:	0758      	lsls	r0, r3, #29
 800516a:	d512      	bpl.n	8005192 <__swsetup_r+0x7a>
 800516c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800516e:	b141      	cbz	r1, 8005182 <__swsetup_r+0x6a>
 8005170:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005174:	4299      	cmp	r1, r3
 8005176:	d002      	beq.n	800517e <__swsetup_r+0x66>
 8005178:	4630      	mov	r0, r6
 800517a:	f000 fa63 	bl	8005644 <_free_r>
 800517e:	2300      	movs	r3, #0
 8005180:	6363      	str	r3, [r4, #52]	; 0x34
 8005182:	89a3      	ldrh	r3, [r4, #12]
 8005184:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005188:	81a3      	strh	r3, [r4, #12]
 800518a:	2300      	movs	r3, #0
 800518c:	6063      	str	r3, [r4, #4]
 800518e:	6923      	ldr	r3, [r4, #16]
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	89a3      	ldrh	r3, [r4, #12]
 8005194:	f043 0308 	orr.w	r3, r3, #8
 8005198:	81a3      	strh	r3, [r4, #12]
 800519a:	6923      	ldr	r3, [r4, #16]
 800519c:	b94b      	cbnz	r3, 80051b2 <__swsetup_r+0x9a>
 800519e:	89a3      	ldrh	r3, [r4, #12]
 80051a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051a8:	d003      	beq.n	80051b2 <__swsetup_r+0x9a>
 80051aa:	4621      	mov	r1, r4
 80051ac:	4630      	mov	r0, r6
 80051ae:	f000 fa01 	bl	80055b4 <__smakebuf_r>
 80051b2:	89a0      	ldrh	r0, [r4, #12]
 80051b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051b8:	f010 0301 	ands.w	r3, r0, #1
 80051bc:	d00a      	beq.n	80051d4 <__swsetup_r+0xbc>
 80051be:	2300      	movs	r3, #0
 80051c0:	60a3      	str	r3, [r4, #8]
 80051c2:	6963      	ldr	r3, [r4, #20]
 80051c4:	425b      	negs	r3, r3
 80051c6:	61a3      	str	r3, [r4, #24]
 80051c8:	6923      	ldr	r3, [r4, #16]
 80051ca:	b943      	cbnz	r3, 80051de <__swsetup_r+0xc6>
 80051cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80051d0:	d1ba      	bne.n	8005148 <__swsetup_r+0x30>
 80051d2:	bd70      	pop	{r4, r5, r6, pc}
 80051d4:	0781      	lsls	r1, r0, #30
 80051d6:	bf58      	it	pl
 80051d8:	6963      	ldrpl	r3, [r4, #20]
 80051da:	60a3      	str	r3, [r4, #8]
 80051dc:	e7f4      	b.n	80051c8 <__swsetup_r+0xb0>
 80051de:	2000      	movs	r0, #0
 80051e0:	e7f7      	b.n	80051d2 <__swsetup_r+0xba>
 80051e2:	bf00      	nop
 80051e4:	2000000c 	.word	0x2000000c
 80051e8:	08006014 	.word	0x08006014
 80051ec:	08006034 	.word	0x08006034
 80051f0:	08005ff4 	.word	0x08005ff4

080051f4 <__sflush_r>:
 80051f4:	898a      	ldrh	r2, [r1, #12]
 80051f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051fa:	4605      	mov	r5, r0
 80051fc:	0710      	lsls	r0, r2, #28
 80051fe:	460c      	mov	r4, r1
 8005200:	d458      	bmi.n	80052b4 <__sflush_r+0xc0>
 8005202:	684b      	ldr	r3, [r1, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	dc05      	bgt.n	8005214 <__sflush_r+0x20>
 8005208:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800520a:	2b00      	cmp	r3, #0
 800520c:	dc02      	bgt.n	8005214 <__sflush_r+0x20>
 800520e:	2000      	movs	r0, #0
 8005210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005216:	2e00      	cmp	r6, #0
 8005218:	d0f9      	beq.n	800520e <__sflush_r+0x1a>
 800521a:	2300      	movs	r3, #0
 800521c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005220:	682f      	ldr	r7, [r5, #0]
 8005222:	602b      	str	r3, [r5, #0]
 8005224:	d032      	beq.n	800528c <__sflush_r+0x98>
 8005226:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005228:	89a3      	ldrh	r3, [r4, #12]
 800522a:	075a      	lsls	r2, r3, #29
 800522c:	d505      	bpl.n	800523a <__sflush_r+0x46>
 800522e:	6863      	ldr	r3, [r4, #4]
 8005230:	1ac0      	subs	r0, r0, r3
 8005232:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005234:	b10b      	cbz	r3, 800523a <__sflush_r+0x46>
 8005236:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005238:	1ac0      	subs	r0, r0, r3
 800523a:	2300      	movs	r3, #0
 800523c:	4602      	mov	r2, r0
 800523e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005240:	6a21      	ldr	r1, [r4, #32]
 8005242:	4628      	mov	r0, r5
 8005244:	47b0      	blx	r6
 8005246:	1c43      	adds	r3, r0, #1
 8005248:	89a3      	ldrh	r3, [r4, #12]
 800524a:	d106      	bne.n	800525a <__sflush_r+0x66>
 800524c:	6829      	ldr	r1, [r5, #0]
 800524e:	291d      	cmp	r1, #29
 8005250:	d82c      	bhi.n	80052ac <__sflush_r+0xb8>
 8005252:	4a2a      	ldr	r2, [pc, #168]	; (80052fc <__sflush_r+0x108>)
 8005254:	40ca      	lsrs	r2, r1
 8005256:	07d6      	lsls	r6, r2, #31
 8005258:	d528      	bpl.n	80052ac <__sflush_r+0xb8>
 800525a:	2200      	movs	r2, #0
 800525c:	6062      	str	r2, [r4, #4]
 800525e:	04d9      	lsls	r1, r3, #19
 8005260:	6922      	ldr	r2, [r4, #16]
 8005262:	6022      	str	r2, [r4, #0]
 8005264:	d504      	bpl.n	8005270 <__sflush_r+0x7c>
 8005266:	1c42      	adds	r2, r0, #1
 8005268:	d101      	bne.n	800526e <__sflush_r+0x7a>
 800526a:	682b      	ldr	r3, [r5, #0]
 800526c:	b903      	cbnz	r3, 8005270 <__sflush_r+0x7c>
 800526e:	6560      	str	r0, [r4, #84]	; 0x54
 8005270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005272:	602f      	str	r7, [r5, #0]
 8005274:	2900      	cmp	r1, #0
 8005276:	d0ca      	beq.n	800520e <__sflush_r+0x1a>
 8005278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800527c:	4299      	cmp	r1, r3
 800527e:	d002      	beq.n	8005286 <__sflush_r+0x92>
 8005280:	4628      	mov	r0, r5
 8005282:	f000 f9df 	bl	8005644 <_free_r>
 8005286:	2000      	movs	r0, #0
 8005288:	6360      	str	r0, [r4, #52]	; 0x34
 800528a:	e7c1      	b.n	8005210 <__sflush_r+0x1c>
 800528c:	6a21      	ldr	r1, [r4, #32]
 800528e:	2301      	movs	r3, #1
 8005290:	4628      	mov	r0, r5
 8005292:	47b0      	blx	r6
 8005294:	1c41      	adds	r1, r0, #1
 8005296:	d1c7      	bne.n	8005228 <__sflush_r+0x34>
 8005298:	682b      	ldr	r3, [r5, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0c4      	beq.n	8005228 <__sflush_r+0x34>
 800529e:	2b1d      	cmp	r3, #29
 80052a0:	d001      	beq.n	80052a6 <__sflush_r+0xb2>
 80052a2:	2b16      	cmp	r3, #22
 80052a4:	d101      	bne.n	80052aa <__sflush_r+0xb6>
 80052a6:	602f      	str	r7, [r5, #0]
 80052a8:	e7b1      	b.n	800520e <__sflush_r+0x1a>
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052b0:	81a3      	strh	r3, [r4, #12]
 80052b2:	e7ad      	b.n	8005210 <__sflush_r+0x1c>
 80052b4:	690f      	ldr	r7, [r1, #16]
 80052b6:	2f00      	cmp	r7, #0
 80052b8:	d0a9      	beq.n	800520e <__sflush_r+0x1a>
 80052ba:	0793      	lsls	r3, r2, #30
 80052bc:	680e      	ldr	r6, [r1, #0]
 80052be:	bf08      	it	eq
 80052c0:	694b      	ldreq	r3, [r1, #20]
 80052c2:	600f      	str	r7, [r1, #0]
 80052c4:	bf18      	it	ne
 80052c6:	2300      	movne	r3, #0
 80052c8:	eba6 0807 	sub.w	r8, r6, r7
 80052cc:	608b      	str	r3, [r1, #8]
 80052ce:	f1b8 0f00 	cmp.w	r8, #0
 80052d2:	dd9c      	ble.n	800520e <__sflush_r+0x1a>
 80052d4:	6a21      	ldr	r1, [r4, #32]
 80052d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80052d8:	4643      	mov	r3, r8
 80052da:	463a      	mov	r2, r7
 80052dc:	4628      	mov	r0, r5
 80052de:	47b0      	blx	r6
 80052e0:	2800      	cmp	r0, #0
 80052e2:	dc06      	bgt.n	80052f2 <__sflush_r+0xfe>
 80052e4:	89a3      	ldrh	r3, [r4, #12]
 80052e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ea:	81a3      	strh	r3, [r4, #12]
 80052ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052f0:	e78e      	b.n	8005210 <__sflush_r+0x1c>
 80052f2:	4407      	add	r7, r0
 80052f4:	eba8 0800 	sub.w	r8, r8, r0
 80052f8:	e7e9      	b.n	80052ce <__sflush_r+0xda>
 80052fa:	bf00      	nop
 80052fc:	20400001 	.word	0x20400001

08005300 <_fflush_r>:
 8005300:	b538      	push	{r3, r4, r5, lr}
 8005302:	690b      	ldr	r3, [r1, #16]
 8005304:	4605      	mov	r5, r0
 8005306:	460c      	mov	r4, r1
 8005308:	b913      	cbnz	r3, 8005310 <_fflush_r+0x10>
 800530a:	2500      	movs	r5, #0
 800530c:	4628      	mov	r0, r5
 800530e:	bd38      	pop	{r3, r4, r5, pc}
 8005310:	b118      	cbz	r0, 800531a <_fflush_r+0x1a>
 8005312:	6983      	ldr	r3, [r0, #24]
 8005314:	b90b      	cbnz	r3, 800531a <_fflush_r+0x1a>
 8005316:	f000 f887 	bl	8005428 <__sinit>
 800531a:	4b14      	ldr	r3, [pc, #80]	; (800536c <_fflush_r+0x6c>)
 800531c:	429c      	cmp	r4, r3
 800531e:	d11b      	bne.n	8005358 <_fflush_r+0x58>
 8005320:	686c      	ldr	r4, [r5, #4]
 8005322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0ef      	beq.n	800530a <_fflush_r+0xa>
 800532a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800532c:	07d0      	lsls	r0, r2, #31
 800532e:	d404      	bmi.n	800533a <_fflush_r+0x3a>
 8005330:	0599      	lsls	r1, r3, #22
 8005332:	d402      	bmi.n	800533a <_fflush_r+0x3a>
 8005334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005336:	f000 f915 	bl	8005564 <__retarget_lock_acquire_recursive>
 800533a:	4628      	mov	r0, r5
 800533c:	4621      	mov	r1, r4
 800533e:	f7ff ff59 	bl	80051f4 <__sflush_r>
 8005342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005344:	07da      	lsls	r2, r3, #31
 8005346:	4605      	mov	r5, r0
 8005348:	d4e0      	bmi.n	800530c <_fflush_r+0xc>
 800534a:	89a3      	ldrh	r3, [r4, #12]
 800534c:	059b      	lsls	r3, r3, #22
 800534e:	d4dd      	bmi.n	800530c <_fflush_r+0xc>
 8005350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005352:	f000 f908 	bl	8005566 <__retarget_lock_release_recursive>
 8005356:	e7d9      	b.n	800530c <_fflush_r+0xc>
 8005358:	4b05      	ldr	r3, [pc, #20]	; (8005370 <_fflush_r+0x70>)
 800535a:	429c      	cmp	r4, r3
 800535c:	d101      	bne.n	8005362 <_fflush_r+0x62>
 800535e:	68ac      	ldr	r4, [r5, #8]
 8005360:	e7df      	b.n	8005322 <_fflush_r+0x22>
 8005362:	4b04      	ldr	r3, [pc, #16]	; (8005374 <_fflush_r+0x74>)
 8005364:	429c      	cmp	r4, r3
 8005366:	bf08      	it	eq
 8005368:	68ec      	ldreq	r4, [r5, #12]
 800536a:	e7da      	b.n	8005322 <_fflush_r+0x22>
 800536c:	08006014 	.word	0x08006014
 8005370:	08006034 	.word	0x08006034
 8005374:	08005ff4 	.word	0x08005ff4

08005378 <std>:
 8005378:	2300      	movs	r3, #0
 800537a:	b510      	push	{r4, lr}
 800537c:	4604      	mov	r4, r0
 800537e:	e9c0 3300 	strd	r3, r3, [r0]
 8005382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005386:	6083      	str	r3, [r0, #8]
 8005388:	8181      	strh	r1, [r0, #12]
 800538a:	6643      	str	r3, [r0, #100]	; 0x64
 800538c:	81c2      	strh	r2, [r0, #14]
 800538e:	6183      	str	r3, [r0, #24]
 8005390:	4619      	mov	r1, r3
 8005392:	2208      	movs	r2, #8
 8005394:	305c      	adds	r0, #92	; 0x5c
 8005396:	f7ff fd09 	bl	8004dac <memset>
 800539a:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <std+0x38>)
 800539c:	6263      	str	r3, [r4, #36]	; 0x24
 800539e:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <std+0x3c>)
 80053a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80053a2:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <std+0x40>)
 80053a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053a6:	4b05      	ldr	r3, [pc, #20]	; (80053bc <std+0x44>)
 80053a8:	6224      	str	r4, [r4, #32]
 80053aa:	6323      	str	r3, [r4, #48]	; 0x30
 80053ac:	bd10      	pop	{r4, pc}
 80053ae:	bf00      	nop
 80053b0:	08005e01 	.word	0x08005e01
 80053b4:	08005e23 	.word	0x08005e23
 80053b8:	08005e5b 	.word	0x08005e5b
 80053bc:	08005e7f 	.word	0x08005e7f

080053c0 <_cleanup_r>:
 80053c0:	4901      	ldr	r1, [pc, #4]	; (80053c8 <_cleanup_r+0x8>)
 80053c2:	f000 b8af 	b.w	8005524 <_fwalk_reent>
 80053c6:	bf00      	nop
 80053c8:	08005301 	.word	0x08005301

080053cc <__sfmoreglue>:
 80053cc:	b570      	push	{r4, r5, r6, lr}
 80053ce:	2268      	movs	r2, #104	; 0x68
 80053d0:	1e4d      	subs	r5, r1, #1
 80053d2:	4355      	muls	r5, r2
 80053d4:	460e      	mov	r6, r1
 80053d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80053da:	f000 f99f 	bl	800571c <_malloc_r>
 80053de:	4604      	mov	r4, r0
 80053e0:	b140      	cbz	r0, 80053f4 <__sfmoreglue+0x28>
 80053e2:	2100      	movs	r1, #0
 80053e4:	e9c0 1600 	strd	r1, r6, [r0]
 80053e8:	300c      	adds	r0, #12
 80053ea:	60a0      	str	r0, [r4, #8]
 80053ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80053f0:	f7ff fcdc 	bl	8004dac <memset>
 80053f4:	4620      	mov	r0, r4
 80053f6:	bd70      	pop	{r4, r5, r6, pc}

080053f8 <__sfp_lock_acquire>:
 80053f8:	4801      	ldr	r0, [pc, #4]	; (8005400 <__sfp_lock_acquire+0x8>)
 80053fa:	f000 b8b3 	b.w	8005564 <__retarget_lock_acquire_recursive>
 80053fe:	bf00      	nop
 8005400:	20000259 	.word	0x20000259

08005404 <__sfp_lock_release>:
 8005404:	4801      	ldr	r0, [pc, #4]	; (800540c <__sfp_lock_release+0x8>)
 8005406:	f000 b8ae 	b.w	8005566 <__retarget_lock_release_recursive>
 800540a:	bf00      	nop
 800540c:	20000259 	.word	0x20000259

08005410 <__sinit_lock_acquire>:
 8005410:	4801      	ldr	r0, [pc, #4]	; (8005418 <__sinit_lock_acquire+0x8>)
 8005412:	f000 b8a7 	b.w	8005564 <__retarget_lock_acquire_recursive>
 8005416:	bf00      	nop
 8005418:	2000025a 	.word	0x2000025a

0800541c <__sinit_lock_release>:
 800541c:	4801      	ldr	r0, [pc, #4]	; (8005424 <__sinit_lock_release+0x8>)
 800541e:	f000 b8a2 	b.w	8005566 <__retarget_lock_release_recursive>
 8005422:	bf00      	nop
 8005424:	2000025a 	.word	0x2000025a

08005428 <__sinit>:
 8005428:	b510      	push	{r4, lr}
 800542a:	4604      	mov	r4, r0
 800542c:	f7ff fff0 	bl	8005410 <__sinit_lock_acquire>
 8005430:	69a3      	ldr	r3, [r4, #24]
 8005432:	b11b      	cbz	r3, 800543c <__sinit+0x14>
 8005434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005438:	f7ff bff0 	b.w	800541c <__sinit_lock_release>
 800543c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005440:	6523      	str	r3, [r4, #80]	; 0x50
 8005442:	4b13      	ldr	r3, [pc, #76]	; (8005490 <__sinit+0x68>)
 8005444:	4a13      	ldr	r2, [pc, #76]	; (8005494 <__sinit+0x6c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	62a2      	str	r2, [r4, #40]	; 0x28
 800544a:	42a3      	cmp	r3, r4
 800544c:	bf04      	itt	eq
 800544e:	2301      	moveq	r3, #1
 8005450:	61a3      	streq	r3, [r4, #24]
 8005452:	4620      	mov	r0, r4
 8005454:	f000 f820 	bl	8005498 <__sfp>
 8005458:	6060      	str	r0, [r4, #4]
 800545a:	4620      	mov	r0, r4
 800545c:	f000 f81c 	bl	8005498 <__sfp>
 8005460:	60a0      	str	r0, [r4, #8]
 8005462:	4620      	mov	r0, r4
 8005464:	f000 f818 	bl	8005498 <__sfp>
 8005468:	2200      	movs	r2, #0
 800546a:	60e0      	str	r0, [r4, #12]
 800546c:	2104      	movs	r1, #4
 800546e:	6860      	ldr	r0, [r4, #4]
 8005470:	f7ff ff82 	bl	8005378 <std>
 8005474:	68a0      	ldr	r0, [r4, #8]
 8005476:	2201      	movs	r2, #1
 8005478:	2109      	movs	r1, #9
 800547a:	f7ff ff7d 	bl	8005378 <std>
 800547e:	68e0      	ldr	r0, [r4, #12]
 8005480:	2202      	movs	r2, #2
 8005482:	2112      	movs	r1, #18
 8005484:	f7ff ff78 	bl	8005378 <std>
 8005488:	2301      	movs	r3, #1
 800548a:	61a3      	str	r3, [r4, #24]
 800548c:	e7d2      	b.n	8005434 <__sinit+0xc>
 800548e:	bf00      	nop
 8005490:	08005ff0 	.word	0x08005ff0
 8005494:	080053c1 	.word	0x080053c1

08005498 <__sfp>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	4607      	mov	r7, r0
 800549c:	f7ff ffac 	bl	80053f8 <__sfp_lock_acquire>
 80054a0:	4b1e      	ldr	r3, [pc, #120]	; (800551c <__sfp+0x84>)
 80054a2:	681e      	ldr	r6, [r3, #0]
 80054a4:	69b3      	ldr	r3, [r6, #24]
 80054a6:	b913      	cbnz	r3, 80054ae <__sfp+0x16>
 80054a8:	4630      	mov	r0, r6
 80054aa:	f7ff ffbd 	bl	8005428 <__sinit>
 80054ae:	3648      	adds	r6, #72	; 0x48
 80054b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80054b4:	3b01      	subs	r3, #1
 80054b6:	d503      	bpl.n	80054c0 <__sfp+0x28>
 80054b8:	6833      	ldr	r3, [r6, #0]
 80054ba:	b30b      	cbz	r3, 8005500 <__sfp+0x68>
 80054bc:	6836      	ldr	r6, [r6, #0]
 80054be:	e7f7      	b.n	80054b0 <__sfp+0x18>
 80054c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80054c4:	b9d5      	cbnz	r5, 80054fc <__sfp+0x64>
 80054c6:	4b16      	ldr	r3, [pc, #88]	; (8005520 <__sfp+0x88>)
 80054c8:	60e3      	str	r3, [r4, #12]
 80054ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80054ce:	6665      	str	r5, [r4, #100]	; 0x64
 80054d0:	f000 f847 	bl	8005562 <__retarget_lock_init_recursive>
 80054d4:	f7ff ff96 	bl	8005404 <__sfp_lock_release>
 80054d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80054dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80054e0:	6025      	str	r5, [r4, #0]
 80054e2:	61a5      	str	r5, [r4, #24]
 80054e4:	2208      	movs	r2, #8
 80054e6:	4629      	mov	r1, r5
 80054e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80054ec:	f7ff fc5e 	bl	8004dac <memset>
 80054f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80054f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80054f8:	4620      	mov	r0, r4
 80054fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054fc:	3468      	adds	r4, #104	; 0x68
 80054fe:	e7d9      	b.n	80054b4 <__sfp+0x1c>
 8005500:	2104      	movs	r1, #4
 8005502:	4638      	mov	r0, r7
 8005504:	f7ff ff62 	bl	80053cc <__sfmoreglue>
 8005508:	4604      	mov	r4, r0
 800550a:	6030      	str	r0, [r6, #0]
 800550c:	2800      	cmp	r0, #0
 800550e:	d1d5      	bne.n	80054bc <__sfp+0x24>
 8005510:	f7ff ff78 	bl	8005404 <__sfp_lock_release>
 8005514:	230c      	movs	r3, #12
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	e7ee      	b.n	80054f8 <__sfp+0x60>
 800551a:	bf00      	nop
 800551c:	08005ff0 	.word	0x08005ff0
 8005520:	ffff0001 	.word	0xffff0001

08005524 <_fwalk_reent>:
 8005524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005528:	4606      	mov	r6, r0
 800552a:	4688      	mov	r8, r1
 800552c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005530:	2700      	movs	r7, #0
 8005532:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005536:	f1b9 0901 	subs.w	r9, r9, #1
 800553a:	d505      	bpl.n	8005548 <_fwalk_reent+0x24>
 800553c:	6824      	ldr	r4, [r4, #0]
 800553e:	2c00      	cmp	r4, #0
 8005540:	d1f7      	bne.n	8005532 <_fwalk_reent+0xe>
 8005542:	4638      	mov	r0, r7
 8005544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005548:	89ab      	ldrh	r3, [r5, #12]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d907      	bls.n	800555e <_fwalk_reent+0x3a>
 800554e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005552:	3301      	adds	r3, #1
 8005554:	d003      	beq.n	800555e <_fwalk_reent+0x3a>
 8005556:	4629      	mov	r1, r5
 8005558:	4630      	mov	r0, r6
 800555a:	47c0      	blx	r8
 800555c:	4307      	orrs	r7, r0
 800555e:	3568      	adds	r5, #104	; 0x68
 8005560:	e7e9      	b.n	8005536 <_fwalk_reent+0x12>

08005562 <__retarget_lock_init_recursive>:
 8005562:	4770      	bx	lr

08005564 <__retarget_lock_acquire_recursive>:
 8005564:	4770      	bx	lr

08005566 <__retarget_lock_release_recursive>:
 8005566:	4770      	bx	lr

08005568 <__swhatbuf_r>:
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	460e      	mov	r6, r1
 800556c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005570:	2900      	cmp	r1, #0
 8005572:	b096      	sub	sp, #88	; 0x58
 8005574:	4614      	mov	r4, r2
 8005576:	461d      	mov	r5, r3
 8005578:	da08      	bge.n	800558c <__swhatbuf_r+0x24>
 800557a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	602a      	str	r2, [r5, #0]
 8005582:	061a      	lsls	r2, r3, #24
 8005584:	d410      	bmi.n	80055a8 <__swhatbuf_r+0x40>
 8005586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800558a:	e00e      	b.n	80055aa <__swhatbuf_r+0x42>
 800558c:	466a      	mov	r2, sp
 800558e:	f000 fc9d 	bl	8005ecc <_fstat_r>
 8005592:	2800      	cmp	r0, #0
 8005594:	dbf1      	blt.n	800557a <__swhatbuf_r+0x12>
 8005596:	9a01      	ldr	r2, [sp, #4]
 8005598:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800559c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80055a0:	425a      	negs	r2, r3
 80055a2:	415a      	adcs	r2, r3
 80055a4:	602a      	str	r2, [r5, #0]
 80055a6:	e7ee      	b.n	8005586 <__swhatbuf_r+0x1e>
 80055a8:	2340      	movs	r3, #64	; 0x40
 80055aa:	2000      	movs	r0, #0
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	b016      	add	sp, #88	; 0x58
 80055b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080055b4 <__smakebuf_r>:
 80055b4:	898b      	ldrh	r3, [r1, #12]
 80055b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055b8:	079d      	lsls	r5, r3, #30
 80055ba:	4606      	mov	r6, r0
 80055bc:	460c      	mov	r4, r1
 80055be:	d507      	bpl.n	80055d0 <__smakebuf_r+0x1c>
 80055c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80055c4:	6023      	str	r3, [r4, #0]
 80055c6:	6123      	str	r3, [r4, #16]
 80055c8:	2301      	movs	r3, #1
 80055ca:	6163      	str	r3, [r4, #20]
 80055cc:	b002      	add	sp, #8
 80055ce:	bd70      	pop	{r4, r5, r6, pc}
 80055d0:	ab01      	add	r3, sp, #4
 80055d2:	466a      	mov	r2, sp
 80055d4:	f7ff ffc8 	bl	8005568 <__swhatbuf_r>
 80055d8:	9900      	ldr	r1, [sp, #0]
 80055da:	4605      	mov	r5, r0
 80055dc:	4630      	mov	r0, r6
 80055de:	f000 f89d 	bl	800571c <_malloc_r>
 80055e2:	b948      	cbnz	r0, 80055f8 <__smakebuf_r+0x44>
 80055e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055e8:	059a      	lsls	r2, r3, #22
 80055ea:	d4ef      	bmi.n	80055cc <__smakebuf_r+0x18>
 80055ec:	f023 0303 	bic.w	r3, r3, #3
 80055f0:	f043 0302 	orr.w	r3, r3, #2
 80055f4:	81a3      	strh	r3, [r4, #12]
 80055f6:	e7e3      	b.n	80055c0 <__smakebuf_r+0xc>
 80055f8:	4b0d      	ldr	r3, [pc, #52]	; (8005630 <__smakebuf_r+0x7c>)
 80055fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80055fc:	89a3      	ldrh	r3, [r4, #12]
 80055fe:	6020      	str	r0, [r4, #0]
 8005600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005604:	81a3      	strh	r3, [r4, #12]
 8005606:	9b00      	ldr	r3, [sp, #0]
 8005608:	6163      	str	r3, [r4, #20]
 800560a:	9b01      	ldr	r3, [sp, #4]
 800560c:	6120      	str	r0, [r4, #16]
 800560e:	b15b      	cbz	r3, 8005628 <__smakebuf_r+0x74>
 8005610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005614:	4630      	mov	r0, r6
 8005616:	f000 fc6b 	bl	8005ef0 <_isatty_r>
 800561a:	b128      	cbz	r0, 8005628 <__smakebuf_r+0x74>
 800561c:	89a3      	ldrh	r3, [r4, #12]
 800561e:	f023 0303 	bic.w	r3, r3, #3
 8005622:	f043 0301 	orr.w	r3, r3, #1
 8005626:	81a3      	strh	r3, [r4, #12]
 8005628:	89a0      	ldrh	r0, [r4, #12]
 800562a:	4305      	orrs	r5, r0
 800562c:	81a5      	strh	r5, [r4, #12]
 800562e:	e7cd      	b.n	80055cc <__smakebuf_r+0x18>
 8005630:	080053c1 	.word	0x080053c1

08005634 <malloc>:
 8005634:	4b02      	ldr	r3, [pc, #8]	; (8005640 <malloc+0xc>)
 8005636:	4601      	mov	r1, r0
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	f000 b86f 	b.w	800571c <_malloc_r>
 800563e:	bf00      	nop
 8005640:	2000000c 	.word	0x2000000c

08005644 <_free_r>:
 8005644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005646:	2900      	cmp	r1, #0
 8005648:	d044      	beq.n	80056d4 <_free_r+0x90>
 800564a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800564e:	9001      	str	r0, [sp, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	f1a1 0404 	sub.w	r4, r1, #4
 8005656:	bfb8      	it	lt
 8005658:	18e4      	addlt	r4, r4, r3
 800565a:	f000 fc6b 	bl	8005f34 <__malloc_lock>
 800565e:	4a1e      	ldr	r2, [pc, #120]	; (80056d8 <_free_r+0x94>)
 8005660:	9801      	ldr	r0, [sp, #4]
 8005662:	6813      	ldr	r3, [r2, #0]
 8005664:	b933      	cbnz	r3, 8005674 <_free_r+0x30>
 8005666:	6063      	str	r3, [r4, #4]
 8005668:	6014      	str	r4, [r2, #0]
 800566a:	b003      	add	sp, #12
 800566c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005670:	f000 bc66 	b.w	8005f40 <__malloc_unlock>
 8005674:	42a3      	cmp	r3, r4
 8005676:	d908      	bls.n	800568a <_free_r+0x46>
 8005678:	6825      	ldr	r5, [r4, #0]
 800567a:	1961      	adds	r1, r4, r5
 800567c:	428b      	cmp	r3, r1
 800567e:	bf01      	itttt	eq
 8005680:	6819      	ldreq	r1, [r3, #0]
 8005682:	685b      	ldreq	r3, [r3, #4]
 8005684:	1949      	addeq	r1, r1, r5
 8005686:	6021      	streq	r1, [r4, #0]
 8005688:	e7ed      	b.n	8005666 <_free_r+0x22>
 800568a:	461a      	mov	r2, r3
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	b10b      	cbz	r3, 8005694 <_free_r+0x50>
 8005690:	42a3      	cmp	r3, r4
 8005692:	d9fa      	bls.n	800568a <_free_r+0x46>
 8005694:	6811      	ldr	r1, [r2, #0]
 8005696:	1855      	adds	r5, r2, r1
 8005698:	42a5      	cmp	r5, r4
 800569a:	d10b      	bne.n	80056b4 <_free_r+0x70>
 800569c:	6824      	ldr	r4, [r4, #0]
 800569e:	4421      	add	r1, r4
 80056a0:	1854      	adds	r4, r2, r1
 80056a2:	42a3      	cmp	r3, r4
 80056a4:	6011      	str	r1, [r2, #0]
 80056a6:	d1e0      	bne.n	800566a <_free_r+0x26>
 80056a8:	681c      	ldr	r4, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	6053      	str	r3, [r2, #4]
 80056ae:	4421      	add	r1, r4
 80056b0:	6011      	str	r1, [r2, #0]
 80056b2:	e7da      	b.n	800566a <_free_r+0x26>
 80056b4:	d902      	bls.n	80056bc <_free_r+0x78>
 80056b6:	230c      	movs	r3, #12
 80056b8:	6003      	str	r3, [r0, #0]
 80056ba:	e7d6      	b.n	800566a <_free_r+0x26>
 80056bc:	6825      	ldr	r5, [r4, #0]
 80056be:	1961      	adds	r1, r4, r5
 80056c0:	428b      	cmp	r3, r1
 80056c2:	bf04      	itt	eq
 80056c4:	6819      	ldreq	r1, [r3, #0]
 80056c6:	685b      	ldreq	r3, [r3, #4]
 80056c8:	6063      	str	r3, [r4, #4]
 80056ca:	bf04      	itt	eq
 80056cc:	1949      	addeq	r1, r1, r5
 80056ce:	6021      	streq	r1, [r4, #0]
 80056d0:	6054      	str	r4, [r2, #4]
 80056d2:	e7ca      	b.n	800566a <_free_r+0x26>
 80056d4:	b003      	add	sp, #12
 80056d6:	bd30      	pop	{r4, r5, pc}
 80056d8:	2000025c 	.word	0x2000025c

080056dc <sbrk_aligned>:
 80056dc:	b570      	push	{r4, r5, r6, lr}
 80056de:	4e0e      	ldr	r6, [pc, #56]	; (8005718 <sbrk_aligned+0x3c>)
 80056e0:	460c      	mov	r4, r1
 80056e2:	6831      	ldr	r1, [r6, #0]
 80056e4:	4605      	mov	r5, r0
 80056e6:	b911      	cbnz	r1, 80056ee <sbrk_aligned+0x12>
 80056e8:	f000 fb7a 	bl	8005de0 <_sbrk_r>
 80056ec:	6030      	str	r0, [r6, #0]
 80056ee:	4621      	mov	r1, r4
 80056f0:	4628      	mov	r0, r5
 80056f2:	f000 fb75 	bl	8005de0 <_sbrk_r>
 80056f6:	1c43      	adds	r3, r0, #1
 80056f8:	d00a      	beq.n	8005710 <sbrk_aligned+0x34>
 80056fa:	1cc4      	adds	r4, r0, #3
 80056fc:	f024 0403 	bic.w	r4, r4, #3
 8005700:	42a0      	cmp	r0, r4
 8005702:	d007      	beq.n	8005714 <sbrk_aligned+0x38>
 8005704:	1a21      	subs	r1, r4, r0
 8005706:	4628      	mov	r0, r5
 8005708:	f000 fb6a 	bl	8005de0 <_sbrk_r>
 800570c:	3001      	adds	r0, #1
 800570e:	d101      	bne.n	8005714 <sbrk_aligned+0x38>
 8005710:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005714:	4620      	mov	r0, r4
 8005716:	bd70      	pop	{r4, r5, r6, pc}
 8005718:	20000260 	.word	0x20000260

0800571c <_malloc_r>:
 800571c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005720:	1ccd      	adds	r5, r1, #3
 8005722:	f025 0503 	bic.w	r5, r5, #3
 8005726:	3508      	adds	r5, #8
 8005728:	2d0c      	cmp	r5, #12
 800572a:	bf38      	it	cc
 800572c:	250c      	movcc	r5, #12
 800572e:	2d00      	cmp	r5, #0
 8005730:	4607      	mov	r7, r0
 8005732:	db01      	blt.n	8005738 <_malloc_r+0x1c>
 8005734:	42a9      	cmp	r1, r5
 8005736:	d905      	bls.n	8005744 <_malloc_r+0x28>
 8005738:	230c      	movs	r3, #12
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	2600      	movs	r6, #0
 800573e:	4630      	mov	r0, r6
 8005740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005744:	4e2e      	ldr	r6, [pc, #184]	; (8005800 <_malloc_r+0xe4>)
 8005746:	f000 fbf5 	bl	8005f34 <__malloc_lock>
 800574a:	6833      	ldr	r3, [r6, #0]
 800574c:	461c      	mov	r4, r3
 800574e:	bb34      	cbnz	r4, 800579e <_malloc_r+0x82>
 8005750:	4629      	mov	r1, r5
 8005752:	4638      	mov	r0, r7
 8005754:	f7ff ffc2 	bl	80056dc <sbrk_aligned>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	4604      	mov	r4, r0
 800575c:	d14d      	bne.n	80057fa <_malloc_r+0xde>
 800575e:	6834      	ldr	r4, [r6, #0]
 8005760:	4626      	mov	r6, r4
 8005762:	2e00      	cmp	r6, #0
 8005764:	d140      	bne.n	80057e8 <_malloc_r+0xcc>
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	4631      	mov	r1, r6
 800576a:	4638      	mov	r0, r7
 800576c:	eb04 0803 	add.w	r8, r4, r3
 8005770:	f000 fb36 	bl	8005de0 <_sbrk_r>
 8005774:	4580      	cmp	r8, r0
 8005776:	d13a      	bne.n	80057ee <_malloc_r+0xd2>
 8005778:	6821      	ldr	r1, [r4, #0]
 800577a:	3503      	adds	r5, #3
 800577c:	1a6d      	subs	r5, r5, r1
 800577e:	f025 0503 	bic.w	r5, r5, #3
 8005782:	3508      	adds	r5, #8
 8005784:	2d0c      	cmp	r5, #12
 8005786:	bf38      	it	cc
 8005788:	250c      	movcc	r5, #12
 800578a:	4629      	mov	r1, r5
 800578c:	4638      	mov	r0, r7
 800578e:	f7ff ffa5 	bl	80056dc <sbrk_aligned>
 8005792:	3001      	adds	r0, #1
 8005794:	d02b      	beq.n	80057ee <_malloc_r+0xd2>
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	442b      	add	r3, r5
 800579a:	6023      	str	r3, [r4, #0]
 800579c:	e00e      	b.n	80057bc <_malloc_r+0xa0>
 800579e:	6822      	ldr	r2, [r4, #0]
 80057a0:	1b52      	subs	r2, r2, r5
 80057a2:	d41e      	bmi.n	80057e2 <_malloc_r+0xc6>
 80057a4:	2a0b      	cmp	r2, #11
 80057a6:	d916      	bls.n	80057d6 <_malloc_r+0xba>
 80057a8:	1961      	adds	r1, r4, r5
 80057aa:	42a3      	cmp	r3, r4
 80057ac:	6025      	str	r5, [r4, #0]
 80057ae:	bf18      	it	ne
 80057b0:	6059      	strne	r1, [r3, #4]
 80057b2:	6863      	ldr	r3, [r4, #4]
 80057b4:	bf08      	it	eq
 80057b6:	6031      	streq	r1, [r6, #0]
 80057b8:	5162      	str	r2, [r4, r5]
 80057ba:	604b      	str	r3, [r1, #4]
 80057bc:	4638      	mov	r0, r7
 80057be:	f104 060b 	add.w	r6, r4, #11
 80057c2:	f000 fbbd 	bl	8005f40 <__malloc_unlock>
 80057c6:	f026 0607 	bic.w	r6, r6, #7
 80057ca:	1d23      	adds	r3, r4, #4
 80057cc:	1af2      	subs	r2, r6, r3
 80057ce:	d0b6      	beq.n	800573e <_malloc_r+0x22>
 80057d0:	1b9b      	subs	r3, r3, r6
 80057d2:	50a3      	str	r3, [r4, r2]
 80057d4:	e7b3      	b.n	800573e <_malloc_r+0x22>
 80057d6:	6862      	ldr	r2, [r4, #4]
 80057d8:	42a3      	cmp	r3, r4
 80057da:	bf0c      	ite	eq
 80057dc:	6032      	streq	r2, [r6, #0]
 80057de:	605a      	strne	r2, [r3, #4]
 80057e0:	e7ec      	b.n	80057bc <_malloc_r+0xa0>
 80057e2:	4623      	mov	r3, r4
 80057e4:	6864      	ldr	r4, [r4, #4]
 80057e6:	e7b2      	b.n	800574e <_malloc_r+0x32>
 80057e8:	4634      	mov	r4, r6
 80057ea:	6876      	ldr	r6, [r6, #4]
 80057ec:	e7b9      	b.n	8005762 <_malloc_r+0x46>
 80057ee:	230c      	movs	r3, #12
 80057f0:	603b      	str	r3, [r7, #0]
 80057f2:	4638      	mov	r0, r7
 80057f4:	f000 fba4 	bl	8005f40 <__malloc_unlock>
 80057f8:	e7a1      	b.n	800573e <_malloc_r+0x22>
 80057fa:	6025      	str	r5, [r4, #0]
 80057fc:	e7de      	b.n	80057bc <_malloc_r+0xa0>
 80057fe:	bf00      	nop
 8005800:	2000025c 	.word	0x2000025c

08005804 <__sfputc_r>:
 8005804:	6893      	ldr	r3, [r2, #8]
 8005806:	3b01      	subs	r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	b410      	push	{r4}
 800580c:	6093      	str	r3, [r2, #8]
 800580e:	da08      	bge.n	8005822 <__sfputc_r+0x1e>
 8005810:	6994      	ldr	r4, [r2, #24]
 8005812:	42a3      	cmp	r3, r4
 8005814:	db01      	blt.n	800581a <__sfputc_r+0x16>
 8005816:	290a      	cmp	r1, #10
 8005818:	d103      	bne.n	8005822 <__sfputc_r+0x1e>
 800581a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800581e:	f7ff bc29 	b.w	8005074 <__swbuf_r>
 8005822:	6813      	ldr	r3, [r2, #0]
 8005824:	1c58      	adds	r0, r3, #1
 8005826:	6010      	str	r0, [r2, #0]
 8005828:	7019      	strb	r1, [r3, #0]
 800582a:	4608      	mov	r0, r1
 800582c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005830:	4770      	bx	lr

08005832 <__sfputs_r>:
 8005832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005834:	4606      	mov	r6, r0
 8005836:	460f      	mov	r7, r1
 8005838:	4614      	mov	r4, r2
 800583a:	18d5      	adds	r5, r2, r3
 800583c:	42ac      	cmp	r4, r5
 800583e:	d101      	bne.n	8005844 <__sfputs_r+0x12>
 8005840:	2000      	movs	r0, #0
 8005842:	e007      	b.n	8005854 <__sfputs_r+0x22>
 8005844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005848:	463a      	mov	r2, r7
 800584a:	4630      	mov	r0, r6
 800584c:	f7ff ffda 	bl	8005804 <__sfputc_r>
 8005850:	1c43      	adds	r3, r0, #1
 8005852:	d1f3      	bne.n	800583c <__sfputs_r+0xa>
 8005854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005858 <_vfiprintf_r>:
 8005858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800585c:	460d      	mov	r5, r1
 800585e:	b09d      	sub	sp, #116	; 0x74
 8005860:	4614      	mov	r4, r2
 8005862:	4698      	mov	r8, r3
 8005864:	4606      	mov	r6, r0
 8005866:	b118      	cbz	r0, 8005870 <_vfiprintf_r+0x18>
 8005868:	6983      	ldr	r3, [r0, #24]
 800586a:	b90b      	cbnz	r3, 8005870 <_vfiprintf_r+0x18>
 800586c:	f7ff fddc 	bl	8005428 <__sinit>
 8005870:	4b89      	ldr	r3, [pc, #548]	; (8005a98 <_vfiprintf_r+0x240>)
 8005872:	429d      	cmp	r5, r3
 8005874:	d11b      	bne.n	80058ae <_vfiprintf_r+0x56>
 8005876:	6875      	ldr	r5, [r6, #4]
 8005878:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800587a:	07d9      	lsls	r1, r3, #31
 800587c:	d405      	bmi.n	800588a <_vfiprintf_r+0x32>
 800587e:	89ab      	ldrh	r3, [r5, #12]
 8005880:	059a      	lsls	r2, r3, #22
 8005882:	d402      	bmi.n	800588a <_vfiprintf_r+0x32>
 8005884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005886:	f7ff fe6d 	bl	8005564 <__retarget_lock_acquire_recursive>
 800588a:	89ab      	ldrh	r3, [r5, #12]
 800588c:	071b      	lsls	r3, r3, #28
 800588e:	d501      	bpl.n	8005894 <_vfiprintf_r+0x3c>
 8005890:	692b      	ldr	r3, [r5, #16]
 8005892:	b9eb      	cbnz	r3, 80058d0 <_vfiprintf_r+0x78>
 8005894:	4629      	mov	r1, r5
 8005896:	4630      	mov	r0, r6
 8005898:	f7ff fc3e 	bl	8005118 <__swsetup_r>
 800589c:	b1c0      	cbz	r0, 80058d0 <_vfiprintf_r+0x78>
 800589e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058a0:	07dc      	lsls	r4, r3, #31
 80058a2:	d50e      	bpl.n	80058c2 <_vfiprintf_r+0x6a>
 80058a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058a8:	b01d      	add	sp, #116	; 0x74
 80058aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ae:	4b7b      	ldr	r3, [pc, #492]	; (8005a9c <_vfiprintf_r+0x244>)
 80058b0:	429d      	cmp	r5, r3
 80058b2:	d101      	bne.n	80058b8 <_vfiprintf_r+0x60>
 80058b4:	68b5      	ldr	r5, [r6, #8]
 80058b6:	e7df      	b.n	8005878 <_vfiprintf_r+0x20>
 80058b8:	4b79      	ldr	r3, [pc, #484]	; (8005aa0 <_vfiprintf_r+0x248>)
 80058ba:	429d      	cmp	r5, r3
 80058bc:	bf08      	it	eq
 80058be:	68f5      	ldreq	r5, [r6, #12]
 80058c0:	e7da      	b.n	8005878 <_vfiprintf_r+0x20>
 80058c2:	89ab      	ldrh	r3, [r5, #12]
 80058c4:	0598      	lsls	r0, r3, #22
 80058c6:	d4ed      	bmi.n	80058a4 <_vfiprintf_r+0x4c>
 80058c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058ca:	f7ff fe4c 	bl	8005566 <__retarget_lock_release_recursive>
 80058ce:	e7e9      	b.n	80058a4 <_vfiprintf_r+0x4c>
 80058d0:	2300      	movs	r3, #0
 80058d2:	9309      	str	r3, [sp, #36]	; 0x24
 80058d4:	2320      	movs	r3, #32
 80058d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058da:	f8cd 800c 	str.w	r8, [sp, #12]
 80058de:	2330      	movs	r3, #48	; 0x30
 80058e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005aa4 <_vfiprintf_r+0x24c>
 80058e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058e8:	f04f 0901 	mov.w	r9, #1
 80058ec:	4623      	mov	r3, r4
 80058ee:	469a      	mov	sl, r3
 80058f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058f4:	b10a      	cbz	r2, 80058fa <_vfiprintf_r+0xa2>
 80058f6:	2a25      	cmp	r2, #37	; 0x25
 80058f8:	d1f9      	bne.n	80058ee <_vfiprintf_r+0x96>
 80058fa:	ebba 0b04 	subs.w	fp, sl, r4
 80058fe:	d00b      	beq.n	8005918 <_vfiprintf_r+0xc0>
 8005900:	465b      	mov	r3, fp
 8005902:	4622      	mov	r2, r4
 8005904:	4629      	mov	r1, r5
 8005906:	4630      	mov	r0, r6
 8005908:	f7ff ff93 	bl	8005832 <__sfputs_r>
 800590c:	3001      	adds	r0, #1
 800590e:	f000 80aa 	beq.w	8005a66 <_vfiprintf_r+0x20e>
 8005912:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005914:	445a      	add	r2, fp
 8005916:	9209      	str	r2, [sp, #36]	; 0x24
 8005918:	f89a 3000 	ldrb.w	r3, [sl]
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 80a2 	beq.w	8005a66 <_vfiprintf_r+0x20e>
 8005922:	2300      	movs	r3, #0
 8005924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005928:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800592c:	f10a 0a01 	add.w	sl, sl, #1
 8005930:	9304      	str	r3, [sp, #16]
 8005932:	9307      	str	r3, [sp, #28]
 8005934:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005938:	931a      	str	r3, [sp, #104]	; 0x68
 800593a:	4654      	mov	r4, sl
 800593c:	2205      	movs	r2, #5
 800593e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005942:	4858      	ldr	r0, [pc, #352]	; (8005aa4 <_vfiprintf_r+0x24c>)
 8005944:	f7fa fc64 	bl	8000210 <memchr>
 8005948:	9a04      	ldr	r2, [sp, #16]
 800594a:	b9d8      	cbnz	r0, 8005984 <_vfiprintf_r+0x12c>
 800594c:	06d1      	lsls	r1, r2, #27
 800594e:	bf44      	itt	mi
 8005950:	2320      	movmi	r3, #32
 8005952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005956:	0713      	lsls	r3, r2, #28
 8005958:	bf44      	itt	mi
 800595a:	232b      	movmi	r3, #43	; 0x2b
 800595c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005960:	f89a 3000 	ldrb.w	r3, [sl]
 8005964:	2b2a      	cmp	r3, #42	; 0x2a
 8005966:	d015      	beq.n	8005994 <_vfiprintf_r+0x13c>
 8005968:	9a07      	ldr	r2, [sp, #28]
 800596a:	4654      	mov	r4, sl
 800596c:	2000      	movs	r0, #0
 800596e:	f04f 0c0a 	mov.w	ip, #10
 8005972:	4621      	mov	r1, r4
 8005974:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005978:	3b30      	subs	r3, #48	; 0x30
 800597a:	2b09      	cmp	r3, #9
 800597c:	d94e      	bls.n	8005a1c <_vfiprintf_r+0x1c4>
 800597e:	b1b0      	cbz	r0, 80059ae <_vfiprintf_r+0x156>
 8005980:	9207      	str	r2, [sp, #28]
 8005982:	e014      	b.n	80059ae <_vfiprintf_r+0x156>
 8005984:	eba0 0308 	sub.w	r3, r0, r8
 8005988:	fa09 f303 	lsl.w	r3, r9, r3
 800598c:	4313      	orrs	r3, r2
 800598e:	9304      	str	r3, [sp, #16]
 8005990:	46a2      	mov	sl, r4
 8005992:	e7d2      	b.n	800593a <_vfiprintf_r+0xe2>
 8005994:	9b03      	ldr	r3, [sp, #12]
 8005996:	1d19      	adds	r1, r3, #4
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	9103      	str	r1, [sp, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	bfbb      	ittet	lt
 80059a0:	425b      	neglt	r3, r3
 80059a2:	f042 0202 	orrlt.w	r2, r2, #2
 80059a6:	9307      	strge	r3, [sp, #28]
 80059a8:	9307      	strlt	r3, [sp, #28]
 80059aa:	bfb8      	it	lt
 80059ac:	9204      	strlt	r2, [sp, #16]
 80059ae:	7823      	ldrb	r3, [r4, #0]
 80059b0:	2b2e      	cmp	r3, #46	; 0x2e
 80059b2:	d10c      	bne.n	80059ce <_vfiprintf_r+0x176>
 80059b4:	7863      	ldrb	r3, [r4, #1]
 80059b6:	2b2a      	cmp	r3, #42	; 0x2a
 80059b8:	d135      	bne.n	8005a26 <_vfiprintf_r+0x1ce>
 80059ba:	9b03      	ldr	r3, [sp, #12]
 80059bc:	1d1a      	adds	r2, r3, #4
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	9203      	str	r2, [sp, #12]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	bfb8      	it	lt
 80059c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80059ca:	3402      	adds	r4, #2
 80059cc:	9305      	str	r3, [sp, #20]
 80059ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005ab4 <_vfiprintf_r+0x25c>
 80059d2:	7821      	ldrb	r1, [r4, #0]
 80059d4:	2203      	movs	r2, #3
 80059d6:	4650      	mov	r0, sl
 80059d8:	f7fa fc1a 	bl	8000210 <memchr>
 80059dc:	b140      	cbz	r0, 80059f0 <_vfiprintf_r+0x198>
 80059de:	2340      	movs	r3, #64	; 0x40
 80059e0:	eba0 000a 	sub.w	r0, r0, sl
 80059e4:	fa03 f000 	lsl.w	r0, r3, r0
 80059e8:	9b04      	ldr	r3, [sp, #16]
 80059ea:	4303      	orrs	r3, r0
 80059ec:	3401      	adds	r4, #1
 80059ee:	9304      	str	r3, [sp, #16]
 80059f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f4:	482c      	ldr	r0, [pc, #176]	; (8005aa8 <_vfiprintf_r+0x250>)
 80059f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059fa:	2206      	movs	r2, #6
 80059fc:	f7fa fc08 	bl	8000210 <memchr>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d03f      	beq.n	8005a84 <_vfiprintf_r+0x22c>
 8005a04:	4b29      	ldr	r3, [pc, #164]	; (8005aac <_vfiprintf_r+0x254>)
 8005a06:	bb1b      	cbnz	r3, 8005a50 <_vfiprintf_r+0x1f8>
 8005a08:	9b03      	ldr	r3, [sp, #12]
 8005a0a:	3307      	adds	r3, #7
 8005a0c:	f023 0307 	bic.w	r3, r3, #7
 8005a10:	3308      	adds	r3, #8
 8005a12:	9303      	str	r3, [sp, #12]
 8005a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a16:	443b      	add	r3, r7
 8005a18:	9309      	str	r3, [sp, #36]	; 0x24
 8005a1a:	e767      	b.n	80058ec <_vfiprintf_r+0x94>
 8005a1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a20:	460c      	mov	r4, r1
 8005a22:	2001      	movs	r0, #1
 8005a24:	e7a5      	b.n	8005972 <_vfiprintf_r+0x11a>
 8005a26:	2300      	movs	r3, #0
 8005a28:	3401      	adds	r4, #1
 8005a2a:	9305      	str	r3, [sp, #20]
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	f04f 0c0a 	mov.w	ip, #10
 8005a32:	4620      	mov	r0, r4
 8005a34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a38:	3a30      	subs	r2, #48	; 0x30
 8005a3a:	2a09      	cmp	r2, #9
 8005a3c:	d903      	bls.n	8005a46 <_vfiprintf_r+0x1ee>
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0c5      	beq.n	80059ce <_vfiprintf_r+0x176>
 8005a42:	9105      	str	r1, [sp, #20]
 8005a44:	e7c3      	b.n	80059ce <_vfiprintf_r+0x176>
 8005a46:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e7f0      	b.n	8005a32 <_vfiprintf_r+0x1da>
 8005a50:	ab03      	add	r3, sp, #12
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	462a      	mov	r2, r5
 8005a56:	4b16      	ldr	r3, [pc, #88]	; (8005ab0 <_vfiprintf_r+0x258>)
 8005a58:	a904      	add	r1, sp, #16
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	f3af 8000 	nop.w
 8005a60:	4607      	mov	r7, r0
 8005a62:	1c78      	adds	r0, r7, #1
 8005a64:	d1d6      	bne.n	8005a14 <_vfiprintf_r+0x1bc>
 8005a66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a68:	07d9      	lsls	r1, r3, #31
 8005a6a:	d405      	bmi.n	8005a78 <_vfiprintf_r+0x220>
 8005a6c:	89ab      	ldrh	r3, [r5, #12]
 8005a6e:	059a      	lsls	r2, r3, #22
 8005a70:	d402      	bmi.n	8005a78 <_vfiprintf_r+0x220>
 8005a72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a74:	f7ff fd77 	bl	8005566 <__retarget_lock_release_recursive>
 8005a78:	89ab      	ldrh	r3, [r5, #12]
 8005a7a:	065b      	lsls	r3, r3, #25
 8005a7c:	f53f af12 	bmi.w	80058a4 <_vfiprintf_r+0x4c>
 8005a80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a82:	e711      	b.n	80058a8 <_vfiprintf_r+0x50>
 8005a84:	ab03      	add	r3, sp, #12
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	462a      	mov	r2, r5
 8005a8a:	4b09      	ldr	r3, [pc, #36]	; (8005ab0 <_vfiprintf_r+0x258>)
 8005a8c:	a904      	add	r1, sp, #16
 8005a8e:	4630      	mov	r0, r6
 8005a90:	f000 f880 	bl	8005b94 <_printf_i>
 8005a94:	e7e4      	b.n	8005a60 <_vfiprintf_r+0x208>
 8005a96:	bf00      	nop
 8005a98:	08006014 	.word	0x08006014
 8005a9c:	08006034 	.word	0x08006034
 8005aa0:	08005ff4 	.word	0x08005ff4
 8005aa4:	08006054 	.word	0x08006054
 8005aa8:	0800605e 	.word	0x0800605e
 8005aac:	00000000 	.word	0x00000000
 8005ab0:	08005833 	.word	0x08005833
 8005ab4:	0800605a 	.word	0x0800605a

08005ab8 <_printf_common>:
 8005ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005abc:	4616      	mov	r6, r2
 8005abe:	4699      	mov	r9, r3
 8005ac0:	688a      	ldr	r2, [r1, #8]
 8005ac2:	690b      	ldr	r3, [r1, #16]
 8005ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	bfb8      	it	lt
 8005acc:	4613      	movlt	r3, r2
 8005ace:	6033      	str	r3, [r6, #0]
 8005ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ad4:	4607      	mov	r7, r0
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	b10a      	cbz	r2, 8005ade <_printf_common+0x26>
 8005ada:	3301      	adds	r3, #1
 8005adc:	6033      	str	r3, [r6, #0]
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	0699      	lsls	r1, r3, #26
 8005ae2:	bf42      	ittt	mi
 8005ae4:	6833      	ldrmi	r3, [r6, #0]
 8005ae6:	3302      	addmi	r3, #2
 8005ae8:	6033      	strmi	r3, [r6, #0]
 8005aea:	6825      	ldr	r5, [r4, #0]
 8005aec:	f015 0506 	ands.w	r5, r5, #6
 8005af0:	d106      	bne.n	8005b00 <_printf_common+0x48>
 8005af2:	f104 0a19 	add.w	sl, r4, #25
 8005af6:	68e3      	ldr	r3, [r4, #12]
 8005af8:	6832      	ldr	r2, [r6, #0]
 8005afa:	1a9b      	subs	r3, r3, r2
 8005afc:	42ab      	cmp	r3, r5
 8005afe:	dc26      	bgt.n	8005b4e <_printf_common+0x96>
 8005b00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b04:	1e13      	subs	r3, r2, #0
 8005b06:	6822      	ldr	r2, [r4, #0]
 8005b08:	bf18      	it	ne
 8005b0a:	2301      	movne	r3, #1
 8005b0c:	0692      	lsls	r2, r2, #26
 8005b0e:	d42b      	bmi.n	8005b68 <_printf_common+0xb0>
 8005b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b14:	4649      	mov	r1, r9
 8005b16:	4638      	mov	r0, r7
 8005b18:	47c0      	blx	r8
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	d01e      	beq.n	8005b5c <_printf_common+0xa4>
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	68e5      	ldr	r5, [r4, #12]
 8005b22:	6832      	ldr	r2, [r6, #0]
 8005b24:	f003 0306 	and.w	r3, r3, #6
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	bf08      	it	eq
 8005b2c:	1aad      	subeq	r5, r5, r2
 8005b2e:	68a3      	ldr	r3, [r4, #8]
 8005b30:	6922      	ldr	r2, [r4, #16]
 8005b32:	bf0c      	ite	eq
 8005b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b38:	2500      	movne	r5, #0
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	bfc4      	itt	gt
 8005b3e:	1a9b      	subgt	r3, r3, r2
 8005b40:	18ed      	addgt	r5, r5, r3
 8005b42:	2600      	movs	r6, #0
 8005b44:	341a      	adds	r4, #26
 8005b46:	42b5      	cmp	r5, r6
 8005b48:	d11a      	bne.n	8005b80 <_printf_common+0xc8>
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	e008      	b.n	8005b60 <_printf_common+0xa8>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	4652      	mov	r2, sl
 8005b52:	4649      	mov	r1, r9
 8005b54:	4638      	mov	r0, r7
 8005b56:	47c0      	blx	r8
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d103      	bne.n	8005b64 <_printf_common+0xac>
 8005b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b64:	3501      	adds	r5, #1
 8005b66:	e7c6      	b.n	8005af6 <_printf_common+0x3e>
 8005b68:	18e1      	adds	r1, r4, r3
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	2030      	movs	r0, #48	; 0x30
 8005b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b72:	4422      	add	r2, r4
 8005b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b7c:	3302      	adds	r3, #2
 8005b7e:	e7c7      	b.n	8005b10 <_printf_common+0x58>
 8005b80:	2301      	movs	r3, #1
 8005b82:	4622      	mov	r2, r4
 8005b84:	4649      	mov	r1, r9
 8005b86:	4638      	mov	r0, r7
 8005b88:	47c0      	blx	r8
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	d0e6      	beq.n	8005b5c <_printf_common+0xa4>
 8005b8e:	3601      	adds	r6, #1
 8005b90:	e7d9      	b.n	8005b46 <_printf_common+0x8e>
	...

08005b94 <_printf_i>:
 8005b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b98:	7e0f      	ldrb	r7, [r1, #24]
 8005b9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b9c:	2f78      	cmp	r7, #120	; 0x78
 8005b9e:	4691      	mov	r9, r2
 8005ba0:	4680      	mov	r8, r0
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	469a      	mov	sl, r3
 8005ba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005baa:	d807      	bhi.n	8005bbc <_printf_i+0x28>
 8005bac:	2f62      	cmp	r7, #98	; 0x62
 8005bae:	d80a      	bhi.n	8005bc6 <_printf_i+0x32>
 8005bb0:	2f00      	cmp	r7, #0
 8005bb2:	f000 80d8 	beq.w	8005d66 <_printf_i+0x1d2>
 8005bb6:	2f58      	cmp	r7, #88	; 0x58
 8005bb8:	f000 80a3 	beq.w	8005d02 <_printf_i+0x16e>
 8005bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bc4:	e03a      	b.n	8005c3c <_printf_i+0xa8>
 8005bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bca:	2b15      	cmp	r3, #21
 8005bcc:	d8f6      	bhi.n	8005bbc <_printf_i+0x28>
 8005bce:	a101      	add	r1, pc, #4	; (adr r1, 8005bd4 <_printf_i+0x40>)
 8005bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bd4:	08005c2d 	.word	0x08005c2d
 8005bd8:	08005c41 	.word	0x08005c41
 8005bdc:	08005bbd 	.word	0x08005bbd
 8005be0:	08005bbd 	.word	0x08005bbd
 8005be4:	08005bbd 	.word	0x08005bbd
 8005be8:	08005bbd 	.word	0x08005bbd
 8005bec:	08005c41 	.word	0x08005c41
 8005bf0:	08005bbd 	.word	0x08005bbd
 8005bf4:	08005bbd 	.word	0x08005bbd
 8005bf8:	08005bbd 	.word	0x08005bbd
 8005bfc:	08005bbd 	.word	0x08005bbd
 8005c00:	08005d4d 	.word	0x08005d4d
 8005c04:	08005c71 	.word	0x08005c71
 8005c08:	08005d2f 	.word	0x08005d2f
 8005c0c:	08005bbd 	.word	0x08005bbd
 8005c10:	08005bbd 	.word	0x08005bbd
 8005c14:	08005d6f 	.word	0x08005d6f
 8005c18:	08005bbd 	.word	0x08005bbd
 8005c1c:	08005c71 	.word	0x08005c71
 8005c20:	08005bbd 	.word	0x08005bbd
 8005c24:	08005bbd 	.word	0x08005bbd
 8005c28:	08005d37 	.word	0x08005d37
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	1d1a      	adds	r2, r3, #4
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	602a      	str	r2, [r5, #0]
 8005c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e0a3      	b.n	8005d88 <_printf_i+0x1f4>
 8005c40:	6820      	ldr	r0, [r4, #0]
 8005c42:	6829      	ldr	r1, [r5, #0]
 8005c44:	0606      	lsls	r6, r0, #24
 8005c46:	f101 0304 	add.w	r3, r1, #4
 8005c4a:	d50a      	bpl.n	8005c62 <_printf_i+0xce>
 8005c4c:	680e      	ldr	r6, [r1, #0]
 8005c4e:	602b      	str	r3, [r5, #0]
 8005c50:	2e00      	cmp	r6, #0
 8005c52:	da03      	bge.n	8005c5c <_printf_i+0xc8>
 8005c54:	232d      	movs	r3, #45	; 0x2d
 8005c56:	4276      	negs	r6, r6
 8005c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c5c:	485e      	ldr	r0, [pc, #376]	; (8005dd8 <_printf_i+0x244>)
 8005c5e:	230a      	movs	r3, #10
 8005c60:	e019      	b.n	8005c96 <_printf_i+0x102>
 8005c62:	680e      	ldr	r6, [r1, #0]
 8005c64:	602b      	str	r3, [r5, #0]
 8005c66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c6a:	bf18      	it	ne
 8005c6c:	b236      	sxthne	r6, r6
 8005c6e:	e7ef      	b.n	8005c50 <_printf_i+0xbc>
 8005c70:	682b      	ldr	r3, [r5, #0]
 8005c72:	6820      	ldr	r0, [r4, #0]
 8005c74:	1d19      	adds	r1, r3, #4
 8005c76:	6029      	str	r1, [r5, #0]
 8005c78:	0601      	lsls	r1, r0, #24
 8005c7a:	d501      	bpl.n	8005c80 <_printf_i+0xec>
 8005c7c:	681e      	ldr	r6, [r3, #0]
 8005c7e:	e002      	b.n	8005c86 <_printf_i+0xf2>
 8005c80:	0646      	lsls	r6, r0, #25
 8005c82:	d5fb      	bpl.n	8005c7c <_printf_i+0xe8>
 8005c84:	881e      	ldrh	r6, [r3, #0]
 8005c86:	4854      	ldr	r0, [pc, #336]	; (8005dd8 <_printf_i+0x244>)
 8005c88:	2f6f      	cmp	r7, #111	; 0x6f
 8005c8a:	bf0c      	ite	eq
 8005c8c:	2308      	moveq	r3, #8
 8005c8e:	230a      	movne	r3, #10
 8005c90:	2100      	movs	r1, #0
 8005c92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c96:	6865      	ldr	r5, [r4, #4]
 8005c98:	60a5      	str	r5, [r4, #8]
 8005c9a:	2d00      	cmp	r5, #0
 8005c9c:	bfa2      	ittt	ge
 8005c9e:	6821      	ldrge	r1, [r4, #0]
 8005ca0:	f021 0104 	bicge.w	r1, r1, #4
 8005ca4:	6021      	strge	r1, [r4, #0]
 8005ca6:	b90e      	cbnz	r6, 8005cac <_printf_i+0x118>
 8005ca8:	2d00      	cmp	r5, #0
 8005caa:	d04d      	beq.n	8005d48 <_printf_i+0x1b4>
 8005cac:	4615      	mov	r5, r2
 8005cae:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cb2:	fb03 6711 	mls	r7, r3, r1, r6
 8005cb6:	5dc7      	ldrb	r7, [r0, r7]
 8005cb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cbc:	4637      	mov	r7, r6
 8005cbe:	42bb      	cmp	r3, r7
 8005cc0:	460e      	mov	r6, r1
 8005cc2:	d9f4      	bls.n	8005cae <_printf_i+0x11a>
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d10b      	bne.n	8005ce0 <_printf_i+0x14c>
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	07de      	lsls	r6, r3, #31
 8005ccc:	d508      	bpl.n	8005ce0 <_printf_i+0x14c>
 8005cce:	6923      	ldr	r3, [r4, #16]
 8005cd0:	6861      	ldr	r1, [r4, #4]
 8005cd2:	4299      	cmp	r1, r3
 8005cd4:	bfde      	ittt	le
 8005cd6:	2330      	movle	r3, #48	; 0x30
 8005cd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cdc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005ce0:	1b52      	subs	r2, r2, r5
 8005ce2:	6122      	str	r2, [r4, #16]
 8005ce4:	f8cd a000 	str.w	sl, [sp]
 8005ce8:	464b      	mov	r3, r9
 8005cea:	aa03      	add	r2, sp, #12
 8005cec:	4621      	mov	r1, r4
 8005cee:	4640      	mov	r0, r8
 8005cf0:	f7ff fee2 	bl	8005ab8 <_printf_common>
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	d14c      	bne.n	8005d92 <_printf_i+0x1fe>
 8005cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cfc:	b004      	add	sp, #16
 8005cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d02:	4835      	ldr	r0, [pc, #212]	; (8005dd8 <_printf_i+0x244>)
 8005d04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d08:	6829      	ldr	r1, [r5, #0]
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d10:	6029      	str	r1, [r5, #0]
 8005d12:	061d      	lsls	r5, r3, #24
 8005d14:	d514      	bpl.n	8005d40 <_printf_i+0x1ac>
 8005d16:	07df      	lsls	r7, r3, #31
 8005d18:	bf44      	itt	mi
 8005d1a:	f043 0320 	orrmi.w	r3, r3, #32
 8005d1e:	6023      	strmi	r3, [r4, #0]
 8005d20:	b91e      	cbnz	r6, 8005d2a <_printf_i+0x196>
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	f023 0320 	bic.w	r3, r3, #32
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	2310      	movs	r3, #16
 8005d2c:	e7b0      	b.n	8005c90 <_printf_i+0xfc>
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	f043 0320 	orr.w	r3, r3, #32
 8005d34:	6023      	str	r3, [r4, #0]
 8005d36:	2378      	movs	r3, #120	; 0x78
 8005d38:	4828      	ldr	r0, [pc, #160]	; (8005ddc <_printf_i+0x248>)
 8005d3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d3e:	e7e3      	b.n	8005d08 <_printf_i+0x174>
 8005d40:	0659      	lsls	r1, r3, #25
 8005d42:	bf48      	it	mi
 8005d44:	b2b6      	uxthmi	r6, r6
 8005d46:	e7e6      	b.n	8005d16 <_printf_i+0x182>
 8005d48:	4615      	mov	r5, r2
 8005d4a:	e7bb      	b.n	8005cc4 <_printf_i+0x130>
 8005d4c:	682b      	ldr	r3, [r5, #0]
 8005d4e:	6826      	ldr	r6, [r4, #0]
 8005d50:	6961      	ldr	r1, [r4, #20]
 8005d52:	1d18      	adds	r0, r3, #4
 8005d54:	6028      	str	r0, [r5, #0]
 8005d56:	0635      	lsls	r5, r6, #24
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	d501      	bpl.n	8005d60 <_printf_i+0x1cc>
 8005d5c:	6019      	str	r1, [r3, #0]
 8005d5e:	e002      	b.n	8005d66 <_printf_i+0x1d2>
 8005d60:	0670      	lsls	r0, r6, #25
 8005d62:	d5fb      	bpl.n	8005d5c <_printf_i+0x1c8>
 8005d64:	8019      	strh	r1, [r3, #0]
 8005d66:	2300      	movs	r3, #0
 8005d68:	6123      	str	r3, [r4, #16]
 8005d6a:	4615      	mov	r5, r2
 8005d6c:	e7ba      	b.n	8005ce4 <_printf_i+0x150>
 8005d6e:	682b      	ldr	r3, [r5, #0]
 8005d70:	1d1a      	adds	r2, r3, #4
 8005d72:	602a      	str	r2, [r5, #0]
 8005d74:	681d      	ldr	r5, [r3, #0]
 8005d76:	6862      	ldr	r2, [r4, #4]
 8005d78:	2100      	movs	r1, #0
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	f7fa fa48 	bl	8000210 <memchr>
 8005d80:	b108      	cbz	r0, 8005d86 <_printf_i+0x1f2>
 8005d82:	1b40      	subs	r0, r0, r5
 8005d84:	6060      	str	r0, [r4, #4]
 8005d86:	6863      	ldr	r3, [r4, #4]
 8005d88:	6123      	str	r3, [r4, #16]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d90:	e7a8      	b.n	8005ce4 <_printf_i+0x150>
 8005d92:	6923      	ldr	r3, [r4, #16]
 8005d94:	462a      	mov	r2, r5
 8005d96:	4649      	mov	r1, r9
 8005d98:	4640      	mov	r0, r8
 8005d9a:	47d0      	blx	sl
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	d0ab      	beq.n	8005cf8 <_printf_i+0x164>
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	079b      	lsls	r3, r3, #30
 8005da4:	d413      	bmi.n	8005dce <_printf_i+0x23a>
 8005da6:	68e0      	ldr	r0, [r4, #12]
 8005da8:	9b03      	ldr	r3, [sp, #12]
 8005daa:	4298      	cmp	r0, r3
 8005dac:	bfb8      	it	lt
 8005dae:	4618      	movlt	r0, r3
 8005db0:	e7a4      	b.n	8005cfc <_printf_i+0x168>
 8005db2:	2301      	movs	r3, #1
 8005db4:	4632      	mov	r2, r6
 8005db6:	4649      	mov	r1, r9
 8005db8:	4640      	mov	r0, r8
 8005dba:	47d0      	blx	sl
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	d09b      	beq.n	8005cf8 <_printf_i+0x164>
 8005dc0:	3501      	adds	r5, #1
 8005dc2:	68e3      	ldr	r3, [r4, #12]
 8005dc4:	9903      	ldr	r1, [sp, #12]
 8005dc6:	1a5b      	subs	r3, r3, r1
 8005dc8:	42ab      	cmp	r3, r5
 8005dca:	dcf2      	bgt.n	8005db2 <_printf_i+0x21e>
 8005dcc:	e7eb      	b.n	8005da6 <_printf_i+0x212>
 8005dce:	2500      	movs	r5, #0
 8005dd0:	f104 0619 	add.w	r6, r4, #25
 8005dd4:	e7f5      	b.n	8005dc2 <_printf_i+0x22e>
 8005dd6:	bf00      	nop
 8005dd8:	08006065 	.word	0x08006065
 8005ddc:	08006076 	.word	0x08006076

08005de0 <_sbrk_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4d06      	ldr	r5, [pc, #24]	; (8005dfc <_sbrk_r+0x1c>)
 8005de4:	2300      	movs	r3, #0
 8005de6:	4604      	mov	r4, r0
 8005de8:	4608      	mov	r0, r1
 8005dea:	602b      	str	r3, [r5, #0]
 8005dec:	f7fb fa00 	bl	80011f0 <_sbrk>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	d102      	bne.n	8005dfa <_sbrk_r+0x1a>
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	b103      	cbz	r3, 8005dfa <_sbrk_r+0x1a>
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	20000264 	.word	0x20000264

08005e00 <__sread>:
 8005e00:	b510      	push	{r4, lr}
 8005e02:	460c      	mov	r4, r1
 8005e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e08:	f000 f8a0 	bl	8005f4c <_read_r>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	bfab      	itete	ge
 8005e10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e12:	89a3      	ldrhlt	r3, [r4, #12]
 8005e14:	181b      	addge	r3, r3, r0
 8005e16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e1a:	bfac      	ite	ge
 8005e1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e1e:	81a3      	strhlt	r3, [r4, #12]
 8005e20:	bd10      	pop	{r4, pc}

08005e22 <__swrite>:
 8005e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e26:	461f      	mov	r7, r3
 8005e28:	898b      	ldrh	r3, [r1, #12]
 8005e2a:	05db      	lsls	r3, r3, #23
 8005e2c:	4605      	mov	r5, r0
 8005e2e:	460c      	mov	r4, r1
 8005e30:	4616      	mov	r6, r2
 8005e32:	d505      	bpl.n	8005e40 <__swrite+0x1e>
 8005e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e38:	2302      	movs	r3, #2
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f000 f868 	bl	8005f10 <_lseek_r>
 8005e40:	89a3      	ldrh	r3, [r4, #12]
 8005e42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e4a:	81a3      	strh	r3, [r4, #12]
 8005e4c:	4632      	mov	r2, r6
 8005e4e:	463b      	mov	r3, r7
 8005e50:	4628      	mov	r0, r5
 8005e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e56:	f000 b817 	b.w	8005e88 <_write_r>

08005e5a <__sseek>:
 8005e5a:	b510      	push	{r4, lr}
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e62:	f000 f855 	bl	8005f10 <_lseek_r>
 8005e66:	1c43      	adds	r3, r0, #1
 8005e68:	89a3      	ldrh	r3, [r4, #12]
 8005e6a:	bf15      	itete	ne
 8005e6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e76:	81a3      	strheq	r3, [r4, #12]
 8005e78:	bf18      	it	ne
 8005e7a:	81a3      	strhne	r3, [r4, #12]
 8005e7c:	bd10      	pop	{r4, pc}

08005e7e <__sclose>:
 8005e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e82:	f000 b813 	b.w	8005eac <_close_r>
	...

08005e88 <_write_r>:
 8005e88:	b538      	push	{r3, r4, r5, lr}
 8005e8a:	4d07      	ldr	r5, [pc, #28]	; (8005ea8 <_write_r+0x20>)
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	4608      	mov	r0, r1
 8005e90:	4611      	mov	r1, r2
 8005e92:	2200      	movs	r2, #0
 8005e94:	602a      	str	r2, [r5, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	f7fa ff4a 	bl	8000d30 <_write>
 8005e9c:	1c43      	adds	r3, r0, #1
 8005e9e:	d102      	bne.n	8005ea6 <_write_r+0x1e>
 8005ea0:	682b      	ldr	r3, [r5, #0]
 8005ea2:	b103      	cbz	r3, 8005ea6 <_write_r+0x1e>
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	bd38      	pop	{r3, r4, r5, pc}
 8005ea8:	20000264 	.word	0x20000264

08005eac <_close_r>:
 8005eac:	b538      	push	{r3, r4, r5, lr}
 8005eae:	4d06      	ldr	r5, [pc, #24]	; (8005ec8 <_close_r+0x1c>)
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	4608      	mov	r0, r1
 8005eb6:	602b      	str	r3, [r5, #0]
 8005eb8:	f7fb f965 	bl	8001186 <_close>
 8005ebc:	1c43      	adds	r3, r0, #1
 8005ebe:	d102      	bne.n	8005ec6 <_close_r+0x1a>
 8005ec0:	682b      	ldr	r3, [r5, #0]
 8005ec2:	b103      	cbz	r3, 8005ec6 <_close_r+0x1a>
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	bd38      	pop	{r3, r4, r5, pc}
 8005ec8:	20000264 	.word	0x20000264

08005ecc <_fstat_r>:
 8005ecc:	b538      	push	{r3, r4, r5, lr}
 8005ece:	4d07      	ldr	r5, [pc, #28]	; (8005eec <_fstat_r+0x20>)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	4608      	mov	r0, r1
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	602b      	str	r3, [r5, #0]
 8005eda:	f7fb f960 	bl	800119e <_fstat>
 8005ede:	1c43      	adds	r3, r0, #1
 8005ee0:	d102      	bne.n	8005ee8 <_fstat_r+0x1c>
 8005ee2:	682b      	ldr	r3, [r5, #0]
 8005ee4:	b103      	cbz	r3, 8005ee8 <_fstat_r+0x1c>
 8005ee6:	6023      	str	r3, [r4, #0]
 8005ee8:	bd38      	pop	{r3, r4, r5, pc}
 8005eea:	bf00      	nop
 8005eec:	20000264 	.word	0x20000264

08005ef0 <_isatty_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4d06      	ldr	r5, [pc, #24]	; (8005f0c <_isatty_r+0x1c>)
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	4608      	mov	r0, r1
 8005efa:	602b      	str	r3, [r5, #0]
 8005efc:	f7fb f95f 	bl	80011be <_isatty>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d102      	bne.n	8005f0a <_isatty_r+0x1a>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	b103      	cbz	r3, 8005f0a <_isatty_r+0x1a>
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	20000264 	.word	0x20000264

08005f10 <_lseek_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	4d07      	ldr	r5, [pc, #28]	; (8005f30 <_lseek_r+0x20>)
 8005f14:	4604      	mov	r4, r0
 8005f16:	4608      	mov	r0, r1
 8005f18:	4611      	mov	r1, r2
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	602a      	str	r2, [r5, #0]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f7fb f958 	bl	80011d4 <_lseek>
 8005f24:	1c43      	adds	r3, r0, #1
 8005f26:	d102      	bne.n	8005f2e <_lseek_r+0x1e>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	b103      	cbz	r3, 8005f2e <_lseek_r+0x1e>
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	bd38      	pop	{r3, r4, r5, pc}
 8005f30:	20000264 	.word	0x20000264

08005f34 <__malloc_lock>:
 8005f34:	4801      	ldr	r0, [pc, #4]	; (8005f3c <__malloc_lock+0x8>)
 8005f36:	f7ff bb15 	b.w	8005564 <__retarget_lock_acquire_recursive>
 8005f3a:	bf00      	nop
 8005f3c:	20000258 	.word	0x20000258

08005f40 <__malloc_unlock>:
 8005f40:	4801      	ldr	r0, [pc, #4]	; (8005f48 <__malloc_unlock+0x8>)
 8005f42:	f7ff bb10 	b.w	8005566 <__retarget_lock_release_recursive>
 8005f46:	bf00      	nop
 8005f48:	20000258 	.word	0x20000258

08005f4c <_read_r>:
 8005f4c:	b538      	push	{r3, r4, r5, lr}
 8005f4e:	4d07      	ldr	r5, [pc, #28]	; (8005f6c <_read_r+0x20>)
 8005f50:	4604      	mov	r4, r0
 8005f52:	4608      	mov	r0, r1
 8005f54:	4611      	mov	r1, r2
 8005f56:	2200      	movs	r2, #0
 8005f58:	602a      	str	r2, [r5, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f7fb f8f6 	bl	800114c <_read>
 8005f60:	1c43      	adds	r3, r0, #1
 8005f62:	d102      	bne.n	8005f6a <_read_r+0x1e>
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	b103      	cbz	r3, 8005f6a <_read_r+0x1e>
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	bd38      	pop	{r3, r4, r5, pc}
 8005f6c:	20000264 	.word	0x20000264

08005f70 <_init>:
 8005f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f72:	bf00      	nop
 8005f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f76:	bc08      	pop	{r3}
 8005f78:	469e      	mov	lr, r3
 8005f7a:	4770      	bx	lr

08005f7c <_fini>:
 8005f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7e:	bf00      	nop
 8005f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f82:	bc08      	pop	{r3}
 8005f84:	469e      	mov	lr, r3
 8005f86:	4770      	bx	lr
