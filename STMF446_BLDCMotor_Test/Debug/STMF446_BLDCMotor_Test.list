
STMF446_BLDCMotor_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af84  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  0800b158  0800b158  0001b158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7b8  0800b7b8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7b8  0800b7b8  0001b7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7c0  0800b7c0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7c0  0800b7c0  0001b7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7c4  0800b7c4  0001b7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b7c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  200001e8  0800b9b0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  0800b9b0  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cceb  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f4b  00000000  00000000  0002cf03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002ee50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002f888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000332b  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccac  00000000  00000000  00033523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd2a5  00000000  00000000  000401cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010d474  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e00  00000000  00000000  0010d4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b13c 	.word	0x0800b13c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800b13c 	.word	0x0800b13c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <HAL_GPIO_EXTI_Callback>:
	uint16_t rxMsg;
	uint16_t txMsg;
}CANMessage;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
	//stepper 0 end stop senssor
	if(GPIO_Pin == GPIO_PIN_6 ){
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	2b40      	cmp	r3, #64	; 0x40
 8000f9a:	d11b      	bne.n	8000fd4 <HAL_GPIO_EXTI_Callback+0x48>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){	//end stop ONの時フラグを立てる
 8000f9c:	2140      	movs	r1, #64	; 0x40
 8000f9e:	480f      	ldr	r0, [pc, #60]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x50>)
 8000fa0:	f003 fdd2 	bl	8004b48 <HAL_GPIO_ReadPin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d106      	bne.n	8000fb8 <HAL_GPIO_EXTI_Callback+0x2c>
			home_position_state |= 1;
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000fb6:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 8000fb8:	2140      	movs	r1, #64	; 0x40
 8000fba:	4808      	ldr	r0, [pc, #32]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x50>)
 8000fbc:	f003 fdc4 	bl	8004b48 <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d006      	beq.n	8000fd4 <HAL_GPIO_EXTI_Callback+0x48>
			home_position_state &= ~1;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	f023 0301 	bic.w	r3, r3, #1
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000fd2:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	20000338 	.word	0x20000338

08000fe4 <EnterMotorMode>:
    data[6] = 0xFF;
    data[7] = 0xFE;
    //WriteAll();
    }

void EnterMotorMode(){
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
	data[0] = 0xFF;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <EnterMotorMode+0x40>)
 8000fea:	22ff      	movs	r2, #255	; 0xff
 8000fec:	701a      	strb	r2, [r3, #0]
    data[1] = 0xFF;
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <EnterMotorMode+0x40>)
 8000ff0:	22ff      	movs	r2, #255	; 0xff
 8000ff2:	705a      	strb	r2, [r3, #1]
    data[2] = 0xFF;
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <EnterMotorMode+0x40>)
 8000ff6:	22ff      	movs	r2, #255	; 0xff
 8000ff8:	709a      	strb	r2, [r3, #2]
    data[3] = 0xFF;
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <EnterMotorMode+0x40>)
 8000ffc:	22ff      	movs	r2, #255	; 0xff
 8000ffe:	70da      	strb	r2, [r3, #3]
    data[4] = 0xFF;
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <EnterMotorMode+0x40>)
 8001002:	22ff      	movs	r2, #255	; 0xff
 8001004:	711a      	strb	r2, [r3, #4]
    data[5] = 0xFF;
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <EnterMotorMode+0x40>)
 8001008:	22ff      	movs	r2, #255	; 0xff
 800100a:	715a      	strb	r2, [r3, #5]
    data[6] = 0xFF;
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <EnterMotorMode+0x40>)
 800100e:	22ff      	movs	r2, #255	; 0xff
 8001010:	719a      	strb	r2, [r3, #6]
    data[7] = 0xFC;
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <EnterMotorMode+0x40>)
 8001014:	22fc      	movs	r2, #252	; 0xfc
 8001016:	71da      	strb	r2, [r3, #7]
    //WriteAll();
    }
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	2000031c 	.word	0x2000031c

08001028 <ExitMotorMode>:

void ExitMotorMode(){
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
	data[0] = 0xFF;
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <ExitMotorMode+0x40>)
 800102e:	22ff      	movs	r2, #255	; 0xff
 8001030:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <ExitMotorMode+0x40>)
 8001034:	22ff      	movs	r2, #255	; 0xff
 8001036:	705a      	strb	r2, [r3, #1]
	data[2] = 0xFF;
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <ExitMotorMode+0x40>)
 800103a:	22ff      	movs	r2, #255	; 0xff
 800103c:	709a      	strb	r2, [r3, #2]
	data[3] = 0xFF;
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <ExitMotorMode+0x40>)
 8001040:	22ff      	movs	r2, #255	; 0xff
 8001042:	70da      	strb	r2, [r3, #3]
	data[4] = 0xFF;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <ExitMotorMode+0x40>)
 8001046:	22ff      	movs	r2, #255	; 0xff
 8001048:	711a      	strb	r2, [r3, #4]
	data[5] = 0xFF;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <ExitMotorMode+0x40>)
 800104c:	22ff      	movs	r2, #255	; 0xff
 800104e:	715a      	strb	r2, [r3, #5]
	data[6] = 0xFF;
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <ExitMotorMode+0x40>)
 8001052:	22ff      	movs	r2, #255	; 0xff
 8001054:	719a      	strb	r2, [r3, #6]
	data[7] = 0xFD;
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <ExitMotorMode+0x40>)
 8001058:	22fd      	movs	r2, #253	; 0xfd
 800105a:	71da      	strb	r2, [r3, #7]
    //WriteAll();
    }
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	2000031c 	.word	0x2000031c

0800106c <pack_cmd>:

void pack_cmd(float _p_des, float _v_des, float _kp, float _kd, float _t_ff){
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	; 0x38
 8001070:	af00      	add	r7, sp, #0
 8001072:	ed87 0a05 	vstr	s0, [r7, #20]
 8001076:	edc7 0a04 	vstr	s1, [r7, #16]
 800107a:	ed87 1a03 	vstr	s2, [r7, #12]
 800107e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001082:	ed87 2a01 	vstr	s4, [r7, #4]
	/// limit data to be within bounds ///
	float p_des = fminf(fmaxf(P_MIN, _p_des), P_MAX);
 8001086:	edd7 0a05 	vldr	s1, [r7, #20]
 800108a:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800108e:	f001 ff56 	bl	8002f3e <fmaxf>
 8001092:	eef0 7a40 	vmov.f32	s15, s0
 8001096:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 800109a:	eeb0 0a67 	vmov.f32	s0, s15
 800109e:	f001 ff6a 	bl	8002f76 <fminf>
 80010a2:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float v_des = fminf(fmaxf(V_MIN, _v_des), V_MAX);
 80010a6:	edd7 0a04 	vldr	s1, [r7, #16]
 80010aa:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8001208 <pack_cmd+0x19c>
 80010ae:	f001 ff46 	bl	8002f3e <fmaxf>
 80010b2:	eef0 7a40 	vmov.f32	s15, s0
 80010b6:	eddf 0a55 	vldr	s1, [pc, #340]	; 800120c <pack_cmd+0x1a0>
 80010ba:	eeb0 0a67 	vmov.f32	s0, s15
 80010be:	f001 ff5a 	bl	8002f76 <fminf>
 80010c2:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	float kp = fminf(fmaxf(KP_MIN, _kp), KP_MAX);
 80010c6:	edd7 0a03 	vldr	s1, [r7, #12]
 80010ca:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8001210 <pack_cmd+0x1a4>
 80010ce:	f001 ff36 	bl	8002f3e <fmaxf>
 80010d2:	eef0 7a40 	vmov.f32	s15, s0
 80010d6:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8001214 <pack_cmd+0x1a8>
 80010da:	eeb0 0a67 	vmov.f32	s0, s15
 80010de:	f001 ff4a 	bl	8002f76 <fminf>
 80010e2:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float kd = fminf(fmaxf(KD_MIN, _kd), KD_MAX);
 80010e6:	edd7 0a02 	vldr	s1, [r7, #8]
 80010ea:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8001210 <pack_cmd+0x1a4>
 80010ee:	f001 ff26 	bl	8002f3e <fmaxf>
 80010f2:	eef0 7a40 	vmov.f32	s15, s0
 80010f6:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80010fa:	eeb0 0a67 	vmov.f32	s0, s15
 80010fe:	f001 ff3a 	bl	8002f76 <fminf>
 8001102:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	float t_ff = fminf(fmaxf(T_MIN, _t_ff), T_MAX);
 8001106:	edd7 0a01 	vldr	s1, [r7, #4]
 800110a:	eebb 0a02 	vmov.f32	s0, #178	; 0xc1900000 -18.0
 800110e:	f001 ff16 	bl	8002f3e <fmaxf>
 8001112:	eef0 7a40 	vmov.f32	s15, s0
 8001116:	eef3 0a02 	vmov.f32	s1, #50	; 0x41900000  18.0
 800111a:	eeb0 0a67 	vmov.f32	s0, s15
 800111e:	f001 ff2a 	bl	8002f76 <fminf>
 8001122:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	/// convert floats to unsigned ints ///
	uint16_t p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);
 8001126:	2010      	movs	r0, #16
 8001128:	eeb2 1a09 	vmov.f32	s2, #41	; 0x41480000  12.5
 800112c:	eefa 0a09 	vmov.f32	s1, #169	; 0xc1480000 -12.5
 8001130:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001134:	f001 ff3b 	bl	8002fae <float_to_uint>
 8001138:	4603      	mov	r3, r0
 800113a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t v_int = float_to_uint(v_des, V_MIN, V_MAX, 12);
 800113c:	200c      	movs	r0, #12
 800113e:	ed9f 1a33 	vldr	s2, [pc, #204]	; 800120c <pack_cmd+0x1a0>
 8001142:	eddf 0a31 	vldr	s1, [pc, #196]	; 8001208 <pack_cmd+0x19c>
 8001146:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 800114a:	f001 ff30 	bl	8002fae <float_to_uint>
 800114e:	4603      	mov	r3, r0
 8001150:	843b      	strh	r3, [r7, #32]
	uint16_t kp_int = float_to_uint(kp, KP_MIN, KP_MAX, 12);
 8001152:	200c      	movs	r0, #12
 8001154:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8001214 <pack_cmd+0x1a8>
 8001158:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8001210 <pack_cmd+0x1a4>
 800115c:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001160:	f001 ff25 	bl	8002fae <float_to_uint>
 8001164:	4603      	mov	r3, r0
 8001166:	83fb      	strh	r3, [r7, #30]
	uint16_t kd_int = float_to_uint(kd, KD_MIN, KD_MAX, 12);
 8001168:	200c      	movs	r0, #12
 800116a:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 800116e:	eddf 0a28 	vldr	s1, [pc, #160]	; 8001210 <pack_cmd+0x1a4>
 8001172:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001176:	f001 ff1a 	bl	8002fae <float_to_uint>
 800117a:	4603      	mov	r3, r0
 800117c:	83bb      	strh	r3, [r7, #28]
	uint16_t t_int = float_to_uint(t_ff, T_MIN, T_MAX, 12);
 800117e:	200c      	movs	r0, #12
 8001180:	eeb3 1a02 	vmov.f32	s2, #50	; 0x41900000  18.0
 8001184:	eefb 0a02 	vmov.f32	s1, #178	; 0xc1900000 -18.0
 8001188:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800118c:	f001 ff0f 	bl	8002fae <float_to_uint>
 8001190:	4603      	mov	r3, r0
 8001192:	837b      	strh	r3, [r7, #26]
	/// pack ints into the can buffer ///
	data[0] = p_int>>8;
 8001194:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001196:	0a1b      	lsrs	r3, r3, #8
 8001198:	b29b      	uxth	r3, r3
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <pack_cmd+0x1ac>)
 800119e:	701a      	strb	r2, [r3, #0]
	data[1] = p_int&0xFF;
 80011a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <pack_cmd+0x1ac>)
 80011a6:	705a      	strb	r2, [r3, #1]
	data[2] = v_int>>4;
 80011a8:	8c3b      	ldrh	r3, [r7, #32]
 80011aa:	091b      	lsrs	r3, r3, #4
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <pack_cmd+0x1ac>)
 80011b2:	709a      	strb	r2, [r3, #2]
	data[3] = ((v_int&0xF)<<4)|(kp_int>>8);
 80011b4:	8c3b      	ldrh	r3, [r7, #32]
 80011b6:	011b      	lsls	r3, r3, #4
 80011b8:	b25a      	sxtb	r2, r3
 80011ba:	8bfb      	ldrh	r3, [r7, #30]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	b29b      	uxth	r3, r3
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <pack_cmd+0x1ac>)
 80011ca:	70da      	strb	r2, [r3, #3]
	data[4] = kp_int&0xFF;
 80011cc:	8bfb      	ldrh	r3, [r7, #30]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <pack_cmd+0x1ac>)
 80011d2:	711a      	strb	r2, [r3, #4]
	data[5] = kd_int>>4;
 80011d4:	8bbb      	ldrh	r3, [r7, #28]
 80011d6:	091b      	lsrs	r3, r3, #4
 80011d8:	b29b      	uxth	r3, r3
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <pack_cmd+0x1ac>)
 80011de:	715a      	strb	r2, [r3, #5]
	data[6] = ((kd_int&0xF)<<4)|(t_int>>8);
 80011e0:	8bbb      	ldrh	r3, [r7, #28]
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	b25a      	sxtb	r2, r3
 80011e6:	8b7b      	ldrh	r3, [r7, #26]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <pack_cmd+0x1ac>)
 80011f6:	719a      	strb	r2, [r3, #6]
	data[7] = t_int&0xFF;
 80011f8:	8b7b      	ldrh	r3, [r7, #26]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <pack_cmd+0x1ac>)
 80011fe:	71da      	strb	r2, [r3, #7]
}
 8001200:	bf00      	nop
 8001202:	3738      	adds	r7, #56	; 0x38
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	c2820000 	.word	0xc2820000
 800120c:	42820000 	.word	0x42820000
 8001210:	00000000 	.word	0x00000000
 8001214:	43fa0000 	.word	0x43fa0000
 8001218:	2000031c 	.word	0x2000031c

0800121c <BLDC_CANTx>:
void BLDC_CANTx(){
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
	TxHeader.StdId=canid;
 8001222:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <BLDC_CANTx+0xa8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a28      	ldr	r2, [pc, #160]	; (80012c8 <BLDC_CANTx+0xac>)
 8001228:	6013      	str	r3, [r2, #0]
	TxHeader.IDE = CAN_ID_STD;
 800122a:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <BLDC_CANTx+0xac>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 0x08;
 8001230:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <BLDC_CANTx+0xac>)
 8001232:	2208      	movs	r2, #8
 8001234:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8001236:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <BLDC_CANTx+0xac>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 800123c:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <BLDC_CANTx+0xac>)
 800123e:	2200      	movs	r2, #0
 8001240:	751a      	strb	r2, [r3, #20]
//	HAL_CAN_AddTxMessage(&hcan1,&TxHeader,data,&TxMailbox);
//	HAL_Delay(10);

//	int i = 0;
	int count=0;
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) ){
 8001246:	4821      	ldr	r0, [pc, #132]	; (80012cc <BLDC_CANTx+0xb0>)
 8001248:	f002 fdb4 	bl	8003db4 <HAL_CAN_GetTxMailboxesFreeLevel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d02e      	beq.n	80012b0 <BLDC_CANTx+0x94>
		HAL_CAN_AddTxMessage(&hcan1,&TxHeader,data,&TxMailbox);
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <BLDC_CANTx+0xb4>)
 8001254:	4a1f      	ldr	r2, [pc, #124]	; (80012d4 <BLDC_CANTx+0xb8>)
 8001256:	491c      	ldr	r1, [pc, #112]	; (80012c8 <BLDC_CANTx+0xac>)
 8001258:	481c      	ldr	r0, [pc, #112]	; (80012cc <BLDC_CANTx+0xb0>)
 800125a:	f002 fcd0 	bl	8003bfe <HAL_CAN_AddTxMessage>
		HAL_Delay(10);
 800125e:	200a      	movs	r0, #10
 8001260:	f002 fa40 	bl	80036e4 <HAL_Delay>
		while(!nextcan_flag){
 8001264:	e01a      	b.n	800129c <BLDC_CANTx+0x80>
			HAL_CAN_AddTxMessage(&hcan1,&TxHeader,data,&TxMailbox);
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <BLDC_CANTx+0xb4>)
 8001268:	4a1a      	ldr	r2, [pc, #104]	; (80012d4 <BLDC_CANTx+0xb8>)
 800126a:	4917      	ldr	r1, [pc, #92]	; (80012c8 <BLDC_CANTx+0xac>)
 800126c:	4817      	ldr	r0, [pc, #92]	; (80012cc <BLDC_CANTx+0xb0>)
 800126e:	f002 fcc6 	bl	8003bfe <HAL_CAN_AddTxMessage>
			HAL_Delay(10);
 8001272:	200a      	movs	r0, #10
 8001274:	f002 fa36 	bl	80036e4 <HAL_Delay>
			count++;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3301      	adds	r3, #1
 800127c:	607b      	str	r3, [r7, #4]
			if(count==10){
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b0a      	cmp	r3, #10
 8001282:	d10b      	bne.n	800129c <BLDC_CANTx+0x80>
				nextcan_flag=1;
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <BLDC_CANTx+0xbc>)
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
				get_can_flag=1;
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <BLDC_CANTx+0xc0>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
				HAL_CAN_Stop (&hcan1);
 8001290:	480e      	ldr	r0, [pc, #56]	; (80012cc <BLDC_CANTx+0xb0>)
 8001292:	f002 fc6b 	bl	8003b6c <HAL_CAN_Stop>
				//HAL_CAN_AbortTxRequest(&hcan1,TxMailbox);
				HAL_CAN_Start(&hcan1);
 8001296:	480d      	ldr	r0, [pc, #52]	; (80012cc <BLDC_CANTx+0xb0>)
 8001298:	f002 fc24 	bl	8003ae4 <HAL_CAN_Start>
		while(!nextcan_flag){
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <BLDC_CANTx+0xbc>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0e0      	beq.n	8001266 <BLDC_CANTx+0x4a>
			}
		}
		nextcan_flag=0;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <BLDC_CANTx+0xbc>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
		count=0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
	}else{
		nextcan_flag=0;
		get_can_flag=1;
	}
}
 80012ae:	e005      	b.n	80012bc <BLDC_CANTx+0xa0>
		nextcan_flag=0;
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <BLDC_CANTx+0xbc>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
		get_can_flag=1;
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <BLDC_CANTx+0xc0>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	701a      	strb	r2, [r3, #0]
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000334 	.word	0x20000334
 80012c8:	200002c0 	.word	0x200002c0
 80012cc:	20000204 	.word	0x20000204
 80012d0:	20000330 	.word	0x20000330
 80012d4:	2000031c 	.word	0x2000031c
 80012d8:	2000033b 	.word	0x2000033b
 80012dc:	2000033a 	.word	0x2000033a

080012e0 <unpack_reply>:

void unpack_reply(){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
    /// unpack ints from can buffer ///
    uint16_t id = data[0];
 80012e6:	4b3e      	ldr	r3, [pc, #248]	; (80013e0 <unpack_reply+0x100>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	82fb      	strh	r3, [r7, #22]
    uint16_t p_int = (data[1]<<8)|data[2];
 80012ec:	4b3c      	ldr	r3, [pc, #240]	; (80013e0 <unpack_reply+0x100>)
 80012ee:	785b      	ldrb	r3, [r3, #1]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	4b3a      	ldr	r3, [pc, #232]	; (80013e0 <unpack_reply+0x100>)
 80012f6:	789b      	ldrb	r3, [r3, #2]
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	4313      	orrs	r3, r2
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	82bb      	strh	r3, [r7, #20]
    uint16_t v_int = (data[3]<<4)|(data[4]>>4);
 8001300:	4b37      	ldr	r3, [pc, #220]	; (80013e0 <unpack_reply+0x100>)
 8001302:	78db      	ldrb	r3, [r3, #3]
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	b21a      	sxth	r2, r3
 8001308:	4b35      	ldr	r3, [pc, #212]	; (80013e0 <unpack_reply+0x100>)
 800130a:	791b      	ldrb	r3, [r3, #4]
 800130c:	091b      	lsrs	r3, r3, #4
 800130e:	b2db      	uxtb	r3, r3
 8001310:	b21b      	sxth	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	b21b      	sxth	r3, r3
 8001316:	827b      	strh	r3, [r7, #18]
    uint16_t i_int = ((data[4]&0xF)<<8)|data[5];
 8001318:	4b31      	ldr	r3, [pc, #196]	; (80013e0 <unpack_reply+0x100>)
 800131a:	791b      	ldrb	r3, [r3, #4]
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	b21b      	sxth	r3, r3
 8001320:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001324:	b21a      	sxth	r2, r3
 8001326:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <unpack_reply+0x100>)
 8001328:	795b      	ldrb	r3, [r3, #5]
 800132a:	b21b      	sxth	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	b21b      	sxth	r3, r3
 8001330:	823b      	strh	r3, [r7, #16]

    p_getintdata=p_int;
 8001332:	4a2c      	ldr	r2, [pc, #176]	; (80013e4 <unpack_reply+0x104>)
 8001334:	8abb      	ldrh	r3, [r7, #20]
 8001336:	8013      	strh	r3, [r2, #0]
    /// convert uints to floats ///
    float p = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001338:	8abb      	ldrh	r3, [r7, #20]
 800133a:	2110      	movs	r1, #16
 800133c:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 8001340:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 8001344:	4618      	mov	r0, r3
 8001346:	f001 fe65 	bl	8003014 <uint_to_float>
 800134a:	ed87 0a03 	vstr	s0, [r7, #12]
    float v = uint_to_float(v_int, V_MIN, V_MAX, 12);
 800134e:	8a7b      	ldrh	r3, [r7, #18]
 8001350:	210c      	movs	r1, #12
 8001352:	eddf 0a25 	vldr	s1, [pc, #148]	; 80013e8 <unpack_reply+0x108>
 8001356:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80013ec <unpack_reply+0x10c>
 800135a:	4618      	mov	r0, r3
 800135c:	f001 fe5a 	bl	8003014 <uint_to_float>
 8001360:	ed87 0a02 	vstr	s0, [r7, #8]
    float t = uint_to_float(i_int, -T_MAX, T_MAX, 12);
 8001364:	8a3b      	ldrh	r3, [r7, #16]
 8001366:	210c      	movs	r1, #12
 8001368:	eef3 0a02 	vmov.f32	s1, #50	; 0x41900000  18.0
 800136c:	eebb 0a02 	vmov.f32	s0, #178	; 0xc1900000 -18.0
 8001370:	4618      	mov	r0, r3
 8001372:	f001 fe4f 	bl	8003014 <uint_to_float>
 8001376:	ed87 0a01 	vstr	s0, [r7, #4]
    p_getdata=p;
 800137a:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <unpack_reply+0x110>)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6013      	str	r3, [r2, #0]

    if(id==0x01){
 8001380:	8afb      	ldrh	r3, [r7, #22]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d108      	bne.n	8001398 <unpack_reply+0xb8>
        p_getdata_s1=(-p_getdata);
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <unpack_reply+0x110>)
 8001388:	edd3 7a00 	vldr	s15, [r3]
 800138c:	eef1 7a67 	vneg.f32	s15, s15
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <unpack_reply+0x114>)
 8001392:	edc3 7a00 	vstr	s15, [r3]
    }else if(id==0x02)
    {
        p_getdata_s2=(-(p_getdata+M_PI));
    }
}
 8001396:	e01a      	b.n	80013ce <unpack_reply+0xee>
    }else if(id==0x02)
 8001398:	8afb      	ldrh	r3, [r7, #22]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d117      	bne.n	80013ce <unpack_reply+0xee>
        p_getdata_s2=(-(p_getdata+M_PI));
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <unpack_reply+0x110>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f8f0 	bl	8000588 <__aeabi_f2d>
 80013a8:	a30b      	add	r3, pc, #44	; (adr r3, 80013d8 <unpack_reply+0xf8>)
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	f7fe ff8d 	bl	80002cc <__adddf3>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f7ff fc15 	bl	8000be8 <__aeabi_d2f>
 80013be:	4603      	mov	r3, r0
 80013c0:	ee07 3a90 	vmov	s15, r3
 80013c4:	eef1 7a67 	vneg.f32	s15, s15
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <unpack_reply+0x118>)
 80013ca:	edc3 7a00 	vstr	s15, [r3]
}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	54442d18 	.word	0x54442d18
 80013dc:	400921fb 	.word	0x400921fb
 80013e0:	2000031c 	.word	0x2000031c
 80013e4:	20000354 	.word	0x20000354
 80013e8:	42820000 	.word	0x42820000
 80013ec:	c2820000 	.word	0xc2820000
 80013f0:	20000340 	.word	0x20000340
 80013f4:	20000344 	.word	0x20000344
 80013f8:	20000348 	.word	0x20000348

080013fc <sent_position>:

void sent_position(){
 80013fc:	b5b0      	push	{r4, r5, r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
	float current_coordinate[2];
	int16_t x1;
	int16_t y1;
	int16_t x2;
	int16_t y2;
	BLDC_FK(p_getdata_s1,p_getdata_s2,&current_coordinate[0],&current_coordinate[1]);
 8001402:	4b62      	ldr	r3, [pc, #392]	; (800158c <sent_position+0x190>)
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	4b61      	ldr	r3, [pc, #388]	; (8001590 <sent_position+0x194>)
 800140a:	ed93 7a00 	vldr	s14, [r3]
 800140e:	463b      	mov	r3, r7
 8001410:	1d1a      	adds	r2, r3, #4
 8001412:	463b      	mov	r3, r7
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	eef0 0a47 	vmov.f32	s1, s14
 800141c:	eeb0 0a67 	vmov.f32	s0, s15
 8001420:	f001 faf4 	bl	8002a0c <BLDC_FK>

	x1=round(l1*cos(p_getdata_s1));
 8001424:	4b5b      	ldr	r3, [pc, #364]	; (8001594 <sent_position+0x198>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f8ad 	bl	8000588 <__aeabi_f2d>
 800142e:	4604      	mov	r4, r0
 8001430:	460d      	mov	r5, r1
 8001432:	4b56      	ldr	r3, [pc, #344]	; (800158c <sent_position+0x190>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f8a6 	bl	8000588 <__aeabi_f2d>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	ec43 2b10 	vmov	d0, r2, r3
 8001444:	f007 ffd0 	bl	80093e8 <cos>
 8001448:	ec53 2b10 	vmov	r2, r3, d0
 800144c:	4620      	mov	r0, r4
 800144e:	4629      	mov	r1, r5
 8001450:	f7ff f8f2 	bl	8000638 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	ec43 2b17 	vmov	d7, r2, r3
 800145c:	eeb0 0a47 	vmov.f32	s0, s14
 8001460:	eef0 0a67 	vmov.f32	s1, s15
 8001464:	f008 f814 	bl	8009490 <round>
 8001468:	ec53 2b10 	vmov	r2, r3, d0
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	f7ff fb92 	bl	8000b98 <__aeabi_d2iz>
 8001474:	4603      	mov	r3, r0
 8001476:	81fb      	strh	r3, [r7, #14]
	y1=round(l1*sin(p_getdata_s1));
 8001478:	4b46      	ldr	r3, [pc, #280]	; (8001594 <sent_position+0x198>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f883 	bl	8000588 <__aeabi_f2d>
 8001482:	4604      	mov	r4, r0
 8001484:	460d      	mov	r5, r1
 8001486:	4b41      	ldr	r3, [pc, #260]	; (800158c <sent_position+0x190>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f87c 	bl	8000588 <__aeabi_f2d>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	ec43 2b10 	vmov	d0, r2, r3
 8001498:	f008 f842 	bl	8009520 <sin>
 800149c:	ec53 2b10 	vmov	r2, r3, d0
 80014a0:	4620      	mov	r0, r4
 80014a2:	4629      	mov	r1, r5
 80014a4:	f7ff f8c8 	bl	8000638 <__aeabi_dmul>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	ec43 2b17 	vmov	d7, r2, r3
 80014b0:	eeb0 0a47 	vmov.f32	s0, s14
 80014b4:	eef0 0a67 	vmov.f32	s1, s15
 80014b8:	f007 ffea 	bl	8009490 <round>
 80014bc:	ec53 2b10 	vmov	r2, r3, d0
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	f7ff fb68 	bl	8000b98 <__aeabi_d2iz>
 80014c8:	4603      	mov	r3, r0
 80014ca:	81bb      	strh	r3, [r7, #12]
	x2=round(current_coordinate[0]);	//手先座標系から機械座標系への変換
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff f85a 	bl	8000588 <__aeabi_f2d>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	ec43 2b10 	vmov	d0, r2, r3
 80014dc:	f007 ffd8 	bl	8009490 <round>
 80014e0:	ec53 2b10 	vmov	r2, r3, d0
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fb56 	bl	8000b98 <__aeabi_d2iz>
 80014ec:	4603      	mov	r3, r0
 80014ee:	817b      	strh	r3, [r7, #10]
	y2=round(current_coordinate[1]);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f848 	bl	8000588 <__aeabi_f2d>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	ec43 2b10 	vmov	d0, r2, r3
 8001500:	f007 ffc6 	bl	8009490 <round>
 8001504:	ec53 2b10 	vmov	r2, r3, d0
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f7ff fb44 	bl	8000b98 <__aeabi_d2iz>
 8001510:	4603      	mov	r3, r0
 8001512:	813b      	strh	r3, [r7, #8]
	TxData[0]=0xAA;
 8001514:	4b20      	ldr	r3, [pc, #128]	; (8001598 <sent_position+0x19c>)
 8001516:	22aa      	movs	r2, #170	; 0xaa
 8001518:	701a      	strb	r2, [r3, #0]
	TxData[1]=x1&0xFF;
 800151a:	89fb      	ldrh	r3, [r7, #14]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <sent_position+0x19c>)
 8001520:	705a      	strb	r2, [r3, #1]
	TxData[2]=(x1>>8)&0xFF;
 8001522:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001526:	121b      	asrs	r3, r3, #8
 8001528:	b21b      	sxth	r3, r3
 800152a:	b2da      	uxtb	r2, r3
 800152c:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <sent_position+0x19c>)
 800152e:	709a      	strb	r2, [r3, #2]
	TxData[3]=y1&0xFF;
 8001530:	89bb      	ldrh	r3, [r7, #12]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <sent_position+0x19c>)
 8001536:	70da      	strb	r2, [r3, #3]
	TxData[4]=(y1>>8)&0xFF;
 8001538:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800153c:	121b      	asrs	r3, r3, #8
 800153e:	b21b      	sxth	r3, r3
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <sent_position+0x19c>)
 8001544:	711a      	strb	r2, [r3, #4]
	TxData[5]=x2&0xFF;
 8001546:	897b      	ldrh	r3, [r7, #10]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <sent_position+0x19c>)
 800154c:	715a      	strb	r2, [r3, #5]
	TxData[6]=(x2>>8)&0xFF;
 800154e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001552:	121b      	asrs	r3, r3, #8
 8001554:	b21b      	sxth	r3, r3
 8001556:	b2da      	uxtb	r2, r3
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <sent_position+0x19c>)
 800155a:	719a      	strb	r2, [r3, #6]
	TxData[7]=y2&0xFF;
 800155c:	893b      	ldrh	r3, [r7, #8]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <sent_position+0x19c>)
 8001562:	71da      	strb	r2, [r3, #7]
	TxData[8]=(y2>>8)&0xFF;
 8001564:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001568:	121b      	asrs	r3, r3, #8
 800156a:	b21b      	sxth	r3, r3
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <sent_position+0x19c>)
 8001570:	721a      	strb	r2, [r3, #8]
	TxData[19]=0xAA;
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <sent_position+0x19c>)
 8001574:	22aa      	movs	r2, #170	; 0xaa
 8001576:	74da      	strb	r2, [r3, #19]
	HAL_UART_Transmit(&huart2,TxData,sizeof(TxData),100);
 8001578:	2364      	movs	r3, #100	; 0x64
 800157a:	2214      	movs	r2, #20
 800157c:	4906      	ldr	r1, [pc, #24]	; (8001598 <sent_position+0x19c>)
 800157e:	4807      	ldr	r0, [pc, #28]	; (800159c <sent_position+0x1a0>)
 8001580:	f004 f961 	bl	8005846 <HAL_UART_Transmit>
}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bdb0      	pop	{r4, r5, r7, pc}
 800158c:	20000344 	.word	0x20000344
 8001590:	20000348 	.word	0x20000348
 8001594:	20000000 	.word	0x20000000
 8001598:	200002f4 	.word	0x200002f4
 800159c:	20000254 	.word	0x20000254

080015a0 <BLDC_MotorRotate>:

void BLDC_MotorRotate(){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b094      	sub	sp, #80	; 0x50
 80015a4:	af00      	add	r7, sp, #0
	float count_rad=0.05;
 80015a6:	4ba6      	ldr	r3, [pc, #664]	; (8001840 <BLDC_MotorRotate+0x2a0>)
 80015a8:	623b      	str	r3, [r7, #32]
	float set_Kp=40.0;
 80015aa:	4ba6      	ldr	r3, [pc, #664]	; (8001844 <BLDC_MotorRotate+0x2a4>)
 80015ac:	61fb      	str	r3, [r7, #28]
	float setMax_kp=200.0;
 80015ae:	4ba6      	ldr	r3, [pc, #664]	; (8001848 <BLDC_MotorRotate+0x2a8>)
 80015b0:	61bb      	str	r3, [r7, #24]
	uint8_t count_end=0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint32_t canid_select_far;
	uint32_t canid_select_near;
	float far_dis_dir=0;
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	643b      	str	r3, [r7, #64]	; 0x40
	float near_dis_dir=0;
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	float running_pos[2];
	float far_dis;
	float near_dis;
	float i=0.0;
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	633b      	str	r3, [r7, #48]	; 0x30
	float m2_startpos;
	float m1_target_pos;
	float m2_target_pos;
	float far_getpos;
	float near_getpos;
	canid=0x01;
 80015ca:	4ba0      	ldr	r3, [pc, #640]	; (800184c <BLDC_MotorRotate+0x2ac>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 3.0, 0.0);	//現在の場所の所得
 80015d0:	ed9f 2a9f 	vldr	s4, [pc, #636]	; 8001850 <BLDC_MotorRotate+0x2b0>
 80015d4:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 80015d8:	ed9f 1a9d 	vldr	s2, [pc, #628]	; 8001850 <BLDC_MotorRotate+0x2b0>
 80015dc:	eddf 0a9c 	vldr	s1, [pc, #624]	; 8001850 <BLDC_MotorRotate+0x2b0>
 80015e0:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8001850 <BLDC_MotorRotate+0x2b0>
 80015e4:	f7ff fd42 	bl	800106c <pack_cmd>
	BLDC_CANTx();
 80015e8:	f7ff fe18 	bl	800121c <BLDC_CANTx>
	unpack_reply();
 80015ec:	f7ff fe78 	bl	80012e0 <unpack_reply>
	m1_startpos=p_getdata;
 80015f0:	4b98      	ldr	r3, [pc, #608]	; (8001854 <BLDC_MotorRotate+0x2b4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	617b      	str	r3, [r7, #20]
	m1_target_pos=-t_position[0];
 80015f6:	4b98      	ldr	r3, [pc, #608]	; (8001858 <BLDC_MotorRotate+0x2b8>)
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	eef1 7a67 	vneg.f32	s15, s15
 8001600:	edc7 7a04 	vstr	s15, [r7, #16]
	running_pos[0]=fabsf(m1_target_pos-m1_startpos);	//目標地点ー現在の地点＝移動距離
 8001604:	ed97 7a04 	vldr	s14, [r7, #16]
 8001608:	edd7 7a05 	vldr	s15, [r7, #20]
 800160c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001610:	eef0 7ae7 	vabs.f32	s15, s15
 8001614:	edc7 7a00 	vstr	s15, [r7]
	canid=0x02;
 8001618:	4b8c      	ldr	r3, [pc, #560]	; (800184c <BLDC_MotorRotate+0x2ac>)
 800161a:	2202      	movs	r2, #2
 800161c:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 4.0, 0.0);	//現在の場所の所得
 800161e:	ed9f 2a8c 	vldr	s4, [pc, #560]	; 8001850 <BLDC_MotorRotate+0x2b0>
 8001622:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8001626:	ed9f 1a8a 	vldr	s2, [pc, #552]	; 8001850 <BLDC_MotorRotate+0x2b0>
 800162a:	eddf 0a89 	vldr	s1, [pc, #548]	; 8001850 <BLDC_MotorRotate+0x2b0>
 800162e:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8001850 <BLDC_MotorRotate+0x2b0>
 8001632:	f7ff fd1b 	bl	800106c <pack_cmd>
	BLDC_CANTx();
 8001636:	f7ff fdf1 	bl	800121c <BLDC_CANTx>
	unpack_reply();
 800163a:	f7ff fe51 	bl	80012e0 <unpack_reply>
	m2_target_pos=(-t_position[1]+M_PI);
 800163e:	4b86      	ldr	r3, [pc, #536]	; (8001858 <BLDC_MotorRotate+0x2b8>)
 8001640:	edd3 7a01 	vldr	s15, [r3, #4]
 8001644:	eef1 7a67 	vneg.f32	s15, s15
 8001648:	ee17 3a90 	vmov	r3, s15
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff9b 	bl	8000588 <__aeabi_f2d>
 8001652:	a379      	add	r3, pc, #484	; (adr r3, 8001838 <BLDC_MotorRotate+0x298>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f7fe fe38 	bl	80002cc <__adddf3>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f7ff fac0 	bl	8000be8 <__aeabi_d2f>
 8001668:	4603      	mov	r3, r0
 800166a:	60fb      	str	r3, [r7, #12]
	m2_startpos=p_getdata;
 800166c:	4b79      	ldr	r3, [pc, #484]	; (8001854 <BLDC_MotorRotate+0x2b4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60bb      	str	r3, [r7, #8]
	running_pos[1]=fabsf(m2_target_pos-m2_startpos);
 8001672:	ed97 7a03 	vldr	s14, [r7, #12]
 8001676:	edd7 7a02 	vldr	s15, [r7, #8]
 800167a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800167e:	eef0 7ae7 	vabs.f32	s15, s15
 8001682:	edc7 7a01 	vstr	s15, [r7, #4]

	if(running_pos[0]>running_pos[1]){
 8001686:	ed97 7a00 	vldr	s14, [r7]
 800168a:	edd7 7a01 	vldr	s15, [r7, #4]
 800168e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001696:	dd2c      	ble.n	80016f2 <BLDC_MotorRotate+0x152>
		far_dis=running_pos[0];
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	63bb      	str	r3, [r7, #56]	; 0x38
		near_dis=running_pos[1];
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	637b      	str	r3, [r7, #52]	; 0x34
		canid_select_far=0x01;
 80016a0:	2301      	movs	r3, #1
 80016a2:	64bb      	str	r3, [r7, #72]	; 0x48
		canid_select_near=0x02;
 80016a4:	2302      	movs	r3, #2
 80016a6:	647b      	str	r3, [r7, #68]	; 0x44
		far_getpos=m1_startpos;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		near_getpos=m2_startpos;
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
		far_dis_dir=((m1_target_pos-m1_startpos)>=0)?1:-1;
 80016b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80016b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c4:	db02      	blt.n	80016cc <BLDC_MotorRotate+0x12c>
 80016c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80016ca:	e000      	b.n	80016ce <BLDC_MotorRotate+0x12e>
 80016cc:	4b63      	ldr	r3, [pc, #396]	; (800185c <BLDC_MotorRotate+0x2bc>)
 80016ce:	643b      	str	r3, [r7, #64]	; 0x40
		near_dis_dir=((m2_target_pos-(m2_startpos))>=0)?1:-1;
 80016d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80016d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80016d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e4:	db02      	blt.n	80016ec <BLDC_MotorRotate+0x14c>
 80016e6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80016ea:	e000      	b.n	80016ee <BLDC_MotorRotate+0x14e>
 80016ec:	4b5b      	ldr	r3, [pc, #364]	; (800185c <BLDC_MotorRotate+0x2bc>)
 80016ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016f0:	e02b      	b.n	800174a <BLDC_MotorRotate+0x1aa>

	}else{
		far_dis=running_pos[1];
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	63bb      	str	r3, [r7, #56]	; 0x38
		near_dis=running_pos[0];
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	637b      	str	r3, [r7, #52]	; 0x34
		canid_select_far=0x02;
 80016fa:	2302      	movs	r3, #2
 80016fc:	64bb      	str	r3, [r7, #72]	; 0x48
		canid_select_near=0x01;
 80016fe:	2301      	movs	r3, #1
 8001700:	647b      	str	r3, [r7, #68]	; 0x44
		far_getpos=m2_startpos;
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
		near_getpos=m1_startpos;
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
		far_dis_dir=((m2_target_pos-m2_startpos)>=0)?1:-1;
 800170a:	ed97 7a03 	vldr	s14, [r7, #12]
 800170e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001712:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001716:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171e:	db02      	blt.n	8001726 <BLDC_MotorRotate+0x186>
 8001720:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001724:	e000      	b.n	8001728 <BLDC_MotorRotate+0x188>
 8001726:	4b4d      	ldr	r3, [pc, #308]	; (800185c <BLDC_MotorRotate+0x2bc>)
 8001728:	643b      	str	r3, [r7, #64]	; 0x40
		near_dis_dir=((m1_target_pos-m1_startpos)>=0)?1:-1;
 800172a:	ed97 7a04 	vldr	s14, [r7, #16]
 800172e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001736:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800173a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173e:	db02      	blt.n	8001746 <BLDC_MotorRotate+0x1a6>
 8001740:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001744:	e000      	b.n	8001748 <BLDC_MotorRotate+0x1a8>
 8001746:	4b45      	ldr	r3, [pc, #276]	; (800185c <BLDC_MotorRotate+0x2bc>)
 8001748:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (far_dis>count_rad){
 800174a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800174e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175a:	dd67      	ble.n	800182c <BLDC_MotorRotate+0x28c>
		while(!count_end){
 800175c:	e062      	b.n	8001824 <BLDC_MotorRotate+0x284>
			i+=(far_dis_dir*count_rad);
 800175e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001762:	edd7 7a08 	vldr	s15, [r7, #32]
 8001766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800176a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800176e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001772:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			if(fabsf(i)<far_dis){
 8001776:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800177a:	eef0 7ae7 	vabs.f32	s15, s15
 800177e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001782:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178a:	dd48      	ble.n	800181e <BLDC_MotorRotate+0x27e>
				canid=canid_select_far;
 800178c:	4a2f      	ldr	r2, [pc, #188]	; (800184c <BLDC_MotorRotate+0x2ac>)
 800178e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001790:	6013      	str	r3, [r2, #0]
				pack_cmd(far_getpos+i, 0.0, set_Kp, 2.0, 0.0);	//現在の場所の所得
 8001792:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001796:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800179a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179e:	ed9f 2a2c 	vldr	s4, [pc, #176]	; 8001850 <BLDC_MotorRotate+0x2b0>
 80017a2:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 80017a6:	ed97 1a07 	vldr	s2, [r7, #28]
 80017aa:	eddf 0a29 	vldr	s1, [pc, #164]	; 8001850 <BLDC_MotorRotate+0x2b0>
 80017ae:	eeb0 0a67 	vmov.f32	s0, s15
 80017b2:	f7ff fc5b 	bl	800106c <pack_cmd>
				BLDC_CANTx();
 80017b6:	f7ff fd31 	bl	800121c <BLDC_CANTx>
				unpack_reply();
 80017ba:	f7ff fd91 	bl	80012e0 <unpack_reply>
				HAL_Delay(20);
 80017be:	2014      	movs	r0, #20
 80017c0:	f001 ff90 	bl	80036e4 <HAL_Delay>
				canid=canid_select_near;
 80017c4:	4a21      	ldr	r2, [pc, #132]	; (800184c <BLDC_MotorRotate+0x2ac>)
 80017c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017c8:	6013      	str	r3, [r2, #0]
				pack_cmd(near_getpos+fabsf(i)*(near_dis/far_dis)*near_dis_dir, 0.0, set_Kp, 2.0, 0.0);	//現在の場所の所得
 80017ca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80017ce:	eeb0 7ae7 	vabs.f32	s14, s15
 80017d2:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 80017d6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80017da:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80017de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017e2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80017e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f2:	ed9f 2a17 	vldr	s4, [pc, #92]	; 8001850 <BLDC_MotorRotate+0x2b0>
 80017f6:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 80017fa:	ed97 1a07 	vldr	s2, [r7, #28]
 80017fe:	eddf 0a14 	vldr	s1, [pc, #80]	; 8001850 <BLDC_MotorRotate+0x2b0>
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	f7ff fc31 	bl	800106c <pack_cmd>
				BLDC_CANTx();
 800180a:	f7ff fd07 	bl	800121c <BLDC_CANTx>
				unpack_reply();
 800180e:	f7ff fd67 	bl	80012e0 <unpack_reply>
				sent_position();
 8001812:	f7ff fdf3 	bl	80013fc <sent_position>
				HAL_Delay(20);
 8001816:	2014      	movs	r0, #20
 8001818:	f001 ff64 	bl	80036e4 <HAL_Delay>
 800181c:	e002      	b.n	8001824 <BLDC_MotorRotate+0x284>
			}
			else{
				count_end=1;
 800181e:	2301      	movs	r3, #1
 8001820:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		while(!count_end){
 8001824:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001828:	2b00      	cmp	r3, #0
 800182a:	d098      	beq.n	800175e <BLDC_MotorRotate+0x1be>
			}
		}
	}
	for(int i=1;i<=50;i++){
 800182c:	2301      	movs	r3, #1
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
 8001830:	e076      	b.n	8001920 <BLDC_MotorRotate+0x380>
 8001832:	bf00      	nop
 8001834:	f3af 8000 	nop.w
 8001838:	54442d18 	.word	0x54442d18
 800183c:	400921fb 	.word	0x400921fb
 8001840:	3d4ccccd 	.word	0x3d4ccccd
 8001844:	42200000 	.word	0x42200000
 8001848:	43480000 	.word	0x43480000
 800184c:	20000334 	.word	0x20000334
 8001850:	00000000 	.word	0x00000000
 8001854:	20000340 	.word	0x20000340
 8001858:	2000034c 	.word	0x2000034c
 800185c:	bf800000 	.word	0xbf800000
		if(set_Kp+i*10<=setMax_kp){
 8001860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	ee07 3a90 	vmov	s15, r3
 800186e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001872:	edd7 7a07 	vldr	s15, [r7, #28]
 8001876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800187a:	ed97 7a06 	vldr	s14, [r7, #24]
 800187e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001886:	db46      	blt.n	8001916 <BLDC_MotorRotate+0x376>
			canid=0x01;
 8001888:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <BLDC_MotorRotate+0x394>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]
			pack_cmd(m1_target_pos, 0.0, set_Kp+i*10, 3.0, 0.0);	//現在の場所の所得
 800188e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	ee07 3a90 	vmov	s15, r3
 800189c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80018a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a8:	ed9f 2a23 	vldr	s4, [pc, #140]	; 8001938 <BLDC_MotorRotate+0x398>
 80018ac:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 80018b0:	eeb0 1a67 	vmov.f32	s2, s15
 80018b4:	eddf 0a20 	vldr	s1, [pc, #128]	; 8001938 <BLDC_MotorRotate+0x398>
 80018b8:	ed97 0a04 	vldr	s0, [r7, #16]
 80018bc:	f7ff fbd6 	bl	800106c <pack_cmd>
			BLDC_CANTx();
 80018c0:	f7ff fcac 	bl	800121c <BLDC_CANTx>
			unpack_reply();
 80018c4:	f7ff fd0c 	bl	80012e0 <unpack_reply>
			HAL_Delay(20);
 80018c8:	2014      	movs	r0, #20
 80018ca:	f001 ff0b 	bl	80036e4 <HAL_Delay>
			canid=0x02;
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <BLDC_MotorRotate+0x394>)
 80018d0:	2202      	movs	r2, #2
 80018d2:	601a      	str	r2, [r3, #0]
			pack_cmd(m2_target_pos, 0.0, set_Kp+i*10, 3.0, 0.0);	//現在の場所の所得
 80018d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	ee07 3a90 	vmov	s15, r3
 80018e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80018ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ee:	ed9f 2a12 	vldr	s4, [pc, #72]	; 8001938 <BLDC_MotorRotate+0x398>
 80018f2:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 80018f6:	eeb0 1a67 	vmov.f32	s2, s15
 80018fa:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8001938 <BLDC_MotorRotate+0x398>
 80018fe:	ed97 0a03 	vldr	s0, [r7, #12]
 8001902:	f7ff fbb3 	bl	800106c <pack_cmd>
			BLDC_CANTx();
 8001906:	f7ff fc89 	bl	800121c <BLDC_CANTx>
			unpack_reply();
 800190a:	f7ff fce9 	bl	80012e0 <unpack_reply>
			HAL_Delay(20);
 800190e:	2014      	movs	r0, #20
 8001910:	f001 fee8 	bl	80036e4 <HAL_Delay>
 8001914:	e001      	b.n	800191a <BLDC_MotorRotate+0x37a>
		}else{
			i=50;
 8001916:	2332      	movs	r3, #50	; 0x32
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=1;i<=50;i++){
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	3301      	adds	r3, #1
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	2b32      	cmp	r3, #50	; 0x32
 8001924:	dd9c      	ble.n	8001860 <BLDC_MotorRotate+0x2c0>
		}
	}
	sent_position();
 8001926:	f7ff fd69 	bl	80013fc <sent_position>

}
 800192a:	bf00      	nop
 800192c:	3750      	adds	r7, #80	; 0x50
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000334 	.word	0x20000334
 8001938:	00000000 	.word	0x00000000

0800193c <BLDC_M1Rotate>:
void BLDC_M1Rotate(){
 800193c:	b580      	push	{r7, lr}
 800193e:	b08c      	sub	sp, #48	; 0x30
 8001940:	af00      	add	r7, sp, #0
	float m1_startpos;
	float m1_target_pos;
	float i=0.0;
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
	float m1_dis;
	float set_Kp=40.0;
 8001948:	4b7c      	ldr	r3, [pc, #496]	; (8001b3c <BLDC_M1Rotate+0x200>)
 800194a:	623b      	str	r3, [r7, #32]
	float setMax_kp=200.0;
 800194c:	4b7c      	ldr	r3, [pc, #496]	; (8001b40 <BLDC_M1Rotate+0x204>)
 800194e:	61fb      	str	r3, [r7, #28]
	float count_rad=0.05;
 8001950:	4b7c      	ldr	r3, [pc, #496]	; (8001b44 <BLDC_M1Rotate+0x208>)
 8001952:	61bb      	str	r3, [r7, #24]
	int m1_dir;
	int count=10;
 8001954:	230a      	movs	r3, #10
 8001956:	617b      	str	r3, [r7, #20]
	uint8_t count_end=0;
 8001958:	2300      	movs	r3, #0
 800195a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	canid=0x02;
 800195e:	4b7a      	ldr	r3, [pc, #488]	; (8001b48 <BLDC_M1Rotate+0x20c>)
 8001960:	2202      	movs	r2, #2
 8001962:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 4.0, 0.0);	//現在の場所の所得
 8001964:	ed9f 2a79 	vldr	s4, [pc, #484]	; 8001b4c <BLDC_M1Rotate+0x210>
 8001968:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 800196c:	ed9f 1a77 	vldr	s2, [pc, #476]	; 8001b4c <BLDC_M1Rotate+0x210>
 8001970:	eddf 0a76 	vldr	s1, [pc, #472]	; 8001b4c <BLDC_M1Rotate+0x210>
 8001974:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8001b4c <BLDC_M1Rotate+0x210>
 8001978:	f7ff fb78 	bl	800106c <pack_cmd>
	BLDC_CANTx();
 800197c:	f7ff fc4e 	bl	800121c <BLDC_CANTx>
	unpack_reply();
 8001980:	f7ff fcae 	bl	80012e0 <unpack_reply>
	pack_cmd(p_getdata, 0.0, 200.0, 4.0, 0.0);	//現在の場所の所得
 8001984:	4b72      	ldr	r3, [pc, #456]	; (8001b50 <BLDC_M1Rotate+0x214>)
 8001986:	edd3 7a00 	vldr	s15, [r3]
 800198a:	ed9f 2a70 	vldr	s4, [pc, #448]	; 8001b4c <BLDC_M1Rotate+0x210>
 800198e:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8001992:	ed9f 1a70 	vldr	s2, [pc, #448]	; 8001b54 <BLDC_M1Rotate+0x218>
 8001996:	eddf 0a6d 	vldr	s1, [pc, #436]	; 8001b4c <BLDC_M1Rotate+0x210>
 800199a:	eeb0 0a67 	vmov.f32	s0, s15
 800199e:	f7ff fb65 	bl	800106c <pack_cmd>
	BLDC_CANTx();
 80019a2:	f7ff fc3b 	bl	800121c <BLDC_CANTx>
	unpack_reply();
 80019a6:	f7ff fc9b 	bl	80012e0 <unpack_reply>
	canid=0x01;
 80019aa:	4b67      	ldr	r3, [pc, #412]	; (8001b48 <BLDC_M1Rotate+0x20c>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 4.0, 0.0);	//現在の場所の所得
 80019b0:	ed9f 2a66 	vldr	s4, [pc, #408]	; 8001b4c <BLDC_M1Rotate+0x210>
 80019b4:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 80019b8:	ed9f 1a64 	vldr	s2, [pc, #400]	; 8001b4c <BLDC_M1Rotate+0x210>
 80019bc:	eddf 0a63 	vldr	s1, [pc, #396]	; 8001b4c <BLDC_M1Rotate+0x210>
 80019c0:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8001b4c <BLDC_M1Rotate+0x210>
 80019c4:	f7ff fb52 	bl	800106c <pack_cmd>
	BLDC_CANTx();
 80019c8:	f7ff fc28 	bl	800121c <BLDC_CANTx>
	unpack_reply();
 80019cc:	f7ff fc88 	bl	80012e0 <unpack_reply>

	m1_startpos=p_getdata;
 80019d0:	4b5f      	ldr	r3, [pc, #380]	; (8001b50 <BLDC_M1Rotate+0x214>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	613b      	str	r3, [r7, #16]
	m1_target_pos=-t_position[0];
 80019d6:	4b60      	ldr	r3, [pc, #384]	; (8001b58 <BLDC_M1Rotate+0x21c>)
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	eef1 7a67 	vneg.f32	s15, s15
 80019e0:	edc7 7a03 	vstr	s15, [r7, #12]
	m1_dis=fabsf(m1_target_pos-m1_startpos);	//目標地点ー現在の地点＝移動距離
 80019e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80019e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80019ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f0:	eef0 7ae7 	vabs.f32	s15, s15
 80019f4:	edc7 7a02 	vstr	s15, [r7, #8]
	m1_dir=((m1_target_pos-m1_startpos)>=0)?1:-1;
 80019f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80019fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0c:	db01      	blt.n	8001a12 <BLDC_M1Rotate+0xd6>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e001      	b.n	8001a16 <BLDC_M1Rotate+0xda>
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a16:	607b      	str	r3, [r7, #4]
	i=count_rad;
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(count_rad<m1_dis){
 8001a1c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a20:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2c:	d53e      	bpl.n	8001aac <BLDC_M1Rotate+0x170>
		while(!count_end){
 8001a2e:	e039      	b.n	8001aa4 <BLDC_M1Rotate+0x168>
			i+=(m1_dir*count_rad);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	ee07 3a90 	vmov	s15, r3
 8001a36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a42:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a4a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			if(fabsf(i)<m1_dis){
 8001a4e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a52:	eef0 7ae7 	vabs.f32	s15, s15
 8001a56:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a62:	dd1c      	ble.n	8001a9e <BLDC_M1Rotate+0x162>
				canid=0x01;
 8001a64:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <BLDC_M1Rotate+0x20c>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
				pack_cmd(m1_startpos+i, 0.0, set_Kp, 2.0, 0.0);	//現在の場所の所得
 8001a6a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a6e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a76:	ed9f 2a35 	vldr	s4, [pc, #212]	; 8001b4c <BLDC_M1Rotate+0x210>
 8001a7a:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8001a7e:	ed97 1a08 	vldr	s2, [r7, #32]
 8001a82:	eddf 0a32 	vldr	s1, [pc, #200]	; 8001b4c <BLDC_M1Rotate+0x210>
 8001a86:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8a:	f7ff faef 	bl	800106c <pack_cmd>
				BLDC_CANTx();
 8001a8e:	f7ff fbc5 	bl	800121c <BLDC_CANTx>
				sent_position();
 8001a92:	f7ff fcb3 	bl	80013fc <sent_position>
				HAL_Delay(40);
 8001a96:	2028      	movs	r0, #40	; 0x28
 8001a98:	f001 fe24 	bl	80036e4 <HAL_Delay>
 8001a9c:	e002      	b.n	8001aa4 <BLDC_M1Rotate+0x168>
			}else{
				count_end=1;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		while(!count_end){
 8001aa4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0c1      	beq.n	8001a30 <BLDC_M1Rotate+0xf4>
			}
		}
	}
	for(int i=1;i<=50;i++){
 8001aac:	2301      	movs	r3, #1
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab0:	e03a      	b.n	8001b28 <BLDC_M1Rotate+0x1ec>
			if(set_Kp+i*10<=setMax_kp){
 8001ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	ee07 3a90 	vmov	s15, r3
 8001ac0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001acc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ad0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad8:	db21      	blt.n	8001b1e <BLDC_M1Rotate+0x1e2>
				canid=0x01;
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <BLDC_M1Rotate+0x20c>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
				pack_cmd(m1_target_pos, 0.0, set_Kp+i*10, 3.0, 0.0);	//現在の場所の所得
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	ee07 3a90 	vmov	s15, r3
 8001aee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001afa:	ed9f 2a14 	vldr	s4, [pc, #80]	; 8001b4c <BLDC_M1Rotate+0x210>
 8001afe:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8001b02:	eeb0 1a67 	vmov.f32	s2, s15
 8001b06:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001b4c <BLDC_M1Rotate+0x210>
 8001b0a:	ed97 0a03 	vldr	s0, [r7, #12]
 8001b0e:	f7ff faad 	bl	800106c <pack_cmd>
				BLDC_CANTx();
 8001b12:	f7ff fb83 	bl	800121c <BLDC_CANTx>
				HAL_Delay(20);
 8001b16:	2014      	movs	r0, #20
 8001b18:	f001 fde4 	bl	80036e4 <HAL_Delay>
 8001b1c:	e001      	b.n	8001b22 <BLDC_M1Rotate+0x1e6>
			}else{
				i=50;
 8001b1e:	2332      	movs	r3, #50	; 0x32
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=1;i<=50;i++){
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	3301      	adds	r3, #1
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	2b32      	cmp	r3, #50	; 0x32
 8001b2c:	ddc1      	ble.n	8001ab2 <BLDC_M1Rotate+0x176>
			}
		}
	sent_position();
 8001b2e:	f7ff fc65 	bl	80013fc <sent_position>
}
 8001b32:	bf00      	nop
 8001b34:	3730      	adds	r7, #48	; 0x30
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	42200000 	.word	0x42200000
 8001b40:	43480000 	.word	0x43480000
 8001b44:	3d4ccccd 	.word	0x3d4ccccd
 8001b48:	20000334 	.word	0x20000334
 8001b4c:	00000000 	.word	0x00000000
 8001b50:	20000340 	.word	0x20000340
 8001b54:	43480000 	.word	0x43480000
 8001b58:	2000034c 	.word	0x2000034c
 8001b5c:	00000000 	.word	0x00000000

08001b60 <BLDC_M2Rotate>:
void BLDC_M2Rotate(){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
	float m2_startpos;
	float m2_target_pos;
	float i=0.0;
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
	float m2_dis;
	float set_Kp=40.0;
 8001b6c:	4b88      	ldr	r3, [pc, #544]	; (8001d90 <BLDC_M2Rotate+0x230>)
 8001b6e:	61bb      	str	r3, [r7, #24]
	float setMax_kp=200.0;
 8001b70:	4b88      	ldr	r3, [pc, #544]	; (8001d94 <BLDC_M2Rotate+0x234>)
 8001b72:	617b      	str	r3, [r7, #20]
	float count_rad=0.05;
 8001b74:	4b88      	ldr	r3, [pc, #544]	; (8001d98 <BLDC_M2Rotate+0x238>)
 8001b76:	613b      	str	r3, [r7, #16]
	int m2_dir;
	uint8_t count_end=0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	canid=0x01;
 8001b7e:	4b87      	ldr	r3, [pc, #540]	; (8001d9c <BLDC_M2Rotate+0x23c>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 4.0, 0.0);	//現在の場所の所得
 8001b84:	ed9f 2a86 	vldr	s4, [pc, #536]	; 8001da0 <BLDC_M2Rotate+0x240>
 8001b88:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8001b8c:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8001da0 <BLDC_M2Rotate+0x240>
 8001b90:	eddf 0a83 	vldr	s1, [pc, #524]	; 8001da0 <BLDC_M2Rotate+0x240>
 8001b94:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8001da0 <BLDC_M2Rotate+0x240>
 8001b98:	f7ff fa68 	bl	800106c <pack_cmd>
	BLDC_CANTx();
 8001b9c:	f7ff fb3e 	bl	800121c <BLDC_CANTx>
	unpack_reply();
 8001ba0:	f7ff fb9e 	bl	80012e0 <unpack_reply>
	pack_cmd(p_getdata, 0.0, 200.0, 4.0, 0.0);	//現在の場所の所得
 8001ba4:	4b7f      	ldr	r3, [pc, #508]	; (8001da4 <BLDC_M2Rotate+0x244>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	ed9f 2a7d 	vldr	s4, [pc, #500]	; 8001da0 <BLDC_M2Rotate+0x240>
 8001bae:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8001bb2:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 8001da8 <BLDC_M2Rotate+0x248>
 8001bb6:	eddf 0a7a 	vldr	s1, [pc, #488]	; 8001da0 <BLDC_M2Rotate+0x240>
 8001bba:	eeb0 0a67 	vmov.f32	s0, s15
 8001bbe:	f7ff fa55 	bl	800106c <pack_cmd>
	BLDC_CANTx();
 8001bc2:	f7ff fb2b 	bl	800121c <BLDC_CANTx>
	unpack_reply();
 8001bc6:	f7ff fb8b 	bl	80012e0 <unpack_reply>
	canid=0x02;
 8001bca:	4b74      	ldr	r3, [pc, #464]	; (8001d9c <BLDC_M2Rotate+0x23c>)
 8001bcc:	2202      	movs	r2, #2
 8001bce:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 4.0, 0.0);	//現在の場所の所得
 8001bd0:	ed9f 2a73 	vldr	s4, [pc, #460]	; 8001da0 <BLDC_M2Rotate+0x240>
 8001bd4:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8001bd8:	ed9f 1a71 	vldr	s2, [pc, #452]	; 8001da0 <BLDC_M2Rotate+0x240>
 8001bdc:	eddf 0a70 	vldr	s1, [pc, #448]	; 8001da0 <BLDC_M2Rotate+0x240>
 8001be0:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8001da0 <BLDC_M2Rotate+0x240>
 8001be4:	f7ff fa42 	bl	800106c <pack_cmd>
	BLDC_CANTx();
 8001be8:	f7ff fb18 	bl	800121c <BLDC_CANTx>
	unpack_reply();
 8001bec:	f7ff fb78 	bl	80012e0 <unpack_reply>
	m2_startpos=p_getdata;
 8001bf0:	4b6c      	ldr	r3, [pc, #432]	; (8001da4 <BLDC_M2Rotate+0x244>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60fb      	str	r3, [r7, #12]
	m2_target_pos=(-t_position[1]+M_PI);
 8001bf6:	4b6d      	ldr	r3, [pc, #436]	; (8001dac <BLDC_M2Rotate+0x24c>)
 8001bf8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bfc:	eef1 7a67 	vneg.f32	s15, s15
 8001c00:	ee17 3a90 	vmov	r3, s15
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fcbf 	bl	8000588 <__aeabi_f2d>
 8001c0a:	a35f      	add	r3, pc, #380	; (adr r3, 8001d88 <BLDC_M2Rotate+0x228>)
 8001c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c10:	f7fe fb5c 	bl	80002cc <__adddf3>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f7fe ffe4 	bl	8000be8 <__aeabi_d2f>
 8001c20:	4603      	mov	r3, r0
 8001c22:	60bb      	str	r3, [r7, #8]
	m2_dis=fabsf((m2_target_pos-m2_startpos));
 8001c24:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c28:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c30:	eef0 7ae7 	vabs.f32	s15, s15
 8001c34:	edc7 7a01 	vstr	s15, [r7, #4]
	m2_dir=((m2_target_pos-m2_startpos)>=0)?1:-1;
 8001c38:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4c:	db01      	blt.n	8001c52 <BLDC_M2Rotate+0xf2>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e001      	b.n	8001c56 <BLDC_M2Rotate+0xf6>
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c56:	603b      	str	r3, [r7, #0]

	i=count_rad;
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
	if(count_rad<m2_dis){
 8001c5c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c60:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6c:	d542      	bpl.n	8001cf4 <BLDC_M2Rotate+0x194>
		while(!count_end){
 8001c6e:	e03d      	b.n	8001cec <BLDC_M2Rotate+0x18c>
			i+=(m2_dir*count_rad);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	ee07 3a90 	vmov	s15, r3
 8001c76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c82:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			if(fabsf(i)<m2_dis){
 8001c8e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c92:	eef0 7ae7 	vabs.f32	s15, s15
 8001c96:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca2:	dd20      	ble.n	8001ce6 <BLDC_M2Rotate+0x186>
				canid=0x02;
 8001ca4:	4b3d      	ldr	r3, [pc, #244]	; (8001d9c <BLDC_M2Rotate+0x23c>)
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	601a      	str	r2, [r3, #0]
				pack_cmd(m2_startpos+i, 0.0, set_Kp, 2.0, 0.0);	//現在の場所の所得
 8001caa:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb6:	ed9f 2a3a 	vldr	s4, [pc, #232]	; 8001da0 <BLDC_M2Rotate+0x240>
 8001cba:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8001cbe:	ed97 1a06 	vldr	s2, [r7, #24]
 8001cc2:	eddf 0a37 	vldr	s1, [pc, #220]	; 8001da0 <BLDC_M2Rotate+0x240>
 8001cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cca:	f7ff f9cf 	bl	800106c <pack_cmd>
				BLDC_CANTx();
 8001cce:	f7ff faa5 	bl	800121c <BLDC_CANTx>
				p_getdata_s2=p_getdata;
 8001cd2:	4b34      	ldr	r3, [pc, #208]	; (8001da4 <BLDC_M2Rotate+0x244>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a36      	ldr	r2, [pc, #216]	; (8001db0 <BLDC_M2Rotate+0x250>)
 8001cd8:	6013      	str	r3, [r2, #0]
				sent_position();
 8001cda:	f7ff fb8f 	bl	80013fc <sent_position>
				HAL_Delay(40);
 8001cde:	2028      	movs	r0, #40	; 0x28
 8001ce0:	f001 fd00 	bl	80036e4 <HAL_Delay>
 8001ce4:	e002      	b.n	8001cec <BLDC_M2Rotate+0x18c>
			}else{
				count_end=1;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		while(!count_end){
 8001cec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0bd      	beq.n	8001c70 <BLDC_M2Rotate+0x110>
			}
		}
	}

	for(int i=1;i<=50;i++){
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	e03a      	b.n	8001d70 <BLDC_M2Rotate+0x210>
			if(set_Kp+i*10<=setMax_kp){
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	ee07 3a90 	vmov	s15, r3
 8001d08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d14:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d20:	db21      	blt.n	8001d66 <BLDC_M2Rotate+0x206>
				canid=0x02;
 8001d22:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <BLDC_M2Rotate+0x23c>)
 8001d24:	2202      	movs	r2, #2
 8001d26:	601a      	str	r2, [r3, #0]
				pack_cmd(m2_target_pos, 0.0, set_Kp+i*10, 3.0, 0.0);	//現在の場所の所得
 8001d28:	69fa      	ldr	r2, [r7, #28]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d42:	ed9f 2a17 	vldr	s4, [pc, #92]	; 8001da0 <BLDC_M2Rotate+0x240>
 8001d46:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8001d4a:	eeb0 1a67 	vmov.f32	s2, s15
 8001d4e:	eddf 0a14 	vldr	s1, [pc, #80]	; 8001da0 <BLDC_M2Rotate+0x240>
 8001d52:	ed97 0a02 	vldr	s0, [r7, #8]
 8001d56:	f7ff f989 	bl	800106c <pack_cmd>
				BLDC_CANTx();
 8001d5a:	f7ff fa5f 	bl	800121c <BLDC_CANTx>
				HAL_Delay(20);
 8001d5e:	2014      	movs	r0, #20
 8001d60:	f001 fcc0 	bl	80036e4 <HAL_Delay>
 8001d64:	e001      	b.n	8001d6a <BLDC_M2Rotate+0x20a>
			}else{
				i=50;
 8001d66:	2332      	movs	r3, #50	; 0x32
 8001d68:	61fb      	str	r3, [r7, #28]
	for(int i=1;i<=50;i++){
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b32      	cmp	r3, #50	; 0x32
 8001d74:	ddc1      	ble.n	8001cfa <BLDC_M2Rotate+0x19a>
			}
		}
	sent_position();
 8001d76:	f7ff fb41 	bl	80013fc <sent_position>
	count_end=0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
}
 8001d80:	bf00      	nop
 8001d82:	3728      	adds	r7, #40	; 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	54442d18 	.word	0x54442d18
 8001d8c:	400921fb 	.word	0x400921fb
 8001d90:	42200000 	.word	0x42200000
 8001d94:	43480000 	.word	0x43480000
 8001d98:	3d4ccccd 	.word	0x3d4ccccd
 8001d9c:	20000334 	.word	0x20000334
 8001da0:	00000000 	.word	0x00000000
 8001da4:	20000340 	.word	0x20000340
 8001da8:	43480000 	.word	0x43480000
 8001dac:	2000034c 	.word	0x2000034c
 8001db0:	20000348 	.word	0x20000348

08001db4 <command_judgment>:

void command_judgment(uint8_t *ModeSelect){
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	int modeflag_count=0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<buffersize ;i++){
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	72fb      	strb	r3, [r7, #11]
 8001dc4:	e015      	b.n	8001df2 <command_judgment+0x3e>
		ModeSelect[i]= ~(ModeSelect[i]);
 8001dc6:	7afb      	ldrb	r3, [r7, #11]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	7afb      	ldrb	r3, [r7, #11]
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	440b      	add	r3, r1
 8001dd4:	43d2      	mvns	r2, r2
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	701a      	strb	r2, [r3, #0]
		if(ModeSelect[i]==0){
 8001dda:	7afb      	ldrb	r3, [r7, #11]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d102      	bne.n	8001dec <command_judgment+0x38>
			modeflag_count++;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3301      	adds	r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<buffersize ;i++){
 8001dec:	7afb      	ldrb	r3, [r7, #11]
 8001dee:	3301      	adds	r3, #1
 8001df0:	72fb      	strb	r3, [r7, #11]
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <command_judgment+0x7c>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	7afa      	ldrb	r2, [r7, #11]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d3e4      	bcc.n	8001dc6 <command_judgment+0x12>
			}
		}
	if(modeflag_count<(buffersize-3)){	//動作モード
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <command_judgment+0x7c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	3b03      	subs	r3, #3
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	da03      	bge.n	8001e10 <command_judgment+0x5c>
		selectmode_flag=0;
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <command_judgment+0x80>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
	}
	else if(modeflag_count==(buffersize-3)){	//コマンドモード,9byte ModeSelectが0だったら
		selectmode_flag=1;
	}
}
 8001e0e:	e008      	b.n	8001e22 <command_judgment+0x6e>
	else if(modeflag_count==(buffersize-3)){	//コマンドモード,9byte ModeSelectが0だったら
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <command_judgment+0x7c>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	3b03      	subs	r3, #3
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d102      	bne.n	8001e22 <command_judgment+0x6e>
		selectmode_flag=1;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <command_judgment+0x80>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	701a      	strb	r2, [r3, #0]
}
 8001e22:	bf00      	nop
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000008 	.word	0x20000008
 8001e34:	2000033c 	.word	0x2000033c

08001e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	ed2d 8b02 	vpush	{d8}
 8001e3e:	b0cc      	sub	sp, #304	; 0x130
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e42:	f001 fbdd 	bl	8003600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e46:	f000 fc43 	bl	80026d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e4a:	f000 fd47 	bl	80028dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001e4e:	f000 fd1b 	bl	8002888 <MX_USART2_UART_Init>
  MX_CAN2_Init();
 8001e52:	f000 fce1 	bl	8002818 <MX_CAN2_Init>
  MX_CAN1_Init();
 8001e56:	f000 fca7 	bl	80027a8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t Init_flag=0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)!=1){	//リミットスイッチON→待機状態
 8001e60:	2120      	movs	r1, #32
 8001e62:	48b7      	ldr	r0, [pc, #732]	; (8002140 <main+0x308>)
 8001e64:	f002 fe70 	bl	8004b48 <HAL_GPIO_ReadPin>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d003      	beq.n	8001e76 <main+0x3e>
	  home_position_state=1;
 8001e6e:	4bb5      	ldr	r3, [pc, #724]	; (8002144 <main+0x30c>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
 8001e74:	e002      	b.n	8001e7c <main+0x44>
  }else{
	  home_position_state=0;
 8001e76:	4bb3      	ldr	r3, [pc, #716]	; (8002144 <main+0x30c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
  }
sFilterConfig.FilterBank = 0;
 8001e7c:	4bb2      	ldr	r3, [pc, #712]	; (8002148 <main+0x310>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001e82:	4bb1      	ldr	r3, [pc, #708]	; (8002148 <main+0x310>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001e88:	4baf      	ldr	r3, [pc, #700]	; (8002148 <main+0x310>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	61da      	str	r2, [r3, #28]
sFilterConfig.FilterIdHigh = 0x0000;
 8001e8e:	4bae      	ldr	r3, [pc, #696]	; (8002148 <main+0x310>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
sFilterConfig.FilterIdLow = 0x0000;
 8001e94:	4bac      	ldr	r3, [pc, #688]	; (8002148 <main+0x310>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	605a      	str	r2, [r3, #4]
sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001e9a:	4bab      	ldr	r3, [pc, #684]	; (8002148 <main+0x310>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
sFilterConfig.FilterMaskIdLow = 0x0000;
 8001ea0:	4ba9      	ldr	r3, [pc, #676]	; (8002148 <main+0x310>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	60da      	str	r2, [r3, #12]
sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001ea6:	4ba8      	ldr	r3, [pc, #672]	; (8002148 <main+0x310>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
//	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;
sFilterConfig.FilterActivation=ENABLE;
 8001eac:	4ba6      	ldr	r3, [pc, #664]	; (8002148 <main+0x310>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	621a      	str	r2, [r3, #32]
sFilterConfig.SlaveStartFilterBank=14;
 8001eb2:	4ba5      	ldr	r3, [pc, #660]	; (8002148 <main+0x310>)
 8001eb4:	220e      	movs	r2, #14
 8001eb6:	625a      	str	r2, [r3, #36]	; 0x24

if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 8001eb8:	49a3      	ldr	r1, [pc, #652]	; (8002148 <main+0x310>)
 8001eba:	48a4      	ldr	r0, [pc, #656]	; (800214c <main+0x314>)
 8001ebc:	f001 fd32 	bl	8003924 <HAL_CAN_ConfigFilter>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <main+0x92>
{
	Error_Handler();
 8001ec6:	f001 f835 	bl	8002f34 <Error_Handler>
}
if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 8001eca:	48a0      	ldr	r0, [pc, #640]	; (800214c <main+0x314>)
 8001ecc:	f001 fe0a 	bl	8003ae4 <HAL_CAN_Start>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <main+0xa2>
{
	Error_Handler();
 8001ed6:	f001 f82d 	bl	8002f34 <Error_Handler>
}

if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8001eda:	2103      	movs	r1, #3
 8001edc:	489b      	ldr	r0, [pc, #620]	; (800214c <main+0x314>)
 8001ede:	f002 f8b0 	bl	8004042 <HAL_CAN_ActivateNotification>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <main+0xb4>
{
	Error_Handler();
 8001ee8:	f001 f824 	bl	8002f34 <Error_Handler>
}
uint8_t judgment[20];
uint8_t modeflag=0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
float rad_data[2];
float machine_coordinate_data[2];
float machine_origin_rad[20];
float machine_origin_coordinate[20];
int receive_int_coordinate[2];
machine_origin_coordinate[0]=0.0;
 8001ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ef6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
machine_origin_coordinate[1]=400.0;
 8001f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f04:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f08:	4a91      	ldr	r2, [pc, #580]	; (8002150 <main+0x318>)
 8001f0a:	605a      	str	r2, [r3, #4]
BLDC_IK(machine_origin_coordinate[0],machine_origin_coordinate[1],&rad_data[0],&rad_data[1]);
 8001f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f10:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f14:	edd3 7a00 	vldr	s15, [r3]
 8001f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f1c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f20:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f24:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f28:	1d1a      	adds	r2, r3, #4
 8001f2a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	eef0 0a47 	vmov.f32	s1, s14
 8001f36:	eeb0 0a67 	vmov.f32	s0, s15
 8001f3a:	f000 fe39 	bl	8002bb0 <BLDC_IK>
machine_origin_rad[0]=rad_data[0];
 8001f3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f42:	65fb      	str	r3, [r7, #92]	; 0x5c
machine_origin_rad[1]=rad_data[1];
 8001f44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f48:	663b      	str	r3, [r7, #96]	; 0x60

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  home_position_state=0;
 8001f4a:	4b7e      	ldr	r3, [pc, #504]	; (8002144 <main+0x30c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]

	  get_uart_flag=0;
 8001f50:	4b80      	ldr	r3, [pc, #512]	; (8002154 <main+0x31c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2, (uint8_t *)RxData, buffersize);
 8001f56:	4b80      	ldr	r3, [pc, #512]	; (8002158 <main+0x320>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	497f      	ldr	r1, [pc, #508]	; (800215c <main+0x324>)
 8001f60:	487f      	ldr	r0, [pc, #508]	; (8002160 <main+0x328>)
 8001f62:	f003 fd47 	bl	80059f4 <HAL_UART_Receive_IT>
//	  HAL_UART_Transmit(&huart2, (uint8_t *)RxData, buffersize,300);
	  //受信するまで待つ
	  while(!get_uart_flag){}
 8001f66:	bf00      	nop
 8001f68:	4b7a      	ldr	r3, [pc, #488]	; (8002154 <main+0x31c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0fb      	beq.n	8001f68 <main+0x130>
	  get_can_flag=1;//canデータ受信用のフラグを0に
 8001f70:	4b7c      	ldr	r3, [pc, #496]	; (8002164 <main+0x32c>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<buffersize;i++){
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001f7c:	e010      	b.n	8001fa0 <main+0x168>
		  judgment[i]=RxData[i];
 8001f7e:	4a77      	ldr	r2, [pc, #476]	; (800215c <main+0x324>)
 8001f80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f84:	4413      	add	r3, r2
 8001f86:	7819      	ldrb	r1, [r3, #0]
 8001f88:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8001f8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f90:	4413      	add	r3, r2
 8001f92:	460a      	mov	r2, r1
 8001f94:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<buffersize;i++){
 8001f96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001fa0:	4b6d      	ldr	r3, [pc, #436]	; (8002158 <main+0x320>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001faa:	4293      	cmp	r3, r2
 8001fac:	dbe7      	blt.n	8001f7e <main+0x146>
	  }
	  if(RxData[0]==0xAA&&RxData[(buffersize-1)]==0xAA){
 8001fae:	4b6b      	ldr	r3, [pc, #428]	; (800215c <main+0x324>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2baa      	cmp	r3, #170	; 0xaa
 8001fb4:	d10c      	bne.n	8001fd0 <main+0x198>
 8001fb6:	4b68      	ldr	r3, [pc, #416]	; (8002158 <main+0x320>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	4a67      	ldr	r2, [pc, #412]	; (800215c <main+0x324>)
 8001fbe:	5cd3      	ldrb	r3, [r2, r3]
 8001fc0:	2baa      	cmp	r3, #170	; 0xaa
 8001fc2:	d105      	bne.n	8001fd0 <main+0x198>
		  command_judgment(judgment);
 8001fc4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fef3 	bl	8001db4 <command_judgment>
 8001fce:	e027      	b.n	8002020 <main+0x1e8>
	  }else{
		  selectmode_flag=2;
 8001fd0:	4b65      	ldr	r3, [pc, #404]	; (8002168 <main+0x330>)
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	701a      	strb	r2, [r3, #0]
		  TxData[0]=0xAA;
 8001fd6:	4b65      	ldr	r3, [pc, #404]	; (800216c <main+0x334>)
 8001fd8:	22aa      	movs	r2, #170	; 0xaa
 8001fda:	701a      	strb	r2, [r3, #0]
		  TxData[buffersize-1]=0xAA;
 8001fdc:	4b5e      	ldr	r3, [pc, #376]	; (8002158 <main+0x320>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	4a62      	ldr	r2, [pc, #392]	; (800216c <main+0x334>)
 8001fe4:	21aa      	movs	r1, #170	; 0xaa
 8001fe6:	54d1      	strb	r1, [r2, r3]
		  for(int i=1;i<buffersize-1;i++){
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001fee:	e00a      	b.n	8002006 <main+0x1ce>
			  TxData[i]=0xFF;
 8001ff0:	4a5e      	ldr	r2, [pc, #376]	; (800216c <main+0x334>)
 8001ff2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001ff6:	4413      	add	r3, r2
 8001ff8:	22ff      	movs	r2, #255	; 0xff
 8001ffa:	701a      	strb	r2, [r3, #0]
		  for(int i=1;i<buffersize-1;i++){
 8001ffc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002000:	3301      	adds	r3, #1
 8002002:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002006:	4b54      	ldr	r3, [pc, #336]	; (8002158 <main+0x320>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	3b01      	subs	r3, #1
 800200c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002010:	429a      	cmp	r2, r3
 8002012:	dbed      	blt.n	8001ff0 <main+0x1b8>
		  	  }
		  HAL_UART_Transmit(&huart2,TxData,sizeof(TxData),100);
 8002014:	2364      	movs	r3, #100	; 0x64
 8002016:	2214      	movs	r2, #20
 8002018:	4954      	ldr	r1, [pc, #336]	; (800216c <main+0x334>)
 800201a:	4851      	ldr	r0, [pc, #324]	; (8002160 <main+0x328>)
 800201c:	f003 fc13 	bl	8005846 <HAL_UART_Transmit>
	  }

	  if(selectmode_flag==1){
 8002020:	4b51      	ldr	r3, [pc, #324]	; (8002168 <main+0x330>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d104      	bne.n	8002032 <main+0x1fa>
		  mode_select=RxData[1];	//モード変更
 8002028:	4b4c      	ldr	r3, [pc, #304]	; (800215c <main+0x324>)
 800202a:	785b      	ldrb	r3, [r3, #1]
 800202c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8002030:	e048      	b.n	80020c4 <main+0x28c>
		  }
	  else if(selectmode_flag==0){
 8002032:	4b4d      	ldr	r3, [pc, #308]	; (8002168 <main+0x330>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d144      	bne.n	80020c4 <main+0x28c>

		  receive_xy_coordinate[0]=RxData[5]&0xFF;	//受け取った座標データをビットシフトしてx,yの値に直す
 800203a:	4b48      	ldr	r3, [pc, #288]	; (800215c <main+0x324>)
 800203c:	795b      	ldrb	r3, [r3, #5]
 800203e:	b21b      	sxth	r3, r3
 8002040:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
		  receive_xy_coordinate[0]+= (RxData[6]&0xFF)<<8;
 8002044:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 8002048:	b29a      	uxth	r2, r3
 800204a:	4b44      	ldr	r3, [pc, #272]	; (800215c <main+0x324>)
 800204c:	799b      	ldrb	r3, [r3, #6]
 800204e:	b29b      	uxth	r3, r3
 8002050:	021b      	lsls	r3, r3, #8
 8002052:	b29b      	uxth	r3, r3
 8002054:	4413      	add	r3, r2
 8002056:	b29b      	uxth	r3, r3
 8002058:	b21b      	sxth	r3, r3
 800205a:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
		  receive_xy_coordinate[1]=RxData[7]&0xFF;
 800205e:	4b3f      	ldr	r3, [pc, #252]	; (800215c <main+0x324>)
 8002060:	79db      	ldrb	r3, [r3, #7]
 8002062:	b21b      	sxth	r3, r3
 8002064:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
		  receive_xy_coordinate[1]+= (RxData[8]&0xFF)<<8;
 8002068:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 800206c:	b29a      	uxth	r2, r3
 800206e:	4b3b      	ldr	r3, [pc, #236]	; (800215c <main+0x324>)
 8002070:	7a1b      	ldrb	r3, [r3, #8]
 8002072:	b29b      	uxth	r3, r3
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	b29b      	uxth	r3, r3
 8002078:	4413      	add	r3, r2
 800207a:	b29b      	uxth	r3, r3
 800207c:	b21b      	sxth	r3, r3
 800207e:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
//		  HAL_UART_Transmit_IT(&huart2,RxData,sizeof(RxData));
		  machine_coordinate_data[0]=(float)receive_xy_coordinate[0];
 8002082:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 8002086:	ee07 3a90 	vmov	s15, r3
 800208a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800208e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		  machine_coordinate_data[1]=(float)receive_xy_coordinate[1];
 8002092:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 8002096:	ee07 3a90 	vmov	s15, r3
 800209a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800209e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		  BLDC_IK(machine_coordinate_data[0],machine_coordinate_data[1],&rad_data[0],&rad_data[1]);
 80020a2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80020a6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80020aa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80020ae:	1d1a      	adds	r2, r3, #4
 80020b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	eef0 0a47 	vmov.f32	s1, s14
 80020bc:	eeb0 0a67 	vmov.f32	s0, s15
 80020c0:	f000 fd76 	bl	8002bb0 <BLDC_IK>
	  }
	  if(home_position_state==1){	//初期位置モード
 80020c4:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <main+0x30c>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d116      	bne.n	80020fa <main+0x2c2>
		  switch(mode_select){
 80020cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80020d0:	2b0a      	cmp	r3, #10
 80020d2:	d10e      	bne.n	80020f2 <main+0x2ba>
		  case 0x0A:
			  canid=0x01;
 80020d4:	4b26      	ldr	r3, [pc, #152]	; (8002170 <main+0x338>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
			  EnterMotorMode();
 80020da:	f7fe ff83 	bl	8000fe4 <EnterMotorMode>
			  BLDC_CANTx();
 80020de:	f7ff f89d 	bl	800121c <BLDC_CANTx>
			  canid=0x02;
 80020e2:	4b23      	ldr	r3, [pc, #140]	; (8002170 <main+0x338>)
 80020e4:	2202      	movs	r2, #2
 80020e6:	601a      	str	r2, [r3, #0]
			  EnterMotorMode();
 80020e8:	f7fe ff7c 	bl	8000fe4 <EnterMotorMode>
			  BLDC_CANTx();
 80020ec:	f7ff f896 	bl	800121c <BLDC_CANTx>
			  break;
 80020f0:	e28a      	b.n	8002608 <main+0x7d0>
//				  machine_origin_rad[0]=rad_data[0];
//				  machine_origin_rad[1]=rad_data[1];
//			  }
//			  break;
		  default:
			  get_can_flag=1;
 80020f2:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <main+0x32c>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
			  break;
 80020f8:	e286      	b.n	8002608 <main+0x7d0>
		  }
	  }
	  else if(home_position_state==0){
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <main+0x30c>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f040 8282 	bne.w	8002608 <main+0x7d0>
		  switch(mode_select){	//
 8002104:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002108:	2b08      	cmp	r3, #8
 800210a:	dc33      	bgt.n	8002174 <main+0x33c>
 800210c:	2b00      	cmp	r3, #0
 800210e:	f340 826e 	ble.w	80025ee <main+0x7b6>
 8002112:	3b01      	subs	r3, #1
 8002114:	2b07      	cmp	r3, #7
 8002116:	f200 826a 	bhi.w	80025ee <main+0x7b6>
 800211a:	a201      	add	r2, pc, #4	; (adr r2, 8002120 <main+0x2e8>)
 800211c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002120:	0800217d 	.word	0x0800217d
 8002124:	0800219b 	.word	0x0800219b
 8002128:	080021b9 	.word	0x080021b9
 800212c:	080021d9 	.word	0x080021d9
 8002130:	08002203 	.word	0x08002203
 8002134:	08002217 	.word	0x08002217
 8002138:	0800222d 	.word	0x0800222d
 800213c:	08002273 	.word	0x08002273
 8002140:	40020400 	.word	0x40020400
 8002144:	20000338 	.word	0x20000338
 8002148:	20000298 	.word	0x20000298
 800214c:	20000204 	.word	0x20000204
 8002150:	43c80000 	.word	0x43c80000
 8002154:	20000339 	.word	0x20000339
 8002158:	20000008 	.word	0x20000008
 800215c:	20000308 	.word	0x20000308
 8002160:	20000254 	.word	0x20000254
 8002164:	2000033a 	.word	0x2000033a
 8002168:	2000033c 	.word	0x2000033c
 800216c:	200002f4 	.word	0x200002f4
 8002170:	20000334 	.word	0x20000334
 8002174:	2b90      	cmp	r3, #144	; 0x90
 8002176:	f000 815d 	beq.w	8002434 <main+0x5fc>
 800217a:	e238      	b.n	80025ee <main+0x7b6>
		  case 0x01:	//モーターON
			  canid=0x01;
 800217c:	4ba4      	ldr	r3, [pc, #656]	; (8002410 <main+0x5d8>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]
			  EnterMotorMode();
 8002182:	f7fe ff2f 	bl	8000fe4 <EnterMotorMode>
			  BLDC_CANTx();
 8002186:	f7ff f849 	bl	800121c <BLDC_CANTx>
			  canid=0x02;
 800218a:	4ba1      	ldr	r3, [pc, #644]	; (8002410 <main+0x5d8>)
 800218c:	2202      	movs	r2, #2
 800218e:	601a      	str	r2, [r3, #0]
			  EnterMotorMode();
 8002190:	f7fe ff28 	bl	8000fe4 <EnterMotorMode>
			  BLDC_CANTx();
 8002194:	f7ff f842 	bl	800121c <BLDC_CANTx>

			  break;
 8002198:	e22e      	b.n	80025f8 <main+0x7c0>
		  case 0x02:	//モーターOFF
			  canid=0x01;
 800219a:	4b9d      	ldr	r3, [pc, #628]	; (8002410 <main+0x5d8>)
 800219c:	2201      	movs	r2, #1
 800219e:	601a      	str	r2, [r3, #0]
			  ExitMotorMode();
 80021a0:	f7fe ff42 	bl	8001028 <ExitMotorMode>
			  BLDC_CANTx();
 80021a4:	f7ff f83a 	bl	800121c <BLDC_CANTx>
			  canid=0x02;
 80021a8:	4b99      	ldr	r3, [pc, #612]	; (8002410 <main+0x5d8>)
 80021aa:	2202      	movs	r2, #2
 80021ac:	601a      	str	r2, [r3, #0]
			  ExitMotorMode();
 80021ae:	f7fe ff3b 	bl	8001028 <ExitMotorMode>
			  BLDC_CANTx();
 80021b2:	f7ff f833 	bl	800121c <BLDC_CANTx>
			  break;
 80021b6:	e21f      	b.n	80025f8 <main+0x7c0>
		  case 0x03:	//動作モード
			  if(selectmode_flag==0){
 80021b8:	4b96      	ldr	r3, [pc, #600]	; (8002414 <main+0x5dc>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f040 821a 	bne.w	80025f6 <main+0x7be>
				  t_position[0] = rad_data[0];
 80021c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021c6:	4a94      	ldr	r2, [pc, #592]	; (8002418 <main+0x5e0>)
 80021c8:	6013      	str	r3, [r2, #0]
				  t_position[1] = rad_data[1];
 80021ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021ce:	4a92      	ldr	r2, [pc, #584]	; (8002418 <main+0x5e0>)
 80021d0:	6053      	str	r3, [r2, #4]
				  BLDC_MotorRotate();
 80021d2:	f7ff f9e5 	bl	80015a0 <BLDC_MotorRotate>
			  }
			  break;
 80021d6:	e20e      	b.n	80025f6 <main+0x7be>
		  case 0x04:
			  t_position[0] = 0;
 80021d8:	4b8f      	ldr	r3, [pc, #572]	; (8002418 <main+0x5e0>)
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
			  t_position[1] = 0;
 80021e0:	4b8d      	ldr	r3, [pc, #564]	; (8002418 <main+0x5e0>)
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	605a      	str	r2, [r3, #4]
			  BLDC_M2Rotate();
 80021e8:	f7ff fcba 	bl	8001b60 <BLDC_M2Rotate>
			  BLDC_M1Rotate();
 80021ec:	f7ff fba6 	bl	800193c <BLDC_M1Rotate>
			  t_position[0] = machine_origin_rad[0];	//スタンバイ状態
 80021f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021f2:	4a89      	ldr	r2, [pc, #548]	; (8002418 <main+0x5e0>)
 80021f4:	6013      	str	r3, [r2, #0]
			  t_position[1] = machine_origin_rad[1];
 80021f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021f8:	4a87      	ldr	r2, [pc, #540]	; (8002418 <main+0x5e0>)
 80021fa:	6053      	str	r3, [r2, #4]
			  BLDC_MotorRotate();
 80021fc:	f7ff f9d0 	bl	80015a0 <BLDC_MotorRotate>
			  break;
 8002200:	e1fa      	b.n	80025f8 <main+0x7c0>
		  case 0x05:	//初期状態へ戻る
		 	  t_position[0] = 0;
 8002202:	4b85      	ldr	r3, [pc, #532]	; (8002418 <main+0x5e0>)
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
		 	  t_position[1] = M_PI;
 800220a:	4b83      	ldr	r3, [pc, #524]	; (8002418 <main+0x5e0>)
 800220c:	4a83      	ldr	r2, [pc, #524]	; (800241c <main+0x5e4>)
 800220e:	605a      	str	r2, [r3, #4]
		 	  BLDC_MotorRotate();
 8002210:	f7ff f9c6 	bl	80015a0 <BLDC_MotorRotate>
		 	  break;
 8002214:	e1f0      	b.n	80025f8 <main+0x7c0>
		  case 0x06:	//腕伸ばした状態
			  t_position[0] = 0;
 8002216:	4b80      	ldr	r3, [pc, #512]	; (8002418 <main+0x5e0>)
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
			  t_position[1] = 0;
 800221e:	4b7e      	ldr	r3, [pc, #504]	; (8002418 <main+0x5e0>)
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	605a      	str	r2, [r3, #4]
			  BLDC_MotorRotate();
 8002226:	f7ff f9bb 	bl	80015a0 <BLDC_MotorRotate>
			  break;
 800222a:	e1e5      	b.n	80025f8 <main+0x7c0>
		  case 0x07:	//ティーチングモード開始
			  canid=0x01;
 800222c:	4b78      	ldr	r3, [pc, #480]	; (8002410 <main+0x5d8>)
 800222e:	2201      	movs	r2, #1
 8002230:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 1.0, 0.0);
 8002232:	ed9f 2a7b 	vldr	s4, [pc, #492]	; 8002420 <main+0x5e8>
 8002236:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800223a:	ed9f 1a79 	vldr	s2, [pc, #484]	; 8002420 <main+0x5e8>
 800223e:	eddf 0a78 	vldr	s1, [pc, #480]	; 8002420 <main+0x5e8>
 8002242:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8002420 <main+0x5e8>
 8002246:	f7fe ff11 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 800224a:	f7fe ffe7 	bl	800121c <BLDC_CANTx>
			  canid=0x02;
 800224e:	4b70      	ldr	r3, [pc, #448]	; (8002410 <main+0x5d8>)
 8002250:	2202      	movs	r2, #2
 8002252:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 1.0, 0.0);
 8002254:	ed9f 2a72 	vldr	s4, [pc, #456]	; 8002420 <main+0x5e8>
 8002258:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800225c:	ed9f 1a70 	vldr	s2, [pc, #448]	; 8002420 <main+0x5e8>
 8002260:	eddf 0a6f 	vldr	s1, [pc, #444]	; 8002420 <main+0x5e8>
 8002264:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 8002420 <main+0x5e8>
 8002268:	f7fe ff00 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 800226c:	f7fe ffd6 	bl	800121c <BLDC_CANTx>
			  break;
 8002270:	e1c2      	b.n	80025f8 <main+0x7c0>
		  case 0x08:	//ティーチング決定
			  canid=0x01;
 8002272:	4b67      	ldr	r3, [pc, #412]	; (8002410 <main+0x5d8>)
 8002274:	2201      	movs	r2, #1
 8002276:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 4.0, 0.0);
 8002278:	ed9f 2a69 	vldr	s4, [pc, #420]	; 8002420 <main+0x5e8>
 800227c:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8002280:	ed9f 1a67 	vldr	s2, [pc, #412]	; 8002420 <main+0x5e8>
 8002284:	eddf 0a66 	vldr	s1, [pc, #408]	; 8002420 <main+0x5e8>
 8002288:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8002420 <main+0x5e8>
 800228c:	f7fe feee 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 8002290:	f7fe ffc4 	bl	800121c <BLDC_CANTx>
			  unpack_reply();
 8002294:	f7ff f824 	bl	80012e0 <unpack_reply>
			  pack_cmd(p_getdata, 0.0, 100.0, 3.0, 0.0);
 8002298:	4b62      	ldr	r3, [pc, #392]	; (8002424 <main+0x5ec>)
 800229a:	edd3 7a00 	vldr	s15, [r3]
 800229e:	ed9f 2a60 	vldr	s4, [pc, #384]	; 8002420 <main+0x5e8>
 80022a2:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 80022a6:	ed9f 1a60 	vldr	s2, [pc, #384]	; 8002428 <main+0x5f0>
 80022aa:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8002420 <main+0x5e8>
 80022ae:	eeb0 0a67 	vmov.f32	s0, s15
 80022b2:	f7fe fedb 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 80022b6:	f7fe ffb1 	bl	800121c <BLDC_CANTx>
			  unpack_reply();
 80022ba:	f7ff f811 	bl	80012e0 <unpack_reply>
			  rad_data[0]=p_getdata;
 80022be:	4b59      	ldr	r3, [pc, #356]	; (8002424 <main+0x5ec>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			  canid=0x02;
 80022c6:	4b52      	ldr	r3, [pc, #328]	; (8002410 <main+0x5d8>)
 80022c8:	2202      	movs	r2, #2
 80022ca:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 4.0, 0.0);
 80022cc:	ed9f 2a54 	vldr	s4, [pc, #336]	; 8002420 <main+0x5e8>
 80022d0:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 80022d4:	ed9f 1a52 	vldr	s2, [pc, #328]	; 8002420 <main+0x5e8>
 80022d8:	eddf 0a51 	vldr	s1, [pc, #324]	; 8002420 <main+0x5e8>
 80022dc:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8002420 <main+0x5e8>
 80022e0:	f7fe fec4 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 80022e4:	f7fe ff9a 	bl	800121c <BLDC_CANTx>
			  unpack_reply();
 80022e8:	f7fe fffa 	bl	80012e0 <unpack_reply>
			  pack_cmd(p_getdata, 0.0, 100.0, 3.0, 0.0);
 80022ec:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <main+0x5ec>)
 80022ee:	edd3 7a00 	vldr	s15, [r3]
 80022f2:	ed9f 2a4b 	vldr	s4, [pc, #300]	; 8002420 <main+0x5e8>
 80022f6:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 80022fa:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 8002428 <main+0x5f0>
 80022fe:	eddf 0a48 	vldr	s1, [pc, #288]	; 8002420 <main+0x5e8>
 8002302:	eeb0 0a67 	vmov.f32	s0, s15
 8002306:	f7fe feb1 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 800230a:	f7fe ff87 	bl	800121c <BLDC_CANTx>
			  unpack_reply();
 800230e:	f7fe ffe7 	bl	80012e0 <unpack_reply>
			  rad_data[1]=p_getdata;
 8002312:	4b44      	ldr	r3, [pc, #272]	; (8002424 <main+0x5ec>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			  BLDC_FK(-rad_data[0],-(rad_data[1]+M_PI),&machine_coordinate_data[0],&machine_coordinate_data[1]);
 800231a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800231e:	eeb1 8a67 	vneg.f32	s16, s15
 8002322:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe f92e 	bl	8000588 <__aeabi_f2d>
 800232c:	a336      	add	r3, pc, #216	; (adr r3, 8002408 <main+0x5d0>)
 800232e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002332:	f7fd ffcb 	bl	80002cc <__adddf3>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4610      	mov	r0, r2
 800233c:	4619      	mov	r1, r3
 800233e:	f7fe fc53 	bl	8000be8 <__aeabi_d2f>
 8002342:	4603      	mov	r3, r0
 8002344:	ee07 3a90 	vmov	s15, r3
 8002348:	eef1 7a67 	vneg.f32	s15, s15
 800234c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002350:	1d1a      	adds	r2, r3, #4
 8002352:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	eef0 0a67 	vmov.f32	s1, s15
 800235e:	eeb0 0a48 	vmov.f32	s0, s16
 8002362:	f000 fb53 	bl	8002a0c <BLDC_FK>
			  sent_data[0]=round(machine_coordinate_data[0]);	//手先座標系から機械座標系への変換
 8002366:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe f90c 	bl	8000588 <__aeabi_f2d>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	ec43 2b10 	vmov	d0, r2, r3
 8002378:	f007 f88a 	bl	8009490 <round>
 800237c:	ec53 2b10 	vmov	r2, r3, d0
 8002380:	4610      	mov	r0, r2
 8002382:	4619      	mov	r1, r3
 8002384:	f7fe fc08 	bl	8000b98 <__aeabi_d2iz>
 8002388:	4603      	mov	r3, r0
 800238a:	b21b      	sxth	r3, r3
 800238c:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
			  sent_data[1]=round(machine_coordinate_data[1]);
 8002390:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe f8f7 	bl	8000588 <__aeabi_f2d>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	ec43 2b10 	vmov	d0, r2, r3
 80023a2:	f007 f875 	bl	8009490 <round>
 80023a6:	ec53 2b10 	vmov	r2, r3, d0
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	f7fe fbf3 	bl	8000b98 <__aeabi_d2iz>
 80023b2:	4603      	mov	r3, r0
 80023b4:	b21b      	sxth	r3, r3
 80023b6:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
			  TxData[0]=0xAA;
 80023ba:	4b1c      	ldr	r3, [pc, #112]	; (800242c <main+0x5f4>)
 80023bc:	22aa      	movs	r2, #170	; 0xaa
 80023be:	701a      	strb	r2, [r3, #0]
			  TxData[5]=sent_data[0]&0xFF;
 80023c0:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4b19      	ldr	r3, [pc, #100]	; (800242c <main+0x5f4>)
 80023c8:	715a      	strb	r2, [r3, #5]
			  TxData[6]=(sent_data[0]>>8)&0xFF;
 80023ca:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 80023ce:	121b      	asrs	r3, r3, #8
 80023d0:	b21b      	sxth	r3, r3
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	4b15      	ldr	r3, [pc, #84]	; (800242c <main+0x5f4>)
 80023d6:	719a      	strb	r2, [r3, #6]
		   	  TxData[7]=sent_data[1]&0xFF;
 80023d8:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4b13      	ldr	r3, [pc, #76]	; (800242c <main+0x5f4>)
 80023e0:	71da      	strb	r2, [r3, #7]
			  TxData[8]=(sent_data[1]>>8)&0xFF;
 80023e2:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 80023e6:	121b      	asrs	r3, r3, #8
 80023e8:	b21b      	sxth	r3, r3
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <main+0x5f4>)
 80023ee:	721a      	strb	r2, [r3, #8]
			  TxData[19]=0xAA;
 80023f0:	4b0e      	ldr	r3, [pc, #56]	; (800242c <main+0x5f4>)
 80023f2:	22aa      	movs	r2, #170	; 0xaa
 80023f4:	74da      	strb	r2, [r3, #19]
			  HAL_UART_Transmit(&huart2,TxData,sizeof(TxData),100);
 80023f6:	2364      	movs	r3, #100	; 0x64
 80023f8:	2214      	movs	r2, #20
 80023fa:	490c      	ldr	r1, [pc, #48]	; (800242c <main+0x5f4>)
 80023fc:	480c      	ldr	r0, [pc, #48]	; (8002430 <main+0x5f8>)
 80023fe:	f003 fa22 	bl	8005846 <HAL_UART_Transmit>
			  break;
 8002402:	e0f9      	b.n	80025f8 <main+0x7c0>
 8002404:	f3af 8000 	nop.w
 8002408:	54442d18 	.word	0x54442d18
 800240c:	400921fb 	.word	0x400921fb
 8002410:	20000334 	.word	0x20000334
 8002414:	2000033c 	.word	0x2000033c
 8002418:	2000034c 	.word	0x2000034c
 800241c:	40490fdb 	.word	0x40490fdb
 8002420:	00000000 	.word	0x00000000
 8002424:	20000340 	.word	0x20000340
 8002428:	42c80000 	.word	0x42c80000
 800242c:	200002f4 	.word	0x200002f4
 8002430:	20000254 	.word	0x20000254

		  case 0x90:
			  canid=0x01;
 8002434:	4b9c      	ldr	r3, [pc, #624]	; (80026a8 <main+0x870>)
 8002436:	2201      	movs	r2, #1
 8002438:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 3.0, 0.0);
 800243a:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 80026ac <main+0x874>
 800243e:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8002442:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 80026ac <main+0x874>
 8002446:	eddf 0a99 	vldr	s1, [pc, #612]	; 80026ac <main+0x874>
 800244a:	ed9f 0a98 	vldr	s0, [pc, #608]	; 80026ac <main+0x874>
 800244e:	f7fe fe0d 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 8002452:	f7fe fee3 	bl	800121c <BLDC_CANTx>
			  unpack_reply();
 8002456:	f7fe ff43 	bl	80012e0 <unpack_reply>
			  rad_data[0]=p_getdata;
 800245a:	4b95      	ldr	r3, [pc, #596]	; (80026b0 <main+0x878>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			  canid=0x02;
 8002462:	4b91      	ldr	r3, [pc, #580]	; (80026a8 <main+0x870>)
 8002464:	2202      	movs	r2, #2
 8002466:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 3.0, 0.0);
 8002468:	ed9f 2a90 	vldr	s4, [pc, #576]	; 80026ac <main+0x874>
 800246c:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8002470:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 80026ac <main+0x874>
 8002474:	eddf 0a8d 	vldr	s1, [pc, #564]	; 80026ac <main+0x874>
 8002478:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 80026ac <main+0x874>
 800247c:	f7fe fdf6 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 8002480:	f7fe fecc 	bl	800121c <BLDC_CANTx>
			  unpack_reply();
 8002484:	f7fe ff2c 	bl	80012e0 <unpack_reply>
			  rad_data[1]=p_getdata;
 8002488:	4b89      	ldr	r3, [pc, #548]	; (80026b0 <main+0x878>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

			  canid=0x01;
 8002490:	4b85      	ldr	r3, [pc, #532]	; (80026a8 <main+0x870>)
 8002492:	2201      	movs	r2, #1
 8002494:	601a      	str	r2, [r3, #0]
			  pack_cmd(rad_data[0]+0.1, 0.0, 50.0, 2.0, 0.0);
 8002496:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe f874 	bl	8000588 <__aeabi_f2d>
 80024a0:	a37f      	add	r3, pc, #508	; (adr r3, 80026a0 <main+0x868>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	f7fd ff11 	bl	80002cc <__adddf3>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	f7fe fb99 	bl	8000be8 <__aeabi_d2f>
 80024b6:	4603      	mov	r3, r0
 80024b8:	ed9f 2a7c 	vldr	s4, [pc, #496]	; 80026ac <main+0x874>
 80024bc:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 80024c0:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 80026b4 <main+0x87c>
 80024c4:	eddf 0a79 	vldr	s1, [pc, #484]	; 80026ac <main+0x874>
 80024c8:	ee00 3a10 	vmov	s0, r3
 80024cc:	f7fe fdce 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 80024d0:	f7fe fea4 	bl	800121c <BLDC_CANTx>
			  unpack_reply();
 80024d4:	f7fe ff04 	bl	80012e0 <unpack_reply>
			  rad_data[0]=p_getdata;
 80024d8:	4b75      	ldr	r3, [pc, #468]	; (80026b0 <main+0x878>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			  canid=0x02;
 80024e0:	4b71      	ldr	r3, [pc, #452]	; (80026a8 <main+0x870>)
 80024e2:	2202      	movs	r2, #2
 80024e4:	601a      	str	r2, [r3, #0]
			  pack_cmd(rad_data[1]+0.1, 0.0, 50.0, 2.0, 0.0);
 80024e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe f84c 	bl	8000588 <__aeabi_f2d>
 80024f0:	a36b      	add	r3, pc, #428	; (adr r3, 80026a0 <main+0x868>)
 80024f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f6:	f7fd fee9 	bl	80002cc <__adddf3>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	f7fe fb71 	bl	8000be8 <__aeabi_d2f>
 8002506:	4603      	mov	r3, r0
 8002508:	ed9f 2a68 	vldr	s4, [pc, #416]	; 80026ac <main+0x874>
 800250c:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8002510:	ed9f 1a68 	vldr	s2, [pc, #416]	; 80026b4 <main+0x87c>
 8002514:	eddf 0a65 	vldr	s1, [pc, #404]	; 80026ac <main+0x874>
 8002518:	ee00 3a10 	vmov	s0, r3
 800251c:	f7fe fda6 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 8002520:	f7fe fe7c 	bl	800121c <BLDC_CANTx>
			  unpack_reply();
 8002524:	f7fe fedc 	bl	80012e0 <unpack_reply>
			  rad_data[1]=p_getdata;
 8002528:	4b61      	ldr	r3, [pc, #388]	; (80026b0 <main+0x878>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

			  BLDC_FK(rad_data[0],rad_data[1],&machine_coordinate_data[0],&machine_coordinate_data[1]);
 8002530:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002534:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002538:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800253c:	1d1a      	adds	r2, r3, #4
 800253e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	eef0 0a47 	vmov.f32	s1, s14
 800254a:	eeb0 0a67 	vmov.f32	s0, s15
 800254e:	f000 fa5d 	bl	8002a0c <BLDC_FK>
			  sent_data[0]=round(machine_coordinate_data[0]);	//手先座標系から機械座標系への変換
 8002552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe f816 	bl	8000588 <__aeabi_f2d>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	ec43 2b10 	vmov	d0, r2, r3
 8002564:	f006 ff94 	bl	8009490 <round>
 8002568:	ec53 2b10 	vmov	r2, r3, d0
 800256c:	4610      	mov	r0, r2
 800256e:	4619      	mov	r1, r3
 8002570:	f7fe fb12 	bl	8000b98 <__aeabi_d2iz>
 8002574:	4603      	mov	r3, r0
 8002576:	b21b      	sxth	r3, r3
 8002578:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
			  sent_data[1]=round(machine_coordinate_data[1]);
 800257c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe f801 	bl	8000588 <__aeabi_f2d>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	ec43 2b10 	vmov	d0, r2, r3
 800258e:	f006 ff7f 	bl	8009490 <round>
 8002592:	ec53 2b10 	vmov	r2, r3, d0
 8002596:	4610      	mov	r0, r2
 8002598:	4619      	mov	r1, r3
 800259a:	f7fe fafd 	bl	8000b98 <__aeabi_d2iz>
 800259e:	4603      	mov	r3, r0
 80025a0:	b21b      	sxth	r3, r3
 80025a2:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
			  TxData[0]=0xAA;
 80025a6:	4b44      	ldr	r3, [pc, #272]	; (80026b8 <main+0x880>)
 80025a8:	22aa      	movs	r2, #170	; 0xaa
 80025aa:	701a      	strb	r2, [r3, #0]
			  TxData[5]=sent_data[0]&0xFF;
 80025ac:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4b41      	ldr	r3, [pc, #260]	; (80026b8 <main+0x880>)
 80025b4:	715a      	strb	r2, [r3, #5]
			  TxData[6]=(sent_data[0]>>8)&0xFF;
 80025b6:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 80025ba:	121b      	asrs	r3, r3, #8
 80025bc:	b21b      	sxth	r3, r3
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	4b3d      	ldr	r3, [pc, #244]	; (80026b8 <main+0x880>)
 80025c2:	719a      	strb	r2, [r3, #6]
			  TxData[7]=sent_data[1]&0xFF;
 80025c4:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4b3b      	ldr	r3, [pc, #236]	; (80026b8 <main+0x880>)
 80025cc:	71da      	strb	r2, [r3, #7]
			  TxData[8]=(sent_data[1]>>8)&0xFF;
 80025ce:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 80025d2:	121b      	asrs	r3, r3, #8
 80025d4:	b21b      	sxth	r3, r3
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	4b37      	ldr	r3, [pc, #220]	; (80026b8 <main+0x880>)
 80025da:	721a      	strb	r2, [r3, #8]
			  TxData[19]=0xAA;
 80025dc:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <main+0x880>)
 80025de:	22aa      	movs	r2, #170	; 0xaa
 80025e0:	74da      	strb	r2, [r3, #19]
			  HAL_UART_Transmit_IT(&huart2,TxData,sizeof(TxData));
 80025e2:	2214      	movs	r2, #20
 80025e4:	4934      	ldr	r1, [pc, #208]	; (80026b8 <main+0x880>)
 80025e6:	4835      	ldr	r0, [pc, #212]	; (80026bc <main+0x884>)
 80025e8:	f003 f9bf 	bl	800596a <HAL_UART_Transmit_IT>

			  break;
 80025ec:	e004      	b.n	80025f8 <main+0x7c0>
		  default:
			  get_can_flag=1;
 80025ee:	4b34      	ldr	r3, [pc, #208]	; (80026c0 <main+0x888>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
			  break;
 80025f4:	e000      	b.n	80025f8 <main+0x7c0>
			  break;
 80025f6:	bf00      	nop
		  }

		  get_uart_flag=0;
 80025f8:	4b32      	ldr	r3, [pc, #200]	; (80026c4 <main+0x88c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]
		  while(!get_can_flag){}
 80025fe:	bf00      	nop
 8002600:	4b2f      	ldr	r3, [pc, #188]	; (80026c0 <main+0x888>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0fb      	beq.n	8002600 <main+0x7c8>
	  }

	  mode_select=RxData[1];	//モード変更
 8002608:	4b2f      	ldr	r3, [pc, #188]	; (80026c8 <main+0x890>)
 800260a:	785b      	ldrb	r3, [r3, #1]
 800260c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	  TxData[0]=0xAA;
 8002610:	4b29      	ldr	r3, [pc, #164]	; (80026b8 <main+0x880>)
 8002612:	22aa      	movs	r2, #170	; 0xaa
 8002614:	701a      	strb	r2, [r3, #0]
	  TxData[1]=mode_select;
 8002616:	4a28      	ldr	r2, [pc, #160]	; (80026b8 <main+0x880>)
 8002618:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800261c:	7053      	strb	r3, [r2, #1]
	  TxData[buffersize-1]=0xAA;
 800261e:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <main+0x894>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	3b01      	subs	r3, #1
 8002624:	4a24      	ldr	r2, [pc, #144]	; (80026b8 <main+0x880>)
 8002626:	21aa      	movs	r1, #170	; 0xaa
 8002628:	54d1      	strb	r1, [r2, r3]
	  for(int i=2;i<buffersize-1;i++){
 800262a:	2302      	movs	r3, #2
 800262c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002630:	e00a      	b.n	8002648 <main+0x810>
		  TxData[i]=0xFF;
 8002632:	4a21      	ldr	r2, [pc, #132]	; (80026b8 <main+0x880>)
 8002634:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002638:	4413      	add	r3, r2
 800263a:	22ff      	movs	r2, #255	; 0xff
 800263c:	701a      	strb	r2, [r3, #0]
	  for(int i=2;i<buffersize-1;i++){
 800263e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002642:	3301      	adds	r3, #1
 8002644:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002648:	4b20      	ldr	r3, [pc, #128]	; (80026cc <main+0x894>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	3b01      	subs	r3, #1
 800264e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002652:	429a      	cmp	r2, r3
 8002654:	dbed      	blt.n	8002632 <main+0x7fa>
	  }
	  HAL_UART_Transmit(&huart2,TxData,sizeof(TxData),100);
 8002656:	2364      	movs	r3, #100	; 0x64
 8002658:	2214      	movs	r2, #20
 800265a:	4917      	ldr	r1, [pc, #92]	; (80026b8 <main+0x880>)
 800265c:	4817      	ldr	r0, [pc, #92]	; (80026bc <main+0x884>)
 800265e:	f003 f8f2 	bl	8005846 <HAL_UART_Transmit>
	  for(int i=0;i<buffersize;i++){
 8002662:	2300      	movs	r3, #0
 8002664:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002668:	e010      	b.n	800268c <main+0x854>
	  		  RxData[i]=0;
 800266a:	4a17      	ldr	r2, [pc, #92]	; (80026c8 <main+0x890>)
 800266c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002670:	4413      	add	r3, r2
 8002672:	2200      	movs	r2, #0
 8002674:	701a      	strb	r2, [r3, #0]
	  		  TxData[i]=0;
 8002676:	4a10      	ldr	r2, [pc, #64]	; (80026b8 <main+0x880>)
 8002678:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800267c:	4413      	add	r3, r2
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<buffersize;i++){
 8002682:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002686:	3301      	adds	r3, #1
 8002688:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800268c:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <main+0x894>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002696:	4293      	cmp	r3, r2
 8002698:	dbe7      	blt.n	800266a <main+0x832>
	  home_position_state=0;
 800269a:	e456      	b.n	8001f4a <main+0x112>
 800269c:	f3af 8000 	nop.w
 80026a0:	9999999a 	.word	0x9999999a
 80026a4:	3fb99999 	.word	0x3fb99999
 80026a8:	20000334 	.word	0x20000334
 80026ac:	00000000 	.word	0x00000000
 80026b0:	20000340 	.word	0x20000340
 80026b4:	42480000 	.word	0x42480000
 80026b8:	200002f4 	.word	0x200002f4
 80026bc:	20000254 	.word	0x20000254
 80026c0:	2000033a 	.word	0x2000033a
 80026c4:	20000339 	.word	0x20000339
 80026c8:	20000308 	.word	0x20000308
 80026cc:	20000008 	.word	0x20000008

080026d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b094      	sub	sp, #80	; 0x50
 80026d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026d6:	f107 031c 	add.w	r3, r7, #28
 80026da:	2234      	movs	r2, #52	; 0x34
 80026dc:	2100      	movs	r1, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	f004 f94a 	bl	8006978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026e4:	f107 0308 	add.w	r3, r7, #8
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f4:	2300      	movs	r3, #0
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	4b29      	ldr	r3, [pc, #164]	; (80027a0 <SystemClock_Config+0xd0>)
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	4a28      	ldr	r2, [pc, #160]	; (80027a0 <SystemClock_Config+0xd0>)
 80026fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002702:	6413      	str	r3, [r2, #64]	; 0x40
 8002704:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <SystemClock_Config+0xd0>)
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002710:	2300      	movs	r3, #0
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	4b23      	ldr	r3, [pc, #140]	; (80027a4 <SystemClock_Config+0xd4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a22      	ldr	r2, [pc, #136]	; (80027a4 <SystemClock_Config+0xd4>)
 800271a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	4b20      	ldr	r3, [pc, #128]	; (80027a4 <SystemClock_Config+0xd4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800272c:	2302      	movs	r3, #2
 800272e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002730:	2301      	movs	r3, #1
 8002732:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002734:	2310      	movs	r3, #16
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002738:	2302      	movs	r3, #2
 800273a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800273c:	2300      	movs	r3, #0
 800273e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002740:	2308      	movs	r3, #8
 8002742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002744:	23a0      	movs	r3, #160	; 0xa0
 8002746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002748:	2302      	movs	r3, #2
 800274a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800274c:	2302      	movs	r3, #2
 800274e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002750:	2302      	movs	r3, #2
 8002752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002754:	f107 031c 	add.w	r3, r7, #28
 8002758:	4618      	mov	r0, r3
 800275a:	f002 fd89 	bl	8005270 <HAL_RCC_OscConfig>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002764:	f000 fbe6 	bl	8002f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002768:	230f      	movs	r3, #15
 800276a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800276c:	2302      	movs	r3, #2
 800276e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002774:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002778:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800277a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800277e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002780:	f107 0308 	add.w	r3, r7, #8
 8002784:	2105      	movs	r1, #5
 8002786:	4618      	mov	r0, r3
 8002788:	f002 fa28 	bl	8004bdc <HAL_RCC_ClockConfig>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002792:	f000 fbcf 	bl	8002f34 <Error_Handler>
  }
}
 8002796:	bf00      	nop
 8002798:	3750      	adds	r7, #80	; 0x50
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40007000 	.word	0x40007000

080027a8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80027ac:	4b18      	ldr	r3, [pc, #96]	; (8002810 <MX_CAN1_Init+0x68>)
 80027ae:	4a19      	ldr	r2, [pc, #100]	; (8002814 <MX_CAN1_Init+0x6c>)
 80027b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80027b2:	4b17      	ldr	r3, [pc, #92]	; (8002810 <MX_CAN1_Init+0x68>)
 80027b4:	2204      	movs	r2, #4
 80027b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80027b8:	4b15      	ldr	r3, [pc, #84]	; (8002810 <MX_CAN1_Init+0x68>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80027be:	4b14      	ldr	r3, [pc, #80]	; (8002810 <MX_CAN1_Init+0x68>)
 80027c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027c4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <MX_CAN1_Init+0x68>)
 80027c8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80027cc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80027ce:	4b10      	ldr	r3, [pc, #64]	; (8002810 <MX_CAN1_Init+0x68>)
 80027d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027d4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80027d6:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <MX_CAN1_Init+0x68>)
 80027d8:	2200      	movs	r2, #0
 80027da:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <MX_CAN1_Init+0x68>)
 80027de:	2200      	movs	r2, #0
 80027e0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80027e2:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <MX_CAN1_Init+0x68>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80027e8:	4b09      	ldr	r3, [pc, #36]	; (8002810 <MX_CAN1_Init+0x68>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80027ee:	4b08      	ldr	r3, [pc, #32]	; (8002810 <MX_CAN1_Init+0x68>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <MX_CAN1_Init+0x68>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80027fa:	4805      	ldr	r0, [pc, #20]	; (8002810 <MX_CAN1_Init+0x68>)
 80027fc:	f000 ff96 	bl	800372c <HAL_CAN_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8002806:	f000 fb95 	bl	8002f34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000204 	.word	0x20000204
 8002814:	40006400 	.word	0x40006400

08002818 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800281c:	4b18      	ldr	r3, [pc, #96]	; (8002880 <MX_CAN2_Init+0x68>)
 800281e:	4a19      	ldr	r2, [pc, #100]	; (8002884 <MX_CAN2_Init+0x6c>)
 8002820:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 8002822:	4b17      	ldr	r3, [pc, #92]	; (8002880 <MX_CAN2_Init+0x68>)
 8002824:	2204      	movs	r2, #4
 8002826:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002828:	4b15      	ldr	r3, [pc, #84]	; (8002880 <MX_CAN2_Init+0x68>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800282e:	4b14      	ldr	r3, [pc, #80]	; (8002880 <MX_CAN2_Init+0x68>)
 8002830:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002834:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_7TQ;
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <MX_CAN2_Init+0x68>)
 8002838:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800283c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <MX_CAN2_Init+0x68>)
 8002840:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002844:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002846:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <MX_CAN2_Init+0x68>)
 8002848:	2200      	movs	r2, #0
 800284a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <MX_CAN2_Init+0x68>)
 800284e:	2200      	movs	r2, #0
 8002850:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <MX_CAN2_Init+0x68>)
 8002854:	2200      	movs	r2, #0
 8002856:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <MX_CAN2_Init+0x68>)
 800285a:	2200      	movs	r2, #0
 800285c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800285e:	4b08      	ldr	r3, [pc, #32]	; (8002880 <MX_CAN2_Init+0x68>)
 8002860:	2200      	movs	r2, #0
 8002862:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <MX_CAN2_Init+0x68>)
 8002866:	2200      	movs	r2, #0
 8002868:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800286a:	4805      	ldr	r0, [pc, #20]	; (8002880 <MX_CAN2_Init+0x68>)
 800286c:	f000 ff5e 	bl	800372c <HAL_CAN_Init>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8002876:	f000 fb5d 	bl	8002f34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	2000022c 	.word	0x2000022c
 8002884:	40006800 	.word	0x40006800

08002888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800288c:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 800288e:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <MX_USART2_UART_Init+0x50>)
 8002890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 8002894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800289a:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028a6:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028ac:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 80028ae:	220c      	movs	r2, #12
 80028b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028b2:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028be:	4805      	ldr	r0, [pc, #20]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 80028c0:	f002 ff74 	bl	80057ac <HAL_UART_Init>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028ca:	f000 fb33 	bl	8002f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000254 	.word	0x20000254
 80028d8:	40004400 	.word	0x40004400

080028dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e2:	f107 0314 	add.w	r3, r7, #20
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	605a      	str	r2, [r3, #4]
 80028ec:	609a      	str	r2, [r3, #8]
 80028ee:	60da      	str	r2, [r3, #12]
 80028f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	4b41      	ldr	r3, [pc, #260]	; (80029fc <MX_GPIO_Init+0x120>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a40      	ldr	r2, [pc, #256]	; (80029fc <MX_GPIO_Init+0x120>)
 80028fc:	f043 0304 	orr.w	r3, r3, #4
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b3e      	ldr	r3, [pc, #248]	; (80029fc <MX_GPIO_Init+0x120>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	4b3a      	ldr	r3, [pc, #232]	; (80029fc <MX_GPIO_Init+0x120>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a39      	ldr	r2, [pc, #228]	; (80029fc <MX_GPIO_Init+0x120>)
 8002918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b37      	ldr	r3, [pc, #220]	; (80029fc <MX_GPIO_Init+0x120>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	4b33      	ldr	r3, [pc, #204]	; (80029fc <MX_GPIO_Init+0x120>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a32      	ldr	r2, [pc, #200]	; (80029fc <MX_GPIO_Init+0x120>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b30      	ldr	r3, [pc, #192]	; (80029fc <MX_GPIO_Init+0x120>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	607b      	str	r3, [r7, #4]
 800294a:	4b2c      	ldr	r3, [pc, #176]	; (80029fc <MX_GPIO_Init+0x120>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	4a2b      	ldr	r2, [pc, #172]	; (80029fc <MX_GPIO_Init+0x120>)
 8002950:	f043 0302 	orr.w	r3, r3, #2
 8002954:	6313      	str	r3, [r2, #48]	; 0x30
 8002956:	4b29      	ldr	r3, [pc, #164]	; (80029fc <MX_GPIO_Init+0x120>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002962:	2200      	movs	r2, #0
 8002964:	2120      	movs	r1, #32
 8002966:	4826      	ldr	r0, [pc, #152]	; (8002a00 <MX_GPIO_Init+0x124>)
 8002968:	f002 f906 	bl	8004b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800296c:	2200      	movs	r2, #0
 800296e:	2110      	movs	r1, #16
 8002970:	4824      	ldr	r0, [pc, #144]	; (8002a04 <MX_GPIO_Init+0x128>)
 8002972:	f002 f901 	bl	8004b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002976:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800297a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800297c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002986:	f107 0314 	add.w	r3, r7, #20
 800298a:	4619      	mov	r1, r3
 800298c:	481e      	ldr	r0, [pc, #120]	; (8002a08 <MX_GPIO_Init+0x12c>)
 800298e:	f001 ff47 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002992:	2320      	movs	r3, #32
 8002994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002996:	2301      	movs	r3, #1
 8002998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299e:	2300      	movs	r3, #0
 80029a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80029a2:	f107 0314 	add.w	r3, r7, #20
 80029a6:	4619      	mov	r1, r3
 80029a8:	4815      	ldr	r0, [pc, #84]	; (8002a00 <MX_GPIO_Init+0x124>)
 80029aa:	f001 ff39 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029ae:	2310      	movs	r3, #16
 80029b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b2:	2301      	movs	r3, #1
 80029b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ba:	2300      	movs	r3, #0
 80029bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029be:	f107 0314 	add.w	r3, r7, #20
 80029c2:	4619      	mov	r1, r3
 80029c4:	480f      	ldr	r0, [pc, #60]	; (8002a04 <MX_GPIO_Init+0x128>)
 80029c6:	f001 ff2b 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80029ca:	2360      	movs	r3, #96	; 0x60
 80029cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80029ce:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80029d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	4619      	mov	r1, r3
 80029de:	4809      	ldr	r0, [pc, #36]	; (8002a04 <MX_GPIO_Init+0x128>)
 80029e0:	f001 ff1e 	bl	8004820 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80029e4:	2200      	movs	r2, #0
 80029e6:	2100      	movs	r1, #0
 80029e8:	2017      	movs	r0, #23
 80029ea:	f001 fe50 	bl	800468e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80029ee:	2017      	movs	r0, #23
 80029f0:	f001 fe69 	bl	80046c6 <HAL_NVIC_EnableIRQ>

}
 80029f4:	bf00      	nop
 80029f6:	3728      	adds	r7, #40	; 0x28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40020000 	.word	0x40020000
 8002a04:	40020400 	.word	0x40020400
 8002a08:	40020800 	.word	0x40020800

08002a0c <BLDC_FK>:

/* USER CODE BEGIN 4 */
void BLDC_FK(float s1,float s2,float* xp,float* yp){
 8002a0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	ed87 0a03 	vstr	s0, [r7, #12]
 8002a18:	edc7 0a02 	vstr	s1, [r7, #8]
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
	float x=0.0;
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
	float y=0.0;
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	613b      	str	r3, [r7, #16]
	x=l1*cos(s1)+l2*cos(s1+s2);
 8002a2c:	4b5a      	ldr	r3, [pc, #360]	; (8002b98 <BLDC_FK+0x18c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fda9 	bl	8000588 <__aeabi_f2d>
 8002a36:	4604      	mov	r4, r0
 8002a38:	460d      	mov	r5, r1
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f7fd fda4 	bl	8000588 <__aeabi_f2d>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	ec43 2b10 	vmov	d0, r2, r3
 8002a48:	f006 fcce 	bl	80093e8 <cos>
 8002a4c:	ec53 2b10 	vmov	r2, r3, d0
 8002a50:	4620      	mov	r0, r4
 8002a52:	4629      	mov	r1, r5
 8002a54:	f7fd fdf0 	bl	8000638 <__aeabi_dmul>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4690      	mov	r8, r2
 8002a5e:	4699      	mov	r9, r3
 8002a60:	4b4e      	ldr	r3, [pc, #312]	; (8002b9c <BLDC_FK+0x190>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fd fd8f 	bl	8000588 <__aeabi_f2d>
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	460d      	mov	r5, r1
 8002a6e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a72:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a7a:	ee17 0a90 	vmov	r0, s15
 8002a7e:	f7fd fd83 	bl	8000588 <__aeabi_f2d>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	ec43 2b10 	vmov	d0, r2, r3
 8002a8a:	f006 fcad 	bl	80093e8 <cos>
 8002a8e:	ec53 2b10 	vmov	r2, r3, d0
 8002a92:	4620      	mov	r0, r4
 8002a94:	4629      	mov	r1, r5
 8002a96:	f7fd fdcf 	bl	8000638 <__aeabi_dmul>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4640      	mov	r0, r8
 8002aa0:	4649      	mov	r1, r9
 8002aa2:	f7fd fc13 	bl	80002cc <__adddf3>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	f7fe f89b 	bl	8000be8 <__aeabi_d2f>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	617b      	str	r3, [r7, #20]
	y=l1*sin(s1)+l2*sin(s1+s2);
 8002ab6:	4b38      	ldr	r3, [pc, #224]	; (8002b98 <BLDC_FK+0x18c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fd fd64 	bl	8000588 <__aeabi_f2d>
 8002ac0:	4604      	mov	r4, r0
 8002ac2:	460d      	mov	r5, r1
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f7fd fd5f 	bl	8000588 <__aeabi_f2d>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	ec43 2b10 	vmov	d0, r2, r3
 8002ad2:	f006 fd25 	bl	8009520 <sin>
 8002ad6:	ec53 2b10 	vmov	r2, r3, d0
 8002ada:	4620      	mov	r0, r4
 8002adc:	4629      	mov	r1, r5
 8002ade:	f7fd fdab 	bl	8000638 <__aeabi_dmul>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4690      	mov	r8, r2
 8002ae8:	4699      	mov	r9, r3
 8002aea:	4b2c      	ldr	r3, [pc, #176]	; (8002b9c <BLDC_FK+0x190>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fd fd4a 	bl	8000588 <__aeabi_f2d>
 8002af4:	4604      	mov	r4, r0
 8002af6:	460d      	mov	r5, r1
 8002af8:	ed97 7a03 	vldr	s14, [r7, #12]
 8002afc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b04:	ee17 0a90 	vmov	r0, s15
 8002b08:	f7fd fd3e 	bl	8000588 <__aeabi_f2d>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	ec43 2b10 	vmov	d0, r2, r3
 8002b14:	f006 fd04 	bl	8009520 <sin>
 8002b18:	ec53 2b10 	vmov	r2, r3, d0
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	4629      	mov	r1, r5
 8002b20:	f7fd fd8a 	bl	8000638 <__aeabi_dmul>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4640      	mov	r0, r8
 8002b2a:	4649      	mov	r1, r9
 8002b2c:	f7fd fbce 	bl	80002cc <__adddf3>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4610      	mov	r0, r2
 8002b36:	4619      	mov	r1, r3
 8002b38:	f7fe f856 	bl	8000be8 <__aeabi_d2f>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	613b      	str	r3, [r7, #16]
	printf("s1=%f\r\n",s1);
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f7fd fd21 	bl	8000588 <__aeabi_f2d>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4815      	ldr	r0, [pc, #84]	; (8002ba0 <BLDC_FK+0x194>)
 8002b4c:	f004 fb86 	bl	800725c <iprintf>
	printf("s2=%f\r\n",s2);
 8002b50:	68b8      	ldr	r0, [r7, #8]
 8002b52:	f7fd fd19 	bl	8000588 <__aeabi_f2d>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4812      	ldr	r0, [pc, #72]	; (8002ba4 <BLDC_FK+0x198>)
 8002b5c:	f004 fb7e 	bl	800725c <iprintf>
	printf("x=%f\r\n",x);
 8002b60:	6978      	ldr	r0, [r7, #20]
 8002b62:	f7fd fd11 	bl	8000588 <__aeabi_f2d>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	480f      	ldr	r0, [pc, #60]	; (8002ba8 <BLDC_FK+0x19c>)
 8002b6c:	f004 fb76 	bl	800725c <iprintf>
	printf("y=%f\r\n",y);
 8002b70:	6938      	ldr	r0, [r7, #16]
 8002b72:	f7fd fd09 	bl	8000588 <__aeabi_f2d>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	480c      	ldr	r0, [pc, #48]	; (8002bac <BLDC_FK+0x1a0>)
 8002b7c:	f004 fb6e 	bl	800725c <iprintf>
	*xp=x;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	601a      	str	r2, [r3, #0]
	*yp=y;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	601a      	str	r2, [r3, #0]
}
 8002b8c:	bf00      	nop
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b96:	bf00      	nop
 8002b98:	20000000 	.word	0x20000000
 8002b9c:	20000004 	.word	0x20000004
 8002ba0:	0800b158 	.word	0x0800b158
 8002ba4:	0800b160 	.word	0x0800b160
 8002ba8:	0800b168 	.word	0x0800b168
 8002bac:	0800b170 	.word	0x0800b170

08002bb0 <BLDC_IK>:
void BLDC_IK(float x,float y,float* s1p,float* s2p){
 8002bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bb4:	ed2d 8b02 	vpush	{d8}
 8002bb8:	b086      	sub	sp, #24
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	ed87 0a03 	vstr	s0, [r7, #12]
 8002bc0:	edc7 0a02 	vstr	s1, [r7, #8]
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	6039      	str	r1, [r7, #0]
	float s1=0.0;
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
	float s2=0.0;
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	613b      	str	r3, [r7, #16]
	s2=-acos((x*x+y*y-l1*l1-l2*l2)/(2*l1*l2));
 8002bd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bd8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002bdc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002be0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002be4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002be8:	4b9e      	ldr	r3, [pc, #632]	; (8002e64 <BLDC_IK+0x2b4>)
 8002bea:	edd3 6a00 	vldr	s13, [r3]
 8002bee:	4b9d      	ldr	r3, [pc, #628]	; (8002e64 <BLDC_IK+0x2b4>)
 8002bf0:	edd3 7a00 	vldr	s15, [r3]
 8002bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bfc:	4b9a      	ldr	r3, [pc, #616]	; (8002e68 <BLDC_IK+0x2b8>)
 8002bfe:	edd3 6a00 	vldr	s13, [r3]
 8002c02:	4b99      	ldr	r3, [pc, #612]	; (8002e68 <BLDC_IK+0x2b8>)
 8002c04:	edd3 7a00 	vldr	s15, [r3]
 8002c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c10:	4b94      	ldr	r3, [pc, #592]	; (8002e64 <BLDC_IK+0x2b4>)
 8002c12:	edd3 7a00 	vldr	s15, [r3]
 8002c16:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c1a:	4b93      	ldr	r3, [pc, #588]	; (8002e68 <BLDC_IK+0x2b8>)
 8002c1c:	edd3 7a00 	vldr	s15, [r3]
 8002c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c24:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c28:	ee16 0a90 	vmov	r0, s13
 8002c2c:	f7fd fcac 	bl	8000588 <__aeabi_f2d>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	ec43 2b10 	vmov	d0, r2, r3
 8002c38:	f006 fcca 	bl	80095d0 <acos>
 8002c3c:	ec53 2b10 	vmov	r2, r3, d0
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	f7fd ffd0 	bl	8000be8 <__aeabi_d2f>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	ee07 3a90 	vmov	s15, r3
 8002c4e:	eef1 7a67 	vneg.f32	s15, s15
 8002c52:	edc7 7a04 	vstr	s15, [r7, #16]
	s1=atan2((-l2*sin(s2)*x+(l1+l2*cos(s2))*y),((l1+l2*cos(s2))*x+l2*sin(s2)*y));
 8002c56:	4b84      	ldr	r3, [pc, #528]	; (8002e68 <BLDC_IK+0x2b8>)
 8002c58:	edd3 7a00 	vldr	s15, [r3]
 8002c5c:	eef1 7a67 	vneg.f32	s15, s15
 8002c60:	ee17 3a90 	vmov	r3, s15
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fd fc8f 	bl	8000588 <__aeabi_f2d>
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	460d      	mov	r5, r1
 8002c6e:	6938      	ldr	r0, [r7, #16]
 8002c70:	f7fd fc8a 	bl	8000588 <__aeabi_f2d>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	ec43 2b10 	vmov	d0, r2, r3
 8002c7c:	f006 fc50 	bl	8009520 <sin>
 8002c80:	ec53 2b10 	vmov	r2, r3, d0
 8002c84:	4620      	mov	r0, r4
 8002c86:	4629      	mov	r1, r5
 8002c88:	f7fd fcd6 	bl	8000638 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4614      	mov	r4, r2
 8002c92:	461d      	mov	r5, r3
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f7fd fc77 	bl	8000588 <__aeabi_f2d>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	f7fd fcc9 	bl	8000638 <__aeabi_dmul>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4692      	mov	sl, r2
 8002cac:	469b      	mov	fp, r3
 8002cae:	4b6d      	ldr	r3, [pc, #436]	; (8002e64 <BLDC_IK+0x2b4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fc68 	bl	8000588 <__aeabi_f2d>
 8002cb8:	4604      	mov	r4, r0
 8002cba:	460d      	mov	r5, r1
 8002cbc:	4b6a      	ldr	r3, [pc, #424]	; (8002e68 <BLDC_IK+0x2b8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fc61 	bl	8000588 <__aeabi_f2d>
 8002cc6:	4680      	mov	r8, r0
 8002cc8:	4689      	mov	r9, r1
 8002cca:	6938      	ldr	r0, [r7, #16]
 8002ccc:	f7fd fc5c 	bl	8000588 <__aeabi_f2d>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	ec43 2b10 	vmov	d0, r2, r3
 8002cd8:	f006 fb86 	bl	80093e8 <cos>
 8002cdc:	ec53 2b10 	vmov	r2, r3, d0
 8002ce0:	4640      	mov	r0, r8
 8002ce2:	4649      	mov	r1, r9
 8002ce4:	f7fd fca8 	bl	8000638 <__aeabi_dmul>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4620      	mov	r0, r4
 8002cee:	4629      	mov	r1, r5
 8002cf0:	f7fd faec 	bl	80002cc <__adddf3>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4614      	mov	r4, r2
 8002cfa:	461d      	mov	r5, r3
 8002cfc:	68b8      	ldr	r0, [r7, #8]
 8002cfe:	f7fd fc43 	bl	8000588 <__aeabi_f2d>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4620      	mov	r0, r4
 8002d08:	4629      	mov	r1, r5
 8002d0a:	f7fd fc95 	bl	8000638 <__aeabi_dmul>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4650      	mov	r0, sl
 8002d14:	4659      	mov	r1, fp
 8002d16:	f7fd fad9 	bl	80002cc <__adddf3>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	ec43 2b18 	vmov	d8, r2, r3
 8002d22:	4b50      	ldr	r3, [pc, #320]	; (8002e64 <BLDC_IK+0x2b4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fd fc2e 	bl	8000588 <__aeabi_f2d>
 8002d2c:	4604      	mov	r4, r0
 8002d2e:	460d      	mov	r5, r1
 8002d30:	4b4d      	ldr	r3, [pc, #308]	; (8002e68 <BLDC_IK+0x2b8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fd fc27 	bl	8000588 <__aeabi_f2d>
 8002d3a:	4680      	mov	r8, r0
 8002d3c:	4689      	mov	r9, r1
 8002d3e:	6938      	ldr	r0, [r7, #16]
 8002d40:	f7fd fc22 	bl	8000588 <__aeabi_f2d>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	ec43 2b10 	vmov	d0, r2, r3
 8002d4c:	f006 fb4c 	bl	80093e8 <cos>
 8002d50:	ec53 2b10 	vmov	r2, r3, d0
 8002d54:	4640      	mov	r0, r8
 8002d56:	4649      	mov	r1, r9
 8002d58:	f7fd fc6e 	bl	8000638 <__aeabi_dmul>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4620      	mov	r0, r4
 8002d62:	4629      	mov	r1, r5
 8002d64:	f7fd fab2 	bl	80002cc <__adddf3>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4614      	mov	r4, r2
 8002d6e:	461d      	mov	r5, r3
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f7fd fc09 	bl	8000588 <__aeabi_f2d>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	f7fd fc5b 	bl	8000638 <__aeabi_dmul>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4690      	mov	r8, r2
 8002d88:	4699      	mov	r9, r3
 8002d8a:	4b37      	ldr	r3, [pc, #220]	; (8002e68 <BLDC_IK+0x2b8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd fbfa 	bl	8000588 <__aeabi_f2d>
 8002d94:	4604      	mov	r4, r0
 8002d96:	460d      	mov	r5, r1
 8002d98:	6938      	ldr	r0, [r7, #16]
 8002d9a:	f7fd fbf5 	bl	8000588 <__aeabi_f2d>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	ec43 2b10 	vmov	d0, r2, r3
 8002da6:	f006 fbbb 	bl	8009520 <sin>
 8002daa:	ec53 2b10 	vmov	r2, r3, d0
 8002dae:	4620      	mov	r0, r4
 8002db0:	4629      	mov	r1, r5
 8002db2:	f7fd fc41 	bl	8000638 <__aeabi_dmul>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4614      	mov	r4, r2
 8002dbc:	461d      	mov	r5, r3
 8002dbe:	68b8      	ldr	r0, [r7, #8]
 8002dc0:	f7fd fbe2 	bl	8000588 <__aeabi_f2d>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4620      	mov	r0, r4
 8002dca:	4629      	mov	r1, r5
 8002dcc:	f7fd fc34 	bl	8000638 <__aeabi_dmul>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4640      	mov	r0, r8
 8002dd6:	4649      	mov	r1, r9
 8002dd8:	f7fd fa78 	bl	80002cc <__adddf3>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	ec43 2b17 	vmov	d7, r2, r3
 8002de4:	eeb0 1a47 	vmov.f32	s2, s14
 8002de8:	eef0 1a67 	vmov.f32	s3, s15
 8002dec:	eeb0 0a48 	vmov.f32	s0, s16
 8002df0:	eef0 0a68 	vmov.f32	s1, s17
 8002df4:	f006 fc20 	bl	8009638 <atan2>
 8002df8:	ec53 2b10 	vmov	r2, r3, d0
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4619      	mov	r1, r3
 8002e00:	f7fd fef2 	bl	8000be8 <__aeabi_d2f>
 8002e04:	4603      	mov	r3, r0
 8002e06:	617b      	str	r3, [r7, #20]
	printf("s1=%f\r\n",s1);
 8002e08:	6978      	ldr	r0, [r7, #20]
 8002e0a:	f7fd fbbd 	bl	8000588 <__aeabi_f2d>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4816      	ldr	r0, [pc, #88]	; (8002e6c <BLDC_IK+0x2bc>)
 8002e14:	f004 fa22 	bl	800725c <iprintf>
	printf("s2=%f\r\n",s2);
 8002e18:	6938      	ldr	r0, [r7, #16]
 8002e1a:	f7fd fbb5 	bl	8000588 <__aeabi_f2d>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4813      	ldr	r0, [pc, #76]	; (8002e70 <BLDC_IK+0x2c0>)
 8002e24:	f004 fa1a 	bl	800725c <iprintf>
	printf("x=%f\r\n",x);
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f7fd fbad 	bl	8000588 <__aeabi_f2d>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4810      	ldr	r0, [pc, #64]	; (8002e74 <BLDC_IK+0x2c4>)
 8002e34:	f004 fa12 	bl	800725c <iprintf>
	printf("y=%f\r\n",y);
 8002e38:	68b8      	ldr	r0, [r7, #8]
 8002e3a:	f7fd fba5 	bl	8000588 <__aeabi_f2d>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	480d      	ldr	r0, [pc, #52]	; (8002e78 <BLDC_IK+0x2c8>)
 8002e44:	f004 fa0a 	bl	800725c <iprintf>
	*s1p=s1;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	601a      	str	r2, [r3, #0]
	*s2p=s2;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	601a      	str	r2, [r3, #0]
}
 8002e54:	bf00      	nop
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	ecbd 8b02 	vpop	{d8}
 8002e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e62:	bf00      	nop
 8002e64:	20000000 	.word	0x20000000
 8002e68:	20000004 	.word	0x20000004
 8002e6c:	0800b158 	.word	0x0800b158
 8002e70:	0800b160 	.word	0x0800b160
 8002e74:	0800b168 	.word	0x0800b168
 8002e78:	0800b170 	.word	0x0800b170

08002e7c <HAL_UART_RxCpltCallback>:
//  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
//  return len;
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*UartHandle)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
	get_uart_flag=1;
 8002e84:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <HAL_UART_RxCpltCallback+0x54>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
//	HAL_UART_Transmit(&huart2, (uint8_t *)RxData, buffersize,10);
	HAL_UART_Receive_IT(&huart2, (uint8_t *)RxData, buffersize);
 8002e8a:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <HAL_UART_RxCpltCallback+0x58>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	4911      	ldr	r1, [pc, #68]	; (8002ed8 <HAL_UART_RxCpltCallback+0x5c>)
 8002e94:	4811      	ldr	r0, [pc, #68]	; (8002edc <HAL_UART_RxCpltCallback+0x60>)
 8002e96:	f002 fdad 	bl	80059f4 <HAL_UART_Receive_IT>
	if(RxData[0]==0xAA&&RxData[1]==0xCC&&RxData[(buffersize-1)]==0xAA){
 8002e9a:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <HAL_UART_RxCpltCallback+0x5c>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2baa      	cmp	r3, #170	; 0xaa
 8002ea0:	d112      	bne.n	8002ec8 <HAL_UART_RxCpltCallback+0x4c>
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <HAL_UART_RxCpltCallback+0x5c>)
 8002ea4:	785b      	ldrb	r3, [r3, #1]
 8002ea6:	2bcc      	cmp	r3, #204	; 0xcc
 8002ea8:	d10e      	bne.n	8002ec8 <HAL_UART_RxCpltCallback+0x4c>
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <HAL_UART_RxCpltCallback+0x58>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	4a09      	ldr	r2, [pc, #36]	; (8002ed8 <HAL_UART_RxCpltCallback+0x5c>)
 8002eb2:	5cd3      	ldrb	r3, [r2, r3]
 8002eb4:	2baa      	cmp	r3, #170	; 0xaa
 8002eb6:	d107      	bne.n	8002ec8 <HAL_UART_RxCpltCallback+0x4c>
		HAL_UART_Transmit_IT(&huart2, (uint8_t *)RxData, buffersize);
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_UART_RxCpltCallback+0x58>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4905      	ldr	r1, [pc, #20]	; (8002ed8 <HAL_UART_RxCpltCallback+0x5c>)
 8002ec2:	4806      	ldr	r0, [pc, #24]	; (8002edc <HAL_UART_RxCpltCallback+0x60>)
 8002ec4:	f002 fd51 	bl	800596a <HAL_UART_Transmit_IT>
	}

}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	20000339 	.word	0x20000339
 8002ed4:	20000008 	.word	0x20000008
 8002ed8:	20000308 	.word	0x20000308
 8002edc:	20000254 	.word	0x20000254

08002ee0 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
	  nextcan_flag=1;
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	701a      	strb	r2, [r3, #0]
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	2000033b 	.word	0x2000033b

08002f00 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	get_can_flag=1;
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
//	printf("RxCan\r\n");
	HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0, &RxHeader,data);
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8002f10:	4a06      	ldr	r2, [pc, #24]	; (8002f2c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8002f12:	2100      	movs	r1, #0
 8002f14:	4806      	ldr	r0, [pc, #24]	; (8002f30 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002f16:	f000 ff82 	bl	8003e1e <HAL_CAN_GetRxMessage>

}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	2000033a 	.word	0x2000033a
 8002f28:	2000031c 	.word	0x2000031c
 8002f2c:	200002d8 	.word	0x200002d8
 8002f30:	20000204 	.word	0x20000204

08002f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f38:	b672      	cpsid	i
}
 8002f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f3c:	e7fe      	b.n	8002f3c <Error_Handler+0x8>

08002f3e <fmaxf>:
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	ed87 0a01 	vstr	s0, [r7, #4]
 8002f48:	edc7 0a00 	vstr	s1, [r7]
 8002f4c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f50:	edd7 7a00 	vldr	s15, [r7]
 8002f54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5c:	dd01      	ble.n	8002f62 <fmaxf+0x24>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	e000      	b.n	8002f64 <fmaxf+0x26>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	ee07 3a90 	vmov	s15, r3
 8002f68:	eeb0 0a67 	vmov.f32	s0, s15
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <fminf>:
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	ed87 0a01 	vstr	s0, [r7, #4]
 8002f80:	edc7 0a00 	vstr	s1, [r7]
 8002f84:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f88:	edd7 7a00 	vldr	s15, [r7]
 8002f8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f94:	d501      	bpl.n	8002f9a <fminf+0x24>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	e000      	b.n	8002f9c <fminf+0x26>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	ee07 3a90 	vmov	s15, r3
 8002fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <float_to_uint>:
 8002fae:	b480      	push	{r7}
 8002fb0:	b087      	sub	sp, #28
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	ed87 0a03 	vstr	s0, [r7, #12]
 8002fb8:	edc7 0a02 	vstr	s1, [r7, #8]
 8002fbc:	ed87 1a01 	vstr	s2, [r7, #4]
 8002fc0:	6038      	str	r0, [r7, #0]
 8002fc2:	ed97 7a01 	vldr	s14, [r7, #4]
 8002fc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fce:	edc7 7a05 	vstr	s15, [r7, #20]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fda:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	ee07 3a90 	vmov	s15, r3
 8002ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ff4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002ff8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003004:	ee17 3a90 	vmov	r3, s15
 8003008:	4618      	mov	r0, r3
 800300a:	371c      	adds	r7, #28
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <uint_to_float>:
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003020:	edc7 0a01 	vstr	s1, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
 8003026:	ed97 7a01 	vldr	s14, [r7, #4]
 800302a:	edd7 7a02 	vldr	s15, [r7, #8]
 800302e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003032:	edc7 7a05 	vstr	s15, [r7, #20]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	ee07 3a90 	vmov	s15, r3
 8003040:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003044:	edd7 7a05 	vldr	s15, [r7, #20]
 8003048:	ee67 6a27 	vmul.f32	s13, s14, s15
 800304c:	2201      	movs	r2, #1
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800305e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003062:	edd7 7a04 	vldr	s15, [r7, #16]
 8003066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800306a:	eeb0 0a67 	vmov.f32	s0, s15
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]
 8003082:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <HAL_MspInit+0x4c>)
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	4a0f      	ldr	r2, [pc, #60]	; (80030c4 <HAL_MspInit+0x4c>)
 8003088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800308c:	6453      	str	r3, [r2, #68]	; 0x44
 800308e:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <HAL_MspInit+0x4c>)
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	603b      	str	r3, [r7, #0]
 800309e:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <HAL_MspInit+0x4c>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	4a08      	ldr	r2, [pc, #32]	; (80030c4 <HAL_MspInit+0x4c>)
 80030a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a8:	6413      	str	r3, [r2, #64]	; 0x40
 80030aa:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <HAL_MspInit+0x4c>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800

080030c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08c      	sub	sp, #48	; 0x30
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d0:	f107 031c 	add.w	r3, r7, #28
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a64      	ldr	r2, [pc, #400]	; (8003278 <HAL_CAN_MspInit+0x1b0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d157      	bne.n	800319a <HAL_CAN_MspInit+0xd2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80030ea:	4b64      	ldr	r3, [pc, #400]	; (800327c <HAL_CAN_MspInit+0x1b4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3301      	adds	r3, #1
 80030f0:	4a62      	ldr	r2, [pc, #392]	; (800327c <HAL_CAN_MspInit+0x1b4>)
 80030f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80030f4:	4b61      	ldr	r3, [pc, #388]	; (800327c <HAL_CAN_MspInit+0x1b4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d10d      	bne.n	8003118 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80030fc:	2300      	movs	r3, #0
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	4b5f      	ldr	r3, [pc, #380]	; (8003280 <HAL_CAN_MspInit+0x1b8>)
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	4a5e      	ldr	r2, [pc, #376]	; (8003280 <HAL_CAN_MspInit+0x1b8>)
 8003106:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800310a:	6413      	str	r3, [r2, #64]	; 0x40
 800310c:	4b5c      	ldr	r3, [pc, #368]	; (8003280 <HAL_CAN_MspInit+0x1b8>)
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003114:	61bb      	str	r3, [r7, #24]
 8003116:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	4b58      	ldr	r3, [pc, #352]	; (8003280 <HAL_CAN_MspInit+0x1b8>)
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	4a57      	ldr	r2, [pc, #348]	; (8003280 <HAL_CAN_MspInit+0x1b8>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	6313      	str	r3, [r2, #48]	; 0x30
 8003128:	4b55      	ldr	r3, [pc, #340]	; (8003280 <HAL_CAN_MspInit+0x1b8>)
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003134:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313a:	2302      	movs	r3, #2
 800313c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003142:	2303      	movs	r3, #3
 8003144:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003146:	2309      	movs	r3, #9
 8003148:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800314a:	f107 031c 	add.w	r3, r7, #28
 800314e:	4619      	mov	r1, r3
 8003150:	484c      	ldr	r0, [pc, #304]	; (8003284 <HAL_CAN_MspInit+0x1bc>)
 8003152:	f001 fb65 	bl	8004820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800315a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315c:	2302      	movs	r3, #2
 800315e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003160:	2301      	movs	r3, #1
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003164:	2303      	movs	r3, #3
 8003166:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003168:	2309      	movs	r3, #9
 800316a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316c:	f107 031c 	add.w	r3, r7, #28
 8003170:	4619      	mov	r1, r3
 8003172:	4844      	ldr	r0, [pc, #272]	; (8003284 <HAL_CAN_MspInit+0x1bc>)
 8003174:	f001 fb54 	bl	8004820 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8003178:	2200      	movs	r2, #0
 800317a:	2100      	movs	r1, #0
 800317c:	2013      	movs	r0, #19
 800317e:	f001 fa86 	bl	800468e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003182:	2013      	movs	r0, #19
 8003184:	f001 fa9f 	bl	80046c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003188:	2200      	movs	r2, #0
 800318a:	2100      	movs	r1, #0
 800318c:	2014      	movs	r0, #20
 800318e:	f001 fa7e 	bl	800468e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003192:	2014      	movs	r0, #20
 8003194:	f001 fa97 	bl	80046c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003198:	e069      	b.n	800326e <HAL_CAN_MspInit+0x1a6>
  else if(hcan->Instance==CAN2)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a3a      	ldr	r2, [pc, #232]	; (8003288 <HAL_CAN_MspInit+0x1c0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d164      	bne.n	800326e <HAL_CAN_MspInit+0x1a6>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80031a4:	2300      	movs	r3, #0
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	4b35      	ldr	r3, [pc, #212]	; (8003280 <HAL_CAN_MspInit+0x1b8>)
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	4a34      	ldr	r2, [pc, #208]	; (8003280 <HAL_CAN_MspInit+0x1b8>)
 80031ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031b2:	6413      	str	r3, [r2, #64]	; 0x40
 80031b4:	4b32      	ldr	r3, [pc, #200]	; (8003280 <HAL_CAN_MspInit+0x1b8>)
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80031c0:	4b2e      	ldr	r3, [pc, #184]	; (800327c <HAL_CAN_MspInit+0x1b4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3301      	adds	r3, #1
 80031c6:	4a2d      	ldr	r2, [pc, #180]	; (800327c <HAL_CAN_MspInit+0x1b4>)
 80031c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80031ca:	4b2c      	ldr	r3, [pc, #176]	; (800327c <HAL_CAN_MspInit+0x1b4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d10d      	bne.n	80031ee <HAL_CAN_MspInit+0x126>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	4b2a      	ldr	r3, [pc, #168]	; (8003280 <HAL_CAN_MspInit+0x1b8>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	4a29      	ldr	r2, [pc, #164]	; (8003280 <HAL_CAN_MspInit+0x1b8>)
 80031dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031e0:	6413      	str	r3, [r2, #64]	; 0x40
 80031e2:	4b27      	ldr	r3, [pc, #156]	; (8003280 <HAL_CAN_MspInit+0x1b8>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	4b23      	ldr	r3, [pc, #140]	; (8003280 <HAL_CAN_MspInit+0x1b8>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	4a22      	ldr	r2, [pc, #136]	; (8003280 <HAL_CAN_MspInit+0x1b8>)
 80031f8:	f043 0302 	orr.w	r3, r3, #2
 80031fc:	6313      	str	r3, [r2, #48]	; 0x30
 80031fe:	4b20      	ldr	r3, [pc, #128]	; (8003280 <HAL_CAN_MspInit+0x1b8>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800320a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800320e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003210:	2302      	movs	r3, #2
 8003212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003214:	2300      	movs	r3, #0
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003218:	2303      	movs	r3, #3
 800321a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800321c:	2309      	movs	r3, #9
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003220:	f107 031c 	add.w	r3, r7, #28
 8003224:	4619      	mov	r1, r3
 8003226:	4819      	ldr	r0, [pc, #100]	; (800328c <HAL_CAN_MspInit+0x1c4>)
 8003228:	f001 fafa 	bl	8004820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800322c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003232:	2302      	movs	r3, #2
 8003234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003236:	2301      	movs	r3, #1
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800323a:	2303      	movs	r3, #3
 800323c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800323e:	2309      	movs	r3, #9
 8003240:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003242:	f107 031c 	add.w	r3, r7, #28
 8003246:	4619      	mov	r1, r3
 8003248:	4810      	ldr	r0, [pc, #64]	; (800328c <HAL_CAN_MspInit+0x1c4>)
 800324a:	f001 fae9 	bl	8004820 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 800324e:	2200      	movs	r2, #0
 8003250:	2100      	movs	r1, #0
 8003252:	203f      	movs	r0, #63	; 0x3f
 8003254:	f001 fa1b 	bl	800468e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8003258:	203f      	movs	r0, #63	; 0x3f
 800325a:	f001 fa34 	bl	80046c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800325e:	2200      	movs	r2, #0
 8003260:	2100      	movs	r1, #0
 8003262:	2040      	movs	r0, #64	; 0x40
 8003264:	f001 fa13 	bl	800468e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003268:	2040      	movs	r0, #64	; 0x40
 800326a:	f001 fa2c 	bl	80046c6 <HAL_NVIC_EnableIRQ>
}
 800326e:	bf00      	nop
 8003270:	3730      	adds	r7, #48	; 0x30
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40006400 	.word	0x40006400
 800327c:	20000358 	.word	0x20000358
 8003280:	40023800 	.word	0x40023800
 8003284:	40020000 	.word	0x40020000
 8003288:	40006800 	.word	0x40006800
 800328c:	40020400 	.word	0x40020400

08003290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08a      	sub	sp, #40	; 0x28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003298:	f107 0314 	add.w	r3, r7, #20
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	60da      	str	r2, [r3, #12]
 80032a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a1d      	ldr	r2, [pc, #116]	; (8003324 <HAL_UART_MspInit+0x94>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d133      	bne.n	800331a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	4b1c      	ldr	r3, [pc, #112]	; (8003328 <HAL_UART_MspInit+0x98>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	4a1b      	ldr	r2, [pc, #108]	; (8003328 <HAL_UART_MspInit+0x98>)
 80032bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c0:	6413      	str	r3, [r2, #64]	; 0x40
 80032c2:	4b19      	ldr	r3, [pc, #100]	; (8003328 <HAL_UART_MspInit+0x98>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	4b15      	ldr	r3, [pc, #84]	; (8003328 <HAL_UART_MspInit+0x98>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	4a14      	ldr	r2, [pc, #80]	; (8003328 <HAL_UART_MspInit+0x98>)
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	6313      	str	r3, [r2, #48]	; 0x30
 80032de:	4b12      	ldr	r3, [pc, #72]	; (8003328 <HAL_UART_MspInit+0x98>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80032ea:	230c      	movs	r3, #12
 80032ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ee:	2302      	movs	r3, #2
 80032f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f6:	2303      	movs	r3, #3
 80032f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032fa:	2307      	movs	r3, #7
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fe:	f107 0314 	add.w	r3, r7, #20
 8003302:	4619      	mov	r1, r3
 8003304:	4809      	ldr	r0, [pc, #36]	; (800332c <HAL_UART_MspInit+0x9c>)
 8003306:	f001 fa8b 	bl	8004820 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800330a:	2200      	movs	r2, #0
 800330c:	2100      	movs	r1, #0
 800330e:	2026      	movs	r0, #38	; 0x26
 8003310:	f001 f9bd 	bl	800468e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003314:	2026      	movs	r0, #38	; 0x26
 8003316:	f001 f9d6 	bl	80046c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800331a:	bf00      	nop
 800331c:	3728      	adds	r7, #40	; 0x28
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40004400 	.word	0x40004400
 8003328:	40023800 	.word	0x40023800
 800332c:	40020000 	.word	0x40020000

08003330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003334:	e7fe      	b.n	8003334 <NMI_Handler+0x4>

08003336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003336:	b480      	push	{r7}
 8003338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800333a:	e7fe      	b.n	800333a <HardFault_Handler+0x4>

0800333c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003340:	e7fe      	b.n	8003340 <MemManage_Handler+0x4>

08003342 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003342:	b480      	push	{r7}
 8003344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003346:	e7fe      	b.n	8003346 <BusFault_Handler+0x4>

08003348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800334c:	e7fe      	b.n	800334c <UsageFault_Handler+0x4>

0800334e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800334e:	b480      	push	{r7}
 8003350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800336a:	b480      	push	{r7}
 800336c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800337c:	f000 f992 	bl	80036a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003380:	bf00      	nop
 8003382:	bd80      	pop	{r7, pc}

08003384 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003388:	4802      	ldr	r0, [pc, #8]	; (8003394 <CAN1_TX_IRQHandler+0x10>)
 800338a:	f000 fe80 	bl	800408e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000204 	.word	0x20000204

08003398 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800339c:	4802      	ldr	r0, [pc, #8]	; (80033a8 <CAN1_RX0_IRQHandler+0x10>)
 800339e:	f000 fe76 	bl	800408e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000204 	.word	0x20000204

080033ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80033b0:	2020      	movs	r0, #32
 80033b2:	f001 fbfb 	bl	8004bac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80033b6:	2040      	movs	r0, #64	; 0x40
 80033b8:	f001 fbf8 	bl	8004bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80033bc:	bf00      	nop
 80033be:	bd80      	pop	{r7, pc}

080033c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80033c4:	4802      	ldr	r0, [pc, #8]	; (80033d0 <USART2_IRQHandler+0x10>)
 80033c6:	f002 fb45 	bl	8005a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000254 	.word	0x20000254

080033d4 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80033d8:	4802      	ldr	r0, [pc, #8]	; (80033e4 <CAN2_TX_IRQHandler+0x10>)
 80033da:	f000 fe58 	bl	800408e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	2000022c 	.word	0x2000022c

080033e8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80033ec:	4802      	ldr	r0, [pc, #8]	; (80033f8 <CAN2_RX0_IRQHandler+0x10>)
 80033ee:	f000 fe4e 	bl	800408e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	2000022c 	.word	0x2000022c

080033fc <_getpid>:
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
 8003400:	2301      	movs	r3, #1
 8003402:	4618      	mov	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <_kill>:
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
 8003416:	f003 fa85 	bl	8006924 <__errno>
 800341a:	4603      	mov	r3, r0
 800341c:	2216      	movs	r2, #22
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <_exit>:
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff ffe7 	bl	800340c <_kill>
 800343e:	e7fe      	b.n	800343e <_exit+0x12>

08003440 <_read>:
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	e00a      	b.n	8003468 <_read+0x28>
 8003452:	f3af 8000 	nop.w
 8003456:	4601      	mov	r1, r0
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	60ba      	str	r2, [r7, #8]
 800345e:	b2ca      	uxtb	r2, r1
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	3301      	adds	r3, #1
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	429a      	cmp	r2, r3
 800346e:	dbf0      	blt.n	8003452 <_read+0x12>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <_write>:
 800347a:	b580      	push	{r7, lr}
 800347c:	b086      	sub	sp, #24
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	e009      	b.n	80034a0 <_write+0x26>
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	60ba      	str	r2, [r7, #8]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f3af 8000 	nop.w
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	3301      	adds	r3, #1
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	dbf1      	blt.n	800348c <_write+0x12>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <_close>:
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034be:	4618      	mov	r0, r3
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <_fstat>:
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	6039      	str	r1, [r7, #0]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	2300      	movs	r3, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <_isatty>:
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	2301      	movs	r3, #1
 80034f4:	4618      	mov	r0, r3
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <_lseek>:
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	2300      	movs	r3, #0
 800350e:	4618      	mov	r0, r3
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <_sbrk>:
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	4a14      	ldr	r2, [pc, #80]	; (8003578 <_sbrk+0x5c>)
 8003526:	4b15      	ldr	r3, [pc, #84]	; (800357c <_sbrk+0x60>)
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	4b13      	ldr	r3, [pc, #76]	; (8003580 <_sbrk+0x64>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d102      	bne.n	800353e <_sbrk+0x22>
 8003538:	4b11      	ldr	r3, [pc, #68]	; (8003580 <_sbrk+0x64>)
 800353a:	4a12      	ldr	r2, [pc, #72]	; (8003584 <_sbrk+0x68>)
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	4b10      	ldr	r3, [pc, #64]	; (8003580 <_sbrk+0x64>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	429a      	cmp	r2, r3
 800354a:	d207      	bcs.n	800355c <_sbrk+0x40>
 800354c:	f003 f9ea 	bl	8006924 <__errno>
 8003550:	4603      	mov	r3, r0
 8003552:	220c      	movs	r2, #12
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800355a:	e009      	b.n	8003570 <_sbrk+0x54>
 800355c:	4b08      	ldr	r3, [pc, #32]	; (8003580 <_sbrk+0x64>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	4b07      	ldr	r3, [pc, #28]	; (8003580 <_sbrk+0x64>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	4a05      	ldr	r2, [pc, #20]	; (8003580 <_sbrk+0x64>)
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	20020000 	.word	0x20020000
 800357c:	00000400 	.word	0x00000400
 8003580:	2000035c 	.word	0x2000035c
 8003584:	20000378 	.word	0x20000378

08003588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <SystemInit+0x20>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003592:	4a05      	ldr	r2, [pc, #20]	; (80035a8 <SystemInit+0x20>)
 8003594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800359c:	bf00      	nop
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <Reset_Handler>:
 80035ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035e4 <LoopFillZerobss+0x12>
 80035b0:	480d      	ldr	r0, [pc, #52]	; (80035e8 <LoopFillZerobss+0x16>)
 80035b2:	490e      	ldr	r1, [pc, #56]	; (80035ec <LoopFillZerobss+0x1a>)
 80035b4:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <LoopFillZerobss+0x1e>)
 80035b6:	2300      	movs	r3, #0
 80035b8:	e002      	b.n	80035c0 <LoopCopyDataInit>

080035ba <CopyDataInit>:
 80035ba:	58d4      	ldr	r4, [r2, r3]
 80035bc:	50c4      	str	r4, [r0, r3]
 80035be:	3304      	adds	r3, #4

080035c0 <LoopCopyDataInit>:
 80035c0:	18c4      	adds	r4, r0, r3
 80035c2:	428c      	cmp	r4, r1
 80035c4:	d3f9      	bcc.n	80035ba <CopyDataInit>
 80035c6:	4a0b      	ldr	r2, [pc, #44]	; (80035f4 <LoopFillZerobss+0x22>)
 80035c8:	4c0b      	ldr	r4, [pc, #44]	; (80035f8 <LoopFillZerobss+0x26>)
 80035ca:	2300      	movs	r3, #0
 80035cc:	e001      	b.n	80035d2 <LoopFillZerobss>

080035ce <FillZerobss>:
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	3204      	adds	r2, #4

080035d2 <LoopFillZerobss>:
 80035d2:	42a2      	cmp	r2, r4
 80035d4:	d3fb      	bcc.n	80035ce <FillZerobss>
 80035d6:	f7ff ffd7 	bl	8003588 <SystemInit>
 80035da:	f003 f9a9 	bl	8006930 <__libc_init_array>
 80035de:	f7fe fc2b 	bl	8001e38 <main>
 80035e2:	4770      	bx	lr
 80035e4:	20020000 	.word	0x20020000
 80035e8:	20000000 	.word	0x20000000
 80035ec:	200001e8 	.word	0x200001e8
 80035f0:	0800b7c8 	.word	0x0800b7c8
 80035f4:	200001e8 	.word	0x200001e8
 80035f8:	20000374 	.word	0x20000374

080035fc <ADC_IRQHandler>:
 80035fc:	e7fe      	b.n	80035fc <ADC_IRQHandler>
	...

08003600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003604:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <HAL_Init+0x40>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a0d      	ldr	r2, [pc, #52]	; (8003640 <HAL_Init+0x40>)
 800360a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800360e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_Init+0x40>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a0a      	ldr	r2, [pc, #40]	; (8003640 <HAL_Init+0x40>)
 8003616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800361a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800361c:	4b08      	ldr	r3, [pc, #32]	; (8003640 <HAL_Init+0x40>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a07      	ldr	r2, [pc, #28]	; (8003640 <HAL_Init+0x40>)
 8003622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003626:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003628:	2003      	movs	r0, #3
 800362a:	f001 f825 	bl	8004678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800362e:	2000      	movs	r0, #0
 8003630:	f000 f808 	bl	8003644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003634:	f7ff fd20 	bl	8003078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40023c00 	.word	0x40023c00

08003644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800364c:	4b12      	ldr	r3, [pc, #72]	; (8003698 <HAL_InitTick+0x54>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	4b12      	ldr	r3, [pc, #72]	; (800369c <HAL_InitTick+0x58>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	4619      	mov	r1, r3
 8003656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800365a:	fbb3 f3f1 	udiv	r3, r3, r1
 800365e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003662:	4618      	mov	r0, r3
 8003664:	f001 f83d 	bl	80046e2 <HAL_SYSTICK_Config>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e00e      	b.n	8003690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b0f      	cmp	r3, #15
 8003676:	d80a      	bhi.n	800368e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003678:	2200      	movs	r2, #0
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003680:	f001 f805 	bl	800468e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003684:	4a06      	ldr	r2, [pc, #24]	; (80036a0 <HAL_InitTick+0x5c>)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	e000      	b.n	8003690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	2000000c 	.word	0x2000000c
 800369c:	20000014 	.word	0x20000014
 80036a0:	20000010 	.word	0x20000010

080036a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036a8:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <HAL_IncTick+0x20>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_IncTick+0x24>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4413      	add	r3, r2
 80036b4:	4a04      	ldr	r2, [pc, #16]	; (80036c8 <HAL_IncTick+0x24>)
 80036b6:	6013      	str	r3, [r2, #0]
}
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	20000014 	.word	0x20000014
 80036c8:	20000360 	.word	0x20000360

080036cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  return uwTick;
 80036d0:	4b03      	ldr	r3, [pc, #12]	; (80036e0 <HAL_GetTick+0x14>)
 80036d2:	681b      	ldr	r3, [r3, #0]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	20000360 	.word	0x20000360

080036e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036ec:	f7ff ffee 	bl	80036cc <HAL_GetTick>
 80036f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036fc:	d005      	beq.n	800370a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036fe:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <HAL_Delay+0x44>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4413      	add	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800370a:	bf00      	nop
 800370c:	f7ff ffde 	bl	80036cc <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	429a      	cmp	r2, r3
 800371a:	d8f7      	bhi.n	800370c <HAL_Delay+0x28>
  {
  }
}
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000014 	.word	0x20000014

0800372c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e0ed      	b.n	800391a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff fcbc 	bl	80030c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003760:	f7ff ffb4 	bl	80036cc <HAL_GetTick>
 8003764:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003766:	e012      	b.n	800378e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003768:	f7ff ffb0 	bl	80036cc <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b0a      	cmp	r3, #10
 8003774:	d90b      	bls.n	800378e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2205      	movs	r2, #5
 8003786:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0c5      	b.n	800391a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0e5      	beq.n	8003768 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0202 	bic.w	r2, r2, #2
 80037aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037ac:	f7ff ff8e 	bl	80036cc <HAL_GetTick>
 80037b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037b2:	e012      	b.n	80037da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037b4:	f7ff ff8a 	bl	80036cc <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b0a      	cmp	r3, #10
 80037c0:	d90b      	bls.n	80037da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2205      	movs	r2, #5
 80037d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e09f      	b.n	800391a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e5      	bne.n	80037b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	7e1b      	ldrb	r3, [r3, #24]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d108      	bne.n	8003802 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	e007      	b.n	8003812 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003810:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	7e5b      	ldrb	r3, [r3, #25]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d108      	bne.n	800382c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	e007      	b.n	800383c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800383a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	7e9b      	ldrb	r3, [r3, #26]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d108      	bne.n	8003856 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0220 	orr.w	r2, r2, #32
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	e007      	b.n	8003866 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0220 	bic.w	r2, r2, #32
 8003864:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	7edb      	ldrb	r3, [r3, #27]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d108      	bne.n	8003880 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0210 	bic.w	r2, r2, #16
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	e007      	b.n	8003890 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0210 	orr.w	r2, r2, #16
 800388e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	7f1b      	ldrb	r3, [r3, #28]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d108      	bne.n	80038aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0208 	orr.w	r2, r2, #8
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	e007      	b.n	80038ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0208 	bic.w	r2, r2, #8
 80038b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	7f5b      	ldrb	r3, [r3, #29]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d108      	bne.n	80038d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0204 	orr.w	r2, r2, #4
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	e007      	b.n	80038e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0204 	bic.w	r2, r2, #4
 80038e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	ea42 0103 	orr.w	r1, r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	1e5a      	subs	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3020 	ldrb.w	r3, [r3, #32]
 800393a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800393c:	7cfb      	ldrb	r3, [r7, #19]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d003      	beq.n	800394a <HAL_CAN_ConfigFilter+0x26>
 8003942:	7cfb      	ldrb	r3, [r7, #19]
 8003944:	2b02      	cmp	r3, #2
 8003946:	f040 80be 	bne.w	8003ac6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800394a:	4b65      	ldr	r3, [pc, #404]	; (8003ae0 <HAL_CAN_ConfigFilter+0x1bc>)
 800394c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003954:	f043 0201 	orr.w	r2, r3, #1
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003964:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	431a      	orrs	r2, r3
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 031f 	and.w	r3, r3, #31
 800398a:	2201      	movs	r2, #1
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	43db      	mvns	r3, r3
 800399c:	401a      	ands	r2, r3
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d123      	bne.n	80039f4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	401a      	ands	r2, r3
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80039ce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	3248      	adds	r2, #72	; 0x48
 80039d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039ea:	6979      	ldr	r1, [r7, #20]
 80039ec:	3348      	adds	r3, #72	; 0x48
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	440b      	add	r3, r1
 80039f2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d122      	bne.n	8003a42 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	431a      	orrs	r2, r3
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a1c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	3248      	adds	r2, #72	; 0x48
 8003a22:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a36:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a38:	6979      	ldr	r1, [r7, #20]
 8003a3a:	3348      	adds	r3, #72	; 0x48
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	440b      	add	r3, r1
 8003a40:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d109      	bne.n	8003a5e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	43db      	mvns	r3, r3
 8003a54:	401a      	ands	r2, r3
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003a5c:	e007      	b.n	8003a6e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	401a      	ands	r2, r3
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003a88:	e007      	b.n	8003a9a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d107      	bne.n	8003ab2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ab8:	f023 0201 	bic.w	r2, r3, #1
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e006      	b.n	8003ad4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
  }
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	40006400 	.word	0x40006400

08003ae4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d12e      	bne.n	8003b56 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0201 	bic.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b10:	f7ff fddc 	bl	80036cc <HAL_GetTick>
 8003b14:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b16:	e012      	b.n	8003b3e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b18:	f7ff fdd8 	bl	80036cc <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b0a      	cmp	r3, #10
 8003b24:	d90b      	bls.n	8003b3e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2205      	movs	r2, #5
 8003b36:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e012      	b.n	8003b64 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e5      	bne.n	8003b18 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e006      	b.n	8003b64 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
  }
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d133      	bne.n	8003be8 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b90:	f7ff fd9c 	bl	80036cc <HAL_GetTick>
 8003b94:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b96:	e012      	b.n	8003bbe <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b98:	f7ff fd98 	bl	80036cc <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b0a      	cmp	r3, #10
 8003ba4:	d90b      	bls.n	8003bbe <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2205      	movs	r2, #5
 8003bb6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e01b      	b.n	8003bf6 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0e5      	beq.n	8003b98 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0202 	bic.w	r2, r2, #2
 8003bda:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	e006      	b.n	8003bf6 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
  }
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b089      	sub	sp, #36	; 0x24
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	607a      	str	r2, [r7, #4]
 8003c0a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c12:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c1c:	7ffb      	ldrb	r3, [r7, #31]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d003      	beq.n	8003c2a <HAL_CAN_AddTxMessage+0x2c>
 8003c22:	7ffb      	ldrb	r3, [r7, #31]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	f040 80b8 	bne.w	8003d9a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d105      	bne.n	8003c4a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80a0 	beq.w	8003d8a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	0e1b      	lsrs	r3, r3, #24
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d907      	bls.n	8003c6a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e09e      	b.n	8003da8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10d      	bne.n	8003c98 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003c86:	68f9      	ldr	r1, [r7, #12]
 8003c88:	6809      	ldr	r1, [r1, #0]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	3318      	adds	r3, #24
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	440b      	add	r3, r1
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	e00f      	b.n	8003cb8 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ca2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ca8:	68f9      	ldr	r1, [r7, #12]
 8003caa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003cac:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	3318      	adds	r3, #24
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	440b      	add	r3, r1
 8003cb6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6819      	ldr	r1, [r3, #0]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	3318      	adds	r3, #24
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	440b      	add	r3, r1
 8003cc8:	3304      	adds	r3, #4
 8003cca:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	7d1b      	ldrb	r3, [r3, #20]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d111      	bne.n	8003cf8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	3318      	adds	r3, #24
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	4413      	add	r3, r2
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	6811      	ldr	r1, [r2, #0]
 8003ce8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	3318      	adds	r3, #24
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	440b      	add	r3, r1
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3307      	adds	r3, #7
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	061a      	lsls	r2, r3, #24
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3306      	adds	r3, #6
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	041b      	lsls	r3, r3, #16
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3305      	adds	r3, #5
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	4313      	orrs	r3, r2
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	3204      	adds	r2, #4
 8003d18:	7812      	ldrb	r2, [r2, #0]
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	6811      	ldr	r1, [r2, #0]
 8003d20:	ea43 0200 	orr.w	r2, r3, r0
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	440b      	add	r3, r1
 8003d2a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003d2e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3303      	adds	r3, #3
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	061a      	lsls	r2, r3, #24
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3302      	adds	r3, #2
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	041b      	lsls	r3, r3, #16
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3301      	adds	r3, #1
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	021b      	lsls	r3, r3, #8
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	7812      	ldrb	r2, [r2, #0]
 8003d50:	4610      	mov	r0, r2
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	6811      	ldr	r1, [r2, #0]
 8003d56:	ea43 0200 	orr.w	r2, r3, r0
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	440b      	add	r3, r1
 8003d60:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003d64:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	3318      	adds	r3, #24
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	4413      	add	r3, r2
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	6811      	ldr	r1, [r2, #0]
 8003d78:	f043 0201 	orr.w	r2, r3, #1
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	3318      	adds	r3, #24
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	440b      	add	r3, r1
 8003d84:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	e00e      	b.n	8003da8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e006      	b.n	8003da8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
  }
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3724      	adds	r7, #36	; 0x24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dc6:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003dc8:	7afb      	ldrb	r3, [r7, #11]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d002      	beq.n	8003dd4 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003dce:	7afb      	ldrb	r3, [r7, #11]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d11d      	bne.n	8003e10 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	3301      	adds	r3, #1
 8003de6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003e10:	68fb      	ldr	r3, [r7, #12]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b087      	sub	sp, #28
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	607a      	str	r2, [r7, #4]
 8003e2a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e32:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d003      	beq.n	8003e42 <HAL_CAN_GetRxMessage+0x24>
 8003e3a:	7dfb      	ldrb	r3, [r7, #23]
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	f040 80f3 	bne.w	8004028 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10e      	bne.n	8003e66 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d116      	bne.n	8003e84 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e0e7      	b.n	8004036 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d107      	bne.n	8003e84 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0d8      	b.n	8004036 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	331b      	adds	r3, #27
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	4413      	add	r3, r2
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0204 	and.w	r2, r3, #4
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10c      	bne.n	8003ebc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	331b      	adds	r3, #27
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	4413      	add	r3, r2
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	0d5b      	lsrs	r3, r3, #21
 8003eb2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	e00b      	b.n	8003ed4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	331b      	adds	r3, #27
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	4413      	add	r3, r2
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	08db      	lsrs	r3, r3, #3
 8003ecc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	331b      	adds	r3, #27
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	4413      	add	r3, r2
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0202 	and.w	r2, r3, #2
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	331b      	adds	r3, #27
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 020f 	and.w	r2, r3, #15
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	331b      	adds	r3, #27
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	4413      	add	r3, r2
 8003f0e:	3304      	adds	r3, #4
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	0a1b      	lsrs	r3, r3, #8
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	331b      	adds	r3, #27
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	4413      	add	r3, r2
 8003f26:	3304      	adds	r3, #4
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	0c1b      	lsrs	r3, r3, #16
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	0a1a      	lsrs	r2, r3, #8
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	0c1a      	lsrs	r2, r3, #16
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	3302      	adds	r3, #2
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	0e1a      	lsrs	r2, r3, #24
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	3303      	adds	r3, #3
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	0a1a      	lsrs	r2, r3, #8
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	3305      	adds	r3, #5
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	0c1a      	lsrs	r2, r3, #16
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	3306      	adds	r3, #6
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	0e1a      	lsrs	r2, r3, #24
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	3307      	adds	r3, #7
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d108      	bne.n	8004014 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0220 	orr.w	r2, r2, #32
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	e007      	b.n	8004024 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0220 	orr.w	r2, r2, #32
 8004022:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e006      	b.n	8004036 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
  }
}
 8004036:	4618      	mov	r0, r3
 8004038:	371c      	adds	r7, #28
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004042:	b480      	push	{r7}
 8004044:	b085      	sub	sp, #20
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004052:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d002      	beq.n	8004060 <HAL_CAN_ActivateNotification+0x1e>
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d109      	bne.n	8004074 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6959      	ldr	r1, [r3, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004070:	2300      	movs	r3, #0
 8004072:	e006      	b.n	8004082 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
  }
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b08a      	sub	sp, #40	; 0x28
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004096:	2300      	movs	r3, #0
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d07c      	beq.n	80041ce <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d023      	beq.n	8004126 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2201      	movs	r2, #1
 80040e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7fe fef5 	bl	8002ee0 <HAL_CAN_TxMailbox0CompleteCallback>
 80040f6:	e016      	b.n	8004126 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d004      	beq.n	800410c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
 800410a:	e00c      	b.n	8004126 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d004      	beq.n	8004120 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
 800411e:	e002      	b.n	8004126 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f97f 	bl	8004424 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412c:	2b00      	cmp	r3, #0
 800412e:	d024      	beq.n	800417a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004138:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f959 	bl	80043fc <HAL_CAN_TxMailbox1CompleteCallback>
 800414a:	e016      	b.n	800417a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004152:	2b00      	cmp	r3, #0
 8004154:	d004      	beq.n	8004160 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
 800415e:	e00c      	b.n	800417a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004166:	2b00      	cmp	r3, #0
 8004168:	d004      	beq.n	8004174 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
 8004172:	e002      	b.n	800417a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f95f 	bl	8004438 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d024      	beq.n	80041ce <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800418c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f939 	bl	8004410 <HAL_CAN_TxMailbox2CompleteCallback>
 800419e:	e016      	b.n	80041ce <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d004      	beq.n	80041b4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
 80041b2:	e00c      	b.n	80041ce <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d004      	beq.n	80041c8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
 80041c6:	e002      	b.n	80041ce <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f93f 	bl	800444c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00c      	beq.n	80041f2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f003 0310 	and.w	r3, r3, #16
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d007      	beq.n	80041f2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2210      	movs	r2, #16
 80041f0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00b      	beq.n	8004214 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b00      	cmp	r3, #0
 8004204:	d006      	beq.n	8004214 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2208      	movs	r2, #8
 800420c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f926 	bl	8004460 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f003 0303 	and.w	r3, r3, #3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7fe fe67 	bl	8002f00 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00c      	beq.n	8004256 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f003 0310 	and.w	r3, r3, #16
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800424c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2210      	movs	r2, #16
 8004254:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	f003 0320 	and.w	r3, r3, #32
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00b      	beq.n	8004278 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d006      	beq.n	8004278 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2208      	movs	r2, #8
 8004270:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f908 	bl	8004488 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	f003 0310 	and.w	r3, r3, #16
 800427e:	2b00      	cmp	r3, #0
 8004280:	d009      	beq.n	8004296 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f8ef 	bl	8004474 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00b      	beq.n	80042b8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	f003 0310 	and.w	r3, r3, #16
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d006      	beq.n	80042b8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2210      	movs	r2, #16
 80042b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f8f2 	bl	800449c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00b      	beq.n	80042da <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d006      	beq.n	80042da <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2208      	movs	r2, #8
 80042d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f8eb 	bl	80044b0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d07b      	beq.n	80043dc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d072      	beq.n	80043d4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	f043 0302 	orr.w	r3, r3, #2
 8004324:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432c:	2b00      	cmp	r3, #0
 800432e:	d008      	beq.n	8004342 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	f043 0304 	orr.w	r3, r3, #4
 8004340:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004348:	2b00      	cmp	r3, #0
 800434a:	d043      	beq.n	80043d4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004352:	2b00      	cmp	r3, #0
 8004354:	d03e      	beq.n	80043d4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800435c:	2b60      	cmp	r3, #96	; 0x60
 800435e:	d02b      	beq.n	80043b8 <HAL_CAN_IRQHandler+0x32a>
 8004360:	2b60      	cmp	r3, #96	; 0x60
 8004362:	d82e      	bhi.n	80043c2 <HAL_CAN_IRQHandler+0x334>
 8004364:	2b50      	cmp	r3, #80	; 0x50
 8004366:	d022      	beq.n	80043ae <HAL_CAN_IRQHandler+0x320>
 8004368:	2b50      	cmp	r3, #80	; 0x50
 800436a:	d82a      	bhi.n	80043c2 <HAL_CAN_IRQHandler+0x334>
 800436c:	2b40      	cmp	r3, #64	; 0x40
 800436e:	d019      	beq.n	80043a4 <HAL_CAN_IRQHandler+0x316>
 8004370:	2b40      	cmp	r3, #64	; 0x40
 8004372:	d826      	bhi.n	80043c2 <HAL_CAN_IRQHandler+0x334>
 8004374:	2b30      	cmp	r3, #48	; 0x30
 8004376:	d010      	beq.n	800439a <HAL_CAN_IRQHandler+0x30c>
 8004378:	2b30      	cmp	r3, #48	; 0x30
 800437a:	d822      	bhi.n	80043c2 <HAL_CAN_IRQHandler+0x334>
 800437c:	2b10      	cmp	r3, #16
 800437e:	d002      	beq.n	8004386 <HAL_CAN_IRQHandler+0x2f8>
 8004380:	2b20      	cmp	r3, #32
 8004382:	d005      	beq.n	8004390 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004384:	e01d      	b.n	80043c2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	f043 0308 	orr.w	r3, r3, #8
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800438e:	e019      	b.n	80043c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	f043 0310 	orr.w	r3, r3, #16
 8004396:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004398:	e014      	b.n	80043c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	f043 0320 	orr.w	r3, r3, #32
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80043a2:	e00f      	b.n	80043c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80043ac:	e00a      	b.n	80043c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80043b6:	e005      	b.n	80043c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80043c0:	e000      	b.n	80043c4 <HAL_CAN_IRQHandler+0x336>
            break;
 80043c2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80043d2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2204      	movs	r2, #4
 80043da:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d008      	beq.n	80043f4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	431a      	orrs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f868 	bl	80044c4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80043f4:	bf00      	nop
 80043f6:	3728      	adds	r7, #40	; 0x28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044e8:	4b0c      	ldr	r3, [pc, #48]	; (800451c <__NVIC_SetPriorityGrouping+0x44>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044f4:	4013      	ands	r3, r2
 80044f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800450a:	4a04      	ldr	r2, [pc, #16]	; (800451c <__NVIC_SetPriorityGrouping+0x44>)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	60d3      	str	r3, [r2, #12]
}
 8004510:	bf00      	nop
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	e000ed00 	.word	0xe000ed00

08004520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004524:	4b04      	ldr	r3, [pc, #16]	; (8004538 <__NVIC_GetPriorityGrouping+0x18>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	0a1b      	lsrs	r3, r3, #8
 800452a:	f003 0307 	and.w	r3, r3, #7
}
 800452e:	4618      	mov	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	2b00      	cmp	r3, #0
 800454c:	db0b      	blt.n	8004566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	f003 021f 	and.w	r2, r3, #31
 8004554:	4907      	ldr	r1, [pc, #28]	; (8004574 <__NVIC_EnableIRQ+0x38>)
 8004556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	2001      	movs	r0, #1
 800455e:	fa00 f202 	lsl.w	r2, r0, r2
 8004562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	e000e100 	.word	0xe000e100

08004578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	6039      	str	r1, [r7, #0]
 8004582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004588:	2b00      	cmp	r3, #0
 800458a:	db0a      	blt.n	80045a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	b2da      	uxtb	r2, r3
 8004590:	490c      	ldr	r1, [pc, #48]	; (80045c4 <__NVIC_SetPriority+0x4c>)
 8004592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004596:	0112      	lsls	r2, r2, #4
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	440b      	add	r3, r1
 800459c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045a0:	e00a      	b.n	80045b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	4908      	ldr	r1, [pc, #32]	; (80045c8 <__NVIC_SetPriority+0x50>)
 80045a8:	79fb      	ldrb	r3, [r7, #7]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	3b04      	subs	r3, #4
 80045b0:	0112      	lsls	r2, r2, #4
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	440b      	add	r3, r1
 80045b6:	761a      	strb	r2, [r3, #24]
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	e000e100 	.word	0xe000e100
 80045c8:	e000ed00 	.word	0xe000ed00

080045cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b089      	sub	sp, #36	; 0x24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f1c3 0307 	rsb	r3, r3, #7
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	bf28      	it	cs
 80045ea:	2304      	movcs	r3, #4
 80045ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	3304      	adds	r3, #4
 80045f2:	2b06      	cmp	r3, #6
 80045f4:	d902      	bls.n	80045fc <NVIC_EncodePriority+0x30>
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	3b03      	subs	r3, #3
 80045fa:	e000      	b.n	80045fe <NVIC_EncodePriority+0x32>
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43da      	mvns	r2, r3
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	401a      	ands	r2, r3
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004614:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	fa01 f303 	lsl.w	r3, r1, r3
 800461e:	43d9      	mvns	r1, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004624:	4313      	orrs	r3, r2
         );
}
 8004626:	4618      	mov	r0, r3
 8004628:	3724      	adds	r7, #36	; 0x24
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3b01      	subs	r3, #1
 8004640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004644:	d301      	bcc.n	800464a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004646:	2301      	movs	r3, #1
 8004648:	e00f      	b.n	800466a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800464a:	4a0a      	ldr	r2, [pc, #40]	; (8004674 <SysTick_Config+0x40>)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3b01      	subs	r3, #1
 8004650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004652:	210f      	movs	r1, #15
 8004654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004658:	f7ff ff8e 	bl	8004578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800465c:	4b05      	ldr	r3, [pc, #20]	; (8004674 <SysTick_Config+0x40>)
 800465e:	2200      	movs	r2, #0
 8004660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004662:	4b04      	ldr	r3, [pc, #16]	; (8004674 <SysTick_Config+0x40>)
 8004664:	2207      	movs	r2, #7
 8004666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	e000e010 	.word	0xe000e010

08004678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff ff29 	bl	80044d8 <__NVIC_SetPriorityGrouping>
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800468e:	b580      	push	{r7, lr}
 8004690:	b086      	sub	sp, #24
 8004692:	af00      	add	r7, sp, #0
 8004694:	4603      	mov	r3, r0
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607a      	str	r2, [r7, #4]
 800469a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046a0:	f7ff ff3e 	bl	8004520 <__NVIC_GetPriorityGrouping>
 80046a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	6978      	ldr	r0, [r7, #20]
 80046ac:	f7ff ff8e 	bl	80045cc <NVIC_EncodePriority>
 80046b0:	4602      	mov	r2, r0
 80046b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046b6:	4611      	mov	r1, r2
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff ff5d 	bl	8004578 <__NVIC_SetPriority>
}
 80046be:	bf00      	nop
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	4603      	mov	r3, r0
 80046ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff ff31 	bl	800453c <__NVIC_EnableIRQ>
}
 80046da:	bf00      	nop
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b082      	sub	sp, #8
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff ffa2 	bl	8004634 <SysTick_Config>
 80046f0:	4603      	mov	r3, r0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b084      	sub	sp, #16
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004706:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004708:	f7fe ffe0 	bl	80036cc <HAL_GetTick>
 800470c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d008      	beq.n	800472c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2280      	movs	r2, #128	; 0x80
 800471e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e052      	b.n	80047d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0216 	bic.w	r2, r2, #22
 800473a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695a      	ldr	r2, [r3, #20]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800474a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d103      	bne.n	800475c <HAL_DMA_Abort+0x62>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004758:	2b00      	cmp	r3, #0
 800475a:	d007      	beq.n	800476c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0208 	bic.w	r2, r2, #8
 800476a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0201 	bic.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800477c:	e013      	b.n	80047a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800477e:	f7fe ffa5 	bl	80036cc <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b05      	cmp	r3, #5
 800478a:	d90c      	bls.n	80047a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2203      	movs	r2, #3
 8004796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e015      	b.n	80047d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e4      	bne.n	800477e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b8:	223f      	movs	r2, #63	; 0x3f
 80047ba:	409a      	lsls	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d004      	beq.n	80047f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2280      	movs	r2, #128	; 0x80
 80047f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e00c      	b.n	8004812 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2205      	movs	r2, #5
 80047fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
	...

08004820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004820:	b480      	push	{r7}
 8004822:	b089      	sub	sp, #36	; 0x24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800482a:	2300      	movs	r3, #0
 800482c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800482e:	2300      	movs	r3, #0
 8004830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004832:	2300      	movs	r3, #0
 8004834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
 800483a:	e165      	b.n	8004b08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800483c:	2201      	movs	r2, #1
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4013      	ands	r3, r2
 800484e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	429a      	cmp	r2, r3
 8004856:	f040 8154 	bne.w	8004b02 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	2b01      	cmp	r3, #1
 8004864:	d005      	beq.n	8004872 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800486e:	2b02      	cmp	r3, #2
 8004870:	d130      	bne.n	80048d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	2203      	movs	r2, #3
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	43db      	mvns	r3, r3
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	4013      	ands	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	4313      	orrs	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048a8:	2201      	movs	r2, #1
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	43db      	mvns	r3, r3
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4013      	ands	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	091b      	lsrs	r3, r3, #4
 80048be:	f003 0201 	and.w	r2, r3, #1
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 0303 	and.w	r3, r3, #3
 80048dc:	2b03      	cmp	r3, #3
 80048de:	d017      	beq.n	8004910 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	2203      	movs	r2, #3
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	43db      	mvns	r3, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4013      	ands	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	4313      	orrs	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d123      	bne.n	8004964 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	08da      	lsrs	r2, r3, #3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3208      	adds	r2, #8
 8004924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004928:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	220f      	movs	r2, #15
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	43db      	mvns	r3, r3
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4013      	ands	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4313      	orrs	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	08da      	lsrs	r2, r3, #3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	3208      	adds	r2, #8
 800495e:	69b9      	ldr	r1, [r7, #24]
 8004960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	2203      	movs	r2, #3
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	43db      	mvns	r3, r3
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	4013      	ands	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f003 0203 	and.w	r2, r3, #3
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	4313      	orrs	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 80ae 	beq.w	8004b02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	4b5d      	ldr	r3, [pc, #372]	; (8004b20 <HAL_GPIO_Init+0x300>)
 80049ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ae:	4a5c      	ldr	r2, [pc, #368]	; (8004b20 <HAL_GPIO_Init+0x300>)
 80049b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049b4:	6453      	str	r3, [r2, #68]	; 0x44
 80049b6:	4b5a      	ldr	r3, [pc, #360]	; (8004b20 <HAL_GPIO_Init+0x300>)
 80049b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049c2:	4a58      	ldr	r2, [pc, #352]	; (8004b24 <HAL_GPIO_Init+0x304>)
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	089b      	lsrs	r3, r3, #2
 80049c8:	3302      	adds	r3, #2
 80049ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	220f      	movs	r2, #15
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	43db      	mvns	r3, r3
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	4013      	ands	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a4f      	ldr	r2, [pc, #316]	; (8004b28 <HAL_GPIO_Init+0x308>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d025      	beq.n	8004a3a <HAL_GPIO_Init+0x21a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a4e      	ldr	r2, [pc, #312]	; (8004b2c <HAL_GPIO_Init+0x30c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d01f      	beq.n	8004a36 <HAL_GPIO_Init+0x216>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a4d      	ldr	r2, [pc, #308]	; (8004b30 <HAL_GPIO_Init+0x310>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d019      	beq.n	8004a32 <HAL_GPIO_Init+0x212>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a4c      	ldr	r2, [pc, #304]	; (8004b34 <HAL_GPIO_Init+0x314>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d013      	beq.n	8004a2e <HAL_GPIO_Init+0x20e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a4b      	ldr	r2, [pc, #300]	; (8004b38 <HAL_GPIO_Init+0x318>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00d      	beq.n	8004a2a <HAL_GPIO_Init+0x20a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a4a      	ldr	r2, [pc, #296]	; (8004b3c <HAL_GPIO_Init+0x31c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d007      	beq.n	8004a26 <HAL_GPIO_Init+0x206>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a49      	ldr	r2, [pc, #292]	; (8004b40 <HAL_GPIO_Init+0x320>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d101      	bne.n	8004a22 <HAL_GPIO_Init+0x202>
 8004a1e:	2306      	movs	r3, #6
 8004a20:	e00c      	b.n	8004a3c <HAL_GPIO_Init+0x21c>
 8004a22:	2307      	movs	r3, #7
 8004a24:	e00a      	b.n	8004a3c <HAL_GPIO_Init+0x21c>
 8004a26:	2305      	movs	r3, #5
 8004a28:	e008      	b.n	8004a3c <HAL_GPIO_Init+0x21c>
 8004a2a:	2304      	movs	r3, #4
 8004a2c:	e006      	b.n	8004a3c <HAL_GPIO_Init+0x21c>
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e004      	b.n	8004a3c <HAL_GPIO_Init+0x21c>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e002      	b.n	8004a3c <HAL_GPIO_Init+0x21c>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <HAL_GPIO_Init+0x21c>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	f002 0203 	and.w	r2, r2, #3
 8004a42:	0092      	lsls	r2, r2, #2
 8004a44:	4093      	lsls	r3, r2
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a4c:	4935      	ldr	r1, [pc, #212]	; (8004b24 <HAL_GPIO_Init+0x304>)
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	089b      	lsrs	r3, r3, #2
 8004a52:	3302      	adds	r3, #2
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a5a:	4b3a      	ldr	r3, [pc, #232]	; (8004b44 <HAL_GPIO_Init+0x324>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	43db      	mvns	r3, r3
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	4013      	ands	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a7e:	4a31      	ldr	r2, [pc, #196]	; (8004b44 <HAL_GPIO_Init+0x324>)
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a84:	4b2f      	ldr	r3, [pc, #188]	; (8004b44 <HAL_GPIO_Init+0x324>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4013      	ands	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004aa8:	4a26      	ldr	r2, [pc, #152]	; (8004b44 <HAL_GPIO_Init+0x324>)
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004aae:	4b25      	ldr	r3, [pc, #148]	; (8004b44 <HAL_GPIO_Init+0x324>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	4013      	ands	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ad2:	4a1c      	ldr	r2, [pc, #112]	; (8004b44 <HAL_GPIO_Init+0x324>)
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ad8:	4b1a      	ldr	r3, [pc, #104]	; (8004b44 <HAL_GPIO_Init+0x324>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	43db      	mvns	r3, r3
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004afc:	4a11      	ldr	r2, [pc, #68]	; (8004b44 <HAL_GPIO_Init+0x324>)
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	3301      	adds	r3, #1
 8004b06:	61fb      	str	r3, [r7, #28]
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	2b0f      	cmp	r3, #15
 8004b0c:	f67f ae96 	bls.w	800483c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b10:	bf00      	nop
 8004b12:	bf00      	nop
 8004b14:	3724      	adds	r7, #36	; 0x24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40023800 	.word	0x40023800
 8004b24:	40013800 	.word	0x40013800
 8004b28:	40020000 	.word	0x40020000
 8004b2c:	40020400 	.word	0x40020400
 8004b30:	40020800 	.word	0x40020800
 8004b34:	40020c00 	.word	0x40020c00
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	40021400 	.word	0x40021400
 8004b40:	40021800 	.word	0x40021800
 8004b44:	40013c00 	.word	0x40013c00

08004b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	887b      	ldrh	r3, [r7, #2]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b60:	2301      	movs	r3, #1
 8004b62:	73fb      	strb	r3, [r7, #15]
 8004b64:	e001      	b.n	8004b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b66:	2300      	movs	r3, #0
 8004b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	807b      	strh	r3, [r7, #2]
 8004b84:	4613      	mov	r3, r2
 8004b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b88:	787b      	ldrb	r3, [r7, #1]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b8e:	887a      	ldrh	r2, [r7, #2]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b94:	e003      	b.n	8004b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b96:	887b      	ldrh	r3, [r7, #2]
 8004b98:	041a      	lsls	r2, r3, #16
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	619a      	str	r2, [r3, #24]
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
	...

08004bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004bb6:	4b08      	ldr	r3, [pc, #32]	; (8004bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bb8:	695a      	ldr	r2, [r3, #20]
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d006      	beq.n	8004bd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bc2:	4a05      	ldr	r2, [pc, #20]	; (8004bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bc4:	88fb      	ldrh	r3, [r7, #6]
 8004bc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bc8:	88fb      	ldrh	r3, [r7, #6]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fc f9de 	bl	8000f8c <HAL_GPIO_EXTI_Callback>
  }
}
 8004bd0:	bf00      	nop
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40013c00 	.word	0x40013c00

08004bdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0cc      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bf0:	4b68      	ldr	r3, [pc, #416]	; (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 030f 	and.w	r3, r3, #15
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d90c      	bls.n	8004c18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfe:	4b65      	ldr	r3, [pc, #404]	; (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c06:	4b63      	ldr	r3, [pc, #396]	; (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d001      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0b8      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d020      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c30:	4b59      	ldr	r3, [pc, #356]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	4a58      	ldr	r2, [pc, #352]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c48:	4b53      	ldr	r3, [pc, #332]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	4a52      	ldr	r2, [pc, #328]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c54:	4b50      	ldr	r3, [pc, #320]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	494d      	ldr	r1, [pc, #308]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d044      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d107      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7a:	4b47      	ldr	r3, [pc, #284]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d119      	bne.n	8004cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e07f      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d003      	beq.n	8004c9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d107      	bne.n	8004caa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c9a:	4b3f      	ldr	r3, [pc, #252]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d109      	bne.n	8004cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e06f      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004caa:	4b3b      	ldr	r3, [pc, #236]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e067      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cba:	4b37      	ldr	r3, [pc, #220]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f023 0203 	bic.w	r2, r3, #3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	4934      	ldr	r1, [pc, #208]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ccc:	f7fe fcfe 	bl	80036cc <HAL_GetTick>
 8004cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cd2:	e00a      	b.n	8004cea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd4:	f7fe fcfa 	bl	80036cc <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e04f      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cea:	4b2b      	ldr	r3, [pc, #172]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 020c 	and.w	r2, r3, #12
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d1eb      	bne.n	8004cd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cfc:	4b25      	ldr	r3, [pc, #148]	; (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 030f 	and.w	r3, r3, #15
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d20c      	bcs.n	8004d24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d0a:	4b22      	ldr	r3, [pc, #136]	; (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d12:	4b20      	ldr	r3, [pc, #128]	; (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d001      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e032      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d30:	4b19      	ldr	r3, [pc, #100]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	4916      	ldr	r1, [pc, #88]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d4e:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	490e      	ldr	r1, [pc, #56]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d62:	f000 f855 	bl	8004e10 <HAL_RCC_GetSysClockFreq>
 8004d66:	4602      	mov	r2, r0
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	490a      	ldr	r1, [pc, #40]	; (8004d9c <HAL_RCC_ClockConfig+0x1c0>)
 8004d74:	5ccb      	ldrb	r3, [r1, r3]
 8004d76:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7a:	4a09      	ldr	r2, [pc, #36]	; (8004da0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d7e:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fe fc5e 	bl	8003644 <HAL_InitTick>

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40023c00 	.word	0x40023c00
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	0800b178 	.word	0x0800b178
 8004da0:	2000000c 	.word	0x2000000c
 8004da4:	20000010 	.word	0x20000010

08004da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dac:	4b03      	ldr	r3, [pc, #12]	; (8004dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004dae:	681b      	ldr	r3, [r3, #0]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	2000000c 	.word	0x2000000c

08004dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dc4:	f7ff fff0 	bl	8004da8 <HAL_RCC_GetHCLKFreq>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	0a9b      	lsrs	r3, r3, #10
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	4903      	ldr	r1, [pc, #12]	; (8004de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dd6:	5ccb      	ldrb	r3, [r1, r3]
 8004dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40023800 	.word	0x40023800
 8004de4:	0800b188 	.word	0x0800b188

08004de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004dec:	f7ff ffdc 	bl	8004da8 <HAL_RCC_GetHCLKFreq>
 8004df0:	4602      	mov	r2, r0
 8004df2:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	0b5b      	lsrs	r3, r3, #13
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	4903      	ldr	r1, [pc, #12]	; (8004e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dfe:	5ccb      	ldrb	r3, [r1, r3]
 8004e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	0800b188 	.word	0x0800b188

08004e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e14:	b0ae      	sub	sp, #184	; 0xb8
 8004e16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e36:	4bcb      	ldr	r3, [pc, #812]	; (8005164 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 030c 	and.w	r3, r3, #12
 8004e3e:	2b0c      	cmp	r3, #12
 8004e40:	f200 8206 	bhi.w	8005250 <HAL_RCC_GetSysClockFreq+0x440>
 8004e44:	a201      	add	r2, pc, #4	; (adr r2, 8004e4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4a:	bf00      	nop
 8004e4c:	08004e81 	.word	0x08004e81
 8004e50:	08005251 	.word	0x08005251
 8004e54:	08005251 	.word	0x08005251
 8004e58:	08005251 	.word	0x08005251
 8004e5c:	08004e89 	.word	0x08004e89
 8004e60:	08005251 	.word	0x08005251
 8004e64:	08005251 	.word	0x08005251
 8004e68:	08005251 	.word	0x08005251
 8004e6c:	08004e91 	.word	0x08004e91
 8004e70:	08005251 	.word	0x08005251
 8004e74:	08005251 	.word	0x08005251
 8004e78:	08005251 	.word	0x08005251
 8004e7c:	08005081 	.word	0x08005081
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e80:	4bb9      	ldr	r3, [pc, #740]	; (8005168 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004e86:	e1e7      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e88:	4bb8      	ldr	r3, [pc, #736]	; (800516c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004e8e:	e1e3      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e90:	4bb4      	ldr	r3, [pc, #720]	; (8005164 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e9c:	4bb1      	ldr	r3, [pc, #708]	; (8005164 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d071      	beq.n	8004f8c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ea8:	4bae      	ldr	r3, [pc, #696]	; (8005164 <HAL_RCC_GetSysClockFreq+0x354>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	099b      	lsrs	r3, r3, #6
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004eb4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004eca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ece:	4622      	mov	r2, r4
 8004ed0:	462b      	mov	r3, r5
 8004ed2:	f04f 0000 	mov.w	r0, #0
 8004ed6:	f04f 0100 	mov.w	r1, #0
 8004eda:	0159      	lsls	r1, r3, #5
 8004edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ee0:	0150      	lsls	r0, r2, #5
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	1a51      	subs	r1, r2, r1
 8004eea:	6439      	str	r1, [r7, #64]	; 0x40
 8004eec:	4629      	mov	r1, r5
 8004eee:	eb63 0301 	sbc.w	r3, r3, r1
 8004ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004f00:	4649      	mov	r1, r9
 8004f02:	018b      	lsls	r3, r1, #6
 8004f04:	4641      	mov	r1, r8
 8004f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f0a:	4641      	mov	r1, r8
 8004f0c:	018a      	lsls	r2, r1, #6
 8004f0e:	4641      	mov	r1, r8
 8004f10:	1a51      	subs	r1, r2, r1
 8004f12:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f14:	4649      	mov	r1, r9
 8004f16:	eb63 0301 	sbc.w	r3, r3, r1
 8004f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004f28:	4649      	mov	r1, r9
 8004f2a:	00cb      	lsls	r3, r1, #3
 8004f2c:	4641      	mov	r1, r8
 8004f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f32:	4641      	mov	r1, r8
 8004f34:	00ca      	lsls	r2, r1, #3
 8004f36:	4610      	mov	r0, r2
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	4622      	mov	r2, r4
 8004f3e:	189b      	adds	r3, r3, r2
 8004f40:	633b      	str	r3, [r7, #48]	; 0x30
 8004f42:	462b      	mov	r3, r5
 8004f44:	460a      	mov	r2, r1
 8004f46:	eb42 0303 	adc.w	r3, r2, r3
 8004f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f58:	4629      	mov	r1, r5
 8004f5a:	024b      	lsls	r3, r1, #9
 8004f5c:	4621      	mov	r1, r4
 8004f5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f62:	4621      	mov	r1, r4
 8004f64:	024a      	lsls	r2, r1, #9
 8004f66:	4610      	mov	r0, r2
 8004f68:	4619      	mov	r1, r3
 8004f6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f78:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004f7c:	f7fb fe84 	bl	8000c88 <__aeabi_uldivmod>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4613      	mov	r3, r2
 8004f86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f8a:	e067      	b.n	800505c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f8c:	4b75      	ldr	r3, [pc, #468]	; (8005164 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	099b      	lsrs	r3, r3, #6
 8004f92:	2200      	movs	r2, #0
 8004f94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f98:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004f9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004faa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004fae:	4622      	mov	r2, r4
 8004fb0:	462b      	mov	r3, r5
 8004fb2:	f04f 0000 	mov.w	r0, #0
 8004fb6:	f04f 0100 	mov.w	r1, #0
 8004fba:	0159      	lsls	r1, r3, #5
 8004fbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fc0:	0150      	lsls	r0, r2, #5
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	1a51      	subs	r1, r2, r1
 8004fca:	62b9      	str	r1, [r7, #40]	; 0x28
 8004fcc:	4629      	mov	r1, r5
 8004fce:	eb63 0301 	sbc.w	r3, r3, r1
 8004fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004fe0:	4649      	mov	r1, r9
 8004fe2:	018b      	lsls	r3, r1, #6
 8004fe4:	4641      	mov	r1, r8
 8004fe6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fea:	4641      	mov	r1, r8
 8004fec:	018a      	lsls	r2, r1, #6
 8004fee:	4641      	mov	r1, r8
 8004ff0:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ff4:	4649      	mov	r1, r9
 8004ff6:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ffa:	f04f 0200 	mov.w	r2, #0
 8004ffe:	f04f 0300 	mov.w	r3, #0
 8005002:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005006:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800500a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800500e:	4692      	mov	sl, r2
 8005010:	469b      	mov	fp, r3
 8005012:	4623      	mov	r3, r4
 8005014:	eb1a 0303 	adds.w	r3, sl, r3
 8005018:	623b      	str	r3, [r7, #32]
 800501a:	462b      	mov	r3, r5
 800501c:	eb4b 0303 	adc.w	r3, fp, r3
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800502e:	4629      	mov	r1, r5
 8005030:	028b      	lsls	r3, r1, #10
 8005032:	4621      	mov	r1, r4
 8005034:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005038:	4621      	mov	r1, r4
 800503a:	028a      	lsls	r2, r1, #10
 800503c:	4610      	mov	r0, r2
 800503e:	4619      	mov	r1, r3
 8005040:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005044:	2200      	movs	r2, #0
 8005046:	673b      	str	r3, [r7, #112]	; 0x70
 8005048:	677a      	str	r2, [r7, #116]	; 0x74
 800504a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800504e:	f7fb fe1b 	bl	8000c88 <__aeabi_uldivmod>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4613      	mov	r3, r2
 8005058:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800505c:	4b41      	ldr	r3, [pc, #260]	; (8005164 <HAL_RCC_GetSysClockFreq+0x354>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	0c1b      	lsrs	r3, r3, #16
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	3301      	adds	r3, #1
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800506e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005072:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005076:	fbb2 f3f3 	udiv	r3, r2, r3
 800507a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800507e:	e0eb      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005080:	4b38      	ldr	r3, [pc, #224]	; (8005164 <HAL_RCC_GetSysClockFreq+0x354>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005088:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800508c:	4b35      	ldr	r3, [pc, #212]	; (8005164 <HAL_RCC_GetSysClockFreq+0x354>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d06b      	beq.n	8005170 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005098:	4b32      	ldr	r3, [pc, #200]	; (8005164 <HAL_RCC_GetSysClockFreq+0x354>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	099b      	lsrs	r3, r3, #6
 800509e:	2200      	movs	r2, #0
 80050a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80050a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050aa:	663b      	str	r3, [r7, #96]	; 0x60
 80050ac:	2300      	movs	r3, #0
 80050ae:	667b      	str	r3, [r7, #100]	; 0x64
 80050b0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80050b4:	4622      	mov	r2, r4
 80050b6:	462b      	mov	r3, r5
 80050b8:	f04f 0000 	mov.w	r0, #0
 80050bc:	f04f 0100 	mov.w	r1, #0
 80050c0:	0159      	lsls	r1, r3, #5
 80050c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050c6:	0150      	lsls	r0, r2, #5
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4621      	mov	r1, r4
 80050ce:	1a51      	subs	r1, r2, r1
 80050d0:	61b9      	str	r1, [r7, #24]
 80050d2:	4629      	mov	r1, r5
 80050d4:	eb63 0301 	sbc.w	r3, r3, r1
 80050d8:	61fb      	str	r3, [r7, #28]
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80050e6:	4659      	mov	r1, fp
 80050e8:	018b      	lsls	r3, r1, #6
 80050ea:	4651      	mov	r1, sl
 80050ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050f0:	4651      	mov	r1, sl
 80050f2:	018a      	lsls	r2, r1, #6
 80050f4:	4651      	mov	r1, sl
 80050f6:	ebb2 0801 	subs.w	r8, r2, r1
 80050fa:	4659      	mov	r1, fp
 80050fc:	eb63 0901 	sbc.w	r9, r3, r1
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800510c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005110:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005114:	4690      	mov	r8, r2
 8005116:	4699      	mov	r9, r3
 8005118:	4623      	mov	r3, r4
 800511a:	eb18 0303 	adds.w	r3, r8, r3
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	462b      	mov	r3, r5
 8005122:	eb49 0303 	adc.w	r3, r9, r3
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	f04f 0300 	mov.w	r3, #0
 8005130:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005134:	4629      	mov	r1, r5
 8005136:	024b      	lsls	r3, r1, #9
 8005138:	4621      	mov	r1, r4
 800513a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800513e:	4621      	mov	r1, r4
 8005140:	024a      	lsls	r2, r1, #9
 8005142:	4610      	mov	r0, r2
 8005144:	4619      	mov	r1, r3
 8005146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800514a:	2200      	movs	r2, #0
 800514c:	65bb      	str	r3, [r7, #88]	; 0x58
 800514e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005150:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005154:	f7fb fd98 	bl	8000c88 <__aeabi_uldivmod>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4613      	mov	r3, r2
 800515e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005162:	e065      	b.n	8005230 <HAL_RCC_GetSysClockFreq+0x420>
 8005164:	40023800 	.word	0x40023800
 8005168:	00f42400 	.word	0x00f42400
 800516c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005170:	4b3d      	ldr	r3, [pc, #244]	; (8005268 <HAL_RCC_GetSysClockFreq+0x458>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	099b      	lsrs	r3, r3, #6
 8005176:	2200      	movs	r2, #0
 8005178:	4618      	mov	r0, r3
 800517a:	4611      	mov	r1, r2
 800517c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005180:	653b      	str	r3, [r7, #80]	; 0x50
 8005182:	2300      	movs	r3, #0
 8005184:	657b      	str	r3, [r7, #84]	; 0x54
 8005186:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800518a:	4642      	mov	r2, r8
 800518c:	464b      	mov	r3, r9
 800518e:	f04f 0000 	mov.w	r0, #0
 8005192:	f04f 0100 	mov.w	r1, #0
 8005196:	0159      	lsls	r1, r3, #5
 8005198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800519c:	0150      	lsls	r0, r2, #5
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	4641      	mov	r1, r8
 80051a4:	1a51      	subs	r1, r2, r1
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	4649      	mov	r1, r9
 80051aa:	eb63 0301 	sbc.w	r3, r3, r1
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80051bc:	4659      	mov	r1, fp
 80051be:	018b      	lsls	r3, r1, #6
 80051c0:	4651      	mov	r1, sl
 80051c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051c6:	4651      	mov	r1, sl
 80051c8:	018a      	lsls	r2, r1, #6
 80051ca:	4651      	mov	r1, sl
 80051cc:	1a54      	subs	r4, r2, r1
 80051ce:	4659      	mov	r1, fp
 80051d0:	eb63 0501 	sbc.w	r5, r3, r1
 80051d4:	f04f 0200 	mov.w	r2, #0
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	00eb      	lsls	r3, r5, #3
 80051de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051e2:	00e2      	lsls	r2, r4, #3
 80051e4:	4614      	mov	r4, r2
 80051e6:	461d      	mov	r5, r3
 80051e8:	4643      	mov	r3, r8
 80051ea:	18e3      	adds	r3, r4, r3
 80051ec:	603b      	str	r3, [r7, #0]
 80051ee:	464b      	mov	r3, r9
 80051f0:	eb45 0303 	adc.w	r3, r5, r3
 80051f4:	607b      	str	r3, [r7, #4]
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005202:	4629      	mov	r1, r5
 8005204:	028b      	lsls	r3, r1, #10
 8005206:	4621      	mov	r1, r4
 8005208:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800520c:	4621      	mov	r1, r4
 800520e:	028a      	lsls	r2, r1, #10
 8005210:	4610      	mov	r0, r2
 8005212:	4619      	mov	r1, r3
 8005214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005218:	2200      	movs	r2, #0
 800521a:	64bb      	str	r3, [r7, #72]	; 0x48
 800521c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800521e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005222:	f7fb fd31 	bl	8000c88 <__aeabi_uldivmod>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4613      	mov	r3, r2
 800522c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005230:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <HAL_RCC_GetSysClockFreq+0x458>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	0f1b      	lsrs	r3, r3, #28
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800523e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005242:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005246:	fbb2 f3f3 	udiv	r3, r2, r3
 800524a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800524e:	e003      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005250:	4b06      	ldr	r3, [pc, #24]	; (800526c <HAL_RCC_GetSysClockFreq+0x45c>)
 8005252:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005256:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005258:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800525c:	4618      	mov	r0, r3
 800525e:	37b8      	adds	r7, #184	; 0xb8
 8005260:	46bd      	mov	sp, r7
 8005262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005266:	bf00      	nop
 8005268:	40023800 	.word	0x40023800
 800526c:	00f42400 	.word	0x00f42400

08005270 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e28d      	b.n	800579e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 8083 	beq.w	8005396 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005290:	4b94      	ldr	r3, [pc, #592]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 030c 	and.w	r3, r3, #12
 8005298:	2b04      	cmp	r3, #4
 800529a:	d019      	beq.n	80052d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800529c:	4b91      	ldr	r3, [pc, #580]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d106      	bne.n	80052b6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80052a8:	4b8e      	ldr	r3, [pc, #568]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052b4:	d00c      	beq.n	80052d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052b6:	4b8b      	ldr	r3, [pc, #556]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80052be:	2b0c      	cmp	r3, #12
 80052c0:	d112      	bne.n	80052e8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052c2:	4b88      	ldr	r3, [pc, #544]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052ce:	d10b      	bne.n	80052e8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d0:	4b84      	ldr	r3, [pc, #528]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d05b      	beq.n	8005394 <HAL_RCC_OscConfig+0x124>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d157      	bne.n	8005394 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e25a      	b.n	800579e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f0:	d106      	bne.n	8005300 <HAL_RCC_OscConfig+0x90>
 80052f2:	4b7c      	ldr	r3, [pc, #496]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a7b      	ldr	r2, [pc, #492]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 80052f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	e01d      	b.n	800533c <HAL_RCC_OscConfig+0xcc>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005308:	d10c      	bne.n	8005324 <HAL_RCC_OscConfig+0xb4>
 800530a:	4b76      	ldr	r3, [pc, #472]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a75      	ldr	r2, [pc, #468]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 8005310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	4b73      	ldr	r3, [pc, #460]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a72      	ldr	r2, [pc, #456]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 800531c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	e00b      	b.n	800533c <HAL_RCC_OscConfig+0xcc>
 8005324:	4b6f      	ldr	r3, [pc, #444]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a6e      	ldr	r2, [pc, #440]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 800532a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	4b6c      	ldr	r3, [pc, #432]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a6b      	ldr	r2, [pc, #428]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 8005336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800533a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d013      	beq.n	800536c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005344:	f7fe f9c2 	bl	80036cc <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800534c:	f7fe f9be 	bl	80036cc <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b64      	cmp	r3, #100	; 0x64
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e21f      	b.n	800579e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800535e:	4b61      	ldr	r3, [pc, #388]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0f0      	beq.n	800534c <HAL_RCC_OscConfig+0xdc>
 800536a:	e014      	b.n	8005396 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536c:	f7fe f9ae 	bl	80036cc <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005374:	f7fe f9aa 	bl	80036cc <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b64      	cmp	r3, #100	; 0x64
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e20b      	b.n	800579e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005386:	4b57      	ldr	r3, [pc, #348]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f0      	bne.n	8005374 <HAL_RCC_OscConfig+0x104>
 8005392:	e000      	b.n	8005396 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d06f      	beq.n	8005482 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80053a2:	4b50      	ldr	r3, [pc, #320]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 030c 	and.w	r3, r3, #12
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d017      	beq.n	80053de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80053ae:	4b4d      	ldr	r3, [pc, #308]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d105      	bne.n	80053c6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80053ba:	4b4a      	ldr	r3, [pc, #296]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00b      	beq.n	80053de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053c6:	4b47      	ldr	r3, [pc, #284]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80053ce:	2b0c      	cmp	r3, #12
 80053d0:	d11c      	bne.n	800540c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053d2:	4b44      	ldr	r3, [pc, #272]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d116      	bne.n	800540c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053de:	4b41      	ldr	r3, [pc, #260]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d005      	beq.n	80053f6 <HAL_RCC_OscConfig+0x186>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d001      	beq.n	80053f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e1d3      	b.n	800579e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f6:	4b3b      	ldr	r3, [pc, #236]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	4937      	ldr	r1, [pc, #220]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 8005406:	4313      	orrs	r3, r2
 8005408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800540a:	e03a      	b.n	8005482 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d020      	beq.n	8005456 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005414:	4b34      	ldr	r3, [pc, #208]	; (80054e8 <HAL_RCC_OscConfig+0x278>)
 8005416:	2201      	movs	r2, #1
 8005418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541a:	f7fe f957 	bl	80036cc <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005422:	f7fe f953 	bl	80036cc <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e1b4      	b.n	800579e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005434:	4b2b      	ldr	r3, [pc, #172]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0f0      	beq.n	8005422 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005440:	4b28      	ldr	r3, [pc, #160]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	4925      	ldr	r1, [pc, #148]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 8005450:	4313      	orrs	r3, r2
 8005452:	600b      	str	r3, [r1, #0]
 8005454:	e015      	b.n	8005482 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005456:	4b24      	ldr	r3, [pc, #144]	; (80054e8 <HAL_RCC_OscConfig+0x278>)
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545c:	f7fe f936 	bl	80036cc <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005464:	f7fe f932 	bl	80036cc <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e193      	b.n	800579e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005476:	4b1b      	ldr	r3, [pc, #108]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1f0      	bne.n	8005464 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d036      	beq.n	80054fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d016      	beq.n	80054c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005496:	4b15      	ldr	r3, [pc, #84]	; (80054ec <HAL_RCC_OscConfig+0x27c>)
 8005498:	2201      	movs	r2, #1
 800549a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800549c:	f7fe f916 	bl	80036cc <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054a4:	f7fe f912 	bl	80036cc <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e173      	b.n	800579e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054b6:	4b0b      	ldr	r3, [pc, #44]	; (80054e4 <HAL_RCC_OscConfig+0x274>)
 80054b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d0f0      	beq.n	80054a4 <HAL_RCC_OscConfig+0x234>
 80054c2:	e01b      	b.n	80054fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054c4:	4b09      	ldr	r3, [pc, #36]	; (80054ec <HAL_RCC_OscConfig+0x27c>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ca:	f7fe f8ff 	bl	80036cc <HAL_GetTick>
 80054ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054d0:	e00e      	b.n	80054f0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054d2:	f7fe f8fb 	bl	80036cc <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d907      	bls.n	80054f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e15c      	b.n	800579e <HAL_RCC_OscConfig+0x52e>
 80054e4:	40023800 	.word	0x40023800
 80054e8:	42470000 	.word	0x42470000
 80054ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054f0:	4b8a      	ldr	r3, [pc, #552]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 80054f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1ea      	bne.n	80054d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 8097 	beq.w	8005638 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800550a:	2300      	movs	r3, #0
 800550c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800550e:	4b83      	ldr	r3, [pc, #524]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10f      	bne.n	800553a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800551a:	2300      	movs	r3, #0
 800551c:	60bb      	str	r3, [r7, #8]
 800551e:	4b7f      	ldr	r3, [pc, #508]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	4a7e      	ldr	r2, [pc, #504]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 8005524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005528:	6413      	str	r3, [r2, #64]	; 0x40
 800552a:	4b7c      	ldr	r3, [pc, #496]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005532:	60bb      	str	r3, [r7, #8]
 8005534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005536:	2301      	movs	r3, #1
 8005538:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800553a:	4b79      	ldr	r3, [pc, #484]	; (8005720 <HAL_RCC_OscConfig+0x4b0>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005542:	2b00      	cmp	r3, #0
 8005544:	d118      	bne.n	8005578 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005546:	4b76      	ldr	r3, [pc, #472]	; (8005720 <HAL_RCC_OscConfig+0x4b0>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a75      	ldr	r2, [pc, #468]	; (8005720 <HAL_RCC_OscConfig+0x4b0>)
 800554c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005552:	f7fe f8bb 	bl	80036cc <HAL_GetTick>
 8005556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800555a:	f7fe f8b7 	bl	80036cc <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e118      	b.n	800579e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800556c:	4b6c      	ldr	r3, [pc, #432]	; (8005720 <HAL_RCC_OscConfig+0x4b0>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0f0      	beq.n	800555a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d106      	bne.n	800558e <HAL_RCC_OscConfig+0x31e>
 8005580:	4b66      	ldr	r3, [pc, #408]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 8005582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005584:	4a65      	ldr	r2, [pc, #404]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 8005586:	f043 0301 	orr.w	r3, r3, #1
 800558a:	6713      	str	r3, [r2, #112]	; 0x70
 800558c:	e01c      	b.n	80055c8 <HAL_RCC_OscConfig+0x358>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b05      	cmp	r3, #5
 8005594:	d10c      	bne.n	80055b0 <HAL_RCC_OscConfig+0x340>
 8005596:	4b61      	ldr	r3, [pc, #388]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 8005598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559a:	4a60      	ldr	r2, [pc, #384]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 800559c:	f043 0304 	orr.w	r3, r3, #4
 80055a0:	6713      	str	r3, [r2, #112]	; 0x70
 80055a2:	4b5e      	ldr	r3, [pc, #376]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 80055a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a6:	4a5d      	ldr	r2, [pc, #372]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 80055a8:	f043 0301 	orr.w	r3, r3, #1
 80055ac:	6713      	str	r3, [r2, #112]	; 0x70
 80055ae:	e00b      	b.n	80055c8 <HAL_RCC_OscConfig+0x358>
 80055b0:	4b5a      	ldr	r3, [pc, #360]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 80055b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b4:	4a59      	ldr	r2, [pc, #356]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 80055b6:	f023 0301 	bic.w	r3, r3, #1
 80055ba:	6713      	str	r3, [r2, #112]	; 0x70
 80055bc:	4b57      	ldr	r3, [pc, #348]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 80055be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c0:	4a56      	ldr	r2, [pc, #344]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 80055c2:	f023 0304 	bic.w	r3, r3, #4
 80055c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d015      	beq.n	80055fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d0:	f7fe f87c 	bl	80036cc <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d6:	e00a      	b.n	80055ee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055d8:	f7fe f878 	bl	80036cc <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e0d7      	b.n	800579e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ee:	4b4b      	ldr	r3, [pc, #300]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 80055f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0ee      	beq.n	80055d8 <HAL_RCC_OscConfig+0x368>
 80055fa:	e014      	b.n	8005626 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fc:	f7fe f866 	bl	80036cc <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005602:	e00a      	b.n	800561a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005604:	f7fe f862 	bl	80036cc <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005612:	4293      	cmp	r3, r2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e0c1      	b.n	800579e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800561a:	4b40      	ldr	r3, [pc, #256]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 800561c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1ee      	bne.n	8005604 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005626:	7dfb      	ldrb	r3, [r7, #23]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d105      	bne.n	8005638 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800562c:	4b3b      	ldr	r3, [pc, #236]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 800562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005630:	4a3a      	ldr	r2, [pc, #232]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 8005632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005636:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 80ad 	beq.w	800579c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005642:	4b36      	ldr	r3, [pc, #216]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 030c 	and.w	r3, r3, #12
 800564a:	2b08      	cmp	r3, #8
 800564c:	d060      	beq.n	8005710 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	2b02      	cmp	r3, #2
 8005654:	d145      	bne.n	80056e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005656:	4b33      	ldr	r3, [pc, #204]	; (8005724 <HAL_RCC_OscConfig+0x4b4>)
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565c:	f7fe f836 	bl	80036cc <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005664:	f7fe f832 	bl	80036cc <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e093      	b.n	800579e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005676:	4b29      	ldr	r3, [pc, #164]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1f0      	bne.n	8005664 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69da      	ldr	r2, [r3, #28]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	019b      	lsls	r3, r3, #6
 8005692:	431a      	orrs	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005698:	085b      	lsrs	r3, r3, #1
 800569a:	3b01      	subs	r3, #1
 800569c:	041b      	lsls	r3, r3, #16
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	061b      	lsls	r3, r3, #24
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ac:	071b      	lsls	r3, r3, #28
 80056ae:	491b      	ldr	r1, [pc, #108]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056b4:	4b1b      	ldr	r3, [pc, #108]	; (8005724 <HAL_RCC_OscConfig+0x4b4>)
 80056b6:	2201      	movs	r2, #1
 80056b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ba:	f7fe f807 	bl	80036cc <HAL_GetTick>
 80056be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056c2:	f7fe f803 	bl	80036cc <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e064      	b.n	800579e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056d4:	4b11      	ldr	r3, [pc, #68]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0f0      	beq.n	80056c2 <HAL_RCC_OscConfig+0x452>
 80056e0:	e05c      	b.n	800579c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e2:	4b10      	ldr	r3, [pc, #64]	; (8005724 <HAL_RCC_OscConfig+0x4b4>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e8:	f7fd fff0 	bl	80036cc <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056f0:	f7fd ffec 	bl	80036cc <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e04d      	b.n	800579e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005702:	4b06      	ldr	r3, [pc, #24]	; (800571c <HAL_RCC_OscConfig+0x4ac>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0x480>
 800570e:	e045      	b.n	800579c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d107      	bne.n	8005728 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e040      	b.n	800579e <HAL_RCC_OscConfig+0x52e>
 800571c:	40023800 	.word	0x40023800
 8005720:	40007000 	.word	0x40007000
 8005724:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005728:	4b1f      	ldr	r3, [pc, #124]	; (80057a8 <HAL_RCC_OscConfig+0x538>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d030      	beq.n	8005798 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005740:	429a      	cmp	r2, r3
 8005742:	d129      	bne.n	8005798 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800574e:	429a      	cmp	r2, r3
 8005750:	d122      	bne.n	8005798 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005758:	4013      	ands	r3, r2
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800575e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005760:	4293      	cmp	r3, r2
 8005762:	d119      	bne.n	8005798 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576e:	085b      	lsrs	r3, r3, #1
 8005770:	3b01      	subs	r3, #1
 8005772:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005774:	429a      	cmp	r2, r3
 8005776:	d10f      	bne.n	8005798 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005784:	429a      	cmp	r2, r3
 8005786:	d107      	bne.n	8005798 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005792:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005794:	429a      	cmp	r2, r3
 8005796:	d001      	beq.n	800579c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	40023800 	.word	0x40023800

080057ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e03f      	b.n	800583e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d106      	bne.n	80057d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fd fd5c 	bl	8003290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2224      	movs	r2, #36	; 0x24
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fe23 	bl	800643c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005804:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	695a      	ldr	r2, [r3, #20]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005814:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005824:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b08a      	sub	sp, #40	; 0x28
 800584a:	af02      	add	r7, sp, #8
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	603b      	str	r3, [r7, #0]
 8005852:	4613      	mov	r3, r2
 8005854:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b20      	cmp	r3, #32
 8005864:	d17c      	bne.n	8005960 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <HAL_UART_Transmit+0x2c>
 800586c:	88fb      	ldrh	r3, [r7, #6]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e075      	b.n	8005962 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_UART_Transmit+0x3e>
 8005880:	2302      	movs	r3, #2
 8005882:	e06e      	b.n	8005962 <HAL_UART_Transmit+0x11c>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2221      	movs	r2, #33	; 0x21
 8005896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800589a:	f7fd ff17 	bl	80036cc <HAL_GetTick>
 800589e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	88fa      	ldrh	r2, [r7, #6]
 80058a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	88fa      	ldrh	r2, [r7, #6]
 80058aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b4:	d108      	bne.n	80058c8 <HAL_UART_Transmit+0x82>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d104      	bne.n	80058c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058be:	2300      	movs	r3, #0
 80058c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	e003      	b.n	80058d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058cc:	2300      	movs	r3, #0
 80058ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058d8:	e02a      	b.n	8005930 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2200      	movs	r2, #0
 80058e2:	2180      	movs	r1, #128	; 0x80
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 fb63 	bl	8005fb0 <UART_WaitOnFlagUntilTimeout>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e036      	b.n	8005962 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10b      	bne.n	8005912 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005908:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	3302      	adds	r3, #2
 800590e:	61bb      	str	r3, [r7, #24]
 8005910:	e007      	b.n	8005922 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	781a      	ldrb	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	3301      	adds	r3, #1
 8005920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1cf      	bne.n	80058da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2200      	movs	r2, #0
 8005942:	2140      	movs	r1, #64	; 0x40
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 fb33 	bl	8005fb0 <UART_WaitOnFlagUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e006      	b.n	8005962 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	e000      	b.n	8005962 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005960:	2302      	movs	r3, #2
  }
}
 8005962:	4618      	mov	r0, r3
 8005964:	3720      	adds	r7, #32
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800596a:	b480      	push	{r7}
 800596c:	b085      	sub	sp, #20
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	4613      	mov	r3, r2
 8005976:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b20      	cmp	r3, #32
 8005982:	d130      	bne.n	80059e6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <HAL_UART_Transmit_IT+0x26>
 800598a:	88fb      	ldrh	r3, [r7, #6]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e029      	b.n	80059e8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800599a:	2b01      	cmp	r3, #1
 800599c:	d101      	bne.n	80059a2 <HAL_UART_Transmit_IT+0x38>
 800599e:	2302      	movs	r3, #2
 80059a0:	e022      	b.n	80059e8 <HAL_UART_Transmit_IT+0x7e>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	88fa      	ldrh	r2, [r7, #6]
 80059b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	88fa      	ldrh	r2, [r7, #6]
 80059ba:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2221      	movs	r2, #33	; 0x21
 80059c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059e0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	e000      	b.n	80059e8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80059e6:	2302      	movs	r3, #2
  }
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	4613      	mov	r3, r2
 8005a00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b20      	cmp	r3, #32
 8005a0c:	d11d      	bne.n	8005a4a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <HAL_UART_Receive_IT+0x26>
 8005a14:	88fb      	ldrh	r3, [r7, #6]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e016      	b.n	8005a4c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_UART_Receive_IT+0x38>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e00f      	b.n	8005a4c <HAL_UART_Receive_IT+0x58>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 fb23 	bl	800608c <UART_Start_Receive_IT>
 8005a46:	4603      	mov	r3, r0
 8005a48:	e000      	b.n	8005a4c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005a4a:	2302      	movs	r3, #2
  }
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b0ba      	sub	sp, #232	; 0xe8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005a92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10f      	bne.n	8005aba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a9e:	f003 0320 	and.w	r3, r3, #32
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <HAL_UART_IRQHandler+0x66>
 8005aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fc07 	bl	80062c6 <UART_Receive_IT>
      return;
 8005ab8:	e256      	b.n	8005f68 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005aba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 80de 	beq.w	8005c80 <HAL_UART_IRQHandler+0x22c>
 8005ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d106      	bne.n	8005ade <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 80d1 	beq.w	8005c80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00b      	beq.n	8005b02 <HAL_UART_IRQHandler+0xae>
 8005aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	f043 0201 	orr.w	r2, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00b      	beq.n	8005b26 <HAL_UART_IRQHandler+0xd2>
 8005b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d005      	beq.n	8005b26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	f043 0202 	orr.w	r2, r3, #2
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00b      	beq.n	8005b4a <HAL_UART_IRQHandler+0xf6>
 8005b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d005      	beq.n	8005b4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	f043 0204 	orr.w	r2, r3, #4
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b4e:	f003 0308 	and.w	r3, r3, #8
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d011      	beq.n	8005b7a <HAL_UART_IRQHandler+0x126>
 8005b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b5a:	f003 0320 	and.w	r3, r3, #32
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d105      	bne.n	8005b6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d005      	beq.n	8005b7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	f043 0208 	orr.w	r2, r3, #8
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 81ed 	beq.w	8005f5e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x14e>
 8005b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b94:	f003 0320 	and.w	r3, r3, #32
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fb92 	bl	80062c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bac:	2b40      	cmp	r3, #64	; 0x40
 8005bae:	bf0c      	ite	eq
 8005bb0:	2301      	moveq	r3, #1
 8005bb2:	2300      	movne	r3, #0
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d103      	bne.n	8005bce <HAL_UART_IRQHandler+0x17a>
 8005bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d04f      	beq.n	8005c6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fa9a 	bl	8006108 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bde:	2b40      	cmp	r3, #64	; 0x40
 8005be0:	d141      	bne.n	8005c66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3314      	adds	r3, #20
 8005be8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bf0:	e853 3f00 	ldrex	r3, [r3]
 8005bf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3314      	adds	r3, #20
 8005c0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1d9      	bne.n	8005be2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d013      	beq.n	8005c5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3a:	4a7d      	ldr	r2, [pc, #500]	; (8005e30 <HAL_UART_IRQHandler+0x3dc>)
 8005c3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fe fdc9 	bl	80047da <HAL_DMA_Abort_IT>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d016      	beq.n	8005c7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c58:	4610      	mov	r0, r2
 8005c5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c5c:	e00e      	b.n	8005c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f990 	bl	8005f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c64:	e00a      	b.n	8005c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f98c 	bl	8005f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6c:	e006      	b.n	8005c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f988 	bl	8005f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005c7a:	e170      	b.n	8005f5e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c7c:	bf00      	nop
    return;
 8005c7e:	e16e      	b.n	8005f5e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	f040 814a 	bne.w	8005f1e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8e:	f003 0310 	and.w	r3, r3, #16
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 8143 	beq.w	8005f1e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c9c:	f003 0310 	and.w	r3, r3, #16
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 813c 	beq.w	8005f1e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60bb      	str	r3, [r7, #8]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	60bb      	str	r3, [r7, #8]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	60bb      	str	r3, [r7, #8]
 8005cba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc6:	2b40      	cmp	r3, #64	; 0x40
 8005cc8:	f040 80b4 	bne.w	8005e34 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 8140 	beq.w	8005f62 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cea:	429a      	cmp	r2, r3
 8005cec:	f080 8139 	bcs.w	8005f62 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cf6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d02:	f000 8088 	beq.w	8005e16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	330c      	adds	r3, #12
 8005d0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d14:	e853 3f00 	ldrex	r3, [r3]
 8005d18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	330c      	adds	r3, #12
 8005d2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005d32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d42:	e841 2300 	strex	r3, r2, [r1]
 8005d46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1d9      	bne.n	8005d06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3314      	adds	r3, #20
 8005d58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d5c:	e853 3f00 	ldrex	r3, [r3]
 8005d60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d64:	f023 0301 	bic.w	r3, r3, #1
 8005d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3314      	adds	r3, #20
 8005d72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e1      	bne.n	8005d52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3314      	adds	r3, #20
 8005d94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d98:	e853 3f00 	ldrex	r3, [r3]
 8005d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005da4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3314      	adds	r3, #20
 8005dae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005db2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005db4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005db8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005dba:	e841 2300 	strex	r3, r2, [r1]
 8005dbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e3      	bne.n	8005d8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	330c      	adds	r3, #12
 8005dda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005de6:	f023 0310 	bic.w	r3, r3, #16
 8005dea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	330c      	adds	r3, #12
 8005df4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005df8:	65ba      	str	r2, [r7, #88]	; 0x58
 8005dfa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005dfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e00:	e841 2300 	strex	r3, r2, [r1]
 8005e04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e3      	bne.n	8005dd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fe fc72 	bl	80046fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	4619      	mov	r1, r3
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f8b6 	bl	8005f98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e2c:	e099      	b.n	8005f62 <HAL_UART_IRQHandler+0x50e>
 8005e2e:	bf00      	nop
 8005e30:	080061cf 	.word	0x080061cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 808b 	beq.w	8005f66 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005e50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 8086 	beq.w	8005f66 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	330c      	adds	r3, #12
 8005e60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e64:	e853 3f00 	ldrex	r3, [r3]
 8005e68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	330c      	adds	r3, #12
 8005e7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005e7e:	647a      	str	r2, [r7, #68]	; 0x44
 8005e80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e86:	e841 2300 	strex	r3, r2, [r1]
 8005e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1e3      	bne.n	8005e5a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3314      	adds	r3, #20
 8005e98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	f023 0301 	bic.w	r3, r3, #1
 8005ea8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3314      	adds	r3, #20
 8005eb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005eb6:	633a      	str	r2, [r7, #48]	; 0x30
 8005eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e3      	bne.n	8005e92 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	330c      	adds	r3, #12
 8005ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	e853 3f00 	ldrex	r3, [r3]
 8005ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0310 	bic.w	r3, r3, #16
 8005eee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	330c      	adds	r3, #12
 8005ef8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005efc:	61fa      	str	r2, [r7, #28]
 8005efe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f00:	69b9      	ldr	r1, [r7, #24]
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	e841 2300 	strex	r3, r2, [r1]
 8005f08:	617b      	str	r3, [r7, #20]
   return(result);
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1e3      	bne.n	8005ed8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f83e 	bl	8005f98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f1c:	e023      	b.n	8005f66 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d009      	beq.n	8005f3e <HAL_UART_IRQHandler+0x4ea>
 8005f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f95d 	bl	80061f6 <UART_Transmit_IT>
    return;
 8005f3c:	e014      	b.n	8005f68 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00e      	beq.n	8005f68 <HAL_UART_IRQHandler+0x514>
 8005f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d008      	beq.n	8005f68 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f99d 	bl	8006296 <UART_EndTransmit_IT>
    return;
 8005f5c:	e004      	b.n	8005f68 <HAL_UART_IRQHandler+0x514>
    return;
 8005f5e:	bf00      	nop
 8005f60:	e002      	b.n	8005f68 <HAL_UART_IRQHandler+0x514>
      return;
 8005f62:	bf00      	nop
 8005f64:	e000      	b.n	8005f68 <HAL_UART_IRQHandler+0x514>
      return;
 8005f66:	bf00      	nop
  }
}
 8005f68:	37e8      	adds	r7, #232	; 0xe8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop

08005f70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b090      	sub	sp, #64	; 0x40
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	603b      	str	r3, [r7, #0]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc0:	e050      	b.n	8006064 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fc8:	d04c      	beq.n	8006064 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d007      	beq.n	8005fe0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fd0:	f7fd fb7c 	bl	80036cc <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d241      	bcs.n	8006064 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	330c      	adds	r3, #12
 8005fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	330c      	adds	r3, #12
 8005ffe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006000:	637a      	str	r2, [r7, #52]	; 0x34
 8006002:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006008:	e841 2300 	strex	r3, r2, [r1]
 800600c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e5      	bne.n	8005fe0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3314      	adds	r3, #20
 800601a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	613b      	str	r3, [r7, #16]
   return(result);
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f023 0301 	bic.w	r3, r3, #1
 800602a:	63bb      	str	r3, [r7, #56]	; 0x38
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3314      	adds	r3, #20
 8006032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006034:	623a      	str	r2, [r7, #32]
 8006036:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	69f9      	ldr	r1, [r7, #28]
 800603a:	6a3a      	ldr	r2, [r7, #32]
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	61bb      	str	r3, [r7, #24]
   return(result);
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e5      	bne.n	8006014 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e00f      	b.n	8006084 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	4013      	ands	r3, r2
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	429a      	cmp	r2, r3
 8006072:	bf0c      	ite	eq
 8006074:	2301      	moveq	r3, #1
 8006076:	2300      	movne	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	461a      	mov	r2, r3
 800607c:	79fb      	ldrb	r3, [r7, #7]
 800607e:	429a      	cmp	r2, r3
 8006080:	d09f      	beq.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3740      	adds	r7, #64	; 0x40
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	4613      	mov	r3, r2
 8006098:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	88fa      	ldrh	r2, [r7, #6]
 80060a4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	88fa      	ldrh	r2, [r7, #6]
 80060aa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2222      	movs	r2, #34	; 0x22
 80060b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d007      	beq.n	80060da <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060d8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	695a      	ldr	r2, [r3, #20]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f042 0201 	orr.w	r2, r2, #1
 80060e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f042 0220 	orr.w	r2, r2, #32
 80060f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006108:	b480      	push	{r7}
 800610a:	b095      	sub	sp, #84	; 0x54
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	330c      	adds	r3, #12
 8006116:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800611a:	e853 3f00 	ldrex	r3, [r3]
 800611e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	330c      	adds	r3, #12
 800612e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006130:	643a      	str	r2, [r7, #64]	; 0x40
 8006132:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006136:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e5      	bne.n	8006110 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3314      	adds	r3, #20
 800614a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	61fb      	str	r3, [r7, #28]
   return(result);
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f023 0301 	bic.w	r3, r3, #1
 800615a:	64bb      	str	r3, [r7, #72]	; 0x48
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3314      	adds	r3, #20
 8006162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006164:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006166:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800616a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800616c:	e841 2300 	strex	r3, r2, [r1]
 8006170:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1e5      	bne.n	8006144 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617c:	2b01      	cmp	r3, #1
 800617e:	d119      	bne.n	80061b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	330c      	adds	r3, #12
 8006186:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	e853 3f00 	ldrex	r3, [r3]
 800618e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f023 0310 	bic.w	r3, r3, #16
 8006196:	647b      	str	r3, [r7, #68]	; 0x44
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	330c      	adds	r3, #12
 800619e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061a0:	61ba      	str	r2, [r7, #24]
 80061a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a4:	6979      	ldr	r1, [r7, #20]
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	e841 2300 	strex	r3, r2, [r1]
 80061ac:	613b      	str	r3, [r7, #16]
   return(result);
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1e5      	bne.n	8006180 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2220      	movs	r2, #32
 80061b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061c2:	bf00      	nop
 80061c4:	3754      	adds	r7, #84	; 0x54
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f7ff fecb 	bl	8005f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b085      	sub	sp, #20
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b21      	cmp	r3, #33	; 0x21
 8006208:	d13e      	bne.n	8006288 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006212:	d114      	bne.n	800623e <UART_Transmit_IT+0x48>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d110      	bne.n	800623e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006230:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	1c9a      	adds	r2, r3, #2
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	621a      	str	r2, [r3, #32]
 800623c:	e008      	b.n	8006250 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	1c59      	adds	r1, r3, #1
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6211      	str	r1, [r2, #32]
 8006248:	781a      	ldrb	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006254:	b29b      	uxth	r3, r3
 8006256:	3b01      	subs	r3, #1
 8006258:	b29b      	uxth	r3, r3
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	4619      	mov	r1, r3
 800625e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10f      	bne.n	8006284 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68da      	ldr	r2, [r3, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006272:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006282:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	e000      	b.n	800628a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006288:	2302      	movs	r3, #2
  }
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b082      	sub	sp, #8
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff fe5a 	bl	8005f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b08c      	sub	sp, #48	; 0x30
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b22      	cmp	r3, #34	; 0x22
 80062d8:	f040 80ab 	bne.w	8006432 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e4:	d117      	bne.n	8006316 <UART_Receive_IT+0x50>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d113      	bne.n	8006316 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006304:	b29a      	uxth	r2, r3
 8006306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006308:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630e:	1c9a      	adds	r2, r3, #2
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	629a      	str	r2, [r3, #40]	; 0x28
 8006314:	e026      	b.n	8006364 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800631c:	2300      	movs	r3, #0
 800631e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006328:	d007      	beq.n	800633a <UART_Receive_IT+0x74>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <UART_Receive_IT+0x82>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	b2da      	uxtb	r2, r3
 8006342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	e008      	b.n	800635a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006354:	b2da      	uxtb	r2, r3
 8006356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006358:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006368:	b29b      	uxth	r3, r3
 800636a:	3b01      	subs	r3, #1
 800636c:	b29b      	uxth	r3, r3
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	4619      	mov	r1, r3
 8006372:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006374:	2b00      	cmp	r3, #0
 8006376:	d15a      	bne.n	800642e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0220 	bic.w	r2, r2, #32
 8006386:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006396:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	695a      	ldr	r2, [r3, #20]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0201 	bic.w	r2, r2, #1
 80063a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d135      	bne.n	8006424 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	330c      	adds	r3, #12
 80063c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	613b      	str	r3, [r7, #16]
   return(result);
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f023 0310 	bic.w	r3, r3, #16
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	330c      	adds	r3, #12
 80063dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063de:	623a      	str	r2, [r7, #32]
 80063e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e2:	69f9      	ldr	r1, [r7, #28]
 80063e4:	6a3a      	ldr	r2, [r7, #32]
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e5      	bne.n	80063be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0310 	and.w	r3, r3, #16
 80063fc:	2b10      	cmp	r3, #16
 80063fe:	d10a      	bne.n	8006416 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006400:	2300      	movs	r3, #0
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800641a:	4619      	mov	r1, r3
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff fdbb 	bl	8005f98 <HAL_UARTEx_RxEventCallback>
 8006422:	e002      	b.n	800642a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7fc fd29 	bl	8002e7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	e002      	b.n	8006434 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	e000      	b.n	8006434 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006432:	2302      	movs	r3, #2
  }
}
 8006434:	4618      	mov	r0, r3
 8006436:	3730      	adds	r7, #48	; 0x30
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800643c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006440:	b0c0      	sub	sp, #256	; 0x100
 8006442:	af00      	add	r7, sp, #0
 8006444:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006458:	68d9      	ldr	r1, [r3, #12]
 800645a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	ea40 0301 	orr.w	r3, r0, r1
 8006464:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	431a      	orrs	r2, r3
 8006474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	431a      	orrs	r2, r3
 800647c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	4313      	orrs	r3, r2
 8006484:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006494:	f021 010c 	bic.w	r1, r1, #12
 8006498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064a2:	430b      	orrs	r3, r1
 80064a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b6:	6999      	ldr	r1, [r3, #24]
 80064b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	ea40 0301 	orr.w	r3, r0, r1
 80064c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	4b8f      	ldr	r3, [pc, #572]	; (8006708 <UART_SetConfig+0x2cc>)
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d005      	beq.n	80064dc <UART_SetConfig+0xa0>
 80064d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4b8d      	ldr	r3, [pc, #564]	; (800670c <UART_SetConfig+0x2d0>)
 80064d8:	429a      	cmp	r2, r3
 80064da:	d104      	bne.n	80064e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064dc:	f7fe fc84 	bl	8004de8 <HAL_RCC_GetPCLK2Freq>
 80064e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80064e4:	e003      	b.n	80064ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064e6:	f7fe fc6b 	bl	8004dc0 <HAL_RCC_GetPCLK1Freq>
 80064ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064f8:	f040 810c 	bne.w	8006714 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006500:	2200      	movs	r2, #0
 8006502:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006506:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800650a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800650e:	4622      	mov	r2, r4
 8006510:	462b      	mov	r3, r5
 8006512:	1891      	adds	r1, r2, r2
 8006514:	65b9      	str	r1, [r7, #88]	; 0x58
 8006516:	415b      	adcs	r3, r3
 8006518:	65fb      	str	r3, [r7, #92]	; 0x5c
 800651a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800651e:	4621      	mov	r1, r4
 8006520:	eb12 0801 	adds.w	r8, r2, r1
 8006524:	4629      	mov	r1, r5
 8006526:	eb43 0901 	adc.w	r9, r3, r1
 800652a:	f04f 0200 	mov.w	r2, #0
 800652e:	f04f 0300 	mov.w	r3, #0
 8006532:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006536:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800653a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800653e:	4690      	mov	r8, r2
 8006540:	4699      	mov	r9, r3
 8006542:	4623      	mov	r3, r4
 8006544:	eb18 0303 	adds.w	r3, r8, r3
 8006548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800654c:	462b      	mov	r3, r5
 800654e:	eb49 0303 	adc.w	r3, r9, r3
 8006552:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006562:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006566:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800656a:	460b      	mov	r3, r1
 800656c:	18db      	adds	r3, r3, r3
 800656e:	653b      	str	r3, [r7, #80]	; 0x50
 8006570:	4613      	mov	r3, r2
 8006572:	eb42 0303 	adc.w	r3, r2, r3
 8006576:	657b      	str	r3, [r7, #84]	; 0x54
 8006578:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800657c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006580:	f7fa fb82 	bl	8000c88 <__aeabi_uldivmod>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4b61      	ldr	r3, [pc, #388]	; (8006710 <UART_SetConfig+0x2d4>)
 800658a:	fba3 2302 	umull	r2, r3, r3, r2
 800658e:	095b      	lsrs	r3, r3, #5
 8006590:	011c      	lsls	r4, r3, #4
 8006592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006596:	2200      	movs	r2, #0
 8006598:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800659c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80065a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80065a4:	4642      	mov	r2, r8
 80065a6:	464b      	mov	r3, r9
 80065a8:	1891      	adds	r1, r2, r2
 80065aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80065ac:	415b      	adcs	r3, r3
 80065ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065b4:	4641      	mov	r1, r8
 80065b6:	eb12 0a01 	adds.w	sl, r2, r1
 80065ba:	4649      	mov	r1, r9
 80065bc:	eb43 0b01 	adc.w	fp, r3, r1
 80065c0:	f04f 0200 	mov.w	r2, #0
 80065c4:	f04f 0300 	mov.w	r3, #0
 80065c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065d4:	4692      	mov	sl, r2
 80065d6:	469b      	mov	fp, r3
 80065d8:	4643      	mov	r3, r8
 80065da:	eb1a 0303 	adds.w	r3, sl, r3
 80065de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065e2:	464b      	mov	r3, r9
 80065e4:	eb4b 0303 	adc.w	r3, fp, r3
 80065e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80065fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006600:	460b      	mov	r3, r1
 8006602:	18db      	adds	r3, r3, r3
 8006604:	643b      	str	r3, [r7, #64]	; 0x40
 8006606:	4613      	mov	r3, r2
 8006608:	eb42 0303 	adc.w	r3, r2, r3
 800660c:	647b      	str	r3, [r7, #68]	; 0x44
 800660e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006612:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006616:	f7fa fb37 	bl	8000c88 <__aeabi_uldivmod>
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	4611      	mov	r1, r2
 8006620:	4b3b      	ldr	r3, [pc, #236]	; (8006710 <UART_SetConfig+0x2d4>)
 8006622:	fba3 2301 	umull	r2, r3, r3, r1
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	2264      	movs	r2, #100	; 0x64
 800662a:	fb02 f303 	mul.w	r3, r2, r3
 800662e:	1acb      	subs	r3, r1, r3
 8006630:	00db      	lsls	r3, r3, #3
 8006632:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006636:	4b36      	ldr	r3, [pc, #216]	; (8006710 <UART_SetConfig+0x2d4>)
 8006638:	fba3 2302 	umull	r2, r3, r3, r2
 800663c:	095b      	lsrs	r3, r3, #5
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006644:	441c      	add	r4, r3
 8006646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800664a:	2200      	movs	r2, #0
 800664c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006650:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006654:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006658:	4642      	mov	r2, r8
 800665a:	464b      	mov	r3, r9
 800665c:	1891      	adds	r1, r2, r2
 800665e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006660:	415b      	adcs	r3, r3
 8006662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006664:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006668:	4641      	mov	r1, r8
 800666a:	1851      	adds	r1, r2, r1
 800666c:	6339      	str	r1, [r7, #48]	; 0x30
 800666e:	4649      	mov	r1, r9
 8006670:	414b      	adcs	r3, r1
 8006672:	637b      	str	r3, [r7, #52]	; 0x34
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006680:	4659      	mov	r1, fp
 8006682:	00cb      	lsls	r3, r1, #3
 8006684:	4651      	mov	r1, sl
 8006686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800668a:	4651      	mov	r1, sl
 800668c:	00ca      	lsls	r2, r1, #3
 800668e:	4610      	mov	r0, r2
 8006690:	4619      	mov	r1, r3
 8006692:	4603      	mov	r3, r0
 8006694:	4642      	mov	r2, r8
 8006696:	189b      	adds	r3, r3, r2
 8006698:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800669c:	464b      	mov	r3, r9
 800669e:	460a      	mov	r2, r1
 80066a0:	eb42 0303 	adc.w	r3, r2, r3
 80066a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80066b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80066bc:	460b      	mov	r3, r1
 80066be:	18db      	adds	r3, r3, r3
 80066c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c2:	4613      	mov	r3, r2
 80066c4:	eb42 0303 	adc.w	r3, r2, r3
 80066c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80066d2:	f7fa fad9 	bl	8000c88 <__aeabi_uldivmod>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4b0d      	ldr	r3, [pc, #52]	; (8006710 <UART_SetConfig+0x2d4>)
 80066dc:	fba3 1302 	umull	r1, r3, r3, r2
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	2164      	movs	r1, #100	; 0x64
 80066e4:	fb01 f303 	mul.w	r3, r1, r3
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	00db      	lsls	r3, r3, #3
 80066ec:	3332      	adds	r3, #50	; 0x32
 80066ee:	4a08      	ldr	r2, [pc, #32]	; (8006710 <UART_SetConfig+0x2d4>)
 80066f0:	fba2 2303 	umull	r2, r3, r2, r3
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	f003 0207 	and.w	r2, r3, #7
 80066fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4422      	add	r2, r4
 8006702:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006704:	e105      	b.n	8006912 <UART_SetConfig+0x4d6>
 8006706:	bf00      	nop
 8006708:	40011000 	.word	0x40011000
 800670c:	40011400 	.word	0x40011400
 8006710:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006718:	2200      	movs	r2, #0
 800671a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800671e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006722:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006726:	4642      	mov	r2, r8
 8006728:	464b      	mov	r3, r9
 800672a:	1891      	adds	r1, r2, r2
 800672c:	6239      	str	r1, [r7, #32]
 800672e:	415b      	adcs	r3, r3
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
 8006732:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006736:	4641      	mov	r1, r8
 8006738:	1854      	adds	r4, r2, r1
 800673a:	4649      	mov	r1, r9
 800673c:	eb43 0501 	adc.w	r5, r3, r1
 8006740:	f04f 0200 	mov.w	r2, #0
 8006744:	f04f 0300 	mov.w	r3, #0
 8006748:	00eb      	lsls	r3, r5, #3
 800674a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800674e:	00e2      	lsls	r2, r4, #3
 8006750:	4614      	mov	r4, r2
 8006752:	461d      	mov	r5, r3
 8006754:	4643      	mov	r3, r8
 8006756:	18e3      	adds	r3, r4, r3
 8006758:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800675c:	464b      	mov	r3, r9
 800675e:	eb45 0303 	adc.w	r3, r5, r3
 8006762:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006772:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006776:	f04f 0200 	mov.w	r2, #0
 800677a:	f04f 0300 	mov.w	r3, #0
 800677e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006782:	4629      	mov	r1, r5
 8006784:	008b      	lsls	r3, r1, #2
 8006786:	4621      	mov	r1, r4
 8006788:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800678c:	4621      	mov	r1, r4
 800678e:	008a      	lsls	r2, r1, #2
 8006790:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006794:	f7fa fa78 	bl	8000c88 <__aeabi_uldivmod>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	4b60      	ldr	r3, [pc, #384]	; (8006920 <UART_SetConfig+0x4e4>)
 800679e:	fba3 2302 	umull	r2, r3, r3, r2
 80067a2:	095b      	lsrs	r3, r3, #5
 80067a4:	011c      	lsls	r4, r3, #4
 80067a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80067b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80067b8:	4642      	mov	r2, r8
 80067ba:	464b      	mov	r3, r9
 80067bc:	1891      	adds	r1, r2, r2
 80067be:	61b9      	str	r1, [r7, #24]
 80067c0:	415b      	adcs	r3, r3
 80067c2:	61fb      	str	r3, [r7, #28]
 80067c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067c8:	4641      	mov	r1, r8
 80067ca:	1851      	adds	r1, r2, r1
 80067cc:	6139      	str	r1, [r7, #16]
 80067ce:	4649      	mov	r1, r9
 80067d0:	414b      	adcs	r3, r1
 80067d2:	617b      	str	r3, [r7, #20]
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067e0:	4659      	mov	r1, fp
 80067e2:	00cb      	lsls	r3, r1, #3
 80067e4:	4651      	mov	r1, sl
 80067e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ea:	4651      	mov	r1, sl
 80067ec:	00ca      	lsls	r2, r1, #3
 80067ee:	4610      	mov	r0, r2
 80067f0:	4619      	mov	r1, r3
 80067f2:	4603      	mov	r3, r0
 80067f4:	4642      	mov	r2, r8
 80067f6:	189b      	adds	r3, r3, r2
 80067f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067fc:	464b      	mov	r3, r9
 80067fe:	460a      	mov	r2, r1
 8006800:	eb42 0303 	adc.w	r3, r2, r3
 8006804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	67bb      	str	r3, [r7, #120]	; 0x78
 8006812:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006814:	f04f 0200 	mov.w	r2, #0
 8006818:	f04f 0300 	mov.w	r3, #0
 800681c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006820:	4649      	mov	r1, r9
 8006822:	008b      	lsls	r3, r1, #2
 8006824:	4641      	mov	r1, r8
 8006826:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800682a:	4641      	mov	r1, r8
 800682c:	008a      	lsls	r2, r1, #2
 800682e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006832:	f7fa fa29 	bl	8000c88 <__aeabi_uldivmod>
 8006836:	4602      	mov	r2, r0
 8006838:	460b      	mov	r3, r1
 800683a:	4b39      	ldr	r3, [pc, #228]	; (8006920 <UART_SetConfig+0x4e4>)
 800683c:	fba3 1302 	umull	r1, r3, r3, r2
 8006840:	095b      	lsrs	r3, r3, #5
 8006842:	2164      	movs	r1, #100	; 0x64
 8006844:	fb01 f303 	mul.w	r3, r1, r3
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	3332      	adds	r3, #50	; 0x32
 800684e:	4a34      	ldr	r2, [pc, #208]	; (8006920 <UART_SetConfig+0x4e4>)
 8006850:	fba2 2303 	umull	r2, r3, r2, r3
 8006854:	095b      	lsrs	r3, r3, #5
 8006856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800685a:	441c      	add	r4, r3
 800685c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006860:	2200      	movs	r2, #0
 8006862:	673b      	str	r3, [r7, #112]	; 0x70
 8006864:	677a      	str	r2, [r7, #116]	; 0x74
 8006866:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800686a:	4642      	mov	r2, r8
 800686c:	464b      	mov	r3, r9
 800686e:	1891      	adds	r1, r2, r2
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	415b      	adcs	r3, r3
 8006874:	60fb      	str	r3, [r7, #12]
 8006876:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800687a:	4641      	mov	r1, r8
 800687c:	1851      	adds	r1, r2, r1
 800687e:	6039      	str	r1, [r7, #0]
 8006880:	4649      	mov	r1, r9
 8006882:	414b      	adcs	r3, r1
 8006884:	607b      	str	r3, [r7, #4]
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006892:	4659      	mov	r1, fp
 8006894:	00cb      	lsls	r3, r1, #3
 8006896:	4651      	mov	r1, sl
 8006898:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800689c:	4651      	mov	r1, sl
 800689e:	00ca      	lsls	r2, r1, #3
 80068a0:	4610      	mov	r0, r2
 80068a2:	4619      	mov	r1, r3
 80068a4:	4603      	mov	r3, r0
 80068a6:	4642      	mov	r2, r8
 80068a8:	189b      	adds	r3, r3, r2
 80068aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80068ac:	464b      	mov	r3, r9
 80068ae:	460a      	mov	r2, r1
 80068b0:	eb42 0303 	adc.w	r3, r2, r3
 80068b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	663b      	str	r3, [r7, #96]	; 0x60
 80068c0:	667a      	str	r2, [r7, #100]	; 0x64
 80068c2:	f04f 0200 	mov.w	r2, #0
 80068c6:	f04f 0300 	mov.w	r3, #0
 80068ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80068ce:	4649      	mov	r1, r9
 80068d0:	008b      	lsls	r3, r1, #2
 80068d2:	4641      	mov	r1, r8
 80068d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068d8:	4641      	mov	r1, r8
 80068da:	008a      	lsls	r2, r1, #2
 80068dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80068e0:	f7fa f9d2 	bl	8000c88 <__aeabi_uldivmod>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	4b0d      	ldr	r3, [pc, #52]	; (8006920 <UART_SetConfig+0x4e4>)
 80068ea:	fba3 1302 	umull	r1, r3, r3, r2
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	2164      	movs	r1, #100	; 0x64
 80068f2:	fb01 f303 	mul.w	r3, r1, r3
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	011b      	lsls	r3, r3, #4
 80068fa:	3332      	adds	r3, #50	; 0x32
 80068fc:	4a08      	ldr	r2, [pc, #32]	; (8006920 <UART_SetConfig+0x4e4>)
 80068fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006902:	095b      	lsrs	r3, r3, #5
 8006904:	f003 020f 	and.w	r2, r3, #15
 8006908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4422      	add	r2, r4
 8006910:	609a      	str	r2, [r3, #8]
}
 8006912:	bf00      	nop
 8006914:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006918:	46bd      	mov	sp, r7
 800691a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800691e:	bf00      	nop
 8006920:	51eb851f 	.word	0x51eb851f

08006924 <__errno>:
 8006924:	4b01      	ldr	r3, [pc, #4]	; (800692c <__errno+0x8>)
 8006926:	6818      	ldr	r0, [r3, #0]
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	20000018 	.word	0x20000018

08006930 <__libc_init_array>:
 8006930:	b570      	push	{r4, r5, r6, lr}
 8006932:	4d0d      	ldr	r5, [pc, #52]	; (8006968 <__libc_init_array+0x38>)
 8006934:	4c0d      	ldr	r4, [pc, #52]	; (800696c <__libc_init_array+0x3c>)
 8006936:	1b64      	subs	r4, r4, r5
 8006938:	10a4      	asrs	r4, r4, #2
 800693a:	2600      	movs	r6, #0
 800693c:	42a6      	cmp	r6, r4
 800693e:	d109      	bne.n	8006954 <__libc_init_array+0x24>
 8006940:	4d0b      	ldr	r5, [pc, #44]	; (8006970 <__libc_init_array+0x40>)
 8006942:	4c0c      	ldr	r4, [pc, #48]	; (8006974 <__libc_init_array+0x44>)
 8006944:	f004 fbfa 	bl	800b13c <_init>
 8006948:	1b64      	subs	r4, r4, r5
 800694a:	10a4      	asrs	r4, r4, #2
 800694c:	2600      	movs	r6, #0
 800694e:	42a6      	cmp	r6, r4
 8006950:	d105      	bne.n	800695e <__libc_init_array+0x2e>
 8006952:	bd70      	pop	{r4, r5, r6, pc}
 8006954:	f855 3b04 	ldr.w	r3, [r5], #4
 8006958:	4798      	blx	r3
 800695a:	3601      	adds	r6, #1
 800695c:	e7ee      	b.n	800693c <__libc_init_array+0xc>
 800695e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006962:	4798      	blx	r3
 8006964:	3601      	adds	r6, #1
 8006966:	e7f2      	b.n	800694e <__libc_init_array+0x1e>
 8006968:	0800b7c0 	.word	0x0800b7c0
 800696c:	0800b7c0 	.word	0x0800b7c0
 8006970:	0800b7c0 	.word	0x0800b7c0
 8006974:	0800b7c4 	.word	0x0800b7c4

08006978 <memset>:
 8006978:	4402      	add	r2, r0
 800697a:	4603      	mov	r3, r0
 800697c:	4293      	cmp	r3, r2
 800697e:	d100      	bne.n	8006982 <memset+0xa>
 8006980:	4770      	bx	lr
 8006982:	f803 1b01 	strb.w	r1, [r3], #1
 8006986:	e7f9      	b.n	800697c <memset+0x4>

08006988 <__cvt>:
 8006988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800698c:	ec55 4b10 	vmov	r4, r5, d0
 8006990:	2d00      	cmp	r5, #0
 8006992:	460e      	mov	r6, r1
 8006994:	4619      	mov	r1, r3
 8006996:	462b      	mov	r3, r5
 8006998:	bfbb      	ittet	lt
 800699a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800699e:	461d      	movlt	r5, r3
 80069a0:	2300      	movge	r3, #0
 80069a2:	232d      	movlt	r3, #45	; 0x2d
 80069a4:	700b      	strb	r3, [r1, #0]
 80069a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80069ac:	4691      	mov	r9, r2
 80069ae:	f023 0820 	bic.w	r8, r3, #32
 80069b2:	bfbc      	itt	lt
 80069b4:	4622      	movlt	r2, r4
 80069b6:	4614      	movlt	r4, r2
 80069b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069bc:	d005      	beq.n	80069ca <__cvt+0x42>
 80069be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80069c2:	d100      	bne.n	80069c6 <__cvt+0x3e>
 80069c4:	3601      	adds	r6, #1
 80069c6:	2102      	movs	r1, #2
 80069c8:	e000      	b.n	80069cc <__cvt+0x44>
 80069ca:	2103      	movs	r1, #3
 80069cc:	ab03      	add	r3, sp, #12
 80069ce:	9301      	str	r3, [sp, #4]
 80069d0:	ab02      	add	r3, sp, #8
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	ec45 4b10 	vmov	d0, r4, r5
 80069d8:	4653      	mov	r3, sl
 80069da:	4632      	mov	r2, r6
 80069dc:	f000 fce4 	bl	80073a8 <_dtoa_r>
 80069e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80069e4:	4607      	mov	r7, r0
 80069e6:	d102      	bne.n	80069ee <__cvt+0x66>
 80069e8:	f019 0f01 	tst.w	r9, #1
 80069ec:	d022      	beq.n	8006a34 <__cvt+0xac>
 80069ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069f2:	eb07 0906 	add.w	r9, r7, r6
 80069f6:	d110      	bne.n	8006a1a <__cvt+0x92>
 80069f8:	783b      	ldrb	r3, [r7, #0]
 80069fa:	2b30      	cmp	r3, #48	; 0x30
 80069fc:	d10a      	bne.n	8006a14 <__cvt+0x8c>
 80069fe:	2200      	movs	r2, #0
 8006a00:	2300      	movs	r3, #0
 8006a02:	4620      	mov	r0, r4
 8006a04:	4629      	mov	r1, r5
 8006a06:	f7fa f87f 	bl	8000b08 <__aeabi_dcmpeq>
 8006a0a:	b918      	cbnz	r0, 8006a14 <__cvt+0x8c>
 8006a0c:	f1c6 0601 	rsb	r6, r6, #1
 8006a10:	f8ca 6000 	str.w	r6, [sl]
 8006a14:	f8da 3000 	ldr.w	r3, [sl]
 8006a18:	4499      	add	r9, r3
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	4620      	mov	r0, r4
 8006a20:	4629      	mov	r1, r5
 8006a22:	f7fa f871 	bl	8000b08 <__aeabi_dcmpeq>
 8006a26:	b108      	cbz	r0, 8006a2c <__cvt+0xa4>
 8006a28:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a2c:	2230      	movs	r2, #48	; 0x30
 8006a2e:	9b03      	ldr	r3, [sp, #12]
 8006a30:	454b      	cmp	r3, r9
 8006a32:	d307      	bcc.n	8006a44 <__cvt+0xbc>
 8006a34:	9b03      	ldr	r3, [sp, #12]
 8006a36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a38:	1bdb      	subs	r3, r3, r7
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	6013      	str	r3, [r2, #0]
 8006a3e:	b004      	add	sp, #16
 8006a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a44:	1c59      	adds	r1, r3, #1
 8006a46:	9103      	str	r1, [sp, #12]
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	e7f0      	b.n	8006a2e <__cvt+0xa6>

08006a4c <__exponent>:
 8006a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2900      	cmp	r1, #0
 8006a52:	bfb8      	it	lt
 8006a54:	4249      	neglt	r1, r1
 8006a56:	f803 2b02 	strb.w	r2, [r3], #2
 8006a5a:	bfb4      	ite	lt
 8006a5c:	222d      	movlt	r2, #45	; 0x2d
 8006a5e:	222b      	movge	r2, #43	; 0x2b
 8006a60:	2909      	cmp	r1, #9
 8006a62:	7042      	strb	r2, [r0, #1]
 8006a64:	dd2a      	ble.n	8006abc <__exponent+0x70>
 8006a66:	f10d 0407 	add.w	r4, sp, #7
 8006a6a:	46a4      	mov	ip, r4
 8006a6c:	270a      	movs	r7, #10
 8006a6e:	46a6      	mov	lr, r4
 8006a70:	460a      	mov	r2, r1
 8006a72:	fb91 f6f7 	sdiv	r6, r1, r7
 8006a76:	fb07 1516 	mls	r5, r7, r6, r1
 8006a7a:	3530      	adds	r5, #48	; 0x30
 8006a7c:	2a63      	cmp	r2, #99	; 0x63
 8006a7e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006a82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006a86:	4631      	mov	r1, r6
 8006a88:	dcf1      	bgt.n	8006a6e <__exponent+0x22>
 8006a8a:	3130      	adds	r1, #48	; 0x30
 8006a8c:	f1ae 0502 	sub.w	r5, lr, #2
 8006a90:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006a94:	1c44      	adds	r4, r0, #1
 8006a96:	4629      	mov	r1, r5
 8006a98:	4561      	cmp	r1, ip
 8006a9a:	d30a      	bcc.n	8006ab2 <__exponent+0x66>
 8006a9c:	f10d 0209 	add.w	r2, sp, #9
 8006aa0:	eba2 020e 	sub.w	r2, r2, lr
 8006aa4:	4565      	cmp	r5, ip
 8006aa6:	bf88      	it	hi
 8006aa8:	2200      	movhi	r2, #0
 8006aaa:	4413      	add	r3, r2
 8006aac:	1a18      	subs	r0, r3, r0
 8006aae:	b003      	add	sp, #12
 8006ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ab6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006aba:	e7ed      	b.n	8006a98 <__exponent+0x4c>
 8006abc:	2330      	movs	r3, #48	; 0x30
 8006abe:	3130      	adds	r1, #48	; 0x30
 8006ac0:	7083      	strb	r3, [r0, #2]
 8006ac2:	70c1      	strb	r1, [r0, #3]
 8006ac4:	1d03      	adds	r3, r0, #4
 8006ac6:	e7f1      	b.n	8006aac <__exponent+0x60>

08006ac8 <_printf_float>:
 8006ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006acc:	ed2d 8b02 	vpush	{d8}
 8006ad0:	b08d      	sub	sp, #52	; 0x34
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006ad8:	4616      	mov	r6, r2
 8006ada:	461f      	mov	r7, r3
 8006adc:	4605      	mov	r5, r0
 8006ade:	f001 fb47 	bl	8008170 <_localeconv_r>
 8006ae2:	f8d0 a000 	ldr.w	sl, [r0]
 8006ae6:	4650      	mov	r0, sl
 8006ae8:	f7f9 fb92 	bl	8000210 <strlen>
 8006aec:	2300      	movs	r3, #0
 8006aee:	930a      	str	r3, [sp, #40]	; 0x28
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	9305      	str	r3, [sp, #20]
 8006af4:	f8d8 3000 	ldr.w	r3, [r8]
 8006af8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006afc:	3307      	adds	r3, #7
 8006afe:	f023 0307 	bic.w	r3, r3, #7
 8006b02:	f103 0208 	add.w	r2, r3, #8
 8006b06:	f8c8 2000 	str.w	r2, [r8]
 8006b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006b16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b1a:	9307      	str	r3, [sp, #28]
 8006b1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b20:	ee08 0a10 	vmov	s16, r0
 8006b24:	4b9f      	ldr	r3, [pc, #636]	; (8006da4 <_printf_float+0x2dc>)
 8006b26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b2e:	f7fa f81d 	bl	8000b6c <__aeabi_dcmpun>
 8006b32:	bb88      	cbnz	r0, 8006b98 <_printf_float+0xd0>
 8006b34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b38:	4b9a      	ldr	r3, [pc, #616]	; (8006da4 <_printf_float+0x2dc>)
 8006b3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b3e:	f7f9 fff7 	bl	8000b30 <__aeabi_dcmple>
 8006b42:	bb48      	cbnz	r0, 8006b98 <_printf_float+0xd0>
 8006b44:	2200      	movs	r2, #0
 8006b46:	2300      	movs	r3, #0
 8006b48:	4640      	mov	r0, r8
 8006b4a:	4649      	mov	r1, r9
 8006b4c:	f7f9 ffe6 	bl	8000b1c <__aeabi_dcmplt>
 8006b50:	b110      	cbz	r0, 8006b58 <_printf_float+0x90>
 8006b52:	232d      	movs	r3, #45	; 0x2d
 8006b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b58:	4b93      	ldr	r3, [pc, #588]	; (8006da8 <_printf_float+0x2e0>)
 8006b5a:	4894      	ldr	r0, [pc, #592]	; (8006dac <_printf_float+0x2e4>)
 8006b5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006b60:	bf94      	ite	ls
 8006b62:	4698      	movls	r8, r3
 8006b64:	4680      	movhi	r8, r0
 8006b66:	2303      	movs	r3, #3
 8006b68:	6123      	str	r3, [r4, #16]
 8006b6a:	9b05      	ldr	r3, [sp, #20]
 8006b6c:	f023 0204 	bic.w	r2, r3, #4
 8006b70:	6022      	str	r2, [r4, #0]
 8006b72:	f04f 0900 	mov.w	r9, #0
 8006b76:	9700      	str	r7, [sp, #0]
 8006b78:	4633      	mov	r3, r6
 8006b7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f000 f9d8 	bl	8006f34 <_printf_common>
 8006b84:	3001      	adds	r0, #1
 8006b86:	f040 8090 	bne.w	8006caa <_printf_float+0x1e2>
 8006b8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b8e:	b00d      	add	sp, #52	; 0x34
 8006b90:	ecbd 8b02 	vpop	{d8}
 8006b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b98:	4642      	mov	r2, r8
 8006b9a:	464b      	mov	r3, r9
 8006b9c:	4640      	mov	r0, r8
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	f7f9 ffe4 	bl	8000b6c <__aeabi_dcmpun>
 8006ba4:	b140      	cbz	r0, 8006bb8 <_printf_float+0xf0>
 8006ba6:	464b      	mov	r3, r9
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	bfbc      	itt	lt
 8006bac:	232d      	movlt	r3, #45	; 0x2d
 8006bae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006bb2:	487f      	ldr	r0, [pc, #508]	; (8006db0 <_printf_float+0x2e8>)
 8006bb4:	4b7f      	ldr	r3, [pc, #508]	; (8006db4 <_printf_float+0x2ec>)
 8006bb6:	e7d1      	b.n	8006b5c <_printf_float+0x94>
 8006bb8:	6863      	ldr	r3, [r4, #4]
 8006bba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006bbe:	9206      	str	r2, [sp, #24]
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	d13f      	bne.n	8006c44 <_printf_float+0x17c>
 8006bc4:	2306      	movs	r3, #6
 8006bc6:	6063      	str	r3, [r4, #4]
 8006bc8:	9b05      	ldr	r3, [sp, #20]
 8006bca:	6861      	ldr	r1, [r4, #4]
 8006bcc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	9303      	str	r3, [sp, #12]
 8006bd4:	ab0a      	add	r3, sp, #40	; 0x28
 8006bd6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006bda:	ab09      	add	r3, sp, #36	; 0x24
 8006bdc:	ec49 8b10 	vmov	d0, r8, r9
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	6022      	str	r2, [r4, #0]
 8006be4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006be8:	4628      	mov	r0, r5
 8006bea:	f7ff fecd 	bl	8006988 <__cvt>
 8006bee:	9b06      	ldr	r3, [sp, #24]
 8006bf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bf2:	2b47      	cmp	r3, #71	; 0x47
 8006bf4:	4680      	mov	r8, r0
 8006bf6:	d108      	bne.n	8006c0a <_printf_float+0x142>
 8006bf8:	1cc8      	adds	r0, r1, #3
 8006bfa:	db02      	blt.n	8006c02 <_printf_float+0x13a>
 8006bfc:	6863      	ldr	r3, [r4, #4]
 8006bfe:	4299      	cmp	r1, r3
 8006c00:	dd41      	ble.n	8006c86 <_printf_float+0x1be>
 8006c02:	f1ab 0b02 	sub.w	fp, fp, #2
 8006c06:	fa5f fb8b 	uxtb.w	fp, fp
 8006c0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c0e:	d820      	bhi.n	8006c52 <_printf_float+0x18a>
 8006c10:	3901      	subs	r1, #1
 8006c12:	465a      	mov	r2, fp
 8006c14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c18:	9109      	str	r1, [sp, #36]	; 0x24
 8006c1a:	f7ff ff17 	bl	8006a4c <__exponent>
 8006c1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c20:	1813      	adds	r3, r2, r0
 8006c22:	2a01      	cmp	r2, #1
 8006c24:	4681      	mov	r9, r0
 8006c26:	6123      	str	r3, [r4, #16]
 8006c28:	dc02      	bgt.n	8006c30 <_printf_float+0x168>
 8006c2a:	6822      	ldr	r2, [r4, #0]
 8006c2c:	07d2      	lsls	r2, r2, #31
 8006c2e:	d501      	bpl.n	8006c34 <_printf_float+0x16c>
 8006c30:	3301      	adds	r3, #1
 8006c32:	6123      	str	r3, [r4, #16]
 8006c34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d09c      	beq.n	8006b76 <_printf_float+0xae>
 8006c3c:	232d      	movs	r3, #45	; 0x2d
 8006c3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c42:	e798      	b.n	8006b76 <_printf_float+0xae>
 8006c44:	9a06      	ldr	r2, [sp, #24]
 8006c46:	2a47      	cmp	r2, #71	; 0x47
 8006c48:	d1be      	bne.n	8006bc8 <_printf_float+0x100>
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1bc      	bne.n	8006bc8 <_printf_float+0x100>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e7b9      	b.n	8006bc6 <_printf_float+0xfe>
 8006c52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006c56:	d118      	bne.n	8006c8a <_printf_float+0x1c2>
 8006c58:	2900      	cmp	r1, #0
 8006c5a:	6863      	ldr	r3, [r4, #4]
 8006c5c:	dd0b      	ble.n	8006c76 <_printf_float+0x1ae>
 8006c5e:	6121      	str	r1, [r4, #16]
 8006c60:	b913      	cbnz	r3, 8006c68 <_printf_float+0x1a0>
 8006c62:	6822      	ldr	r2, [r4, #0]
 8006c64:	07d0      	lsls	r0, r2, #31
 8006c66:	d502      	bpl.n	8006c6e <_printf_float+0x1a6>
 8006c68:	3301      	adds	r3, #1
 8006c6a:	440b      	add	r3, r1
 8006c6c:	6123      	str	r3, [r4, #16]
 8006c6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c70:	f04f 0900 	mov.w	r9, #0
 8006c74:	e7de      	b.n	8006c34 <_printf_float+0x16c>
 8006c76:	b913      	cbnz	r3, 8006c7e <_printf_float+0x1b6>
 8006c78:	6822      	ldr	r2, [r4, #0]
 8006c7a:	07d2      	lsls	r2, r2, #31
 8006c7c:	d501      	bpl.n	8006c82 <_printf_float+0x1ba>
 8006c7e:	3302      	adds	r3, #2
 8006c80:	e7f4      	b.n	8006c6c <_printf_float+0x1a4>
 8006c82:	2301      	movs	r3, #1
 8006c84:	e7f2      	b.n	8006c6c <_printf_float+0x1a4>
 8006c86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c8c:	4299      	cmp	r1, r3
 8006c8e:	db05      	blt.n	8006c9c <_printf_float+0x1d4>
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	6121      	str	r1, [r4, #16]
 8006c94:	07d8      	lsls	r0, r3, #31
 8006c96:	d5ea      	bpl.n	8006c6e <_printf_float+0x1a6>
 8006c98:	1c4b      	adds	r3, r1, #1
 8006c9a:	e7e7      	b.n	8006c6c <_printf_float+0x1a4>
 8006c9c:	2900      	cmp	r1, #0
 8006c9e:	bfd4      	ite	le
 8006ca0:	f1c1 0202 	rsble	r2, r1, #2
 8006ca4:	2201      	movgt	r2, #1
 8006ca6:	4413      	add	r3, r2
 8006ca8:	e7e0      	b.n	8006c6c <_printf_float+0x1a4>
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	055a      	lsls	r2, r3, #21
 8006cae:	d407      	bmi.n	8006cc0 <_printf_float+0x1f8>
 8006cb0:	6923      	ldr	r3, [r4, #16]
 8006cb2:	4642      	mov	r2, r8
 8006cb4:	4631      	mov	r1, r6
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	47b8      	blx	r7
 8006cba:	3001      	adds	r0, #1
 8006cbc:	d12c      	bne.n	8006d18 <_printf_float+0x250>
 8006cbe:	e764      	b.n	8006b8a <_printf_float+0xc2>
 8006cc0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006cc4:	f240 80e0 	bls.w	8006e88 <_printf_float+0x3c0>
 8006cc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ccc:	2200      	movs	r2, #0
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f7f9 ff1a 	bl	8000b08 <__aeabi_dcmpeq>
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	d034      	beq.n	8006d42 <_printf_float+0x27a>
 8006cd8:	4a37      	ldr	r2, [pc, #220]	; (8006db8 <_printf_float+0x2f0>)
 8006cda:	2301      	movs	r3, #1
 8006cdc:	4631      	mov	r1, r6
 8006cde:	4628      	mov	r0, r5
 8006ce0:	47b8      	blx	r7
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	f43f af51 	beq.w	8006b8a <_printf_float+0xc2>
 8006ce8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cec:	429a      	cmp	r2, r3
 8006cee:	db02      	blt.n	8006cf6 <_printf_float+0x22e>
 8006cf0:	6823      	ldr	r3, [r4, #0]
 8006cf2:	07d8      	lsls	r0, r3, #31
 8006cf4:	d510      	bpl.n	8006d18 <_printf_float+0x250>
 8006cf6:	ee18 3a10 	vmov	r3, s16
 8006cfa:	4652      	mov	r2, sl
 8006cfc:	4631      	mov	r1, r6
 8006cfe:	4628      	mov	r0, r5
 8006d00:	47b8      	blx	r7
 8006d02:	3001      	adds	r0, #1
 8006d04:	f43f af41 	beq.w	8006b8a <_printf_float+0xc2>
 8006d08:	f04f 0800 	mov.w	r8, #0
 8006d0c:	f104 091a 	add.w	r9, r4, #26
 8006d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d12:	3b01      	subs	r3, #1
 8006d14:	4543      	cmp	r3, r8
 8006d16:	dc09      	bgt.n	8006d2c <_printf_float+0x264>
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	079b      	lsls	r3, r3, #30
 8006d1c:	f100 8105 	bmi.w	8006f2a <_printf_float+0x462>
 8006d20:	68e0      	ldr	r0, [r4, #12]
 8006d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d24:	4298      	cmp	r0, r3
 8006d26:	bfb8      	it	lt
 8006d28:	4618      	movlt	r0, r3
 8006d2a:	e730      	b.n	8006b8e <_printf_float+0xc6>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	464a      	mov	r2, r9
 8006d30:	4631      	mov	r1, r6
 8006d32:	4628      	mov	r0, r5
 8006d34:	47b8      	blx	r7
 8006d36:	3001      	adds	r0, #1
 8006d38:	f43f af27 	beq.w	8006b8a <_printf_float+0xc2>
 8006d3c:	f108 0801 	add.w	r8, r8, #1
 8006d40:	e7e6      	b.n	8006d10 <_printf_float+0x248>
 8006d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	dc39      	bgt.n	8006dbc <_printf_float+0x2f4>
 8006d48:	4a1b      	ldr	r2, [pc, #108]	; (8006db8 <_printf_float+0x2f0>)
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4631      	mov	r1, r6
 8006d4e:	4628      	mov	r0, r5
 8006d50:	47b8      	blx	r7
 8006d52:	3001      	adds	r0, #1
 8006d54:	f43f af19 	beq.w	8006b8a <_printf_float+0xc2>
 8006d58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	d102      	bne.n	8006d66 <_printf_float+0x29e>
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	07d9      	lsls	r1, r3, #31
 8006d64:	d5d8      	bpl.n	8006d18 <_printf_float+0x250>
 8006d66:	ee18 3a10 	vmov	r3, s16
 8006d6a:	4652      	mov	r2, sl
 8006d6c:	4631      	mov	r1, r6
 8006d6e:	4628      	mov	r0, r5
 8006d70:	47b8      	blx	r7
 8006d72:	3001      	adds	r0, #1
 8006d74:	f43f af09 	beq.w	8006b8a <_printf_float+0xc2>
 8006d78:	f04f 0900 	mov.w	r9, #0
 8006d7c:	f104 0a1a 	add.w	sl, r4, #26
 8006d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d82:	425b      	negs	r3, r3
 8006d84:	454b      	cmp	r3, r9
 8006d86:	dc01      	bgt.n	8006d8c <_printf_float+0x2c4>
 8006d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d8a:	e792      	b.n	8006cb2 <_printf_float+0x1ea>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	4652      	mov	r2, sl
 8006d90:	4631      	mov	r1, r6
 8006d92:	4628      	mov	r0, r5
 8006d94:	47b8      	blx	r7
 8006d96:	3001      	adds	r0, #1
 8006d98:	f43f aef7 	beq.w	8006b8a <_printf_float+0xc2>
 8006d9c:	f109 0901 	add.w	r9, r9, #1
 8006da0:	e7ee      	b.n	8006d80 <_printf_float+0x2b8>
 8006da2:	bf00      	nop
 8006da4:	7fefffff 	.word	0x7fefffff
 8006da8:	0800b194 	.word	0x0800b194
 8006dac:	0800b198 	.word	0x0800b198
 8006db0:	0800b1a0 	.word	0x0800b1a0
 8006db4:	0800b19c 	.word	0x0800b19c
 8006db8:	0800b1a4 	.word	0x0800b1a4
 8006dbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	bfa8      	it	ge
 8006dc4:	461a      	movge	r2, r3
 8006dc6:	2a00      	cmp	r2, #0
 8006dc8:	4691      	mov	r9, r2
 8006dca:	dc37      	bgt.n	8006e3c <_printf_float+0x374>
 8006dcc:	f04f 0b00 	mov.w	fp, #0
 8006dd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dd4:	f104 021a 	add.w	r2, r4, #26
 8006dd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dda:	9305      	str	r3, [sp, #20]
 8006ddc:	eba3 0309 	sub.w	r3, r3, r9
 8006de0:	455b      	cmp	r3, fp
 8006de2:	dc33      	bgt.n	8006e4c <_printf_float+0x384>
 8006de4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006de8:	429a      	cmp	r2, r3
 8006dea:	db3b      	blt.n	8006e64 <_printf_float+0x39c>
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	07da      	lsls	r2, r3, #31
 8006df0:	d438      	bmi.n	8006e64 <_printf_float+0x39c>
 8006df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006df4:	9a05      	ldr	r2, [sp, #20]
 8006df6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006df8:	1a9a      	subs	r2, r3, r2
 8006dfa:	eba3 0901 	sub.w	r9, r3, r1
 8006dfe:	4591      	cmp	r9, r2
 8006e00:	bfa8      	it	ge
 8006e02:	4691      	movge	r9, r2
 8006e04:	f1b9 0f00 	cmp.w	r9, #0
 8006e08:	dc35      	bgt.n	8006e76 <_printf_float+0x3ae>
 8006e0a:	f04f 0800 	mov.w	r8, #0
 8006e0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e12:	f104 0a1a 	add.w	sl, r4, #26
 8006e16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e1a:	1a9b      	subs	r3, r3, r2
 8006e1c:	eba3 0309 	sub.w	r3, r3, r9
 8006e20:	4543      	cmp	r3, r8
 8006e22:	f77f af79 	ble.w	8006d18 <_printf_float+0x250>
 8006e26:	2301      	movs	r3, #1
 8006e28:	4652      	mov	r2, sl
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	47b8      	blx	r7
 8006e30:	3001      	adds	r0, #1
 8006e32:	f43f aeaa 	beq.w	8006b8a <_printf_float+0xc2>
 8006e36:	f108 0801 	add.w	r8, r8, #1
 8006e3a:	e7ec      	b.n	8006e16 <_printf_float+0x34e>
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4642      	mov	r2, r8
 8006e42:	4628      	mov	r0, r5
 8006e44:	47b8      	blx	r7
 8006e46:	3001      	adds	r0, #1
 8006e48:	d1c0      	bne.n	8006dcc <_printf_float+0x304>
 8006e4a:	e69e      	b.n	8006b8a <_printf_float+0xc2>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4628      	mov	r0, r5
 8006e52:	9205      	str	r2, [sp, #20]
 8006e54:	47b8      	blx	r7
 8006e56:	3001      	adds	r0, #1
 8006e58:	f43f ae97 	beq.w	8006b8a <_printf_float+0xc2>
 8006e5c:	9a05      	ldr	r2, [sp, #20]
 8006e5e:	f10b 0b01 	add.w	fp, fp, #1
 8006e62:	e7b9      	b.n	8006dd8 <_printf_float+0x310>
 8006e64:	ee18 3a10 	vmov	r3, s16
 8006e68:	4652      	mov	r2, sl
 8006e6a:	4631      	mov	r1, r6
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	47b8      	blx	r7
 8006e70:	3001      	adds	r0, #1
 8006e72:	d1be      	bne.n	8006df2 <_printf_float+0x32a>
 8006e74:	e689      	b.n	8006b8a <_printf_float+0xc2>
 8006e76:	9a05      	ldr	r2, [sp, #20]
 8006e78:	464b      	mov	r3, r9
 8006e7a:	4442      	add	r2, r8
 8006e7c:	4631      	mov	r1, r6
 8006e7e:	4628      	mov	r0, r5
 8006e80:	47b8      	blx	r7
 8006e82:	3001      	adds	r0, #1
 8006e84:	d1c1      	bne.n	8006e0a <_printf_float+0x342>
 8006e86:	e680      	b.n	8006b8a <_printf_float+0xc2>
 8006e88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e8a:	2a01      	cmp	r2, #1
 8006e8c:	dc01      	bgt.n	8006e92 <_printf_float+0x3ca>
 8006e8e:	07db      	lsls	r3, r3, #31
 8006e90:	d538      	bpl.n	8006f04 <_printf_float+0x43c>
 8006e92:	2301      	movs	r3, #1
 8006e94:	4642      	mov	r2, r8
 8006e96:	4631      	mov	r1, r6
 8006e98:	4628      	mov	r0, r5
 8006e9a:	47b8      	blx	r7
 8006e9c:	3001      	adds	r0, #1
 8006e9e:	f43f ae74 	beq.w	8006b8a <_printf_float+0xc2>
 8006ea2:	ee18 3a10 	vmov	r3, s16
 8006ea6:	4652      	mov	r2, sl
 8006ea8:	4631      	mov	r1, r6
 8006eaa:	4628      	mov	r0, r5
 8006eac:	47b8      	blx	r7
 8006eae:	3001      	adds	r0, #1
 8006eb0:	f43f ae6b 	beq.w	8006b8a <_printf_float+0xc2>
 8006eb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006eb8:	2200      	movs	r2, #0
 8006eba:	2300      	movs	r3, #0
 8006ebc:	f7f9 fe24 	bl	8000b08 <__aeabi_dcmpeq>
 8006ec0:	b9d8      	cbnz	r0, 8006efa <_printf_float+0x432>
 8006ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ec4:	f108 0201 	add.w	r2, r8, #1
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	4631      	mov	r1, r6
 8006ecc:	4628      	mov	r0, r5
 8006ece:	47b8      	blx	r7
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	d10e      	bne.n	8006ef2 <_printf_float+0x42a>
 8006ed4:	e659      	b.n	8006b8a <_printf_float+0xc2>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	4652      	mov	r2, sl
 8006eda:	4631      	mov	r1, r6
 8006edc:	4628      	mov	r0, r5
 8006ede:	47b8      	blx	r7
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	f43f ae52 	beq.w	8006b8a <_printf_float+0xc2>
 8006ee6:	f108 0801 	add.w	r8, r8, #1
 8006eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eec:	3b01      	subs	r3, #1
 8006eee:	4543      	cmp	r3, r8
 8006ef0:	dcf1      	bgt.n	8006ed6 <_printf_float+0x40e>
 8006ef2:	464b      	mov	r3, r9
 8006ef4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ef8:	e6dc      	b.n	8006cb4 <_printf_float+0x1ec>
 8006efa:	f04f 0800 	mov.w	r8, #0
 8006efe:	f104 0a1a 	add.w	sl, r4, #26
 8006f02:	e7f2      	b.n	8006eea <_printf_float+0x422>
 8006f04:	2301      	movs	r3, #1
 8006f06:	4642      	mov	r2, r8
 8006f08:	e7df      	b.n	8006eca <_printf_float+0x402>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	464a      	mov	r2, r9
 8006f0e:	4631      	mov	r1, r6
 8006f10:	4628      	mov	r0, r5
 8006f12:	47b8      	blx	r7
 8006f14:	3001      	adds	r0, #1
 8006f16:	f43f ae38 	beq.w	8006b8a <_printf_float+0xc2>
 8006f1a:	f108 0801 	add.w	r8, r8, #1
 8006f1e:	68e3      	ldr	r3, [r4, #12]
 8006f20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f22:	1a5b      	subs	r3, r3, r1
 8006f24:	4543      	cmp	r3, r8
 8006f26:	dcf0      	bgt.n	8006f0a <_printf_float+0x442>
 8006f28:	e6fa      	b.n	8006d20 <_printf_float+0x258>
 8006f2a:	f04f 0800 	mov.w	r8, #0
 8006f2e:	f104 0919 	add.w	r9, r4, #25
 8006f32:	e7f4      	b.n	8006f1e <_printf_float+0x456>

08006f34 <_printf_common>:
 8006f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f38:	4616      	mov	r6, r2
 8006f3a:	4699      	mov	r9, r3
 8006f3c:	688a      	ldr	r2, [r1, #8]
 8006f3e:	690b      	ldr	r3, [r1, #16]
 8006f40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f44:	4293      	cmp	r3, r2
 8006f46:	bfb8      	it	lt
 8006f48:	4613      	movlt	r3, r2
 8006f4a:	6033      	str	r3, [r6, #0]
 8006f4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f50:	4607      	mov	r7, r0
 8006f52:	460c      	mov	r4, r1
 8006f54:	b10a      	cbz	r2, 8006f5a <_printf_common+0x26>
 8006f56:	3301      	adds	r3, #1
 8006f58:	6033      	str	r3, [r6, #0]
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	0699      	lsls	r1, r3, #26
 8006f5e:	bf42      	ittt	mi
 8006f60:	6833      	ldrmi	r3, [r6, #0]
 8006f62:	3302      	addmi	r3, #2
 8006f64:	6033      	strmi	r3, [r6, #0]
 8006f66:	6825      	ldr	r5, [r4, #0]
 8006f68:	f015 0506 	ands.w	r5, r5, #6
 8006f6c:	d106      	bne.n	8006f7c <_printf_common+0x48>
 8006f6e:	f104 0a19 	add.w	sl, r4, #25
 8006f72:	68e3      	ldr	r3, [r4, #12]
 8006f74:	6832      	ldr	r2, [r6, #0]
 8006f76:	1a9b      	subs	r3, r3, r2
 8006f78:	42ab      	cmp	r3, r5
 8006f7a:	dc26      	bgt.n	8006fca <_printf_common+0x96>
 8006f7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f80:	1e13      	subs	r3, r2, #0
 8006f82:	6822      	ldr	r2, [r4, #0]
 8006f84:	bf18      	it	ne
 8006f86:	2301      	movne	r3, #1
 8006f88:	0692      	lsls	r2, r2, #26
 8006f8a:	d42b      	bmi.n	8006fe4 <_printf_common+0xb0>
 8006f8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f90:	4649      	mov	r1, r9
 8006f92:	4638      	mov	r0, r7
 8006f94:	47c0      	blx	r8
 8006f96:	3001      	adds	r0, #1
 8006f98:	d01e      	beq.n	8006fd8 <_printf_common+0xa4>
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	68e5      	ldr	r5, [r4, #12]
 8006f9e:	6832      	ldr	r2, [r6, #0]
 8006fa0:	f003 0306 	and.w	r3, r3, #6
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	bf08      	it	eq
 8006fa8:	1aad      	subeq	r5, r5, r2
 8006faa:	68a3      	ldr	r3, [r4, #8]
 8006fac:	6922      	ldr	r2, [r4, #16]
 8006fae:	bf0c      	ite	eq
 8006fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fb4:	2500      	movne	r5, #0
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	bfc4      	itt	gt
 8006fba:	1a9b      	subgt	r3, r3, r2
 8006fbc:	18ed      	addgt	r5, r5, r3
 8006fbe:	2600      	movs	r6, #0
 8006fc0:	341a      	adds	r4, #26
 8006fc2:	42b5      	cmp	r5, r6
 8006fc4:	d11a      	bne.n	8006ffc <_printf_common+0xc8>
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	e008      	b.n	8006fdc <_printf_common+0xa8>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	4652      	mov	r2, sl
 8006fce:	4649      	mov	r1, r9
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	47c0      	blx	r8
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	d103      	bne.n	8006fe0 <_printf_common+0xac>
 8006fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe0:	3501      	adds	r5, #1
 8006fe2:	e7c6      	b.n	8006f72 <_printf_common+0x3e>
 8006fe4:	18e1      	adds	r1, r4, r3
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	2030      	movs	r0, #48	; 0x30
 8006fea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fee:	4422      	add	r2, r4
 8006ff0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ff4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ff8:	3302      	adds	r3, #2
 8006ffa:	e7c7      	b.n	8006f8c <_printf_common+0x58>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	4622      	mov	r2, r4
 8007000:	4649      	mov	r1, r9
 8007002:	4638      	mov	r0, r7
 8007004:	47c0      	blx	r8
 8007006:	3001      	adds	r0, #1
 8007008:	d0e6      	beq.n	8006fd8 <_printf_common+0xa4>
 800700a:	3601      	adds	r6, #1
 800700c:	e7d9      	b.n	8006fc2 <_printf_common+0x8e>
	...

08007010 <_printf_i>:
 8007010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007014:	7e0f      	ldrb	r7, [r1, #24]
 8007016:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007018:	2f78      	cmp	r7, #120	; 0x78
 800701a:	4691      	mov	r9, r2
 800701c:	4680      	mov	r8, r0
 800701e:	460c      	mov	r4, r1
 8007020:	469a      	mov	sl, r3
 8007022:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007026:	d807      	bhi.n	8007038 <_printf_i+0x28>
 8007028:	2f62      	cmp	r7, #98	; 0x62
 800702a:	d80a      	bhi.n	8007042 <_printf_i+0x32>
 800702c:	2f00      	cmp	r7, #0
 800702e:	f000 80d8 	beq.w	80071e2 <_printf_i+0x1d2>
 8007032:	2f58      	cmp	r7, #88	; 0x58
 8007034:	f000 80a3 	beq.w	800717e <_printf_i+0x16e>
 8007038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800703c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007040:	e03a      	b.n	80070b8 <_printf_i+0xa8>
 8007042:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007046:	2b15      	cmp	r3, #21
 8007048:	d8f6      	bhi.n	8007038 <_printf_i+0x28>
 800704a:	a101      	add	r1, pc, #4	; (adr r1, 8007050 <_printf_i+0x40>)
 800704c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007050:	080070a9 	.word	0x080070a9
 8007054:	080070bd 	.word	0x080070bd
 8007058:	08007039 	.word	0x08007039
 800705c:	08007039 	.word	0x08007039
 8007060:	08007039 	.word	0x08007039
 8007064:	08007039 	.word	0x08007039
 8007068:	080070bd 	.word	0x080070bd
 800706c:	08007039 	.word	0x08007039
 8007070:	08007039 	.word	0x08007039
 8007074:	08007039 	.word	0x08007039
 8007078:	08007039 	.word	0x08007039
 800707c:	080071c9 	.word	0x080071c9
 8007080:	080070ed 	.word	0x080070ed
 8007084:	080071ab 	.word	0x080071ab
 8007088:	08007039 	.word	0x08007039
 800708c:	08007039 	.word	0x08007039
 8007090:	080071eb 	.word	0x080071eb
 8007094:	08007039 	.word	0x08007039
 8007098:	080070ed 	.word	0x080070ed
 800709c:	08007039 	.word	0x08007039
 80070a0:	08007039 	.word	0x08007039
 80070a4:	080071b3 	.word	0x080071b3
 80070a8:	682b      	ldr	r3, [r5, #0]
 80070aa:	1d1a      	adds	r2, r3, #4
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	602a      	str	r2, [r5, #0]
 80070b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070b8:	2301      	movs	r3, #1
 80070ba:	e0a3      	b.n	8007204 <_printf_i+0x1f4>
 80070bc:	6820      	ldr	r0, [r4, #0]
 80070be:	6829      	ldr	r1, [r5, #0]
 80070c0:	0606      	lsls	r6, r0, #24
 80070c2:	f101 0304 	add.w	r3, r1, #4
 80070c6:	d50a      	bpl.n	80070de <_printf_i+0xce>
 80070c8:	680e      	ldr	r6, [r1, #0]
 80070ca:	602b      	str	r3, [r5, #0]
 80070cc:	2e00      	cmp	r6, #0
 80070ce:	da03      	bge.n	80070d8 <_printf_i+0xc8>
 80070d0:	232d      	movs	r3, #45	; 0x2d
 80070d2:	4276      	negs	r6, r6
 80070d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070d8:	485e      	ldr	r0, [pc, #376]	; (8007254 <_printf_i+0x244>)
 80070da:	230a      	movs	r3, #10
 80070dc:	e019      	b.n	8007112 <_printf_i+0x102>
 80070de:	680e      	ldr	r6, [r1, #0]
 80070e0:	602b      	str	r3, [r5, #0]
 80070e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070e6:	bf18      	it	ne
 80070e8:	b236      	sxthne	r6, r6
 80070ea:	e7ef      	b.n	80070cc <_printf_i+0xbc>
 80070ec:	682b      	ldr	r3, [r5, #0]
 80070ee:	6820      	ldr	r0, [r4, #0]
 80070f0:	1d19      	adds	r1, r3, #4
 80070f2:	6029      	str	r1, [r5, #0]
 80070f4:	0601      	lsls	r1, r0, #24
 80070f6:	d501      	bpl.n	80070fc <_printf_i+0xec>
 80070f8:	681e      	ldr	r6, [r3, #0]
 80070fa:	e002      	b.n	8007102 <_printf_i+0xf2>
 80070fc:	0646      	lsls	r6, r0, #25
 80070fe:	d5fb      	bpl.n	80070f8 <_printf_i+0xe8>
 8007100:	881e      	ldrh	r6, [r3, #0]
 8007102:	4854      	ldr	r0, [pc, #336]	; (8007254 <_printf_i+0x244>)
 8007104:	2f6f      	cmp	r7, #111	; 0x6f
 8007106:	bf0c      	ite	eq
 8007108:	2308      	moveq	r3, #8
 800710a:	230a      	movne	r3, #10
 800710c:	2100      	movs	r1, #0
 800710e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007112:	6865      	ldr	r5, [r4, #4]
 8007114:	60a5      	str	r5, [r4, #8]
 8007116:	2d00      	cmp	r5, #0
 8007118:	bfa2      	ittt	ge
 800711a:	6821      	ldrge	r1, [r4, #0]
 800711c:	f021 0104 	bicge.w	r1, r1, #4
 8007120:	6021      	strge	r1, [r4, #0]
 8007122:	b90e      	cbnz	r6, 8007128 <_printf_i+0x118>
 8007124:	2d00      	cmp	r5, #0
 8007126:	d04d      	beq.n	80071c4 <_printf_i+0x1b4>
 8007128:	4615      	mov	r5, r2
 800712a:	fbb6 f1f3 	udiv	r1, r6, r3
 800712e:	fb03 6711 	mls	r7, r3, r1, r6
 8007132:	5dc7      	ldrb	r7, [r0, r7]
 8007134:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007138:	4637      	mov	r7, r6
 800713a:	42bb      	cmp	r3, r7
 800713c:	460e      	mov	r6, r1
 800713e:	d9f4      	bls.n	800712a <_printf_i+0x11a>
 8007140:	2b08      	cmp	r3, #8
 8007142:	d10b      	bne.n	800715c <_printf_i+0x14c>
 8007144:	6823      	ldr	r3, [r4, #0]
 8007146:	07de      	lsls	r6, r3, #31
 8007148:	d508      	bpl.n	800715c <_printf_i+0x14c>
 800714a:	6923      	ldr	r3, [r4, #16]
 800714c:	6861      	ldr	r1, [r4, #4]
 800714e:	4299      	cmp	r1, r3
 8007150:	bfde      	ittt	le
 8007152:	2330      	movle	r3, #48	; 0x30
 8007154:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007158:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800715c:	1b52      	subs	r2, r2, r5
 800715e:	6122      	str	r2, [r4, #16]
 8007160:	f8cd a000 	str.w	sl, [sp]
 8007164:	464b      	mov	r3, r9
 8007166:	aa03      	add	r2, sp, #12
 8007168:	4621      	mov	r1, r4
 800716a:	4640      	mov	r0, r8
 800716c:	f7ff fee2 	bl	8006f34 <_printf_common>
 8007170:	3001      	adds	r0, #1
 8007172:	d14c      	bne.n	800720e <_printf_i+0x1fe>
 8007174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007178:	b004      	add	sp, #16
 800717a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800717e:	4835      	ldr	r0, [pc, #212]	; (8007254 <_printf_i+0x244>)
 8007180:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007184:	6829      	ldr	r1, [r5, #0]
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	f851 6b04 	ldr.w	r6, [r1], #4
 800718c:	6029      	str	r1, [r5, #0]
 800718e:	061d      	lsls	r5, r3, #24
 8007190:	d514      	bpl.n	80071bc <_printf_i+0x1ac>
 8007192:	07df      	lsls	r7, r3, #31
 8007194:	bf44      	itt	mi
 8007196:	f043 0320 	orrmi.w	r3, r3, #32
 800719a:	6023      	strmi	r3, [r4, #0]
 800719c:	b91e      	cbnz	r6, 80071a6 <_printf_i+0x196>
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	f023 0320 	bic.w	r3, r3, #32
 80071a4:	6023      	str	r3, [r4, #0]
 80071a6:	2310      	movs	r3, #16
 80071a8:	e7b0      	b.n	800710c <_printf_i+0xfc>
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	f043 0320 	orr.w	r3, r3, #32
 80071b0:	6023      	str	r3, [r4, #0]
 80071b2:	2378      	movs	r3, #120	; 0x78
 80071b4:	4828      	ldr	r0, [pc, #160]	; (8007258 <_printf_i+0x248>)
 80071b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071ba:	e7e3      	b.n	8007184 <_printf_i+0x174>
 80071bc:	0659      	lsls	r1, r3, #25
 80071be:	bf48      	it	mi
 80071c0:	b2b6      	uxthmi	r6, r6
 80071c2:	e7e6      	b.n	8007192 <_printf_i+0x182>
 80071c4:	4615      	mov	r5, r2
 80071c6:	e7bb      	b.n	8007140 <_printf_i+0x130>
 80071c8:	682b      	ldr	r3, [r5, #0]
 80071ca:	6826      	ldr	r6, [r4, #0]
 80071cc:	6961      	ldr	r1, [r4, #20]
 80071ce:	1d18      	adds	r0, r3, #4
 80071d0:	6028      	str	r0, [r5, #0]
 80071d2:	0635      	lsls	r5, r6, #24
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	d501      	bpl.n	80071dc <_printf_i+0x1cc>
 80071d8:	6019      	str	r1, [r3, #0]
 80071da:	e002      	b.n	80071e2 <_printf_i+0x1d2>
 80071dc:	0670      	lsls	r0, r6, #25
 80071de:	d5fb      	bpl.n	80071d8 <_printf_i+0x1c8>
 80071e0:	8019      	strh	r1, [r3, #0]
 80071e2:	2300      	movs	r3, #0
 80071e4:	6123      	str	r3, [r4, #16]
 80071e6:	4615      	mov	r5, r2
 80071e8:	e7ba      	b.n	8007160 <_printf_i+0x150>
 80071ea:	682b      	ldr	r3, [r5, #0]
 80071ec:	1d1a      	adds	r2, r3, #4
 80071ee:	602a      	str	r2, [r5, #0]
 80071f0:	681d      	ldr	r5, [r3, #0]
 80071f2:	6862      	ldr	r2, [r4, #4]
 80071f4:	2100      	movs	r1, #0
 80071f6:	4628      	mov	r0, r5
 80071f8:	f7f9 f812 	bl	8000220 <memchr>
 80071fc:	b108      	cbz	r0, 8007202 <_printf_i+0x1f2>
 80071fe:	1b40      	subs	r0, r0, r5
 8007200:	6060      	str	r0, [r4, #4]
 8007202:	6863      	ldr	r3, [r4, #4]
 8007204:	6123      	str	r3, [r4, #16]
 8007206:	2300      	movs	r3, #0
 8007208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800720c:	e7a8      	b.n	8007160 <_printf_i+0x150>
 800720e:	6923      	ldr	r3, [r4, #16]
 8007210:	462a      	mov	r2, r5
 8007212:	4649      	mov	r1, r9
 8007214:	4640      	mov	r0, r8
 8007216:	47d0      	blx	sl
 8007218:	3001      	adds	r0, #1
 800721a:	d0ab      	beq.n	8007174 <_printf_i+0x164>
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	079b      	lsls	r3, r3, #30
 8007220:	d413      	bmi.n	800724a <_printf_i+0x23a>
 8007222:	68e0      	ldr	r0, [r4, #12]
 8007224:	9b03      	ldr	r3, [sp, #12]
 8007226:	4298      	cmp	r0, r3
 8007228:	bfb8      	it	lt
 800722a:	4618      	movlt	r0, r3
 800722c:	e7a4      	b.n	8007178 <_printf_i+0x168>
 800722e:	2301      	movs	r3, #1
 8007230:	4632      	mov	r2, r6
 8007232:	4649      	mov	r1, r9
 8007234:	4640      	mov	r0, r8
 8007236:	47d0      	blx	sl
 8007238:	3001      	adds	r0, #1
 800723a:	d09b      	beq.n	8007174 <_printf_i+0x164>
 800723c:	3501      	adds	r5, #1
 800723e:	68e3      	ldr	r3, [r4, #12]
 8007240:	9903      	ldr	r1, [sp, #12]
 8007242:	1a5b      	subs	r3, r3, r1
 8007244:	42ab      	cmp	r3, r5
 8007246:	dcf2      	bgt.n	800722e <_printf_i+0x21e>
 8007248:	e7eb      	b.n	8007222 <_printf_i+0x212>
 800724a:	2500      	movs	r5, #0
 800724c:	f104 0619 	add.w	r6, r4, #25
 8007250:	e7f5      	b.n	800723e <_printf_i+0x22e>
 8007252:	bf00      	nop
 8007254:	0800b1a6 	.word	0x0800b1a6
 8007258:	0800b1b7 	.word	0x0800b1b7

0800725c <iprintf>:
 800725c:	b40f      	push	{r0, r1, r2, r3}
 800725e:	4b0a      	ldr	r3, [pc, #40]	; (8007288 <iprintf+0x2c>)
 8007260:	b513      	push	{r0, r1, r4, lr}
 8007262:	681c      	ldr	r4, [r3, #0]
 8007264:	b124      	cbz	r4, 8007270 <iprintf+0x14>
 8007266:	69a3      	ldr	r3, [r4, #24]
 8007268:	b913      	cbnz	r3, 8007270 <iprintf+0x14>
 800726a:	4620      	mov	r0, r4
 800726c:	f000 fee2 	bl	8008034 <__sinit>
 8007270:	ab05      	add	r3, sp, #20
 8007272:	9a04      	ldr	r2, [sp, #16]
 8007274:	68a1      	ldr	r1, [r4, #8]
 8007276:	9301      	str	r3, [sp, #4]
 8007278:	4620      	mov	r0, r4
 800727a:	f001 fc3b 	bl	8008af4 <_vfiprintf_r>
 800727e:	b002      	add	sp, #8
 8007280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007284:	b004      	add	sp, #16
 8007286:	4770      	bx	lr
 8007288:	20000018 	.word	0x20000018

0800728c <quorem>:
 800728c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007290:	6903      	ldr	r3, [r0, #16]
 8007292:	690c      	ldr	r4, [r1, #16]
 8007294:	42a3      	cmp	r3, r4
 8007296:	4607      	mov	r7, r0
 8007298:	f2c0 8081 	blt.w	800739e <quorem+0x112>
 800729c:	3c01      	subs	r4, #1
 800729e:	f101 0814 	add.w	r8, r1, #20
 80072a2:	f100 0514 	add.w	r5, r0, #20
 80072a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072aa:	9301      	str	r3, [sp, #4]
 80072ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072b4:	3301      	adds	r3, #1
 80072b6:	429a      	cmp	r2, r3
 80072b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80072bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80072c4:	d331      	bcc.n	800732a <quorem+0x9e>
 80072c6:	f04f 0e00 	mov.w	lr, #0
 80072ca:	4640      	mov	r0, r8
 80072cc:	46ac      	mov	ip, r5
 80072ce:	46f2      	mov	sl, lr
 80072d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80072d4:	b293      	uxth	r3, r2
 80072d6:	fb06 e303 	mla	r3, r6, r3, lr
 80072da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80072de:	b29b      	uxth	r3, r3
 80072e0:	ebaa 0303 	sub.w	r3, sl, r3
 80072e4:	f8dc a000 	ldr.w	sl, [ip]
 80072e8:	0c12      	lsrs	r2, r2, #16
 80072ea:	fa13 f38a 	uxtah	r3, r3, sl
 80072ee:	fb06 e202 	mla	r2, r6, r2, lr
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	9b00      	ldr	r3, [sp, #0]
 80072f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80072fa:	b292      	uxth	r2, r2
 80072fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007300:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007304:	f8bd 3000 	ldrh.w	r3, [sp]
 8007308:	4581      	cmp	r9, r0
 800730a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800730e:	f84c 3b04 	str.w	r3, [ip], #4
 8007312:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007316:	d2db      	bcs.n	80072d0 <quorem+0x44>
 8007318:	f855 300b 	ldr.w	r3, [r5, fp]
 800731c:	b92b      	cbnz	r3, 800732a <quorem+0x9e>
 800731e:	9b01      	ldr	r3, [sp, #4]
 8007320:	3b04      	subs	r3, #4
 8007322:	429d      	cmp	r5, r3
 8007324:	461a      	mov	r2, r3
 8007326:	d32e      	bcc.n	8007386 <quorem+0xfa>
 8007328:	613c      	str	r4, [r7, #16]
 800732a:	4638      	mov	r0, r7
 800732c:	f001 f9c0 	bl	80086b0 <__mcmp>
 8007330:	2800      	cmp	r0, #0
 8007332:	db24      	blt.n	800737e <quorem+0xf2>
 8007334:	3601      	adds	r6, #1
 8007336:	4628      	mov	r0, r5
 8007338:	f04f 0c00 	mov.w	ip, #0
 800733c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007340:	f8d0 e000 	ldr.w	lr, [r0]
 8007344:	b293      	uxth	r3, r2
 8007346:	ebac 0303 	sub.w	r3, ip, r3
 800734a:	0c12      	lsrs	r2, r2, #16
 800734c:	fa13 f38e 	uxtah	r3, r3, lr
 8007350:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007354:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007358:	b29b      	uxth	r3, r3
 800735a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800735e:	45c1      	cmp	r9, r8
 8007360:	f840 3b04 	str.w	r3, [r0], #4
 8007364:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007368:	d2e8      	bcs.n	800733c <quorem+0xb0>
 800736a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800736e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007372:	b922      	cbnz	r2, 800737e <quorem+0xf2>
 8007374:	3b04      	subs	r3, #4
 8007376:	429d      	cmp	r5, r3
 8007378:	461a      	mov	r2, r3
 800737a:	d30a      	bcc.n	8007392 <quorem+0x106>
 800737c:	613c      	str	r4, [r7, #16]
 800737e:	4630      	mov	r0, r6
 8007380:	b003      	add	sp, #12
 8007382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007386:	6812      	ldr	r2, [r2, #0]
 8007388:	3b04      	subs	r3, #4
 800738a:	2a00      	cmp	r2, #0
 800738c:	d1cc      	bne.n	8007328 <quorem+0x9c>
 800738e:	3c01      	subs	r4, #1
 8007390:	e7c7      	b.n	8007322 <quorem+0x96>
 8007392:	6812      	ldr	r2, [r2, #0]
 8007394:	3b04      	subs	r3, #4
 8007396:	2a00      	cmp	r2, #0
 8007398:	d1f0      	bne.n	800737c <quorem+0xf0>
 800739a:	3c01      	subs	r4, #1
 800739c:	e7eb      	b.n	8007376 <quorem+0xea>
 800739e:	2000      	movs	r0, #0
 80073a0:	e7ee      	b.n	8007380 <quorem+0xf4>
 80073a2:	0000      	movs	r0, r0
 80073a4:	0000      	movs	r0, r0
	...

080073a8 <_dtoa_r>:
 80073a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ac:	ed2d 8b04 	vpush	{d8-d9}
 80073b0:	ec57 6b10 	vmov	r6, r7, d0
 80073b4:	b093      	sub	sp, #76	; 0x4c
 80073b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80073b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80073bc:	9106      	str	r1, [sp, #24]
 80073be:	ee10 aa10 	vmov	sl, s0
 80073c2:	4604      	mov	r4, r0
 80073c4:	9209      	str	r2, [sp, #36]	; 0x24
 80073c6:	930c      	str	r3, [sp, #48]	; 0x30
 80073c8:	46bb      	mov	fp, r7
 80073ca:	b975      	cbnz	r5, 80073ea <_dtoa_r+0x42>
 80073cc:	2010      	movs	r0, #16
 80073ce:	f000 fed7 	bl	8008180 <malloc>
 80073d2:	4602      	mov	r2, r0
 80073d4:	6260      	str	r0, [r4, #36]	; 0x24
 80073d6:	b920      	cbnz	r0, 80073e2 <_dtoa_r+0x3a>
 80073d8:	4ba7      	ldr	r3, [pc, #668]	; (8007678 <_dtoa_r+0x2d0>)
 80073da:	21ea      	movs	r1, #234	; 0xea
 80073dc:	48a7      	ldr	r0, [pc, #668]	; (800767c <_dtoa_r+0x2d4>)
 80073de:	f001 fddf 	bl	8008fa0 <__assert_func>
 80073e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80073e6:	6005      	str	r5, [r0, #0]
 80073e8:	60c5      	str	r5, [r0, #12]
 80073ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073ec:	6819      	ldr	r1, [r3, #0]
 80073ee:	b151      	cbz	r1, 8007406 <_dtoa_r+0x5e>
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	604a      	str	r2, [r1, #4]
 80073f4:	2301      	movs	r3, #1
 80073f6:	4093      	lsls	r3, r2
 80073f8:	608b      	str	r3, [r1, #8]
 80073fa:	4620      	mov	r0, r4
 80073fc:	f000 ff16 	bl	800822c <_Bfree>
 8007400:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007402:	2200      	movs	r2, #0
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	1e3b      	subs	r3, r7, #0
 8007408:	bfaa      	itet	ge
 800740a:	2300      	movge	r3, #0
 800740c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007410:	f8c8 3000 	strge.w	r3, [r8]
 8007414:	4b9a      	ldr	r3, [pc, #616]	; (8007680 <_dtoa_r+0x2d8>)
 8007416:	bfbc      	itt	lt
 8007418:	2201      	movlt	r2, #1
 800741a:	f8c8 2000 	strlt.w	r2, [r8]
 800741e:	ea33 030b 	bics.w	r3, r3, fp
 8007422:	d11b      	bne.n	800745c <_dtoa_r+0xb4>
 8007424:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007426:	f242 730f 	movw	r3, #9999	; 0x270f
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007430:	4333      	orrs	r3, r6
 8007432:	f000 8592 	beq.w	8007f5a <_dtoa_r+0xbb2>
 8007436:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007438:	b963      	cbnz	r3, 8007454 <_dtoa_r+0xac>
 800743a:	4b92      	ldr	r3, [pc, #584]	; (8007684 <_dtoa_r+0x2dc>)
 800743c:	e022      	b.n	8007484 <_dtoa_r+0xdc>
 800743e:	4b92      	ldr	r3, [pc, #584]	; (8007688 <_dtoa_r+0x2e0>)
 8007440:	9301      	str	r3, [sp, #4]
 8007442:	3308      	adds	r3, #8
 8007444:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007446:	6013      	str	r3, [r2, #0]
 8007448:	9801      	ldr	r0, [sp, #4]
 800744a:	b013      	add	sp, #76	; 0x4c
 800744c:	ecbd 8b04 	vpop	{d8-d9}
 8007450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007454:	4b8b      	ldr	r3, [pc, #556]	; (8007684 <_dtoa_r+0x2dc>)
 8007456:	9301      	str	r3, [sp, #4]
 8007458:	3303      	adds	r3, #3
 800745a:	e7f3      	b.n	8007444 <_dtoa_r+0x9c>
 800745c:	2200      	movs	r2, #0
 800745e:	2300      	movs	r3, #0
 8007460:	4650      	mov	r0, sl
 8007462:	4659      	mov	r1, fp
 8007464:	f7f9 fb50 	bl	8000b08 <__aeabi_dcmpeq>
 8007468:	ec4b ab19 	vmov	d9, sl, fp
 800746c:	4680      	mov	r8, r0
 800746e:	b158      	cbz	r0, 8007488 <_dtoa_r+0xe0>
 8007470:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007472:	2301      	movs	r3, #1
 8007474:	6013      	str	r3, [r2, #0]
 8007476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 856b 	beq.w	8007f54 <_dtoa_r+0xbac>
 800747e:	4883      	ldr	r0, [pc, #524]	; (800768c <_dtoa_r+0x2e4>)
 8007480:	6018      	str	r0, [r3, #0]
 8007482:	1e43      	subs	r3, r0, #1
 8007484:	9301      	str	r3, [sp, #4]
 8007486:	e7df      	b.n	8007448 <_dtoa_r+0xa0>
 8007488:	ec4b ab10 	vmov	d0, sl, fp
 800748c:	aa10      	add	r2, sp, #64	; 0x40
 800748e:	a911      	add	r1, sp, #68	; 0x44
 8007490:	4620      	mov	r0, r4
 8007492:	f001 f9b3 	bl	80087fc <__d2b>
 8007496:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800749a:	ee08 0a10 	vmov	s16, r0
 800749e:	2d00      	cmp	r5, #0
 80074a0:	f000 8084 	beq.w	80075ac <_dtoa_r+0x204>
 80074a4:	ee19 3a90 	vmov	r3, s19
 80074a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80074b0:	4656      	mov	r6, sl
 80074b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80074b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80074ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80074be:	4b74      	ldr	r3, [pc, #464]	; (8007690 <_dtoa_r+0x2e8>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	4630      	mov	r0, r6
 80074c4:	4639      	mov	r1, r7
 80074c6:	f7f8 feff 	bl	80002c8 <__aeabi_dsub>
 80074ca:	a365      	add	r3, pc, #404	; (adr r3, 8007660 <_dtoa_r+0x2b8>)
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	f7f9 f8b2 	bl	8000638 <__aeabi_dmul>
 80074d4:	a364      	add	r3, pc, #400	; (adr r3, 8007668 <_dtoa_r+0x2c0>)
 80074d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074da:	f7f8 fef7 	bl	80002cc <__adddf3>
 80074de:	4606      	mov	r6, r0
 80074e0:	4628      	mov	r0, r5
 80074e2:	460f      	mov	r7, r1
 80074e4:	f7f9 f83e 	bl	8000564 <__aeabi_i2d>
 80074e8:	a361      	add	r3, pc, #388	; (adr r3, 8007670 <_dtoa_r+0x2c8>)
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	f7f9 f8a3 	bl	8000638 <__aeabi_dmul>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	4630      	mov	r0, r6
 80074f8:	4639      	mov	r1, r7
 80074fa:	f7f8 fee7 	bl	80002cc <__adddf3>
 80074fe:	4606      	mov	r6, r0
 8007500:	460f      	mov	r7, r1
 8007502:	f7f9 fb49 	bl	8000b98 <__aeabi_d2iz>
 8007506:	2200      	movs	r2, #0
 8007508:	9000      	str	r0, [sp, #0]
 800750a:	2300      	movs	r3, #0
 800750c:	4630      	mov	r0, r6
 800750e:	4639      	mov	r1, r7
 8007510:	f7f9 fb04 	bl	8000b1c <__aeabi_dcmplt>
 8007514:	b150      	cbz	r0, 800752c <_dtoa_r+0x184>
 8007516:	9800      	ldr	r0, [sp, #0]
 8007518:	f7f9 f824 	bl	8000564 <__aeabi_i2d>
 800751c:	4632      	mov	r2, r6
 800751e:	463b      	mov	r3, r7
 8007520:	f7f9 faf2 	bl	8000b08 <__aeabi_dcmpeq>
 8007524:	b910      	cbnz	r0, 800752c <_dtoa_r+0x184>
 8007526:	9b00      	ldr	r3, [sp, #0]
 8007528:	3b01      	subs	r3, #1
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	9b00      	ldr	r3, [sp, #0]
 800752e:	2b16      	cmp	r3, #22
 8007530:	d85a      	bhi.n	80075e8 <_dtoa_r+0x240>
 8007532:	9a00      	ldr	r2, [sp, #0]
 8007534:	4b57      	ldr	r3, [pc, #348]	; (8007694 <_dtoa_r+0x2ec>)
 8007536:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	ec51 0b19 	vmov	r0, r1, d9
 8007542:	f7f9 faeb 	bl	8000b1c <__aeabi_dcmplt>
 8007546:	2800      	cmp	r0, #0
 8007548:	d050      	beq.n	80075ec <_dtoa_r+0x244>
 800754a:	9b00      	ldr	r3, [sp, #0]
 800754c:	3b01      	subs	r3, #1
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	2300      	movs	r3, #0
 8007552:	930b      	str	r3, [sp, #44]	; 0x2c
 8007554:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007556:	1b5d      	subs	r5, r3, r5
 8007558:	1e6b      	subs	r3, r5, #1
 800755a:	9305      	str	r3, [sp, #20]
 800755c:	bf45      	ittet	mi
 800755e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007562:	9304      	strmi	r3, [sp, #16]
 8007564:	2300      	movpl	r3, #0
 8007566:	2300      	movmi	r3, #0
 8007568:	bf4c      	ite	mi
 800756a:	9305      	strmi	r3, [sp, #20]
 800756c:	9304      	strpl	r3, [sp, #16]
 800756e:	9b00      	ldr	r3, [sp, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	db3d      	blt.n	80075f0 <_dtoa_r+0x248>
 8007574:	9b05      	ldr	r3, [sp, #20]
 8007576:	9a00      	ldr	r2, [sp, #0]
 8007578:	920a      	str	r2, [sp, #40]	; 0x28
 800757a:	4413      	add	r3, r2
 800757c:	9305      	str	r3, [sp, #20]
 800757e:	2300      	movs	r3, #0
 8007580:	9307      	str	r3, [sp, #28]
 8007582:	9b06      	ldr	r3, [sp, #24]
 8007584:	2b09      	cmp	r3, #9
 8007586:	f200 8089 	bhi.w	800769c <_dtoa_r+0x2f4>
 800758a:	2b05      	cmp	r3, #5
 800758c:	bfc4      	itt	gt
 800758e:	3b04      	subgt	r3, #4
 8007590:	9306      	strgt	r3, [sp, #24]
 8007592:	9b06      	ldr	r3, [sp, #24]
 8007594:	f1a3 0302 	sub.w	r3, r3, #2
 8007598:	bfcc      	ite	gt
 800759a:	2500      	movgt	r5, #0
 800759c:	2501      	movle	r5, #1
 800759e:	2b03      	cmp	r3, #3
 80075a0:	f200 8087 	bhi.w	80076b2 <_dtoa_r+0x30a>
 80075a4:	e8df f003 	tbb	[pc, r3]
 80075a8:	59383a2d 	.word	0x59383a2d
 80075ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80075b0:	441d      	add	r5, r3
 80075b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80075b6:	2b20      	cmp	r3, #32
 80075b8:	bfc1      	itttt	gt
 80075ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80075be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80075c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80075c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80075ca:	bfda      	itte	le
 80075cc:	f1c3 0320 	rsble	r3, r3, #32
 80075d0:	fa06 f003 	lslle.w	r0, r6, r3
 80075d4:	4318      	orrgt	r0, r3
 80075d6:	f7f8 ffb5 	bl	8000544 <__aeabi_ui2d>
 80075da:	2301      	movs	r3, #1
 80075dc:	4606      	mov	r6, r0
 80075de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80075e2:	3d01      	subs	r5, #1
 80075e4:	930e      	str	r3, [sp, #56]	; 0x38
 80075e6:	e76a      	b.n	80074be <_dtoa_r+0x116>
 80075e8:	2301      	movs	r3, #1
 80075ea:	e7b2      	b.n	8007552 <_dtoa_r+0x1aa>
 80075ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80075ee:	e7b1      	b.n	8007554 <_dtoa_r+0x1ac>
 80075f0:	9b04      	ldr	r3, [sp, #16]
 80075f2:	9a00      	ldr	r2, [sp, #0]
 80075f4:	1a9b      	subs	r3, r3, r2
 80075f6:	9304      	str	r3, [sp, #16]
 80075f8:	4253      	negs	r3, r2
 80075fa:	9307      	str	r3, [sp, #28]
 80075fc:	2300      	movs	r3, #0
 80075fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007600:	e7bf      	b.n	8007582 <_dtoa_r+0x1da>
 8007602:	2300      	movs	r3, #0
 8007604:	9308      	str	r3, [sp, #32]
 8007606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007608:	2b00      	cmp	r3, #0
 800760a:	dc55      	bgt.n	80076b8 <_dtoa_r+0x310>
 800760c:	2301      	movs	r3, #1
 800760e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007612:	461a      	mov	r2, r3
 8007614:	9209      	str	r2, [sp, #36]	; 0x24
 8007616:	e00c      	b.n	8007632 <_dtoa_r+0x28a>
 8007618:	2301      	movs	r3, #1
 800761a:	e7f3      	b.n	8007604 <_dtoa_r+0x25c>
 800761c:	2300      	movs	r3, #0
 800761e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007620:	9308      	str	r3, [sp, #32]
 8007622:	9b00      	ldr	r3, [sp, #0]
 8007624:	4413      	add	r3, r2
 8007626:	9302      	str	r3, [sp, #8]
 8007628:	3301      	adds	r3, #1
 800762a:	2b01      	cmp	r3, #1
 800762c:	9303      	str	r3, [sp, #12]
 800762e:	bfb8      	it	lt
 8007630:	2301      	movlt	r3, #1
 8007632:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007634:	2200      	movs	r2, #0
 8007636:	6042      	str	r2, [r0, #4]
 8007638:	2204      	movs	r2, #4
 800763a:	f102 0614 	add.w	r6, r2, #20
 800763e:	429e      	cmp	r6, r3
 8007640:	6841      	ldr	r1, [r0, #4]
 8007642:	d93d      	bls.n	80076c0 <_dtoa_r+0x318>
 8007644:	4620      	mov	r0, r4
 8007646:	f000 fdb1 	bl	80081ac <_Balloc>
 800764a:	9001      	str	r0, [sp, #4]
 800764c:	2800      	cmp	r0, #0
 800764e:	d13b      	bne.n	80076c8 <_dtoa_r+0x320>
 8007650:	4b11      	ldr	r3, [pc, #68]	; (8007698 <_dtoa_r+0x2f0>)
 8007652:	4602      	mov	r2, r0
 8007654:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007658:	e6c0      	b.n	80073dc <_dtoa_r+0x34>
 800765a:	2301      	movs	r3, #1
 800765c:	e7df      	b.n	800761e <_dtoa_r+0x276>
 800765e:	bf00      	nop
 8007660:	636f4361 	.word	0x636f4361
 8007664:	3fd287a7 	.word	0x3fd287a7
 8007668:	8b60c8b3 	.word	0x8b60c8b3
 800766c:	3fc68a28 	.word	0x3fc68a28
 8007670:	509f79fb 	.word	0x509f79fb
 8007674:	3fd34413 	.word	0x3fd34413
 8007678:	0800b1d5 	.word	0x0800b1d5
 800767c:	0800b1ec 	.word	0x0800b1ec
 8007680:	7ff00000 	.word	0x7ff00000
 8007684:	0800b1d1 	.word	0x0800b1d1
 8007688:	0800b1c8 	.word	0x0800b1c8
 800768c:	0800b1a5 	.word	0x0800b1a5
 8007690:	3ff80000 	.word	0x3ff80000
 8007694:	0800b340 	.word	0x0800b340
 8007698:	0800b247 	.word	0x0800b247
 800769c:	2501      	movs	r5, #1
 800769e:	2300      	movs	r3, #0
 80076a0:	9306      	str	r3, [sp, #24]
 80076a2:	9508      	str	r5, [sp, #32]
 80076a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076ac:	2200      	movs	r2, #0
 80076ae:	2312      	movs	r3, #18
 80076b0:	e7b0      	b.n	8007614 <_dtoa_r+0x26c>
 80076b2:	2301      	movs	r3, #1
 80076b4:	9308      	str	r3, [sp, #32]
 80076b6:	e7f5      	b.n	80076a4 <_dtoa_r+0x2fc>
 80076b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076be:	e7b8      	b.n	8007632 <_dtoa_r+0x28a>
 80076c0:	3101      	adds	r1, #1
 80076c2:	6041      	str	r1, [r0, #4]
 80076c4:	0052      	lsls	r2, r2, #1
 80076c6:	e7b8      	b.n	800763a <_dtoa_r+0x292>
 80076c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076ca:	9a01      	ldr	r2, [sp, #4]
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	9b03      	ldr	r3, [sp, #12]
 80076d0:	2b0e      	cmp	r3, #14
 80076d2:	f200 809d 	bhi.w	8007810 <_dtoa_r+0x468>
 80076d6:	2d00      	cmp	r5, #0
 80076d8:	f000 809a 	beq.w	8007810 <_dtoa_r+0x468>
 80076dc:	9b00      	ldr	r3, [sp, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	dd32      	ble.n	8007748 <_dtoa_r+0x3a0>
 80076e2:	4ab7      	ldr	r2, [pc, #732]	; (80079c0 <_dtoa_r+0x618>)
 80076e4:	f003 030f 	and.w	r3, r3, #15
 80076e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80076ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076f0:	9b00      	ldr	r3, [sp, #0]
 80076f2:	05d8      	lsls	r0, r3, #23
 80076f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80076f8:	d516      	bpl.n	8007728 <_dtoa_r+0x380>
 80076fa:	4bb2      	ldr	r3, [pc, #712]	; (80079c4 <_dtoa_r+0x61c>)
 80076fc:	ec51 0b19 	vmov	r0, r1, d9
 8007700:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007704:	f7f9 f8c2 	bl	800088c <__aeabi_ddiv>
 8007708:	f007 070f 	and.w	r7, r7, #15
 800770c:	4682      	mov	sl, r0
 800770e:	468b      	mov	fp, r1
 8007710:	2503      	movs	r5, #3
 8007712:	4eac      	ldr	r6, [pc, #688]	; (80079c4 <_dtoa_r+0x61c>)
 8007714:	b957      	cbnz	r7, 800772c <_dtoa_r+0x384>
 8007716:	4642      	mov	r2, r8
 8007718:	464b      	mov	r3, r9
 800771a:	4650      	mov	r0, sl
 800771c:	4659      	mov	r1, fp
 800771e:	f7f9 f8b5 	bl	800088c <__aeabi_ddiv>
 8007722:	4682      	mov	sl, r0
 8007724:	468b      	mov	fp, r1
 8007726:	e028      	b.n	800777a <_dtoa_r+0x3d2>
 8007728:	2502      	movs	r5, #2
 800772a:	e7f2      	b.n	8007712 <_dtoa_r+0x36a>
 800772c:	07f9      	lsls	r1, r7, #31
 800772e:	d508      	bpl.n	8007742 <_dtoa_r+0x39a>
 8007730:	4640      	mov	r0, r8
 8007732:	4649      	mov	r1, r9
 8007734:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007738:	f7f8 ff7e 	bl	8000638 <__aeabi_dmul>
 800773c:	3501      	adds	r5, #1
 800773e:	4680      	mov	r8, r0
 8007740:	4689      	mov	r9, r1
 8007742:	107f      	asrs	r7, r7, #1
 8007744:	3608      	adds	r6, #8
 8007746:	e7e5      	b.n	8007714 <_dtoa_r+0x36c>
 8007748:	f000 809b 	beq.w	8007882 <_dtoa_r+0x4da>
 800774c:	9b00      	ldr	r3, [sp, #0]
 800774e:	4f9d      	ldr	r7, [pc, #628]	; (80079c4 <_dtoa_r+0x61c>)
 8007750:	425e      	negs	r6, r3
 8007752:	4b9b      	ldr	r3, [pc, #620]	; (80079c0 <_dtoa_r+0x618>)
 8007754:	f006 020f 	and.w	r2, r6, #15
 8007758:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007760:	ec51 0b19 	vmov	r0, r1, d9
 8007764:	f7f8 ff68 	bl	8000638 <__aeabi_dmul>
 8007768:	1136      	asrs	r6, r6, #4
 800776a:	4682      	mov	sl, r0
 800776c:	468b      	mov	fp, r1
 800776e:	2300      	movs	r3, #0
 8007770:	2502      	movs	r5, #2
 8007772:	2e00      	cmp	r6, #0
 8007774:	d17a      	bne.n	800786c <_dtoa_r+0x4c4>
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1d3      	bne.n	8007722 <_dtoa_r+0x37a>
 800777a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 8082 	beq.w	8007886 <_dtoa_r+0x4de>
 8007782:	4b91      	ldr	r3, [pc, #580]	; (80079c8 <_dtoa_r+0x620>)
 8007784:	2200      	movs	r2, #0
 8007786:	4650      	mov	r0, sl
 8007788:	4659      	mov	r1, fp
 800778a:	f7f9 f9c7 	bl	8000b1c <__aeabi_dcmplt>
 800778e:	2800      	cmp	r0, #0
 8007790:	d079      	beq.n	8007886 <_dtoa_r+0x4de>
 8007792:	9b03      	ldr	r3, [sp, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d076      	beq.n	8007886 <_dtoa_r+0x4de>
 8007798:	9b02      	ldr	r3, [sp, #8]
 800779a:	2b00      	cmp	r3, #0
 800779c:	dd36      	ble.n	800780c <_dtoa_r+0x464>
 800779e:	9b00      	ldr	r3, [sp, #0]
 80077a0:	4650      	mov	r0, sl
 80077a2:	4659      	mov	r1, fp
 80077a4:	1e5f      	subs	r7, r3, #1
 80077a6:	2200      	movs	r2, #0
 80077a8:	4b88      	ldr	r3, [pc, #544]	; (80079cc <_dtoa_r+0x624>)
 80077aa:	f7f8 ff45 	bl	8000638 <__aeabi_dmul>
 80077ae:	9e02      	ldr	r6, [sp, #8]
 80077b0:	4682      	mov	sl, r0
 80077b2:	468b      	mov	fp, r1
 80077b4:	3501      	adds	r5, #1
 80077b6:	4628      	mov	r0, r5
 80077b8:	f7f8 fed4 	bl	8000564 <__aeabi_i2d>
 80077bc:	4652      	mov	r2, sl
 80077be:	465b      	mov	r3, fp
 80077c0:	f7f8 ff3a 	bl	8000638 <__aeabi_dmul>
 80077c4:	4b82      	ldr	r3, [pc, #520]	; (80079d0 <_dtoa_r+0x628>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	f7f8 fd80 	bl	80002cc <__adddf3>
 80077cc:	46d0      	mov	r8, sl
 80077ce:	46d9      	mov	r9, fp
 80077d0:	4682      	mov	sl, r0
 80077d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80077d6:	2e00      	cmp	r6, #0
 80077d8:	d158      	bne.n	800788c <_dtoa_r+0x4e4>
 80077da:	4b7e      	ldr	r3, [pc, #504]	; (80079d4 <_dtoa_r+0x62c>)
 80077dc:	2200      	movs	r2, #0
 80077de:	4640      	mov	r0, r8
 80077e0:	4649      	mov	r1, r9
 80077e2:	f7f8 fd71 	bl	80002c8 <__aeabi_dsub>
 80077e6:	4652      	mov	r2, sl
 80077e8:	465b      	mov	r3, fp
 80077ea:	4680      	mov	r8, r0
 80077ec:	4689      	mov	r9, r1
 80077ee:	f7f9 f9b3 	bl	8000b58 <__aeabi_dcmpgt>
 80077f2:	2800      	cmp	r0, #0
 80077f4:	f040 8295 	bne.w	8007d22 <_dtoa_r+0x97a>
 80077f8:	4652      	mov	r2, sl
 80077fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80077fe:	4640      	mov	r0, r8
 8007800:	4649      	mov	r1, r9
 8007802:	f7f9 f98b 	bl	8000b1c <__aeabi_dcmplt>
 8007806:	2800      	cmp	r0, #0
 8007808:	f040 8289 	bne.w	8007d1e <_dtoa_r+0x976>
 800780c:	ec5b ab19 	vmov	sl, fp, d9
 8007810:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007812:	2b00      	cmp	r3, #0
 8007814:	f2c0 8148 	blt.w	8007aa8 <_dtoa_r+0x700>
 8007818:	9a00      	ldr	r2, [sp, #0]
 800781a:	2a0e      	cmp	r2, #14
 800781c:	f300 8144 	bgt.w	8007aa8 <_dtoa_r+0x700>
 8007820:	4b67      	ldr	r3, [pc, #412]	; (80079c0 <_dtoa_r+0x618>)
 8007822:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007826:	e9d3 8900 	ldrd	r8, r9, [r3]
 800782a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800782c:	2b00      	cmp	r3, #0
 800782e:	f280 80d5 	bge.w	80079dc <_dtoa_r+0x634>
 8007832:	9b03      	ldr	r3, [sp, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	f300 80d1 	bgt.w	80079dc <_dtoa_r+0x634>
 800783a:	f040 826f 	bne.w	8007d1c <_dtoa_r+0x974>
 800783e:	4b65      	ldr	r3, [pc, #404]	; (80079d4 <_dtoa_r+0x62c>)
 8007840:	2200      	movs	r2, #0
 8007842:	4640      	mov	r0, r8
 8007844:	4649      	mov	r1, r9
 8007846:	f7f8 fef7 	bl	8000638 <__aeabi_dmul>
 800784a:	4652      	mov	r2, sl
 800784c:	465b      	mov	r3, fp
 800784e:	f7f9 f979 	bl	8000b44 <__aeabi_dcmpge>
 8007852:	9e03      	ldr	r6, [sp, #12]
 8007854:	4637      	mov	r7, r6
 8007856:	2800      	cmp	r0, #0
 8007858:	f040 8245 	bne.w	8007ce6 <_dtoa_r+0x93e>
 800785c:	9d01      	ldr	r5, [sp, #4]
 800785e:	2331      	movs	r3, #49	; 0x31
 8007860:	f805 3b01 	strb.w	r3, [r5], #1
 8007864:	9b00      	ldr	r3, [sp, #0]
 8007866:	3301      	adds	r3, #1
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	e240      	b.n	8007cee <_dtoa_r+0x946>
 800786c:	07f2      	lsls	r2, r6, #31
 800786e:	d505      	bpl.n	800787c <_dtoa_r+0x4d4>
 8007870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007874:	f7f8 fee0 	bl	8000638 <__aeabi_dmul>
 8007878:	3501      	adds	r5, #1
 800787a:	2301      	movs	r3, #1
 800787c:	1076      	asrs	r6, r6, #1
 800787e:	3708      	adds	r7, #8
 8007880:	e777      	b.n	8007772 <_dtoa_r+0x3ca>
 8007882:	2502      	movs	r5, #2
 8007884:	e779      	b.n	800777a <_dtoa_r+0x3d2>
 8007886:	9f00      	ldr	r7, [sp, #0]
 8007888:	9e03      	ldr	r6, [sp, #12]
 800788a:	e794      	b.n	80077b6 <_dtoa_r+0x40e>
 800788c:	9901      	ldr	r1, [sp, #4]
 800788e:	4b4c      	ldr	r3, [pc, #304]	; (80079c0 <_dtoa_r+0x618>)
 8007890:	4431      	add	r1, r6
 8007892:	910d      	str	r1, [sp, #52]	; 0x34
 8007894:	9908      	ldr	r1, [sp, #32]
 8007896:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800789a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800789e:	2900      	cmp	r1, #0
 80078a0:	d043      	beq.n	800792a <_dtoa_r+0x582>
 80078a2:	494d      	ldr	r1, [pc, #308]	; (80079d8 <_dtoa_r+0x630>)
 80078a4:	2000      	movs	r0, #0
 80078a6:	f7f8 fff1 	bl	800088c <__aeabi_ddiv>
 80078aa:	4652      	mov	r2, sl
 80078ac:	465b      	mov	r3, fp
 80078ae:	f7f8 fd0b 	bl	80002c8 <__aeabi_dsub>
 80078b2:	9d01      	ldr	r5, [sp, #4]
 80078b4:	4682      	mov	sl, r0
 80078b6:	468b      	mov	fp, r1
 80078b8:	4649      	mov	r1, r9
 80078ba:	4640      	mov	r0, r8
 80078bc:	f7f9 f96c 	bl	8000b98 <__aeabi_d2iz>
 80078c0:	4606      	mov	r6, r0
 80078c2:	f7f8 fe4f 	bl	8000564 <__aeabi_i2d>
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	4640      	mov	r0, r8
 80078cc:	4649      	mov	r1, r9
 80078ce:	f7f8 fcfb 	bl	80002c8 <__aeabi_dsub>
 80078d2:	3630      	adds	r6, #48	; 0x30
 80078d4:	f805 6b01 	strb.w	r6, [r5], #1
 80078d8:	4652      	mov	r2, sl
 80078da:	465b      	mov	r3, fp
 80078dc:	4680      	mov	r8, r0
 80078de:	4689      	mov	r9, r1
 80078e0:	f7f9 f91c 	bl	8000b1c <__aeabi_dcmplt>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d163      	bne.n	80079b0 <_dtoa_r+0x608>
 80078e8:	4642      	mov	r2, r8
 80078ea:	464b      	mov	r3, r9
 80078ec:	4936      	ldr	r1, [pc, #216]	; (80079c8 <_dtoa_r+0x620>)
 80078ee:	2000      	movs	r0, #0
 80078f0:	f7f8 fcea 	bl	80002c8 <__aeabi_dsub>
 80078f4:	4652      	mov	r2, sl
 80078f6:	465b      	mov	r3, fp
 80078f8:	f7f9 f910 	bl	8000b1c <__aeabi_dcmplt>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	f040 80b5 	bne.w	8007a6c <_dtoa_r+0x6c4>
 8007902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007904:	429d      	cmp	r5, r3
 8007906:	d081      	beq.n	800780c <_dtoa_r+0x464>
 8007908:	4b30      	ldr	r3, [pc, #192]	; (80079cc <_dtoa_r+0x624>)
 800790a:	2200      	movs	r2, #0
 800790c:	4650      	mov	r0, sl
 800790e:	4659      	mov	r1, fp
 8007910:	f7f8 fe92 	bl	8000638 <__aeabi_dmul>
 8007914:	4b2d      	ldr	r3, [pc, #180]	; (80079cc <_dtoa_r+0x624>)
 8007916:	4682      	mov	sl, r0
 8007918:	468b      	mov	fp, r1
 800791a:	4640      	mov	r0, r8
 800791c:	4649      	mov	r1, r9
 800791e:	2200      	movs	r2, #0
 8007920:	f7f8 fe8a 	bl	8000638 <__aeabi_dmul>
 8007924:	4680      	mov	r8, r0
 8007926:	4689      	mov	r9, r1
 8007928:	e7c6      	b.n	80078b8 <_dtoa_r+0x510>
 800792a:	4650      	mov	r0, sl
 800792c:	4659      	mov	r1, fp
 800792e:	f7f8 fe83 	bl	8000638 <__aeabi_dmul>
 8007932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007934:	9d01      	ldr	r5, [sp, #4]
 8007936:	930f      	str	r3, [sp, #60]	; 0x3c
 8007938:	4682      	mov	sl, r0
 800793a:	468b      	mov	fp, r1
 800793c:	4649      	mov	r1, r9
 800793e:	4640      	mov	r0, r8
 8007940:	f7f9 f92a 	bl	8000b98 <__aeabi_d2iz>
 8007944:	4606      	mov	r6, r0
 8007946:	f7f8 fe0d 	bl	8000564 <__aeabi_i2d>
 800794a:	3630      	adds	r6, #48	; 0x30
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	4640      	mov	r0, r8
 8007952:	4649      	mov	r1, r9
 8007954:	f7f8 fcb8 	bl	80002c8 <__aeabi_dsub>
 8007958:	f805 6b01 	strb.w	r6, [r5], #1
 800795c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800795e:	429d      	cmp	r5, r3
 8007960:	4680      	mov	r8, r0
 8007962:	4689      	mov	r9, r1
 8007964:	f04f 0200 	mov.w	r2, #0
 8007968:	d124      	bne.n	80079b4 <_dtoa_r+0x60c>
 800796a:	4b1b      	ldr	r3, [pc, #108]	; (80079d8 <_dtoa_r+0x630>)
 800796c:	4650      	mov	r0, sl
 800796e:	4659      	mov	r1, fp
 8007970:	f7f8 fcac 	bl	80002cc <__adddf3>
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	4640      	mov	r0, r8
 800797a:	4649      	mov	r1, r9
 800797c:	f7f9 f8ec 	bl	8000b58 <__aeabi_dcmpgt>
 8007980:	2800      	cmp	r0, #0
 8007982:	d173      	bne.n	8007a6c <_dtoa_r+0x6c4>
 8007984:	4652      	mov	r2, sl
 8007986:	465b      	mov	r3, fp
 8007988:	4913      	ldr	r1, [pc, #76]	; (80079d8 <_dtoa_r+0x630>)
 800798a:	2000      	movs	r0, #0
 800798c:	f7f8 fc9c 	bl	80002c8 <__aeabi_dsub>
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	4640      	mov	r0, r8
 8007996:	4649      	mov	r1, r9
 8007998:	f7f9 f8c0 	bl	8000b1c <__aeabi_dcmplt>
 800799c:	2800      	cmp	r0, #0
 800799e:	f43f af35 	beq.w	800780c <_dtoa_r+0x464>
 80079a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80079a4:	1e6b      	subs	r3, r5, #1
 80079a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80079a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079ac:	2b30      	cmp	r3, #48	; 0x30
 80079ae:	d0f8      	beq.n	80079a2 <_dtoa_r+0x5fa>
 80079b0:	9700      	str	r7, [sp, #0]
 80079b2:	e049      	b.n	8007a48 <_dtoa_r+0x6a0>
 80079b4:	4b05      	ldr	r3, [pc, #20]	; (80079cc <_dtoa_r+0x624>)
 80079b6:	f7f8 fe3f 	bl	8000638 <__aeabi_dmul>
 80079ba:	4680      	mov	r8, r0
 80079bc:	4689      	mov	r9, r1
 80079be:	e7bd      	b.n	800793c <_dtoa_r+0x594>
 80079c0:	0800b340 	.word	0x0800b340
 80079c4:	0800b318 	.word	0x0800b318
 80079c8:	3ff00000 	.word	0x3ff00000
 80079cc:	40240000 	.word	0x40240000
 80079d0:	401c0000 	.word	0x401c0000
 80079d4:	40140000 	.word	0x40140000
 80079d8:	3fe00000 	.word	0x3fe00000
 80079dc:	9d01      	ldr	r5, [sp, #4]
 80079de:	4656      	mov	r6, sl
 80079e0:	465f      	mov	r7, fp
 80079e2:	4642      	mov	r2, r8
 80079e4:	464b      	mov	r3, r9
 80079e6:	4630      	mov	r0, r6
 80079e8:	4639      	mov	r1, r7
 80079ea:	f7f8 ff4f 	bl	800088c <__aeabi_ddiv>
 80079ee:	f7f9 f8d3 	bl	8000b98 <__aeabi_d2iz>
 80079f2:	4682      	mov	sl, r0
 80079f4:	f7f8 fdb6 	bl	8000564 <__aeabi_i2d>
 80079f8:	4642      	mov	r2, r8
 80079fa:	464b      	mov	r3, r9
 80079fc:	f7f8 fe1c 	bl	8000638 <__aeabi_dmul>
 8007a00:	4602      	mov	r2, r0
 8007a02:	460b      	mov	r3, r1
 8007a04:	4630      	mov	r0, r6
 8007a06:	4639      	mov	r1, r7
 8007a08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007a0c:	f7f8 fc5c 	bl	80002c8 <__aeabi_dsub>
 8007a10:	f805 6b01 	strb.w	r6, [r5], #1
 8007a14:	9e01      	ldr	r6, [sp, #4]
 8007a16:	9f03      	ldr	r7, [sp, #12]
 8007a18:	1bae      	subs	r6, r5, r6
 8007a1a:	42b7      	cmp	r7, r6
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	460b      	mov	r3, r1
 8007a20:	d135      	bne.n	8007a8e <_dtoa_r+0x6e6>
 8007a22:	f7f8 fc53 	bl	80002cc <__adddf3>
 8007a26:	4642      	mov	r2, r8
 8007a28:	464b      	mov	r3, r9
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	460f      	mov	r7, r1
 8007a2e:	f7f9 f893 	bl	8000b58 <__aeabi_dcmpgt>
 8007a32:	b9d0      	cbnz	r0, 8007a6a <_dtoa_r+0x6c2>
 8007a34:	4642      	mov	r2, r8
 8007a36:	464b      	mov	r3, r9
 8007a38:	4630      	mov	r0, r6
 8007a3a:	4639      	mov	r1, r7
 8007a3c:	f7f9 f864 	bl	8000b08 <__aeabi_dcmpeq>
 8007a40:	b110      	cbz	r0, 8007a48 <_dtoa_r+0x6a0>
 8007a42:	f01a 0f01 	tst.w	sl, #1
 8007a46:	d110      	bne.n	8007a6a <_dtoa_r+0x6c2>
 8007a48:	4620      	mov	r0, r4
 8007a4a:	ee18 1a10 	vmov	r1, s16
 8007a4e:	f000 fbed 	bl	800822c <_Bfree>
 8007a52:	2300      	movs	r3, #0
 8007a54:	9800      	ldr	r0, [sp, #0]
 8007a56:	702b      	strb	r3, [r5, #0]
 8007a58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	6018      	str	r0, [r3, #0]
 8007a5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f43f acf1 	beq.w	8007448 <_dtoa_r+0xa0>
 8007a66:	601d      	str	r5, [r3, #0]
 8007a68:	e4ee      	b.n	8007448 <_dtoa_r+0xa0>
 8007a6a:	9f00      	ldr	r7, [sp, #0]
 8007a6c:	462b      	mov	r3, r5
 8007a6e:	461d      	mov	r5, r3
 8007a70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a74:	2a39      	cmp	r2, #57	; 0x39
 8007a76:	d106      	bne.n	8007a86 <_dtoa_r+0x6de>
 8007a78:	9a01      	ldr	r2, [sp, #4]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d1f7      	bne.n	8007a6e <_dtoa_r+0x6c6>
 8007a7e:	9901      	ldr	r1, [sp, #4]
 8007a80:	2230      	movs	r2, #48	; 0x30
 8007a82:	3701      	adds	r7, #1
 8007a84:	700a      	strb	r2, [r1, #0]
 8007a86:	781a      	ldrb	r2, [r3, #0]
 8007a88:	3201      	adds	r2, #1
 8007a8a:	701a      	strb	r2, [r3, #0]
 8007a8c:	e790      	b.n	80079b0 <_dtoa_r+0x608>
 8007a8e:	4ba6      	ldr	r3, [pc, #664]	; (8007d28 <_dtoa_r+0x980>)
 8007a90:	2200      	movs	r2, #0
 8007a92:	f7f8 fdd1 	bl	8000638 <__aeabi_dmul>
 8007a96:	2200      	movs	r2, #0
 8007a98:	2300      	movs	r3, #0
 8007a9a:	4606      	mov	r6, r0
 8007a9c:	460f      	mov	r7, r1
 8007a9e:	f7f9 f833 	bl	8000b08 <__aeabi_dcmpeq>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d09d      	beq.n	80079e2 <_dtoa_r+0x63a>
 8007aa6:	e7cf      	b.n	8007a48 <_dtoa_r+0x6a0>
 8007aa8:	9a08      	ldr	r2, [sp, #32]
 8007aaa:	2a00      	cmp	r2, #0
 8007aac:	f000 80d7 	beq.w	8007c5e <_dtoa_r+0x8b6>
 8007ab0:	9a06      	ldr	r2, [sp, #24]
 8007ab2:	2a01      	cmp	r2, #1
 8007ab4:	f300 80ba 	bgt.w	8007c2c <_dtoa_r+0x884>
 8007ab8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007aba:	2a00      	cmp	r2, #0
 8007abc:	f000 80b2 	beq.w	8007c24 <_dtoa_r+0x87c>
 8007ac0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ac4:	9e07      	ldr	r6, [sp, #28]
 8007ac6:	9d04      	ldr	r5, [sp, #16]
 8007ac8:	9a04      	ldr	r2, [sp, #16]
 8007aca:	441a      	add	r2, r3
 8007acc:	9204      	str	r2, [sp, #16]
 8007ace:	9a05      	ldr	r2, [sp, #20]
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	441a      	add	r2, r3
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	9205      	str	r2, [sp, #20]
 8007ad8:	f000 fc60 	bl	800839c <__i2b>
 8007adc:	4607      	mov	r7, r0
 8007ade:	2d00      	cmp	r5, #0
 8007ae0:	dd0c      	ble.n	8007afc <_dtoa_r+0x754>
 8007ae2:	9b05      	ldr	r3, [sp, #20]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	dd09      	ble.n	8007afc <_dtoa_r+0x754>
 8007ae8:	42ab      	cmp	r3, r5
 8007aea:	9a04      	ldr	r2, [sp, #16]
 8007aec:	bfa8      	it	ge
 8007aee:	462b      	movge	r3, r5
 8007af0:	1ad2      	subs	r2, r2, r3
 8007af2:	9204      	str	r2, [sp, #16]
 8007af4:	9a05      	ldr	r2, [sp, #20]
 8007af6:	1aed      	subs	r5, r5, r3
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	9305      	str	r3, [sp, #20]
 8007afc:	9b07      	ldr	r3, [sp, #28]
 8007afe:	b31b      	cbz	r3, 8007b48 <_dtoa_r+0x7a0>
 8007b00:	9b08      	ldr	r3, [sp, #32]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 80af 	beq.w	8007c66 <_dtoa_r+0x8be>
 8007b08:	2e00      	cmp	r6, #0
 8007b0a:	dd13      	ble.n	8007b34 <_dtoa_r+0x78c>
 8007b0c:	4639      	mov	r1, r7
 8007b0e:	4632      	mov	r2, r6
 8007b10:	4620      	mov	r0, r4
 8007b12:	f000 fd03 	bl	800851c <__pow5mult>
 8007b16:	ee18 2a10 	vmov	r2, s16
 8007b1a:	4601      	mov	r1, r0
 8007b1c:	4607      	mov	r7, r0
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f000 fc52 	bl	80083c8 <__multiply>
 8007b24:	ee18 1a10 	vmov	r1, s16
 8007b28:	4680      	mov	r8, r0
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 fb7e 	bl	800822c <_Bfree>
 8007b30:	ee08 8a10 	vmov	s16, r8
 8007b34:	9b07      	ldr	r3, [sp, #28]
 8007b36:	1b9a      	subs	r2, r3, r6
 8007b38:	d006      	beq.n	8007b48 <_dtoa_r+0x7a0>
 8007b3a:	ee18 1a10 	vmov	r1, s16
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f000 fcec 	bl	800851c <__pow5mult>
 8007b44:	ee08 0a10 	vmov	s16, r0
 8007b48:	2101      	movs	r1, #1
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	f000 fc26 	bl	800839c <__i2b>
 8007b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	4606      	mov	r6, r0
 8007b56:	f340 8088 	ble.w	8007c6a <_dtoa_r+0x8c2>
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	4601      	mov	r1, r0
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f000 fcdc 	bl	800851c <__pow5mult>
 8007b64:	9b06      	ldr	r3, [sp, #24]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	4606      	mov	r6, r0
 8007b6a:	f340 8081 	ble.w	8007c70 <_dtoa_r+0x8c8>
 8007b6e:	f04f 0800 	mov.w	r8, #0
 8007b72:	6933      	ldr	r3, [r6, #16]
 8007b74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007b78:	6918      	ldr	r0, [r3, #16]
 8007b7a:	f000 fbbf 	bl	80082fc <__hi0bits>
 8007b7e:	f1c0 0020 	rsb	r0, r0, #32
 8007b82:	9b05      	ldr	r3, [sp, #20]
 8007b84:	4418      	add	r0, r3
 8007b86:	f010 001f 	ands.w	r0, r0, #31
 8007b8a:	f000 8092 	beq.w	8007cb2 <_dtoa_r+0x90a>
 8007b8e:	f1c0 0320 	rsb	r3, r0, #32
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	f340 808a 	ble.w	8007cac <_dtoa_r+0x904>
 8007b98:	f1c0 001c 	rsb	r0, r0, #28
 8007b9c:	9b04      	ldr	r3, [sp, #16]
 8007b9e:	4403      	add	r3, r0
 8007ba0:	9304      	str	r3, [sp, #16]
 8007ba2:	9b05      	ldr	r3, [sp, #20]
 8007ba4:	4403      	add	r3, r0
 8007ba6:	4405      	add	r5, r0
 8007ba8:	9305      	str	r3, [sp, #20]
 8007baa:	9b04      	ldr	r3, [sp, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	dd07      	ble.n	8007bc0 <_dtoa_r+0x818>
 8007bb0:	ee18 1a10 	vmov	r1, s16
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f000 fd0a 	bl	80085d0 <__lshift>
 8007bbc:	ee08 0a10 	vmov	s16, r0
 8007bc0:	9b05      	ldr	r3, [sp, #20]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	dd05      	ble.n	8007bd2 <_dtoa_r+0x82a>
 8007bc6:	4631      	mov	r1, r6
 8007bc8:	461a      	mov	r2, r3
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f000 fd00 	bl	80085d0 <__lshift>
 8007bd0:	4606      	mov	r6, r0
 8007bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d06e      	beq.n	8007cb6 <_dtoa_r+0x90e>
 8007bd8:	ee18 0a10 	vmov	r0, s16
 8007bdc:	4631      	mov	r1, r6
 8007bde:	f000 fd67 	bl	80086b0 <__mcmp>
 8007be2:	2800      	cmp	r0, #0
 8007be4:	da67      	bge.n	8007cb6 <_dtoa_r+0x90e>
 8007be6:	9b00      	ldr	r3, [sp, #0]
 8007be8:	3b01      	subs	r3, #1
 8007bea:	ee18 1a10 	vmov	r1, s16
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	220a      	movs	r2, #10
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f000 fb3b 	bl	8008270 <__multadd>
 8007bfa:	9b08      	ldr	r3, [sp, #32]
 8007bfc:	ee08 0a10 	vmov	s16, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 81b1 	beq.w	8007f68 <_dtoa_r+0xbc0>
 8007c06:	2300      	movs	r3, #0
 8007c08:	4639      	mov	r1, r7
 8007c0a:	220a      	movs	r2, #10
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f000 fb2f 	bl	8008270 <__multadd>
 8007c12:	9b02      	ldr	r3, [sp, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	4607      	mov	r7, r0
 8007c18:	f300 808e 	bgt.w	8007d38 <_dtoa_r+0x990>
 8007c1c:	9b06      	ldr	r3, [sp, #24]
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	dc51      	bgt.n	8007cc6 <_dtoa_r+0x91e>
 8007c22:	e089      	b.n	8007d38 <_dtoa_r+0x990>
 8007c24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c2a:	e74b      	b.n	8007ac4 <_dtoa_r+0x71c>
 8007c2c:	9b03      	ldr	r3, [sp, #12]
 8007c2e:	1e5e      	subs	r6, r3, #1
 8007c30:	9b07      	ldr	r3, [sp, #28]
 8007c32:	42b3      	cmp	r3, r6
 8007c34:	bfbf      	itttt	lt
 8007c36:	9b07      	ldrlt	r3, [sp, #28]
 8007c38:	9607      	strlt	r6, [sp, #28]
 8007c3a:	1af2      	sublt	r2, r6, r3
 8007c3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007c3e:	bfb6      	itet	lt
 8007c40:	189b      	addlt	r3, r3, r2
 8007c42:	1b9e      	subge	r6, r3, r6
 8007c44:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007c46:	9b03      	ldr	r3, [sp, #12]
 8007c48:	bfb8      	it	lt
 8007c4a:	2600      	movlt	r6, #0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	bfb7      	itett	lt
 8007c50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007c54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007c58:	1a9d      	sublt	r5, r3, r2
 8007c5a:	2300      	movlt	r3, #0
 8007c5c:	e734      	b.n	8007ac8 <_dtoa_r+0x720>
 8007c5e:	9e07      	ldr	r6, [sp, #28]
 8007c60:	9d04      	ldr	r5, [sp, #16]
 8007c62:	9f08      	ldr	r7, [sp, #32]
 8007c64:	e73b      	b.n	8007ade <_dtoa_r+0x736>
 8007c66:	9a07      	ldr	r2, [sp, #28]
 8007c68:	e767      	b.n	8007b3a <_dtoa_r+0x792>
 8007c6a:	9b06      	ldr	r3, [sp, #24]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	dc18      	bgt.n	8007ca2 <_dtoa_r+0x8fa>
 8007c70:	f1ba 0f00 	cmp.w	sl, #0
 8007c74:	d115      	bne.n	8007ca2 <_dtoa_r+0x8fa>
 8007c76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c7a:	b993      	cbnz	r3, 8007ca2 <_dtoa_r+0x8fa>
 8007c7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c80:	0d1b      	lsrs	r3, r3, #20
 8007c82:	051b      	lsls	r3, r3, #20
 8007c84:	b183      	cbz	r3, 8007ca8 <_dtoa_r+0x900>
 8007c86:	9b04      	ldr	r3, [sp, #16]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	9304      	str	r3, [sp, #16]
 8007c8c:	9b05      	ldr	r3, [sp, #20]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	9305      	str	r3, [sp, #20]
 8007c92:	f04f 0801 	mov.w	r8, #1
 8007c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f47f af6a 	bne.w	8007b72 <_dtoa_r+0x7ca>
 8007c9e:	2001      	movs	r0, #1
 8007ca0:	e76f      	b.n	8007b82 <_dtoa_r+0x7da>
 8007ca2:	f04f 0800 	mov.w	r8, #0
 8007ca6:	e7f6      	b.n	8007c96 <_dtoa_r+0x8ee>
 8007ca8:	4698      	mov	r8, r3
 8007caa:	e7f4      	b.n	8007c96 <_dtoa_r+0x8ee>
 8007cac:	f43f af7d 	beq.w	8007baa <_dtoa_r+0x802>
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	301c      	adds	r0, #28
 8007cb4:	e772      	b.n	8007b9c <_dtoa_r+0x7f4>
 8007cb6:	9b03      	ldr	r3, [sp, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	dc37      	bgt.n	8007d2c <_dtoa_r+0x984>
 8007cbc:	9b06      	ldr	r3, [sp, #24]
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	dd34      	ble.n	8007d2c <_dtoa_r+0x984>
 8007cc2:	9b03      	ldr	r3, [sp, #12]
 8007cc4:	9302      	str	r3, [sp, #8]
 8007cc6:	9b02      	ldr	r3, [sp, #8]
 8007cc8:	b96b      	cbnz	r3, 8007ce6 <_dtoa_r+0x93e>
 8007cca:	4631      	mov	r1, r6
 8007ccc:	2205      	movs	r2, #5
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f000 face 	bl	8008270 <__multadd>
 8007cd4:	4601      	mov	r1, r0
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	ee18 0a10 	vmov	r0, s16
 8007cdc:	f000 fce8 	bl	80086b0 <__mcmp>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	f73f adbb 	bgt.w	800785c <_dtoa_r+0x4b4>
 8007ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce8:	9d01      	ldr	r5, [sp, #4]
 8007cea:	43db      	mvns	r3, r3
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	f04f 0800 	mov.w	r8, #0
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f000 fa99 	bl	800822c <_Bfree>
 8007cfa:	2f00      	cmp	r7, #0
 8007cfc:	f43f aea4 	beq.w	8007a48 <_dtoa_r+0x6a0>
 8007d00:	f1b8 0f00 	cmp.w	r8, #0
 8007d04:	d005      	beq.n	8007d12 <_dtoa_r+0x96a>
 8007d06:	45b8      	cmp	r8, r7
 8007d08:	d003      	beq.n	8007d12 <_dtoa_r+0x96a>
 8007d0a:	4641      	mov	r1, r8
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f000 fa8d 	bl	800822c <_Bfree>
 8007d12:	4639      	mov	r1, r7
 8007d14:	4620      	mov	r0, r4
 8007d16:	f000 fa89 	bl	800822c <_Bfree>
 8007d1a:	e695      	b.n	8007a48 <_dtoa_r+0x6a0>
 8007d1c:	2600      	movs	r6, #0
 8007d1e:	4637      	mov	r7, r6
 8007d20:	e7e1      	b.n	8007ce6 <_dtoa_r+0x93e>
 8007d22:	9700      	str	r7, [sp, #0]
 8007d24:	4637      	mov	r7, r6
 8007d26:	e599      	b.n	800785c <_dtoa_r+0x4b4>
 8007d28:	40240000 	.word	0x40240000
 8007d2c:	9b08      	ldr	r3, [sp, #32]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 80ca 	beq.w	8007ec8 <_dtoa_r+0xb20>
 8007d34:	9b03      	ldr	r3, [sp, #12]
 8007d36:	9302      	str	r3, [sp, #8]
 8007d38:	2d00      	cmp	r5, #0
 8007d3a:	dd05      	ble.n	8007d48 <_dtoa_r+0x9a0>
 8007d3c:	4639      	mov	r1, r7
 8007d3e:	462a      	mov	r2, r5
 8007d40:	4620      	mov	r0, r4
 8007d42:	f000 fc45 	bl	80085d0 <__lshift>
 8007d46:	4607      	mov	r7, r0
 8007d48:	f1b8 0f00 	cmp.w	r8, #0
 8007d4c:	d05b      	beq.n	8007e06 <_dtoa_r+0xa5e>
 8007d4e:	6879      	ldr	r1, [r7, #4]
 8007d50:	4620      	mov	r0, r4
 8007d52:	f000 fa2b 	bl	80081ac <_Balloc>
 8007d56:	4605      	mov	r5, r0
 8007d58:	b928      	cbnz	r0, 8007d66 <_dtoa_r+0x9be>
 8007d5a:	4b87      	ldr	r3, [pc, #540]	; (8007f78 <_dtoa_r+0xbd0>)
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007d62:	f7ff bb3b 	b.w	80073dc <_dtoa_r+0x34>
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	3202      	adds	r2, #2
 8007d6a:	0092      	lsls	r2, r2, #2
 8007d6c:	f107 010c 	add.w	r1, r7, #12
 8007d70:	300c      	adds	r0, #12
 8007d72:	f000 fa0d 	bl	8008190 <memcpy>
 8007d76:	2201      	movs	r2, #1
 8007d78:	4629      	mov	r1, r5
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f000 fc28 	bl	80085d0 <__lshift>
 8007d80:	9b01      	ldr	r3, [sp, #4]
 8007d82:	f103 0901 	add.w	r9, r3, #1
 8007d86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	9305      	str	r3, [sp, #20]
 8007d8e:	f00a 0301 	and.w	r3, sl, #1
 8007d92:	46b8      	mov	r8, r7
 8007d94:	9304      	str	r3, [sp, #16]
 8007d96:	4607      	mov	r7, r0
 8007d98:	4631      	mov	r1, r6
 8007d9a:	ee18 0a10 	vmov	r0, s16
 8007d9e:	f7ff fa75 	bl	800728c <quorem>
 8007da2:	4641      	mov	r1, r8
 8007da4:	9002      	str	r0, [sp, #8]
 8007da6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007daa:	ee18 0a10 	vmov	r0, s16
 8007dae:	f000 fc7f 	bl	80086b0 <__mcmp>
 8007db2:	463a      	mov	r2, r7
 8007db4:	9003      	str	r0, [sp, #12]
 8007db6:	4631      	mov	r1, r6
 8007db8:	4620      	mov	r0, r4
 8007dba:	f000 fc95 	bl	80086e8 <__mdiff>
 8007dbe:	68c2      	ldr	r2, [r0, #12]
 8007dc0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007dc4:	4605      	mov	r5, r0
 8007dc6:	bb02      	cbnz	r2, 8007e0a <_dtoa_r+0xa62>
 8007dc8:	4601      	mov	r1, r0
 8007dca:	ee18 0a10 	vmov	r0, s16
 8007dce:	f000 fc6f 	bl	80086b0 <__mcmp>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	9207      	str	r2, [sp, #28]
 8007dda:	f000 fa27 	bl	800822c <_Bfree>
 8007dde:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007de2:	ea43 0102 	orr.w	r1, r3, r2
 8007de6:	9b04      	ldr	r3, [sp, #16]
 8007de8:	430b      	orrs	r3, r1
 8007dea:	464d      	mov	r5, r9
 8007dec:	d10f      	bne.n	8007e0e <_dtoa_r+0xa66>
 8007dee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007df2:	d02a      	beq.n	8007e4a <_dtoa_r+0xaa2>
 8007df4:	9b03      	ldr	r3, [sp, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	dd02      	ble.n	8007e00 <_dtoa_r+0xa58>
 8007dfa:	9b02      	ldr	r3, [sp, #8]
 8007dfc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007e00:	f88b a000 	strb.w	sl, [fp]
 8007e04:	e775      	b.n	8007cf2 <_dtoa_r+0x94a>
 8007e06:	4638      	mov	r0, r7
 8007e08:	e7ba      	b.n	8007d80 <_dtoa_r+0x9d8>
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	e7e2      	b.n	8007dd4 <_dtoa_r+0xa2c>
 8007e0e:	9b03      	ldr	r3, [sp, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	db04      	blt.n	8007e1e <_dtoa_r+0xa76>
 8007e14:	9906      	ldr	r1, [sp, #24]
 8007e16:	430b      	orrs	r3, r1
 8007e18:	9904      	ldr	r1, [sp, #16]
 8007e1a:	430b      	orrs	r3, r1
 8007e1c:	d122      	bne.n	8007e64 <_dtoa_r+0xabc>
 8007e1e:	2a00      	cmp	r2, #0
 8007e20:	ddee      	ble.n	8007e00 <_dtoa_r+0xa58>
 8007e22:	ee18 1a10 	vmov	r1, s16
 8007e26:	2201      	movs	r2, #1
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f000 fbd1 	bl	80085d0 <__lshift>
 8007e2e:	4631      	mov	r1, r6
 8007e30:	ee08 0a10 	vmov	s16, r0
 8007e34:	f000 fc3c 	bl	80086b0 <__mcmp>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	dc03      	bgt.n	8007e44 <_dtoa_r+0xa9c>
 8007e3c:	d1e0      	bne.n	8007e00 <_dtoa_r+0xa58>
 8007e3e:	f01a 0f01 	tst.w	sl, #1
 8007e42:	d0dd      	beq.n	8007e00 <_dtoa_r+0xa58>
 8007e44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e48:	d1d7      	bne.n	8007dfa <_dtoa_r+0xa52>
 8007e4a:	2339      	movs	r3, #57	; 0x39
 8007e4c:	f88b 3000 	strb.w	r3, [fp]
 8007e50:	462b      	mov	r3, r5
 8007e52:	461d      	mov	r5, r3
 8007e54:	3b01      	subs	r3, #1
 8007e56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e5a:	2a39      	cmp	r2, #57	; 0x39
 8007e5c:	d071      	beq.n	8007f42 <_dtoa_r+0xb9a>
 8007e5e:	3201      	adds	r2, #1
 8007e60:	701a      	strb	r2, [r3, #0]
 8007e62:	e746      	b.n	8007cf2 <_dtoa_r+0x94a>
 8007e64:	2a00      	cmp	r2, #0
 8007e66:	dd07      	ble.n	8007e78 <_dtoa_r+0xad0>
 8007e68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e6c:	d0ed      	beq.n	8007e4a <_dtoa_r+0xaa2>
 8007e6e:	f10a 0301 	add.w	r3, sl, #1
 8007e72:	f88b 3000 	strb.w	r3, [fp]
 8007e76:	e73c      	b.n	8007cf2 <_dtoa_r+0x94a>
 8007e78:	9b05      	ldr	r3, [sp, #20]
 8007e7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007e7e:	4599      	cmp	r9, r3
 8007e80:	d047      	beq.n	8007f12 <_dtoa_r+0xb6a>
 8007e82:	ee18 1a10 	vmov	r1, s16
 8007e86:	2300      	movs	r3, #0
 8007e88:	220a      	movs	r2, #10
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f000 f9f0 	bl	8008270 <__multadd>
 8007e90:	45b8      	cmp	r8, r7
 8007e92:	ee08 0a10 	vmov	s16, r0
 8007e96:	f04f 0300 	mov.w	r3, #0
 8007e9a:	f04f 020a 	mov.w	r2, #10
 8007e9e:	4641      	mov	r1, r8
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	d106      	bne.n	8007eb2 <_dtoa_r+0xb0a>
 8007ea4:	f000 f9e4 	bl	8008270 <__multadd>
 8007ea8:	4680      	mov	r8, r0
 8007eaa:	4607      	mov	r7, r0
 8007eac:	f109 0901 	add.w	r9, r9, #1
 8007eb0:	e772      	b.n	8007d98 <_dtoa_r+0x9f0>
 8007eb2:	f000 f9dd 	bl	8008270 <__multadd>
 8007eb6:	4639      	mov	r1, r7
 8007eb8:	4680      	mov	r8, r0
 8007eba:	2300      	movs	r3, #0
 8007ebc:	220a      	movs	r2, #10
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f000 f9d6 	bl	8008270 <__multadd>
 8007ec4:	4607      	mov	r7, r0
 8007ec6:	e7f1      	b.n	8007eac <_dtoa_r+0xb04>
 8007ec8:	9b03      	ldr	r3, [sp, #12]
 8007eca:	9302      	str	r3, [sp, #8]
 8007ecc:	9d01      	ldr	r5, [sp, #4]
 8007ece:	ee18 0a10 	vmov	r0, s16
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	f7ff f9da 	bl	800728c <quorem>
 8007ed8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007edc:	9b01      	ldr	r3, [sp, #4]
 8007ede:	f805 ab01 	strb.w	sl, [r5], #1
 8007ee2:	1aea      	subs	r2, r5, r3
 8007ee4:	9b02      	ldr	r3, [sp, #8]
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	dd09      	ble.n	8007efe <_dtoa_r+0xb56>
 8007eea:	ee18 1a10 	vmov	r1, s16
 8007eee:	2300      	movs	r3, #0
 8007ef0:	220a      	movs	r2, #10
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	f000 f9bc 	bl	8008270 <__multadd>
 8007ef8:	ee08 0a10 	vmov	s16, r0
 8007efc:	e7e7      	b.n	8007ece <_dtoa_r+0xb26>
 8007efe:	9b02      	ldr	r3, [sp, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	bfc8      	it	gt
 8007f04:	461d      	movgt	r5, r3
 8007f06:	9b01      	ldr	r3, [sp, #4]
 8007f08:	bfd8      	it	le
 8007f0a:	2501      	movle	r5, #1
 8007f0c:	441d      	add	r5, r3
 8007f0e:	f04f 0800 	mov.w	r8, #0
 8007f12:	ee18 1a10 	vmov	r1, s16
 8007f16:	2201      	movs	r2, #1
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f000 fb59 	bl	80085d0 <__lshift>
 8007f1e:	4631      	mov	r1, r6
 8007f20:	ee08 0a10 	vmov	s16, r0
 8007f24:	f000 fbc4 	bl	80086b0 <__mcmp>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	dc91      	bgt.n	8007e50 <_dtoa_r+0xaa8>
 8007f2c:	d102      	bne.n	8007f34 <_dtoa_r+0xb8c>
 8007f2e:	f01a 0f01 	tst.w	sl, #1
 8007f32:	d18d      	bne.n	8007e50 <_dtoa_r+0xaa8>
 8007f34:	462b      	mov	r3, r5
 8007f36:	461d      	mov	r5, r3
 8007f38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f3c:	2a30      	cmp	r2, #48	; 0x30
 8007f3e:	d0fa      	beq.n	8007f36 <_dtoa_r+0xb8e>
 8007f40:	e6d7      	b.n	8007cf2 <_dtoa_r+0x94a>
 8007f42:	9a01      	ldr	r2, [sp, #4]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d184      	bne.n	8007e52 <_dtoa_r+0xaaa>
 8007f48:	9b00      	ldr	r3, [sp, #0]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	2331      	movs	r3, #49	; 0x31
 8007f50:	7013      	strb	r3, [r2, #0]
 8007f52:	e6ce      	b.n	8007cf2 <_dtoa_r+0x94a>
 8007f54:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <_dtoa_r+0xbd4>)
 8007f56:	f7ff ba95 	b.w	8007484 <_dtoa_r+0xdc>
 8007f5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f47f aa6e 	bne.w	800743e <_dtoa_r+0x96>
 8007f62:	4b07      	ldr	r3, [pc, #28]	; (8007f80 <_dtoa_r+0xbd8>)
 8007f64:	f7ff ba8e 	b.w	8007484 <_dtoa_r+0xdc>
 8007f68:	9b02      	ldr	r3, [sp, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	dcae      	bgt.n	8007ecc <_dtoa_r+0xb24>
 8007f6e:	9b06      	ldr	r3, [sp, #24]
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	f73f aea8 	bgt.w	8007cc6 <_dtoa_r+0x91e>
 8007f76:	e7a9      	b.n	8007ecc <_dtoa_r+0xb24>
 8007f78:	0800b247 	.word	0x0800b247
 8007f7c:	0800b1a4 	.word	0x0800b1a4
 8007f80:	0800b1c8 	.word	0x0800b1c8

08007f84 <std>:
 8007f84:	2300      	movs	r3, #0
 8007f86:	b510      	push	{r4, lr}
 8007f88:	4604      	mov	r4, r0
 8007f8a:	e9c0 3300 	strd	r3, r3, [r0]
 8007f8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f92:	6083      	str	r3, [r0, #8]
 8007f94:	8181      	strh	r1, [r0, #12]
 8007f96:	6643      	str	r3, [r0, #100]	; 0x64
 8007f98:	81c2      	strh	r2, [r0, #14]
 8007f9a:	6183      	str	r3, [r0, #24]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	2208      	movs	r2, #8
 8007fa0:	305c      	adds	r0, #92	; 0x5c
 8007fa2:	f7fe fce9 	bl	8006978 <memset>
 8007fa6:	4b05      	ldr	r3, [pc, #20]	; (8007fbc <std+0x38>)
 8007fa8:	6263      	str	r3, [r4, #36]	; 0x24
 8007faa:	4b05      	ldr	r3, [pc, #20]	; (8007fc0 <std+0x3c>)
 8007fac:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fae:	4b05      	ldr	r3, [pc, #20]	; (8007fc4 <std+0x40>)
 8007fb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fb2:	4b05      	ldr	r3, [pc, #20]	; (8007fc8 <std+0x44>)
 8007fb4:	6224      	str	r4, [r4, #32]
 8007fb6:	6323      	str	r3, [r4, #48]	; 0x30
 8007fb8:	bd10      	pop	{r4, pc}
 8007fba:	bf00      	nop
 8007fbc:	08008d75 	.word	0x08008d75
 8007fc0:	08008d97 	.word	0x08008d97
 8007fc4:	08008dcf 	.word	0x08008dcf
 8007fc8:	08008df3 	.word	0x08008df3

08007fcc <_cleanup_r>:
 8007fcc:	4901      	ldr	r1, [pc, #4]	; (8007fd4 <_cleanup_r+0x8>)
 8007fce:	f000 b8af 	b.w	8008130 <_fwalk_reent>
 8007fd2:	bf00      	nop
 8007fd4:	08009109 	.word	0x08009109

08007fd8 <__sfmoreglue>:
 8007fd8:	b570      	push	{r4, r5, r6, lr}
 8007fda:	2268      	movs	r2, #104	; 0x68
 8007fdc:	1e4d      	subs	r5, r1, #1
 8007fde:	4355      	muls	r5, r2
 8007fe0:	460e      	mov	r6, r1
 8007fe2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fe6:	f000 fce7 	bl	80089b8 <_malloc_r>
 8007fea:	4604      	mov	r4, r0
 8007fec:	b140      	cbz	r0, 8008000 <__sfmoreglue+0x28>
 8007fee:	2100      	movs	r1, #0
 8007ff0:	e9c0 1600 	strd	r1, r6, [r0]
 8007ff4:	300c      	adds	r0, #12
 8007ff6:	60a0      	str	r0, [r4, #8]
 8007ff8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ffc:	f7fe fcbc 	bl	8006978 <memset>
 8008000:	4620      	mov	r0, r4
 8008002:	bd70      	pop	{r4, r5, r6, pc}

08008004 <__sfp_lock_acquire>:
 8008004:	4801      	ldr	r0, [pc, #4]	; (800800c <__sfp_lock_acquire+0x8>)
 8008006:	f000 b8b8 	b.w	800817a <__retarget_lock_acquire_recursive>
 800800a:	bf00      	nop
 800800c:	20000365 	.word	0x20000365

08008010 <__sfp_lock_release>:
 8008010:	4801      	ldr	r0, [pc, #4]	; (8008018 <__sfp_lock_release+0x8>)
 8008012:	f000 b8b3 	b.w	800817c <__retarget_lock_release_recursive>
 8008016:	bf00      	nop
 8008018:	20000365 	.word	0x20000365

0800801c <__sinit_lock_acquire>:
 800801c:	4801      	ldr	r0, [pc, #4]	; (8008024 <__sinit_lock_acquire+0x8>)
 800801e:	f000 b8ac 	b.w	800817a <__retarget_lock_acquire_recursive>
 8008022:	bf00      	nop
 8008024:	20000366 	.word	0x20000366

08008028 <__sinit_lock_release>:
 8008028:	4801      	ldr	r0, [pc, #4]	; (8008030 <__sinit_lock_release+0x8>)
 800802a:	f000 b8a7 	b.w	800817c <__retarget_lock_release_recursive>
 800802e:	bf00      	nop
 8008030:	20000366 	.word	0x20000366

08008034 <__sinit>:
 8008034:	b510      	push	{r4, lr}
 8008036:	4604      	mov	r4, r0
 8008038:	f7ff fff0 	bl	800801c <__sinit_lock_acquire>
 800803c:	69a3      	ldr	r3, [r4, #24]
 800803e:	b11b      	cbz	r3, 8008048 <__sinit+0x14>
 8008040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008044:	f7ff bff0 	b.w	8008028 <__sinit_lock_release>
 8008048:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800804c:	6523      	str	r3, [r4, #80]	; 0x50
 800804e:	4b13      	ldr	r3, [pc, #76]	; (800809c <__sinit+0x68>)
 8008050:	4a13      	ldr	r2, [pc, #76]	; (80080a0 <__sinit+0x6c>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	62a2      	str	r2, [r4, #40]	; 0x28
 8008056:	42a3      	cmp	r3, r4
 8008058:	bf04      	itt	eq
 800805a:	2301      	moveq	r3, #1
 800805c:	61a3      	streq	r3, [r4, #24]
 800805e:	4620      	mov	r0, r4
 8008060:	f000 f820 	bl	80080a4 <__sfp>
 8008064:	6060      	str	r0, [r4, #4]
 8008066:	4620      	mov	r0, r4
 8008068:	f000 f81c 	bl	80080a4 <__sfp>
 800806c:	60a0      	str	r0, [r4, #8]
 800806e:	4620      	mov	r0, r4
 8008070:	f000 f818 	bl	80080a4 <__sfp>
 8008074:	2200      	movs	r2, #0
 8008076:	60e0      	str	r0, [r4, #12]
 8008078:	2104      	movs	r1, #4
 800807a:	6860      	ldr	r0, [r4, #4]
 800807c:	f7ff ff82 	bl	8007f84 <std>
 8008080:	68a0      	ldr	r0, [r4, #8]
 8008082:	2201      	movs	r2, #1
 8008084:	2109      	movs	r1, #9
 8008086:	f7ff ff7d 	bl	8007f84 <std>
 800808a:	68e0      	ldr	r0, [r4, #12]
 800808c:	2202      	movs	r2, #2
 800808e:	2112      	movs	r1, #18
 8008090:	f7ff ff78 	bl	8007f84 <std>
 8008094:	2301      	movs	r3, #1
 8008096:	61a3      	str	r3, [r4, #24]
 8008098:	e7d2      	b.n	8008040 <__sinit+0xc>
 800809a:	bf00      	nop
 800809c:	0800b190 	.word	0x0800b190
 80080a0:	08007fcd 	.word	0x08007fcd

080080a4 <__sfp>:
 80080a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a6:	4607      	mov	r7, r0
 80080a8:	f7ff ffac 	bl	8008004 <__sfp_lock_acquire>
 80080ac:	4b1e      	ldr	r3, [pc, #120]	; (8008128 <__sfp+0x84>)
 80080ae:	681e      	ldr	r6, [r3, #0]
 80080b0:	69b3      	ldr	r3, [r6, #24]
 80080b2:	b913      	cbnz	r3, 80080ba <__sfp+0x16>
 80080b4:	4630      	mov	r0, r6
 80080b6:	f7ff ffbd 	bl	8008034 <__sinit>
 80080ba:	3648      	adds	r6, #72	; 0x48
 80080bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080c0:	3b01      	subs	r3, #1
 80080c2:	d503      	bpl.n	80080cc <__sfp+0x28>
 80080c4:	6833      	ldr	r3, [r6, #0]
 80080c6:	b30b      	cbz	r3, 800810c <__sfp+0x68>
 80080c8:	6836      	ldr	r6, [r6, #0]
 80080ca:	e7f7      	b.n	80080bc <__sfp+0x18>
 80080cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080d0:	b9d5      	cbnz	r5, 8008108 <__sfp+0x64>
 80080d2:	4b16      	ldr	r3, [pc, #88]	; (800812c <__sfp+0x88>)
 80080d4:	60e3      	str	r3, [r4, #12]
 80080d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080da:	6665      	str	r5, [r4, #100]	; 0x64
 80080dc:	f000 f84c 	bl	8008178 <__retarget_lock_init_recursive>
 80080e0:	f7ff ff96 	bl	8008010 <__sfp_lock_release>
 80080e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080ec:	6025      	str	r5, [r4, #0]
 80080ee:	61a5      	str	r5, [r4, #24]
 80080f0:	2208      	movs	r2, #8
 80080f2:	4629      	mov	r1, r5
 80080f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080f8:	f7fe fc3e 	bl	8006978 <memset>
 80080fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008100:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008104:	4620      	mov	r0, r4
 8008106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008108:	3468      	adds	r4, #104	; 0x68
 800810a:	e7d9      	b.n	80080c0 <__sfp+0x1c>
 800810c:	2104      	movs	r1, #4
 800810e:	4638      	mov	r0, r7
 8008110:	f7ff ff62 	bl	8007fd8 <__sfmoreglue>
 8008114:	4604      	mov	r4, r0
 8008116:	6030      	str	r0, [r6, #0]
 8008118:	2800      	cmp	r0, #0
 800811a:	d1d5      	bne.n	80080c8 <__sfp+0x24>
 800811c:	f7ff ff78 	bl	8008010 <__sfp_lock_release>
 8008120:	230c      	movs	r3, #12
 8008122:	603b      	str	r3, [r7, #0]
 8008124:	e7ee      	b.n	8008104 <__sfp+0x60>
 8008126:	bf00      	nop
 8008128:	0800b190 	.word	0x0800b190
 800812c:	ffff0001 	.word	0xffff0001

08008130 <_fwalk_reent>:
 8008130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008134:	4606      	mov	r6, r0
 8008136:	4688      	mov	r8, r1
 8008138:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800813c:	2700      	movs	r7, #0
 800813e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008142:	f1b9 0901 	subs.w	r9, r9, #1
 8008146:	d505      	bpl.n	8008154 <_fwalk_reent+0x24>
 8008148:	6824      	ldr	r4, [r4, #0]
 800814a:	2c00      	cmp	r4, #0
 800814c:	d1f7      	bne.n	800813e <_fwalk_reent+0xe>
 800814e:	4638      	mov	r0, r7
 8008150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008154:	89ab      	ldrh	r3, [r5, #12]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d907      	bls.n	800816a <_fwalk_reent+0x3a>
 800815a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800815e:	3301      	adds	r3, #1
 8008160:	d003      	beq.n	800816a <_fwalk_reent+0x3a>
 8008162:	4629      	mov	r1, r5
 8008164:	4630      	mov	r0, r6
 8008166:	47c0      	blx	r8
 8008168:	4307      	orrs	r7, r0
 800816a:	3568      	adds	r5, #104	; 0x68
 800816c:	e7e9      	b.n	8008142 <_fwalk_reent+0x12>
	...

08008170 <_localeconv_r>:
 8008170:	4800      	ldr	r0, [pc, #0]	; (8008174 <_localeconv_r+0x4>)
 8008172:	4770      	bx	lr
 8008174:	2000016c 	.word	0x2000016c

08008178 <__retarget_lock_init_recursive>:
 8008178:	4770      	bx	lr

0800817a <__retarget_lock_acquire_recursive>:
 800817a:	4770      	bx	lr

0800817c <__retarget_lock_release_recursive>:
 800817c:	4770      	bx	lr
	...

08008180 <malloc>:
 8008180:	4b02      	ldr	r3, [pc, #8]	; (800818c <malloc+0xc>)
 8008182:	4601      	mov	r1, r0
 8008184:	6818      	ldr	r0, [r3, #0]
 8008186:	f000 bc17 	b.w	80089b8 <_malloc_r>
 800818a:	bf00      	nop
 800818c:	20000018 	.word	0x20000018

08008190 <memcpy>:
 8008190:	440a      	add	r2, r1
 8008192:	4291      	cmp	r1, r2
 8008194:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008198:	d100      	bne.n	800819c <memcpy+0xc>
 800819a:	4770      	bx	lr
 800819c:	b510      	push	{r4, lr}
 800819e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081a6:	4291      	cmp	r1, r2
 80081a8:	d1f9      	bne.n	800819e <memcpy+0xe>
 80081aa:	bd10      	pop	{r4, pc}

080081ac <_Balloc>:
 80081ac:	b570      	push	{r4, r5, r6, lr}
 80081ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081b0:	4604      	mov	r4, r0
 80081b2:	460d      	mov	r5, r1
 80081b4:	b976      	cbnz	r6, 80081d4 <_Balloc+0x28>
 80081b6:	2010      	movs	r0, #16
 80081b8:	f7ff ffe2 	bl	8008180 <malloc>
 80081bc:	4602      	mov	r2, r0
 80081be:	6260      	str	r0, [r4, #36]	; 0x24
 80081c0:	b920      	cbnz	r0, 80081cc <_Balloc+0x20>
 80081c2:	4b18      	ldr	r3, [pc, #96]	; (8008224 <_Balloc+0x78>)
 80081c4:	4818      	ldr	r0, [pc, #96]	; (8008228 <_Balloc+0x7c>)
 80081c6:	2166      	movs	r1, #102	; 0x66
 80081c8:	f000 feea 	bl	8008fa0 <__assert_func>
 80081cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081d0:	6006      	str	r6, [r0, #0]
 80081d2:	60c6      	str	r6, [r0, #12]
 80081d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081d6:	68f3      	ldr	r3, [r6, #12]
 80081d8:	b183      	cbz	r3, 80081fc <_Balloc+0x50>
 80081da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081e2:	b9b8      	cbnz	r0, 8008214 <_Balloc+0x68>
 80081e4:	2101      	movs	r1, #1
 80081e6:	fa01 f605 	lsl.w	r6, r1, r5
 80081ea:	1d72      	adds	r2, r6, #5
 80081ec:	0092      	lsls	r2, r2, #2
 80081ee:	4620      	mov	r0, r4
 80081f0:	f000 fb60 	bl	80088b4 <_calloc_r>
 80081f4:	b160      	cbz	r0, 8008210 <_Balloc+0x64>
 80081f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80081fa:	e00e      	b.n	800821a <_Balloc+0x6e>
 80081fc:	2221      	movs	r2, #33	; 0x21
 80081fe:	2104      	movs	r1, #4
 8008200:	4620      	mov	r0, r4
 8008202:	f000 fb57 	bl	80088b4 <_calloc_r>
 8008206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008208:	60f0      	str	r0, [r6, #12]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1e4      	bne.n	80081da <_Balloc+0x2e>
 8008210:	2000      	movs	r0, #0
 8008212:	bd70      	pop	{r4, r5, r6, pc}
 8008214:	6802      	ldr	r2, [r0, #0]
 8008216:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800821a:	2300      	movs	r3, #0
 800821c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008220:	e7f7      	b.n	8008212 <_Balloc+0x66>
 8008222:	bf00      	nop
 8008224:	0800b1d5 	.word	0x0800b1d5
 8008228:	0800b2b8 	.word	0x0800b2b8

0800822c <_Bfree>:
 800822c:	b570      	push	{r4, r5, r6, lr}
 800822e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008230:	4605      	mov	r5, r0
 8008232:	460c      	mov	r4, r1
 8008234:	b976      	cbnz	r6, 8008254 <_Bfree+0x28>
 8008236:	2010      	movs	r0, #16
 8008238:	f7ff ffa2 	bl	8008180 <malloc>
 800823c:	4602      	mov	r2, r0
 800823e:	6268      	str	r0, [r5, #36]	; 0x24
 8008240:	b920      	cbnz	r0, 800824c <_Bfree+0x20>
 8008242:	4b09      	ldr	r3, [pc, #36]	; (8008268 <_Bfree+0x3c>)
 8008244:	4809      	ldr	r0, [pc, #36]	; (800826c <_Bfree+0x40>)
 8008246:	218a      	movs	r1, #138	; 0x8a
 8008248:	f000 feaa 	bl	8008fa0 <__assert_func>
 800824c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008250:	6006      	str	r6, [r0, #0]
 8008252:	60c6      	str	r6, [r0, #12]
 8008254:	b13c      	cbz	r4, 8008266 <_Bfree+0x3a>
 8008256:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008258:	6862      	ldr	r2, [r4, #4]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008260:	6021      	str	r1, [r4, #0]
 8008262:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008266:	bd70      	pop	{r4, r5, r6, pc}
 8008268:	0800b1d5 	.word	0x0800b1d5
 800826c:	0800b2b8 	.word	0x0800b2b8

08008270 <__multadd>:
 8008270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008274:	690d      	ldr	r5, [r1, #16]
 8008276:	4607      	mov	r7, r0
 8008278:	460c      	mov	r4, r1
 800827a:	461e      	mov	r6, r3
 800827c:	f101 0c14 	add.w	ip, r1, #20
 8008280:	2000      	movs	r0, #0
 8008282:	f8dc 3000 	ldr.w	r3, [ip]
 8008286:	b299      	uxth	r1, r3
 8008288:	fb02 6101 	mla	r1, r2, r1, r6
 800828c:	0c1e      	lsrs	r6, r3, #16
 800828e:	0c0b      	lsrs	r3, r1, #16
 8008290:	fb02 3306 	mla	r3, r2, r6, r3
 8008294:	b289      	uxth	r1, r1
 8008296:	3001      	adds	r0, #1
 8008298:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800829c:	4285      	cmp	r5, r0
 800829e:	f84c 1b04 	str.w	r1, [ip], #4
 80082a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80082a6:	dcec      	bgt.n	8008282 <__multadd+0x12>
 80082a8:	b30e      	cbz	r6, 80082ee <__multadd+0x7e>
 80082aa:	68a3      	ldr	r3, [r4, #8]
 80082ac:	42ab      	cmp	r3, r5
 80082ae:	dc19      	bgt.n	80082e4 <__multadd+0x74>
 80082b0:	6861      	ldr	r1, [r4, #4]
 80082b2:	4638      	mov	r0, r7
 80082b4:	3101      	adds	r1, #1
 80082b6:	f7ff ff79 	bl	80081ac <_Balloc>
 80082ba:	4680      	mov	r8, r0
 80082bc:	b928      	cbnz	r0, 80082ca <__multadd+0x5a>
 80082be:	4602      	mov	r2, r0
 80082c0:	4b0c      	ldr	r3, [pc, #48]	; (80082f4 <__multadd+0x84>)
 80082c2:	480d      	ldr	r0, [pc, #52]	; (80082f8 <__multadd+0x88>)
 80082c4:	21b5      	movs	r1, #181	; 0xb5
 80082c6:	f000 fe6b 	bl	8008fa0 <__assert_func>
 80082ca:	6922      	ldr	r2, [r4, #16]
 80082cc:	3202      	adds	r2, #2
 80082ce:	f104 010c 	add.w	r1, r4, #12
 80082d2:	0092      	lsls	r2, r2, #2
 80082d4:	300c      	adds	r0, #12
 80082d6:	f7ff ff5b 	bl	8008190 <memcpy>
 80082da:	4621      	mov	r1, r4
 80082dc:	4638      	mov	r0, r7
 80082de:	f7ff ffa5 	bl	800822c <_Bfree>
 80082e2:	4644      	mov	r4, r8
 80082e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082e8:	3501      	adds	r5, #1
 80082ea:	615e      	str	r6, [r3, #20]
 80082ec:	6125      	str	r5, [r4, #16]
 80082ee:	4620      	mov	r0, r4
 80082f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082f4:	0800b247 	.word	0x0800b247
 80082f8:	0800b2b8 	.word	0x0800b2b8

080082fc <__hi0bits>:
 80082fc:	0c03      	lsrs	r3, r0, #16
 80082fe:	041b      	lsls	r3, r3, #16
 8008300:	b9d3      	cbnz	r3, 8008338 <__hi0bits+0x3c>
 8008302:	0400      	lsls	r0, r0, #16
 8008304:	2310      	movs	r3, #16
 8008306:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800830a:	bf04      	itt	eq
 800830c:	0200      	lsleq	r0, r0, #8
 800830e:	3308      	addeq	r3, #8
 8008310:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008314:	bf04      	itt	eq
 8008316:	0100      	lsleq	r0, r0, #4
 8008318:	3304      	addeq	r3, #4
 800831a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800831e:	bf04      	itt	eq
 8008320:	0080      	lsleq	r0, r0, #2
 8008322:	3302      	addeq	r3, #2
 8008324:	2800      	cmp	r0, #0
 8008326:	db05      	blt.n	8008334 <__hi0bits+0x38>
 8008328:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800832c:	f103 0301 	add.w	r3, r3, #1
 8008330:	bf08      	it	eq
 8008332:	2320      	moveq	r3, #32
 8008334:	4618      	mov	r0, r3
 8008336:	4770      	bx	lr
 8008338:	2300      	movs	r3, #0
 800833a:	e7e4      	b.n	8008306 <__hi0bits+0xa>

0800833c <__lo0bits>:
 800833c:	6803      	ldr	r3, [r0, #0]
 800833e:	f013 0207 	ands.w	r2, r3, #7
 8008342:	4601      	mov	r1, r0
 8008344:	d00b      	beq.n	800835e <__lo0bits+0x22>
 8008346:	07da      	lsls	r2, r3, #31
 8008348:	d423      	bmi.n	8008392 <__lo0bits+0x56>
 800834a:	0798      	lsls	r0, r3, #30
 800834c:	bf49      	itett	mi
 800834e:	085b      	lsrmi	r3, r3, #1
 8008350:	089b      	lsrpl	r3, r3, #2
 8008352:	2001      	movmi	r0, #1
 8008354:	600b      	strmi	r3, [r1, #0]
 8008356:	bf5c      	itt	pl
 8008358:	600b      	strpl	r3, [r1, #0]
 800835a:	2002      	movpl	r0, #2
 800835c:	4770      	bx	lr
 800835e:	b298      	uxth	r0, r3
 8008360:	b9a8      	cbnz	r0, 800838e <__lo0bits+0x52>
 8008362:	0c1b      	lsrs	r3, r3, #16
 8008364:	2010      	movs	r0, #16
 8008366:	b2da      	uxtb	r2, r3
 8008368:	b90a      	cbnz	r2, 800836e <__lo0bits+0x32>
 800836a:	3008      	adds	r0, #8
 800836c:	0a1b      	lsrs	r3, r3, #8
 800836e:	071a      	lsls	r2, r3, #28
 8008370:	bf04      	itt	eq
 8008372:	091b      	lsreq	r3, r3, #4
 8008374:	3004      	addeq	r0, #4
 8008376:	079a      	lsls	r2, r3, #30
 8008378:	bf04      	itt	eq
 800837a:	089b      	lsreq	r3, r3, #2
 800837c:	3002      	addeq	r0, #2
 800837e:	07da      	lsls	r2, r3, #31
 8008380:	d403      	bmi.n	800838a <__lo0bits+0x4e>
 8008382:	085b      	lsrs	r3, r3, #1
 8008384:	f100 0001 	add.w	r0, r0, #1
 8008388:	d005      	beq.n	8008396 <__lo0bits+0x5a>
 800838a:	600b      	str	r3, [r1, #0]
 800838c:	4770      	bx	lr
 800838e:	4610      	mov	r0, r2
 8008390:	e7e9      	b.n	8008366 <__lo0bits+0x2a>
 8008392:	2000      	movs	r0, #0
 8008394:	4770      	bx	lr
 8008396:	2020      	movs	r0, #32
 8008398:	4770      	bx	lr
	...

0800839c <__i2b>:
 800839c:	b510      	push	{r4, lr}
 800839e:	460c      	mov	r4, r1
 80083a0:	2101      	movs	r1, #1
 80083a2:	f7ff ff03 	bl	80081ac <_Balloc>
 80083a6:	4602      	mov	r2, r0
 80083a8:	b928      	cbnz	r0, 80083b6 <__i2b+0x1a>
 80083aa:	4b05      	ldr	r3, [pc, #20]	; (80083c0 <__i2b+0x24>)
 80083ac:	4805      	ldr	r0, [pc, #20]	; (80083c4 <__i2b+0x28>)
 80083ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80083b2:	f000 fdf5 	bl	8008fa0 <__assert_func>
 80083b6:	2301      	movs	r3, #1
 80083b8:	6144      	str	r4, [r0, #20]
 80083ba:	6103      	str	r3, [r0, #16]
 80083bc:	bd10      	pop	{r4, pc}
 80083be:	bf00      	nop
 80083c0:	0800b247 	.word	0x0800b247
 80083c4:	0800b2b8 	.word	0x0800b2b8

080083c8 <__multiply>:
 80083c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083cc:	4691      	mov	r9, r2
 80083ce:	690a      	ldr	r2, [r1, #16]
 80083d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	bfb8      	it	lt
 80083d8:	460b      	movlt	r3, r1
 80083da:	460c      	mov	r4, r1
 80083dc:	bfbc      	itt	lt
 80083de:	464c      	movlt	r4, r9
 80083e0:	4699      	movlt	r9, r3
 80083e2:	6927      	ldr	r7, [r4, #16]
 80083e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80083e8:	68a3      	ldr	r3, [r4, #8]
 80083ea:	6861      	ldr	r1, [r4, #4]
 80083ec:	eb07 060a 	add.w	r6, r7, sl
 80083f0:	42b3      	cmp	r3, r6
 80083f2:	b085      	sub	sp, #20
 80083f4:	bfb8      	it	lt
 80083f6:	3101      	addlt	r1, #1
 80083f8:	f7ff fed8 	bl	80081ac <_Balloc>
 80083fc:	b930      	cbnz	r0, 800840c <__multiply+0x44>
 80083fe:	4602      	mov	r2, r0
 8008400:	4b44      	ldr	r3, [pc, #272]	; (8008514 <__multiply+0x14c>)
 8008402:	4845      	ldr	r0, [pc, #276]	; (8008518 <__multiply+0x150>)
 8008404:	f240 115d 	movw	r1, #349	; 0x15d
 8008408:	f000 fdca 	bl	8008fa0 <__assert_func>
 800840c:	f100 0514 	add.w	r5, r0, #20
 8008410:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008414:	462b      	mov	r3, r5
 8008416:	2200      	movs	r2, #0
 8008418:	4543      	cmp	r3, r8
 800841a:	d321      	bcc.n	8008460 <__multiply+0x98>
 800841c:	f104 0314 	add.w	r3, r4, #20
 8008420:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008424:	f109 0314 	add.w	r3, r9, #20
 8008428:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800842c:	9202      	str	r2, [sp, #8]
 800842e:	1b3a      	subs	r2, r7, r4
 8008430:	3a15      	subs	r2, #21
 8008432:	f022 0203 	bic.w	r2, r2, #3
 8008436:	3204      	adds	r2, #4
 8008438:	f104 0115 	add.w	r1, r4, #21
 800843c:	428f      	cmp	r7, r1
 800843e:	bf38      	it	cc
 8008440:	2204      	movcc	r2, #4
 8008442:	9201      	str	r2, [sp, #4]
 8008444:	9a02      	ldr	r2, [sp, #8]
 8008446:	9303      	str	r3, [sp, #12]
 8008448:	429a      	cmp	r2, r3
 800844a:	d80c      	bhi.n	8008466 <__multiply+0x9e>
 800844c:	2e00      	cmp	r6, #0
 800844e:	dd03      	ble.n	8008458 <__multiply+0x90>
 8008450:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008454:	2b00      	cmp	r3, #0
 8008456:	d05a      	beq.n	800850e <__multiply+0x146>
 8008458:	6106      	str	r6, [r0, #16]
 800845a:	b005      	add	sp, #20
 800845c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008460:	f843 2b04 	str.w	r2, [r3], #4
 8008464:	e7d8      	b.n	8008418 <__multiply+0x50>
 8008466:	f8b3 a000 	ldrh.w	sl, [r3]
 800846a:	f1ba 0f00 	cmp.w	sl, #0
 800846e:	d024      	beq.n	80084ba <__multiply+0xf2>
 8008470:	f104 0e14 	add.w	lr, r4, #20
 8008474:	46a9      	mov	r9, r5
 8008476:	f04f 0c00 	mov.w	ip, #0
 800847a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800847e:	f8d9 1000 	ldr.w	r1, [r9]
 8008482:	fa1f fb82 	uxth.w	fp, r2
 8008486:	b289      	uxth	r1, r1
 8008488:	fb0a 110b 	mla	r1, sl, fp, r1
 800848c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008490:	f8d9 2000 	ldr.w	r2, [r9]
 8008494:	4461      	add	r1, ip
 8008496:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800849a:	fb0a c20b 	mla	r2, sl, fp, ip
 800849e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80084a2:	b289      	uxth	r1, r1
 80084a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80084a8:	4577      	cmp	r7, lr
 80084aa:	f849 1b04 	str.w	r1, [r9], #4
 80084ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084b2:	d8e2      	bhi.n	800847a <__multiply+0xb2>
 80084b4:	9a01      	ldr	r2, [sp, #4]
 80084b6:	f845 c002 	str.w	ip, [r5, r2]
 80084ba:	9a03      	ldr	r2, [sp, #12]
 80084bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80084c0:	3304      	adds	r3, #4
 80084c2:	f1b9 0f00 	cmp.w	r9, #0
 80084c6:	d020      	beq.n	800850a <__multiply+0x142>
 80084c8:	6829      	ldr	r1, [r5, #0]
 80084ca:	f104 0c14 	add.w	ip, r4, #20
 80084ce:	46ae      	mov	lr, r5
 80084d0:	f04f 0a00 	mov.w	sl, #0
 80084d4:	f8bc b000 	ldrh.w	fp, [ip]
 80084d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80084dc:	fb09 220b 	mla	r2, r9, fp, r2
 80084e0:	4492      	add	sl, r2
 80084e2:	b289      	uxth	r1, r1
 80084e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80084e8:	f84e 1b04 	str.w	r1, [lr], #4
 80084ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80084f0:	f8be 1000 	ldrh.w	r1, [lr]
 80084f4:	0c12      	lsrs	r2, r2, #16
 80084f6:	fb09 1102 	mla	r1, r9, r2, r1
 80084fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80084fe:	4567      	cmp	r7, ip
 8008500:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008504:	d8e6      	bhi.n	80084d4 <__multiply+0x10c>
 8008506:	9a01      	ldr	r2, [sp, #4]
 8008508:	50a9      	str	r1, [r5, r2]
 800850a:	3504      	adds	r5, #4
 800850c:	e79a      	b.n	8008444 <__multiply+0x7c>
 800850e:	3e01      	subs	r6, #1
 8008510:	e79c      	b.n	800844c <__multiply+0x84>
 8008512:	bf00      	nop
 8008514:	0800b247 	.word	0x0800b247
 8008518:	0800b2b8 	.word	0x0800b2b8

0800851c <__pow5mult>:
 800851c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008520:	4615      	mov	r5, r2
 8008522:	f012 0203 	ands.w	r2, r2, #3
 8008526:	4606      	mov	r6, r0
 8008528:	460f      	mov	r7, r1
 800852a:	d007      	beq.n	800853c <__pow5mult+0x20>
 800852c:	4c25      	ldr	r4, [pc, #148]	; (80085c4 <__pow5mult+0xa8>)
 800852e:	3a01      	subs	r2, #1
 8008530:	2300      	movs	r3, #0
 8008532:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008536:	f7ff fe9b 	bl	8008270 <__multadd>
 800853a:	4607      	mov	r7, r0
 800853c:	10ad      	asrs	r5, r5, #2
 800853e:	d03d      	beq.n	80085bc <__pow5mult+0xa0>
 8008540:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008542:	b97c      	cbnz	r4, 8008564 <__pow5mult+0x48>
 8008544:	2010      	movs	r0, #16
 8008546:	f7ff fe1b 	bl	8008180 <malloc>
 800854a:	4602      	mov	r2, r0
 800854c:	6270      	str	r0, [r6, #36]	; 0x24
 800854e:	b928      	cbnz	r0, 800855c <__pow5mult+0x40>
 8008550:	4b1d      	ldr	r3, [pc, #116]	; (80085c8 <__pow5mult+0xac>)
 8008552:	481e      	ldr	r0, [pc, #120]	; (80085cc <__pow5mult+0xb0>)
 8008554:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008558:	f000 fd22 	bl	8008fa0 <__assert_func>
 800855c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008560:	6004      	str	r4, [r0, #0]
 8008562:	60c4      	str	r4, [r0, #12]
 8008564:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008568:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800856c:	b94c      	cbnz	r4, 8008582 <__pow5mult+0x66>
 800856e:	f240 2171 	movw	r1, #625	; 0x271
 8008572:	4630      	mov	r0, r6
 8008574:	f7ff ff12 	bl	800839c <__i2b>
 8008578:	2300      	movs	r3, #0
 800857a:	f8c8 0008 	str.w	r0, [r8, #8]
 800857e:	4604      	mov	r4, r0
 8008580:	6003      	str	r3, [r0, #0]
 8008582:	f04f 0900 	mov.w	r9, #0
 8008586:	07eb      	lsls	r3, r5, #31
 8008588:	d50a      	bpl.n	80085a0 <__pow5mult+0x84>
 800858a:	4639      	mov	r1, r7
 800858c:	4622      	mov	r2, r4
 800858e:	4630      	mov	r0, r6
 8008590:	f7ff ff1a 	bl	80083c8 <__multiply>
 8008594:	4639      	mov	r1, r7
 8008596:	4680      	mov	r8, r0
 8008598:	4630      	mov	r0, r6
 800859a:	f7ff fe47 	bl	800822c <_Bfree>
 800859e:	4647      	mov	r7, r8
 80085a0:	106d      	asrs	r5, r5, #1
 80085a2:	d00b      	beq.n	80085bc <__pow5mult+0xa0>
 80085a4:	6820      	ldr	r0, [r4, #0]
 80085a6:	b938      	cbnz	r0, 80085b8 <__pow5mult+0x9c>
 80085a8:	4622      	mov	r2, r4
 80085aa:	4621      	mov	r1, r4
 80085ac:	4630      	mov	r0, r6
 80085ae:	f7ff ff0b 	bl	80083c8 <__multiply>
 80085b2:	6020      	str	r0, [r4, #0]
 80085b4:	f8c0 9000 	str.w	r9, [r0]
 80085b8:	4604      	mov	r4, r0
 80085ba:	e7e4      	b.n	8008586 <__pow5mult+0x6a>
 80085bc:	4638      	mov	r0, r7
 80085be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085c2:	bf00      	nop
 80085c4:	0800b408 	.word	0x0800b408
 80085c8:	0800b1d5 	.word	0x0800b1d5
 80085cc:	0800b2b8 	.word	0x0800b2b8

080085d0 <__lshift>:
 80085d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085d4:	460c      	mov	r4, r1
 80085d6:	6849      	ldr	r1, [r1, #4]
 80085d8:	6923      	ldr	r3, [r4, #16]
 80085da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80085de:	68a3      	ldr	r3, [r4, #8]
 80085e0:	4607      	mov	r7, r0
 80085e2:	4691      	mov	r9, r2
 80085e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085e8:	f108 0601 	add.w	r6, r8, #1
 80085ec:	42b3      	cmp	r3, r6
 80085ee:	db0b      	blt.n	8008608 <__lshift+0x38>
 80085f0:	4638      	mov	r0, r7
 80085f2:	f7ff fddb 	bl	80081ac <_Balloc>
 80085f6:	4605      	mov	r5, r0
 80085f8:	b948      	cbnz	r0, 800860e <__lshift+0x3e>
 80085fa:	4602      	mov	r2, r0
 80085fc:	4b2a      	ldr	r3, [pc, #168]	; (80086a8 <__lshift+0xd8>)
 80085fe:	482b      	ldr	r0, [pc, #172]	; (80086ac <__lshift+0xdc>)
 8008600:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008604:	f000 fccc 	bl	8008fa0 <__assert_func>
 8008608:	3101      	adds	r1, #1
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	e7ee      	b.n	80085ec <__lshift+0x1c>
 800860e:	2300      	movs	r3, #0
 8008610:	f100 0114 	add.w	r1, r0, #20
 8008614:	f100 0210 	add.w	r2, r0, #16
 8008618:	4618      	mov	r0, r3
 800861a:	4553      	cmp	r3, sl
 800861c:	db37      	blt.n	800868e <__lshift+0xbe>
 800861e:	6920      	ldr	r0, [r4, #16]
 8008620:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008624:	f104 0314 	add.w	r3, r4, #20
 8008628:	f019 091f 	ands.w	r9, r9, #31
 800862c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008630:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008634:	d02f      	beq.n	8008696 <__lshift+0xc6>
 8008636:	f1c9 0e20 	rsb	lr, r9, #32
 800863a:	468a      	mov	sl, r1
 800863c:	f04f 0c00 	mov.w	ip, #0
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	fa02 f209 	lsl.w	r2, r2, r9
 8008646:	ea42 020c 	orr.w	r2, r2, ip
 800864a:	f84a 2b04 	str.w	r2, [sl], #4
 800864e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008652:	4298      	cmp	r0, r3
 8008654:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008658:	d8f2      	bhi.n	8008640 <__lshift+0x70>
 800865a:	1b03      	subs	r3, r0, r4
 800865c:	3b15      	subs	r3, #21
 800865e:	f023 0303 	bic.w	r3, r3, #3
 8008662:	3304      	adds	r3, #4
 8008664:	f104 0215 	add.w	r2, r4, #21
 8008668:	4290      	cmp	r0, r2
 800866a:	bf38      	it	cc
 800866c:	2304      	movcc	r3, #4
 800866e:	f841 c003 	str.w	ip, [r1, r3]
 8008672:	f1bc 0f00 	cmp.w	ip, #0
 8008676:	d001      	beq.n	800867c <__lshift+0xac>
 8008678:	f108 0602 	add.w	r6, r8, #2
 800867c:	3e01      	subs	r6, #1
 800867e:	4638      	mov	r0, r7
 8008680:	612e      	str	r6, [r5, #16]
 8008682:	4621      	mov	r1, r4
 8008684:	f7ff fdd2 	bl	800822c <_Bfree>
 8008688:	4628      	mov	r0, r5
 800868a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800868e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008692:	3301      	adds	r3, #1
 8008694:	e7c1      	b.n	800861a <__lshift+0x4a>
 8008696:	3904      	subs	r1, #4
 8008698:	f853 2b04 	ldr.w	r2, [r3], #4
 800869c:	f841 2f04 	str.w	r2, [r1, #4]!
 80086a0:	4298      	cmp	r0, r3
 80086a2:	d8f9      	bhi.n	8008698 <__lshift+0xc8>
 80086a4:	e7ea      	b.n	800867c <__lshift+0xac>
 80086a6:	bf00      	nop
 80086a8:	0800b247 	.word	0x0800b247
 80086ac:	0800b2b8 	.word	0x0800b2b8

080086b0 <__mcmp>:
 80086b0:	b530      	push	{r4, r5, lr}
 80086b2:	6902      	ldr	r2, [r0, #16]
 80086b4:	690c      	ldr	r4, [r1, #16]
 80086b6:	1b12      	subs	r2, r2, r4
 80086b8:	d10e      	bne.n	80086d8 <__mcmp+0x28>
 80086ba:	f100 0314 	add.w	r3, r0, #20
 80086be:	3114      	adds	r1, #20
 80086c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80086c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80086c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80086cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80086d0:	42a5      	cmp	r5, r4
 80086d2:	d003      	beq.n	80086dc <__mcmp+0x2c>
 80086d4:	d305      	bcc.n	80086e2 <__mcmp+0x32>
 80086d6:	2201      	movs	r2, #1
 80086d8:	4610      	mov	r0, r2
 80086da:	bd30      	pop	{r4, r5, pc}
 80086dc:	4283      	cmp	r3, r0
 80086de:	d3f3      	bcc.n	80086c8 <__mcmp+0x18>
 80086e0:	e7fa      	b.n	80086d8 <__mcmp+0x28>
 80086e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086e6:	e7f7      	b.n	80086d8 <__mcmp+0x28>

080086e8 <__mdiff>:
 80086e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ec:	460c      	mov	r4, r1
 80086ee:	4606      	mov	r6, r0
 80086f0:	4611      	mov	r1, r2
 80086f2:	4620      	mov	r0, r4
 80086f4:	4690      	mov	r8, r2
 80086f6:	f7ff ffdb 	bl	80086b0 <__mcmp>
 80086fa:	1e05      	subs	r5, r0, #0
 80086fc:	d110      	bne.n	8008720 <__mdiff+0x38>
 80086fe:	4629      	mov	r1, r5
 8008700:	4630      	mov	r0, r6
 8008702:	f7ff fd53 	bl	80081ac <_Balloc>
 8008706:	b930      	cbnz	r0, 8008716 <__mdiff+0x2e>
 8008708:	4b3a      	ldr	r3, [pc, #232]	; (80087f4 <__mdiff+0x10c>)
 800870a:	4602      	mov	r2, r0
 800870c:	f240 2132 	movw	r1, #562	; 0x232
 8008710:	4839      	ldr	r0, [pc, #228]	; (80087f8 <__mdiff+0x110>)
 8008712:	f000 fc45 	bl	8008fa0 <__assert_func>
 8008716:	2301      	movs	r3, #1
 8008718:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800871c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008720:	bfa4      	itt	ge
 8008722:	4643      	movge	r3, r8
 8008724:	46a0      	movge	r8, r4
 8008726:	4630      	mov	r0, r6
 8008728:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800872c:	bfa6      	itte	ge
 800872e:	461c      	movge	r4, r3
 8008730:	2500      	movge	r5, #0
 8008732:	2501      	movlt	r5, #1
 8008734:	f7ff fd3a 	bl	80081ac <_Balloc>
 8008738:	b920      	cbnz	r0, 8008744 <__mdiff+0x5c>
 800873a:	4b2e      	ldr	r3, [pc, #184]	; (80087f4 <__mdiff+0x10c>)
 800873c:	4602      	mov	r2, r0
 800873e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008742:	e7e5      	b.n	8008710 <__mdiff+0x28>
 8008744:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008748:	6926      	ldr	r6, [r4, #16]
 800874a:	60c5      	str	r5, [r0, #12]
 800874c:	f104 0914 	add.w	r9, r4, #20
 8008750:	f108 0514 	add.w	r5, r8, #20
 8008754:	f100 0e14 	add.w	lr, r0, #20
 8008758:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800875c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008760:	f108 0210 	add.w	r2, r8, #16
 8008764:	46f2      	mov	sl, lr
 8008766:	2100      	movs	r1, #0
 8008768:	f859 3b04 	ldr.w	r3, [r9], #4
 800876c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008770:	fa1f f883 	uxth.w	r8, r3
 8008774:	fa11 f18b 	uxtah	r1, r1, fp
 8008778:	0c1b      	lsrs	r3, r3, #16
 800877a:	eba1 0808 	sub.w	r8, r1, r8
 800877e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008782:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008786:	fa1f f888 	uxth.w	r8, r8
 800878a:	1419      	asrs	r1, r3, #16
 800878c:	454e      	cmp	r6, r9
 800878e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008792:	f84a 3b04 	str.w	r3, [sl], #4
 8008796:	d8e7      	bhi.n	8008768 <__mdiff+0x80>
 8008798:	1b33      	subs	r3, r6, r4
 800879a:	3b15      	subs	r3, #21
 800879c:	f023 0303 	bic.w	r3, r3, #3
 80087a0:	3304      	adds	r3, #4
 80087a2:	3415      	adds	r4, #21
 80087a4:	42a6      	cmp	r6, r4
 80087a6:	bf38      	it	cc
 80087a8:	2304      	movcc	r3, #4
 80087aa:	441d      	add	r5, r3
 80087ac:	4473      	add	r3, lr
 80087ae:	469e      	mov	lr, r3
 80087b0:	462e      	mov	r6, r5
 80087b2:	4566      	cmp	r6, ip
 80087b4:	d30e      	bcc.n	80087d4 <__mdiff+0xec>
 80087b6:	f10c 0203 	add.w	r2, ip, #3
 80087ba:	1b52      	subs	r2, r2, r5
 80087bc:	f022 0203 	bic.w	r2, r2, #3
 80087c0:	3d03      	subs	r5, #3
 80087c2:	45ac      	cmp	ip, r5
 80087c4:	bf38      	it	cc
 80087c6:	2200      	movcc	r2, #0
 80087c8:	441a      	add	r2, r3
 80087ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80087ce:	b17b      	cbz	r3, 80087f0 <__mdiff+0x108>
 80087d0:	6107      	str	r7, [r0, #16]
 80087d2:	e7a3      	b.n	800871c <__mdiff+0x34>
 80087d4:	f856 8b04 	ldr.w	r8, [r6], #4
 80087d8:	fa11 f288 	uxtah	r2, r1, r8
 80087dc:	1414      	asrs	r4, r2, #16
 80087de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80087e2:	b292      	uxth	r2, r2
 80087e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80087e8:	f84e 2b04 	str.w	r2, [lr], #4
 80087ec:	1421      	asrs	r1, r4, #16
 80087ee:	e7e0      	b.n	80087b2 <__mdiff+0xca>
 80087f0:	3f01      	subs	r7, #1
 80087f2:	e7ea      	b.n	80087ca <__mdiff+0xe2>
 80087f4:	0800b247 	.word	0x0800b247
 80087f8:	0800b2b8 	.word	0x0800b2b8

080087fc <__d2b>:
 80087fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008800:	4689      	mov	r9, r1
 8008802:	2101      	movs	r1, #1
 8008804:	ec57 6b10 	vmov	r6, r7, d0
 8008808:	4690      	mov	r8, r2
 800880a:	f7ff fccf 	bl	80081ac <_Balloc>
 800880e:	4604      	mov	r4, r0
 8008810:	b930      	cbnz	r0, 8008820 <__d2b+0x24>
 8008812:	4602      	mov	r2, r0
 8008814:	4b25      	ldr	r3, [pc, #148]	; (80088ac <__d2b+0xb0>)
 8008816:	4826      	ldr	r0, [pc, #152]	; (80088b0 <__d2b+0xb4>)
 8008818:	f240 310a 	movw	r1, #778	; 0x30a
 800881c:	f000 fbc0 	bl	8008fa0 <__assert_func>
 8008820:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008824:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008828:	bb35      	cbnz	r5, 8008878 <__d2b+0x7c>
 800882a:	2e00      	cmp	r6, #0
 800882c:	9301      	str	r3, [sp, #4]
 800882e:	d028      	beq.n	8008882 <__d2b+0x86>
 8008830:	4668      	mov	r0, sp
 8008832:	9600      	str	r6, [sp, #0]
 8008834:	f7ff fd82 	bl	800833c <__lo0bits>
 8008838:	9900      	ldr	r1, [sp, #0]
 800883a:	b300      	cbz	r0, 800887e <__d2b+0x82>
 800883c:	9a01      	ldr	r2, [sp, #4]
 800883e:	f1c0 0320 	rsb	r3, r0, #32
 8008842:	fa02 f303 	lsl.w	r3, r2, r3
 8008846:	430b      	orrs	r3, r1
 8008848:	40c2      	lsrs	r2, r0
 800884a:	6163      	str	r3, [r4, #20]
 800884c:	9201      	str	r2, [sp, #4]
 800884e:	9b01      	ldr	r3, [sp, #4]
 8008850:	61a3      	str	r3, [r4, #24]
 8008852:	2b00      	cmp	r3, #0
 8008854:	bf14      	ite	ne
 8008856:	2202      	movne	r2, #2
 8008858:	2201      	moveq	r2, #1
 800885a:	6122      	str	r2, [r4, #16]
 800885c:	b1d5      	cbz	r5, 8008894 <__d2b+0x98>
 800885e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008862:	4405      	add	r5, r0
 8008864:	f8c9 5000 	str.w	r5, [r9]
 8008868:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800886c:	f8c8 0000 	str.w	r0, [r8]
 8008870:	4620      	mov	r0, r4
 8008872:	b003      	add	sp, #12
 8008874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800887c:	e7d5      	b.n	800882a <__d2b+0x2e>
 800887e:	6161      	str	r1, [r4, #20]
 8008880:	e7e5      	b.n	800884e <__d2b+0x52>
 8008882:	a801      	add	r0, sp, #4
 8008884:	f7ff fd5a 	bl	800833c <__lo0bits>
 8008888:	9b01      	ldr	r3, [sp, #4]
 800888a:	6163      	str	r3, [r4, #20]
 800888c:	2201      	movs	r2, #1
 800888e:	6122      	str	r2, [r4, #16]
 8008890:	3020      	adds	r0, #32
 8008892:	e7e3      	b.n	800885c <__d2b+0x60>
 8008894:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008898:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800889c:	f8c9 0000 	str.w	r0, [r9]
 80088a0:	6918      	ldr	r0, [r3, #16]
 80088a2:	f7ff fd2b 	bl	80082fc <__hi0bits>
 80088a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088aa:	e7df      	b.n	800886c <__d2b+0x70>
 80088ac:	0800b247 	.word	0x0800b247
 80088b0:	0800b2b8 	.word	0x0800b2b8

080088b4 <_calloc_r>:
 80088b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088b6:	fba1 2402 	umull	r2, r4, r1, r2
 80088ba:	b94c      	cbnz	r4, 80088d0 <_calloc_r+0x1c>
 80088bc:	4611      	mov	r1, r2
 80088be:	9201      	str	r2, [sp, #4]
 80088c0:	f000 f87a 	bl	80089b8 <_malloc_r>
 80088c4:	9a01      	ldr	r2, [sp, #4]
 80088c6:	4605      	mov	r5, r0
 80088c8:	b930      	cbnz	r0, 80088d8 <_calloc_r+0x24>
 80088ca:	4628      	mov	r0, r5
 80088cc:	b003      	add	sp, #12
 80088ce:	bd30      	pop	{r4, r5, pc}
 80088d0:	220c      	movs	r2, #12
 80088d2:	6002      	str	r2, [r0, #0]
 80088d4:	2500      	movs	r5, #0
 80088d6:	e7f8      	b.n	80088ca <_calloc_r+0x16>
 80088d8:	4621      	mov	r1, r4
 80088da:	f7fe f84d 	bl	8006978 <memset>
 80088de:	e7f4      	b.n	80088ca <_calloc_r+0x16>

080088e0 <_free_r>:
 80088e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088e2:	2900      	cmp	r1, #0
 80088e4:	d044      	beq.n	8008970 <_free_r+0x90>
 80088e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088ea:	9001      	str	r0, [sp, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f1a1 0404 	sub.w	r4, r1, #4
 80088f2:	bfb8      	it	lt
 80088f4:	18e4      	addlt	r4, r4, r3
 80088f6:	f000 fcdf 	bl	80092b8 <__malloc_lock>
 80088fa:	4a1e      	ldr	r2, [pc, #120]	; (8008974 <_free_r+0x94>)
 80088fc:	9801      	ldr	r0, [sp, #4]
 80088fe:	6813      	ldr	r3, [r2, #0]
 8008900:	b933      	cbnz	r3, 8008910 <_free_r+0x30>
 8008902:	6063      	str	r3, [r4, #4]
 8008904:	6014      	str	r4, [r2, #0]
 8008906:	b003      	add	sp, #12
 8008908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800890c:	f000 bcda 	b.w	80092c4 <__malloc_unlock>
 8008910:	42a3      	cmp	r3, r4
 8008912:	d908      	bls.n	8008926 <_free_r+0x46>
 8008914:	6825      	ldr	r5, [r4, #0]
 8008916:	1961      	adds	r1, r4, r5
 8008918:	428b      	cmp	r3, r1
 800891a:	bf01      	itttt	eq
 800891c:	6819      	ldreq	r1, [r3, #0]
 800891e:	685b      	ldreq	r3, [r3, #4]
 8008920:	1949      	addeq	r1, r1, r5
 8008922:	6021      	streq	r1, [r4, #0]
 8008924:	e7ed      	b.n	8008902 <_free_r+0x22>
 8008926:	461a      	mov	r2, r3
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	b10b      	cbz	r3, 8008930 <_free_r+0x50>
 800892c:	42a3      	cmp	r3, r4
 800892e:	d9fa      	bls.n	8008926 <_free_r+0x46>
 8008930:	6811      	ldr	r1, [r2, #0]
 8008932:	1855      	adds	r5, r2, r1
 8008934:	42a5      	cmp	r5, r4
 8008936:	d10b      	bne.n	8008950 <_free_r+0x70>
 8008938:	6824      	ldr	r4, [r4, #0]
 800893a:	4421      	add	r1, r4
 800893c:	1854      	adds	r4, r2, r1
 800893e:	42a3      	cmp	r3, r4
 8008940:	6011      	str	r1, [r2, #0]
 8008942:	d1e0      	bne.n	8008906 <_free_r+0x26>
 8008944:	681c      	ldr	r4, [r3, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	6053      	str	r3, [r2, #4]
 800894a:	4421      	add	r1, r4
 800894c:	6011      	str	r1, [r2, #0]
 800894e:	e7da      	b.n	8008906 <_free_r+0x26>
 8008950:	d902      	bls.n	8008958 <_free_r+0x78>
 8008952:	230c      	movs	r3, #12
 8008954:	6003      	str	r3, [r0, #0]
 8008956:	e7d6      	b.n	8008906 <_free_r+0x26>
 8008958:	6825      	ldr	r5, [r4, #0]
 800895a:	1961      	adds	r1, r4, r5
 800895c:	428b      	cmp	r3, r1
 800895e:	bf04      	itt	eq
 8008960:	6819      	ldreq	r1, [r3, #0]
 8008962:	685b      	ldreq	r3, [r3, #4]
 8008964:	6063      	str	r3, [r4, #4]
 8008966:	bf04      	itt	eq
 8008968:	1949      	addeq	r1, r1, r5
 800896a:	6021      	streq	r1, [r4, #0]
 800896c:	6054      	str	r4, [r2, #4]
 800896e:	e7ca      	b.n	8008906 <_free_r+0x26>
 8008970:	b003      	add	sp, #12
 8008972:	bd30      	pop	{r4, r5, pc}
 8008974:	20000368 	.word	0x20000368

08008978 <sbrk_aligned>:
 8008978:	b570      	push	{r4, r5, r6, lr}
 800897a:	4e0e      	ldr	r6, [pc, #56]	; (80089b4 <sbrk_aligned+0x3c>)
 800897c:	460c      	mov	r4, r1
 800897e:	6831      	ldr	r1, [r6, #0]
 8008980:	4605      	mov	r5, r0
 8008982:	b911      	cbnz	r1, 800898a <sbrk_aligned+0x12>
 8008984:	f000 f9e6 	bl	8008d54 <_sbrk_r>
 8008988:	6030      	str	r0, [r6, #0]
 800898a:	4621      	mov	r1, r4
 800898c:	4628      	mov	r0, r5
 800898e:	f000 f9e1 	bl	8008d54 <_sbrk_r>
 8008992:	1c43      	adds	r3, r0, #1
 8008994:	d00a      	beq.n	80089ac <sbrk_aligned+0x34>
 8008996:	1cc4      	adds	r4, r0, #3
 8008998:	f024 0403 	bic.w	r4, r4, #3
 800899c:	42a0      	cmp	r0, r4
 800899e:	d007      	beq.n	80089b0 <sbrk_aligned+0x38>
 80089a0:	1a21      	subs	r1, r4, r0
 80089a2:	4628      	mov	r0, r5
 80089a4:	f000 f9d6 	bl	8008d54 <_sbrk_r>
 80089a8:	3001      	adds	r0, #1
 80089aa:	d101      	bne.n	80089b0 <sbrk_aligned+0x38>
 80089ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80089b0:	4620      	mov	r0, r4
 80089b2:	bd70      	pop	{r4, r5, r6, pc}
 80089b4:	2000036c 	.word	0x2000036c

080089b8 <_malloc_r>:
 80089b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089bc:	1ccd      	adds	r5, r1, #3
 80089be:	f025 0503 	bic.w	r5, r5, #3
 80089c2:	3508      	adds	r5, #8
 80089c4:	2d0c      	cmp	r5, #12
 80089c6:	bf38      	it	cc
 80089c8:	250c      	movcc	r5, #12
 80089ca:	2d00      	cmp	r5, #0
 80089cc:	4607      	mov	r7, r0
 80089ce:	db01      	blt.n	80089d4 <_malloc_r+0x1c>
 80089d0:	42a9      	cmp	r1, r5
 80089d2:	d905      	bls.n	80089e0 <_malloc_r+0x28>
 80089d4:	230c      	movs	r3, #12
 80089d6:	603b      	str	r3, [r7, #0]
 80089d8:	2600      	movs	r6, #0
 80089da:	4630      	mov	r0, r6
 80089dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e0:	4e2e      	ldr	r6, [pc, #184]	; (8008a9c <_malloc_r+0xe4>)
 80089e2:	f000 fc69 	bl	80092b8 <__malloc_lock>
 80089e6:	6833      	ldr	r3, [r6, #0]
 80089e8:	461c      	mov	r4, r3
 80089ea:	bb34      	cbnz	r4, 8008a3a <_malloc_r+0x82>
 80089ec:	4629      	mov	r1, r5
 80089ee:	4638      	mov	r0, r7
 80089f0:	f7ff ffc2 	bl	8008978 <sbrk_aligned>
 80089f4:	1c43      	adds	r3, r0, #1
 80089f6:	4604      	mov	r4, r0
 80089f8:	d14d      	bne.n	8008a96 <_malloc_r+0xde>
 80089fa:	6834      	ldr	r4, [r6, #0]
 80089fc:	4626      	mov	r6, r4
 80089fe:	2e00      	cmp	r6, #0
 8008a00:	d140      	bne.n	8008a84 <_malloc_r+0xcc>
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	4631      	mov	r1, r6
 8008a06:	4638      	mov	r0, r7
 8008a08:	eb04 0803 	add.w	r8, r4, r3
 8008a0c:	f000 f9a2 	bl	8008d54 <_sbrk_r>
 8008a10:	4580      	cmp	r8, r0
 8008a12:	d13a      	bne.n	8008a8a <_malloc_r+0xd2>
 8008a14:	6821      	ldr	r1, [r4, #0]
 8008a16:	3503      	adds	r5, #3
 8008a18:	1a6d      	subs	r5, r5, r1
 8008a1a:	f025 0503 	bic.w	r5, r5, #3
 8008a1e:	3508      	adds	r5, #8
 8008a20:	2d0c      	cmp	r5, #12
 8008a22:	bf38      	it	cc
 8008a24:	250c      	movcc	r5, #12
 8008a26:	4629      	mov	r1, r5
 8008a28:	4638      	mov	r0, r7
 8008a2a:	f7ff ffa5 	bl	8008978 <sbrk_aligned>
 8008a2e:	3001      	adds	r0, #1
 8008a30:	d02b      	beq.n	8008a8a <_malloc_r+0xd2>
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	442b      	add	r3, r5
 8008a36:	6023      	str	r3, [r4, #0]
 8008a38:	e00e      	b.n	8008a58 <_malloc_r+0xa0>
 8008a3a:	6822      	ldr	r2, [r4, #0]
 8008a3c:	1b52      	subs	r2, r2, r5
 8008a3e:	d41e      	bmi.n	8008a7e <_malloc_r+0xc6>
 8008a40:	2a0b      	cmp	r2, #11
 8008a42:	d916      	bls.n	8008a72 <_malloc_r+0xba>
 8008a44:	1961      	adds	r1, r4, r5
 8008a46:	42a3      	cmp	r3, r4
 8008a48:	6025      	str	r5, [r4, #0]
 8008a4a:	bf18      	it	ne
 8008a4c:	6059      	strne	r1, [r3, #4]
 8008a4e:	6863      	ldr	r3, [r4, #4]
 8008a50:	bf08      	it	eq
 8008a52:	6031      	streq	r1, [r6, #0]
 8008a54:	5162      	str	r2, [r4, r5]
 8008a56:	604b      	str	r3, [r1, #4]
 8008a58:	4638      	mov	r0, r7
 8008a5a:	f104 060b 	add.w	r6, r4, #11
 8008a5e:	f000 fc31 	bl	80092c4 <__malloc_unlock>
 8008a62:	f026 0607 	bic.w	r6, r6, #7
 8008a66:	1d23      	adds	r3, r4, #4
 8008a68:	1af2      	subs	r2, r6, r3
 8008a6a:	d0b6      	beq.n	80089da <_malloc_r+0x22>
 8008a6c:	1b9b      	subs	r3, r3, r6
 8008a6e:	50a3      	str	r3, [r4, r2]
 8008a70:	e7b3      	b.n	80089da <_malloc_r+0x22>
 8008a72:	6862      	ldr	r2, [r4, #4]
 8008a74:	42a3      	cmp	r3, r4
 8008a76:	bf0c      	ite	eq
 8008a78:	6032      	streq	r2, [r6, #0]
 8008a7a:	605a      	strne	r2, [r3, #4]
 8008a7c:	e7ec      	b.n	8008a58 <_malloc_r+0xa0>
 8008a7e:	4623      	mov	r3, r4
 8008a80:	6864      	ldr	r4, [r4, #4]
 8008a82:	e7b2      	b.n	80089ea <_malloc_r+0x32>
 8008a84:	4634      	mov	r4, r6
 8008a86:	6876      	ldr	r6, [r6, #4]
 8008a88:	e7b9      	b.n	80089fe <_malloc_r+0x46>
 8008a8a:	230c      	movs	r3, #12
 8008a8c:	603b      	str	r3, [r7, #0]
 8008a8e:	4638      	mov	r0, r7
 8008a90:	f000 fc18 	bl	80092c4 <__malloc_unlock>
 8008a94:	e7a1      	b.n	80089da <_malloc_r+0x22>
 8008a96:	6025      	str	r5, [r4, #0]
 8008a98:	e7de      	b.n	8008a58 <_malloc_r+0xa0>
 8008a9a:	bf00      	nop
 8008a9c:	20000368 	.word	0x20000368

08008aa0 <__sfputc_r>:
 8008aa0:	6893      	ldr	r3, [r2, #8]
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	b410      	push	{r4}
 8008aa8:	6093      	str	r3, [r2, #8]
 8008aaa:	da08      	bge.n	8008abe <__sfputc_r+0x1e>
 8008aac:	6994      	ldr	r4, [r2, #24]
 8008aae:	42a3      	cmp	r3, r4
 8008ab0:	db01      	blt.n	8008ab6 <__sfputc_r+0x16>
 8008ab2:	290a      	cmp	r1, #10
 8008ab4:	d103      	bne.n	8008abe <__sfputc_r+0x1e>
 8008ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aba:	f000 b99f 	b.w	8008dfc <__swbuf_r>
 8008abe:	6813      	ldr	r3, [r2, #0]
 8008ac0:	1c58      	adds	r0, r3, #1
 8008ac2:	6010      	str	r0, [r2, #0]
 8008ac4:	7019      	strb	r1, [r3, #0]
 8008ac6:	4608      	mov	r0, r1
 8008ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008acc:	4770      	bx	lr

08008ace <__sfputs_r>:
 8008ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad0:	4606      	mov	r6, r0
 8008ad2:	460f      	mov	r7, r1
 8008ad4:	4614      	mov	r4, r2
 8008ad6:	18d5      	adds	r5, r2, r3
 8008ad8:	42ac      	cmp	r4, r5
 8008ada:	d101      	bne.n	8008ae0 <__sfputs_r+0x12>
 8008adc:	2000      	movs	r0, #0
 8008ade:	e007      	b.n	8008af0 <__sfputs_r+0x22>
 8008ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae4:	463a      	mov	r2, r7
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	f7ff ffda 	bl	8008aa0 <__sfputc_r>
 8008aec:	1c43      	adds	r3, r0, #1
 8008aee:	d1f3      	bne.n	8008ad8 <__sfputs_r+0xa>
 8008af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008af4 <_vfiprintf_r>:
 8008af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af8:	460d      	mov	r5, r1
 8008afa:	b09d      	sub	sp, #116	; 0x74
 8008afc:	4614      	mov	r4, r2
 8008afe:	4698      	mov	r8, r3
 8008b00:	4606      	mov	r6, r0
 8008b02:	b118      	cbz	r0, 8008b0c <_vfiprintf_r+0x18>
 8008b04:	6983      	ldr	r3, [r0, #24]
 8008b06:	b90b      	cbnz	r3, 8008b0c <_vfiprintf_r+0x18>
 8008b08:	f7ff fa94 	bl	8008034 <__sinit>
 8008b0c:	4b89      	ldr	r3, [pc, #548]	; (8008d34 <_vfiprintf_r+0x240>)
 8008b0e:	429d      	cmp	r5, r3
 8008b10:	d11b      	bne.n	8008b4a <_vfiprintf_r+0x56>
 8008b12:	6875      	ldr	r5, [r6, #4]
 8008b14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b16:	07d9      	lsls	r1, r3, #31
 8008b18:	d405      	bmi.n	8008b26 <_vfiprintf_r+0x32>
 8008b1a:	89ab      	ldrh	r3, [r5, #12]
 8008b1c:	059a      	lsls	r2, r3, #22
 8008b1e:	d402      	bmi.n	8008b26 <_vfiprintf_r+0x32>
 8008b20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b22:	f7ff fb2a 	bl	800817a <__retarget_lock_acquire_recursive>
 8008b26:	89ab      	ldrh	r3, [r5, #12]
 8008b28:	071b      	lsls	r3, r3, #28
 8008b2a:	d501      	bpl.n	8008b30 <_vfiprintf_r+0x3c>
 8008b2c:	692b      	ldr	r3, [r5, #16]
 8008b2e:	b9eb      	cbnz	r3, 8008b6c <_vfiprintf_r+0x78>
 8008b30:	4629      	mov	r1, r5
 8008b32:	4630      	mov	r0, r6
 8008b34:	f000 f9c6 	bl	8008ec4 <__swsetup_r>
 8008b38:	b1c0      	cbz	r0, 8008b6c <_vfiprintf_r+0x78>
 8008b3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b3c:	07dc      	lsls	r4, r3, #31
 8008b3e:	d50e      	bpl.n	8008b5e <_vfiprintf_r+0x6a>
 8008b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b44:	b01d      	add	sp, #116	; 0x74
 8008b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4a:	4b7b      	ldr	r3, [pc, #492]	; (8008d38 <_vfiprintf_r+0x244>)
 8008b4c:	429d      	cmp	r5, r3
 8008b4e:	d101      	bne.n	8008b54 <_vfiprintf_r+0x60>
 8008b50:	68b5      	ldr	r5, [r6, #8]
 8008b52:	e7df      	b.n	8008b14 <_vfiprintf_r+0x20>
 8008b54:	4b79      	ldr	r3, [pc, #484]	; (8008d3c <_vfiprintf_r+0x248>)
 8008b56:	429d      	cmp	r5, r3
 8008b58:	bf08      	it	eq
 8008b5a:	68f5      	ldreq	r5, [r6, #12]
 8008b5c:	e7da      	b.n	8008b14 <_vfiprintf_r+0x20>
 8008b5e:	89ab      	ldrh	r3, [r5, #12]
 8008b60:	0598      	lsls	r0, r3, #22
 8008b62:	d4ed      	bmi.n	8008b40 <_vfiprintf_r+0x4c>
 8008b64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b66:	f7ff fb09 	bl	800817c <__retarget_lock_release_recursive>
 8008b6a:	e7e9      	b.n	8008b40 <_vfiprintf_r+0x4c>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b70:	2320      	movs	r3, #32
 8008b72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b76:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b7a:	2330      	movs	r3, #48	; 0x30
 8008b7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008d40 <_vfiprintf_r+0x24c>
 8008b80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b84:	f04f 0901 	mov.w	r9, #1
 8008b88:	4623      	mov	r3, r4
 8008b8a:	469a      	mov	sl, r3
 8008b8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b90:	b10a      	cbz	r2, 8008b96 <_vfiprintf_r+0xa2>
 8008b92:	2a25      	cmp	r2, #37	; 0x25
 8008b94:	d1f9      	bne.n	8008b8a <_vfiprintf_r+0x96>
 8008b96:	ebba 0b04 	subs.w	fp, sl, r4
 8008b9a:	d00b      	beq.n	8008bb4 <_vfiprintf_r+0xc0>
 8008b9c:	465b      	mov	r3, fp
 8008b9e:	4622      	mov	r2, r4
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f7ff ff93 	bl	8008ace <__sfputs_r>
 8008ba8:	3001      	adds	r0, #1
 8008baa:	f000 80aa 	beq.w	8008d02 <_vfiprintf_r+0x20e>
 8008bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bb0:	445a      	add	r2, fp
 8008bb2:	9209      	str	r2, [sp, #36]	; 0x24
 8008bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 80a2 	beq.w	8008d02 <_vfiprintf_r+0x20e>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bc8:	f10a 0a01 	add.w	sl, sl, #1
 8008bcc:	9304      	str	r3, [sp, #16]
 8008bce:	9307      	str	r3, [sp, #28]
 8008bd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bd4:	931a      	str	r3, [sp, #104]	; 0x68
 8008bd6:	4654      	mov	r4, sl
 8008bd8:	2205      	movs	r2, #5
 8008bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bde:	4858      	ldr	r0, [pc, #352]	; (8008d40 <_vfiprintf_r+0x24c>)
 8008be0:	f7f7 fb1e 	bl	8000220 <memchr>
 8008be4:	9a04      	ldr	r2, [sp, #16]
 8008be6:	b9d8      	cbnz	r0, 8008c20 <_vfiprintf_r+0x12c>
 8008be8:	06d1      	lsls	r1, r2, #27
 8008bea:	bf44      	itt	mi
 8008bec:	2320      	movmi	r3, #32
 8008bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bf2:	0713      	lsls	r3, r2, #28
 8008bf4:	bf44      	itt	mi
 8008bf6:	232b      	movmi	r3, #43	; 0x2b
 8008bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8008c00:	2b2a      	cmp	r3, #42	; 0x2a
 8008c02:	d015      	beq.n	8008c30 <_vfiprintf_r+0x13c>
 8008c04:	9a07      	ldr	r2, [sp, #28]
 8008c06:	4654      	mov	r4, sl
 8008c08:	2000      	movs	r0, #0
 8008c0a:	f04f 0c0a 	mov.w	ip, #10
 8008c0e:	4621      	mov	r1, r4
 8008c10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c14:	3b30      	subs	r3, #48	; 0x30
 8008c16:	2b09      	cmp	r3, #9
 8008c18:	d94e      	bls.n	8008cb8 <_vfiprintf_r+0x1c4>
 8008c1a:	b1b0      	cbz	r0, 8008c4a <_vfiprintf_r+0x156>
 8008c1c:	9207      	str	r2, [sp, #28]
 8008c1e:	e014      	b.n	8008c4a <_vfiprintf_r+0x156>
 8008c20:	eba0 0308 	sub.w	r3, r0, r8
 8008c24:	fa09 f303 	lsl.w	r3, r9, r3
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	9304      	str	r3, [sp, #16]
 8008c2c:	46a2      	mov	sl, r4
 8008c2e:	e7d2      	b.n	8008bd6 <_vfiprintf_r+0xe2>
 8008c30:	9b03      	ldr	r3, [sp, #12]
 8008c32:	1d19      	adds	r1, r3, #4
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	9103      	str	r1, [sp, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	bfbb      	ittet	lt
 8008c3c:	425b      	neglt	r3, r3
 8008c3e:	f042 0202 	orrlt.w	r2, r2, #2
 8008c42:	9307      	strge	r3, [sp, #28]
 8008c44:	9307      	strlt	r3, [sp, #28]
 8008c46:	bfb8      	it	lt
 8008c48:	9204      	strlt	r2, [sp, #16]
 8008c4a:	7823      	ldrb	r3, [r4, #0]
 8008c4c:	2b2e      	cmp	r3, #46	; 0x2e
 8008c4e:	d10c      	bne.n	8008c6a <_vfiprintf_r+0x176>
 8008c50:	7863      	ldrb	r3, [r4, #1]
 8008c52:	2b2a      	cmp	r3, #42	; 0x2a
 8008c54:	d135      	bne.n	8008cc2 <_vfiprintf_r+0x1ce>
 8008c56:	9b03      	ldr	r3, [sp, #12]
 8008c58:	1d1a      	adds	r2, r3, #4
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	9203      	str	r2, [sp, #12]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	bfb8      	it	lt
 8008c62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008c66:	3402      	adds	r4, #2
 8008c68:	9305      	str	r3, [sp, #20]
 8008c6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008d50 <_vfiprintf_r+0x25c>
 8008c6e:	7821      	ldrb	r1, [r4, #0]
 8008c70:	2203      	movs	r2, #3
 8008c72:	4650      	mov	r0, sl
 8008c74:	f7f7 fad4 	bl	8000220 <memchr>
 8008c78:	b140      	cbz	r0, 8008c8c <_vfiprintf_r+0x198>
 8008c7a:	2340      	movs	r3, #64	; 0x40
 8008c7c:	eba0 000a 	sub.w	r0, r0, sl
 8008c80:	fa03 f000 	lsl.w	r0, r3, r0
 8008c84:	9b04      	ldr	r3, [sp, #16]
 8008c86:	4303      	orrs	r3, r0
 8008c88:	3401      	adds	r4, #1
 8008c8a:	9304      	str	r3, [sp, #16]
 8008c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c90:	482c      	ldr	r0, [pc, #176]	; (8008d44 <_vfiprintf_r+0x250>)
 8008c92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c96:	2206      	movs	r2, #6
 8008c98:	f7f7 fac2 	bl	8000220 <memchr>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d03f      	beq.n	8008d20 <_vfiprintf_r+0x22c>
 8008ca0:	4b29      	ldr	r3, [pc, #164]	; (8008d48 <_vfiprintf_r+0x254>)
 8008ca2:	bb1b      	cbnz	r3, 8008cec <_vfiprintf_r+0x1f8>
 8008ca4:	9b03      	ldr	r3, [sp, #12]
 8008ca6:	3307      	adds	r3, #7
 8008ca8:	f023 0307 	bic.w	r3, r3, #7
 8008cac:	3308      	adds	r3, #8
 8008cae:	9303      	str	r3, [sp, #12]
 8008cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cb2:	443b      	add	r3, r7
 8008cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb6:	e767      	b.n	8008b88 <_vfiprintf_r+0x94>
 8008cb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	2001      	movs	r0, #1
 8008cc0:	e7a5      	b.n	8008c0e <_vfiprintf_r+0x11a>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	3401      	adds	r4, #1
 8008cc6:	9305      	str	r3, [sp, #20]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	f04f 0c0a 	mov.w	ip, #10
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cd4:	3a30      	subs	r2, #48	; 0x30
 8008cd6:	2a09      	cmp	r2, #9
 8008cd8:	d903      	bls.n	8008ce2 <_vfiprintf_r+0x1ee>
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d0c5      	beq.n	8008c6a <_vfiprintf_r+0x176>
 8008cde:	9105      	str	r1, [sp, #20]
 8008ce0:	e7c3      	b.n	8008c6a <_vfiprintf_r+0x176>
 8008ce2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e7f0      	b.n	8008cce <_vfiprintf_r+0x1da>
 8008cec:	ab03      	add	r3, sp, #12
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	462a      	mov	r2, r5
 8008cf2:	4b16      	ldr	r3, [pc, #88]	; (8008d4c <_vfiprintf_r+0x258>)
 8008cf4:	a904      	add	r1, sp, #16
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	f7fd fee6 	bl	8006ac8 <_printf_float>
 8008cfc:	4607      	mov	r7, r0
 8008cfe:	1c78      	adds	r0, r7, #1
 8008d00:	d1d6      	bne.n	8008cb0 <_vfiprintf_r+0x1bc>
 8008d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d04:	07d9      	lsls	r1, r3, #31
 8008d06:	d405      	bmi.n	8008d14 <_vfiprintf_r+0x220>
 8008d08:	89ab      	ldrh	r3, [r5, #12]
 8008d0a:	059a      	lsls	r2, r3, #22
 8008d0c:	d402      	bmi.n	8008d14 <_vfiprintf_r+0x220>
 8008d0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d10:	f7ff fa34 	bl	800817c <__retarget_lock_release_recursive>
 8008d14:	89ab      	ldrh	r3, [r5, #12]
 8008d16:	065b      	lsls	r3, r3, #25
 8008d18:	f53f af12 	bmi.w	8008b40 <_vfiprintf_r+0x4c>
 8008d1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d1e:	e711      	b.n	8008b44 <_vfiprintf_r+0x50>
 8008d20:	ab03      	add	r3, sp, #12
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	462a      	mov	r2, r5
 8008d26:	4b09      	ldr	r3, [pc, #36]	; (8008d4c <_vfiprintf_r+0x258>)
 8008d28:	a904      	add	r1, sp, #16
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f7fe f970 	bl	8007010 <_printf_i>
 8008d30:	e7e4      	b.n	8008cfc <_vfiprintf_r+0x208>
 8008d32:	bf00      	nop
 8008d34:	0800b278 	.word	0x0800b278
 8008d38:	0800b298 	.word	0x0800b298
 8008d3c:	0800b258 	.word	0x0800b258
 8008d40:	0800b414 	.word	0x0800b414
 8008d44:	0800b41e 	.word	0x0800b41e
 8008d48:	08006ac9 	.word	0x08006ac9
 8008d4c:	08008acf 	.word	0x08008acf
 8008d50:	0800b41a 	.word	0x0800b41a

08008d54 <_sbrk_r>:
 8008d54:	b538      	push	{r3, r4, r5, lr}
 8008d56:	4d06      	ldr	r5, [pc, #24]	; (8008d70 <_sbrk_r+0x1c>)
 8008d58:	2300      	movs	r3, #0
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	4608      	mov	r0, r1
 8008d5e:	602b      	str	r3, [r5, #0]
 8008d60:	f7fa fbdc 	bl	800351c <_sbrk>
 8008d64:	1c43      	adds	r3, r0, #1
 8008d66:	d102      	bne.n	8008d6e <_sbrk_r+0x1a>
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	b103      	cbz	r3, 8008d6e <_sbrk_r+0x1a>
 8008d6c:	6023      	str	r3, [r4, #0]
 8008d6e:	bd38      	pop	{r3, r4, r5, pc}
 8008d70:	20000370 	.word	0x20000370

08008d74 <__sread>:
 8008d74:	b510      	push	{r4, lr}
 8008d76:	460c      	mov	r4, r1
 8008d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d7c:	f000 faa8 	bl	80092d0 <_read_r>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	bfab      	itete	ge
 8008d84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d86:	89a3      	ldrhlt	r3, [r4, #12]
 8008d88:	181b      	addge	r3, r3, r0
 8008d8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d8e:	bfac      	ite	ge
 8008d90:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d92:	81a3      	strhlt	r3, [r4, #12]
 8008d94:	bd10      	pop	{r4, pc}

08008d96 <__swrite>:
 8008d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d9a:	461f      	mov	r7, r3
 8008d9c:	898b      	ldrh	r3, [r1, #12]
 8008d9e:	05db      	lsls	r3, r3, #23
 8008da0:	4605      	mov	r5, r0
 8008da2:	460c      	mov	r4, r1
 8008da4:	4616      	mov	r6, r2
 8008da6:	d505      	bpl.n	8008db4 <__swrite+0x1e>
 8008da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dac:	2302      	movs	r3, #2
 8008dae:	2200      	movs	r2, #0
 8008db0:	f000 f9f8 	bl	80091a4 <_lseek_r>
 8008db4:	89a3      	ldrh	r3, [r4, #12]
 8008db6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dbe:	81a3      	strh	r3, [r4, #12]
 8008dc0:	4632      	mov	r2, r6
 8008dc2:	463b      	mov	r3, r7
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dca:	f000 b869 	b.w	8008ea0 <_write_r>

08008dce <__sseek>:
 8008dce:	b510      	push	{r4, lr}
 8008dd0:	460c      	mov	r4, r1
 8008dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd6:	f000 f9e5 	bl	80091a4 <_lseek_r>
 8008dda:	1c43      	adds	r3, r0, #1
 8008ddc:	89a3      	ldrh	r3, [r4, #12]
 8008dde:	bf15      	itete	ne
 8008de0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008de2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008de6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008dea:	81a3      	strheq	r3, [r4, #12]
 8008dec:	bf18      	it	ne
 8008dee:	81a3      	strhne	r3, [r4, #12]
 8008df0:	bd10      	pop	{r4, pc}

08008df2 <__sclose>:
 8008df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008df6:	f000 b8f1 	b.w	8008fdc <_close_r>
	...

08008dfc <__swbuf_r>:
 8008dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dfe:	460e      	mov	r6, r1
 8008e00:	4614      	mov	r4, r2
 8008e02:	4605      	mov	r5, r0
 8008e04:	b118      	cbz	r0, 8008e0e <__swbuf_r+0x12>
 8008e06:	6983      	ldr	r3, [r0, #24]
 8008e08:	b90b      	cbnz	r3, 8008e0e <__swbuf_r+0x12>
 8008e0a:	f7ff f913 	bl	8008034 <__sinit>
 8008e0e:	4b21      	ldr	r3, [pc, #132]	; (8008e94 <__swbuf_r+0x98>)
 8008e10:	429c      	cmp	r4, r3
 8008e12:	d12b      	bne.n	8008e6c <__swbuf_r+0x70>
 8008e14:	686c      	ldr	r4, [r5, #4]
 8008e16:	69a3      	ldr	r3, [r4, #24]
 8008e18:	60a3      	str	r3, [r4, #8]
 8008e1a:	89a3      	ldrh	r3, [r4, #12]
 8008e1c:	071a      	lsls	r2, r3, #28
 8008e1e:	d52f      	bpl.n	8008e80 <__swbuf_r+0x84>
 8008e20:	6923      	ldr	r3, [r4, #16]
 8008e22:	b36b      	cbz	r3, 8008e80 <__swbuf_r+0x84>
 8008e24:	6923      	ldr	r3, [r4, #16]
 8008e26:	6820      	ldr	r0, [r4, #0]
 8008e28:	1ac0      	subs	r0, r0, r3
 8008e2a:	6963      	ldr	r3, [r4, #20]
 8008e2c:	b2f6      	uxtb	r6, r6
 8008e2e:	4283      	cmp	r3, r0
 8008e30:	4637      	mov	r7, r6
 8008e32:	dc04      	bgt.n	8008e3e <__swbuf_r+0x42>
 8008e34:	4621      	mov	r1, r4
 8008e36:	4628      	mov	r0, r5
 8008e38:	f000 f966 	bl	8009108 <_fflush_r>
 8008e3c:	bb30      	cbnz	r0, 8008e8c <__swbuf_r+0x90>
 8008e3e:	68a3      	ldr	r3, [r4, #8]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	60a3      	str	r3, [r4, #8]
 8008e44:	6823      	ldr	r3, [r4, #0]
 8008e46:	1c5a      	adds	r2, r3, #1
 8008e48:	6022      	str	r2, [r4, #0]
 8008e4a:	701e      	strb	r6, [r3, #0]
 8008e4c:	6963      	ldr	r3, [r4, #20]
 8008e4e:	3001      	adds	r0, #1
 8008e50:	4283      	cmp	r3, r0
 8008e52:	d004      	beq.n	8008e5e <__swbuf_r+0x62>
 8008e54:	89a3      	ldrh	r3, [r4, #12]
 8008e56:	07db      	lsls	r3, r3, #31
 8008e58:	d506      	bpl.n	8008e68 <__swbuf_r+0x6c>
 8008e5a:	2e0a      	cmp	r6, #10
 8008e5c:	d104      	bne.n	8008e68 <__swbuf_r+0x6c>
 8008e5e:	4621      	mov	r1, r4
 8008e60:	4628      	mov	r0, r5
 8008e62:	f000 f951 	bl	8009108 <_fflush_r>
 8008e66:	b988      	cbnz	r0, 8008e8c <__swbuf_r+0x90>
 8008e68:	4638      	mov	r0, r7
 8008e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e6c:	4b0a      	ldr	r3, [pc, #40]	; (8008e98 <__swbuf_r+0x9c>)
 8008e6e:	429c      	cmp	r4, r3
 8008e70:	d101      	bne.n	8008e76 <__swbuf_r+0x7a>
 8008e72:	68ac      	ldr	r4, [r5, #8]
 8008e74:	e7cf      	b.n	8008e16 <__swbuf_r+0x1a>
 8008e76:	4b09      	ldr	r3, [pc, #36]	; (8008e9c <__swbuf_r+0xa0>)
 8008e78:	429c      	cmp	r4, r3
 8008e7a:	bf08      	it	eq
 8008e7c:	68ec      	ldreq	r4, [r5, #12]
 8008e7e:	e7ca      	b.n	8008e16 <__swbuf_r+0x1a>
 8008e80:	4621      	mov	r1, r4
 8008e82:	4628      	mov	r0, r5
 8008e84:	f000 f81e 	bl	8008ec4 <__swsetup_r>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d0cb      	beq.n	8008e24 <__swbuf_r+0x28>
 8008e8c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008e90:	e7ea      	b.n	8008e68 <__swbuf_r+0x6c>
 8008e92:	bf00      	nop
 8008e94:	0800b278 	.word	0x0800b278
 8008e98:	0800b298 	.word	0x0800b298
 8008e9c:	0800b258 	.word	0x0800b258

08008ea0 <_write_r>:
 8008ea0:	b538      	push	{r3, r4, r5, lr}
 8008ea2:	4d07      	ldr	r5, [pc, #28]	; (8008ec0 <_write_r+0x20>)
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	4608      	mov	r0, r1
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	2200      	movs	r2, #0
 8008eac:	602a      	str	r2, [r5, #0]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	f7fa fae3 	bl	800347a <_write>
 8008eb4:	1c43      	adds	r3, r0, #1
 8008eb6:	d102      	bne.n	8008ebe <_write_r+0x1e>
 8008eb8:	682b      	ldr	r3, [r5, #0]
 8008eba:	b103      	cbz	r3, 8008ebe <_write_r+0x1e>
 8008ebc:	6023      	str	r3, [r4, #0]
 8008ebe:	bd38      	pop	{r3, r4, r5, pc}
 8008ec0:	20000370 	.word	0x20000370

08008ec4 <__swsetup_r>:
 8008ec4:	4b32      	ldr	r3, [pc, #200]	; (8008f90 <__swsetup_r+0xcc>)
 8008ec6:	b570      	push	{r4, r5, r6, lr}
 8008ec8:	681d      	ldr	r5, [r3, #0]
 8008eca:	4606      	mov	r6, r0
 8008ecc:	460c      	mov	r4, r1
 8008ece:	b125      	cbz	r5, 8008eda <__swsetup_r+0x16>
 8008ed0:	69ab      	ldr	r3, [r5, #24]
 8008ed2:	b913      	cbnz	r3, 8008eda <__swsetup_r+0x16>
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	f7ff f8ad 	bl	8008034 <__sinit>
 8008eda:	4b2e      	ldr	r3, [pc, #184]	; (8008f94 <__swsetup_r+0xd0>)
 8008edc:	429c      	cmp	r4, r3
 8008ede:	d10f      	bne.n	8008f00 <__swsetup_r+0x3c>
 8008ee0:	686c      	ldr	r4, [r5, #4]
 8008ee2:	89a3      	ldrh	r3, [r4, #12]
 8008ee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ee8:	0719      	lsls	r1, r3, #28
 8008eea:	d42c      	bmi.n	8008f46 <__swsetup_r+0x82>
 8008eec:	06dd      	lsls	r5, r3, #27
 8008eee:	d411      	bmi.n	8008f14 <__swsetup_r+0x50>
 8008ef0:	2309      	movs	r3, #9
 8008ef2:	6033      	str	r3, [r6, #0]
 8008ef4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ef8:	81a3      	strh	r3, [r4, #12]
 8008efa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008efe:	e03e      	b.n	8008f7e <__swsetup_r+0xba>
 8008f00:	4b25      	ldr	r3, [pc, #148]	; (8008f98 <__swsetup_r+0xd4>)
 8008f02:	429c      	cmp	r4, r3
 8008f04:	d101      	bne.n	8008f0a <__swsetup_r+0x46>
 8008f06:	68ac      	ldr	r4, [r5, #8]
 8008f08:	e7eb      	b.n	8008ee2 <__swsetup_r+0x1e>
 8008f0a:	4b24      	ldr	r3, [pc, #144]	; (8008f9c <__swsetup_r+0xd8>)
 8008f0c:	429c      	cmp	r4, r3
 8008f0e:	bf08      	it	eq
 8008f10:	68ec      	ldreq	r4, [r5, #12]
 8008f12:	e7e6      	b.n	8008ee2 <__swsetup_r+0x1e>
 8008f14:	0758      	lsls	r0, r3, #29
 8008f16:	d512      	bpl.n	8008f3e <__swsetup_r+0x7a>
 8008f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f1a:	b141      	cbz	r1, 8008f2e <__swsetup_r+0x6a>
 8008f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f20:	4299      	cmp	r1, r3
 8008f22:	d002      	beq.n	8008f2a <__swsetup_r+0x66>
 8008f24:	4630      	mov	r0, r6
 8008f26:	f7ff fcdb 	bl	80088e0 <_free_r>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	6363      	str	r3, [r4, #52]	; 0x34
 8008f2e:	89a3      	ldrh	r3, [r4, #12]
 8008f30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f34:	81a3      	strh	r3, [r4, #12]
 8008f36:	2300      	movs	r3, #0
 8008f38:	6063      	str	r3, [r4, #4]
 8008f3a:	6923      	ldr	r3, [r4, #16]
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	f043 0308 	orr.w	r3, r3, #8
 8008f44:	81a3      	strh	r3, [r4, #12]
 8008f46:	6923      	ldr	r3, [r4, #16]
 8008f48:	b94b      	cbnz	r3, 8008f5e <__swsetup_r+0x9a>
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f54:	d003      	beq.n	8008f5e <__swsetup_r+0x9a>
 8008f56:	4621      	mov	r1, r4
 8008f58:	4630      	mov	r0, r6
 8008f5a:	f000 f95b 	bl	8009214 <__smakebuf_r>
 8008f5e:	89a0      	ldrh	r0, [r4, #12]
 8008f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f64:	f010 0301 	ands.w	r3, r0, #1
 8008f68:	d00a      	beq.n	8008f80 <__swsetup_r+0xbc>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60a3      	str	r3, [r4, #8]
 8008f6e:	6963      	ldr	r3, [r4, #20]
 8008f70:	425b      	negs	r3, r3
 8008f72:	61a3      	str	r3, [r4, #24]
 8008f74:	6923      	ldr	r3, [r4, #16]
 8008f76:	b943      	cbnz	r3, 8008f8a <__swsetup_r+0xc6>
 8008f78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f7c:	d1ba      	bne.n	8008ef4 <__swsetup_r+0x30>
 8008f7e:	bd70      	pop	{r4, r5, r6, pc}
 8008f80:	0781      	lsls	r1, r0, #30
 8008f82:	bf58      	it	pl
 8008f84:	6963      	ldrpl	r3, [r4, #20]
 8008f86:	60a3      	str	r3, [r4, #8]
 8008f88:	e7f4      	b.n	8008f74 <__swsetup_r+0xb0>
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	e7f7      	b.n	8008f7e <__swsetup_r+0xba>
 8008f8e:	bf00      	nop
 8008f90:	20000018 	.word	0x20000018
 8008f94:	0800b278 	.word	0x0800b278
 8008f98:	0800b298 	.word	0x0800b298
 8008f9c:	0800b258 	.word	0x0800b258

08008fa0 <__assert_func>:
 8008fa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008fa2:	4614      	mov	r4, r2
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	4b09      	ldr	r3, [pc, #36]	; (8008fcc <__assert_func+0x2c>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4605      	mov	r5, r0
 8008fac:	68d8      	ldr	r0, [r3, #12]
 8008fae:	b14c      	cbz	r4, 8008fc4 <__assert_func+0x24>
 8008fb0:	4b07      	ldr	r3, [pc, #28]	; (8008fd0 <__assert_func+0x30>)
 8008fb2:	9100      	str	r1, [sp, #0]
 8008fb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008fb8:	4906      	ldr	r1, [pc, #24]	; (8008fd4 <__assert_func+0x34>)
 8008fba:	462b      	mov	r3, r5
 8008fbc:	f000 f8e0 	bl	8009180 <fiprintf>
 8008fc0:	f000 f9a5 	bl	800930e <abort>
 8008fc4:	4b04      	ldr	r3, [pc, #16]	; (8008fd8 <__assert_func+0x38>)
 8008fc6:	461c      	mov	r4, r3
 8008fc8:	e7f3      	b.n	8008fb2 <__assert_func+0x12>
 8008fca:	bf00      	nop
 8008fcc:	20000018 	.word	0x20000018
 8008fd0:	0800b425 	.word	0x0800b425
 8008fd4:	0800b432 	.word	0x0800b432
 8008fd8:	0800b460 	.word	0x0800b460

08008fdc <_close_r>:
 8008fdc:	b538      	push	{r3, r4, r5, lr}
 8008fde:	4d06      	ldr	r5, [pc, #24]	; (8008ff8 <_close_r+0x1c>)
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	4608      	mov	r0, r1
 8008fe6:	602b      	str	r3, [r5, #0]
 8008fe8:	f7fa fa63 	bl	80034b2 <_close>
 8008fec:	1c43      	adds	r3, r0, #1
 8008fee:	d102      	bne.n	8008ff6 <_close_r+0x1a>
 8008ff0:	682b      	ldr	r3, [r5, #0]
 8008ff2:	b103      	cbz	r3, 8008ff6 <_close_r+0x1a>
 8008ff4:	6023      	str	r3, [r4, #0]
 8008ff6:	bd38      	pop	{r3, r4, r5, pc}
 8008ff8:	20000370 	.word	0x20000370

08008ffc <__sflush_r>:
 8008ffc:	898a      	ldrh	r2, [r1, #12]
 8008ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009002:	4605      	mov	r5, r0
 8009004:	0710      	lsls	r0, r2, #28
 8009006:	460c      	mov	r4, r1
 8009008:	d458      	bmi.n	80090bc <__sflush_r+0xc0>
 800900a:	684b      	ldr	r3, [r1, #4]
 800900c:	2b00      	cmp	r3, #0
 800900e:	dc05      	bgt.n	800901c <__sflush_r+0x20>
 8009010:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009012:	2b00      	cmp	r3, #0
 8009014:	dc02      	bgt.n	800901c <__sflush_r+0x20>
 8009016:	2000      	movs	r0, #0
 8009018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800901c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800901e:	2e00      	cmp	r6, #0
 8009020:	d0f9      	beq.n	8009016 <__sflush_r+0x1a>
 8009022:	2300      	movs	r3, #0
 8009024:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009028:	682f      	ldr	r7, [r5, #0]
 800902a:	602b      	str	r3, [r5, #0]
 800902c:	d032      	beq.n	8009094 <__sflush_r+0x98>
 800902e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	075a      	lsls	r2, r3, #29
 8009034:	d505      	bpl.n	8009042 <__sflush_r+0x46>
 8009036:	6863      	ldr	r3, [r4, #4]
 8009038:	1ac0      	subs	r0, r0, r3
 800903a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800903c:	b10b      	cbz	r3, 8009042 <__sflush_r+0x46>
 800903e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009040:	1ac0      	subs	r0, r0, r3
 8009042:	2300      	movs	r3, #0
 8009044:	4602      	mov	r2, r0
 8009046:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009048:	6a21      	ldr	r1, [r4, #32]
 800904a:	4628      	mov	r0, r5
 800904c:	47b0      	blx	r6
 800904e:	1c43      	adds	r3, r0, #1
 8009050:	89a3      	ldrh	r3, [r4, #12]
 8009052:	d106      	bne.n	8009062 <__sflush_r+0x66>
 8009054:	6829      	ldr	r1, [r5, #0]
 8009056:	291d      	cmp	r1, #29
 8009058:	d82c      	bhi.n	80090b4 <__sflush_r+0xb8>
 800905a:	4a2a      	ldr	r2, [pc, #168]	; (8009104 <__sflush_r+0x108>)
 800905c:	40ca      	lsrs	r2, r1
 800905e:	07d6      	lsls	r6, r2, #31
 8009060:	d528      	bpl.n	80090b4 <__sflush_r+0xb8>
 8009062:	2200      	movs	r2, #0
 8009064:	6062      	str	r2, [r4, #4]
 8009066:	04d9      	lsls	r1, r3, #19
 8009068:	6922      	ldr	r2, [r4, #16]
 800906a:	6022      	str	r2, [r4, #0]
 800906c:	d504      	bpl.n	8009078 <__sflush_r+0x7c>
 800906e:	1c42      	adds	r2, r0, #1
 8009070:	d101      	bne.n	8009076 <__sflush_r+0x7a>
 8009072:	682b      	ldr	r3, [r5, #0]
 8009074:	b903      	cbnz	r3, 8009078 <__sflush_r+0x7c>
 8009076:	6560      	str	r0, [r4, #84]	; 0x54
 8009078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800907a:	602f      	str	r7, [r5, #0]
 800907c:	2900      	cmp	r1, #0
 800907e:	d0ca      	beq.n	8009016 <__sflush_r+0x1a>
 8009080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009084:	4299      	cmp	r1, r3
 8009086:	d002      	beq.n	800908e <__sflush_r+0x92>
 8009088:	4628      	mov	r0, r5
 800908a:	f7ff fc29 	bl	80088e0 <_free_r>
 800908e:	2000      	movs	r0, #0
 8009090:	6360      	str	r0, [r4, #52]	; 0x34
 8009092:	e7c1      	b.n	8009018 <__sflush_r+0x1c>
 8009094:	6a21      	ldr	r1, [r4, #32]
 8009096:	2301      	movs	r3, #1
 8009098:	4628      	mov	r0, r5
 800909a:	47b0      	blx	r6
 800909c:	1c41      	adds	r1, r0, #1
 800909e:	d1c7      	bne.n	8009030 <__sflush_r+0x34>
 80090a0:	682b      	ldr	r3, [r5, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d0c4      	beq.n	8009030 <__sflush_r+0x34>
 80090a6:	2b1d      	cmp	r3, #29
 80090a8:	d001      	beq.n	80090ae <__sflush_r+0xb2>
 80090aa:	2b16      	cmp	r3, #22
 80090ac:	d101      	bne.n	80090b2 <__sflush_r+0xb6>
 80090ae:	602f      	str	r7, [r5, #0]
 80090b0:	e7b1      	b.n	8009016 <__sflush_r+0x1a>
 80090b2:	89a3      	ldrh	r3, [r4, #12]
 80090b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090b8:	81a3      	strh	r3, [r4, #12]
 80090ba:	e7ad      	b.n	8009018 <__sflush_r+0x1c>
 80090bc:	690f      	ldr	r7, [r1, #16]
 80090be:	2f00      	cmp	r7, #0
 80090c0:	d0a9      	beq.n	8009016 <__sflush_r+0x1a>
 80090c2:	0793      	lsls	r3, r2, #30
 80090c4:	680e      	ldr	r6, [r1, #0]
 80090c6:	bf08      	it	eq
 80090c8:	694b      	ldreq	r3, [r1, #20]
 80090ca:	600f      	str	r7, [r1, #0]
 80090cc:	bf18      	it	ne
 80090ce:	2300      	movne	r3, #0
 80090d0:	eba6 0807 	sub.w	r8, r6, r7
 80090d4:	608b      	str	r3, [r1, #8]
 80090d6:	f1b8 0f00 	cmp.w	r8, #0
 80090da:	dd9c      	ble.n	8009016 <__sflush_r+0x1a>
 80090dc:	6a21      	ldr	r1, [r4, #32]
 80090de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090e0:	4643      	mov	r3, r8
 80090e2:	463a      	mov	r2, r7
 80090e4:	4628      	mov	r0, r5
 80090e6:	47b0      	blx	r6
 80090e8:	2800      	cmp	r0, #0
 80090ea:	dc06      	bgt.n	80090fa <__sflush_r+0xfe>
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090f2:	81a3      	strh	r3, [r4, #12]
 80090f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090f8:	e78e      	b.n	8009018 <__sflush_r+0x1c>
 80090fa:	4407      	add	r7, r0
 80090fc:	eba8 0800 	sub.w	r8, r8, r0
 8009100:	e7e9      	b.n	80090d6 <__sflush_r+0xda>
 8009102:	bf00      	nop
 8009104:	20400001 	.word	0x20400001

08009108 <_fflush_r>:
 8009108:	b538      	push	{r3, r4, r5, lr}
 800910a:	690b      	ldr	r3, [r1, #16]
 800910c:	4605      	mov	r5, r0
 800910e:	460c      	mov	r4, r1
 8009110:	b913      	cbnz	r3, 8009118 <_fflush_r+0x10>
 8009112:	2500      	movs	r5, #0
 8009114:	4628      	mov	r0, r5
 8009116:	bd38      	pop	{r3, r4, r5, pc}
 8009118:	b118      	cbz	r0, 8009122 <_fflush_r+0x1a>
 800911a:	6983      	ldr	r3, [r0, #24]
 800911c:	b90b      	cbnz	r3, 8009122 <_fflush_r+0x1a>
 800911e:	f7fe ff89 	bl	8008034 <__sinit>
 8009122:	4b14      	ldr	r3, [pc, #80]	; (8009174 <_fflush_r+0x6c>)
 8009124:	429c      	cmp	r4, r3
 8009126:	d11b      	bne.n	8009160 <_fflush_r+0x58>
 8009128:	686c      	ldr	r4, [r5, #4]
 800912a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d0ef      	beq.n	8009112 <_fflush_r+0xa>
 8009132:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009134:	07d0      	lsls	r0, r2, #31
 8009136:	d404      	bmi.n	8009142 <_fflush_r+0x3a>
 8009138:	0599      	lsls	r1, r3, #22
 800913a:	d402      	bmi.n	8009142 <_fflush_r+0x3a>
 800913c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800913e:	f7ff f81c 	bl	800817a <__retarget_lock_acquire_recursive>
 8009142:	4628      	mov	r0, r5
 8009144:	4621      	mov	r1, r4
 8009146:	f7ff ff59 	bl	8008ffc <__sflush_r>
 800914a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800914c:	07da      	lsls	r2, r3, #31
 800914e:	4605      	mov	r5, r0
 8009150:	d4e0      	bmi.n	8009114 <_fflush_r+0xc>
 8009152:	89a3      	ldrh	r3, [r4, #12]
 8009154:	059b      	lsls	r3, r3, #22
 8009156:	d4dd      	bmi.n	8009114 <_fflush_r+0xc>
 8009158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800915a:	f7ff f80f 	bl	800817c <__retarget_lock_release_recursive>
 800915e:	e7d9      	b.n	8009114 <_fflush_r+0xc>
 8009160:	4b05      	ldr	r3, [pc, #20]	; (8009178 <_fflush_r+0x70>)
 8009162:	429c      	cmp	r4, r3
 8009164:	d101      	bne.n	800916a <_fflush_r+0x62>
 8009166:	68ac      	ldr	r4, [r5, #8]
 8009168:	e7df      	b.n	800912a <_fflush_r+0x22>
 800916a:	4b04      	ldr	r3, [pc, #16]	; (800917c <_fflush_r+0x74>)
 800916c:	429c      	cmp	r4, r3
 800916e:	bf08      	it	eq
 8009170:	68ec      	ldreq	r4, [r5, #12]
 8009172:	e7da      	b.n	800912a <_fflush_r+0x22>
 8009174:	0800b278 	.word	0x0800b278
 8009178:	0800b298 	.word	0x0800b298
 800917c:	0800b258 	.word	0x0800b258

08009180 <fiprintf>:
 8009180:	b40e      	push	{r1, r2, r3}
 8009182:	b503      	push	{r0, r1, lr}
 8009184:	4601      	mov	r1, r0
 8009186:	ab03      	add	r3, sp, #12
 8009188:	4805      	ldr	r0, [pc, #20]	; (80091a0 <fiprintf+0x20>)
 800918a:	f853 2b04 	ldr.w	r2, [r3], #4
 800918e:	6800      	ldr	r0, [r0, #0]
 8009190:	9301      	str	r3, [sp, #4]
 8009192:	f7ff fcaf 	bl	8008af4 <_vfiprintf_r>
 8009196:	b002      	add	sp, #8
 8009198:	f85d eb04 	ldr.w	lr, [sp], #4
 800919c:	b003      	add	sp, #12
 800919e:	4770      	bx	lr
 80091a0:	20000018 	.word	0x20000018

080091a4 <_lseek_r>:
 80091a4:	b538      	push	{r3, r4, r5, lr}
 80091a6:	4d07      	ldr	r5, [pc, #28]	; (80091c4 <_lseek_r+0x20>)
 80091a8:	4604      	mov	r4, r0
 80091aa:	4608      	mov	r0, r1
 80091ac:	4611      	mov	r1, r2
 80091ae:	2200      	movs	r2, #0
 80091b0:	602a      	str	r2, [r5, #0]
 80091b2:	461a      	mov	r2, r3
 80091b4:	f7fa f9a4 	bl	8003500 <_lseek>
 80091b8:	1c43      	adds	r3, r0, #1
 80091ba:	d102      	bne.n	80091c2 <_lseek_r+0x1e>
 80091bc:	682b      	ldr	r3, [r5, #0]
 80091be:	b103      	cbz	r3, 80091c2 <_lseek_r+0x1e>
 80091c0:	6023      	str	r3, [r4, #0]
 80091c2:	bd38      	pop	{r3, r4, r5, pc}
 80091c4:	20000370 	.word	0x20000370

080091c8 <__swhatbuf_r>:
 80091c8:	b570      	push	{r4, r5, r6, lr}
 80091ca:	460e      	mov	r6, r1
 80091cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091d0:	2900      	cmp	r1, #0
 80091d2:	b096      	sub	sp, #88	; 0x58
 80091d4:	4614      	mov	r4, r2
 80091d6:	461d      	mov	r5, r3
 80091d8:	da08      	bge.n	80091ec <__swhatbuf_r+0x24>
 80091da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80091de:	2200      	movs	r2, #0
 80091e0:	602a      	str	r2, [r5, #0]
 80091e2:	061a      	lsls	r2, r3, #24
 80091e4:	d410      	bmi.n	8009208 <__swhatbuf_r+0x40>
 80091e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091ea:	e00e      	b.n	800920a <__swhatbuf_r+0x42>
 80091ec:	466a      	mov	r2, sp
 80091ee:	f000 f895 	bl	800931c <_fstat_r>
 80091f2:	2800      	cmp	r0, #0
 80091f4:	dbf1      	blt.n	80091da <__swhatbuf_r+0x12>
 80091f6:	9a01      	ldr	r2, [sp, #4]
 80091f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80091fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009200:	425a      	negs	r2, r3
 8009202:	415a      	adcs	r2, r3
 8009204:	602a      	str	r2, [r5, #0]
 8009206:	e7ee      	b.n	80091e6 <__swhatbuf_r+0x1e>
 8009208:	2340      	movs	r3, #64	; 0x40
 800920a:	2000      	movs	r0, #0
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	b016      	add	sp, #88	; 0x58
 8009210:	bd70      	pop	{r4, r5, r6, pc}
	...

08009214 <__smakebuf_r>:
 8009214:	898b      	ldrh	r3, [r1, #12]
 8009216:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009218:	079d      	lsls	r5, r3, #30
 800921a:	4606      	mov	r6, r0
 800921c:	460c      	mov	r4, r1
 800921e:	d507      	bpl.n	8009230 <__smakebuf_r+0x1c>
 8009220:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	6123      	str	r3, [r4, #16]
 8009228:	2301      	movs	r3, #1
 800922a:	6163      	str	r3, [r4, #20]
 800922c:	b002      	add	sp, #8
 800922e:	bd70      	pop	{r4, r5, r6, pc}
 8009230:	ab01      	add	r3, sp, #4
 8009232:	466a      	mov	r2, sp
 8009234:	f7ff ffc8 	bl	80091c8 <__swhatbuf_r>
 8009238:	9900      	ldr	r1, [sp, #0]
 800923a:	4605      	mov	r5, r0
 800923c:	4630      	mov	r0, r6
 800923e:	f7ff fbbb 	bl	80089b8 <_malloc_r>
 8009242:	b948      	cbnz	r0, 8009258 <__smakebuf_r+0x44>
 8009244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009248:	059a      	lsls	r2, r3, #22
 800924a:	d4ef      	bmi.n	800922c <__smakebuf_r+0x18>
 800924c:	f023 0303 	bic.w	r3, r3, #3
 8009250:	f043 0302 	orr.w	r3, r3, #2
 8009254:	81a3      	strh	r3, [r4, #12]
 8009256:	e7e3      	b.n	8009220 <__smakebuf_r+0xc>
 8009258:	4b0d      	ldr	r3, [pc, #52]	; (8009290 <__smakebuf_r+0x7c>)
 800925a:	62b3      	str	r3, [r6, #40]	; 0x28
 800925c:	89a3      	ldrh	r3, [r4, #12]
 800925e:	6020      	str	r0, [r4, #0]
 8009260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009264:	81a3      	strh	r3, [r4, #12]
 8009266:	9b00      	ldr	r3, [sp, #0]
 8009268:	6163      	str	r3, [r4, #20]
 800926a:	9b01      	ldr	r3, [sp, #4]
 800926c:	6120      	str	r0, [r4, #16]
 800926e:	b15b      	cbz	r3, 8009288 <__smakebuf_r+0x74>
 8009270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009274:	4630      	mov	r0, r6
 8009276:	f000 f863 	bl	8009340 <_isatty_r>
 800927a:	b128      	cbz	r0, 8009288 <__smakebuf_r+0x74>
 800927c:	89a3      	ldrh	r3, [r4, #12]
 800927e:	f023 0303 	bic.w	r3, r3, #3
 8009282:	f043 0301 	orr.w	r3, r3, #1
 8009286:	81a3      	strh	r3, [r4, #12]
 8009288:	89a0      	ldrh	r0, [r4, #12]
 800928a:	4305      	orrs	r5, r0
 800928c:	81a5      	strh	r5, [r4, #12]
 800928e:	e7cd      	b.n	800922c <__smakebuf_r+0x18>
 8009290:	08007fcd 	.word	0x08007fcd

08009294 <__ascii_mbtowc>:
 8009294:	b082      	sub	sp, #8
 8009296:	b901      	cbnz	r1, 800929a <__ascii_mbtowc+0x6>
 8009298:	a901      	add	r1, sp, #4
 800929a:	b142      	cbz	r2, 80092ae <__ascii_mbtowc+0x1a>
 800929c:	b14b      	cbz	r3, 80092b2 <__ascii_mbtowc+0x1e>
 800929e:	7813      	ldrb	r3, [r2, #0]
 80092a0:	600b      	str	r3, [r1, #0]
 80092a2:	7812      	ldrb	r2, [r2, #0]
 80092a4:	1e10      	subs	r0, r2, #0
 80092a6:	bf18      	it	ne
 80092a8:	2001      	movne	r0, #1
 80092aa:	b002      	add	sp, #8
 80092ac:	4770      	bx	lr
 80092ae:	4610      	mov	r0, r2
 80092b0:	e7fb      	b.n	80092aa <__ascii_mbtowc+0x16>
 80092b2:	f06f 0001 	mvn.w	r0, #1
 80092b6:	e7f8      	b.n	80092aa <__ascii_mbtowc+0x16>

080092b8 <__malloc_lock>:
 80092b8:	4801      	ldr	r0, [pc, #4]	; (80092c0 <__malloc_lock+0x8>)
 80092ba:	f7fe bf5e 	b.w	800817a <__retarget_lock_acquire_recursive>
 80092be:	bf00      	nop
 80092c0:	20000364 	.word	0x20000364

080092c4 <__malloc_unlock>:
 80092c4:	4801      	ldr	r0, [pc, #4]	; (80092cc <__malloc_unlock+0x8>)
 80092c6:	f7fe bf59 	b.w	800817c <__retarget_lock_release_recursive>
 80092ca:	bf00      	nop
 80092cc:	20000364 	.word	0x20000364

080092d0 <_read_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	4d07      	ldr	r5, [pc, #28]	; (80092f0 <_read_r+0x20>)
 80092d4:	4604      	mov	r4, r0
 80092d6:	4608      	mov	r0, r1
 80092d8:	4611      	mov	r1, r2
 80092da:	2200      	movs	r2, #0
 80092dc:	602a      	str	r2, [r5, #0]
 80092de:	461a      	mov	r2, r3
 80092e0:	f7fa f8ae 	bl	8003440 <_read>
 80092e4:	1c43      	adds	r3, r0, #1
 80092e6:	d102      	bne.n	80092ee <_read_r+0x1e>
 80092e8:	682b      	ldr	r3, [r5, #0]
 80092ea:	b103      	cbz	r3, 80092ee <_read_r+0x1e>
 80092ec:	6023      	str	r3, [r4, #0]
 80092ee:	bd38      	pop	{r3, r4, r5, pc}
 80092f0:	20000370 	.word	0x20000370

080092f4 <__ascii_wctomb>:
 80092f4:	b149      	cbz	r1, 800930a <__ascii_wctomb+0x16>
 80092f6:	2aff      	cmp	r2, #255	; 0xff
 80092f8:	bf85      	ittet	hi
 80092fa:	238a      	movhi	r3, #138	; 0x8a
 80092fc:	6003      	strhi	r3, [r0, #0]
 80092fe:	700a      	strbls	r2, [r1, #0]
 8009300:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009304:	bf98      	it	ls
 8009306:	2001      	movls	r0, #1
 8009308:	4770      	bx	lr
 800930a:	4608      	mov	r0, r1
 800930c:	4770      	bx	lr

0800930e <abort>:
 800930e:	b508      	push	{r3, lr}
 8009310:	2006      	movs	r0, #6
 8009312:	f000 f84d 	bl	80093b0 <raise>
 8009316:	2001      	movs	r0, #1
 8009318:	f7fa f888 	bl	800342c <_exit>

0800931c <_fstat_r>:
 800931c:	b538      	push	{r3, r4, r5, lr}
 800931e:	4d07      	ldr	r5, [pc, #28]	; (800933c <_fstat_r+0x20>)
 8009320:	2300      	movs	r3, #0
 8009322:	4604      	mov	r4, r0
 8009324:	4608      	mov	r0, r1
 8009326:	4611      	mov	r1, r2
 8009328:	602b      	str	r3, [r5, #0]
 800932a:	f7fa f8ce 	bl	80034ca <_fstat>
 800932e:	1c43      	adds	r3, r0, #1
 8009330:	d102      	bne.n	8009338 <_fstat_r+0x1c>
 8009332:	682b      	ldr	r3, [r5, #0]
 8009334:	b103      	cbz	r3, 8009338 <_fstat_r+0x1c>
 8009336:	6023      	str	r3, [r4, #0]
 8009338:	bd38      	pop	{r3, r4, r5, pc}
 800933a:	bf00      	nop
 800933c:	20000370 	.word	0x20000370

08009340 <_isatty_r>:
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	4d06      	ldr	r5, [pc, #24]	; (800935c <_isatty_r+0x1c>)
 8009344:	2300      	movs	r3, #0
 8009346:	4604      	mov	r4, r0
 8009348:	4608      	mov	r0, r1
 800934a:	602b      	str	r3, [r5, #0]
 800934c:	f7fa f8cd 	bl	80034ea <_isatty>
 8009350:	1c43      	adds	r3, r0, #1
 8009352:	d102      	bne.n	800935a <_isatty_r+0x1a>
 8009354:	682b      	ldr	r3, [r5, #0]
 8009356:	b103      	cbz	r3, 800935a <_isatty_r+0x1a>
 8009358:	6023      	str	r3, [r4, #0]
 800935a:	bd38      	pop	{r3, r4, r5, pc}
 800935c:	20000370 	.word	0x20000370

08009360 <_raise_r>:
 8009360:	291f      	cmp	r1, #31
 8009362:	b538      	push	{r3, r4, r5, lr}
 8009364:	4604      	mov	r4, r0
 8009366:	460d      	mov	r5, r1
 8009368:	d904      	bls.n	8009374 <_raise_r+0x14>
 800936a:	2316      	movs	r3, #22
 800936c:	6003      	str	r3, [r0, #0]
 800936e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009372:	bd38      	pop	{r3, r4, r5, pc}
 8009374:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009376:	b112      	cbz	r2, 800937e <_raise_r+0x1e>
 8009378:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800937c:	b94b      	cbnz	r3, 8009392 <_raise_r+0x32>
 800937e:	4620      	mov	r0, r4
 8009380:	f000 f830 	bl	80093e4 <_getpid_r>
 8009384:	462a      	mov	r2, r5
 8009386:	4601      	mov	r1, r0
 8009388:	4620      	mov	r0, r4
 800938a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800938e:	f000 b817 	b.w	80093c0 <_kill_r>
 8009392:	2b01      	cmp	r3, #1
 8009394:	d00a      	beq.n	80093ac <_raise_r+0x4c>
 8009396:	1c59      	adds	r1, r3, #1
 8009398:	d103      	bne.n	80093a2 <_raise_r+0x42>
 800939a:	2316      	movs	r3, #22
 800939c:	6003      	str	r3, [r0, #0]
 800939e:	2001      	movs	r0, #1
 80093a0:	e7e7      	b.n	8009372 <_raise_r+0x12>
 80093a2:	2400      	movs	r4, #0
 80093a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093a8:	4628      	mov	r0, r5
 80093aa:	4798      	blx	r3
 80093ac:	2000      	movs	r0, #0
 80093ae:	e7e0      	b.n	8009372 <_raise_r+0x12>

080093b0 <raise>:
 80093b0:	4b02      	ldr	r3, [pc, #8]	; (80093bc <raise+0xc>)
 80093b2:	4601      	mov	r1, r0
 80093b4:	6818      	ldr	r0, [r3, #0]
 80093b6:	f7ff bfd3 	b.w	8009360 <_raise_r>
 80093ba:	bf00      	nop
 80093bc:	20000018 	.word	0x20000018

080093c0 <_kill_r>:
 80093c0:	b538      	push	{r3, r4, r5, lr}
 80093c2:	4d07      	ldr	r5, [pc, #28]	; (80093e0 <_kill_r+0x20>)
 80093c4:	2300      	movs	r3, #0
 80093c6:	4604      	mov	r4, r0
 80093c8:	4608      	mov	r0, r1
 80093ca:	4611      	mov	r1, r2
 80093cc:	602b      	str	r3, [r5, #0]
 80093ce:	f7fa f81d 	bl	800340c <_kill>
 80093d2:	1c43      	adds	r3, r0, #1
 80093d4:	d102      	bne.n	80093dc <_kill_r+0x1c>
 80093d6:	682b      	ldr	r3, [r5, #0]
 80093d8:	b103      	cbz	r3, 80093dc <_kill_r+0x1c>
 80093da:	6023      	str	r3, [r4, #0]
 80093dc:	bd38      	pop	{r3, r4, r5, pc}
 80093de:	bf00      	nop
 80093e0:	20000370 	.word	0x20000370

080093e4 <_getpid_r>:
 80093e4:	f7fa b80a 	b.w	80033fc <_getpid>

080093e8 <cos>:
 80093e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093ea:	ec53 2b10 	vmov	r2, r3, d0
 80093ee:	4826      	ldr	r0, [pc, #152]	; (8009488 <cos+0xa0>)
 80093f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80093f4:	4281      	cmp	r1, r0
 80093f6:	dc06      	bgt.n	8009406 <cos+0x1e>
 80093f8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009480 <cos+0x98>
 80093fc:	b005      	add	sp, #20
 80093fe:	f85d eb04 	ldr.w	lr, [sp], #4
 8009402:	f000 bf09 	b.w	800a218 <__kernel_cos>
 8009406:	4821      	ldr	r0, [pc, #132]	; (800948c <cos+0xa4>)
 8009408:	4281      	cmp	r1, r0
 800940a:	dd09      	ble.n	8009420 <cos+0x38>
 800940c:	ee10 0a10 	vmov	r0, s0
 8009410:	4619      	mov	r1, r3
 8009412:	f7f6 ff59 	bl	80002c8 <__aeabi_dsub>
 8009416:	ec41 0b10 	vmov	d0, r0, r1
 800941a:	b005      	add	sp, #20
 800941c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009420:	4668      	mov	r0, sp
 8009422:	f000 fc39 	bl	8009c98 <__ieee754_rem_pio2>
 8009426:	f000 0003 	and.w	r0, r0, #3
 800942a:	2801      	cmp	r0, #1
 800942c:	d00b      	beq.n	8009446 <cos+0x5e>
 800942e:	2802      	cmp	r0, #2
 8009430:	d016      	beq.n	8009460 <cos+0x78>
 8009432:	b9e0      	cbnz	r0, 800946e <cos+0x86>
 8009434:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009438:	ed9d 0b00 	vldr	d0, [sp]
 800943c:	f000 feec 	bl	800a218 <__kernel_cos>
 8009440:	ec51 0b10 	vmov	r0, r1, d0
 8009444:	e7e7      	b.n	8009416 <cos+0x2e>
 8009446:	ed9d 1b02 	vldr	d1, [sp, #8]
 800944a:	ed9d 0b00 	vldr	d0, [sp]
 800944e:	f001 fafb 	bl	800aa48 <__kernel_sin>
 8009452:	ec53 2b10 	vmov	r2, r3, d0
 8009456:	ee10 0a10 	vmov	r0, s0
 800945a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800945e:	e7da      	b.n	8009416 <cos+0x2e>
 8009460:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009464:	ed9d 0b00 	vldr	d0, [sp]
 8009468:	f000 fed6 	bl	800a218 <__kernel_cos>
 800946c:	e7f1      	b.n	8009452 <cos+0x6a>
 800946e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009472:	ed9d 0b00 	vldr	d0, [sp]
 8009476:	2001      	movs	r0, #1
 8009478:	f001 fae6 	bl	800aa48 <__kernel_sin>
 800947c:	e7e0      	b.n	8009440 <cos+0x58>
 800947e:	bf00      	nop
	...
 8009488:	3fe921fb 	.word	0x3fe921fb
 800948c:	7fefffff 	.word	0x7fefffff

08009490 <round>:
 8009490:	ec51 0b10 	vmov	r0, r1, d0
 8009494:	b570      	push	{r4, r5, r6, lr}
 8009496:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800949a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800949e:	2c13      	cmp	r4, #19
 80094a0:	ee10 2a10 	vmov	r2, s0
 80094a4:	460b      	mov	r3, r1
 80094a6:	dc19      	bgt.n	80094dc <round+0x4c>
 80094a8:	2c00      	cmp	r4, #0
 80094aa:	da09      	bge.n	80094c0 <round+0x30>
 80094ac:	3401      	adds	r4, #1
 80094ae:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80094b2:	d103      	bne.n	80094bc <round+0x2c>
 80094b4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80094b8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80094bc:	2200      	movs	r2, #0
 80094be:	e028      	b.n	8009512 <round+0x82>
 80094c0:	4d15      	ldr	r5, [pc, #84]	; (8009518 <round+0x88>)
 80094c2:	4125      	asrs	r5, r4
 80094c4:	ea01 0605 	and.w	r6, r1, r5
 80094c8:	4332      	orrs	r2, r6
 80094ca:	d00e      	beq.n	80094ea <round+0x5a>
 80094cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80094d0:	fa42 f404 	asr.w	r4, r2, r4
 80094d4:	4423      	add	r3, r4
 80094d6:	ea23 0305 	bic.w	r3, r3, r5
 80094da:	e7ef      	b.n	80094bc <round+0x2c>
 80094dc:	2c33      	cmp	r4, #51	; 0x33
 80094de:	dd07      	ble.n	80094f0 <round+0x60>
 80094e0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80094e4:	d101      	bne.n	80094ea <round+0x5a>
 80094e6:	f7f6 fef1 	bl	80002cc <__adddf3>
 80094ea:	ec41 0b10 	vmov	d0, r0, r1
 80094ee:	bd70      	pop	{r4, r5, r6, pc}
 80094f0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80094f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80094f8:	40f5      	lsrs	r5, r6
 80094fa:	4228      	tst	r0, r5
 80094fc:	d0f5      	beq.n	80094ea <round+0x5a>
 80094fe:	2101      	movs	r1, #1
 8009500:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8009504:	fa01 f404 	lsl.w	r4, r1, r4
 8009508:	1912      	adds	r2, r2, r4
 800950a:	bf28      	it	cs
 800950c:	185b      	addcs	r3, r3, r1
 800950e:	ea22 0205 	bic.w	r2, r2, r5
 8009512:	4619      	mov	r1, r3
 8009514:	4610      	mov	r0, r2
 8009516:	e7e8      	b.n	80094ea <round+0x5a>
 8009518:	000fffff 	.word	0x000fffff
 800951c:	00000000 	.word	0x00000000

08009520 <sin>:
 8009520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009522:	ec53 2b10 	vmov	r2, r3, d0
 8009526:	4828      	ldr	r0, [pc, #160]	; (80095c8 <sin+0xa8>)
 8009528:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800952c:	4281      	cmp	r1, r0
 800952e:	dc07      	bgt.n	8009540 <sin+0x20>
 8009530:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80095c0 <sin+0xa0>
 8009534:	2000      	movs	r0, #0
 8009536:	b005      	add	sp, #20
 8009538:	f85d eb04 	ldr.w	lr, [sp], #4
 800953c:	f001 ba84 	b.w	800aa48 <__kernel_sin>
 8009540:	4822      	ldr	r0, [pc, #136]	; (80095cc <sin+0xac>)
 8009542:	4281      	cmp	r1, r0
 8009544:	dd09      	ble.n	800955a <sin+0x3a>
 8009546:	ee10 0a10 	vmov	r0, s0
 800954a:	4619      	mov	r1, r3
 800954c:	f7f6 febc 	bl	80002c8 <__aeabi_dsub>
 8009550:	ec41 0b10 	vmov	d0, r0, r1
 8009554:	b005      	add	sp, #20
 8009556:	f85d fb04 	ldr.w	pc, [sp], #4
 800955a:	4668      	mov	r0, sp
 800955c:	f000 fb9c 	bl	8009c98 <__ieee754_rem_pio2>
 8009560:	f000 0003 	and.w	r0, r0, #3
 8009564:	2801      	cmp	r0, #1
 8009566:	d00c      	beq.n	8009582 <sin+0x62>
 8009568:	2802      	cmp	r0, #2
 800956a:	d011      	beq.n	8009590 <sin+0x70>
 800956c:	b9f0      	cbnz	r0, 80095ac <sin+0x8c>
 800956e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009572:	ed9d 0b00 	vldr	d0, [sp]
 8009576:	2001      	movs	r0, #1
 8009578:	f001 fa66 	bl	800aa48 <__kernel_sin>
 800957c:	ec51 0b10 	vmov	r0, r1, d0
 8009580:	e7e6      	b.n	8009550 <sin+0x30>
 8009582:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009586:	ed9d 0b00 	vldr	d0, [sp]
 800958a:	f000 fe45 	bl	800a218 <__kernel_cos>
 800958e:	e7f5      	b.n	800957c <sin+0x5c>
 8009590:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009594:	ed9d 0b00 	vldr	d0, [sp]
 8009598:	2001      	movs	r0, #1
 800959a:	f001 fa55 	bl	800aa48 <__kernel_sin>
 800959e:	ec53 2b10 	vmov	r2, r3, d0
 80095a2:	ee10 0a10 	vmov	r0, s0
 80095a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80095aa:	e7d1      	b.n	8009550 <sin+0x30>
 80095ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80095b0:	ed9d 0b00 	vldr	d0, [sp]
 80095b4:	f000 fe30 	bl	800a218 <__kernel_cos>
 80095b8:	e7f1      	b.n	800959e <sin+0x7e>
 80095ba:	bf00      	nop
 80095bc:	f3af 8000 	nop.w
	...
 80095c8:	3fe921fb 	.word	0x3fe921fb
 80095cc:	7fefffff 	.word	0x7fefffff

080095d0 <acos>:
 80095d0:	b538      	push	{r3, r4, r5, lr}
 80095d2:	ed2d 8b02 	vpush	{d8}
 80095d6:	ec55 4b10 	vmov	r4, r5, d0
 80095da:	f000 f831 	bl	8009640 <__ieee754_acos>
 80095de:	4622      	mov	r2, r4
 80095e0:	462b      	mov	r3, r5
 80095e2:	4620      	mov	r0, r4
 80095e4:	4629      	mov	r1, r5
 80095e6:	eeb0 8a40 	vmov.f32	s16, s0
 80095ea:	eef0 8a60 	vmov.f32	s17, s1
 80095ee:	f7f7 fabd 	bl	8000b6c <__aeabi_dcmpun>
 80095f2:	b9a8      	cbnz	r0, 8009620 <acos+0x50>
 80095f4:	ec45 4b10 	vmov	d0, r4, r5
 80095f8:	f001 fc86 	bl	800af08 <fabs>
 80095fc:	4b0c      	ldr	r3, [pc, #48]	; (8009630 <acos+0x60>)
 80095fe:	ec51 0b10 	vmov	r0, r1, d0
 8009602:	2200      	movs	r2, #0
 8009604:	f7f7 faa8 	bl	8000b58 <__aeabi_dcmpgt>
 8009608:	b150      	cbz	r0, 8009620 <acos+0x50>
 800960a:	f7fd f98b 	bl	8006924 <__errno>
 800960e:	ecbd 8b02 	vpop	{d8}
 8009612:	2321      	movs	r3, #33	; 0x21
 8009614:	6003      	str	r3, [r0, #0]
 8009616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800961a:	4806      	ldr	r0, [pc, #24]	; (8009634 <acos+0x64>)
 800961c:	f001 bd00 	b.w	800b020 <nan>
 8009620:	eeb0 0a48 	vmov.f32	s0, s16
 8009624:	eef0 0a68 	vmov.f32	s1, s17
 8009628:	ecbd 8b02 	vpop	{d8}
 800962c:	bd38      	pop	{r3, r4, r5, pc}
 800962e:	bf00      	nop
 8009630:	3ff00000 	.word	0x3ff00000
 8009634:	0800b460 	.word	0x0800b460

08009638 <atan2>:
 8009638:	f000 ba62 	b.w	8009b00 <__ieee754_atan2>
 800963c:	0000      	movs	r0, r0
	...

08009640 <__ieee754_acos>:
 8009640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009644:	ec55 4b10 	vmov	r4, r5, d0
 8009648:	49b7      	ldr	r1, [pc, #732]	; (8009928 <__ieee754_acos+0x2e8>)
 800964a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800964e:	428b      	cmp	r3, r1
 8009650:	dd1b      	ble.n	800968a <__ieee754_acos+0x4a>
 8009652:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8009656:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800965a:	4323      	orrs	r3, r4
 800965c:	d106      	bne.n	800966c <__ieee754_acos+0x2c>
 800965e:	2d00      	cmp	r5, #0
 8009660:	f300 8211 	bgt.w	8009a86 <__ieee754_acos+0x446>
 8009664:	ed9f 0b96 	vldr	d0, [pc, #600]	; 80098c0 <__ieee754_acos+0x280>
 8009668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966c:	ee10 2a10 	vmov	r2, s0
 8009670:	462b      	mov	r3, r5
 8009672:	ee10 0a10 	vmov	r0, s0
 8009676:	4629      	mov	r1, r5
 8009678:	f7f6 fe26 	bl	80002c8 <__aeabi_dsub>
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	f7f7 f904 	bl	800088c <__aeabi_ddiv>
 8009684:	ec41 0b10 	vmov	d0, r0, r1
 8009688:	e7ee      	b.n	8009668 <__ieee754_acos+0x28>
 800968a:	49a8      	ldr	r1, [pc, #672]	; (800992c <__ieee754_acos+0x2ec>)
 800968c:	428b      	cmp	r3, r1
 800968e:	f300 8087 	bgt.w	80097a0 <__ieee754_acos+0x160>
 8009692:	4aa7      	ldr	r2, [pc, #668]	; (8009930 <__ieee754_acos+0x2f0>)
 8009694:	4293      	cmp	r3, r2
 8009696:	f340 81f9 	ble.w	8009a8c <__ieee754_acos+0x44c>
 800969a:	ee10 2a10 	vmov	r2, s0
 800969e:	ee10 0a10 	vmov	r0, s0
 80096a2:	462b      	mov	r3, r5
 80096a4:	4629      	mov	r1, r5
 80096a6:	f7f6 ffc7 	bl	8000638 <__aeabi_dmul>
 80096aa:	a387      	add	r3, pc, #540	; (adr r3, 80098c8 <__ieee754_acos+0x288>)
 80096ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b0:	4606      	mov	r6, r0
 80096b2:	460f      	mov	r7, r1
 80096b4:	f7f6 ffc0 	bl	8000638 <__aeabi_dmul>
 80096b8:	a385      	add	r3, pc, #532	; (adr r3, 80098d0 <__ieee754_acos+0x290>)
 80096ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096be:	f7f6 fe05 	bl	80002cc <__adddf3>
 80096c2:	4632      	mov	r2, r6
 80096c4:	463b      	mov	r3, r7
 80096c6:	f7f6 ffb7 	bl	8000638 <__aeabi_dmul>
 80096ca:	a383      	add	r3, pc, #524	; (adr r3, 80098d8 <__ieee754_acos+0x298>)
 80096cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d0:	f7f6 fdfa 	bl	80002c8 <__aeabi_dsub>
 80096d4:	4632      	mov	r2, r6
 80096d6:	463b      	mov	r3, r7
 80096d8:	f7f6 ffae 	bl	8000638 <__aeabi_dmul>
 80096dc:	a380      	add	r3, pc, #512	; (adr r3, 80098e0 <__ieee754_acos+0x2a0>)
 80096de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e2:	f7f6 fdf3 	bl	80002cc <__adddf3>
 80096e6:	4632      	mov	r2, r6
 80096e8:	463b      	mov	r3, r7
 80096ea:	f7f6 ffa5 	bl	8000638 <__aeabi_dmul>
 80096ee:	a37e      	add	r3, pc, #504	; (adr r3, 80098e8 <__ieee754_acos+0x2a8>)
 80096f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f4:	f7f6 fde8 	bl	80002c8 <__aeabi_dsub>
 80096f8:	4632      	mov	r2, r6
 80096fa:	463b      	mov	r3, r7
 80096fc:	f7f6 ff9c 	bl	8000638 <__aeabi_dmul>
 8009700:	a37b      	add	r3, pc, #492	; (adr r3, 80098f0 <__ieee754_acos+0x2b0>)
 8009702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009706:	f7f6 fde1 	bl	80002cc <__adddf3>
 800970a:	4632      	mov	r2, r6
 800970c:	463b      	mov	r3, r7
 800970e:	f7f6 ff93 	bl	8000638 <__aeabi_dmul>
 8009712:	a379      	add	r3, pc, #484	; (adr r3, 80098f8 <__ieee754_acos+0x2b8>)
 8009714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009718:	4680      	mov	r8, r0
 800971a:	4689      	mov	r9, r1
 800971c:	4630      	mov	r0, r6
 800971e:	4639      	mov	r1, r7
 8009720:	f7f6 ff8a 	bl	8000638 <__aeabi_dmul>
 8009724:	a376      	add	r3, pc, #472	; (adr r3, 8009900 <__ieee754_acos+0x2c0>)
 8009726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972a:	f7f6 fdcd 	bl	80002c8 <__aeabi_dsub>
 800972e:	4632      	mov	r2, r6
 8009730:	463b      	mov	r3, r7
 8009732:	f7f6 ff81 	bl	8000638 <__aeabi_dmul>
 8009736:	a374      	add	r3, pc, #464	; (adr r3, 8009908 <__ieee754_acos+0x2c8>)
 8009738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973c:	f7f6 fdc6 	bl	80002cc <__adddf3>
 8009740:	4632      	mov	r2, r6
 8009742:	463b      	mov	r3, r7
 8009744:	f7f6 ff78 	bl	8000638 <__aeabi_dmul>
 8009748:	a371      	add	r3, pc, #452	; (adr r3, 8009910 <__ieee754_acos+0x2d0>)
 800974a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974e:	f7f6 fdbb 	bl	80002c8 <__aeabi_dsub>
 8009752:	4632      	mov	r2, r6
 8009754:	463b      	mov	r3, r7
 8009756:	f7f6 ff6f 	bl	8000638 <__aeabi_dmul>
 800975a:	4b76      	ldr	r3, [pc, #472]	; (8009934 <__ieee754_acos+0x2f4>)
 800975c:	2200      	movs	r2, #0
 800975e:	f7f6 fdb5 	bl	80002cc <__adddf3>
 8009762:	4602      	mov	r2, r0
 8009764:	460b      	mov	r3, r1
 8009766:	4640      	mov	r0, r8
 8009768:	4649      	mov	r1, r9
 800976a:	f7f7 f88f 	bl	800088c <__aeabi_ddiv>
 800976e:	4622      	mov	r2, r4
 8009770:	462b      	mov	r3, r5
 8009772:	f7f6 ff61 	bl	8000638 <__aeabi_dmul>
 8009776:	4602      	mov	r2, r0
 8009778:	460b      	mov	r3, r1
 800977a:	a167      	add	r1, pc, #412	; (adr r1, 8009918 <__ieee754_acos+0x2d8>)
 800977c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009780:	f7f6 fda2 	bl	80002c8 <__aeabi_dsub>
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	4620      	mov	r0, r4
 800978a:	4629      	mov	r1, r5
 800978c:	f7f6 fd9c 	bl	80002c8 <__aeabi_dsub>
 8009790:	4602      	mov	r2, r0
 8009792:	460b      	mov	r3, r1
 8009794:	a162      	add	r1, pc, #392	; (adr r1, 8009920 <__ieee754_acos+0x2e0>)
 8009796:	e9d1 0100 	ldrd	r0, r1, [r1]
 800979a:	f7f6 fd95 	bl	80002c8 <__aeabi_dsub>
 800979e:	e771      	b.n	8009684 <__ieee754_acos+0x44>
 80097a0:	2d00      	cmp	r5, #0
 80097a2:	f280 80cb 	bge.w	800993c <__ieee754_acos+0x2fc>
 80097a6:	ee10 0a10 	vmov	r0, s0
 80097aa:	4b62      	ldr	r3, [pc, #392]	; (8009934 <__ieee754_acos+0x2f4>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	4629      	mov	r1, r5
 80097b0:	f7f6 fd8c 	bl	80002cc <__adddf3>
 80097b4:	4b60      	ldr	r3, [pc, #384]	; (8009938 <__ieee754_acos+0x2f8>)
 80097b6:	2200      	movs	r2, #0
 80097b8:	f7f6 ff3e 	bl	8000638 <__aeabi_dmul>
 80097bc:	a342      	add	r3, pc, #264	; (adr r3, 80098c8 <__ieee754_acos+0x288>)
 80097be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c2:	4604      	mov	r4, r0
 80097c4:	460d      	mov	r5, r1
 80097c6:	f7f6 ff37 	bl	8000638 <__aeabi_dmul>
 80097ca:	a341      	add	r3, pc, #260	; (adr r3, 80098d0 <__ieee754_acos+0x290>)
 80097cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d0:	f7f6 fd7c 	bl	80002cc <__adddf3>
 80097d4:	4622      	mov	r2, r4
 80097d6:	462b      	mov	r3, r5
 80097d8:	f7f6 ff2e 	bl	8000638 <__aeabi_dmul>
 80097dc:	a33e      	add	r3, pc, #248	; (adr r3, 80098d8 <__ieee754_acos+0x298>)
 80097de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e2:	f7f6 fd71 	bl	80002c8 <__aeabi_dsub>
 80097e6:	4622      	mov	r2, r4
 80097e8:	462b      	mov	r3, r5
 80097ea:	f7f6 ff25 	bl	8000638 <__aeabi_dmul>
 80097ee:	a33c      	add	r3, pc, #240	; (adr r3, 80098e0 <__ieee754_acos+0x2a0>)
 80097f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f4:	f7f6 fd6a 	bl	80002cc <__adddf3>
 80097f8:	4622      	mov	r2, r4
 80097fa:	462b      	mov	r3, r5
 80097fc:	f7f6 ff1c 	bl	8000638 <__aeabi_dmul>
 8009800:	a339      	add	r3, pc, #228	; (adr r3, 80098e8 <__ieee754_acos+0x2a8>)
 8009802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009806:	f7f6 fd5f 	bl	80002c8 <__aeabi_dsub>
 800980a:	4622      	mov	r2, r4
 800980c:	462b      	mov	r3, r5
 800980e:	f7f6 ff13 	bl	8000638 <__aeabi_dmul>
 8009812:	a337      	add	r3, pc, #220	; (adr r3, 80098f0 <__ieee754_acos+0x2b0>)
 8009814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009818:	f7f6 fd58 	bl	80002cc <__adddf3>
 800981c:	4622      	mov	r2, r4
 800981e:	462b      	mov	r3, r5
 8009820:	f7f6 ff0a 	bl	8000638 <__aeabi_dmul>
 8009824:	ec45 4b10 	vmov	d0, r4, r5
 8009828:	4680      	mov	r8, r0
 800982a:	4689      	mov	r9, r1
 800982c:	f000 fc40 	bl	800a0b0 <__ieee754_sqrt>
 8009830:	a331      	add	r3, pc, #196	; (adr r3, 80098f8 <__ieee754_acos+0x2b8>)
 8009832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009836:	4620      	mov	r0, r4
 8009838:	4629      	mov	r1, r5
 800983a:	ec57 6b10 	vmov	r6, r7, d0
 800983e:	f7f6 fefb 	bl	8000638 <__aeabi_dmul>
 8009842:	a32f      	add	r3, pc, #188	; (adr r3, 8009900 <__ieee754_acos+0x2c0>)
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f7f6 fd3e 	bl	80002c8 <__aeabi_dsub>
 800984c:	4622      	mov	r2, r4
 800984e:	462b      	mov	r3, r5
 8009850:	f7f6 fef2 	bl	8000638 <__aeabi_dmul>
 8009854:	a32c      	add	r3, pc, #176	; (adr r3, 8009908 <__ieee754_acos+0x2c8>)
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	f7f6 fd37 	bl	80002cc <__adddf3>
 800985e:	4622      	mov	r2, r4
 8009860:	462b      	mov	r3, r5
 8009862:	f7f6 fee9 	bl	8000638 <__aeabi_dmul>
 8009866:	a32a      	add	r3, pc, #168	; (adr r3, 8009910 <__ieee754_acos+0x2d0>)
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	f7f6 fd2c 	bl	80002c8 <__aeabi_dsub>
 8009870:	4622      	mov	r2, r4
 8009872:	462b      	mov	r3, r5
 8009874:	f7f6 fee0 	bl	8000638 <__aeabi_dmul>
 8009878:	4b2e      	ldr	r3, [pc, #184]	; (8009934 <__ieee754_acos+0x2f4>)
 800987a:	2200      	movs	r2, #0
 800987c:	f7f6 fd26 	bl	80002cc <__adddf3>
 8009880:	4602      	mov	r2, r0
 8009882:	460b      	mov	r3, r1
 8009884:	4640      	mov	r0, r8
 8009886:	4649      	mov	r1, r9
 8009888:	f7f7 f800 	bl	800088c <__aeabi_ddiv>
 800988c:	4632      	mov	r2, r6
 800988e:	463b      	mov	r3, r7
 8009890:	f7f6 fed2 	bl	8000638 <__aeabi_dmul>
 8009894:	a320      	add	r3, pc, #128	; (adr r3, 8009918 <__ieee754_acos+0x2d8>)
 8009896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989a:	f7f6 fd15 	bl	80002c8 <__aeabi_dsub>
 800989e:	4632      	mov	r2, r6
 80098a0:	463b      	mov	r3, r7
 80098a2:	f7f6 fd13 	bl	80002cc <__adddf3>
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	f7f6 fd0f 	bl	80002cc <__adddf3>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	a103      	add	r1, pc, #12	; (adr r1, 80098c0 <__ieee754_acos+0x280>)
 80098b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098b8:	e76f      	b.n	800979a <__ieee754_acos+0x15a>
 80098ba:	bf00      	nop
 80098bc:	f3af 8000 	nop.w
 80098c0:	54442d18 	.word	0x54442d18
 80098c4:	400921fb 	.word	0x400921fb
 80098c8:	0dfdf709 	.word	0x0dfdf709
 80098cc:	3f023de1 	.word	0x3f023de1
 80098d0:	7501b288 	.word	0x7501b288
 80098d4:	3f49efe0 	.word	0x3f49efe0
 80098d8:	b5688f3b 	.word	0xb5688f3b
 80098dc:	3fa48228 	.word	0x3fa48228
 80098e0:	0e884455 	.word	0x0e884455
 80098e4:	3fc9c155 	.word	0x3fc9c155
 80098e8:	03eb6f7d 	.word	0x03eb6f7d
 80098ec:	3fd4d612 	.word	0x3fd4d612
 80098f0:	55555555 	.word	0x55555555
 80098f4:	3fc55555 	.word	0x3fc55555
 80098f8:	b12e9282 	.word	0xb12e9282
 80098fc:	3fb3b8c5 	.word	0x3fb3b8c5
 8009900:	1b8d0159 	.word	0x1b8d0159
 8009904:	3fe6066c 	.word	0x3fe6066c
 8009908:	9c598ac8 	.word	0x9c598ac8
 800990c:	40002ae5 	.word	0x40002ae5
 8009910:	1c8a2d4b 	.word	0x1c8a2d4b
 8009914:	40033a27 	.word	0x40033a27
 8009918:	33145c07 	.word	0x33145c07
 800991c:	3c91a626 	.word	0x3c91a626
 8009920:	54442d18 	.word	0x54442d18
 8009924:	3ff921fb 	.word	0x3ff921fb
 8009928:	3fefffff 	.word	0x3fefffff
 800992c:	3fdfffff 	.word	0x3fdfffff
 8009930:	3c600000 	.word	0x3c600000
 8009934:	3ff00000 	.word	0x3ff00000
 8009938:	3fe00000 	.word	0x3fe00000
 800993c:	ee10 2a10 	vmov	r2, s0
 8009940:	462b      	mov	r3, r5
 8009942:	496d      	ldr	r1, [pc, #436]	; (8009af8 <__ieee754_acos+0x4b8>)
 8009944:	2000      	movs	r0, #0
 8009946:	f7f6 fcbf 	bl	80002c8 <__aeabi_dsub>
 800994a:	4b6c      	ldr	r3, [pc, #432]	; (8009afc <__ieee754_acos+0x4bc>)
 800994c:	2200      	movs	r2, #0
 800994e:	f7f6 fe73 	bl	8000638 <__aeabi_dmul>
 8009952:	4604      	mov	r4, r0
 8009954:	460d      	mov	r5, r1
 8009956:	ec45 4b10 	vmov	d0, r4, r5
 800995a:	f000 fba9 	bl	800a0b0 <__ieee754_sqrt>
 800995e:	a34e      	add	r3, pc, #312	; (adr r3, 8009a98 <__ieee754_acos+0x458>)
 8009960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009964:	4620      	mov	r0, r4
 8009966:	4629      	mov	r1, r5
 8009968:	ec59 8b10 	vmov	r8, r9, d0
 800996c:	f7f6 fe64 	bl	8000638 <__aeabi_dmul>
 8009970:	a34b      	add	r3, pc, #300	; (adr r3, 8009aa0 <__ieee754_acos+0x460>)
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	f7f6 fca9 	bl	80002cc <__adddf3>
 800997a:	4622      	mov	r2, r4
 800997c:	462b      	mov	r3, r5
 800997e:	f7f6 fe5b 	bl	8000638 <__aeabi_dmul>
 8009982:	a349      	add	r3, pc, #292	; (adr r3, 8009aa8 <__ieee754_acos+0x468>)
 8009984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009988:	f7f6 fc9e 	bl	80002c8 <__aeabi_dsub>
 800998c:	4622      	mov	r2, r4
 800998e:	462b      	mov	r3, r5
 8009990:	f7f6 fe52 	bl	8000638 <__aeabi_dmul>
 8009994:	a346      	add	r3, pc, #280	; (adr r3, 8009ab0 <__ieee754_acos+0x470>)
 8009996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999a:	f7f6 fc97 	bl	80002cc <__adddf3>
 800999e:	4622      	mov	r2, r4
 80099a0:	462b      	mov	r3, r5
 80099a2:	f7f6 fe49 	bl	8000638 <__aeabi_dmul>
 80099a6:	a344      	add	r3, pc, #272	; (adr r3, 8009ab8 <__ieee754_acos+0x478>)
 80099a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ac:	f7f6 fc8c 	bl	80002c8 <__aeabi_dsub>
 80099b0:	4622      	mov	r2, r4
 80099b2:	462b      	mov	r3, r5
 80099b4:	f7f6 fe40 	bl	8000638 <__aeabi_dmul>
 80099b8:	a341      	add	r3, pc, #260	; (adr r3, 8009ac0 <__ieee754_acos+0x480>)
 80099ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099be:	f7f6 fc85 	bl	80002cc <__adddf3>
 80099c2:	4622      	mov	r2, r4
 80099c4:	462b      	mov	r3, r5
 80099c6:	f7f6 fe37 	bl	8000638 <__aeabi_dmul>
 80099ca:	a33f      	add	r3, pc, #252	; (adr r3, 8009ac8 <__ieee754_acos+0x488>)
 80099cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d0:	4682      	mov	sl, r0
 80099d2:	468b      	mov	fp, r1
 80099d4:	4620      	mov	r0, r4
 80099d6:	4629      	mov	r1, r5
 80099d8:	f7f6 fe2e 	bl	8000638 <__aeabi_dmul>
 80099dc:	a33c      	add	r3, pc, #240	; (adr r3, 8009ad0 <__ieee754_acos+0x490>)
 80099de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e2:	f7f6 fc71 	bl	80002c8 <__aeabi_dsub>
 80099e6:	4622      	mov	r2, r4
 80099e8:	462b      	mov	r3, r5
 80099ea:	f7f6 fe25 	bl	8000638 <__aeabi_dmul>
 80099ee:	a33a      	add	r3, pc, #232	; (adr r3, 8009ad8 <__ieee754_acos+0x498>)
 80099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f4:	f7f6 fc6a 	bl	80002cc <__adddf3>
 80099f8:	4622      	mov	r2, r4
 80099fa:	462b      	mov	r3, r5
 80099fc:	f7f6 fe1c 	bl	8000638 <__aeabi_dmul>
 8009a00:	a337      	add	r3, pc, #220	; (adr r3, 8009ae0 <__ieee754_acos+0x4a0>)
 8009a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a06:	f7f6 fc5f 	bl	80002c8 <__aeabi_dsub>
 8009a0a:	4622      	mov	r2, r4
 8009a0c:	462b      	mov	r3, r5
 8009a0e:	f7f6 fe13 	bl	8000638 <__aeabi_dmul>
 8009a12:	4b39      	ldr	r3, [pc, #228]	; (8009af8 <__ieee754_acos+0x4b8>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	f7f6 fc59 	bl	80002cc <__adddf3>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4650      	mov	r0, sl
 8009a20:	4659      	mov	r1, fp
 8009a22:	f7f6 ff33 	bl	800088c <__aeabi_ddiv>
 8009a26:	4642      	mov	r2, r8
 8009a28:	464b      	mov	r3, r9
 8009a2a:	f7f6 fe05 	bl	8000638 <__aeabi_dmul>
 8009a2e:	2600      	movs	r6, #0
 8009a30:	4682      	mov	sl, r0
 8009a32:	468b      	mov	fp, r1
 8009a34:	4632      	mov	r2, r6
 8009a36:	464b      	mov	r3, r9
 8009a38:	4630      	mov	r0, r6
 8009a3a:	4649      	mov	r1, r9
 8009a3c:	f7f6 fdfc 	bl	8000638 <__aeabi_dmul>
 8009a40:	4602      	mov	r2, r0
 8009a42:	460b      	mov	r3, r1
 8009a44:	4620      	mov	r0, r4
 8009a46:	4629      	mov	r1, r5
 8009a48:	f7f6 fc3e 	bl	80002c8 <__aeabi_dsub>
 8009a4c:	4632      	mov	r2, r6
 8009a4e:	4604      	mov	r4, r0
 8009a50:	460d      	mov	r5, r1
 8009a52:	464b      	mov	r3, r9
 8009a54:	4640      	mov	r0, r8
 8009a56:	4649      	mov	r1, r9
 8009a58:	f7f6 fc38 	bl	80002cc <__adddf3>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	4620      	mov	r0, r4
 8009a62:	4629      	mov	r1, r5
 8009a64:	f7f6 ff12 	bl	800088c <__aeabi_ddiv>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	4650      	mov	r0, sl
 8009a6e:	4659      	mov	r1, fp
 8009a70:	f7f6 fc2c 	bl	80002cc <__adddf3>
 8009a74:	4632      	mov	r2, r6
 8009a76:	464b      	mov	r3, r9
 8009a78:	f7f6 fc28 	bl	80002cc <__adddf3>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	460b      	mov	r3, r1
 8009a80:	f7f6 fc24 	bl	80002cc <__adddf3>
 8009a84:	e5fe      	b.n	8009684 <__ieee754_acos+0x44>
 8009a86:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8009ae8 <__ieee754_acos+0x4a8>
 8009a8a:	e5ed      	b.n	8009668 <__ieee754_acos+0x28>
 8009a8c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8009af0 <__ieee754_acos+0x4b0>
 8009a90:	e5ea      	b.n	8009668 <__ieee754_acos+0x28>
 8009a92:	bf00      	nop
 8009a94:	f3af 8000 	nop.w
 8009a98:	0dfdf709 	.word	0x0dfdf709
 8009a9c:	3f023de1 	.word	0x3f023de1
 8009aa0:	7501b288 	.word	0x7501b288
 8009aa4:	3f49efe0 	.word	0x3f49efe0
 8009aa8:	b5688f3b 	.word	0xb5688f3b
 8009aac:	3fa48228 	.word	0x3fa48228
 8009ab0:	0e884455 	.word	0x0e884455
 8009ab4:	3fc9c155 	.word	0x3fc9c155
 8009ab8:	03eb6f7d 	.word	0x03eb6f7d
 8009abc:	3fd4d612 	.word	0x3fd4d612
 8009ac0:	55555555 	.word	0x55555555
 8009ac4:	3fc55555 	.word	0x3fc55555
 8009ac8:	b12e9282 	.word	0xb12e9282
 8009acc:	3fb3b8c5 	.word	0x3fb3b8c5
 8009ad0:	1b8d0159 	.word	0x1b8d0159
 8009ad4:	3fe6066c 	.word	0x3fe6066c
 8009ad8:	9c598ac8 	.word	0x9c598ac8
 8009adc:	40002ae5 	.word	0x40002ae5
 8009ae0:	1c8a2d4b 	.word	0x1c8a2d4b
 8009ae4:	40033a27 	.word	0x40033a27
	...
 8009af0:	54442d18 	.word	0x54442d18
 8009af4:	3ff921fb 	.word	0x3ff921fb
 8009af8:	3ff00000 	.word	0x3ff00000
 8009afc:	3fe00000 	.word	0x3fe00000

08009b00 <__ieee754_atan2>:
 8009b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b04:	ec57 6b11 	vmov	r6, r7, d1
 8009b08:	4273      	negs	r3, r6
 8009b0a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009c90 <__ieee754_atan2+0x190>
 8009b0e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009b12:	4333      	orrs	r3, r6
 8009b14:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009b18:	4573      	cmp	r3, lr
 8009b1a:	ec51 0b10 	vmov	r0, r1, d0
 8009b1e:	ee11 8a10 	vmov	r8, s2
 8009b22:	d80a      	bhi.n	8009b3a <__ieee754_atan2+0x3a>
 8009b24:	4244      	negs	r4, r0
 8009b26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009b2a:	4304      	orrs	r4, r0
 8009b2c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009b30:	4574      	cmp	r4, lr
 8009b32:	ee10 9a10 	vmov	r9, s0
 8009b36:	468c      	mov	ip, r1
 8009b38:	d907      	bls.n	8009b4a <__ieee754_atan2+0x4a>
 8009b3a:	4632      	mov	r2, r6
 8009b3c:	463b      	mov	r3, r7
 8009b3e:	f7f6 fbc5 	bl	80002cc <__adddf3>
 8009b42:	ec41 0b10 	vmov	d0, r0, r1
 8009b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b4a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009b4e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009b52:	4334      	orrs	r4, r6
 8009b54:	d103      	bne.n	8009b5e <__ieee754_atan2+0x5e>
 8009b56:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b5a:	f001 b835 	b.w	800abc8 <atan>
 8009b5e:	17bc      	asrs	r4, r7, #30
 8009b60:	f004 0402 	and.w	r4, r4, #2
 8009b64:	ea53 0909 	orrs.w	r9, r3, r9
 8009b68:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009b6c:	d107      	bne.n	8009b7e <__ieee754_atan2+0x7e>
 8009b6e:	2c02      	cmp	r4, #2
 8009b70:	d060      	beq.n	8009c34 <__ieee754_atan2+0x134>
 8009b72:	2c03      	cmp	r4, #3
 8009b74:	d1e5      	bne.n	8009b42 <__ieee754_atan2+0x42>
 8009b76:	a142      	add	r1, pc, #264	; (adr r1, 8009c80 <__ieee754_atan2+0x180>)
 8009b78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b7c:	e7e1      	b.n	8009b42 <__ieee754_atan2+0x42>
 8009b7e:	ea52 0808 	orrs.w	r8, r2, r8
 8009b82:	d106      	bne.n	8009b92 <__ieee754_atan2+0x92>
 8009b84:	f1bc 0f00 	cmp.w	ip, #0
 8009b88:	da5f      	bge.n	8009c4a <__ieee754_atan2+0x14a>
 8009b8a:	a13f      	add	r1, pc, #252	; (adr r1, 8009c88 <__ieee754_atan2+0x188>)
 8009b8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b90:	e7d7      	b.n	8009b42 <__ieee754_atan2+0x42>
 8009b92:	4572      	cmp	r2, lr
 8009b94:	d10f      	bne.n	8009bb6 <__ieee754_atan2+0xb6>
 8009b96:	4293      	cmp	r3, r2
 8009b98:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009b9c:	d107      	bne.n	8009bae <__ieee754_atan2+0xae>
 8009b9e:	2c02      	cmp	r4, #2
 8009ba0:	d84c      	bhi.n	8009c3c <__ieee754_atan2+0x13c>
 8009ba2:	4b35      	ldr	r3, [pc, #212]	; (8009c78 <__ieee754_atan2+0x178>)
 8009ba4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009ba8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009bac:	e7c9      	b.n	8009b42 <__ieee754_atan2+0x42>
 8009bae:	2c02      	cmp	r4, #2
 8009bb0:	d848      	bhi.n	8009c44 <__ieee754_atan2+0x144>
 8009bb2:	4b32      	ldr	r3, [pc, #200]	; (8009c7c <__ieee754_atan2+0x17c>)
 8009bb4:	e7f6      	b.n	8009ba4 <__ieee754_atan2+0xa4>
 8009bb6:	4573      	cmp	r3, lr
 8009bb8:	d0e4      	beq.n	8009b84 <__ieee754_atan2+0x84>
 8009bba:	1a9b      	subs	r3, r3, r2
 8009bbc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009bc0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009bc4:	da1e      	bge.n	8009c04 <__ieee754_atan2+0x104>
 8009bc6:	2f00      	cmp	r7, #0
 8009bc8:	da01      	bge.n	8009bce <__ieee754_atan2+0xce>
 8009bca:	323c      	adds	r2, #60	; 0x3c
 8009bcc:	db1e      	blt.n	8009c0c <__ieee754_atan2+0x10c>
 8009bce:	4632      	mov	r2, r6
 8009bd0:	463b      	mov	r3, r7
 8009bd2:	f7f6 fe5b 	bl	800088c <__aeabi_ddiv>
 8009bd6:	ec41 0b10 	vmov	d0, r0, r1
 8009bda:	f001 f995 	bl	800af08 <fabs>
 8009bde:	f000 fff3 	bl	800abc8 <atan>
 8009be2:	ec51 0b10 	vmov	r0, r1, d0
 8009be6:	2c01      	cmp	r4, #1
 8009be8:	d013      	beq.n	8009c12 <__ieee754_atan2+0x112>
 8009bea:	2c02      	cmp	r4, #2
 8009bec:	d015      	beq.n	8009c1a <__ieee754_atan2+0x11a>
 8009bee:	2c00      	cmp	r4, #0
 8009bf0:	d0a7      	beq.n	8009b42 <__ieee754_atan2+0x42>
 8009bf2:	a319      	add	r3, pc, #100	; (adr r3, 8009c58 <__ieee754_atan2+0x158>)
 8009bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf8:	f7f6 fb66 	bl	80002c8 <__aeabi_dsub>
 8009bfc:	a318      	add	r3, pc, #96	; (adr r3, 8009c60 <__ieee754_atan2+0x160>)
 8009bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c02:	e014      	b.n	8009c2e <__ieee754_atan2+0x12e>
 8009c04:	a118      	add	r1, pc, #96	; (adr r1, 8009c68 <__ieee754_atan2+0x168>)
 8009c06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c0a:	e7ec      	b.n	8009be6 <__ieee754_atan2+0xe6>
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	2100      	movs	r1, #0
 8009c10:	e7e9      	b.n	8009be6 <__ieee754_atan2+0xe6>
 8009c12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c16:	4619      	mov	r1, r3
 8009c18:	e793      	b.n	8009b42 <__ieee754_atan2+0x42>
 8009c1a:	a30f      	add	r3, pc, #60	; (adr r3, 8009c58 <__ieee754_atan2+0x158>)
 8009c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c20:	f7f6 fb52 	bl	80002c8 <__aeabi_dsub>
 8009c24:	4602      	mov	r2, r0
 8009c26:	460b      	mov	r3, r1
 8009c28:	a10d      	add	r1, pc, #52	; (adr r1, 8009c60 <__ieee754_atan2+0x160>)
 8009c2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c2e:	f7f6 fb4b 	bl	80002c8 <__aeabi_dsub>
 8009c32:	e786      	b.n	8009b42 <__ieee754_atan2+0x42>
 8009c34:	a10a      	add	r1, pc, #40	; (adr r1, 8009c60 <__ieee754_atan2+0x160>)
 8009c36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c3a:	e782      	b.n	8009b42 <__ieee754_atan2+0x42>
 8009c3c:	a10c      	add	r1, pc, #48	; (adr r1, 8009c70 <__ieee754_atan2+0x170>)
 8009c3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c42:	e77e      	b.n	8009b42 <__ieee754_atan2+0x42>
 8009c44:	2000      	movs	r0, #0
 8009c46:	2100      	movs	r1, #0
 8009c48:	e77b      	b.n	8009b42 <__ieee754_atan2+0x42>
 8009c4a:	a107      	add	r1, pc, #28	; (adr r1, 8009c68 <__ieee754_atan2+0x168>)
 8009c4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c50:	e777      	b.n	8009b42 <__ieee754_atan2+0x42>
 8009c52:	bf00      	nop
 8009c54:	f3af 8000 	nop.w
 8009c58:	33145c07 	.word	0x33145c07
 8009c5c:	3ca1a626 	.word	0x3ca1a626
 8009c60:	54442d18 	.word	0x54442d18
 8009c64:	400921fb 	.word	0x400921fb
 8009c68:	54442d18 	.word	0x54442d18
 8009c6c:	3ff921fb 	.word	0x3ff921fb
 8009c70:	54442d18 	.word	0x54442d18
 8009c74:	3fe921fb 	.word	0x3fe921fb
 8009c78:	0800b570 	.word	0x0800b570
 8009c7c:	0800b588 	.word	0x0800b588
 8009c80:	54442d18 	.word	0x54442d18
 8009c84:	c00921fb 	.word	0xc00921fb
 8009c88:	54442d18 	.word	0x54442d18
 8009c8c:	bff921fb 	.word	0xbff921fb
 8009c90:	7ff00000 	.word	0x7ff00000
 8009c94:	00000000 	.word	0x00000000

08009c98 <__ieee754_rem_pio2>:
 8009c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9c:	ed2d 8b02 	vpush	{d8}
 8009ca0:	ec55 4b10 	vmov	r4, r5, d0
 8009ca4:	4bca      	ldr	r3, [pc, #808]	; (8009fd0 <__ieee754_rem_pio2+0x338>)
 8009ca6:	b08b      	sub	sp, #44	; 0x2c
 8009ca8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009cac:	4598      	cmp	r8, r3
 8009cae:	4682      	mov	sl, r0
 8009cb0:	9502      	str	r5, [sp, #8]
 8009cb2:	dc08      	bgt.n	8009cc6 <__ieee754_rem_pio2+0x2e>
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	ed80 0b00 	vstr	d0, [r0]
 8009cbc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009cc0:	f04f 0b00 	mov.w	fp, #0
 8009cc4:	e028      	b.n	8009d18 <__ieee754_rem_pio2+0x80>
 8009cc6:	4bc3      	ldr	r3, [pc, #780]	; (8009fd4 <__ieee754_rem_pio2+0x33c>)
 8009cc8:	4598      	cmp	r8, r3
 8009cca:	dc78      	bgt.n	8009dbe <__ieee754_rem_pio2+0x126>
 8009ccc:	9b02      	ldr	r3, [sp, #8]
 8009cce:	4ec2      	ldr	r6, [pc, #776]	; (8009fd8 <__ieee754_rem_pio2+0x340>)
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	ee10 0a10 	vmov	r0, s0
 8009cd6:	a3b0      	add	r3, pc, #704	; (adr r3, 8009f98 <__ieee754_rem_pio2+0x300>)
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	4629      	mov	r1, r5
 8009cde:	dd39      	ble.n	8009d54 <__ieee754_rem_pio2+0xbc>
 8009ce0:	f7f6 faf2 	bl	80002c8 <__aeabi_dsub>
 8009ce4:	45b0      	cmp	r8, r6
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	460d      	mov	r5, r1
 8009cea:	d01b      	beq.n	8009d24 <__ieee754_rem_pio2+0x8c>
 8009cec:	a3ac      	add	r3, pc, #688	; (adr r3, 8009fa0 <__ieee754_rem_pio2+0x308>)
 8009cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf2:	f7f6 fae9 	bl	80002c8 <__aeabi_dsub>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	e9ca 2300 	strd	r2, r3, [sl]
 8009cfe:	4620      	mov	r0, r4
 8009d00:	4629      	mov	r1, r5
 8009d02:	f7f6 fae1 	bl	80002c8 <__aeabi_dsub>
 8009d06:	a3a6      	add	r3, pc, #664	; (adr r3, 8009fa0 <__ieee754_rem_pio2+0x308>)
 8009d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0c:	f7f6 fadc 	bl	80002c8 <__aeabi_dsub>
 8009d10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009d14:	f04f 0b01 	mov.w	fp, #1
 8009d18:	4658      	mov	r0, fp
 8009d1a:	b00b      	add	sp, #44	; 0x2c
 8009d1c:	ecbd 8b02 	vpop	{d8}
 8009d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d24:	a3a0      	add	r3, pc, #640	; (adr r3, 8009fa8 <__ieee754_rem_pio2+0x310>)
 8009d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2a:	f7f6 facd 	bl	80002c8 <__aeabi_dsub>
 8009d2e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009fb0 <__ieee754_rem_pio2+0x318>)
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	4604      	mov	r4, r0
 8009d36:	460d      	mov	r5, r1
 8009d38:	f7f6 fac6 	bl	80002c8 <__aeabi_dsub>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	460b      	mov	r3, r1
 8009d40:	e9ca 2300 	strd	r2, r3, [sl]
 8009d44:	4620      	mov	r0, r4
 8009d46:	4629      	mov	r1, r5
 8009d48:	f7f6 fabe 	bl	80002c8 <__aeabi_dsub>
 8009d4c:	a398      	add	r3, pc, #608	; (adr r3, 8009fb0 <__ieee754_rem_pio2+0x318>)
 8009d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d52:	e7db      	b.n	8009d0c <__ieee754_rem_pio2+0x74>
 8009d54:	f7f6 faba 	bl	80002cc <__adddf3>
 8009d58:	45b0      	cmp	r8, r6
 8009d5a:	4604      	mov	r4, r0
 8009d5c:	460d      	mov	r5, r1
 8009d5e:	d016      	beq.n	8009d8e <__ieee754_rem_pio2+0xf6>
 8009d60:	a38f      	add	r3, pc, #572	; (adr r3, 8009fa0 <__ieee754_rem_pio2+0x308>)
 8009d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d66:	f7f6 fab1 	bl	80002cc <__adddf3>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	e9ca 2300 	strd	r2, r3, [sl]
 8009d72:	4620      	mov	r0, r4
 8009d74:	4629      	mov	r1, r5
 8009d76:	f7f6 faa7 	bl	80002c8 <__aeabi_dsub>
 8009d7a:	a389      	add	r3, pc, #548	; (adr r3, 8009fa0 <__ieee754_rem_pio2+0x308>)
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	f7f6 faa4 	bl	80002cc <__adddf3>
 8009d84:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8009d88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009d8c:	e7c4      	b.n	8009d18 <__ieee754_rem_pio2+0x80>
 8009d8e:	a386      	add	r3, pc, #536	; (adr r3, 8009fa8 <__ieee754_rem_pio2+0x310>)
 8009d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d94:	f7f6 fa9a 	bl	80002cc <__adddf3>
 8009d98:	a385      	add	r3, pc, #532	; (adr r3, 8009fb0 <__ieee754_rem_pio2+0x318>)
 8009d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9e:	4604      	mov	r4, r0
 8009da0:	460d      	mov	r5, r1
 8009da2:	f7f6 fa93 	bl	80002cc <__adddf3>
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	e9ca 2300 	strd	r2, r3, [sl]
 8009dae:	4620      	mov	r0, r4
 8009db0:	4629      	mov	r1, r5
 8009db2:	f7f6 fa89 	bl	80002c8 <__aeabi_dsub>
 8009db6:	a37e      	add	r3, pc, #504	; (adr r3, 8009fb0 <__ieee754_rem_pio2+0x318>)
 8009db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbc:	e7e0      	b.n	8009d80 <__ieee754_rem_pio2+0xe8>
 8009dbe:	4b87      	ldr	r3, [pc, #540]	; (8009fdc <__ieee754_rem_pio2+0x344>)
 8009dc0:	4598      	cmp	r8, r3
 8009dc2:	f300 80d9 	bgt.w	8009f78 <__ieee754_rem_pio2+0x2e0>
 8009dc6:	f001 f89f 	bl	800af08 <fabs>
 8009dca:	ec55 4b10 	vmov	r4, r5, d0
 8009dce:	ee10 0a10 	vmov	r0, s0
 8009dd2:	a379      	add	r3, pc, #484	; (adr r3, 8009fb8 <__ieee754_rem_pio2+0x320>)
 8009dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd8:	4629      	mov	r1, r5
 8009dda:	f7f6 fc2d 	bl	8000638 <__aeabi_dmul>
 8009dde:	4b80      	ldr	r3, [pc, #512]	; (8009fe0 <__ieee754_rem_pio2+0x348>)
 8009de0:	2200      	movs	r2, #0
 8009de2:	f7f6 fa73 	bl	80002cc <__adddf3>
 8009de6:	f7f6 fed7 	bl	8000b98 <__aeabi_d2iz>
 8009dea:	4683      	mov	fp, r0
 8009dec:	f7f6 fbba 	bl	8000564 <__aeabi_i2d>
 8009df0:	4602      	mov	r2, r0
 8009df2:	460b      	mov	r3, r1
 8009df4:	ec43 2b18 	vmov	d8, r2, r3
 8009df8:	a367      	add	r3, pc, #412	; (adr r3, 8009f98 <__ieee754_rem_pio2+0x300>)
 8009dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfe:	f7f6 fc1b 	bl	8000638 <__aeabi_dmul>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	4620      	mov	r0, r4
 8009e08:	4629      	mov	r1, r5
 8009e0a:	f7f6 fa5d 	bl	80002c8 <__aeabi_dsub>
 8009e0e:	a364      	add	r3, pc, #400	; (adr r3, 8009fa0 <__ieee754_rem_pio2+0x308>)
 8009e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e14:	4606      	mov	r6, r0
 8009e16:	460f      	mov	r7, r1
 8009e18:	ec51 0b18 	vmov	r0, r1, d8
 8009e1c:	f7f6 fc0c 	bl	8000638 <__aeabi_dmul>
 8009e20:	f1bb 0f1f 	cmp.w	fp, #31
 8009e24:	4604      	mov	r4, r0
 8009e26:	460d      	mov	r5, r1
 8009e28:	dc0d      	bgt.n	8009e46 <__ieee754_rem_pio2+0x1ae>
 8009e2a:	4b6e      	ldr	r3, [pc, #440]	; (8009fe4 <__ieee754_rem_pio2+0x34c>)
 8009e2c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8009e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e34:	4543      	cmp	r3, r8
 8009e36:	d006      	beq.n	8009e46 <__ieee754_rem_pio2+0x1ae>
 8009e38:	4622      	mov	r2, r4
 8009e3a:	462b      	mov	r3, r5
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	4639      	mov	r1, r7
 8009e40:	f7f6 fa42 	bl	80002c8 <__aeabi_dsub>
 8009e44:	e00f      	b.n	8009e66 <__ieee754_rem_pio2+0x1ce>
 8009e46:	462b      	mov	r3, r5
 8009e48:	4622      	mov	r2, r4
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	4639      	mov	r1, r7
 8009e4e:	f7f6 fa3b 	bl	80002c8 <__aeabi_dsub>
 8009e52:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009e56:	9303      	str	r3, [sp, #12]
 8009e58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009e5c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009e60:	f1b8 0f10 	cmp.w	r8, #16
 8009e64:	dc02      	bgt.n	8009e6c <__ieee754_rem_pio2+0x1d4>
 8009e66:	e9ca 0100 	strd	r0, r1, [sl]
 8009e6a:	e039      	b.n	8009ee0 <__ieee754_rem_pio2+0x248>
 8009e6c:	a34e      	add	r3, pc, #312	; (adr r3, 8009fa8 <__ieee754_rem_pio2+0x310>)
 8009e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e72:	ec51 0b18 	vmov	r0, r1, d8
 8009e76:	f7f6 fbdf 	bl	8000638 <__aeabi_dmul>
 8009e7a:	4604      	mov	r4, r0
 8009e7c:	460d      	mov	r5, r1
 8009e7e:	4602      	mov	r2, r0
 8009e80:	460b      	mov	r3, r1
 8009e82:	4630      	mov	r0, r6
 8009e84:	4639      	mov	r1, r7
 8009e86:	f7f6 fa1f 	bl	80002c8 <__aeabi_dsub>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	4680      	mov	r8, r0
 8009e90:	4689      	mov	r9, r1
 8009e92:	4630      	mov	r0, r6
 8009e94:	4639      	mov	r1, r7
 8009e96:	f7f6 fa17 	bl	80002c8 <__aeabi_dsub>
 8009e9a:	4622      	mov	r2, r4
 8009e9c:	462b      	mov	r3, r5
 8009e9e:	f7f6 fa13 	bl	80002c8 <__aeabi_dsub>
 8009ea2:	a343      	add	r3, pc, #268	; (adr r3, 8009fb0 <__ieee754_rem_pio2+0x318>)
 8009ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea8:	4604      	mov	r4, r0
 8009eaa:	460d      	mov	r5, r1
 8009eac:	ec51 0b18 	vmov	r0, r1, d8
 8009eb0:	f7f6 fbc2 	bl	8000638 <__aeabi_dmul>
 8009eb4:	4622      	mov	r2, r4
 8009eb6:	462b      	mov	r3, r5
 8009eb8:	f7f6 fa06 	bl	80002c8 <__aeabi_dsub>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	4604      	mov	r4, r0
 8009ec2:	460d      	mov	r5, r1
 8009ec4:	4640      	mov	r0, r8
 8009ec6:	4649      	mov	r1, r9
 8009ec8:	f7f6 f9fe 	bl	80002c8 <__aeabi_dsub>
 8009ecc:	9a03      	ldr	r2, [sp, #12]
 8009ece:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009ed2:	1ad3      	subs	r3, r2, r3
 8009ed4:	2b31      	cmp	r3, #49	; 0x31
 8009ed6:	dc24      	bgt.n	8009f22 <__ieee754_rem_pio2+0x28a>
 8009ed8:	e9ca 0100 	strd	r0, r1, [sl]
 8009edc:	4646      	mov	r6, r8
 8009ede:	464f      	mov	r7, r9
 8009ee0:	e9da 8900 	ldrd	r8, r9, [sl]
 8009ee4:	4630      	mov	r0, r6
 8009ee6:	4642      	mov	r2, r8
 8009ee8:	464b      	mov	r3, r9
 8009eea:	4639      	mov	r1, r7
 8009eec:	f7f6 f9ec 	bl	80002c8 <__aeabi_dsub>
 8009ef0:	462b      	mov	r3, r5
 8009ef2:	4622      	mov	r2, r4
 8009ef4:	f7f6 f9e8 	bl	80002c8 <__aeabi_dsub>
 8009ef8:	9b02      	ldr	r3, [sp, #8]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009f00:	f6bf af0a 	bge.w	8009d18 <__ieee754_rem_pio2+0x80>
 8009f04:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009f08:	f8ca 3004 	str.w	r3, [sl, #4]
 8009f0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f10:	f8ca 8000 	str.w	r8, [sl]
 8009f14:	f8ca 0008 	str.w	r0, [sl, #8]
 8009f18:	f8ca 300c 	str.w	r3, [sl, #12]
 8009f1c:	f1cb 0b00 	rsb	fp, fp, #0
 8009f20:	e6fa      	b.n	8009d18 <__ieee754_rem_pio2+0x80>
 8009f22:	a327      	add	r3, pc, #156	; (adr r3, 8009fc0 <__ieee754_rem_pio2+0x328>)
 8009f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f28:	ec51 0b18 	vmov	r0, r1, d8
 8009f2c:	f7f6 fb84 	bl	8000638 <__aeabi_dmul>
 8009f30:	4604      	mov	r4, r0
 8009f32:	460d      	mov	r5, r1
 8009f34:	4602      	mov	r2, r0
 8009f36:	460b      	mov	r3, r1
 8009f38:	4640      	mov	r0, r8
 8009f3a:	4649      	mov	r1, r9
 8009f3c:	f7f6 f9c4 	bl	80002c8 <__aeabi_dsub>
 8009f40:	4602      	mov	r2, r0
 8009f42:	460b      	mov	r3, r1
 8009f44:	4606      	mov	r6, r0
 8009f46:	460f      	mov	r7, r1
 8009f48:	4640      	mov	r0, r8
 8009f4a:	4649      	mov	r1, r9
 8009f4c:	f7f6 f9bc 	bl	80002c8 <__aeabi_dsub>
 8009f50:	4622      	mov	r2, r4
 8009f52:	462b      	mov	r3, r5
 8009f54:	f7f6 f9b8 	bl	80002c8 <__aeabi_dsub>
 8009f58:	a31b      	add	r3, pc, #108	; (adr r3, 8009fc8 <__ieee754_rem_pio2+0x330>)
 8009f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5e:	4604      	mov	r4, r0
 8009f60:	460d      	mov	r5, r1
 8009f62:	ec51 0b18 	vmov	r0, r1, d8
 8009f66:	f7f6 fb67 	bl	8000638 <__aeabi_dmul>
 8009f6a:	4622      	mov	r2, r4
 8009f6c:	462b      	mov	r3, r5
 8009f6e:	f7f6 f9ab 	bl	80002c8 <__aeabi_dsub>
 8009f72:	4604      	mov	r4, r0
 8009f74:	460d      	mov	r5, r1
 8009f76:	e75f      	b.n	8009e38 <__ieee754_rem_pio2+0x1a0>
 8009f78:	4b1b      	ldr	r3, [pc, #108]	; (8009fe8 <__ieee754_rem_pio2+0x350>)
 8009f7a:	4598      	cmp	r8, r3
 8009f7c:	dd36      	ble.n	8009fec <__ieee754_rem_pio2+0x354>
 8009f7e:	ee10 2a10 	vmov	r2, s0
 8009f82:	462b      	mov	r3, r5
 8009f84:	4620      	mov	r0, r4
 8009f86:	4629      	mov	r1, r5
 8009f88:	f7f6 f99e 	bl	80002c8 <__aeabi_dsub>
 8009f8c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009f90:	e9ca 0100 	strd	r0, r1, [sl]
 8009f94:	e694      	b.n	8009cc0 <__ieee754_rem_pio2+0x28>
 8009f96:	bf00      	nop
 8009f98:	54400000 	.word	0x54400000
 8009f9c:	3ff921fb 	.word	0x3ff921fb
 8009fa0:	1a626331 	.word	0x1a626331
 8009fa4:	3dd0b461 	.word	0x3dd0b461
 8009fa8:	1a600000 	.word	0x1a600000
 8009fac:	3dd0b461 	.word	0x3dd0b461
 8009fb0:	2e037073 	.word	0x2e037073
 8009fb4:	3ba3198a 	.word	0x3ba3198a
 8009fb8:	6dc9c883 	.word	0x6dc9c883
 8009fbc:	3fe45f30 	.word	0x3fe45f30
 8009fc0:	2e000000 	.word	0x2e000000
 8009fc4:	3ba3198a 	.word	0x3ba3198a
 8009fc8:	252049c1 	.word	0x252049c1
 8009fcc:	397b839a 	.word	0x397b839a
 8009fd0:	3fe921fb 	.word	0x3fe921fb
 8009fd4:	4002d97b 	.word	0x4002d97b
 8009fd8:	3ff921fb 	.word	0x3ff921fb
 8009fdc:	413921fb 	.word	0x413921fb
 8009fe0:	3fe00000 	.word	0x3fe00000
 8009fe4:	0800b5a0 	.word	0x0800b5a0
 8009fe8:	7fefffff 	.word	0x7fefffff
 8009fec:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009ff0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009ff4:	ee10 0a10 	vmov	r0, s0
 8009ff8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009ffc:	ee10 6a10 	vmov	r6, s0
 800a000:	460f      	mov	r7, r1
 800a002:	f7f6 fdc9 	bl	8000b98 <__aeabi_d2iz>
 800a006:	f7f6 faad 	bl	8000564 <__aeabi_i2d>
 800a00a:	4602      	mov	r2, r0
 800a00c:	460b      	mov	r3, r1
 800a00e:	4630      	mov	r0, r6
 800a010:	4639      	mov	r1, r7
 800a012:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a016:	f7f6 f957 	bl	80002c8 <__aeabi_dsub>
 800a01a:	4b23      	ldr	r3, [pc, #140]	; (800a0a8 <__ieee754_rem_pio2+0x410>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	f7f6 fb0b 	bl	8000638 <__aeabi_dmul>
 800a022:	460f      	mov	r7, r1
 800a024:	4606      	mov	r6, r0
 800a026:	f7f6 fdb7 	bl	8000b98 <__aeabi_d2iz>
 800a02a:	f7f6 fa9b 	bl	8000564 <__aeabi_i2d>
 800a02e:	4602      	mov	r2, r0
 800a030:	460b      	mov	r3, r1
 800a032:	4630      	mov	r0, r6
 800a034:	4639      	mov	r1, r7
 800a036:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a03a:	f7f6 f945 	bl	80002c8 <__aeabi_dsub>
 800a03e:	4b1a      	ldr	r3, [pc, #104]	; (800a0a8 <__ieee754_rem_pio2+0x410>)
 800a040:	2200      	movs	r2, #0
 800a042:	f7f6 faf9 	bl	8000638 <__aeabi_dmul>
 800a046:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a04a:	ad04      	add	r5, sp, #16
 800a04c:	f04f 0803 	mov.w	r8, #3
 800a050:	46a9      	mov	r9, r5
 800a052:	2600      	movs	r6, #0
 800a054:	2700      	movs	r7, #0
 800a056:	4632      	mov	r2, r6
 800a058:	463b      	mov	r3, r7
 800a05a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a05e:	46c3      	mov	fp, r8
 800a060:	3d08      	subs	r5, #8
 800a062:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a066:	f7f6 fd4f 	bl	8000b08 <__aeabi_dcmpeq>
 800a06a:	2800      	cmp	r0, #0
 800a06c:	d1f3      	bne.n	800a056 <__ieee754_rem_pio2+0x3be>
 800a06e:	4b0f      	ldr	r3, [pc, #60]	; (800a0ac <__ieee754_rem_pio2+0x414>)
 800a070:	9301      	str	r3, [sp, #4]
 800a072:	2302      	movs	r3, #2
 800a074:	9300      	str	r3, [sp, #0]
 800a076:	4622      	mov	r2, r4
 800a078:	465b      	mov	r3, fp
 800a07a:	4651      	mov	r1, sl
 800a07c:	4648      	mov	r0, r9
 800a07e:	f000 f993 	bl	800a3a8 <__kernel_rem_pio2>
 800a082:	9b02      	ldr	r3, [sp, #8]
 800a084:	2b00      	cmp	r3, #0
 800a086:	4683      	mov	fp, r0
 800a088:	f6bf ae46 	bge.w	8009d18 <__ieee754_rem_pio2+0x80>
 800a08c:	e9da 2100 	ldrd	r2, r1, [sl]
 800a090:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a094:	e9ca 2300 	strd	r2, r3, [sl]
 800a098:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a09c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0a0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a0a4:	e73a      	b.n	8009f1c <__ieee754_rem_pio2+0x284>
 800a0a6:	bf00      	nop
 800a0a8:	41700000 	.word	0x41700000
 800a0ac:	0800b620 	.word	0x0800b620

0800a0b0 <__ieee754_sqrt>:
 800a0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b4:	ec55 4b10 	vmov	r4, r5, d0
 800a0b8:	4e55      	ldr	r6, [pc, #340]	; (800a210 <__ieee754_sqrt+0x160>)
 800a0ba:	43ae      	bics	r6, r5
 800a0bc:	ee10 0a10 	vmov	r0, s0
 800a0c0:	ee10 3a10 	vmov	r3, s0
 800a0c4:	462a      	mov	r2, r5
 800a0c6:	4629      	mov	r1, r5
 800a0c8:	d110      	bne.n	800a0ec <__ieee754_sqrt+0x3c>
 800a0ca:	ee10 2a10 	vmov	r2, s0
 800a0ce:	462b      	mov	r3, r5
 800a0d0:	f7f6 fab2 	bl	8000638 <__aeabi_dmul>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	4620      	mov	r0, r4
 800a0da:	4629      	mov	r1, r5
 800a0dc:	f7f6 f8f6 	bl	80002cc <__adddf3>
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	460d      	mov	r5, r1
 800a0e4:	ec45 4b10 	vmov	d0, r4, r5
 800a0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0ec:	2d00      	cmp	r5, #0
 800a0ee:	dc10      	bgt.n	800a112 <__ieee754_sqrt+0x62>
 800a0f0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a0f4:	4330      	orrs	r0, r6
 800a0f6:	d0f5      	beq.n	800a0e4 <__ieee754_sqrt+0x34>
 800a0f8:	b15d      	cbz	r5, 800a112 <__ieee754_sqrt+0x62>
 800a0fa:	ee10 2a10 	vmov	r2, s0
 800a0fe:	462b      	mov	r3, r5
 800a100:	ee10 0a10 	vmov	r0, s0
 800a104:	f7f6 f8e0 	bl	80002c8 <__aeabi_dsub>
 800a108:	4602      	mov	r2, r0
 800a10a:	460b      	mov	r3, r1
 800a10c:	f7f6 fbbe 	bl	800088c <__aeabi_ddiv>
 800a110:	e7e6      	b.n	800a0e0 <__ieee754_sqrt+0x30>
 800a112:	1512      	asrs	r2, r2, #20
 800a114:	d074      	beq.n	800a200 <__ieee754_sqrt+0x150>
 800a116:	07d4      	lsls	r4, r2, #31
 800a118:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a11c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a120:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a124:	bf5e      	ittt	pl
 800a126:	0fda      	lsrpl	r2, r3, #31
 800a128:	005b      	lslpl	r3, r3, #1
 800a12a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a12e:	2400      	movs	r4, #0
 800a130:	0fda      	lsrs	r2, r3, #31
 800a132:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a136:	107f      	asrs	r7, r7, #1
 800a138:	005b      	lsls	r3, r3, #1
 800a13a:	2516      	movs	r5, #22
 800a13c:	4620      	mov	r0, r4
 800a13e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a142:	1886      	adds	r6, r0, r2
 800a144:	428e      	cmp	r6, r1
 800a146:	bfde      	ittt	le
 800a148:	1b89      	suble	r1, r1, r6
 800a14a:	18b0      	addle	r0, r6, r2
 800a14c:	18a4      	addle	r4, r4, r2
 800a14e:	0049      	lsls	r1, r1, #1
 800a150:	3d01      	subs	r5, #1
 800a152:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a156:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a15a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a15e:	d1f0      	bne.n	800a142 <__ieee754_sqrt+0x92>
 800a160:	462a      	mov	r2, r5
 800a162:	f04f 0e20 	mov.w	lr, #32
 800a166:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a16a:	4281      	cmp	r1, r0
 800a16c:	eb06 0c05 	add.w	ip, r6, r5
 800a170:	dc02      	bgt.n	800a178 <__ieee754_sqrt+0xc8>
 800a172:	d113      	bne.n	800a19c <__ieee754_sqrt+0xec>
 800a174:	459c      	cmp	ip, r3
 800a176:	d811      	bhi.n	800a19c <__ieee754_sqrt+0xec>
 800a178:	f1bc 0f00 	cmp.w	ip, #0
 800a17c:	eb0c 0506 	add.w	r5, ip, r6
 800a180:	da43      	bge.n	800a20a <__ieee754_sqrt+0x15a>
 800a182:	2d00      	cmp	r5, #0
 800a184:	db41      	blt.n	800a20a <__ieee754_sqrt+0x15a>
 800a186:	f100 0801 	add.w	r8, r0, #1
 800a18a:	1a09      	subs	r1, r1, r0
 800a18c:	459c      	cmp	ip, r3
 800a18e:	bf88      	it	hi
 800a190:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800a194:	eba3 030c 	sub.w	r3, r3, ip
 800a198:	4432      	add	r2, r6
 800a19a:	4640      	mov	r0, r8
 800a19c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a1a0:	f1be 0e01 	subs.w	lr, lr, #1
 800a1a4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a1a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a1ac:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a1b0:	d1db      	bne.n	800a16a <__ieee754_sqrt+0xba>
 800a1b2:	430b      	orrs	r3, r1
 800a1b4:	d006      	beq.n	800a1c4 <__ieee754_sqrt+0x114>
 800a1b6:	1c50      	adds	r0, r2, #1
 800a1b8:	bf13      	iteet	ne
 800a1ba:	3201      	addne	r2, #1
 800a1bc:	3401      	addeq	r4, #1
 800a1be:	4672      	moveq	r2, lr
 800a1c0:	f022 0201 	bicne.w	r2, r2, #1
 800a1c4:	1063      	asrs	r3, r4, #1
 800a1c6:	0852      	lsrs	r2, r2, #1
 800a1c8:	07e1      	lsls	r1, r4, #31
 800a1ca:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a1ce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a1d2:	bf48      	it	mi
 800a1d4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a1d8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a1dc:	4614      	mov	r4, r2
 800a1de:	e781      	b.n	800a0e4 <__ieee754_sqrt+0x34>
 800a1e0:	0ad9      	lsrs	r1, r3, #11
 800a1e2:	3815      	subs	r0, #21
 800a1e4:	055b      	lsls	r3, r3, #21
 800a1e6:	2900      	cmp	r1, #0
 800a1e8:	d0fa      	beq.n	800a1e0 <__ieee754_sqrt+0x130>
 800a1ea:	02cd      	lsls	r5, r1, #11
 800a1ec:	d50a      	bpl.n	800a204 <__ieee754_sqrt+0x154>
 800a1ee:	f1c2 0420 	rsb	r4, r2, #32
 800a1f2:	fa23 f404 	lsr.w	r4, r3, r4
 800a1f6:	1e55      	subs	r5, r2, #1
 800a1f8:	4093      	lsls	r3, r2
 800a1fa:	4321      	orrs	r1, r4
 800a1fc:	1b42      	subs	r2, r0, r5
 800a1fe:	e78a      	b.n	800a116 <__ieee754_sqrt+0x66>
 800a200:	4610      	mov	r0, r2
 800a202:	e7f0      	b.n	800a1e6 <__ieee754_sqrt+0x136>
 800a204:	0049      	lsls	r1, r1, #1
 800a206:	3201      	adds	r2, #1
 800a208:	e7ef      	b.n	800a1ea <__ieee754_sqrt+0x13a>
 800a20a:	4680      	mov	r8, r0
 800a20c:	e7bd      	b.n	800a18a <__ieee754_sqrt+0xda>
 800a20e:	bf00      	nop
 800a210:	7ff00000 	.word	0x7ff00000
 800a214:	00000000 	.word	0x00000000

0800a218 <__kernel_cos>:
 800a218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21c:	ec57 6b10 	vmov	r6, r7, d0
 800a220:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a224:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a228:	ed8d 1b00 	vstr	d1, [sp]
 800a22c:	da07      	bge.n	800a23e <__kernel_cos+0x26>
 800a22e:	ee10 0a10 	vmov	r0, s0
 800a232:	4639      	mov	r1, r7
 800a234:	f7f6 fcb0 	bl	8000b98 <__aeabi_d2iz>
 800a238:	2800      	cmp	r0, #0
 800a23a:	f000 8088 	beq.w	800a34e <__kernel_cos+0x136>
 800a23e:	4632      	mov	r2, r6
 800a240:	463b      	mov	r3, r7
 800a242:	4630      	mov	r0, r6
 800a244:	4639      	mov	r1, r7
 800a246:	f7f6 f9f7 	bl	8000638 <__aeabi_dmul>
 800a24a:	4b51      	ldr	r3, [pc, #324]	; (800a390 <__kernel_cos+0x178>)
 800a24c:	2200      	movs	r2, #0
 800a24e:	4604      	mov	r4, r0
 800a250:	460d      	mov	r5, r1
 800a252:	f7f6 f9f1 	bl	8000638 <__aeabi_dmul>
 800a256:	a340      	add	r3, pc, #256	; (adr r3, 800a358 <__kernel_cos+0x140>)
 800a258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25c:	4682      	mov	sl, r0
 800a25e:	468b      	mov	fp, r1
 800a260:	4620      	mov	r0, r4
 800a262:	4629      	mov	r1, r5
 800a264:	f7f6 f9e8 	bl	8000638 <__aeabi_dmul>
 800a268:	a33d      	add	r3, pc, #244	; (adr r3, 800a360 <__kernel_cos+0x148>)
 800a26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26e:	f7f6 f82d 	bl	80002cc <__adddf3>
 800a272:	4622      	mov	r2, r4
 800a274:	462b      	mov	r3, r5
 800a276:	f7f6 f9df 	bl	8000638 <__aeabi_dmul>
 800a27a:	a33b      	add	r3, pc, #236	; (adr r3, 800a368 <__kernel_cos+0x150>)
 800a27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a280:	f7f6 f822 	bl	80002c8 <__aeabi_dsub>
 800a284:	4622      	mov	r2, r4
 800a286:	462b      	mov	r3, r5
 800a288:	f7f6 f9d6 	bl	8000638 <__aeabi_dmul>
 800a28c:	a338      	add	r3, pc, #224	; (adr r3, 800a370 <__kernel_cos+0x158>)
 800a28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a292:	f7f6 f81b 	bl	80002cc <__adddf3>
 800a296:	4622      	mov	r2, r4
 800a298:	462b      	mov	r3, r5
 800a29a:	f7f6 f9cd 	bl	8000638 <__aeabi_dmul>
 800a29e:	a336      	add	r3, pc, #216	; (adr r3, 800a378 <__kernel_cos+0x160>)
 800a2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a4:	f7f6 f810 	bl	80002c8 <__aeabi_dsub>
 800a2a8:	4622      	mov	r2, r4
 800a2aa:	462b      	mov	r3, r5
 800a2ac:	f7f6 f9c4 	bl	8000638 <__aeabi_dmul>
 800a2b0:	a333      	add	r3, pc, #204	; (adr r3, 800a380 <__kernel_cos+0x168>)
 800a2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b6:	f7f6 f809 	bl	80002cc <__adddf3>
 800a2ba:	4622      	mov	r2, r4
 800a2bc:	462b      	mov	r3, r5
 800a2be:	f7f6 f9bb 	bl	8000638 <__aeabi_dmul>
 800a2c2:	4622      	mov	r2, r4
 800a2c4:	462b      	mov	r3, r5
 800a2c6:	f7f6 f9b7 	bl	8000638 <__aeabi_dmul>
 800a2ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	460d      	mov	r5, r1
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	4639      	mov	r1, r7
 800a2d6:	f7f6 f9af 	bl	8000638 <__aeabi_dmul>
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4602      	mov	r2, r0
 800a2de:	4629      	mov	r1, r5
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	f7f5 fff1 	bl	80002c8 <__aeabi_dsub>
 800a2e6:	4b2b      	ldr	r3, [pc, #172]	; (800a394 <__kernel_cos+0x17c>)
 800a2e8:	4598      	cmp	r8, r3
 800a2ea:	4606      	mov	r6, r0
 800a2ec:	460f      	mov	r7, r1
 800a2ee:	dc10      	bgt.n	800a312 <__kernel_cos+0xfa>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4650      	mov	r0, sl
 800a2f6:	4659      	mov	r1, fp
 800a2f8:	f7f5 ffe6 	bl	80002c8 <__aeabi_dsub>
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	4926      	ldr	r1, [pc, #152]	; (800a398 <__kernel_cos+0x180>)
 800a300:	4602      	mov	r2, r0
 800a302:	2000      	movs	r0, #0
 800a304:	f7f5 ffe0 	bl	80002c8 <__aeabi_dsub>
 800a308:	ec41 0b10 	vmov	d0, r0, r1
 800a30c:	b003      	add	sp, #12
 800a30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a312:	4b22      	ldr	r3, [pc, #136]	; (800a39c <__kernel_cos+0x184>)
 800a314:	4920      	ldr	r1, [pc, #128]	; (800a398 <__kernel_cos+0x180>)
 800a316:	4598      	cmp	r8, r3
 800a318:	bfcc      	ite	gt
 800a31a:	4d21      	ldrgt	r5, [pc, #132]	; (800a3a0 <__kernel_cos+0x188>)
 800a31c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a320:	2400      	movs	r4, #0
 800a322:	4622      	mov	r2, r4
 800a324:	462b      	mov	r3, r5
 800a326:	2000      	movs	r0, #0
 800a328:	f7f5 ffce 	bl	80002c8 <__aeabi_dsub>
 800a32c:	4622      	mov	r2, r4
 800a32e:	4680      	mov	r8, r0
 800a330:	4689      	mov	r9, r1
 800a332:	462b      	mov	r3, r5
 800a334:	4650      	mov	r0, sl
 800a336:	4659      	mov	r1, fp
 800a338:	f7f5 ffc6 	bl	80002c8 <__aeabi_dsub>
 800a33c:	4632      	mov	r2, r6
 800a33e:	463b      	mov	r3, r7
 800a340:	f7f5 ffc2 	bl	80002c8 <__aeabi_dsub>
 800a344:	4602      	mov	r2, r0
 800a346:	460b      	mov	r3, r1
 800a348:	4640      	mov	r0, r8
 800a34a:	4649      	mov	r1, r9
 800a34c:	e7da      	b.n	800a304 <__kernel_cos+0xec>
 800a34e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a388 <__kernel_cos+0x170>
 800a352:	e7db      	b.n	800a30c <__kernel_cos+0xf4>
 800a354:	f3af 8000 	nop.w
 800a358:	be8838d4 	.word	0xbe8838d4
 800a35c:	bda8fae9 	.word	0xbda8fae9
 800a360:	bdb4b1c4 	.word	0xbdb4b1c4
 800a364:	3e21ee9e 	.word	0x3e21ee9e
 800a368:	809c52ad 	.word	0x809c52ad
 800a36c:	3e927e4f 	.word	0x3e927e4f
 800a370:	19cb1590 	.word	0x19cb1590
 800a374:	3efa01a0 	.word	0x3efa01a0
 800a378:	16c15177 	.word	0x16c15177
 800a37c:	3f56c16c 	.word	0x3f56c16c
 800a380:	5555554c 	.word	0x5555554c
 800a384:	3fa55555 	.word	0x3fa55555
 800a388:	00000000 	.word	0x00000000
 800a38c:	3ff00000 	.word	0x3ff00000
 800a390:	3fe00000 	.word	0x3fe00000
 800a394:	3fd33332 	.word	0x3fd33332
 800a398:	3ff00000 	.word	0x3ff00000
 800a39c:	3fe90000 	.word	0x3fe90000
 800a3a0:	3fd20000 	.word	0x3fd20000
 800a3a4:	00000000 	.word	0x00000000

0800a3a8 <__kernel_rem_pio2>:
 800a3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ac:	ed2d 8b02 	vpush	{d8}
 800a3b0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a3b4:	f112 0f14 	cmn.w	r2, #20
 800a3b8:	9308      	str	r3, [sp, #32]
 800a3ba:	9101      	str	r1, [sp, #4]
 800a3bc:	4bc4      	ldr	r3, [pc, #784]	; (800a6d0 <__kernel_rem_pio2+0x328>)
 800a3be:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a3c0:	900b      	str	r0, [sp, #44]	; 0x2c
 800a3c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a3c6:	9302      	str	r3, [sp, #8]
 800a3c8:	9b08      	ldr	r3, [sp, #32]
 800a3ca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a3ce:	bfa8      	it	ge
 800a3d0:	1ed4      	subge	r4, r2, #3
 800a3d2:	9306      	str	r3, [sp, #24]
 800a3d4:	bfb2      	itee	lt
 800a3d6:	2400      	movlt	r4, #0
 800a3d8:	2318      	movge	r3, #24
 800a3da:	fb94 f4f3 	sdivge	r4, r4, r3
 800a3de:	f06f 0317 	mvn.w	r3, #23
 800a3e2:	fb04 3303 	mla	r3, r4, r3, r3
 800a3e6:	eb03 0a02 	add.w	sl, r3, r2
 800a3ea:	9b02      	ldr	r3, [sp, #8]
 800a3ec:	9a06      	ldr	r2, [sp, #24]
 800a3ee:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a6c0 <__kernel_rem_pio2+0x318>
 800a3f2:	eb03 0802 	add.w	r8, r3, r2
 800a3f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a3f8:	1aa7      	subs	r7, r4, r2
 800a3fa:	ae22      	add	r6, sp, #136	; 0x88
 800a3fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a400:	2500      	movs	r5, #0
 800a402:	4545      	cmp	r5, r8
 800a404:	dd13      	ble.n	800a42e <__kernel_rem_pio2+0x86>
 800a406:	9b08      	ldr	r3, [sp, #32]
 800a408:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a6c0 <__kernel_rem_pio2+0x318>
 800a40c:	aa22      	add	r2, sp, #136	; 0x88
 800a40e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a412:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a416:	f04f 0800 	mov.w	r8, #0
 800a41a:	9b02      	ldr	r3, [sp, #8]
 800a41c:	4598      	cmp	r8, r3
 800a41e:	dc2f      	bgt.n	800a480 <__kernel_rem_pio2+0xd8>
 800a420:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a424:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a428:	462f      	mov	r7, r5
 800a42a:	2600      	movs	r6, #0
 800a42c:	e01b      	b.n	800a466 <__kernel_rem_pio2+0xbe>
 800a42e:	42ef      	cmn	r7, r5
 800a430:	d407      	bmi.n	800a442 <__kernel_rem_pio2+0x9a>
 800a432:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a436:	f7f6 f895 	bl	8000564 <__aeabi_i2d>
 800a43a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a43e:	3501      	adds	r5, #1
 800a440:	e7df      	b.n	800a402 <__kernel_rem_pio2+0x5a>
 800a442:	ec51 0b18 	vmov	r0, r1, d8
 800a446:	e7f8      	b.n	800a43a <__kernel_rem_pio2+0x92>
 800a448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a44c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a450:	f7f6 f8f2 	bl	8000638 <__aeabi_dmul>
 800a454:	4602      	mov	r2, r0
 800a456:	460b      	mov	r3, r1
 800a458:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a45c:	f7f5 ff36 	bl	80002cc <__adddf3>
 800a460:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a464:	3601      	adds	r6, #1
 800a466:	9b06      	ldr	r3, [sp, #24]
 800a468:	429e      	cmp	r6, r3
 800a46a:	f1a7 0708 	sub.w	r7, r7, #8
 800a46e:	ddeb      	ble.n	800a448 <__kernel_rem_pio2+0xa0>
 800a470:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a474:	f108 0801 	add.w	r8, r8, #1
 800a478:	ecab 7b02 	vstmia	fp!, {d7}
 800a47c:	3508      	adds	r5, #8
 800a47e:	e7cc      	b.n	800a41a <__kernel_rem_pio2+0x72>
 800a480:	9b02      	ldr	r3, [sp, #8]
 800a482:	aa0e      	add	r2, sp, #56	; 0x38
 800a484:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a488:	930d      	str	r3, [sp, #52]	; 0x34
 800a48a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a48c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a490:	9c02      	ldr	r4, [sp, #8]
 800a492:	930c      	str	r3, [sp, #48]	; 0x30
 800a494:	00e3      	lsls	r3, r4, #3
 800a496:	930a      	str	r3, [sp, #40]	; 0x28
 800a498:	ab9a      	add	r3, sp, #616	; 0x268
 800a49a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a49e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a4a2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a4a6:	ab72      	add	r3, sp, #456	; 0x1c8
 800a4a8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a4ac:	46c3      	mov	fp, r8
 800a4ae:	46a1      	mov	r9, r4
 800a4b0:	f1b9 0f00 	cmp.w	r9, #0
 800a4b4:	f1a5 0508 	sub.w	r5, r5, #8
 800a4b8:	dc77      	bgt.n	800a5aa <__kernel_rem_pio2+0x202>
 800a4ba:	ec47 6b10 	vmov	d0, r6, r7
 800a4be:	4650      	mov	r0, sl
 800a4c0:	f000 fdb6 	bl	800b030 <scalbn>
 800a4c4:	ec57 6b10 	vmov	r6, r7, d0
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a4ce:	ee10 0a10 	vmov	r0, s0
 800a4d2:	4639      	mov	r1, r7
 800a4d4:	f7f6 f8b0 	bl	8000638 <__aeabi_dmul>
 800a4d8:	ec41 0b10 	vmov	d0, r0, r1
 800a4dc:	f000 fd20 	bl	800af20 <floor>
 800a4e0:	4b7c      	ldr	r3, [pc, #496]	; (800a6d4 <__kernel_rem_pio2+0x32c>)
 800a4e2:	ec51 0b10 	vmov	r0, r1, d0
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f7f6 f8a6 	bl	8000638 <__aeabi_dmul>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	4639      	mov	r1, r7
 800a4f4:	f7f5 fee8 	bl	80002c8 <__aeabi_dsub>
 800a4f8:	460f      	mov	r7, r1
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	f7f6 fb4c 	bl	8000b98 <__aeabi_d2iz>
 800a500:	9004      	str	r0, [sp, #16]
 800a502:	f7f6 f82f 	bl	8000564 <__aeabi_i2d>
 800a506:	4602      	mov	r2, r0
 800a508:	460b      	mov	r3, r1
 800a50a:	4630      	mov	r0, r6
 800a50c:	4639      	mov	r1, r7
 800a50e:	f7f5 fedb 	bl	80002c8 <__aeabi_dsub>
 800a512:	f1ba 0f00 	cmp.w	sl, #0
 800a516:	4606      	mov	r6, r0
 800a518:	460f      	mov	r7, r1
 800a51a:	dd6d      	ble.n	800a5f8 <__kernel_rem_pio2+0x250>
 800a51c:	1e62      	subs	r2, r4, #1
 800a51e:	ab0e      	add	r3, sp, #56	; 0x38
 800a520:	9d04      	ldr	r5, [sp, #16]
 800a522:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a526:	f1ca 0118 	rsb	r1, sl, #24
 800a52a:	fa40 f301 	asr.w	r3, r0, r1
 800a52e:	441d      	add	r5, r3
 800a530:	408b      	lsls	r3, r1
 800a532:	1ac0      	subs	r0, r0, r3
 800a534:	ab0e      	add	r3, sp, #56	; 0x38
 800a536:	9504      	str	r5, [sp, #16]
 800a538:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a53c:	f1ca 0317 	rsb	r3, sl, #23
 800a540:	fa40 fb03 	asr.w	fp, r0, r3
 800a544:	f1bb 0f00 	cmp.w	fp, #0
 800a548:	dd65      	ble.n	800a616 <__kernel_rem_pio2+0x26e>
 800a54a:	9b04      	ldr	r3, [sp, #16]
 800a54c:	2200      	movs	r2, #0
 800a54e:	3301      	adds	r3, #1
 800a550:	9304      	str	r3, [sp, #16]
 800a552:	4615      	mov	r5, r2
 800a554:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a558:	4294      	cmp	r4, r2
 800a55a:	f300 809c 	bgt.w	800a696 <__kernel_rem_pio2+0x2ee>
 800a55e:	f1ba 0f00 	cmp.w	sl, #0
 800a562:	dd07      	ble.n	800a574 <__kernel_rem_pio2+0x1cc>
 800a564:	f1ba 0f01 	cmp.w	sl, #1
 800a568:	f000 80c0 	beq.w	800a6ec <__kernel_rem_pio2+0x344>
 800a56c:	f1ba 0f02 	cmp.w	sl, #2
 800a570:	f000 80c6 	beq.w	800a700 <__kernel_rem_pio2+0x358>
 800a574:	f1bb 0f02 	cmp.w	fp, #2
 800a578:	d14d      	bne.n	800a616 <__kernel_rem_pio2+0x26e>
 800a57a:	4632      	mov	r2, r6
 800a57c:	463b      	mov	r3, r7
 800a57e:	4956      	ldr	r1, [pc, #344]	; (800a6d8 <__kernel_rem_pio2+0x330>)
 800a580:	2000      	movs	r0, #0
 800a582:	f7f5 fea1 	bl	80002c8 <__aeabi_dsub>
 800a586:	4606      	mov	r6, r0
 800a588:	460f      	mov	r7, r1
 800a58a:	2d00      	cmp	r5, #0
 800a58c:	d043      	beq.n	800a616 <__kernel_rem_pio2+0x26e>
 800a58e:	4650      	mov	r0, sl
 800a590:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a6c8 <__kernel_rem_pio2+0x320>
 800a594:	f000 fd4c 	bl	800b030 <scalbn>
 800a598:	4630      	mov	r0, r6
 800a59a:	4639      	mov	r1, r7
 800a59c:	ec53 2b10 	vmov	r2, r3, d0
 800a5a0:	f7f5 fe92 	bl	80002c8 <__aeabi_dsub>
 800a5a4:	4606      	mov	r6, r0
 800a5a6:	460f      	mov	r7, r1
 800a5a8:	e035      	b.n	800a616 <__kernel_rem_pio2+0x26e>
 800a5aa:	4b4c      	ldr	r3, [pc, #304]	; (800a6dc <__kernel_rem_pio2+0x334>)
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	4630      	mov	r0, r6
 800a5b0:	4639      	mov	r1, r7
 800a5b2:	f7f6 f841 	bl	8000638 <__aeabi_dmul>
 800a5b6:	f7f6 faef 	bl	8000b98 <__aeabi_d2iz>
 800a5ba:	f7f5 ffd3 	bl	8000564 <__aeabi_i2d>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	ec43 2b18 	vmov	d8, r2, r3
 800a5c6:	4b46      	ldr	r3, [pc, #280]	; (800a6e0 <__kernel_rem_pio2+0x338>)
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f7f6 f835 	bl	8000638 <__aeabi_dmul>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	4639      	mov	r1, r7
 800a5d6:	f7f5 fe77 	bl	80002c8 <__aeabi_dsub>
 800a5da:	f7f6 fadd 	bl	8000b98 <__aeabi_d2iz>
 800a5de:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5e2:	f84b 0b04 	str.w	r0, [fp], #4
 800a5e6:	ec51 0b18 	vmov	r0, r1, d8
 800a5ea:	f7f5 fe6f 	bl	80002cc <__adddf3>
 800a5ee:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	460f      	mov	r7, r1
 800a5f6:	e75b      	b.n	800a4b0 <__kernel_rem_pio2+0x108>
 800a5f8:	d106      	bne.n	800a608 <__kernel_rem_pio2+0x260>
 800a5fa:	1e63      	subs	r3, r4, #1
 800a5fc:	aa0e      	add	r2, sp, #56	; 0x38
 800a5fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a602:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a606:	e79d      	b.n	800a544 <__kernel_rem_pio2+0x19c>
 800a608:	4b36      	ldr	r3, [pc, #216]	; (800a6e4 <__kernel_rem_pio2+0x33c>)
 800a60a:	2200      	movs	r2, #0
 800a60c:	f7f6 fa9a 	bl	8000b44 <__aeabi_dcmpge>
 800a610:	2800      	cmp	r0, #0
 800a612:	d13d      	bne.n	800a690 <__kernel_rem_pio2+0x2e8>
 800a614:	4683      	mov	fp, r0
 800a616:	2200      	movs	r2, #0
 800a618:	2300      	movs	r3, #0
 800a61a:	4630      	mov	r0, r6
 800a61c:	4639      	mov	r1, r7
 800a61e:	f7f6 fa73 	bl	8000b08 <__aeabi_dcmpeq>
 800a622:	2800      	cmp	r0, #0
 800a624:	f000 80c0 	beq.w	800a7a8 <__kernel_rem_pio2+0x400>
 800a628:	1e65      	subs	r5, r4, #1
 800a62a:	462b      	mov	r3, r5
 800a62c:	2200      	movs	r2, #0
 800a62e:	9902      	ldr	r1, [sp, #8]
 800a630:	428b      	cmp	r3, r1
 800a632:	da6c      	bge.n	800a70e <__kernel_rem_pio2+0x366>
 800a634:	2a00      	cmp	r2, #0
 800a636:	f000 8089 	beq.w	800a74c <__kernel_rem_pio2+0x3a4>
 800a63a:	ab0e      	add	r3, sp, #56	; 0x38
 800a63c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a640:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a644:	2b00      	cmp	r3, #0
 800a646:	f000 80ad 	beq.w	800a7a4 <__kernel_rem_pio2+0x3fc>
 800a64a:	4650      	mov	r0, sl
 800a64c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a6c8 <__kernel_rem_pio2+0x320>
 800a650:	f000 fcee 	bl	800b030 <scalbn>
 800a654:	ab9a      	add	r3, sp, #616	; 0x268
 800a656:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a65a:	ec57 6b10 	vmov	r6, r7, d0
 800a65e:	00ec      	lsls	r4, r5, #3
 800a660:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a664:	46aa      	mov	sl, r5
 800a666:	f1ba 0f00 	cmp.w	sl, #0
 800a66a:	f280 80d6 	bge.w	800a81a <__kernel_rem_pio2+0x472>
 800a66e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a6c0 <__kernel_rem_pio2+0x318>
 800a672:	462e      	mov	r6, r5
 800a674:	2e00      	cmp	r6, #0
 800a676:	f2c0 8104 	blt.w	800a882 <__kernel_rem_pio2+0x4da>
 800a67a:	ab72      	add	r3, sp, #456	; 0x1c8
 800a67c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a680:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a6e8 <__kernel_rem_pio2+0x340>
 800a684:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a688:	f04f 0800 	mov.w	r8, #0
 800a68c:	1baf      	subs	r7, r5, r6
 800a68e:	e0ea      	b.n	800a866 <__kernel_rem_pio2+0x4be>
 800a690:	f04f 0b02 	mov.w	fp, #2
 800a694:	e759      	b.n	800a54a <__kernel_rem_pio2+0x1a2>
 800a696:	f8d8 3000 	ldr.w	r3, [r8]
 800a69a:	b955      	cbnz	r5, 800a6b2 <__kernel_rem_pio2+0x30a>
 800a69c:	b123      	cbz	r3, 800a6a8 <__kernel_rem_pio2+0x300>
 800a69e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a6a2:	f8c8 3000 	str.w	r3, [r8]
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	3201      	adds	r2, #1
 800a6aa:	f108 0804 	add.w	r8, r8, #4
 800a6ae:	461d      	mov	r5, r3
 800a6b0:	e752      	b.n	800a558 <__kernel_rem_pio2+0x1b0>
 800a6b2:	1acb      	subs	r3, r1, r3
 800a6b4:	f8c8 3000 	str.w	r3, [r8]
 800a6b8:	462b      	mov	r3, r5
 800a6ba:	e7f5      	b.n	800a6a8 <__kernel_rem_pio2+0x300>
 800a6bc:	f3af 8000 	nop.w
	...
 800a6cc:	3ff00000 	.word	0x3ff00000
 800a6d0:	0800b768 	.word	0x0800b768
 800a6d4:	40200000 	.word	0x40200000
 800a6d8:	3ff00000 	.word	0x3ff00000
 800a6dc:	3e700000 	.word	0x3e700000
 800a6e0:	41700000 	.word	0x41700000
 800a6e4:	3fe00000 	.word	0x3fe00000
 800a6e8:	0800b728 	.word	0x0800b728
 800a6ec:	1e62      	subs	r2, r4, #1
 800a6ee:	ab0e      	add	r3, sp, #56	; 0x38
 800a6f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a6f8:	a90e      	add	r1, sp, #56	; 0x38
 800a6fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a6fe:	e739      	b.n	800a574 <__kernel_rem_pio2+0x1cc>
 800a700:	1e62      	subs	r2, r4, #1
 800a702:	ab0e      	add	r3, sp, #56	; 0x38
 800a704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a708:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a70c:	e7f4      	b.n	800a6f8 <__kernel_rem_pio2+0x350>
 800a70e:	a90e      	add	r1, sp, #56	; 0x38
 800a710:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a714:	3b01      	subs	r3, #1
 800a716:	430a      	orrs	r2, r1
 800a718:	e789      	b.n	800a62e <__kernel_rem_pio2+0x286>
 800a71a:	3301      	adds	r3, #1
 800a71c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a720:	2900      	cmp	r1, #0
 800a722:	d0fa      	beq.n	800a71a <__kernel_rem_pio2+0x372>
 800a724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a726:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a72a:	446a      	add	r2, sp
 800a72c:	3a98      	subs	r2, #152	; 0x98
 800a72e:	920a      	str	r2, [sp, #40]	; 0x28
 800a730:	9a08      	ldr	r2, [sp, #32]
 800a732:	18e3      	adds	r3, r4, r3
 800a734:	18a5      	adds	r5, r4, r2
 800a736:	aa22      	add	r2, sp, #136	; 0x88
 800a738:	f104 0801 	add.w	r8, r4, #1
 800a73c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a740:	9304      	str	r3, [sp, #16]
 800a742:	9b04      	ldr	r3, [sp, #16]
 800a744:	4543      	cmp	r3, r8
 800a746:	da04      	bge.n	800a752 <__kernel_rem_pio2+0x3aa>
 800a748:	461c      	mov	r4, r3
 800a74a:	e6a3      	b.n	800a494 <__kernel_rem_pio2+0xec>
 800a74c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a74e:	2301      	movs	r3, #1
 800a750:	e7e4      	b.n	800a71c <__kernel_rem_pio2+0x374>
 800a752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a754:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a758:	f7f5 ff04 	bl	8000564 <__aeabi_i2d>
 800a75c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a762:	46ab      	mov	fp, r5
 800a764:	461c      	mov	r4, r3
 800a766:	f04f 0900 	mov.w	r9, #0
 800a76a:	2600      	movs	r6, #0
 800a76c:	2700      	movs	r7, #0
 800a76e:	9b06      	ldr	r3, [sp, #24]
 800a770:	4599      	cmp	r9, r3
 800a772:	dd06      	ble.n	800a782 <__kernel_rem_pio2+0x3da>
 800a774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a776:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a77a:	f108 0801 	add.w	r8, r8, #1
 800a77e:	930a      	str	r3, [sp, #40]	; 0x28
 800a780:	e7df      	b.n	800a742 <__kernel_rem_pio2+0x39a>
 800a782:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a786:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a78a:	f7f5 ff55 	bl	8000638 <__aeabi_dmul>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	4630      	mov	r0, r6
 800a794:	4639      	mov	r1, r7
 800a796:	f7f5 fd99 	bl	80002cc <__adddf3>
 800a79a:	f109 0901 	add.w	r9, r9, #1
 800a79e:	4606      	mov	r6, r0
 800a7a0:	460f      	mov	r7, r1
 800a7a2:	e7e4      	b.n	800a76e <__kernel_rem_pio2+0x3c6>
 800a7a4:	3d01      	subs	r5, #1
 800a7a6:	e748      	b.n	800a63a <__kernel_rem_pio2+0x292>
 800a7a8:	ec47 6b10 	vmov	d0, r6, r7
 800a7ac:	f1ca 0000 	rsb	r0, sl, #0
 800a7b0:	f000 fc3e 	bl	800b030 <scalbn>
 800a7b4:	ec57 6b10 	vmov	r6, r7, d0
 800a7b8:	4ba0      	ldr	r3, [pc, #640]	; (800aa3c <__kernel_rem_pio2+0x694>)
 800a7ba:	ee10 0a10 	vmov	r0, s0
 800a7be:	2200      	movs	r2, #0
 800a7c0:	4639      	mov	r1, r7
 800a7c2:	f7f6 f9bf 	bl	8000b44 <__aeabi_dcmpge>
 800a7c6:	b1f8      	cbz	r0, 800a808 <__kernel_rem_pio2+0x460>
 800a7c8:	4b9d      	ldr	r3, [pc, #628]	; (800aa40 <__kernel_rem_pio2+0x698>)
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	4639      	mov	r1, r7
 800a7d0:	f7f5 ff32 	bl	8000638 <__aeabi_dmul>
 800a7d4:	f7f6 f9e0 	bl	8000b98 <__aeabi_d2iz>
 800a7d8:	4680      	mov	r8, r0
 800a7da:	f7f5 fec3 	bl	8000564 <__aeabi_i2d>
 800a7de:	4b97      	ldr	r3, [pc, #604]	; (800aa3c <__kernel_rem_pio2+0x694>)
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f7f5 ff29 	bl	8000638 <__aeabi_dmul>
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	f7f5 fd6b 	bl	80002c8 <__aeabi_dsub>
 800a7f2:	f7f6 f9d1 	bl	8000b98 <__aeabi_d2iz>
 800a7f6:	1c65      	adds	r5, r4, #1
 800a7f8:	ab0e      	add	r3, sp, #56	; 0x38
 800a7fa:	f10a 0a18 	add.w	sl, sl, #24
 800a7fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a802:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a806:	e720      	b.n	800a64a <__kernel_rem_pio2+0x2a2>
 800a808:	4630      	mov	r0, r6
 800a80a:	4639      	mov	r1, r7
 800a80c:	f7f6 f9c4 	bl	8000b98 <__aeabi_d2iz>
 800a810:	ab0e      	add	r3, sp, #56	; 0x38
 800a812:	4625      	mov	r5, r4
 800a814:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a818:	e717      	b.n	800a64a <__kernel_rem_pio2+0x2a2>
 800a81a:	ab0e      	add	r3, sp, #56	; 0x38
 800a81c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a820:	f7f5 fea0 	bl	8000564 <__aeabi_i2d>
 800a824:	4632      	mov	r2, r6
 800a826:	463b      	mov	r3, r7
 800a828:	f7f5 ff06 	bl	8000638 <__aeabi_dmul>
 800a82c:	4b84      	ldr	r3, [pc, #528]	; (800aa40 <__kernel_rem_pio2+0x698>)
 800a82e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a832:	2200      	movs	r2, #0
 800a834:	4630      	mov	r0, r6
 800a836:	4639      	mov	r1, r7
 800a838:	f7f5 fefe 	bl	8000638 <__aeabi_dmul>
 800a83c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a840:	4606      	mov	r6, r0
 800a842:	460f      	mov	r7, r1
 800a844:	e70f      	b.n	800a666 <__kernel_rem_pio2+0x2be>
 800a846:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a84a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a84e:	f7f5 fef3 	bl	8000638 <__aeabi_dmul>
 800a852:	4602      	mov	r2, r0
 800a854:	460b      	mov	r3, r1
 800a856:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a85a:	f7f5 fd37 	bl	80002cc <__adddf3>
 800a85e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a862:	f108 0801 	add.w	r8, r8, #1
 800a866:	9b02      	ldr	r3, [sp, #8]
 800a868:	4598      	cmp	r8, r3
 800a86a:	dc01      	bgt.n	800a870 <__kernel_rem_pio2+0x4c8>
 800a86c:	45b8      	cmp	r8, r7
 800a86e:	ddea      	ble.n	800a846 <__kernel_rem_pio2+0x49e>
 800a870:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a874:	ab4a      	add	r3, sp, #296	; 0x128
 800a876:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a87a:	ed87 7b00 	vstr	d7, [r7]
 800a87e:	3e01      	subs	r6, #1
 800a880:	e6f8      	b.n	800a674 <__kernel_rem_pio2+0x2cc>
 800a882:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a884:	2b02      	cmp	r3, #2
 800a886:	dc0b      	bgt.n	800a8a0 <__kernel_rem_pio2+0x4f8>
 800a888:	2b00      	cmp	r3, #0
 800a88a:	dc35      	bgt.n	800a8f8 <__kernel_rem_pio2+0x550>
 800a88c:	d059      	beq.n	800a942 <__kernel_rem_pio2+0x59a>
 800a88e:	9b04      	ldr	r3, [sp, #16]
 800a890:	f003 0007 	and.w	r0, r3, #7
 800a894:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a898:	ecbd 8b02 	vpop	{d8}
 800a89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a8a2:	2b03      	cmp	r3, #3
 800a8a4:	d1f3      	bne.n	800a88e <__kernel_rem_pio2+0x4e6>
 800a8a6:	ab4a      	add	r3, sp, #296	; 0x128
 800a8a8:	4423      	add	r3, r4
 800a8aa:	9306      	str	r3, [sp, #24]
 800a8ac:	461c      	mov	r4, r3
 800a8ae:	469a      	mov	sl, r3
 800a8b0:	9502      	str	r5, [sp, #8]
 800a8b2:	9b02      	ldr	r3, [sp, #8]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f1aa 0a08 	sub.w	sl, sl, #8
 800a8ba:	dc6b      	bgt.n	800a994 <__kernel_rem_pio2+0x5ec>
 800a8bc:	46aa      	mov	sl, r5
 800a8be:	f1ba 0f01 	cmp.w	sl, #1
 800a8c2:	f1a4 0408 	sub.w	r4, r4, #8
 800a8c6:	f300 8085 	bgt.w	800a9d4 <__kernel_rem_pio2+0x62c>
 800a8ca:	9c06      	ldr	r4, [sp, #24]
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	3408      	adds	r4, #8
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	2d01      	cmp	r5, #1
 800a8d4:	f300 809d 	bgt.w	800aa12 <__kernel_rem_pio2+0x66a>
 800a8d8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a8dc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a8e0:	f1bb 0f00 	cmp.w	fp, #0
 800a8e4:	f040 809b 	bne.w	800aa1e <__kernel_rem_pio2+0x676>
 800a8e8:	9b01      	ldr	r3, [sp, #4]
 800a8ea:	e9c3 5600 	strd	r5, r6, [r3]
 800a8ee:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a8f2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a8f6:	e7ca      	b.n	800a88e <__kernel_rem_pio2+0x4e6>
 800a8f8:	3408      	adds	r4, #8
 800a8fa:	ab4a      	add	r3, sp, #296	; 0x128
 800a8fc:	441c      	add	r4, r3
 800a8fe:	462e      	mov	r6, r5
 800a900:	2000      	movs	r0, #0
 800a902:	2100      	movs	r1, #0
 800a904:	2e00      	cmp	r6, #0
 800a906:	da36      	bge.n	800a976 <__kernel_rem_pio2+0x5ce>
 800a908:	f1bb 0f00 	cmp.w	fp, #0
 800a90c:	d039      	beq.n	800a982 <__kernel_rem_pio2+0x5da>
 800a90e:	4602      	mov	r2, r0
 800a910:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a914:	9c01      	ldr	r4, [sp, #4]
 800a916:	e9c4 2300 	strd	r2, r3, [r4]
 800a91a:	4602      	mov	r2, r0
 800a91c:	460b      	mov	r3, r1
 800a91e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a922:	f7f5 fcd1 	bl	80002c8 <__aeabi_dsub>
 800a926:	ae4c      	add	r6, sp, #304	; 0x130
 800a928:	2401      	movs	r4, #1
 800a92a:	42a5      	cmp	r5, r4
 800a92c:	da2c      	bge.n	800a988 <__kernel_rem_pio2+0x5e0>
 800a92e:	f1bb 0f00 	cmp.w	fp, #0
 800a932:	d002      	beq.n	800a93a <__kernel_rem_pio2+0x592>
 800a934:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a938:	4619      	mov	r1, r3
 800a93a:	9b01      	ldr	r3, [sp, #4]
 800a93c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a940:	e7a5      	b.n	800a88e <__kernel_rem_pio2+0x4e6>
 800a942:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800a946:	eb0d 0403 	add.w	r4, sp, r3
 800a94a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a94e:	2000      	movs	r0, #0
 800a950:	2100      	movs	r1, #0
 800a952:	2d00      	cmp	r5, #0
 800a954:	da09      	bge.n	800a96a <__kernel_rem_pio2+0x5c2>
 800a956:	f1bb 0f00 	cmp.w	fp, #0
 800a95a:	d002      	beq.n	800a962 <__kernel_rem_pio2+0x5ba>
 800a95c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a960:	4619      	mov	r1, r3
 800a962:	9b01      	ldr	r3, [sp, #4]
 800a964:	e9c3 0100 	strd	r0, r1, [r3]
 800a968:	e791      	b.n	800a88e <__kernel_rem_pio2+0x4e6>
 800a96a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a96e:	f7f5 fcad 	bl	80002cc <__adddf3>
 800a972:	3d01      	subs	r5, #1
 800a974:	e7ed      	b.n	800a952 <__kernel_rem_pio2+0x5aa>
 800a976:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a97a:	f7f5 fca7 	bl	80002cc <__adddf3>
 800a97e:	3e01      	subs	r6, #1
 800a980:	e7c0      	b.n	800a904 <__kernel_rem_pio2+0x55c>
 800a982:	4602      	mov	r2, r0
 800a984:	460b      	mov	r3, r1
 800a986:	e7c5      	b.n	800a914 <__kernel_rem_pio2+0x56c>
 800a988:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a98c:	f7f5 fc9e 	bl	80002cc <__adddf3>
 800a990:	3401      	adds	r4, #1
 800a992:	e7ca      	b.n	800a92a <__kernel_rem_pio2+0x582>
 800a994:	e9da 8900 	ldrd	r8, r9, [sl]
 800a998:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a99c:	9b02      	ldr	r3, [sp, #8]
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	9302      	str	r3, [sp, #8]
 800a9a2:	4632      	mov	r2, r6
 800a9a4:	463b      	mov	r3, r7
 800a9a6:	4640      	mov	r0, r8
 800a9a8:	4649      	mov	r1, r9
 800a9aa:	f7f5 fc8f 	bl	80002cc <__adddf3>
 800a9ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	4640      	mov	r0, r8
 800a9b8:	4649      	mov	r1, r9
 800a9ba:	f7f5 fc85 	bl	80002c8 <__aeabi_dsub>
 800a9be:	4632      	mov	r2, r6
 800a9c0:	463b      	mov	r3, r7
 800a9c2:	f7f5 fc83 	bl	80002cc <__adddf3>
 800a9c6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800a9ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a9ce:	ed8a 7b00 	vstr	d7, [sl]
 800a9d2:	e76e      	b.n	800a8b2 <__kernel_rem_pio2+0x50a>
 800a9d4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a9d8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a9dc:	4640      	mov	r0, r8
 800a9de:	4632      	mov	r2, r6
 800a9e0:	463b      	mov	r3, r7
 800a9e2:	4649      	mov	r1, r9
 800a9e4:	f7f5 fc72 	bl	80002cc <__adddf3>
 800a9e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	4640      	mov	r0, r8
 800a9f2:	4649      	mov	r1, r9
 800a9f4:	f7f5 fc68 	bl	80002c8 <__aeabi_dsub>
 800a9f8:	4632      	mov	r2, r6
 800a9fa:	463b      	mov	r3, r7
 800a9fc:	f7f5 fc66 	bl	80002cc <__adddf3>
 800aa00:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa08:	ed84 7b00 	vstr	d7, [r4]
 800aa0c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800aa10:	e755      	b.n	800a8be <__kernel_rem_pio2+0x516>
 800aa12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa16:	f7f5 fc59 	bl	80002cc <__adddf3>
 800aa1a:	3d01      	subs	r5, #1
 800aa1c:	e759      	b.n	800a8d2 <__kernel_rem_pio2+0x52a>
 800aa1e:	9b01      	ldr	r3, [sp, #4]
 800aa20:	9a01      	ldr	r2, [sp, #4]
 800aa22:	601d      	str	r5, [r3, #0]
 800aa24:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800aa28:	605c      	str	r4, [r3, #4]
 800aa2a:	609f      	str	r7, [r3, #8]
 800aa2c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800aa30:	60d3      	str	r3, [r2, #12]
 800aa32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa36:	6110      	str	r0, [r2, #16]
 800aa38:	6153      	str	r3, [r2, #20]
 800aa3a:	e728      	b.n	800a88e <__kernel_rem_pio2+0x4e6>
 800aa3c:	41700000 	.word	0x41700000
 800aa40:	3e700000 	.word	0x3e700000
 800aa44:	00000000 	.word	0x00000000

0800aa48 <__kernel_sin>:
 800aa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4c:	ed2d 8b04 	vpush	{d8-d9}
 800aa50:	eeb0 8a41 	vmov.f32	s16, s2
 800aa54:	eef0 8a61 	vmov.f32	s17, s3
 800aa58:	ec55 4b10 	vmov	r4, r5, d0
 800aa5c:	b083      	sub	sp, #12
 800aa5e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aa62:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800aa66:	9001      	str	r0, [sp, #4]
 800aa68:	da06      	bge.n	800aa78 <__kernel_sin+0x30>
 800aa6a:	ee10 0a10 	vmov	r0, s0
 800aa6e:	4629      	mov	r1, r5
 800aa70:	f7f6 f892 	bl	8000b98 <__aeabi_d2iz>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d051      	beq.n	800ab1c <__kernel_sin+0xd4>
 800aa78:	4622      	mov	r2, r4
 800aa7a:	462b      	mov	r3, r5
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	4629      	mov	r1, r5
 800aa80:	f7f5 fdda 	bl	8000638 <__aeabi_dmul>
 800aa84:	4682      	mov	sl, r0
 800aa86:	468b      	mov	fp, r1
 800aa88:	4602      	mov	r2, r0
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	4629      	mov	r1, r5
 800aa90:	f7f5 fdd2 	bl	8000638 <__aeabi_dmul>
 800aa94:	a341      	add	r3, pc, #260	; (adr r3, 800ab9c <__kernel_sin+0x154>)
 800aa96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9a:	4680      	mov	r8, r0
 800aa9c:	4689      	mov	r9, r1
 800aa9e:	4650      	mov	r0, sl
 800aaa0:	4659      	mov	r1, fp
 800aaa2:	f7f5 fdc9 	bl	8000638 <__aeabi_dmul>
 800aaa6:	a33f      	add	r3, pc, #252	; (adr r3, 800aba4 <__kernel_sin+0x15c>)
 800aaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaac:	f7f5 fc0c 	bl	80002c8 <__aeabi_dsub>
 800aab0:	4652      	mov	r2, sl
 800aab2:	465b      	mov	r3, fp
 800aab4:	f7f5 fdc0 	bl	8000638 <__aeabi_dmul>
 800aab8:	a33c      	add	r3, pc, #240	; (adr r3, 800abac <__kernel_sin+0x164>)
 800aaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabe:	f7f5 fc05 	bl	80002cc <__adddf3>
 800aac2:	4652      	mov	r2, sl
 800aac4:	465b      	mov	r3, fp
 800aac6:	f7f5 fdb7 	bl	8000638 <__aeabi_dmul>
 800aaca:	a33a      	add	r3, pc, #232	; (adr r3, 800abb4 <__kernel_sin+0x16c>)
 800aacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad0:	f7f5 fbfa 	bl	80002c8 <__aeabi_dsub>
 800aad4:	4652      	mov	r2, sl
 800aad6:	465b      	mov	r3, fp
 800aad8:	f7f5 fdae 	bl	8000638 <__aeabi_dmul>
 800aadc:	a337      	add	r3, pc, #220	; (adr r3, 800abbc <__kernel_sin+0x174>)
 800aade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae2:	f7f5 fbf3 	bl	80002cc <__adddf3>
 800aae6:	9b01      	ldr	r3, [sp, #4]
 800aae8:	4606      	mov	r6, r0
 800aaea:	460f      	mov	r7, r1
 800aaec:	b9eb      	cbnz	r3, 800ab2a <__kernel_sin+0xe2>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	4650      	mov	r0, sl
 800aaf4:	4659      	mov	r1, fp
 800aaf6:	f7f5 fd9f 	bl	8000638 <__aeabi_dmul>
 800aafa:	a325      	add	r3, pc, #148	; (adr r3, 800ab90 <__kernel_sin+0x148>)
 800aafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab00:	f7f5 fbe2 	bl	80002c8 <__aeabi_dsub>
 800ab04:	4642      	mov	r2, r8
 800ab06:	464b      	mov	r3, r9
 800ab08:	f7f5 fd96 	bl	8000638 <__aeabi_dmul>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	460b      	mov	r3, r1
 800ab10:	4620      	mov	r0, r4
 800ab12:	4629      	mov	r1, r5
 800ab14:	f7f5 fbda 	bl	80002cc <__adddf3>
 800ab18:	4604      	mov	r4, r0
 800ab1a:	460d      	mov	r5, r1
 800ab1c:	ec45 4b10 	vmov	d0, r4, r5
 800ab20:	b003      	add	sp, #12
 800ab22:	ecbd 8b04 	vpop	{d8-d9}
 800ab26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab2a:	4b1b      	ldr	r3, [pc, #108]	; (800ab98 <__kernel_sin+0x150>)
 800ab2c:	ec51 0b18 	vmov	r0, r1, d8
 800ab30:	2200      	movs	r2, #0
 800ab32:	f7f5 fd81 	bl	8000638 <__aeabi_dmul>
 800ab36:	4632      	mov	r2, r6
 800ab38:	ec41 0b19 	vmov	d9, r0, r1
 800ab3c:	463b      	mov	r3, r7
 800ab3e:	4640      	mov	r0, r8
 800ab40:	4649      	mov	r1, r9
 800ab42:	f7f5 fd79 	bl	8000638 <__aeabi_dmul>
 800ab46:	4602      	mov	r2, r0
 800ab48:	460b      	mov	r3, r1
 800ab4a:	ec51 0b19 	vmov	r0, r1, d9
 800ab4e:	f7f5 fbbb 	bl	80002c8 <__aeabi_dsub>
 800ab52:	4652      	mov	r2, sl
 800ab54:	465b      	mov	r3, fp
 800ab56:	f7f5 fd6f 	bl	8000638 <__aeabi_dmul>
 800ab5a:	ec53 2b18 	vmov	r2, r3, d8
 800ab5e:	f7f5 fbb3 	bl	80002c8 <__aeabi_dsub>
 800ab62:	a30b      	add	r3, pc, #44	; (adr r3, 800ab90 <__kernel_sin+0x148>)
 800ab64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab68:	4606      	mov	r6, r0
 800ab6a:	460f      	mov	r7, r1
 800ab6c:	4640      	mov	r0, r8
 800ab6e:	4649      	mov	r1, r9
 800ab70:	f7f5 fd62 	bl	8000638 <__aeabi_dmul>
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	4630      	mov	r0, r6
 800ab7a:	4639      	mov	r1, r7
 800ab7c:	f7f5 fba6 	bl	80002cc <__adddf3>
 800ab80:	4602      	mov	r2, r0
 800ab82:	460b      	mov	r3, r1
 800ab84:	4620      	mov	r0, r4
 800ab86:	4629      	mov	r1, r5
 800ab88:	f7f5 fb9e 	bl	80002c8 <__aeabi_dsub>
 800ab8c:	e7c4      	b.n	800ab18 <__kernel_sin+0xd0>
 800ab8e:	bf00      	nop
 800ab90:	55555549 	.word	0x55555549
 800ab94:	3fc55555 	.word	0x3fc55555
 800ab98:	3fe00000 	.word	0x3fe00000
 800ab9c:	5acfd57c 	.word	0x5acfd57c
 800aba0:	3de5d93a 	.word	0x3de5d93a
 800aba4:	8a2b9ceb 	.word	0x8a2b9ceb
 800aba8:	3e5ae5e6 	.word	0x3e5ae5e6
 800abac:	57b1fe7d 	.word	0x57b1fe7d
 800abb0:	3ec71de3 	.word	0x3ec71de3
 800abb4:	19c161d5 	.word	0x19c161d5
 800abb8:	3f2a01a0 	.word	0x3f2a01a0
 800abbc:	1110f8a6 	.word	0x1110f8a6
 800abc0:	3f811111 	.word	0x3f811111
 800abc4:	00000000 	.word	0x00000000

0800abc8 <atan>:
 800abc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abcc:	ec55 4b10 	vmov	r4, r5, d0
 800abd0:	4bc3      	ldr	r3, [pc, #780]	; (800aee0 <atan+0x318>)
 800abd2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800abd6:	429e      	cmp	r6, r3
 800abd8:	46ab      	mov	fp, r5
 800abda:	dd18      	ble.n	800ac0e <atan+0x46>
 800abdc:	4bc1      	ldr	r3, [pc, #772]	; (800aee4 <atan+0x31c>)
 800abde:	429e      	cmp	r6, r3
 800abe0:	dc01      	bgt.n	800abe6 <atan+0x1e>
 800abe2:	d109      	bne.n	800abf8 <atan+0x30>
 800abe4:	b144      	cbz	r4, 800abf8 <atan+0x30>
 800abe6:	4622      	mov	r2, r4
 800abe8:	462b      	mov	r3, r5
 800abea:	4620      	mov	r0, r4
 800abec:	4629      	mov	r1, r5
 800abee:	f7f5 fb6d 	bl	80002cc <__adddf3>
 800abf2:	4604      	mov	r4, r0
 800abf4:	460d      	mov	r5, r1
 800abf6:	e006      	b.n	800ac06 <atan+0x3e>
 800abf8:	f1bb 0f00 	cmp.w	fp, #0
 800abfc:	f300 8131 	bgt.w	800ae62 <atan+0x29a>
 800ac00:	a59b      	add	r5, pc, #620	; (adr r5, 800ae70 <atan+0x2a8>)
 800ac02:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ac06:	ec45 4b10 	vmov	d0, r4, r5
 800ac0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac0e:	4bb6      	ldr	r3, [pc, #728]	; (800aee8 <atan+0x320>)
 800ac10:	429e      	cmp	r6, r3
 800ac12:	dc14      	bgt.n	800ac3e <atan+0x76>
 800ac14:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ac18:	429e      	cmp	r6, r3
 800ac1a:	dc0d      	bgt.n	800ac38 <atan+0x70>
 800ac1c:	a396      	add	r3, pc, #600	; (adr r3, 800ae78 <atan+0x2b0>)
 800ac1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac22:	ee10 0a10 	vmov	r0, s0
 800ac26:	4629      	mov	r1, r5
 800ac28:	f7f5 fb50 	bl	80002cc <__adddf3>
 800ac2c:	4baf      	ldr	r3, [pc, #700]	; (800aeec <atan+0x324>)
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f7f5 ff92 	bl	8000b58 <__aeabi_dcmpgt>
 800ac34:	2800      	cmp	r0, #0
 800ac36:	d1e6      	bne.n	800ac06 <atan+0x3e>
 800ac38:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ac3c:	e02b      	b.n	800ac96 <atan+0xce>
 800ac3e:	f000 f963 	bl	800af08 <fabs>
 800ac42:	4bab      	ldr	r3, [pc, #684]	; (800aef0 <atan+0x328>)
 800ac44:	429e      	cmp	r6, r3
 800ac46:	ec55 4b10 	vmov	r4, r5, d0
 800ac4a:	f300 80bf 	bgt.w	800adcc <atan+0x204>
 800ac4e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ac52:	429e      	cmp	r6, r3
 800ac54:	f300 80a0 	bgt.w	800ad98 <atan+0x1d0>
 800ac58:	ee10 2a10 	vmov	r2, s0
 800ac5c:	ee10 0a10 	vmov	r0, s0
 800ac60:	462b      	mov	r3, r5
 800ac62:	4629      	mov	r1, r5
 800ac64:	f7f5 fb32 	bl	80002cc <__adddf3>
 800ac68:	4ba0      	ldr	r3, [pc, #640]	; (800aeec <atan+0x324>)
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f7f5 fb2c 	bl	80002c8 <__aeabi_dsub>
 800ac70:	2200      	movs	r2, #0
 800ac72:	4606      	mov	r6, r0
 800ac74:	460f      	mov	r7, r1
 800ac76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	4629      	mov	r1, r5
 800ac7e:	f7f5 fb25 	bl	80002cc <__adddf3>
 800ac82:	4602      	mov	r2, r0
 800ac84:	460b      	mov	r3, r1
 800ac86:	4630      	mov	r0, r6
 800ac88:	4639      	mov	r1, r7
 800ac8a:	f7f5 fdff 	bl	800088c <__aeabi_ddiv>
 800ac8e:	f04f 0a00 	mov.w	sl, #0
 800ac92:	4604      	mov	r4, r0
 800ac94:	460d      	mov	r5, r1
 800ac96:	4622      	mov	r2, r4
 800ac98:	462b      	mov	r3, r5
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	4629      	mov	r1, r5
 800ac9e:	f7f5 fccb 	bl	8000638 <__aeabi_dmul>
 800aca2:	4602      	mov	r2, r0
 800aca4:	460b      	mov	r3, r1
 800aca6:	4680      	mov	r8, r0
 800aca8:	4689      	mov	r9, r1
 800acaa:	f7f5 fcc5 	bl	8000638 <__aeabi_dmul>
 800acae:	a374      	add	r3, pc, #464	; (adr r3, 800ae80 <atan+0x2b8>)
 800acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb4:	4606      	mov	r6, r0
 800acb6:	460f      	mov	r7, r1
 800acb8:	f7f5 fcbe 	bl	8000638 <__aeabi_dmul>
 800acbc:	a372      	add	r3, pc, #456	; (adr r3, 800ae88 <atan+0x2c0>)
 800acbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc2:	f7f5 fb03 	bl	80002cc <__adddf3>
 800acc6:	4632      	mov	r2, r6
 800acc8:	463b      	mov	r3, r7
 800acca:	f7f5 fcb5 	bl	8000638 <__aeabi_dmul>
 800acce:	a370      	add	r3, pc, #448	; (adr r3, 800ae90 <atan+0x2c8>)
 800acd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd4:	f7f5 fafa 	bl	80002cc <__adddf3>
 800acd8:	4632      	mov	r2, r6
 800acda:	463b      	mov	r3, r7
 800acdc:	f7f5 fcac 	bl	8000638 <__aeabi_dmul>
 800ace0:	a36d      	add	r3, pc, #436	; (adr r3, 800ae98 <atan+0x2d0>)
 800ace2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace6:	f7f5 faf1 	bl	80002cc <__adddf3>
 800acea:	4632      	mov	r2, r6
 800acec:	463b      	mov	r3, r7
 800acee:	f7f5 fca3 	bl	8000638 <__aeabi_dmul>
 800acf2:	a36b      	add	r3, pc, #428	; (adr r3, 800aea0 <atan+0x2d8>)
 800acf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf8:	f7f5 fae8 	bl	80002cc <__adddf3>
 800acfc:	4632      	mov	r2, r6
 800acfe:	463b      	mov	r3, r7
 800ad00:	f7f5 fc9a 	bl	8000638 <__aeabi_dmul>
 800ad04:	a368      	add	r3, pc, #416	; (adr r3, 800aea8 <atan+0x2e0>)
 800ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0a:	f7f5 fadf 	bl	80002cc <__adddf3>
 800ad0e:	4642      	mov	r2, r8
 800ad10:	464b      	mov	r3, r9
 800ad12:	f7f5 fc91 	bl	8000638 <__aeabi_dmul>
 800ad16:	a366      	add	r3, pc, #408	; (adr r3, 800aeb0 <atan+0x2e8>)
 800ad18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1c:	4680      	mov	r8, r0
 800ad1e:	4689      	mov	r9, r1
 800ad20:	4630      	mov	r0, r6
 800ad22:	4639      	mov	r1, r7
 800ad24:	f7f5 fc88 	bl	8000638 <__aeabi_dmul>
 800ad28:	a363      	add	r3, pc, #396	; (adr r3, 800aeb8 <atan+0x2f0>)
 800ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2e:	f7f5 facb 	bl	80002c8 <__aeabi_dsub>
 800ad32:	4632      	mov	r2, r6
 800ad34:	463b      	mov	r3, r7
 800ad36:	f7f5 fc7f 	bl	8000638 <__aeabi_dmul>
 800ad3a:	a361      	add	r3, pc, #388	; (adr r3, 800aec0 <atan+0x2f8>)
 800ad3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad40:	f7f5 fac2 	bl	80002c8 <__aeabi_dsub>
 800ad44:	4632      	mov	r2, r6
 800ad46:	463b      	mov	r3, r7
 800ad48:	f7f5 fc76 	bl	8000638 <__aeabi_dmul>
 800ad4c:	a35e      	add	r3, pc, #376	; (adr r3, 800aec8 <atan+0x300>)
 800ad4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad52:	f7f5 fab9 	bl	80002c8 <__aeabi_dsub>
 800ad56:	4632      	mov	r2, r6
 800ad58:	463b      	mov	r3, r7
 800ad5a:	f7f5 fc6d 	bl	8000638 <__aeabi_dmul>
 800ad5e:	a35c      	add	r3, pc, #368	; (adr r3, 800aed0 <atan+0x308>)
 800ad60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad64:	f7f5 fab0 	bl	80002c8 <__aeabi_dsub>
 800ad68:	4632      	mov	r2, r6
 800ad6a:	463b      	mov	r3, r7
 800ad6c:	f7f5 fc64 	bl	8000638 <__aeabi_dmul>
 800ad70:	4602      	mov	r2, r0
 800ad72:	460b      	mov	r3, r1
 800ad74:	4640      	mov	r0, r8
 800ad76:	4649      	mov	r1, r9
 800ad78:	f7f5 faa8 	bl	80002cc <__adddf3>
 800ad7c:	4622      	mov	r2, r4
 800ad7e:	462b      	mov	r3, r5
 800ad80:	f7f5 fc5a 	bl	8000638 <__aeabi_dmul>
 800ad84:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800ad88:	4602      	mov	r2, r0
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	d14b      	bne.n	800ae26 <atan+0x25e>
 800ad8e:	4620      	mov	r0, r4
 800ad90:	4629      	mov	r1, r5
 800ad92:	f7f5 fa99 	bl	80002c8 <__aeabi_dsub>
 800ad96:	e72c      	b.n	800abf2 <atan+0x2a>
 800ad98:	ee10 0a10 	vmov	r0, s0
 800ad9c:	4b53      	ldr	r3, [pc, #332]	; (800aeec <atan+0x324>)
 800ad9e:	2200      	movs	r2, #0
 800ada0:	4629      	mov	r1, r5
 800ada2:	f7f5 fa91 	bl	80002c8 <__aeabi_dsub>
 800ada6:	4b51      	ldr	r3, [pc, #324]	; (800aeec <atan+0x324>)
 800ada8:	4606      	mov	r6, r0
 800adaa:	460f      	mov	r7, r1
 800adac:	2200      	movs	r2, #0
 800adae:	4620      	mov	r0, r4
 800adb0:	4629      	mov	r1, r5
 800adb2:	f7f5 fa8b 	bl	80002cc <__adddf3>
 800adb6:	4602      	mov	r2, r0
 800adb8:	460b      	mov	r3, r1
 800adba:	4630      	mov	r0, r6
 800adbc:	4639      	mov	r1, r7
 800adbe:	f7f5 fd65 	bl	800088c <__aeabi_ddiv>
 800adc2:	f04f 0a01 	mov.w	sl, #1
 800adc6:	4604      	mov	r4, r0
 800adc8:	460d      	mov	r5, r1
 800adca:	e764      	b.n	800ac96 <atan+0xce>
 800adcc:	4b49      	ldr	r3, [pc, #292]	; (800aef4 <atan+0x32c>)
 800adce:	429e      	cmp	r6, r3
 800add0:	da1d      	bge.n	800ae0e <atan+0x246>
 800add2:	ee10 0a10 	vmov	r0, s0
 800add6:	4b48      	ldr	r3, [pc, #288]	; (800aef8 <atan+0x330>)
 800add8:	2200      	movs	r2, #0
 800adda:	4629      	mov	r1, r5
 800addc:	f7f5 fa74 	bl	80002c8 <__aeabi_dsub>
 800ade0:	4b45      	ldr	r3, [pc, #276]	; (800aef8 <atan+0x330>)
 800ade2:	4606      	mov	r6, r0
 800ade4:	460f      	mov	r7, r1
 800ade6:	2200      	movs	r2, #0
 800ade8:	4620      	mov	r0, r4
 800adea:	4629      	mov	r1, r5
 800adec:	f7f5 fc24 	bl	8000638 <__aeabi_dmul>
 800adf0:	4b3e      	ldr	r3, [pc, #248]	; (800aeec <atan+0x324>)
 800adf2:	2200      	movs	r2, #0
 800adf4:	f7f5 fa6a 	bl	80002cc <__adddf3>
 800adf8:	4602      	mov	r2, r0
 800adfa:	460b      	mov	r3, r1
 800adfc:	4630      	mov	r0, r6
 800adfe:	4639      	mov	r1, r7
 800ae00:	f7f5 fd44 	bl	800088c <__aeabi_ddiv>
 800ae04:	f04f 0a02 	mov.w	sl, #2
 800ae08:	4604      	mov	r4, r0
 800ae0a:	460d      	mov	r5, r1
 800ae0c:	e743      	b.n	800ac96 <atan+0xce>
 800ae0e:	462b      	mov	r3, r5
 800ae10:	ee10 2a10 	vmov	r2, s0
 800ae14:	4939      	ldr	r1, [pc, #228]	; (800aefc <atan+0x334>)
 800ae16:	2000      	movs	r0, #0
 800ae18:	f7f5 fd38 	bl	800088c <__aeabi_ddiv>
 800ae1c:	f04f 0a03 	mov.w	sl, #3
 800ae20:	4604      	mov	r4, r0
 800ae22:	460d      	mov	r5, r1
 800ae24:	e737      	b.n	800ac96 <atan+0xce>
 800ae26:	4b36      	ldr	r3, [pc, #216]	; (800af00 <atan+0x338>)
 800ae28:	4e36      	ldr	r6, [pc, #216]	; (800af04 <atan+0x33c>)
 800ae2a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ae2e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ae32:	e9da 2300 	ldrd	r2, r3, [sl]
 800ae36:	f7f5 fa47 	bl	80002c8 <__aeabi_dsub>
 800ae3a:	4622      	mov	r2, r4
 800ae3c:	462b      	mov	r3, r5
 800ae3e:	f7f5 fa43 	bl	80002c8 <__aeabi_dsub>
 800ae42:	4602      	mov	r2, r0
 800ae44:	460b      	mov	r3, r1
 800ae46:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ae4a:	f7f5 fa3d 	bl	80002c8 <__aeabi_dsub>
 800ae4e:	f1bb 0f00 	cmp.w	fp, #0
 800ae52:	4604      	mov	r4, r0
 800ae54:	460d      	mov	r5, r1
 800ae56:	f6bf aed6 	bge.w	800ac06 <atan+0x3e>
 800ae5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae5e:	461d      	mov	r5, r3
 800ae60:	e6d1      	b.n	800ac06 <atan+0x3e>
 800ae62:	a51d      	add	r5, pc, #116	; (adr r5, 800aed8 <atan+0x310>)
 800ae64:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ae68:	e6cd      	b.n	800ac06 <atan+0x3e>
 800ae6a:	bf00      	nop
 800ae6c:	f3af 8000 	nop.w
 800ae70:	54442d18 	.word	0x54442d18
 800ae74:	bff921fb 	.word	0xbff921fb
 800ae78:	8800759c 	.word	0x8800759c
 800ae7c:	7e37e43c 	.word	0x7e37e43c
 800ae80:	e322da11 	.word	0xe322da11
 800ae84:	3f90ad3a 	.word	0x3f90ad3a
 800ae88:	24760deb 	.word	0x24760deb
 800ae8c:	3fa97b4b 	.word	0x3fa97b4b
 800ae90:	a0d03d51 	.word	0xa0d03d51
 800ae94:	3fb10d66 	.word	0x3fb10d66
 800ae98:	c54c206e 	.word	0xc54c206e
 800ae9c:	3fb745cd 	.word	0x3fb745cd
 800aea0:	920083ff 	.word	0x920083ff
 800aea4:	3fc24924 	.word	0x3fc24924
 800aea8:	5555550d 	.word	0x5555550d
 800aeac:	3fd55555 	.word	0x3fd55555
 800aeb0:	2c6a6c2f 	.word	0x2c6a6c2f
 800aeb4:	bfa2b444 	.word	0xbfa2b444
 800aeb8:	52defd9a 	.word	0x52defd9a
 800aebc:	3fadde2d 	.word	0x3fadde2d
 800aec0:	af749a6d 	.word	0xaf749a6d
 800aec4:	3fb3b0f2 	.word	0x3fb3b0f2
 800aec8:	fe231671 	.word	0xfe231671
 800aecc:	3fbc71c6 	.word	0x3fbc71c6
 800aed0:	9998ebc4 	.word	0x9998ebc4
 800aed4:	3fc99999 	.word	0x3fc99999
 800aed8:	54442d18 	.word	0x54442d18
 800aedc:	3ff921fb 	.word	0x3ff921fb
 800aee0:	440fffff 	.word	0x440fffff
 800aee4:	7ff00000 	.word	0x7ff00000
 800aee8:	3fdbffff 	.word	0x3fdbffff
 800aeec:	3ff00000 	.word	0x3ff00000
 800aef0:	3ff2ffff 	.word	0x3ff2ffff
 800aef4:	40038000 	.word	0x40038000
 800aef8:	3ff80000 	.word	0x3ff80000
 800aefc:	bff00000 	.word	0xbff00000
 800af00:	0800b798 	.word	0x0800b798
 800af04:	0800b778 	.word	0x0800b778

0800af08 <fabs>:
 800af08:	ec51 0b10 	vmov	r0, r1, d0
 800af0c:	ee10 2a10 	vmov	r2, s0
 800af10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800af14:	ec43 2b10 	vmov	d0, r2, r3
 800af18:	4770      	bx	lr
 800af1a:	0000      	movs	r0, r0
 800af1c:	0000      	movs	r0, r0
	...

0800af20 <floor>:
 800af20:	ec51 0b10 	vmov	r0, r1, d0
 800af24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af28:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800af2c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800af30:	2e13      	cmp	r6, #19
 800af32:	ee10 5a10 	vmov	r5, s0
 800af36:	ee10 8a10 	vmov	r8, s0
 800af3a:	460c      	mov	r4, r1
 800af3c:	dc32      	bgt.n	800afa4 <floor+0x84>
 800af3e:	2e00      	cmp	r6, #0
 800af40:	da14      	bge.n	800af6c <floor+0x4c>
 800af42:	a333      	add	r3, pc, #204	; (adr r3, 800b010 <floor+0xf0>)
 800af44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af48:	f7f5 f9c0 	bl	80002cc <__adddf3>
 800af4c:	2200      	movs	r2, #0
 800af4e:	2300      	movs	r3, #0
 800af50:	f7f5 fe02 	bl	8000b58 <__aeabi_dcmpgt>
 800af54:	b138      	cbz	r0, 800af66 <floor+0x46>
 800af56:	2c00      	cmp	r4, #0
 800af58:	da57      	bge.n	800b00a <floor+0xea>
 800af5a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800af5e:	431d      	orrs	r5, r3
 800af60:	d001      	beq.n	800af66 <floor+0x46>
 800af62:	4c2d      	ldr	r4, [pc, #180]	; (800b018 <floor+0xf8>)
 800af64:	2500      	movs	r5, #0
 800af66:	4621      	mov	r1, r4
 800af68:	4628      	mov	r0, r5
 800af6a:	e025      	b.n	800afb8 <floor+0x98>
 800af6c:	4f2b      	ldr	r7, [pc, #172]	; (800b01c <floor+0xfc>)
 800af6e:	4137      	asrs	r7, r6
 800af70:	ea01 0307 	and.w	r3, r1, r7
 800af74:	4303      	orrs	r3, r0
 800af76:	d01f      	beq.n	800afb8 <floor+0x98>
 800af78:	a325      	add	r3, pc, #148	; (adr r3, 800b010 <floor+0xf0>)
 800af7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7e:	f7f5 f9a5 	bl	80002cc <__adddf3>
 800af82:	2200      	movs	r2, #0
 800af84:	2300      	movs	r3, #0
 800af86:	f7f5 fde7 	bl	8000b58 <__aeabi_dcmpgt>
 800af8a:	2800      	cmp	r0, #0
 800af8c:	d0eb      	beq.n	800af66 <floor+0x46>
 800af8e:	2c00      	cmp	r4, #0
 800af90:	bfbe      	ittt	lt
 800af92:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800af96:	fa43 f606 	asrlt.w	r6, r3, r6
 800af9a:	19a4      	addlt	r4, r4, r6
 800af9c:	ea24 0407 	bic.w	r4, r4, r7
 800afa0:	2500      	movs	r5, #0
 800afa2:	e7e0      	b.n	800af66 <floor+0x46>
 800afa4:	2e33      	cmp	r6, #51	; 0x33
 800afa6:	dd0b      	ble.n	800afc0 <floor+0xa0>
 800afa8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800afac:	d104      	bne.n	800afb8 <floor+0x98>
 800afae:	ee10 2a10 	vmov	r2, s0
 800afb2:	460b      	mov	r3, r1
 800afb4:	f7f5 f98a 	bl	80002cc <__adddf3>
 800afb8:	ec41 0b10 	vmov	d0, r0, r1
 800afbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afc0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800afc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afc8:	fa23 f707 	lsr.w	r7, r3, r7
 800afcc:	4207      	tst	r7, r0
 800afce:	d0f3      	beq.n	800afb8 <floor+0x98>
 800afd0:	a30f      	add	r3, pc, #60	; (adr r3, 800b010 <floor+0xf0>)
 800afd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd6:	f7f5 f979 	bl	80002cc <__adddf3>
 800afda:	2200      	movs	r2, #0
 800afdc:	2300      	movs	r3, #0
 800afde:	f7f5 fdbb 	bl	8000b58 <__aeabi_dcmpgt>
 800afe2:	2800      	cmp	r0, #0
 800afe4:	d0bf      	beq.n	800af66 <floor+0x46>
 800afe6:	2c00      	cmp	r4, #0
 800afe8:	da02      	bge.n	800aff0 <floor+0xd0>
 800afea:	2e14      	cmp	r6, #20
 800afec:	d103      	bne.n	800aff6 <floor+0xd6>
 800afee:	3401      	adds	r4, #1
 800aff0:	ea25 0507 	bic.w	r5, r5, r7
 800aff4:	e7b7      	b.n	800af66 <floor+0x46>
 800aff6:	2301      	movs	r3, #1
 800aff8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800affc:	fa03 f606 	lsl.w	r6, r3, r6
 800b000:	4435      	add	r5, r6
 800b002:	4545      	cmp	r5, r8
 800b004:	bf38      	it	cc
 800b006:	18e4      	addcc	r4, r4, r3
 800b008:	e7f2      	b.n	800aff0 <floor+0xd0>
 800b00a:	2500      	movs	r5, #0
 800b00c:	462c      	mov	r4, r5
 800b00e:	e7aa      	b.n	800af66 <floor+0x46>
 800b010:	8800759c 	.word	0x8800759c
 800b014:	7e37e43c 	.word	0x7e37e43c
 800b018:	bff00000 	.word	0xbff00000
 800b01c:	000fffff 	.word	0x000fffff

0800b020 <nan>:
 800b020:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b028 <nan+0x8>
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop
 800b028:	00000000 	.word	0x00000000
 800b02c:	7ff80000 	.word	0x7ff80000

0800b030 <scalbn>:
 800b030:	b570      	push	{r4, r5, r6, lr}
 800b032:	ec55 4b10 	vmov	r4, r5, d0
 800b036:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b03a:	4606      	mov	r6, r0
 800b03c:	462b      	mov	r3, r5
 800b03e:	b99a      	cbnz	r2, 800b068 <scalbn+0x38>
 800b040:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b044:	4323      	orrs	r3, r4
 800b046:	d036      	beq.n	800b0b6 <scalbn+0x86>
 800b048:	4b39      	ldr	r3, [pc, #228]	; (800b130 <scalbn+0x100>)
 800b04a:	4629      	mov	r1, r5
 800b04c:	ee10 0a10 	vmov	r0, s0
 800b050:	2200      	movs	r2, #0
 800b052:	f7f5 faf1 	bl	8000638 <__aeabi_dmul>
 800b056:	4b37      	ldr	r3, [pc, #220]	; (800b134 <scalbn+0x104>)
 800b058:	429e      	cmp	r6, r3
 800b05a:	4604      	mov	r4, r0
 800b05c:	460d      	mov	r5, r1
 800b05e:	da10      	bge.n	800b082 <scalbn+0x52>
 800b060:	a32b      	add	r3, pc, #172	; (adr r3, 800b110 <scalbn+0xe0>)
 800b062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b066:	e03a      	b.n	800b0de <scalbn+0xae>
 800b068:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b06c:	428a      	cmp	r2, r1
 800b06e:	d10c      	bne.n	800b08a <scalbn+0x5a>
 800b070:	ee10 2a10 	vmov	r2, s0
 800b074:	4620      	mov	r0, r4
 800b076:	4629      	mov	r1, r5
 800b078:	f7f5 f928 	bl	80002cc <__adddf3>
 800b07c:	4604      	mov	r4, r0
 800b07e:	460d      	mov	r5, r1
 800b080:	e019      	b.n	800b0b6 <scalbn+0x86>
 800b082:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b086:	460b      	mov	r3, r1
 800b088:	3a36      	subs	r2, #54	; 0x36
 800b08a:	4432      	add	r2, r6
 800b08c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b090:	428a      	cmp	r2, r1
 800b092:	dd08      	ble.n	800b0a6 <scalbn+0x76>
 800b094:	2d00      	cmp	r5, #0
 800b096:	a120      	add	r1, pc, #128	; (adr r1, 800b118 <scalbn+0xe8>)
 800b098:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b09c:	da1c      	bge.n	800b0d8 <scalbn+0xa8>
 800b09e:	a120      	add	r1, pc, #128	; (adr r1, 800b120 <scalbn+0xf0>)
 800b0a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0a4:	e018      	b.n	800b0d8 <scalbn+0xa8>
 800b0a6:	2a00      	cmp	r2, #0
 800b0a8:	dd08      	ble.n	800b0bc <scalbn+0x8c>
 800b0aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b0ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b0b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b0b6:	ec45 4b10 	vmov	d0, r4, r5
 800b0ba:	bd70      	pop	{r4, r5, r6, pc}
 800b0bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b0c0:	da19      	bge.n	800b0f6 <scalbn+0xc6>
 800b0c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b0c6:	429e      	cmp	r6, r3
 800b0c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b0cc:	dd0a      	ble.n	800b0e4 <scalbn+0xb4>
 800b0ce:	a112      	add	r1, pc, #72	; (adr r1, 800b118 <scalbn+0xe8>)
 800b0d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d1e2      	bne.n	800b09e <scalbn+0x6e>
 800b0d8:	a30f      	add	r3, pc, #60	; (adr r3, 800b118 <scalbn+0xe8>)
 800b0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0de:	f7f5 faab 	bl	8000638 <__aeabi_dmul>
 800b0e2:	e7cb      	b.n	800b07c <scalbn+0x4c>
 800b0e4:	a10a      	add	r1, pc, #40	; (adr r1, 800b110 <scalbn+0xe0>)
 800b0e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d0b8      	beq.n	800b060 <scalbn+0x30>
 800b0ee:	a10e      	add	r1, pc, #56	; (adr r1, 800b128 <scalbn+0xf8>)
 800b0f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0f4:	e7b4      	b.n	800b060 <scalbn+0x30>
 800b0f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b0fa:	3236      	adds	r2, #54	; 0x36
 800b0fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b100:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b104:	4620      	mov	r0, r4
 800b106:	4b0c      	ldr	r3, [pc, #48]	; (800b138 <scalbn+0x108>)
 800b108:	2200      	movs	r2, #0
 800b10a:	e7e8      	b.n	800b0de <scalbn+0xae>
 800b10c:	f3af 8000 	nop.w
 800b110:	c2f8f359 	.word	0xc2f8f359
 800b114:	01a56e1f 	.word	0x01a56e1f
 800b118:	8800759c 	.word	0x8800759c
 800b11c:	7e37e43c 	.word	0x7e37e43c
 800b120:	8800759c 	.word	0x8800759c
 800b124:	fe37e43c 	.word	0xfe37e43c
 800b128:	c2f8f359 	.word	0xc2f8f359
 800b12c:	81a56e1f 	.word	0x81a56e1f
 800b130:	43500000 	.word	0x43500000
 800b134:	ffff3cb0 	.word	0xffff3cb0
 800b138:	3c900000 	.word	0x3c900000

0800b13c <_init>:
 800b13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13e:	bf00      	nop
 800b140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b142:	bc08      	pop	{r3}
 800b144:	469e      	mov	lr, r3
 800b146:	4770      	bx	lr

0800b148 <_fini>:
 800b148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b14a:	bf00      	nop
 800b14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b14e:	bc08      	pop	{r3}
 800b150:	469e      	mov	lr, r3
 800b152:	4770      	bx	lr
