
STMF446_RMD_command.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006958  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08006b28  08006b28  00016b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cb0  08006cb0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006cb0  08006cb0  00016cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cb8  08006cb8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cb8  08006cb8  00016cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cbc  08006cbc  00016cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006cc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000070  08006d30  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08006d30  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114ee  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000230e  00000000  00000000  0003158e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  000338a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  00034790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000036e0  00000000  00000000  000355a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011301  00000000  00000000  00038c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d586a  00000000  00000000  00049f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f7f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004918  00000000  00000000  0011f844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006b10 	.word	0x08006b10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08006b10 	.word	0x08006b10

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ab0:	f000 b974 	b.w	8000d9c <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	468e      	mov	lr, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14d      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4694      	mov	ip, r2
 8000ade:	d969      	bls.n	8000bb4 <__udivmoddi4+0xe8>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b152      	cbz	r2, 8000afc <__udivmoddi4+0x30>
 8000ae6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aea:	f1c2 0120 	rsb	r1, r2, #32
 8000aee:	fa20 f101 	lsr.w	r1, r0, r1
 8000af2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af6:	ea41 0e03 	orr.w	lr, r1, r3
 8000afa:	4094      	lsls	r4, r2
 8000afc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b00:	0c21      	lsrs	r1, r4, #16
 8000b02:	fbbe f6f8 	udiv	r6, lr, r8
 8000b06:	fa1f f78c 	uxth.w	r7, ip
 8000b0a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b12:	fb06 f107 	mul.w	r1, r6, r7
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b22:	f080 811f 	bcs.w	8000d64 <__udivmoddi4+0x298>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 811c 	bls.w	8000d64 <__udivmoddi4+0x298>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b38:	fb08 3310 	mls	r3, r8, r0, r3
 8000b3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b40:	fb00 f707 	mul.w	r7, r0, r7
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x92>
 8000b48:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b50:	f080 810a 	bcs.w	8000d68 <__udivmoddi4+0x29c>
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	f240 8107 	bls.w	8000d68 <__udivmoddi4+0x29c>
 8000b5a:	4464      	add	r4, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b62:	1be4      	subs	r4, r4, r7
 8000b64:	2600      	movs	r6, #0
 8000b66:	b11d      	cbz	r5, 8000b70 <__udivmoddi4+0xa4>
 8000b68:	40d4      	lsrs	r4, r2
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0xc2>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	f000 80ef 	beq.w	8000d5e <__udivmoddi4+0x292>
 8000b80:	2600      	movs	r6, #0
 8000b82:	e9c5 0100 	strd	r0, r1, [r5]
 8000b86:	4630      	mov	r0, r6
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	fab3 f683 	clz	r6, r3
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d14a      	bne.n	8000c2c <__udivmoddi4+0x160>
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xd4>
 8000b9a:	4282      	cmp	r2, r0
 8000b9c:	f200 80f9 	bhi.w	8000d92 <__udivmoddi4+0x2c6>
 8000ba0:	1a84      	subs	r4, r0, r2
 8000ba2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	469e      	mov	lr, r3
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d0e0      	beq.n	8000b70 <__udivmoddi4+0xa4>
 8000bae:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bb2:	e7dd      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000bb4:	b902      	cbnz	r2, 8000bb8 <__udivmoddi4+0xec>
 8000bb6:	deff      	udf	#255	; 0xff
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	f040 8092 	bne.w	8000ce6 <__udivmoddi4+0x21a>
 8000bc2:	eba1 010c 	sub.w	r1, r1, ip
 8000bc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bca:	fa1f fe8c 	uxth.w	lr, ip
 8000bce:	2601      	movs	r6, #1
 8000bd0:	0c20      	lsrs	r0, r4, #16
 8000bd2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bd6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bde:	fb0e f003 	mul.w	r0, lr, r3
 8000be2:	4288      	cmp	r0, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x12c>
 8000be6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bea:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x12a>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f200 80cb 	bhi.w	8000d8c <__udivmoddi4+0x2c0>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	1a09      	subs	r1, r1, r0
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c00:	fb07 1110 	mls	r1, r7, r0, r1
 8000c04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c08:	fb0e fe00 	mul.w	lr, lr, r0
 8000c0c:	45a6      	cmp	lr, r4
 8000c0e:	d908      	bls.n	8000c22 <__udivmoddi4+0x156>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c18:	d202      	bcs.n	8000c20 <__udivmoddi4+0x154>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f200 80bb 	bhi.w	8000d96 <__udivmoddi4+0x2ca>
 8000c20:	4608      	mov	r0, r1
 8000c22:	eba4 040e 	sub.w	r4, r4, lr
 8000c26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c2a:	e79c      	b.n	8000b66 <__udivmoddi4+0x9a>
 8000c2c:	f1c6 0720 	rsb	r7, r6, #32
 8000c30:	40b3      	lsls	r3, r6
 8000c32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c42:	431c      	orrs	r4, r3
 8000c44:	40f9      	lsrs	r1, r7
 8000c46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c52:	0c20      	lsrs	r0, r4, #16
 8000c54:	fa1f fe8c 	uxth.w	lr, ip
 8000c58:	fb09 1118 	mls	r1, r9, r8, r1
 8000c5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c60:	fb08 f00e 	mul.w	r0, r8, lr
 8000c64:	4288      	cmp	r0, r1
 8000c66:	fa02 f206 	lsl.w	r2, r2, r6
 8000c6a:	d90b      	bls.n	8000c84 <__udivmoddi4+0x1b8>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c74:	f080 8088 	bcs.w	8000d88 <__udivmoddi4+0x2bc>
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	f240 8085 	bls.w	8000d88 <__udivmoddi4+0x2bc>
 8000c7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c82:	4461      	add	r1, ip
 8000c84:	1a09      	subs	r1, r1, r0
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c98:	458e      	cmp	lr, r1
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x1e2>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ca4:	d26c      	bcs.n	8000d80 <__udivmoddi4+0x2b4>
 8000ca6:	458e      	cmp	lr, r1
 8000ca8:	d96a      	bls.n	8000d80 <__udivmoddi4+0x2b4>
 8000caa:	3802      	subs	r0, #2
 8000cac:	4461      	add	r1, ip
 8000cae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cb6:	eba1 010e 	sub.w	r1, r1, lr
 8000cba:	42a1      	cmp	r1, r4
 8000cbc:	46c8      	mov	r8, r9
 8000cbe:	46a6      	mov	lr, r4
 8000cc0:	d356      	bcc.n	8000d70 <__udivmoddi4+0x2a4>
 8000cc2:	d053      	beq.n	8000d6c <__udivmoddi4+0x2a0>
 8000cc4:	b15d      	cbz	r5, 8000cde <__udivmoddi4+0x212>
 8000cc6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cca:	eb61 010e 	sbc.w	r1, r1, lr
 8000cce:	fa01 f707 	lsl.w	r7, r1, r7
 8000cd2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cd6:	40f1      	lsrs	r1, r6
 8000cd8:	431f      	orrs	r7, r3
 8000cda:	e9c5 7100 	strd	r7, r1, [r5]
 8000cde:	2600      	movs	r6, #0
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	f1c2 0320 	rsb	r3, r2, #32
 8000cea:	40d8      	lsrs	r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	4301      	orrs	r1, r0
 8000cf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfc:	fa1f fe8c 	uxth.w	lr, ip
 8000d00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d04:	fb07 3610 	mls	r6, r7, r0, r3
 8000d08:	0c0b      	lsrs	r3, r1, #16
 8000d0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d12:	429e      	cmp	r6, r3
 8000d14:	fa04 f402 	lsl.w	r4, r4, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x260>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d22:	d22f      	bcs.n	8000d84 <__udivmoddi4+0x2b8>
 8000d24:	429e      	cmp	r6, r3
 8000d26:	d92d      	bls.n	8000d84 <__udivmoddi4+0x2b8>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	b289      	uxth	r1, r1
 8000d30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d34:	fb07 3316 	mls	r3, r7, r6, r3
 8000d38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x28a>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d4c:	d216      	bcs.n	8000d7c <__udivmoddi4+0x2b0>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d914      	bls.n	8000d7c <__udivmoddi4+0x2b0>
 8000d52:	3e02      	subs	r6, #2
 8000d54:	4461      	add	r1, ip
 8000d56:	1ac9      	subs	r1, r1, r3
 8000d58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d5c:	e738      	b.n	8000bd0 <__udivmoddi4+0x104>
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e705      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e3      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6f8      	b.n	8000b5e <__udivmoddi4+0x92>
 8000d6c:	454b      	cmp	r3, r9
 8000d6e:	d2a9      	bcs.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d70:	ebb9 0802 	subs.w	r8, r9, r2
 8000d74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7a3      	b.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d7c:	4646      	mov	r6, r8
 8000d7e:	e7ea      	b.n	8000d56 <__udivmoddi4+0x28a>
 8000d80:	4620      	mov	r0, r4
 8000d82:	e794      	b.n	8000cae <__udivmoddi4+0x1e2>
 8000d84:	4640      	mov	r0, r8
 8000d86:	e7d1      	b.n	8000d2c <__udivmoddi4+0x260>
 8000d88:	46d0      	mov	r8, sl
 8000d8a:	e77b      	b.n	8000c84 <__udivmoddi4+0x1b8>
 8000d8c:	3b02      	subs	r3, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	e732      	b.n	8000bf8 <__udivmoddi4+0x12c>
 8000d92:	4630      	mov	r0, r6
 8000d94:	e709      	b.n	8000baa <__udivmoddi4+0xde>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	e742      	b.n	8000c22 <__udivmoddi4+0x156>

08000d9c <__aeabi_idiv0>:
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <RMD_CANTx>:
void RMD_CANTx(RMD_Motor* rmd);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void RMD_CANTx(RMD_Motor* rmd){	// RMDにcanを送る
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	TxHeader.StdId=rmd->can_id;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a16      	ldr	r2, [pc, #88]	; (8000e08 <RMD_CANTx+0x68>)
 8000dae:	6013      	str	r3, [r2, #0]
	TxHeader.IDE = CAN_ID_STD;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <RMD_CANTx+0x68>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 0x08;
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <RMD_CANTx+0x68>)
 8000db8:	2208      	movs	r2, #8
 8000dba:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <RMD_CANTx+0x68>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <RMD_CANTx+0x68>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	751a      	strb	r2, [r3, #20]
//	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)<3){}
	if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)!=0){
 8000dc8:	4810      	ldr	r0, [pc, #64]	; (8000e0c <RMD_CANTx+0x6c>)
 8000dca:	f001 fb7f 	bl	80024cc <HAL_CAN_GetTxMailboxesFreeLevel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d00c      	beq.n	8000dee <RMD_CANTx+0x4e>
		HAL_CAN_AddTxMessage(&hcan1,&TxHeader,rmd->txcan_data,&TxMailbox);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f103 023b 	add.w	r2, r3, #59	; 0x3b
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <RMD_CANTx+0x70>)
 8000ddc:	490a      	ldr	r1, [pc, #40]	; (8000e08 <RMD_CANTx+0x68>)
 8000dde:	480b      	ldr	r0, [pc, #44]	; (8000e0c <RMD_CANTx+0x6c>)
 8000de0:	f001 fa99 	bl	8002316 <HAL_CAN_AddTxMessage>
		rmd->rmd_send = 1;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2201      	movs	r2, #1
 8000de8:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8000dec:	e005      	b.n	8000dfa <RMD_CANTx+0x5a>
	}else{
		HAL_CAN_Stop (&hcan1);
 8000dee:	4807      	ldr	r0, [pc, #28]	; (8000e0c <RMD_CANTx+0x6c>)
 8000df0:	f001 fa48 	bl	8002284 <HAL_CAN_Stop>
		HAL_CAN_Start (&hcan1);
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <RMD_CANTx+0x6c>)
 8000df6:	f001 fa01 	bl	80021fc <HAL_CAN_Start>
//		HAL_CAN_AddTxMessage(&hcan1,&TxHeader,rmd->txcan_data,&TxMailbox);
	}
	HAL_Delay(10);
 8000dfa:	200a      	movs	r0, #10
 8000dfc:	f000 fffe 	bl	8001dfc <HAL_Delay>
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	200001b0 	.word	0x200001b0
 8000e0c:	2000008c 	.word	0x2000008c
 8000e10:	200001f4 	.word	0x200001f4

08000e14 <RMD_calculatuin>:

void RMD_calculatuin(RobotArm* robot_arm, uint8_t whitch_rmd){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	70fb      	strb	r3, [r7, #3]
	robot_arm->rmd_axis.state = 1;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2201      	movs	r2, #1
 8000e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	robot_arm->rmd_axis.end_state = 0;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	robot_arm->rmd_axis.rmd_send = 0;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	if(whitch_rmd==0){
 8000e38:	78fb      	ldrb	r3, [r7, #3]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d104      	bne.n	8000e48 <RMD_calculatuin+0x34>
		robot_arm->rmd_axis.can_id = 0x141;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f240 1241 	movw	r2, #321	; 0x141
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	e006      	b.n	8000e56 <RMD_calculatuin+0x42>
//		robot_arm->rmd_axis.target_position = robot_arm->rmd_axis.zero+(-90*100) + robot_arm->rmd_axis.target_position;	//垂直から90deg引いた値、水平を0degとしてそこから入力された角度だけRMDを回転させる
	}else if(whitch_rmd==1){
 8000e48:	78fb      	ldrb	r3, [r7, #3]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d103      	bne.n	8000e56 <RMD_calculatuin+0x42>
		robot_arm->rmd_axis.can_id = 0x142;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f44f 72a1 	mov.w	r2, #322	; 0x142
 8000e54:	601a      	str	r2, [r3, #0]

	}
	memset(robot_arm->rmd_axis.txcan_data, 0, sizeof(robot_arm->rmd_axis.txcan_data));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	333b      	adds	r3, #59	; 0x3b
 8000e5a:	2208      	movs	r2, #8
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f004 fd2e 	bl	80058c0 <memset>
	if(robot_arm->rmd_axis.motion_state==1){	//RMDを回すステート
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d11d      	bne.n	8000eaa <RMD_calculatuin+0x96>
		robot_arm->rmd_axis.txcan_data[0] = 0xA4;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	22a4      	movs	r2, #164	; 0xa4
 8000e72:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		robot_arm->rmd_axis.txcan_data[2] = 0xC8;	//speed low
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	22c8      	movs	r2, #200	; 0xc8
 8000e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		robot_arm->rmd_axis.txcan_data[3] = 0x00;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		robot_arm->rmd_axis.txcan_data[4] =(robot_arm->rmd_axis.target_position&0xFF);	//poslow
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		robot_arm->rmd_axis.txcan_data[5] =(robot_arm->rmd_axis.target_position>>8)&0xFF;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	121b      	asrs	r3, r3, #8
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		robot_arm->rmd_axis.motion_state=0;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		robot_arm->rmd_axis.poweroff_state = 0;
	}else if(robot_arm->rmd_axis.encoder_state==1){
		robot_arm->rmd_axis.txcan_data[0] = 0x90;
		robot_arm->rmd_axis.encoder_state = 0;
	}
}
 8000ea8:	e069      	b.n	8000f7e <RMD_calculatuin+0x16a>
	}else if(robot_arm->rmd_axis.PID_state==1){
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d120      	bne.n	8000ef6 <RMD_calculatuin+0xe2>
		robot_arm->rmd_axis.txcan_data[0] = 0x32;	//PI設定
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2232      	movs	r2, #50	; 0x32
 8000eb8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		robot_arm->rmd_axis.txcan_data[2] = 0x64;	//anglePidKp 64
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2264      	movs	r2, #100	; 0x64
 8000ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		robot_arm->rmd_axis.txcan_data[3] = 0xC8;	//anglePidKi C8
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	22c8      	movs	r2, #200	; 0xc8
 8000ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		robot_arm->rmd_axis.txcan_data[4] = 0x64;	//speedPidKp 64
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2264      	movs	r2, #100	; 0x64
 8000ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		robot_arm->rmd_axis.txcan_data[5] = 0x14;	//speedPidKi 14
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2214      	movs	r2, #20
 8000ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		robot_arm->rmd_axis.txcan_data[6] = 0x50;	//iqPidKp 50
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2250      	movs	r2, #80	; 0x50
 8000ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		robot_arm->rmd_axis.txcan_data[7] = 0x1E;	//iqPidKi 1E
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	221e      	movs	r2, #30
 8000ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		robot_arm->rmd_axis.PID_state=0;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
}
 8000ef4:	e043      	b.n	8000f7e <RMD_calculatuin+0x16a>
	}else if(robot_arm->rmd_axis.offset_state==1){
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d115      	bne.n	8000f2c <RMD_calculatuin+0x118>
		robot_arm->rmd_axis.txcan_data[0] = 0x91;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2291      	movs	r2, #145	; 0x91
 8000f04:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		robot_arm->rmd_axis.txcan_data[6] = robot_arm->rmd_axis.offset&0xFF;	//position_offset
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		robot_arm->rmd_axis.txcan_data[7] = robot_arm->rmd_axis.offset>>8;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	121b      	asrs	r3, r3, #8
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		robot_arm->rmd_axis.offset_state=0;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 8000f2a:	e028      	b.n	8000f7e <RMD_calculatuin+0x16a>
	}else if(robot_arm->rmd_axis.poweron_state==1){
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d108      	bne.n	8000f48 <RMD_calculatuin+0x134>
		robot_arm->rmd_axis.txcan_data[0] = 0x88;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2288      	movs	r2, #136	; 0x88
 8000f3a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		robot_arm->rmd_axis.poweron_state=0;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8000f46:	e01a      	b.n	8000f7e <RMD_calculatuin+0x16a>
	}else if(robot_arm->rmd_axis.poweroff_state==1){
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d108      	bne.n	8000f64 <RMD_calculatuin+0x150>
		robot_arm->rmd_axis.txcan_data[0] = 0x80;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		robot_arm->rmd_axis.poweroff_state = 0;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8000f62:	e00c      	b.n	8000f7e <RMD_calculatuin+0x16a>
	}else if(robot_arm->rmd_axis.encoder_state==1){
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d107      	bne.n	8000f7e <RMD_calculatuin+0x16a>
		robot_arm->rmd_axis.txcan_data[0] = 0x90;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2290      	movs	r2, #144	; 0x90
 8000f72:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		robot_arm->rmd_axis.encoder_state = 0;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <SendAll>:
void SendAll(RobotArm* robot_arm)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
	if(robot_arm->rmd_axis.state==1){	//RMDの動作
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d103      	bne.n	8000fa0 <SendAll+0x1a>
		RMD_CANTx(&robot_arm->rmd_axis);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ff00 	bl	8000da0 <RMD_CANTx>

	}
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <RMD_check>:
int count = 0;
void RMD_check(RobotArm* robot_arm){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	if(robot_arm->rmd_axis.rmd_send==1){
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	f040 80c2 	bne.w	8001140 <RMD_check+0x198>
		if(robot_arm->rmd_axis.txcan_data[0]==0xA4){
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8000fc2:	2ba4      	cmp	r3, #164	; 0xa4
 8000fc4:	f040 80b1 	bne.w	800112a <RMD_check+0x182>
			count++;
 8000fc8:	4b63      	ldr	r3, [pc, #396]	; (8001158 <RMD_check+0x1b0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	4a62      	ldr	r2, [pc, #392]	; (8001158 <RMD_check+0x1b0>)
 8000fd0:	6013      	str	r3, [r2, #0]
			printf("Count : %d\r\n",count);
 8000fd2:	4b61      	ldr	r3, [pc, #388]	; (8001158 <RMD_check+0x1b0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4860      	ldr	r0, [pc, #384]	; (800115c <RMD_check+0x1b4>)
 8000fda:	f004 fc79 	bl	80058d0 <iprintf>
			robot_arm->rmd_axis.reply=((RMDRx_can_data[6] & 0xFF)|((RMDRx_can_data[7] & 0xFF) << 8));
 8000fde:	4b60      	ldr	r3, [pc, #384]	; (8001160 <RMD_check+0x1b8>)
 8000fe0:	799b      	ldrb	r3, [r3, #6]
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	4b5e      	ldr	r3, [pc, #376]	; (8001160 <RMD_check+0x1b8>)
 8000fe6:	79db      	ldrb	r3, [r3, #7]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			robot_arm->rmd_axis.temperature = RMDRx_can_data[1] & 0xFF;
 8000ff8:	4b59      	ldr	r3, [pc, #356]	; (8001160 <RMD_check+0x1b8>)
 8000ffa:	785a      	ldrb	r2, [r3, #1]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			if(robot_arm->rmd_axis.can_id == 0x141){
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f240 1241 	movw	r2, #321	; 0x141
 800100a:	4293      	cmp	r3, r2
 800100c:	d139      	bne.n	8001082 <RMD_check+0xda>
				robot_arm->rmd_axis.z = robot_arm->rmd_axis.target_position;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	621a      	str	r2, [r3, #32]
				robot_arm->rmd_axis.rotate = robot_arm->rmd_axis.z/36000;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	4a52      	ldr	r2, [pc, #328]	; (8001164 <RMD_check+0x1bc>)
 800101c:	fb82 1203 	smull	r1, r2, r2, r3
 8001020:	1392      	asrs	r2, r2, #14
 8001022:	17db      	asrs	r3, r3, #31
 8001024:	1ad2      	subs	r2, r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
				robot_arm->rmd_axis.encoder_val = (int)round((robot_arm->rmd_axis.z - 36000 * robot_arm->rmd_axis.rotate) * 65535.0/36000.0);	//角度をエンコーダー値に変換
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a1a      	ldr	r2, [r3, #32]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001032:	494d      	ldr	r1, [pc, #308]	; (8001168 <RMD_check+0x1c0>)
 8001034:	fb01 f303 	mul.w	r3, r1, r3
 8001038:	4413      	add	r3, r2
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fa8a 	bl	8000554 <__aeabi_i2d>
 8001040:	a341      	add	r3, pc, #260	; (adr r3, 8001148 <RMD_check+0x1a0>)
 8001042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001046:	f7ff faef 	bl	8000628 <__aeabi_dmul>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
 8001052:	a33f      	add	r3, pc, #252	; (adr r3, 8001150 <RMD_check+0x1a8>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff fc10 	bl	800087c <__aeabi_ddiv>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	ec43 2b17 	vmov	d7, r2, r3
 8001064:	eeb0 0a47 	vmov.f32	s0, s14
 8001068:	eef0 0a67 	vmov.f32	s1, s15
 800106c:	f005 fd0a 	bl	8006a84 <round>
 8001070:	ec53 2b10 	vmov	r2, r3, d0
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f7ff fce8 	bl	8000a4c <__aeabi_d2iz>
 800107c:	4602      	mov	r2, r0
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	629a      	str	r2, [r3, #40]	; 0x28
			}
//			else if(robot_arm->rmd_axis.can_id == 0x142){
//				robot_arm->rmd_axis.rotate = robot_arm->rmd_axis.z/36000;
//				robot_arm->rmd_axis.encoder_val = (int)round((robot_arm->rmd_axis.z - 36000 * robot_arm->rmd_axis.rotate) * 65535.0/36000.0);
//			}
			printf("current_val : %d\r\n",robot_arm->rmd_axis.current_val);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001088:	4619      	mov	r1, r3
 800108a:	4838      	ldr	r0, [pc, #224]	; (800116c <RMD_check+0x1c4>)
 800108c:	f004 fc20 	bl	80058d0 <iprintf>
			printf("encoder_val : %d\r\n",robot_arm->rmd_axis.encoder_val);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001094:	4619      	mov	r1, r3
 8001096:	4836      	ldr	r0, [pc, #216]	; (8001170 <RMD_check+0x1c8>)
 8001098:	f004 fc1a 	bl	80058d0 <iprintf>
			printf("reply : %d\r\n",robot_arm->rmd_axis.reply);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010a2:	4619      	mov	r1, r3
 80010a4:	4833      	ldr	r0, [pc, #204]	; (8001174 <RMD_check+0x1cc>)
 80010a6:	f004 fc13 	bl	80058d0 <iprintf>

			if(abs(robot_arm->rmd_axis.current_val-robot_arm->rmd_axis.encoder_val>100)){
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80010b0:	461a      	mov	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b64      	cmp	r3, #100	; 0x64
 80010ba:	dd26      	ble.n	800110a <RMD_check+0x162>
				printf("Sending...\r\n");
 80010bc:	482e      	ldr	r0, [pc, #184]	; (8001178 <RMD_check+0x1d0>)
 80010be:	f004 fc8d 	bl	80059dc <puts>
				if(abs(robot_arm->rmd_axis.current_val-robot_arm->rmd_axis.reply)>100){
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80010c8:	461a      	mov	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	bfb8      	it	lt
 80010d6:	425b      	neglt	r3, r3
 80010d8:	2b64      	cmp	r3, #100	; 0x64
 80010da:	dd07      	ble.n	80010ec <RMD_check+0x144>
					robot_arm->rmd_axis.state = 0;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
					printf("SendComplete!\r\n");
 80010e4:	4825      	ldr	r0, [pc, #148]	; (800117c <RMD_check+0x1d4>)
 80010e6:	f004 fc79 	bl	80059dc <puts>
 80010ea:	e015      	b.n	8001118 <RMD_check+0x170>
				}else if(count > 100){
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <RMD_check+0x1b0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b64      	cmp	r3, #100	; 0x64
 80010f2:	dd11      	ble.n	8001118 <RMD_check+0x170>
					printf("Error! : %d\r\n",count);
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <RMD_check+0x1b0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	4821      	ldr	r0, [pc, #132]	; (8001180 <RMD_check+0x1d8>)
 80010fc:	f004 fbe8 	bl	80058d0 <iprintf>
					robot_arm->rmd_axis.state = 0;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001108:	e006      	b.n	8001118 <RMD_check+0x170>
				}
			}else{
				printf("Same Position!\r\n");
 800110a:	481e      	ldr	r0, [pc, #120]	; (8001184 <RMD_check+0x1dc>)
 800110c:	f004 fc66 	bl	80059dc <puts>
				robot_arm->rmd_axis.state=0;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			}
			if(robot_arm->rmd_axis.state==0){
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10a      	bne.n	8001138 <RMD_check+0x190>
				count = 0;
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <RMD_check+0x1b0>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	e006      	b.n	8001138 <RMD_check+0x190>
			}
		}else{
			robot_arm->rmd_axis.state=0;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			count = 0;
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <RMD_check+0x1b0>)
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
		}
		robot_arm->rmd_axis.rmd_send = 0;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	}
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	00000000 	.word	0x00000000
 800114c:	40efffe0 	.word	0x40efffe0
 8001150:	00000000 	.word	0x00000000
 8001154:	40e19400 	.word	0x40e19400
 8001158:	20000250 	.word	0x20000250
 800115c:	08006b28 	.word	0x08006b28
 8001160:	200001ec 	.word	0x200001ec
 8001164:	7482296b 	.word	0x7482296b
 8001168:	ffff7360 	.word	0xffff7360
 800116c:	08006b38 	.word	0x08006b38
 8001170:	08006b4c 	.word	0x08006b4c
 8001174:	08006b60 	.word	0x08006b60
 8001178:	08006b70 	.word	0x08006b70
 800117c:	08006b7c 	.word	0x08006b7c
 8001180:	08006b8c 	.word	0x08006b8c
 8001184:	08006b9c 	.word	0x08006b9c

08001188 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	RobotArm *robot_arm= &ra;
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001192:	60fb      	str	r3, [r7, #12]
    if (htim == &htim2){
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d103      	bne.n	80011a4 <HAL_TIM_PeriodElapsedCallback+0x1c>
    	SendAll(robot_arm);
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f7ff fef2 	bl	8000f86 <SendAll>
    }
    else if (htim == &htim3){
    	RMD_check(robot_arm);
    }
}
 80011a2:	e006      	b.n	80011b2 <HAL_TIM_PeriodElapsedCallback+0x2a>
    else if (htim == &htim3){
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d102      	bne.n	80011b2 <HAL_TIM_PeriodElapsedCallback+0x2a>
    	RMD_check(robot_arm);
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f7ff fefb 	bl	8000fa8 <RMD_check>
}
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200001fc 	.word	0x200001fc
 80011c0:	200000b4 	.word	0x200000b4
 80011c4:	200000fc 	.word	0x200000fc

080011c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 80011ce:	4b63      	ldr	r3, [pc, #396]	; (800135c <main+0x194>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f004 fc08 	bl	80059ec <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011dc:	f000 fd9c 	bl	8001d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e0:	f000 f8dc 	bl	800139c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e4:	f000 fa42 	bl	800166c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011e8:	f000 fa16 	bl	8001618 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80011ec:	f000 f942 	bl	8001474 <MX_CAN1_Init>
  MX_TIM2_Init();
 80011f0:	f000 f976 	bl	80014e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011f4:	f000 f9c2 	bl	800157c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  sFilterConfig.FilterBank = 0;
 80011f8:	4b59      	ldr	r3, [pc, #356]	; (8001360 <main+0x198>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80011fe:	4b58      	ldr	r3, [pc, #352]	; (8001360 <main+0x198>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001204:	4b56      	ldr	r3, [pc, #344]	; (8001360 <main+0x198>)
 8001206:	2201      	movs	r2, #1
 8001208:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800120a:	4b55      	ldr	r3, [pc, #340]	; (8001360 <main+0x198>)
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8001210:	4b53      	ldr	r3, [pc, #332]	; (8001360 <main+0x198>)
 8001212:	2200      	movs	r2, #0
 8001214:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001216:	4b52      	ldr	r3, [pc, #328]	; (8001360 <main+0x198>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800121c:	4b50      	ldr	r3, [pc, #320]	; (8001360 <main+0x198>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001222:	4b4f      	ldr	r3, [pc, #316]	; (8001360 <main+0x198>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation=ENABLE;
 8001228:	4b4d      	ldr	r3, [pc, #308]	; (8001360 <main+0x198>)
 800122a:	2201      	movs	r2, #1
 800122c:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank=14;
 800122e:	4b4c      	ldr	r3, [pc, #304]	; (8001360 <main+0x198>)
 8001230:	220e      	movs	r2, #14
 8001232:	625a      	str	r2, [r3, #36]	; 0x24
  if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 8001234:	494a      	ldr	r1, [pc, #296]	; (8001360 <main+0x198>)
 8001236:	484b      	ldr	r0, [pc, #300]	; (8001364 <main+0x19c>)
 8001238:	f000 ff00 	bl	800203c <HAL_CAN_ConfigFilter>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <main+0x7e>
  {
	  Error_Handler();
 8001242:	f000 fb19 	bl	8001878 <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 8001246:	4847      	ldr	r0, [pc, #284]	; (8001364 <main+0x19c>)
 8001248:	f000 ffd8 	bl	80021fc <HAL_CAN_Start>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <main+0x8e>
  {
	  Error_Handler();
 8001252:	f000 fb11 	bl	8001878 <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8001256:	2103      	movs	r1, #3
 8001258:	4842      	ldr	r0, [pc, #264]	; (8001364 <main+0x19c>)
 800125a:	f001 fa7e 	bl	800275a <HAL_CAN_ActivateNotification>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <main+0xa0>
  {
	  Error_Handler();
 8001264:	f000 fb08 	bl	8001878 <Error_Handler>
  }
  HAL_TIM_Base_Start_IT(&htim2);
 8001268:	483f      	ldr	r0, [pc, #252]	; (8001368 <main+0x1a0>)
 800126a:	f002 fe55 	bl	8003f18 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800126e:	483f      	ldr	r0, [pc, #252]	; (800136c <main+0x1a4>)
 8001270:	f002 fe52 	bl	8003f18 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)KeyCommand, 1);
 8001274:	2201      	movs	r2, #1
 8001276:	493e      	ldr	r1, [pc, #248]	; (8001370 <main+0x1a8>)
 8001278:	483e      	ldr	r0, [pc, #248]	; (8001374 <main+0x1ac>)
 800127a:	f003 fb5e 	bl	800493a <HAL_UART_Receive_IT>
  printf("InIt end\r\n");
 800127e:	483e      	ldr	r0, [pc, #248]	; (8001378 <main+0x1b0>)
 8001280:	f004 fbac 	bl	80059dc <puts>
  RobotArm *robot_arm = &ra;
 8001284:	4b3d      	ldr	r3, [pc, #244]	; (800137c <main+0x1b4>)
 8001286:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_uart_flag=0;
 8001288:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <main+0x1b8>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
	  //受信するまで待つ
	  printf("waiting...\r\n");
 800128e:	483d      	ldr	r0, [pc, #244]	; (8001384 <main+0x1bc>)
 8001290:	f004 fba4 	bl	80059dc <puts>
	  while(!get_uart_flag){}
 8001294:	bf00      	nop
 8001296:	4b3a      	ldr	r3, [pc, #232]	; (8001380 <main+0x1b8>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0fb      	beq.n	8001296 <main+0xce>
	  printf("waitiUARTflag\r\n");
 800129e:	483a      	ldr	r0, [pc, #232]	; (8001388 <main+0x1c0>)
 80012a0:	f004 fb9c 	bl	80059dc <puts>
	  if(KeyCommand[0]!=0 ){
 80012a4:	4b32      	ldr	r3, [pc, #200]	; (8001370 <main+0x1a8>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0ed      	beq.n	8001288 <main+0xc0>
		  switch(KeyCommand[0]){
 80012ac:	4b30      	ldr	r3, [pc, #192]	; (8001370 <main+0x1a8>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b73      	cmp	r3, #115	; 0x73
 80012b2:	d03b      	beq.n	800132c <main+0x164>
 80012b4:	2b73      	cmp	r3, #115	; 0x73
 80012b6:	dc45      	bgt.n	8001344 <main+0x17c>
 80012b8:	2b61      	cmp	r3, #97	; 0x61
 80012ba:	d002      	beq.n	80012c2 <main+0xfa>
 80012bc:	2b64      	cmp	r3, #100	; 0x64
 80012be:	d01b      	beq.n	80012f8 <main+0x130>
 80012c0:	e040      	b.n	8001344 <main+0x17c>
		  case'a':
			  printf("case:a\r\n");
 80012c2:	4832      	ldr	r0, [pc, #200]	; (800138c <main+0x1c4>)
 80012c4:	f004 fb8a 	bl	80059dc <puts>
			  robot_arm->rmd_axis.encoder_state=1;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			  RMD_calculatuin(robot_arm,0);
 80012d0:	2100      	movs	r1, #0
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fd9e 	bl	8000e14 <RMD_calculatuin>
			  HAL_Delay(50);
 80012d8:	2032      	movs	r0, #50	; 0x32
 80012da:	f000 fd8f 	bl	8001dfc <HAL_Delay>
			  robot_arm->rmd_axis.motion_state=1;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			  robot_arm->rmd_axis.target_position = 40000;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f649 4240 	movw	r2, #40000	; 0x9c40
 80012ec:	609a      	str	r2, [r3, #8]
			  RMD_calculatuin(robot_arm,0);
 80012ee:	2100      	movs	r1, #0
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff fd8f 	bl	8000e14 <RMD_calculatuin>
			  break;
 80012f6:	e02c      	b.n	8001352 <main+0x18a>

		  case'd':
			  printf("case:d\r\n");
 80012f8:	4825      	ldr	r0, [pc, #148]	; (8001390 <main+0x1c8>)
 80012fa:	f004 fb6f 	bl	80059dc <puts>
			  robot_arm->rmd_axis.encoder_state=1;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			  RMD_calculatuin(robot_arm,0);
 8001306:	2100      	movs	r1, #0
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fd83 	bl	8000e14 <RMD_calculatuin>
			  HAL_Delay(50);
 800130e:	2032      	movs	r0, #50	; 0x32
 8001310:	f000 fd74 	bl	8001dfc <HAL_Delay>
			  robot_arm->rmd_axis.motion_state=1;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			  robot_arm->rmd_axis.target_position = 0;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
			  RMD_calculatuin(robot_arm,0);
 8001322:	2100      	movs	r1, #0
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff fd75 	bl	8000e14 <RMD_calculatuin>
			  break;
 800132a:	e012      	b.n	8001352 <main+0x18a>
		  case's':
			  printf("case:s\r\n");
 800132c:	4819      	ldr	r0, [pc, #100]	; (8001394 <main+0x1cc>)
 800132e:	f004 fb55 	bl	80059dc <puts>
			  robot_arm->rmd_axis.encoder_state=1;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2201      	movs	r2, #1
 8001336:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			  RMD_calculatuin(robot_arm,0);
 800133a:	2100      	movs	r1, #0
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff fd69 	bl	8000e14 <RMD_calculatuin>
			  break;
 8001342:	e006      	b.n	8001352 <main+0x18a>

		  default:
			  KeyCommand[0]=0;
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <main+0x1a8>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
			  printf("No,command\r\n");
 800134a:	4813      	ldr	r0, [pc, #76]	; (8001398 <main+0x1d0>)
 800134c:	f004 fb46 	bl	80059dc <puts>
			  break;
 8001350:	bf00      	nop
		  }
		  KeyCommand[0]=0;
 8001352:	4b07      	ldr	r3, [pc, #28]	; (8001370 <main+0x1a8>)
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
	  get_uart_flag=0;
 8001358:	e796      	b.n	8001288 <main+0xc0>
 800135a:	bf00      	nop
 800135c:	2000000c 	.word	0x2000000c
 8001360:	20000188 	.word	0x20000188
 8001364:	2000008c 	.word	0x2000008c
 8001368:	200000b4 	.word	0x200000b4
 800136c:	200000fc 	.word	0x200000fc
 8001370:	200001f8 	.word	0x200001f8
 8001374:	20000144 	.word	0x20000144
 8001378:	08006bac 	.word	0x08006bac
 800137c:	200001fc 	.word	0x200001fc
 8001380:	200001f9 	.word	0x200001f9
 8001384:	08006bb8 	.word	0x08006bb8
 8001388:	08006bc4 	.word	0x08006bc4
 800138c:	08006bd4 	.word	0x08006bd4
 8001390:	08006bdc 	.word	0x08006bdc
 8001394:	08006be4 	.word	0x08006be4
 8001398:	08006bec 	.word	0x08006bec

0800139c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b094      	sub	sp, #80	; 0x50
 80013a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	2234      	movs	r2, #52	; 0x34
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f004 fa88 	bl	80058c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c0:	2300      	movs	r3, #0
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	4b29      	ldr	r3, [pc, #164]	; (800146c <SystemClock_Config+0xd0>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	4a28      	ldr	r2, [pc, #160]	; (800146c <SystemClock_Config+0xd0>)
 80013ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ce:	6413      	str	r3, [r2, #64]	; 0x40
 80013d0:	4b26      	ldr	r3, [pc, #152]	; (800146c <SystemClock_Config+0xd0>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013dc:	2300      	movs	r3, #0
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	4b23      	ldr	r3, [pc, #140]	; (8001470 <SystemClock_Config+0xd4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a22      	ldr	r2, [pc, #136]	; (8001470 <SystemClock_Config+0xd4>)
 80013e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b20      	ldr	r3, [pc, #128]	; (8001470 <SystemClock_Config+0xd4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f8:	2302      	movs	r3, #2
 80013fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013fc:	2301      	movs	r3, #1
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001400:	2310      	movs	r3, #16
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001404:	2302      	movs	r3, #2
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001408:	2300      	movs	r3, #0
 800140a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800140c:	2308      	movs	r3, #8
 800140e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001410:	23a0      	movs	r3, #160	; 0xa0
 8001412:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001414:	2302      	movs	r3, #2
 8001416:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001418:	2302      	movs	r3, #2
 800141a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800141c:	2302      	movs	r3, #2
 800141e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4618      	mov	r0, r3
 8001426:	f002 fa89 	bl	800393c <HAL_RCC_OscConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001430:	f000 fa22 	bl	8001878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001434:	230f      	movs	r3, #15
 8001436:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001438:	2302      	movs	r3, #2
 800143a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001440:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001444:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	2105      	movs	r1, #5
 8001452:	4618      	mov	r0, r3
 8001454:	f001 ff28 	bl	80032a8 <HAL_RCC_ClockConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800145e:	f000 fa0b 	bl	8001878 <Error_Handler>
  }
}
 8001462:	bf00      	nop
 8001464:	3750      	adds	r7, #80	; 0x50
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800
 8001470:	40007000 	.word	0x40007000

08001474 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001478:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <MX_CAN1_Init+0x64>)
 800147a:	4a18      	ldr	r2, [pc, #96]	; (80014dc <MX_CAN1_Init+0x68>)
 800147c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <MX_CAN1_Init+0x64>)
 8001480:	2204      	movs	r2, #4
 8001482:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <MX_CAN1_Init+0x64>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <MX_CAN1_Init+0x64>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_CAN1_Init+0x64>)
 8001492:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001496:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <MX_CAN1_Init+0x64>)
 800149a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800149e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80014a0:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <MX_CAN1_Init+0x64>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_CAN1_Init+0x64>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <MX_CAN1_Init+0x64>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_CAN1_Init+0x64>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <MX_CAN1_Init+0x64>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_CAN1_Init+0x64>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <MX_CAN1_Init+0x64>)
 80014c6:	f000 fcbd 	bl	8001e44 <HAL_CAN_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80014d0:	f000 f9d2 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	2000008c 	.word	0x2000008c
 80014dc:	40006400 	.word	0x40006400

080014e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f4:	463b      	mov	r3, r7
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <MX_TIM2_Init+0x98>)
 80014fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001502:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001504:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <MX_TIM2_Init+0x98>)
 8001506:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800150a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_TIM2_Init+0x98>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8001512:	4b19      	ldr	r3, [pc, #100]	; (8001578 <MX_TIM2_Init+0x98>)
 8001514:	f240 128f 	movw	r2, #399	; 0x18f
 8001518:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <MX_TIM2_Init+0x98>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <MX_TIM2_Init+0x98>)
 8001522:	2280      	movs	r2, #128	; 0x80
 8001524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001526:	4814      	ldr	r0, [pc, #80]	; (8001578 <MX_TIM2_Init+0x98>)
 8001528:	f002 fca6 	bl	8003e78 <HAL_TIM_Base_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001532:	f000 f9a1 	bl	8001878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	4619      	mov	r1, r3
 8001542:	480d      	ldr	r0, [pc, #52]	; (8001578 <MX_TIM2_Init+0x98>)
 8001544:	f002 fe60 	bl	8004208 <HAL_TIM_ConfigClockSource>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800154e:	f000 f993 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800155a:	463b      	mov	r3, r7
 800155c:	4619      	mov	r1, r3
 800155e:	4806      	ldr	r0, [pc, #24]	; (8001578 <MX_TIM2_Init+0x98>)
 8001560:	f003 f87c 	bl	800465c <HAL_TIMEx_MasterConfigSynchronization>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800156a:	f000 f985 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200000b4 	.word	0x200000b4

0800157c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001582:	f107 0308 	add.w	r3, r7, #8
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001590:	463b      	mov	r3, r7
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <MX_TIM3_Init+0x94>)
 800159a:	4a1e      	ldr	r2, [pc, #120]	; (8001614 <MX_TIM3_Init+0x98>)
 800159c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 800159e:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <MX_TIM3_Init+0x94>)
 80015a0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80015a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <MX_TIM3_Init+0x94>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <MX_TIM3_Init+0x94>)
 80015ae:	22c7      	movs	r2, #199	; 0xc7
 80015b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <MX_TIM3_Init+0x94>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <MX_TIM3_Init+0x94>)
 80015ba:	2280      	movs	r2, #128	; 0x80
 80015bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015be:	4814      	ldr	r0, [pc, #80]	; (8001610 <MX_TIM3_Init+0x94>)
 80015c0:	f002 fc5a 	bl	8003e78 <HAL_TIM_Base_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80015ca:	f000 f955 	bl	8001878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015d4:	f107 0308 	add.w	r3, r7, #8
 80015d8:	4619      	mov	r1, r3
 80015da:	480d      	ldr	r0, [pc, #52]	; (8001610 <MX_TIM3_Init+0x94>)
 80015dc:	f002 fe14 	bl	8004208 <HAL_TIM_ConfigClockSource>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80015e6:	f000 f947 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015f2:	463b      	mov	r3, r7
 80015f4:	4619      	mov	r1, r3
 80015f6:	4806      	ldr	r0, [pc, #24]	; (8001610 <MX_TIM3_Init+0x94>)
 80015f8:	f003 f830 	bl	800465c <HAL_TIMEx_MasterConfigSynchronization>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001602:	f000 f939 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200000fc 	.word	0x200000fc
 8001614:	40000400 	.word	0x40000400

08001618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <MX_USART2_UART_Init+0x50>)
 8001620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800163e:	220c      	movs	r2, #12
 8001640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001650:	f003 f894 	bl	800477c <HAL_UART_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800165a:	f000 f90d 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000144 	.word	0x20000144
 8001668:	40004400 	.word	0x40004400

0800166c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b37      	ldr	r3, [pc, #220]	; (8001764 <MX_GPIO_Init+0xf8>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a36      	ldr	r2, [pc, #216]	; (8001764 <MX_GPIO_Init+0xf8>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b34      	ldr	r3, [pc, #208]	; (8001764 <MX_GPIO_Init+0xf8>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b30      	ldr	r3, [pc, #192]	; (8001764 <MX_GPIO_Init+0xf8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a2f      	ldr	r2, [pc, #188]	; (8001764 <MX_GPIO_Init+0xf8>)
 80016a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <MX_GPIO_Init+0xf8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	4b29      	ldr	r3, [pc, #164]	; (8001764 <MX_GPIO_Init+0xf8>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a28      	ldr	r2, [pc, #160]	; (8001764 <MX_GPIO_Init+0xf8>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <MX_GPIO_Init+0xf8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	4b22      	ldr	r3, [pc, #136]	; (8001764 <MX_GPIO_Init+0xf8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a21      	ldr	r2, [pc, #132]	; (8001764 <MX_GPIO_Init+0xf8>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <MX_GPIO_Init+0xf8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2120      	movs	r1, #32
 80016f6:	481c      	ldr	r0, [pc, #112]	; (8001768 <MX_GPIO_Init+0xfc>)
 80016f8:	f001 fdbc 	bl	8003274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	2110      	movs	r1, #16
 8001700:	481a      	ldr	r0, [pc, #104]	; (800176c <MX_GPIO_Init+0x100>)
 8001702:	f001 fdb7 	bl	8003274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800170c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	4814      	ldr	r0, [pc, #80]	; (8001770 <MX_GPIO_Init+0x104>)
 800171e:	f001 fc15 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001722:	2320      	movs	r3, #32
 8001724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	2301      	movs	r3, #1
 8001728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	480b      	ldr	r0, [pc, #44]	; (8001768 <MX_GPIO_Init+0xfc>)
 800173a:	f001 fc07 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800173e:	2310      	movs	r3, #16
 8001740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_GPIO_Init+0x100>)
 8001756:	f001 fbf9 	bl	8002f4c <HAL_GPIO_Init>

}
 800175a:	bf00      	nop
 800175c:	3728      	adds	r7, #40	; 0x28
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800
 8001768:	40020000 	.word	0x40020000
 800176c:	40020400 	.word	0x40020400
 8001770:	40020800 	.word	0x40020800

08001774 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)	//printfに必要
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	b29a      	uxth	r2, r3
 8001784:	230a      	movs	r3, #10
 8001786:	68b9      	ldr	r1, [r7, #8]
 8001788:	4803      	ldr	r0, [pc, #12]	; (8001798 <_write+0x24>)
 800178a:	f003 f844 	bl	8004816 <HAL_UART_Transmit>
  return len;
 800178e:	687b      	ldr	r3, [r7, #4]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000144 	.word	0x20000144

0800179c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef*UartHandle)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

//	HAL_UART_Transmit(&huart2,UART1_Data,1,1000);	//1byte受け取ったら次へ
	get_uart_flag=1;
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_UART_RxCpltCallback+0x20>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, (uint8_t *)KeyCommand, 1);
 80017aa:	2201      	movs	r2, #1
 80017ac:	4904      	ldr	r1, [pc, #16]	; (80017c0 <HAL_UART_RxCpltCallback+0x24>)
 80017ae:	4805      	ldr	r0, [pc, #20]	; (80017c4 <HAL_UART_RxCpltCallback+0x28>)
 80017b0:	f003 f8c3 	bl	800493a <HAL_UART_Receive_IT>

}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200001f9 	.word	0x200001f9
 80017c0:	200001f8 	.word	0x200001f8
 80017c4:	20000144 	.word	0x20000144

080017c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0, &RxHeader, canRxdata);
 80017d0:	4b22      	ldr	r3, [pc, #136]	; (800185c <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80017d2:	4a23      	ldr	r2, [pc, #140]	; (8001860 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80017d4:	2100      	movs	r1, #0
 80017d6:	4823      	ldr	r0, [pc, #140]	; (8001864 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80017d8:	f000 fead 	bl	8002536 <HAL_CAN_GetRxMessage>
	 RobotArm *robot_arm = &ra;
 80017dc:	4b22      	ldr	r3, [pc, #136]	; (8001868 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80017de:	60fb      	str	r3, [r7, #12]
	if(RxHeader.StdId==0x141){
 80017e0:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f240 1241 	movw	r2, #321	; 0x141
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d133      	bne.n	8001854 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
		memcpy(RMDRx_can_data, canRxdata, 8);
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80017ee:	4a1b      	ldr	r2, [pc, #108]	; (800185c <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80017f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017f4:	e883 0003 	stmia.w	r3, {r0, r1}
		if(RMDRx_can_data[0]==0xA4){
 80017f8:	4b1c      	ldr	r3, [pc, #112]	; (800186c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2ba4      	cmp	r3, #164	; 0xa4
 80017fe:	d118      	bne.n	8001832 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
			printf("Count : %d\r\n",count);
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	481b      	ldr	r0, [pc, #108]	; (8001874 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001808:	f004 f862 	bl	80058d0 <iprintf>
			robot_arm->rmd_axis.reply=((RMDRx_can_data[6] & 0xFF)|((RMDRx_can_data[7] & 0xFF) << 8));	//エンコーダデータ更新
 800180c:	4b17      	ldr	r3, [pc, #92]	; (800186c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800180e:	799b      	ldrb	r3, [r3, #6]
 8001810:	b21a      	sxth	r2, r3
 8001812:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8001814:	79db      	ldrb	r3, [r3, #7]
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	b21b      	sxth	r3, r3
 800181a:	4313      	orrs	r3, r2
 800181c:	b21b      	sxth	r3, r3
 800181e:	b29a      	uxth	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			robot_arm->rmd_axis.temperature = RMDRx_can_data[1] & 0xFF;
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8001828:	785a      	ldrb	r2, [r3, #1]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		}else if(RMDRx_can_data[0]==0x90){
			robot_arm->rmd_axis.current_val = (RMDRx_can_data[2]) | ((RMDRx_can_data[3])<<8);
		}
	}
}
 8001830:	e010      	b.n	8001854 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
		}else if(RMDRx_can_data[0]==0x90){
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b90      	cmp	r3, #144	; 0x90
 8001838:	d10c      	bne.n	8001854 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
			robot_arm->rmd_axis.current_val = (RMDRx_can_data[2]) | ((RMDRx_can_data[3])<<8);
 800183a:	4b0c      	ldr	r3, [pc, #48]	; (800186c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800183c:	789b      	ldrb	r3, [r3, #2]
 800183e:	b21a      	sxth	r2, r3
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8001842:	78db      	ldrb	r3, [r3, #3]
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	b21b      	sxth	r3, r3
 8001848:	4313      	orrs	r3, r2
 800184a:	b21b      	sxth	r3, r3
 800184c:	b29a      	uxth	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
}
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200001e4 	.word	0x200001e4
 8001860:	200001c8 	.word	0x200001c8
 8001864:	2000008c 	.word	0x2000008c
 8001868:	200001fc 	.word	0x200001fc
 800186c:	200001ec 	.word	0x200001ec
 8001870:	20000250 	.word	0x20000250
 8001874:	08006b28 	.word	0x08006b28

08001878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800187c:	b672      	cpsid	i
}
 800187e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("error\r\n");
 8001880:	4801      	ldr	r0, [pc, #4]	; (8001888 <Error_Handler+0x10>)
 8001882:	f004 f8ab 	bl	80059dc <puts>
  while (1)
 8001886:	e7fe      	b.n	8001886 <Error_Handler+0xe>
 8001888:	08006bf8 	.word	0x08006bf8

0800188c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <HAL_MspInit+0x4c>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <HAL_MspInit+0x4c>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a0:	6453      	str	r3, [r2, #68]	; 0x44
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <HAL_MspInit+0x4c>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_MspInit+0x4c>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <HAL_MspInit+0x4c>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_MspInit+0x4c>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800

080018dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a2a      	ldr	r2, [pc, #168]	; (80019a4 <HAL_CAN_MspInit+0xc8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d14d      	bne.n	800199a <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	4b29      	ldr	r3, [pc, #164]	; (80019a8 <HAL_CAN_MspInit+0xcc>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	4a28      	ldr	r2, [pc, #160]	; (80019a8 <HAL_CAN_MspInit+0xcc>)
 8001908:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800190c:	6413      	str	r3, [r2, #64]	; 0x40
 800190e:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <HAL_CAN_MspInit+0xcc>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <HAL_CAN_MspInit+0xcc>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a21      	ldr	r2, [pc, #132]	; (80019a8 <HAL_CAN_MspInit+0xcc>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <HAL_CAN_MspInit+0xcc>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001936:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800193a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001944:	2303      	movs	r3, #3
 8001946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001948:	2309      	movs	r3, #9
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4619      	mov	r1, r3
 8001952:	4816      	ldr	r0, [pc, #88]	; (80019ac <HAL_CAN_MspInit+0xd0>)
 8001954:	f001 fafa 	bl	8002f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800195c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001962:	2301      	movs	r3, #1
 8001964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001966:	2303      	movs	r3, #3
 8001968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800196a:	2309      	movs	r3, #9
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	480d      	ldr	r0, [pc, #52]	; (80019ac <HAL_CAN_MspInit+0xd0>)
 8001976:	f001 fae9 	bl	8002f4c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	2013      	movs	r0, #19
 8001980:	f001 fa1b 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001984:	2013      	movs	r0, #19
 8001986:	f001 fa34 	bl	8002df2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	2014      	movs	r0, #20
 8001990:	f001 fa13 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001994:	2014      	movs	r0, #20
 8001996:	f001 fa2c 	bl	8002df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	; 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40006400 	.word	0x40006400
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020000 	.word	0x40020000

080019b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c0:	d116      	bne.n	80019f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <HAL_TIM_Base_MspInit+0x80>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a19      	ldr	r2, [pc, #100]	; (8001a30 <HAL_TIM_Base_MspInit+0x80>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <HAL_TIM_Base_MspInit+0x80>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2101      	movs	r1, #1
 80019e2:	201c      	movs	r0, #28
 80019e4:	f001 f9e9 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019e8:	201c      	movs	r0, #28
 80019ea:	f001 fa02 	bl	8002df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019ee:	e01a      	b.n	8001a26 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0f      	ldr	r2, [pc, #60]	; (8001a34 <HAL_TIM_Base_MspInit+0x84>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d115      	bne.n	8001a26 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <HAL_TIM_Base_MspInit+0x80>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <HAL_TIM_Base_MspInit+0x80>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_TIM_Base_MspInit+0x80>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2101      	movs	r1, #1
 8001a1a:	201d      	movs	r0, #29
 8001a1c:	f001 f9cd 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a20:	201d      	movs	r0, #29
 8001a22:	f001 f9e6 	bl	8002df2 <HAL_NVIC_EnableIRQ>
}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40000400 	.word	0x40000400

08001a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a1d      	ldr	r2, [pc, #116]	; (8001acc <HAL_UART_MspInit+0x94>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d133      	bne.n	8001ac2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <HAL_UART_MspInit+0x98>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	4a1b      	ldr	r2, [pc, #108]	; (8001ad0 <HAL_UART_MspInit+0x98>)
 8001a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a68:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <HAL_UART_MspInit+0x98>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <HAL_UART_MspInit+0x98>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a14      	ldr	r2, [pc, #80]	; (8001ad0 <HAL_UART_MspInit+0x98>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_UART_MspInit+0x98>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a92:	230c      	movs	r3, #12
 8001a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aa2:	2307      	movs	r3, #7
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4809      	ldr	r0, [pc, #36]	; (8001ad4 <HAL_UART_MspInit+0x9c>)
 8001aae:	f001 fa4d 	bl	8002f4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2026      	movs	r0, #38	; 0x26
 8001ab8:	f001 f97f 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001abc:	2026      	movs	r0, #38	; 0x26
 8001abe:	f001 f998 	bl	8002df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ac2:	bf00      	nop
 8001ac4:	3728      	adds	r7, #40	; 0x28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40004400 	.word	0x40004400
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020000 	.word	0x40020000

08001ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <NMI_Handler+0x4>

08001ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <HardFault_Handler+0x4>

08001ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <MemManage_Handler+0x4>

08001aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <BusFault_Handler+0x4>

08001af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <UsageFault_Handler+0x4>

08001af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b24:	f000 f94a 	bl	8001dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <CAN1_TX_IRQHandler+0x10>)
 8001b32:	f000 fe38 	bl	80027a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000008c 	.word	0x2000008c

08001b40 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <CAN1_RX0_IRQHandler+0x10>)
 8001b46:	f000 fe2e 	bl	80027a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000008c 	.word	0x2000008c

08001b54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <TIM2_IRQHandler+0x10>)
 8001b5a:	f002 fa4d 	bl	8003ff8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200000b4 	.word	0x200000b4

08001b68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <TIM3_IRQHandler+0x10>)
 8001b6e:	f002 fa43 	bl	8003ff8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200000fc 	.word	0x200000fc

08001b7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <USART2_IRQHandler+0x10>)
 8001b82:	f002 ff0b 	bl	800499c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000144 	.word	0x20000144

08001b90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	e00a      	b.n	8001bb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ba2:	f3af 8000 	nop.w
 8001ba6:	4601      	mov	r1, r0
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	60ba      	str	r2, [r7, #8]
 8001bae:	b2ca      	uxtb	r2, r1
 8001bb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	dbf0      	blt.n	8001ba2 <_read+0x12>
	}

return len;
 8001bc0:	687b      	ldr	r3, [r7, #4]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <_close>:
	}
	return len;
}

int _close(int file)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
	return -1;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf2:	605a      	str	r2, [r3, #4]
	return 0;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <_isatty>:

int _isatty(int file)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
	return 1;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
	return 0;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c3c:	4a14      	ldr	r2, [pc, #80]	; (8001c90 <_sbrk+0x5c>)
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <_sbrk+0x60>)
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <_sbrk+0x64>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <_sbrk+0x68>)
 8001c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <_sbrk+0x64>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d207      	bcs.n	8001c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c64:	f003 fe02 	bl	800586c <__errno>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c72:	e009      	b.n	8001c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <_sbrk+0x64>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <_sbrk+0x64>)
 8001c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c86:	68fb      	ldr	r3, [r7, #12]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20020000 	.word	0x20020000
 8001c94:	00000400 	.word	0x00000400
 8001c98:	20000254 	.word	0x20000254
 8001c9c:	20000270 	.word	0x20000270

08001ca0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <SystemInit+0x20>)
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001caa:	4a05      	ldr	r2, [pc, #20]	; (8001cc0 <SystemInit+0x20>)
 8001cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cc8:	480d      	ldr	r0, [pc, #52]	; (8001d00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cca:	490e      	ldr	r1, [pc, #56]	; (8001d04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ccc:	4a0e      	ldr	r2, [pc, #56]	; (8001d08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd0:	e002      	b.n	8001cd8 <LoopCopyDataInit>

08001cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cd6:	3304      	adds	r3, #4

08001cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cdc:	d3f9      	bcc.n	8001cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ce0:	4c0b      	ldr	r4, [pc, #44]	; (8001d10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce4:	e001      	b.n	8001cea <LoopFillZerobss>

08001ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce8:	3204      	adds	r2, #4

08001cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cec:	d3fb      	bcc.n	8001ce6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cee:	f7ff ffd7 	bl	8001ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cf2:	f003 fdc1 	bl	8005878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cf6:	f7ff fa67 	bl	80011c8 <main>
  bx  lr    
 8001cfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d04:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d08:	08006cc0 	.word	0x08006cc0
  ldr r2, =_sbss
 8001d0c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d10:	2000026c 	.word	0x2000026c

08001d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d14:	e7fe      	b.n	8001d14 <ADC_IRQHandler>
	...

08001d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <HAL_Init+0x40>)
 8001d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <HAL_Init+0x40>)
 8001d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <HAL_Init+0x40>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <HAL_Init+0x40>)
 8001d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d40:	2003      	movs	r0, #3
 8001d42:	f001 f82f 	bl	8002da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d46:	2000      	movs	r0, #0
 8001d48:	f000 f808 	bl	8001d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d4c:	f7ff fd9e 	bl	800188c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023c00 	.word	0x40023c00

08001d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_InitTick+0x54>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_InitTick+0x58>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f001 f847 	bl	8002e0e <HAL_SYSTICK_Config>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00e      	b.n	8001da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b0f      	cmp	r3, #15
 8001d8e:	d80a      	bhi.n	8001da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d90:	2200      	movs	r2, #0
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d98:	f001 f80f 	bl	8002dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d9c:	4a06      	ldr	r2, [pc, #24]	; (8001db8 <HAL_InitTick+0x5c>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e000      	b.n	8001da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000000 	.word	0x20000000
 8001db4:	20000008 	.word	0x20000008
 8001db8:	20000004 	.word	0x20000004

08001dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_IncTick+0x20>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_IncTick+0x24>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <HAL_IncTick+0x24>)
 8001dce:	6013      	str	r3, [r2, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000008 	.word	0x20000008
 8001de0:	20000258 	.word	0x20000258

08001de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return uwTick;
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <HAL_GetTick+0x14>)
 8001dea:	681b      	ldr	r3, [r3, #0]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20000258 	.word	0x20000258

08001dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e04:	f7ff ffee 	bl	8001de4 <HAL_GetTick>
 8001e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e14:	d005      	beq.n	8001e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_Delay+0x44>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4413      	add	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e22:	bf00      	nop
 8001e24:	f7ff ffde 	bl	8001de4 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d8f7      	bhi.n	8001e24 <HAL_Delay+0x28>
  {
  }
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000008 	.word	0x20000008

08001e44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0ed      	b.n	8002032 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fd3a 	bl	80018dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e78:	f7ff ffb4 	bl	8001de4 <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e7e:	e012      	b.n	8001ea6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e80:	f7ff ffb0 	bl	8001de4 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b0a      	cmp	r3, #10
 8001e8c:	d90b      	bls.n	8001ea6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2205      	movs	r2, #5
 8001e9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e0c5      	b.n	8002032 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0e5      	beq.n	8001e80 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0202 	bic.w	r2, r2, #2
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ec4:	f7ff ff8e 	bl	8001de4 <HAL_GetTick>
 8001ec8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001eca:	e012      	b.n	8001ef2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ecc:	f7ff ff8a 	bl	8001de4 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b0a      	cmp	r3, #10
 8001ed8:	d90b      	bls.n	8001ef2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2205      	movs	r2, #5
 8001eea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e09f      	b.n	8002032 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1e5      	bne.n	8001ecc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7e1b      	ldrb	r3, [r3, #24]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d108      	bne.n	8001f1a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	e007      	b.n	8001f2a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7e5b      	ldrb	r3, [r3, #25]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d108      	bne.n	8001f44 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	e007      	b.n	8001f54 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7e9b      	ldrb	r3, [r3, #26]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d108      	bne.n	8001f6e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0220 	orr.w	r2, r2, #32
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	e007      	b.n	8001f7e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0220 	bic.w	r2, r2, #32
 8001f7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	7edb      	ldrb	r3, [r3, #27]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d108      	bne.n	8001f98 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0210 	bic.w	r2, r2, #16
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	e007      	b.n	8001fa8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0210 	orr.w	r2, r2, #16
 8001fa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7f1b      	ldrb	r3, [r3, #28]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d108      	bne.n	8001fc2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0208 	orr.w	r2, r2, #8
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	e007      	b.n	8001fd2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0208 	bic.w	r2, r2, #8
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7f5b      	ldrb	r3, [r3, #29]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d108      	bne.n	8001fec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0204 	orr.w	r2, r2, #4
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	e007      	b.n	8001ffc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0204 	bic.w	r2, r2, #4
 8001ffa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	ea42 0103 	orr.w	r1, r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	1e5a      	subs	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002052:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002054:	7cfb      	ldrb	r3, [r7, #19]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d003      	beq.n	8002062 <HAL_CAN_ConfigFilter+0x26>
 800205a:	7cfb      	ldrb	r3, [r7, #19]
 800205c:	2b02      	cmp	r3, #2
 800205e:	f040 80be 	bne.w	80021de <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002062:	4b65      	ldr	r3, [pc, #404]	; (80021f8 <HAL_CAN_ConfigFilter+0x1bc>)
 8002064:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800206c:	f043 0201 	orr.w	r2, r3, #1
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800207c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	431a      	orrs	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	2201      	movs	r2, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	401a      	ands	r2, r3
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d123      	bne.n	800210c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	401a      	ands	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020e6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	3248      	adds	r2, #72	; 0x48
 80020ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002100:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002102:	6979      	ldr	r1, [r7, #20]
 8002104:	3348      	adds	r3, #72	; 0x48
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	440b      	add	r3, r1
 800210a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d122      	bne.n	800215a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	431a      	orrs	r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002134:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3248      	adds	r2, #72	; 0x48
 800213a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800214e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002150:	6979      	ldr	r1, [r7, #20]
 8002152:	3348      	adds	r3, #72	; 0x48
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d109      	bne.n	8002176 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	43db      	mvns	r3, r3
 800216c:	401a      	ands	r2, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002174:	e007      	b.n	8002186 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	431a      	orrs	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	43db      	mvns	r3, r3
 8002198:	401a      	ands	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80021a0:	e007      	b.n	80021b2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d107      	bne.n	80021ca <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	431a      	orrs	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021d0:	f023 0201 	bic.w	r2, r3, #1
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e006      	b.n	80021ec <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
  }
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	371c      	adds	r7, #28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	40006400 	.word	0x40006400

080021fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3020 	ldrb.w	r3, [r3, #32]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b01      	cmp	r3, #1
 800220e:	d12e      	bne.n	800226e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002228:	f7ff fddc 	bl	8001de4 <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800222e:	e012      	b.n	8002256 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002230:	f7ff fdd8 	bl	8001de4 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b0a      	cmp	r3, #10
 800223c:	d90b      	bls.n	8002256 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2205      	movs	r2, #5
 800224e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e012      	b.n	800227c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1e5      	bne.n	8002230 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	e006      	b.n	800227c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
  }
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d133      	bne.n	8002300 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80022a8:	f7ff fd9c 	bl	8001de4 <HAL_GetTick>
 80022ac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022ae:	e012      	b.n	80022d6 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022b0:	f7ff fd98 	bl	8001de4 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b0a      	cmp	r3, #10
 80022bc:	d90b      	bls.n	80022d6 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2205      	movs	r2, #5
 80022ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e01b      	b.n	800230e <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0e5      	beq.n	80022b0 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0202 	bic.w	r2, r2, #2
 80022f2:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	e006      	b.n	800230e <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
  }
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002316:	b480      	push	{r7}
 8002318:	b089      	sub	sp, #36	; 0x24
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f893 3020 	ldrb.w	r3, [r3, #32]
 800232a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002334:	7ffb      	ldrb	r3, [r7, #31]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d003      	beq.n	8002342 <HAL_CAN_AddTxMessage+0x2c>
 800233a:	7ffb      	ldrb	r3, [r7, #31]
 800233c:	2b02      	cmp	r3, #2
 800233e:	f040 80b8 	bne.w	80024b2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10a      	bne.n	8002362 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002352:	2b00      	cmp	r3, #0
 8002354:	d105      	bne.n	8002362 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80a0 	beq.w	80024a2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	0e1b      	lsrs	r3, r3, #24
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d907      	bls.n	8002382 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e09e      	b.n	80024c0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002382:	2201      	movs	r2, #1
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	409a      	lsls	r2, r3
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10d      	bne.n	80023b0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800239e:	68f9      	ldr	r1, [r7, #12]
 80023a0:	6809      	ldr	r1, [r1, #0]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	3318      	adds	r3, #24
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	440b      	add	r3, r1
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	e00f      	b.n	80023d0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023ba:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023c0:	68f9      	ldr	r1, [r7, #12]
 80023c2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80023c4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	3318      	adds	r3, #24
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	440b      	add	r3, r1
 80023ce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6819      	ldr	r1, [r3, #0]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3318      	adds	r3, #24
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	440b      	add	r3, r1
 80023e0:	3304      	adds	r3, #4
 80023e2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	7d1b      	ldrb	r3, [r3, #20]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d111      	bne.n	8002410 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3318      	adds	r3, #24
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	4413      	add	r3, r2
 80023f8:	3304      	adds	r3, #4
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	6811      	ldr	r1, [r2, #0]
 8002400:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	3318      	adds	r3, #24
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	440b      	add	r3, r1
 800240c:	3304      	adds	r3, #4
 800240e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3307      	adds	r3, #7
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	061a      	lsls	r2, r3, #24
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3306      	adds	r3, #6
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	041b      	lsls	r3, r3, #16
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3305      	adds	r3, #5
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	4313      	orrs	r3, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	3204      	adds	r2, #4
 8002430:	7812      	ldrb	r2, [r2, #0]
 8002432:	4610      	mov	r0, r2
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	6811      	ldr	r1, [r2, #0]
 8002438:	ea43 0200 	orr.w	r2, r3, r0
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	440b      	add	r3, r1
 8002442:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002446:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3303      	adds	r3, #3
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	061a      	lsls	r2, r3, #24
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3302      	adds	r3, #2
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	041b      	lsls	r3, r3, #16
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3301      	adds	r3, #1
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	021b      	lsls	r3, r3, #8
 8002462:	4313      	orrs	r3, r2
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	7812      	ldrb	r2, [r2, #0]
 8002468:	4610      	mov	r0, r2
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	6811      	ldr	r1, [r2, #0]
 800246e:	ea43 0200 	orr.w	r2, r3, r0
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	440b      	add	r3, r1
 8002478:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800247c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	3318      	adds	r3, #24
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	4413      	add	r3, r2
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	6811      	ldr	r1, [r2, #0]
 8002490:	f043 0201 	orr.w	r2, r3, #1
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	3318      	adds	r3, #24
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	440b      	add	r3, r1
 800249c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	e00e      	b.n	80024c0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e006      	b.n	80024c0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
  }
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3724      	adds	r7, #36	; 0x24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024de:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80024e0:	7afb      	ldrb	r3, [r7, #11]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d002      	beq.n	80024ec <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80024e6:	7afb      	ldrb	r3, [r7, #11]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d11d      	bne.n	8002528 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	3301      	adds	r3, #1
 80024fe:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	3301      	adds	r3, #1
 8002512:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	3301      	adds	r3, #1
 8002526:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002528:	68fb      	ldr	r3, [r7, #12]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002536:	b480      	push	{r7}
 8002538:	b087      	sub	sp, #28
 800253a:	af00      	add	r7, sp, #0
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800254a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800254c:	7dfb      	ldrb	r3, [r7, #23]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d003      	beq.n	800255a <HAL_CAN_GetRxMessage+0x24>
 8002552:	7dfb      	ldrb	r3, [r7, #23]
 8002554:	2b02      	cmp	r3, #2
 8002556:	f040 80f3 	bne.w	8002740 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10e      	bne.n	800257e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d116      	bne.n	800259c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e0e7      	b.n	800274e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d107      	bne.n	800259c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0d8      	b.n	800274e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	331b      	adds	r3, #27
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	4413      	add	r3, r2
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0204 	and.w	r2, r3, #4
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10c      	bne.n	80025d4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	331b      	adds	r3, #27
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	4413      	add	r3, r2
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0d5b      	lsrs	r3, r3, #21
 80025ca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	e00b      	b.n	80025ec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	331b      	adds	r3, #27
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	4413      	add	r3, r2
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	08db      	lsrs	r3, r3, #3
 80025e4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	331b      	adds	r3, #27
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	4413      	add	r3, r2
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0202 	and.w	r2, r3, #2
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	331b      	adds	r3, #27
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	4413      	add	r3, r2
 800260e:	3304      	adds	r3, #4
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 020f 	and.w	r2, r3, #15
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	331b      	adds	r3, #27
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	4413      	add	r3, r2
 8002626:	3304      	adds	r3, #4
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	0a1b      	lsrs	r3, r3, #8
 800262c:	b2da      	uxtb	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	331b      	adds	r3, #27
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	4413      	add	r3, r2
 800263e:	3304      	adds	r3, #4
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	0c1b      	lsrs	r3, r3, #16
 8002644:	b29a      	uxth	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	4413      	add	r3, r2
 8002654:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	b2da      	uxtb	r2, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	4413      	add	r3, r2
 800266a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	0a1a      	lsrs	r2, r3, #8
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	4413      	add	r3, r2
 8002684:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	0c1a      	lsrs	r2, r3, #16
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	3302      	adds	r3, #2
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	4413      	add	r3, r2
 800269e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	0e1a      	lsrs	r2, r3, #24
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	3303      	adds	r3, #3
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	3304      	adds	r3, #4
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	0a1a      	lsrs	r2, r3, #8
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	3305      	adds	r3, #5
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	0c1a      	lsrs	r2, r3, #16
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	3306      	adds	r3, #6
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	4413      	add	r3, r2
 8002704:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	0e1a      	lsrs	r2, r3, #24
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	3307      	adds	r3, #7
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d108      	bne.n	800272c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0220 	orr.w	r2, r2, #32
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	e007      	b.n	800273c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0220 	orr.w	r2, r2, #32
 800273a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	e006      	b.n	800274e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
  }
}
 800274e:	4618      	mov	r0, r3
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800275a:	b480      	push	{r7}
 800275c:	b085      	sub	sp, #20
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3020 	ldrb.w	r3, [r3, #32]
 800276a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d002      	beq.n	8002778 <HAL_CAN_ActivateNotification+0x1e>
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d109      	bne.n	800278c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6959      	ldr	r1, [r3, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e006      	b.n	800279a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
  }
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b08a      	sub	sp, #40	; 0x28
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d07c      	beq.n	80028e6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d023      	beq.n	800283e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2201      	movs	r2, #1
 80027fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f983 	bl	8002b14 <HAL_CAN_TxMailbox0CompleteCallback>
 800280e:	e016      	b.n	800283e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b00      	cmp	r3, #0
 8002818:	d004      	beq.n	8002824 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
 8002822:	e00c      	b.n	800283e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d004      	beq.n	8002838 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
 8002836:	e002      	b.n	800283e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f989 	bl	8002b50 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d024      	beq.n	8002892 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002850:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f963 	bl	8002b28 <HAL_CAN_TxMailbox1CompleteCallback>
 8002862:	e016      	b.n	8002892 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286a:	2b00      	cmp	r3, #0
 800286c:	d004      	beq.n	8002878 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
 8002876:	e00c      	b.n	8002892 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800287e:	2b00      	cmp	r3, #0
 8002880:	d004      	beq.n	800288c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
 800288a:	e002      	b.n	8002892 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f969 	bl	8002b64 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d024      	beq.n	80028e6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f943 	bl	8002b3c <HAL_CAN_TxMailbox2CompleteCallback>
 80028b6:	e016      	b.n	80028e6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d004      	beq.n	80028cc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ca:	e00c      	b.n	80028e6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d004      	beq.n	80028e0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
 80028de:	e002      	b.n	80028e6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f949 	bl	8002b78 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00c      	beq.n	800290a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d007      	beq.n	800290a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002900:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2210      	movs	r2, #16
 8002908:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00b      	beq.n	800292c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d006      	beq.n	800292c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2208      	movs	r2, #8
 8002924:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f930 	bl	8002b8c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7fe ff3f 	bl	80017c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00c      	beq.n	800296e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	d007      	beq.n	800296e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002964:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2210      	movs	r2, #16
 800296c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	f003 0320 	and.w	r3, r3, #32
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00b      	beq.n	8002990 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d006      	beq.n	8002990 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2208      	movs	r2, #8
 8002988:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f912 	bl	8002bb4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f8f9 	bl	8002ba0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00b      	beq.n	80029d0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d006      	beq.n	80029d0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2210      	movs	r2, #16
 80029c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f8fc 	bl	8002bc8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d006      	beq.n	80029f2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2208      	movs	r2, #8
 80029ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f8f5 	bl	8002bdc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d07b      	beq.n	8002af4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d072      	beq.n	8002aec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	f043 0302 	orr.w	r3, r3, #2
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	f043 0304 	orr.w	r3, r3, #4
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d043      	beq.n	8002aec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d03e      	beq.n	8002aec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a74:	2b60      	cmp	r3, #96	; 0x60
 8002a76:	d02b      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0x32a>
 8002a78:	2b60      	cmp	r3, #96	; 0x60
 8002a7a:	d82e      	bhi.n	8002ada <HAL_CAN_IRQHandler+0x334>
 8002a7c:	2b50      	cmp	r3, #80	; 0x50
 8002a7e:	d022      	beq.n	8002ac6 <HAL_CAN_IRQHandler+0x320>
 8002a80:	2b50      	cmp	r3, #80	; 0x50
 8002a82:	d82a      	bhi.n	8002ada <HAL_CAN_IRQHandler+0x334>
 8002a84:	2b40      	cmp	r3, #64	; 0x40
 8002a86:	d019      	beq.n	8002abc <HAL_CAN_IRQHandler+0x316>
 8002a88:	2b40      	cmp	r3, #64	; 0x40
 8002a8a:	d826      	bhi.n	8002ada <HAL_CAN_IRQHandler+0x334>
 8002a8c:	2b30      	cmp	r3, #48	; 0x30
 8002a8e:	d010      	beq.n	8002ab2 <HAL_CAN_IRQHandler+0x30c>
 8002a90:	2b30      	cmp	r3, #48	; 0x30
 8002a92:	d822      	bhi.n	8002ada <HAL_CAN_IRQHandler+0x334>
 8002a94:	2b10      	cmp	r3, #16
 8002a96:	d002      	beq.n	8002a9e <HAL_CAN_IRQHandler+0x2f8>
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d005      	beq.n	8002aa8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a9c:	e01d      	b.n	8002ada <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	f043 0308 	orr.w	r3, r3, #8
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002aa6:	e019      	b.n	8002adc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	f043 0310 	orr.w	r3, r3, #16
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ab0:	e014      	b.n	8002adc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	f043 0320 	orr.w	r3, r3, #32
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002aba:	e00f      	b.n	8002adc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ac4:	e00a      	b.n	8002adc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ace:	e005      	b.n	8002adc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ad8:	e000      	b.n	8002adc <HAL_CAN_IRQHandler+0x336>
            break;
 8002ada:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002aea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2204      	movs	r2, #4
 8002af2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d008      	beq.n	8002b0c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f872 	bl	8002bf0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	3728      	adds	r7, #40	; 0x28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <__NVIC_SetPriorityGrouping+0x44>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c20:	4013      	ands	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c36:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <__NVIC_SetPriorityGrouping+0x44>)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	60d3      	str	r3, [r2, #12]
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c50:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <__NVIC_GetPriorityGrouping+0x18>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	0a1b      	lsrs	r3, r3, #8
 8002c56:	f003 0307 	and.w	r3, r3, #7
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	db0b      	blt.n	8002c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	f003 021f 	and.w	r2, r3, #31
 8002c80:	4907      	ldr	r1, [pc, #28]	; (8002ca0 <__NVIC_EnableIRQ+0x38>)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	2001      	movs	r0, #1
 8002c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	e000e100 	.word	0xe000e100

08002ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	6039      	str	r1, [r7, #0]
 8002cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	db0a      	blt.n	8002cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	490c      	ldr	r1, [pc, #48]	; (8002cf0 <__NVIC_SetPriority+0x4c>)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	0112      	lsls	r2, r2, #4
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ccc:	e00a      	b.n	8002ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	4908      	ldr	r1, [pc, #32]	; (8002cf4 <__NVIC_SetPriority+0x50>)
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	3b04      	subs	r3, #4
 8002cdc:	0112      	lsls	r2, r2, #4
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	761a      	strb	r2, [r3, #24]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000e100 	.word	0xe000e100
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b089      	sub	sp, #36	; 0x24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f1c3 0307 	rsb	r3, r3, #7
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	bf28      	it	cs
 8002d16:	2304      	movcs	r3, #4
 8002d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	2b06      	cmp	r3, #6
 8002d20:	d902      	bls.n	8002d28 <NVIC_EncodePriority+0x30>
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3b03      	subs	r3, #3
 8002d26:	e000      	b.n	8002d2a <NVIC_EncodePriority+0x32>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43da      	mvns	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	43d9      	mvns	r1, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d50:	4313      	orrs	r3, r2
         );
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3724      	adds	r7, #36	; 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d70:	d301      	bcc.n	8002d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d72:	2301      	movs	r3, #1
 8002d74:	e00f      	b.n	8002d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d76:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <SysTick_Config+0x40>)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d7e:	210f      	movs	r1, #15
 8002d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d84:	f7ff ff8e 	bl	8002ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <SysTick_Config+0x40>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d8e:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <SysTick_Config+0x40>)
 8002d90:	2207      	movs	r2, #7
 8002d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	e000e010 	.word	0xe000e010

08002da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7ff ff29 	bl	8002c04 <__NVIC_SetPriorityGrouping>
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b086      	sub	sp, #24
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dcc:	f7ff ff3e 	bl	8002c4c <__NVIC_GetPriorityGrouping>
 8002dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68b9      	ldr	r1, [r7, #8]
 8002dd6:	6978      	ldr	r0, [r7, #20]
 8002dd8:	f7ff ff8e 	bl	8002cf8 <NVIC_EncodePriority>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002de2:	4611      	mov	r1, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff5d 	bl	8002ca4 <__NVIC_SetPriority>
}
 8002dea:	bf00      	nop
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	4603      	mov	r3, r0
 8002dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff31 	bl	8002c68 <__NVIC_EnableIRQ>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7ff ffa2 	bl	8002d60 <SysTick_Config>
 8002e1c:	4603      	mov	r3, r0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e32:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e34:	f7fe ffd6 	bl	8001de4 <HAL_GetTick>
 8002e38:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d008      	beq.n	8002e58 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e052      	b.n	8002efe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0216 	bic.w	r2, r2, #22
 8002e66:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e76:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d103      	bne.n	8002e88 <HAL_DMA_Abort+0x62>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d007      	beq.n	8002e98 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0208 	bic.w	r2, r2, #8
 8002e96:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0201 	bic.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea8:	e013      	b.n	8002ed2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eaa:	f7fe ff9b 	bl	8001de4 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d90c      	bls.n	8002ed2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e015      	b.n	8002efe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1e4      	bne.n	8002eaa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	223f      	movs	r2, #63	; 0x3f
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d004      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2280      	movs	r2, #128	; 0x80
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e00c      	b.n	8002f3e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2205      	movs	r2, #5
 8002f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0201 	bic.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	; 0x24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
 8002f66:	e165      	b.n	8003234 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f68:	2201      	movs	r2, #1
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	f040 8154 	bne.w	800322e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d005      	beq.n	8002f9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d130      	bne.n	8003000 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	2203      	movs	r2, #3
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 0201 	and.w	r2, r3, #1
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	2b03      	cmp	r3, #3
 800300a:	d017      	beq.n	800303c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	2203      	movs	r2, #3
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d123      	bne.n	8003090 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	08da      	lsrs	r2, r3, #3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3208      	adds	r2, #8
 8003050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003054:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	220f      	movs	r2, #15
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4013      	ands	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	08da      	lsrs	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3208      	adds	r2, #8
 800308a:	69b9      	ldr	r1, [r7, #24]
 800308c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	2203      	movs	r2, #3
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0203 	and.w	r2, r3, #3
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80ae 	beq.w	800322e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	4b5d      	ldr	r3, [pc, #372]	; (800324c <HAL_GPIO_Init+0x300>)
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	4a5c      	ldr	r2, [pc, #368]	; (800324c <HAL_GPIO_Init+0x300>)
 80030dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e0:	6453      	str	r3, [r2, #68]	; 0x44
 80030e2:	4b5a      	ldr	r3, [pc, #360]	; (800324c <HAL_GPIO_Init+0x300>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ee:	4a58      	ldr	r2, [pc, #352]	; (8003250 <HAL_GPIO_Init+0x304>)
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	089b      	lsrs	r3, r3, #2
 80030f4:	3302      	adds	r3, #2
 80030f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	220f      	movs	r2, #15
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4013      	ands	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a4f      	ldr	r2, [pc, #316]	; (8003254 <HAL_GPIO_Init+0x308>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d025      	beq.n	8003166 <HAL_GPIO_Init+0x21a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a4e      	ldr	r2, [pc, #312]	; (8003258 <HAL_GPIO_Init+0x30c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d01f      	beq.n	8003162 <HAL_GPIO_Init+0x216>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a4d      	ldr	r2, [pc, #308]	; (800325c <HAL_GPIO_Init+0x310>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d019      	beq.n	800315e <HAL_GPIO_Init+0x212>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a4c      	ldr	r2, [pc, #304]	; (8003260 <HAL_GPIO_Init+0x314>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d013      	beq.n	800315a <HAL_GPIO_Init+0x20e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a4b      	ldr	r2, [pc, #300]	; (8003264 <HAL_GPIO_Init+0x318>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00d      	beq.n	8003156 <HAL_GPIO_Init+0x20a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a4a      	ldr	r2, [pc, #296]	; (8003268 <HAL_GPIO_Init+0x31c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d007      	beq.n	8003152 <HAL_GPIO_Init+0x206>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a49      	ldr	r2, [pc, #292]	; (800326c <HAL_GPIO_Init+0x320>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d101      	bne.n	800314e <HAL_GPIO_Init+0x202>
 800314a:	2306      	movs	r3, #6
 800314c:	e00c      	b.n	8003168 <HAL_GPIO_Init+0x21c>
 800314e:	2307      	movs	r3, #7
 8003150:	e00a      	b.n	8003168 <HAL_GPIO_Init+0x21c>
 8003152:	2305      	movs	r3, #5
 8003154:	e008      	b.n	8003168 <HAL_GPIO_Init+0x21c>
 8003156:	2304      	movs	r3, #4
 8003158:	e006      	b.n	8003168 <HAL_GPIO_Init+0x21c>
 800315a:	2303      	movs	r3, #3
 800315c:	e004      	b.n	8003168 <HAL_GPIO_Init+0x21c>
 800315e:	2302      	movs	r3, #2
 8003160:	e002      	b.n	8003168 <HAL_GPIO_Init+0x21c>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_GPIO_Init+0x21c>
 8003166:	2300      	movs	r3, #0
 8003168:	69fa      	ldr	r2, [r7, #28]
 800316a:	f002 0203 	and.w	r2, r2, #3
 800316e:	0092      	lsls	r2, r2, #2
 8003170:	4093      	lsls	r3, r2
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003178:	4935      	ldr	r1, [pc, #212]	; (8003250 <HAL_GPIO_Init+0x304>)
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	089b      	lsrs	r3, r3, #2
 800317e:	3302      	adds	r3, #2
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003186:	4b3a      	ldr	r3, [pc, #232]	; (8003270 <HAL_GPIO_Init+0x324>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	43db      	mvns	r3, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4013      	ands	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031aa:	4a31      	ldr	r2, [pc, #196]	; (8003270 <HAL_GPIO_Init+0x324>)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031b0:	4b2f      	ldr	r3, [pc, #188]	; (8003270 <HAL_GPIO_Init+0x324>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031d4:	4a26      	ldr	r2, [pc, #152]	; (8003270 <HAL_GPIO_Init+0x324>)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031da:	4b25      	ldr	r3, [pc, #148]	; (8003270 <HAL_GPIO_Init+0x324>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031fe:	4a1c      	ldr	r2, [pc, #112]	; (8003270 <HAL_GPIO_Init+0x324>)
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003204:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <HAL_GPIO_Init+0x324>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003228:	4a11      	ldr	r2, [pc, #68]	; (8003270 <HAL_GPIO_Init+0x324>)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3301      	adds	r3, #1
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	2b0f      	cmp	r3, #15
 8003238:	f67f ae96 	bls.w	8002f68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800323c:	bf00      	nop
 800323e:	bf00      	nop
 8003240:	3724      	adds	r7, #36	; 0x24
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
 8003250:	40013800 	.word	0x40013800
 8003254:	40020000 	.word	0x40020000
 8003258:	40020400 	.word	0x40020400
 800325c:	40020800 	.word	0x40020800
 8003260:	40020c00 	.word	0x40020c00
 8003264:	40021000 	.word	0x40021000
 8003268:	40021400 	.word	0x40021400
 800326c:	40021800 	.word	0x40021800
 8003270:	40013c00 	.word	0x40013c00

08003274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	807b      	strh	r3, [r7, #2]
 8003280:	4613      	mov	r3, r2
 8003282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003284:	787b      	ldrb	r3, [r7, #1]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800328a:	887a      	ldrh	r2, [r7, #2]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003290:	e003      	b.n	800329a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003292:	887b      	ldrh	r3, [r7, #2]
 8003294:	041a      	lsls	r2, r3, #16
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	619a      	str	r2, [r3, #24]
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
	...

080032a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0cc      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032bc:	4b68      	ldr	r3, [pc, #416]	; (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d90c      	bls.n	80032e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ca:	4b65      	ldr	r3, [pc, #404]	; (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d2:	4b63      	ldr	r3, [pc, #396]	; (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d001      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0b8      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d020      	beq.n	8003332 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032fc:	4b59      	ldr	r3, [pc, #356]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4a58      	ldr	r2, [pc, #352]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003306:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003314:	4b53      	ldr	r3, [pc, #332]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	4a52      	ldr	r2, [pc, #328]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800331e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003320:	4b50      	ldr	r3, [pc, #320]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	494d      	ldr	r1, [pc, #308]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d044      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d107      	bne.n	8003356 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003346:	4b47      	ldr	r3, [pc, #284]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d119      	bne.n	8003386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e07f      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d003      	beq.n	8003366 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003362:	2b03      	cmp	r3, #3
 8003364:	d107      	bne.n	8003376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003366:	4b3f      	ldr	r3, [pc, #252]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e06f      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003376:	4b3b      	ldr	r3, [pc, #236]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e067      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003386:	4b37      	ldr	r3, [pc, #220]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f023 0203 	bic.w	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	4934      	ldr	r1, [pc, #208]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	4313      	orrs	r3, r2
 8003396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003398:	f7fe fd24 	bl	8001de4 <HAL_GetTick>
 800339c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a0:	f7fe fd20 	bl	8001de4 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e04f      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b6:	4b2b      	ldr	r3, [pc, #172]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 020c 	and.w	r2, r3, #12
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d1eb      	bne.n	80033a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033c8:	4b25      	ldr	r3, [pc, #148]	; (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d20c      	bcs.n	80033f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b22      	ldr	r3, [pc, #136]	; (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033de:	4b20      	ldr	r3, [pc, #128]	; (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e032      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033fc:	4b19      	ldr	r3, [pc, #100]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4916      	ldr	r1, [pc, #88]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	4313      	orrs	r3, r2
 800340c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800341a:	4b12      	ldr	r3, [pc, #72]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	490e      	ldr	r1, [pc, #56]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800342e:	f000 f855 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 8003432:	4602      	mov	r2, r0
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	490a      	ldr	r1, [pc, #40]	; (8003468 <HAL_RCC_ClockConfig+0x1c0>)
 8003440:	5ccb      	ldrb	r3, [r1, r3]
 8003442:	fa22 f303 	lsr.w	r3, r2, r3
 8003446:	4a09      	ldr	r2, [pc, #36]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800344a:	4b09      	ldr	r3, [pc, #36]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7fe fc84 	bl	8001d5c <HAL_InitTick>

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40023c00 	.word	0x40023c00
 8003464:	40023800 	.word	0x40023800
 8003468:	08006c00 	.word	0x08006c00
 800346c:	20000000 	.word	0x20000000
 8003470:	20000004 	.word	0x20000004

08003474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003478:	4b03      	ldr	r3, [pc, #12]	; (8003488 <HAL_RCC_GetHCLKFreq+0x14>)
 800347a:	681b      	ldr	r3, [r3, #0]
}
 800347c:	4618      	mov	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	20000000 	.word	0x20000000

0800348c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003490:	f7ff fff0 	bl	8003474 <HAL_RCC_GetHCLKFreq>
 8003494:	4602      	mov	r2, r0
 8003496:	4b05      	ldr	r3, [pc, #20]	; (80034ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	0a9b      	lsrs	r3, r3, #10
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	4903      	ldr	r1, [pc, #12]	; (80034b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034a2:	5ccb      	ldrb	r3, [r1, r3]
 80034a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40023800 	.word	0x40023800
 80034b0:	08006c10 	.word	0x08006c10

080034b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034b8:	f7ff ffdc 	bl	8003474 <HAL_RCC_GetHCLKFreq>
 80034bc:	4602      	mov	r2, r0
 80034be:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	0b5b      	lsrs	r3, r3, #13
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	4903      	ldr	r1, [pc, #12]	; (80034d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ca:	5ccb      	ldrb	r3, [r1, r3]
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40023800 	.word	0x40023800
 80034d8:	08006c10 	.word	0x08006c10

080034dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e0:	b0ae      	sub	sp, #184	; 0xb8
 80034e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003502:	4bcb      	ldr	r3, [pc, #812]	; (8003830 <HAL_RCC_GetSysClockFreq+0x354>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b0c      	cmp	r3, #12
 800350c:	f200 8206 	bhi.w	800391c <HAL_RCC_GetSysClockFreq+0x440>
 8003510:	a201      	add	r2, pc, #4	; (adr r2, 8003518 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003516:	bf00      	nop
 8003518:	0800354d 	.word	0x0800354d
 800351c:	0800391d 	.word	0x0800391d
 8003520:	0800391d 	.word	0x0800391d
 8003524:	0800391d 	.word	0x0800391d
 8003528:	08003555 	.word	0x08003555
 800352c:	0800391d 	.word	0x0800391d
 8003530:	0800391d 	.word	0x0800391d
 8003534:	0800391d 	.word	0x0800391d
 8003538:	0800355d 	.word	0x0800355d
 800353c:	0800391d 	.word	0x0800391d
 8003540:	0800391d 	.word	0x0800391d
 8003544:	0800391d 	.word	0x0800391d
 8003548:	0800374d 	.word	0x0800374d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800354c:	4bb9      	ldr	r3, [pc, #740]	; (8003834 <HAL_RCC_GetSysClockFreq+0x358>)
 800354e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003552:	e1e7      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003554:	4bb8      	ldr	r3, [pc, #736]	; (8003838 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003556:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800355a:	e1e3      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800355c:	4bb4      	ldr	r3, [pc, #720]	; (8003830 <HAL_RCC_GetSysClockFreq+0x354>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003564:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003568:	4bb1      	ldr	r3, [pc, #708]	; (8003830 <HAL_RCC_GetSysClockFreq+0x354>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d071      	beq.n	8003658 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003574:	4bae      	ldr	r3, [pc, #696]	; (8003830 <HAL_RCC_GetSysClockFreq+0x354>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	099b      	lsrs	r3, r3, #6
 800357a:	2200      	movs	r2, #0
 800357c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003580:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003584:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003590:	2300      	movs	r3, #0
 8003592:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003596:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800359a:	4622      	mov	r2, r4
 800359c:	462b      	mov	r3, r5
 800359e:	f04f 0000 	mov.w	r0, #0
 80035a2:	f04f 0100 	mov.w	r1, #0
 80035a6:	0159      	lsls	r1, r3, #5
 80035a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ac:	0150      	lsls	r0, r2, #5
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4621      	mov	r1, r4
 80035b4:	1a51      	subs	r1, r2, r1
 80035b6:	6439      	str	r1, [r7, #64]	; 0x40
 80035b8:	4629      	mov	r1, r5
 80035ba:	eb63 0301 	sbc.w	r3, r3, r1
 80035be:	647b      	str	r3, [r7, #68]	; 0x44
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80035cc:	4649      	mov	r1, r9
 80035ce:	018b      	lsls	r3, r1, #6
 80035d0:	4641      	mov	r1, r8
 80035d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035d6:	4641      	mov	r1, r8
 80035d8:	018a      	lsls	r2, r1, #6
 80035da:	4641      	mov	r1, r8
 80035dc:	1a51      	subs	r1, r2, r1
 80035de:	63b9      	str	r1, [r7, #56]	; 0x38
 80035e0:	4649      	mov	r1, r9
 80035e2:	eb63 0301 	sbc.w	r3, r3, r1
 80035e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80035f4:	4649      	mov	r1, r9
 80035f6:	00cb      	lsls	r3, r1, #3
 80035f8:	4641      	mov	r1, r8
 80035fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035fe:	4641      	mov	r1, r8
 8003600:	00ca      	lsls	r2, r1, #3
 8003602:	4610      	mov	r0, r2
 8003604:	4619      	mov	r1, r3
 8003606:	4603      	mov	r3, r0
 8003608:	4622      	mov	r2, r4
 800360a:	189b      	adds	r3, r3, r2
 800360c:	633b      	str	r3, [r7, #48]	; 0x30
 800360e:	462b      	mov	r3, r5
 8003610:	460a      	mov	r2, r1
 8003612:	eb42 0303 	adc.w	r3, r2, r3
 8003616:	637b      	str	r3, [r7, #52]	; 0x34
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003624:	4629      	mov	r1, r5
 8003626:	024b      	lsls	r3, r1, #9
 8003628:	4621      	mov	r1, r4
 800362a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800362e:	4621      	mov	r1, r4
 8003630:	024a      	lsls	r2, r1, #9
 8003632:	4610      	mov	r0, r2
 8003634:	4619      	mov	r1, r3
 8003636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800363a:	2200      	movs	r2, #0
 800363c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003640:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003644:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003648:	f7fd fa28 	bl	8000a9c <__aeabi_uldivmod>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4613      	mov	r3, r2
 8003652:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003656:	e067      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003658:	4b75      	ldr	r3, [pc, #468]	; (8003830 <HAL_RCC_GetSysClockFreq+0x354>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	099b      	lsrs	r3, r3, #6
 800365e:	2200      	movs	r2, #0
 8003660:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003664:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003668:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800366c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003670:	67bb      	str	r3, [r7, #120]	; 0x78
 8003672:	2300      	movs	r3, #0
 8003674:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003676:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800367a:	4622      	mov	r2, r4
 800367c:	462b      	mov	r3, r5
 800367e:	f04f 0000 	mov.w	r0, #0
 8003682:	f04f 0100 	mov.w	r1, #0
 8003686:	0159      	lsls	r1, r3, #5
 8003688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800368c:	0150      	lsls	r0, r2, #5
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4621      	mov	r1, r4
 8003694:	1a51      	subs	r1, r2, r1
 8003696:	62b9      	str	r1, [r7, #40]	; 0x28
 8003698:	4629      	mov	r1, r5
 800369a:	eb63 0301 	sbc.w	r3, r3, r1
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80036ac:	4649      	mov	r1, r9
 80036ae:	018b      	lsls	r3, r1, #6
 80036b0:	4641      	mov	r1, r8
 80036b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036b6:	4641      	mov	r1, r8
 80036b8:	018a      	lsls	r2, r1, #6
 80036ba:	4641      	mov	r1, r8
 80036bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80036c0:	4649      	mov	r1, r9
 80036c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036da:	4692      	mov	sl, r2
 80036dc:	469b      	mov	fp, r3
 80036de:	4623      	mov	r3, r4
 80036e0:	eb1a 0303 	adds.w	r3, sl, r3
 80036e4:	623b      	str	r3, [r7, #32]
 80036e6:	462b      	mov	r3, r5
 80036e8:	eb4b 0303 	adc.w	r3, fp, r3
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80036fa:	4629      	mov	r1, r5
 80036fc:	028b      	lsls	r3, r1, #10
 80036fe:	4621      	mov	r1, r4
 8003700:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003704:	4621      	mov	r1, r4
 8003706:	028a      	lsls	r2, r1, #10
 8003708:	4610      	mov	r0, r2
 800370a:	4619      	mov	r1, r3
 800370c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003710:	2200      	movs	r2, #0
 8003712:	673b      	str	r3, [r7, #112]	; 0x70
 8003714:	677a      	str	r2, [r7, #116]	; 0x74
 8003716:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800371a:	f7fd f9bf 	bl	8000a9c <__aeabi_uldivmod>
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	4613      	mov	r3, r2
 8003724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003728:	4b41      	ldr	r3, [pc, #260]	; (8003830 <HAL_RCC_GetSysClockFreq+0x354>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	0c1b      	lsrs	r3, r3, #16
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	3301      	adds	r3, #1
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800373a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800373e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003742:	fbb2 f3f3 	udiv	r3, r2, r3
 8003746:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800374a:	e0eb      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800374c:	4b38      	ldr	r3, [pc, #224]	; (8003830 <HAL_RCC_GetSysClockFreq+0x354>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003754:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003758:	4b35      	ldr	r3, [pc, #212]	; (8003830 <HAL_RCC_GetSysClockFreq+0x354>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d06b      	beq.n	800383c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003764:	4b32      	ldr	r3, [pc, #200]	; (8003830 <HAL_RCC_GetSysClockFreq+0x354>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	099b      	lsrs	r3, r3, #6
 800376a:	2200      	movs	r2, #0
 800376c:	66bb      	str	r3, [r7, #104]	; 0x68
 800376e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003770:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003776:	663b      	str	r3, [r7, #96]	; 0x60
 8003778:	2300      	movs	r3, #0
 800377a:	667b      	str	r3, [r7, #100]	; 0x64
 800377c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003780:	4622      	mov	r2, r4
 8003782:	462b      	mov	r3, r5
 8003784:	f04f 0000 	mov.w	r0, #0
 8003788:	f04f 0100 	mov.w	r1, #0
 800378c:	0159      	lsls	r1, r3, #5
 800378e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003792:	0150      	lsls	r0, r2, #5
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4621      	mov	r1, r4
 800379a:	1a51      	subs	r1, r2, r1
 800379c:	61b9      	str	r1, [r7, #24]
 800379e:	4629      	mov	r1, r5
 80037a0:	eb63 0301 	sbc.w	r3, r3, r1
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80037b2:	4659      	mov	r1, fp
 80037b4:	018b      	lsls	r3, r1, #6
 80037b6:	4651      	mov	r1, sl
 80037b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037bc:	4651      	mov	r1, sl
 80037be:	018a      	lsls	r2, r1, #6
 80037c0:	4651      	mov	r1, sl
 80037c2:	ebb2 0801 	subs.w	r8, r2, r1
 80037c6:	4659      	mov	r1, fp
 80037c8:	eb63 0901 	sbc.w	r9, r3, r1
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037e0:	4690      	mov	r8, r2
 80037e2:	4699      	mov	r9, r3
 80037e4:	4623      	mov	r3, r4
 80037e6:	eb18 0303 	adds.w	r3, r8, r3
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	462b      	mov	r3, r5
 80037ee:	eb49 0303 	adc.w	r3, r9, r3
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003800:	4629      	mov	r1, r5
 8003802:	024b      	lsls	r3, r1, #9
 8003804:	4621      	mov	r1, r4
 8003806:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800380a:	4621      	mov	r1, r4
 800380c:	024a      	lsls	r2, r1, #9
 800380e:	4610      	mov	r0, r2
 8003810:	4619      	mov	r1, r3
 8003812:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003816:	2200      	movs	r2, #0
 8003818:	65bb      	str	r3, [r7, #88]	; 0x58
 800381a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800381c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003820:	f7fd f93c 	bl	8000a9c <__aeabi_uldivmod>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4613      	mov	r3, r2
 800382a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800382e:	e065      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x420>
 8003830:	40023800 	.word	0x40023800
 8003834:	00f42400 	.word	0x00f42400
 8003838:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800383c:	4b3d      	ldr	r3, [pc, #244]	; (8003934 <HAL_RCC_GetSysClockFreq+0x458>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	099b      	lsrs	r3, r3, #6
 8003842:	2200      	movs	r2, #0
 8003844:	4618      	mov	r0, r3
 8003846:	4611      	mov	r1, r2
 8003848:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800384c:	653b      	str	r3, [r7, #80]	; 0x50
 800384e:	2300      	movs	r3, #0
 8003850:	657b      	str	r3, [r7, #84]	; 0x54
 8003852:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003856:	4642      	mov	r2, r8
 8003858:	464b      	mov	r3, r9
 800385a:	f04f 0000 	mov.w	r0, #0
 800385e:	f04f 0100 	mov.w	r1, #0
 8003862:	0159      	lsls	r1, r3, #5
 8003864:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003868:	0150      	lsls	r0, r2, #5
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4641      	mov	r1, r8
 8003870:	1a51      	subs	r1, r2, r1
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	4649      	mov	r1, r9
 8003876:	eb63 0301 	sbc.w	r3, r3, r1
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003888:	4659      	mov	r1, fp
 800388a:	018b      	lsls	r3, r1, #6
 800388c:	4651      	mov	r1, sl
 800388e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003892:	4651      	mov	r1, sl
 8003894:	018a      	lsls	r2, r1, #6
 8003896:	4651      	mov	r1, sl
 8003898:	1a54      	subs	r4, r2, r1
 800389a:	4659      	mov	r1, fp
 800389c:	eb63 0501 	sbc.w	r5, r3, r1
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	00eb      	lsls	r3, r5, #3
 80038aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038ae:	00e2      	lsls	r2, r4, #3
 80038b0:	4614      	mov	r4, r2
 80038b2:	461d      	mov	r5, r3
 80038b4:	4643      	mov	r3, r8
 80038b6:	18e3      	adds	r3, r4, r3
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	464b      	mov	r3, r9
 80038bc:	eb45 0303 	adc.w	r3, r5, r3
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038ce:	4629      	mov	r1, r5
 80038d0:	028b      	lsls	r3, r1, #10
 80038d2:	4621      	mov	r1, r4
 80038d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038d8:	4621      	mov	r1, r4
 80038da:	028a      	lsls	r2, r1, #10
 80038dc:	4610      	mov	r0, r2
 80038de:	4619      	mov	r1, r3
 80038e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038e4:	2200      	movs	r2, #0
 80038e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038e8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80038ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038ee:	f7fd f8d5 	bl	8000a9c <__aeabi_uldivmod>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	4613      	mov	r3, r2
 80038f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80038fc:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <HAL_RCC_GetSysClockFreq+0x458>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	0f1b      	lsrs	r3, r3, #28
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800390a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800390e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003912:	fbb2 f3f3 	udiv	r3, r2, r3
 8003916:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800391a:	e003      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_RCC_GetSysClockFreq+0x45c>)
 800391e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003922:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003924:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003928:	4618      	mov	r0, r3
 800392a:	37b8      	adds	r7, #184	; 0xb8
 800392c:	46bd      	mov	sp, r7
 800392e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800
 8003938:	00f42400 	.word	0x00f42400

0800393c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e28d      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 8083 	beq.w	8003a62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800395c:	4b94      	ldr	r3, [pc, #592]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 030c 	and.w	r3, r3, #12
 8003964:	2b04      	cmp	r3, #4
 8003966:	d019      	beq.n	800399c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003968:	4b91      	ldr	r3, [pc, #580]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003970:	2b08      	cmp	r3, #8
 8003972:	d106      	bne.n	8003982 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003974:	4b8e      	ldr	r3, [pc, #568]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003980:	d00c      	beq.n	800399c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003982:	4b8b      	ldr	r3, [pc, #556]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800398a:	2b0c      	cmp	r3, #12
 800398c:	d112      	bne.n	80039b4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398e:	4b88      	ldr	r3, [pc, #544]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800399a:	d10b      	bne.n	80039b4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800399c:	4b84      	ldr	r3, [pc, #528]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d05b      	beq.n	8003a60 <HAL_RCC_OscConfig+0x124>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d157      	bne.n	8003a60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e25a      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039bc:	d106      	bne.n	80039cc <HAL_RCC_OscConfig+0x90>
 80039be:	4b7c      	ldr	r3, [pc, #496]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a7b      	ldr	r2, [pc, #492]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 80039c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	e01d      	b.n	8003a08 <HAL_RCC_OscConfig+0xcc>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d4:	d10c      	bne.n	80039f0 <HAL_RCC_OscConfig+0xb4>
 80039d6:	4b76      	ldr	r3, [pc, #472]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a75      	ldr	r2, [pc, #468]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 80039dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	4b73      	ldr	r3, [pc, #460]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a72      	ldr	r2, [pc, #456]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 80039e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	e00b      	b.n	8003a08 <HAL_RCC_OscConfig+0xcc>
 80039f0:	4b6f      	ldr	r3, [pc, #444]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a6e      	ldr	r2, [pc, #440]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 80039f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	4b6c      	ldr	r3, [pc, #432]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a6b      	ldr	r2, [pc, #428]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d013      	beq.n	8003a38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fe f9e8 	bl	8001de4 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a18:	f7fe f9e4 	bl	8001de4 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b64      	cmp	r3, #100	; 0x64
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e21f      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2a:	4b61      	ldr	r3, [pc, #388]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0xdc>
 8003a36:	e014      	b.n	8003a62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fe f9d4 	bl	8001de4 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a40:	f7fe f9d0 	bl	8001de4 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	; 0x64
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e20b      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a52:	4b57      	ldr	r3, [pc, #348]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <HAL_RCC_OscConfig+0x104>
 8003a5e:	e000      	b.n	8003a62 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d06f      	beq.n	8003b4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a6e:	4b50      	ldr	r3, [pc, #320]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d017      	beq.n	8003aaa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a7a:	4b4d      	ldr	r3, [pc, #308]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d105      	bne.n	8003a92 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a86:	4b4a      	ldr	r3, [pc, #296]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a92:	4b47      	ldr	r3, [pc, #284]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a9a:	2b0c      	cmp	r3, #12
 8003a9c:	d11c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a9e:	4b44      	ldr	r3, [pc, #272]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d116      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aaa:	4b41      	ldr	r3, [pc, #260]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x186>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d001      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e1d3      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac2:	4b3b      	ldr	r3, [pc, #236]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4937      	ldr	r1, [pc, #220]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad6:	e03a      	b.n	8003b4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d020      	beq.n	8003b22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae0:	4b34      	ldr	r3, [pc, #208]	; (8003bb4 <HAL_RCC_OscConfig+0x278>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae6:	f7fe f97d 	bl	8001de4 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aee:	f7fe f979 	bl	8001de4 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e1b4      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b00:	4b2b      	ldr	r3, [pc, #172]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0c:	4b28      	ldr	r3, [pc, #160]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	4925      	ldr	r1, [pc, #148]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	600b      	str	r3, [r1, #0]
 8003b20:	e015      	b.n	8003b4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b22:	4b24      	ldr	r3, [pc, #144]	; (8003bb4 <HAL_RCC_OscConfig+0x278>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b28:	f7fe f95c 	bl	8001de4 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b30:	f7fe f958 	bl	8001de4 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e193      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b42:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d036      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d016      	beq.n	8003b90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b62:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b68:	f7fe f93c 	bl	8001de4 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b70:	f7fe f938 	bl	8001de4 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e173      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b82:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0x234>
 8003b8e:	e01b      	b.n	8003bc8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b90:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b96:	f7fe f925 	bl	8001de4 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b9c:	e00e      	b.n	8003bbc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b9e:	f7fe f921 	bl	8001de4 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d907      	bls.n	8003bbc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e15c      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	42470000 	.word	0x42470000
 8003bb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bbc:	4b8a      	ldr	r3, [pc, #552]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1ea      	bne.n	8003b9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 8097 	beq.w	8003d04 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bda:	4b83      	ldr	r3, [pc, #524]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10f      	bne.n	8003c06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	4b7f      	ldr	r3, [pc, #508]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	4a7e      	ldr	r2, [pc, #504]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf6:	4b7c      	ldr	r3, [pc, #496]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c02:	2301      	movs	r3, #1
 8003c04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c06:	4b79      	ldr	r3, [pc, #484]	; (8003dec <HAL_RCC_OscConfig+0x4b0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d118      	bne.n	8003c44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c12:	4b76      	ldr	r3, [pc, #472]	; (8003dec <HAL_RCC_OscConfig+0x4b0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a75      	ldr	r2, [pc, #468]	; (8003dec <HAL_RCC_OscConfig+0x4b0>)
 8003c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1e:	f7fe f8e1 	bl	8001de4 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c26:	f7fe f8dd 	bl	8001de4 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e118      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c38:	4b6c      	ldr	r3, [pc, #432]	; (8003dec <HAL_RCC_OscConfig+0x4b0>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0f0      	beq.n	8003c26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d106      	bne.n	8003c5a <HAL_RCC_OscConfig+0x31e>
 8003c4c:	4b66      	ldr	r3, [pc, #408]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	4a65      	ldr	r2, [pc, #404]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	6713      	str	r3, [r2, #112]	; 0x70
 8003c58:	e01c      	b.n	8003c94 <HAL_RCC_OscConfig+0x358>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b05      	cmp	r3, #5
 8003c60:	d10c      	bne.n	8003c7c <HAL_RCC_OscConfig+0x340>
 8003c62:	4b61      	ldr	r3, [pc, #388]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	4a60      	ldr	r2, [pc, #384]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c68:	f043 0304 	orr.w	r3, r3, #4
 8003c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6e:	4b5e      	ldr	r3, [pc, #376]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	4a5d      	ldr	r2, [pc, #372]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7a:	e00b      	b.n	8003c94 <HAL_RCC_OscConfig+0x358>
 8003c7c:	4b5a      	ldr	r3, [pc, #360]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c80:	4a59      	ldr	r2, [pc, #356]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c82:	f023 0301 	bic.w	r3, r3, #1
 8003c86:	6713      	str	r3, [r2, #112]	; 0x70
 8003c88:	4b57      	ldr	r3, [pc, #348]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8c:	4a56      	ldr	r2, [pc, #344]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c8e:	f023 0304 	bic.w	r3, r3, #4
 8003c92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d015      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9c:	f7fe f8a2 	bl	8001de4 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca2:	e00a      	b.n	8003cba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca4:	f7fe f89e 	bl	8001de4 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e0d7      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cba:	4b4b      	ldr	r3, [pc, #300]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0ee      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x368>
 8003cc6:	e014      	b.n	8003cf2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc8:	f7fe f88c 	bl	8001de4 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cce:	e00a      	b.n	8003ce6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd0:	f7fe f888 	bl	8001de4 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e0c1      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce6:	4b40      	ldr	r3, [pc, #256]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1ee      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d105      	bne.n	8003d04 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf8:	4b3b      	ldr	r3, [pc, #236]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	4a3a      	ldr	r2, [pc, #232]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 80ad 	beq.w	8003e68 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d0e:	4b36      	ldr	r3, [pc, #216]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	2b08      	cmp	r3, #8
 8003d18:	d060      	beq.n	8003ddc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d145      	bne.n	8003dae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d22:	4b33      	ldr	r3, [pc, #204]	; (8003df0 <HAL_RCC_OscConfig+0x4b4>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7fe f85c 	bl	8001de4 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d30:	f7fe f858 	bl	8001de4 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e093      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d42:	4b29      	ldr	r3, [pc, #164]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69da      	ldr	r2, [r3, #28]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	019b      	lsls	r3, r3, #6
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	085b      	lsrs	r3, r3, #1
 8003d66:	3b01      	subs	r3, #1
 8003d68:	041b      	lsls	r3, r3, #16
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	061b      	lsls	r3, r3, #24
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	071b      	lsls	r3, r3, #28
 8003d7a:	491b      	ldr	r1, [pc, #108]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d80:	4b1b      	ldr	r3, [pc, #108]	; (8003df0 <HAL_RCC_OscConfig+0x4b4>)
 8003d82:	2201      	movs	r2, #1
 8003d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d86:	f7fe f82d 	bl	8001de4 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8e:	f7fe f829 	bl	8001de4 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e064      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCC_OscConfig+0x452>
 8003dac:	e05c      	b.n	8003e68 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dae:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <HAL_RCC_OscConfig+0x4b4>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7fe f816 	bl	8001de4 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dbc:	f7fe f812 	bl	8001de4 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e04d      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dce:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f0      	bne.n	8003dbc <HAL_RCC_OscConfig+0x480>
 8003dda:	e045      	b.n	8003e68 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d107      	bne.n	8003df4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e040      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
 8003de8:	40023800 	.word	0x40023800
 8003dec:	40007000 	.word	0x40007000
 8003df0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003df4:	4b1f      	ldr	r3, [pc, #124]	; (8003e74 <HAL_RCC_OscConfig+0x538>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d030      	beq.n	8003e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d129      	bne.n	8003e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d122      	bne.n	8003e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e24:	4013      	ands	r3, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d119      	bne.n	8003e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3a:	085b      	lsrs	r3, r3, #1
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d10f      	bne.n	8003e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d107      	bne.n	8003e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40023800 	.word	0x40023800

08003e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e041      	b.n	8003f0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fd fd86 	bl	80019b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	f000 fa96 	bl	80043e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d001      	beq.n	8003f30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e04e      	b.n	8003fce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a23      	ldr	r2, [pc, #140]	; (8003fdc <HAL_TIM_Base_Start_IT+0xc4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d022      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x80>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5a:	d01d      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x80>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a1f      	ldr	r2, [pc, #124]	; (8003fe0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d018      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x80>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a1e      	ldr	r2, [pc, #120]	; (8003fe4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d013      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x80>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1c      	ldr	r2, [pc, #112]	; (8003fe8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00e      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x80>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a1b      	ldr	r2, [pc, #108]	; (8003fec <HAL_TIM_Base_Start_IT+0xd4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d009      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x80>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a19      	ldr	r2, [pc, #100]	; (8003ff0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d004      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x80>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a18      	ldr	r2, [pc, #96]	; (8003ff4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d111      	bne.n	8003fbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b06      	cmp	r3, #6
 8003fa8:	d010      	beq.n	8003fcc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0201 	orr.w	r2, r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fba:	e007      	b.n	8003fcc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	40000400 	.word	0x40000400
 8003fe4:	40000800 	.word	0x40000800
 8003fe8:	40000c00 	.word	0x40000c00
 8003fec:	40010400 	.word	0x40010400
 8003ff0:	40014000 	.word	0x40014000
 8003ff4:	40001800 	.word	0x40001800

08003ff8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b02      	cmp	r3, #2
 800400c:	d122      	bne.n	8004054 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b02      	cmp	r3, #2
 800401a:	d11b      	bne.n	8004054 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0202 	mvn.w	r2, #2
 8004024:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f9b5 	bl	80043aa <HAL_TIM_IC_CaptureCallback>
 8004040:	e005      	b.n	800404e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f9a7 	bl	8004396 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f9b8 	bl	80043be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b04      	cmp	r3, #4
 8004060:	d122      	bne.n	80040a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b04      	cmp	r3, #4
 800406e:	d11b      	bne.n	80040a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0204 	mvn.w	r2, #4
 8004078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2202      	movs	r2, #2
 800407e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f98b 	bl	80043aa <HAL_TIM_IC_CaptureCallback>
 8004094:	e005      	b.n	80040a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f97d 	bl	8004396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f98e 	bl	80043be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d122      	bne.n	80040fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d11b      	bne.n	80040fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 0208 	mvn.w	r2, #8
 80040cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2204      	movs	r2, #4
 80040d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f961 	bl	80043aa <HAL_TIM_IC_CaptureCallback>
 80040e8:	e005      	b.n	80040f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f953 	bl	8004396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f964 	bl	80043be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f003 0310 	and.w	r3, r3, #16
 8004106:	2b10      	cmp	r3, #16
 8004108:	d122      	bne.n	8004150 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0310 	and.w	r3, r3, #16
 8004114:	2b10      	cmp	r3, #16
 8004116:	d11b      	bne.n	8004150 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0210 	mvn.w	r2, #16
 8004120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2208      	movs	r2, #8
 8004126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f937 	bl	80043aa <HAL_TIM_IC_CaptureCallback>
 800413c:	e005      	b.n	800414a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f929 	bl	8004396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f93a 	bl	80043be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b01      	cmp	r3, #1
 800415c:	d10e      	bne.n	800417c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b01      	cmp	r3, #1
 800416a:	d107      	bne.n	800417c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0201 	mvn.w	r2, #1
 8004174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fd f806 	bl	8001188 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004186:	2b80      	cmp	r3, #128	; 0x80
 8004188:	d10e      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004194:	2b80      	cmp	r3, #128	; 0x80
 8004196:	d107      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fae0 	bl	8004768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b2:	2b40      	cmp	r3, #64	; 0x40
 80041b4:	d10e      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c0:	2b40      	cmp	r3, #64	; 0x40
 80041c2:	d107      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f8ff 	bl	80043d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b20      	cmp	r3, #32
 80041e0:	d10e      	bne.n	8004200 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f003 0320 	and.w	r3, r3, #32
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	d107      	bne.n	8004200 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f06f 0220 	mvn.w	r2, #32
 80041f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 faaa 	bl	8004754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004200:	bf00      	nop
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_TIM_ConfigClockSource+0x1c>
 8004220:	2302      	movs	r3, #2
 8004222:	e0b4      	b.n	800438e <HAL_TIM_ConfigClockSource+0x186>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800424a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800425c:	d03e      	beq.n	80042dc <HAL_TIM_ConfigClockSource+0xd4>
 800425e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004262:	f200 8087 	bhi.w	8004374 <HAL_TIM_ConfigClockSource+0x16c>
 8004266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426a:	f000 8086 	beq.w	800437a <HAL_TIM_ConfigClockSource+0x172>
 800426e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004272:	d87f      	bhi.n	8004374 <HAL_TIM_ConfigClockSource+0x16c>
 8004274:	2b70      	cmp	r3, #112	; 0x70
 8004276:	d01a      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0xa6>
 8004278:	2b70      	cmp	r3, #112	; 0x70
 800427a:	d87b      	bhi.n	8004374 <HAL_TIM_ConfigClockSource+0x16c>
 800427c:	2b60      	cmp	r3, #96	; 0x60
 800427e:	d050      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x11a>
 8004280:	2b60      	cmp	r3, #96	; 0x60
 8004282:	d877      	bhi.n	8004374 <HAL_TIM_ConfigClockSource+0x16c>
 8004284:	2b50      	cmp	r3, #80	; 0x50
 8004286:	d03c      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0xfa>
 8004288:	2b50      	cmp	r3, #80	; 0x50
 800428a:	d873      	bhi.n	8004374 <HAL_TIM_ConfigClockSource+0x16c>
 800428c:	2b40      	cmp	r3, #64	; 0x40
 800428e:	d058      	beq.n	8004342 <HAL_TIM_ConfigClockSource+0x13a>
 8004290:	2b40      	cmp	r3, #64	; 0x40
 8004292:	d86f      	bhi.n	8004374 <HAL_TIM_ConfigClockSource+0x16c>
 8004294:	2b30      	cmp	r3, #48	; 0x30
 8004296:	d064      	beq.n	8004362 <HAL_TIM_ConfigClockSource+0x15a>
 8004298:	2b30      	cmp	r3, #48	; 0x30
 800429a:	d86b      	bhi.n	8004374 <HAL_TIM_ConfigClockSource+0x16c>
 800429c:	2b20      	cmp	r3, #32
 800429e:	d060      	beq.n	8004362 <HAL_TIM_ConfigClockSource+0x15a>
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d867      	bhi.n	8004374 <HAL_TIM_ConfigClockSource+0x16c>
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d05c      	beq.n	8004362 <HAL_TIM_ConfigClockSource+0x15a>
 80042a8:	2b10      	cmp	r3, #16
 80042aa:	d05a      	beq.n	8004362 <HAL_TIM_ConfigClockSource+0x15a>
 80042ac:	e062      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6899      	ldr	r1, [r3, #8]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f000 f9ad 	bl	800461c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	609a      	str	r2, [r3, #8]
      break;
 80042da:	e04f      	b.n	800437c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	6899      	ldr	r1, [r3, #8]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f000 f996 	bl	800461c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042fe:	609a      	str	r2, [r3, #8]
      break;
 8004300:	e03c      	b.n	800437c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6859      	ldr	r1, [r3, #4]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	461a      	mov	r2, r3
 8004310:	f000 f90a 	bl	8004528 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2150      	movs	r1, #80	; 0x50
 800431a:	4618      	mov	r0, r3
 800431c:	f000 f963 	bl	80045e6 <TIM_ITRx_SetConfig>
      break;
 8004320:	e02c      	b.n	800437c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6859      	ldr	r1, [r3, #4]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	461a      	mov	r2, r3
 8004330:	f000 f929 	bl	8004586 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2160      	movs	r1, #96	; 0x60
 800433a:	4618      	mov	r0, r3
 800433c:	f000 f953 	bl	80045e6 <TIM_ITRx_SetConfig>
      break;
 8004340:	e01c      	b.n	800437c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	6859      	ldr	r1, [r3, #4]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	461a      	mov	r2, r3
 8004350:	f000 f8ea 	bl	8004528 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2140      	movs	r1, #64	; 0x40
 800435a:	4618      	mov	r0, r3
 800435c:	f000 f943 	bl	80045e6 <TIM_ITRx_SetConfig>
      break;
 8004360:	e00c      	b.n	800437c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4619      	mov	r1, r3
 800436c:	4610      	mov	r0, r2
 800436e:	f000 f93a 	bl	80045e6 <TIM_ITRx_SetConfig>
      break;
 8004372:	e003      	b.n	800437c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]
      break;
 8004378:	e000      	b.n	800437c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800437a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800438c:	7bfb      	ldrb	r3, [r7, #15]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a40      	ldr	r2, [pc, #256]	; (80044fc <TIM_Base_SetConfig+0x114>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d013      	beq.n	8004428 <TIM_Base_SetConfig+0x40>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004406:	d00f      	beq.n	8004428 <TIM_Base_SetConfig+0x40>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a3d      	ldr	r2, [pc, #244]	; (8004500 <TIM_Base_SetConfig+0x118>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00b      	beq.n	8004428 <TIM_Base_SetConfig+0x40>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a3c      	ldr	r2, [pc, #240]	; (8004504 <TIM_Base_SetConfig+0x11c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d007      	beq.n	8004428 <TIM_Base_SetConfig+0x40>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a3b      	ldr	r2, [pc, #236]	; (8004508 <TIM_Base_SetConfig+0x120>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d003      	beq.n	8004428 <TIM_Base_SetConfig+0x40>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a3a      	ldr	r2, [pc, #232]	; (800450c <TIM_Base_SetConfig+0x124>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d108      	bne.n	800443a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a2f      	ldr	r2, [pc, #188]	; (80044fc <TIM_Base_SetConfig+0x114>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d02b      	beq.n	800449a <TIM_Base_SetConfig+0xb2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004448:	d027      	beq.n	800449a <TIM_Base_SetConfig+0xb2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a2c      	ldr	r2, [pc, #176]	; (8004500 <TIM_Base_SetConfig+0x118>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d023      	beq.n	800449a <TIM_Base_SetConfig+0xb2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a2b      	ldr	r2, [pc, #172]	; (8004504 <TIM_Base_SetConfig+0x11c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d01f      	beq.n	800449a <TIM_Base_SetConfig+0xb2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a2a      	ldr	r2, [pc, #168]	; (8004508 <TIM_Base_SetConfig+0x120>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d01b      	beq.n	800449a <TIM_Base_SetConfig+0xb2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a29      	ldr	r2, [pc, #164]	; (800450c <TIM_Base_SetConfig+0x124>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d017      	beq.n	800449a <TIM_Base_SetConfig+0xb2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a28      	ldr	r2, [pc, #160]	; (8004510 <TIM_Base_SetConfig+0x128>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d013      	beq.n	800449a <TIM_Base_SetConfig+0xb2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a27      	ldr	r2, [pc, #156]	; (8004514 <TIM_Base_SetConfig+0x12c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d00f      	beq.n	800449a <TIM_Base_SetConfig+0xb2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a26      	ldr	r2, [pc, #152]	; (8004518 <TIM_Base_SetConfig+0x130>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00b      	beq.n	800449a <TIM_Base_SetConfig+0xb2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a25      	ldr	r2, [pc, #148]	; (800451c <TIM_Base_SetConfig+0x134>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d007      	beq.n	800449a <TIM_Base_SetConfig+0xb2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a24      	ldr	r2, [pc, #144]	; (8004520 <TIM_Base_SetConfig+0x138>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d003      	beq.n	800449a <TIM_Base_SetConfig+0xb2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a23      	ldr	r2, [pc, #140]	; (8004524 <TIM_Base_SetConfig+0x13c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d108      	bne.n	80044ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a0a      	ldr	r2, [pc, #40]	; (80044fc <TIM_Base_SetConfig+0x114>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d003      	beq.n	80044e0 <TIM_Base_SetConfig+0xf8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a0c      	ldr	r2, [pc, #48]	; (800450c <TIM_Base_SetConfig+0x124>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d103      	bne.n	80044e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	615a      	str	r2, [r3, #20]
}
 80044ee:	bf00      	nop
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40010000 	.word	0x40010000
 8004500:	40000400 	.word	0x40000400
 8004504:	40000800 	.word	0x40000800
 8004508:	40000c00 	.word	0x40000c00
 800450c:	40010400 	.word	0x40010400
 8004510:	40014000 	.word	0x40014000
 8004514:	40014400 	.word	0x40014400
 8004518:	40014800 	.word	0x40014800
 800451c:	40001800 	.word	0x40001800
 8004520:	40001c00 	.word	0x40001c00
 8004524:	40002000 	.word	0x40002000

08004528 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	f023 0201 	bic.w	r2, r3, #1
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f023 030a 	bic.w	r3, r3, #10
 8004564:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4313      	orrs	r3, r2
 800456c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	621a      	str	r2, [r3, #32]
}
 800457a:	bf00      	nop
 800457c:	371c      	adds	r7, #28
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004586:	b480      	push	{r7}
 8004588:	b087      	sub	sp, #28
 800458a:	af00      	add	r7, sp, #0
 800458c:	60f8      	str	r0, [r7, #12]
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f023 0210 	bic.w	r2, r3, #16
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	031b      	lsls	r3, r3, #12
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	621a      	str	r2, [r3, #32]
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	f043 0307 	orr.w	r3, r3, #7
 8004608:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	609a      	str	r2, [r3, #8]
}
 8004610:	bf00      	nop
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004636:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	021a      	lsls	r2, r3, #8
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	431a      	orrs	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4313      	orrs	r3, r2
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	609a      	str	r2, [r3, #8]
}
 8004650:	bf00      	nop
 8004652:	371c      	adds	r7, #28
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004670:	2302      	movs	r3, #2
 8004672:	e05a      	b.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a21      	ldr	r2, [pc, #132]	; (8004738 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d022      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c0:	d01d      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1d      	ldr	r2, [pc, #116]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d018      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a1b      	ldr	r2, [pc, #108]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d013      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a1a      	ldr	r2, [pc, #104]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00e      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a18      	ldr	r2, [pc, #96]	; (8004748 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d009      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a17      	ldr	r2, [pc, #92]	; (800474c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d004      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a15      	ldr	r2, [pc, #84]	; (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d10c      	bne.n	8004718 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	4313      	orrs	r3, r2
 800470e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	40010000 	.word	0x40010000
 800473c:	40000400 	.word	0x40000400
 8004740:	40000800 	.word	0x40000800
 8004744:	40000c00 	.word	0x40000c00
 8004748:	40010400 	.word	0x40010400
 800474c:	40014000 	.word	0x40014000
 8004750:	40001800 	.word	0x40001800

08004754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e03f      	b.n	800480e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7fd f948 	bl	8001a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2224      	movs	r2, #36	; 0x24
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fddf 	bl	8005384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695a      	ldr	r2, [r3, #20]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b08a      	sub	sp, #40	; 0x28
 800481a:	af02      	add	r7, sp, #8
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	603b      	str	r3, [r7, #0]
 8004822:	4613      	mov	r3, r2
 8004824:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b20      	cmp	r3, #32
 8004834:	d17c      	bne.n	8004930 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <HAL_UART_Transmit+0x2c>
 800483c:	88fb      	ldrh	r3, [r7, #6]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e075      	b.n	8004932 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800484c:	2b01      	cmp	r3, #1
 800484e:	d101      	bne.n	8004854 <HAL_UART_Transmit+0x3e>
 8004850:	2302      	movs	r3, #2
 8004852:	e06e      	b.n	8004932 <HAL_UART_Transmit+0x11c>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2221      	movs	r2, #33	; 0x21
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800486a:	f7fd fabb 	bl	8001de4 <HAL_GetTick>
 800486e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	88fa      	ldrh	r2, [r7, #6]
 8004874:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	88fa      	ldrh	r2, [r7, #6]
 800487a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004884:	d108      	bne.n	8004898 <HAL_UART_Transmit+0x82>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d104      	bne.n	8004898 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800488e:	2300      	movs	r3, #0
 8004890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	e003      	b.n	80048a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800489c:	2300      	movs	r3, #0
 800489e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048a8:	e02a      	b.n	8004900 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2200      	movs	r2, #0
 80048b2:	2180      	movs	r1, #128	; 0x80
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 fb1f 	bl	8004ef8 <UART_WaitOnFlagUntilTimeout>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e036      	b.n	8004932 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10b      	bne.n	80048e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	3302      	adds	r3, #2
 80048de:	61bb      	str	r3, [r7, #24]
 80048e0:	e007      	b.n	80048f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	781a      	ldrb	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	3301      	adds	r3, #1
 80048f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1cf      	bne.n	80048aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2200      	movs	r2, #0
 8004912:	2140      	movs	r1, #64	; 0x40
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 faef 	bl	8004ef8 <UART_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e006      	b.n	8004932 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	e000      	b.n	8004932 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004930:	2302      	movs	r3, #2
  }
}
 8004932:	4618      	mov	r0, r3
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	4613      	mov	r3, r2
 8004946:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b20      	cmp	r3, #32
 8004952:	d11d      	bne.n	8004990 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <HAL_UART_Receive_IT+0x26>
 800495a:	88fb      	ldrh	r3, [r7, #6]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e016      	b.n	8004992 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_UART_Receive_IT+0x38>
 800496e:	2302      	movs	r3, #2
 8004970:	e00f      	b.n	8004992 <HAL_UART_Receive_IT+0x58>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004980:	88fb      	ldrh	r3, [r7, #6]
 8004982:	461a      	mov	r2, r3
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 fb24 	bl	8004fd4 <UART_Start_Receive_IT>
 800498c:	4603      	mov	r3, r0
 800498e:	e000      	b.n	8004992 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004990:	2302      	movs	r3, #2
  }
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b0ba      	sub	sp, #232	; 0xe8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80049da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10f      	bne.n	8004a02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d009      	beq.n	8004a02 <HAL_UART_IRQHandler+0x66>
 80049ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fc07 	bl	800520e <UART_Receive_IT>
      return;
 8004a00:	e256      	b.n	8004eb0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 80de 	beq.w	8004bc8 <HAL_UART_IRQHandler+0x22c>
 8004a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d106      	bne.n	8004a26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 80d1 	beq.w	8004bc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00b      	beq.n	8004a4a <HAL_UART_IRQHandler+0xae>
 8004a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f043 0201 	orr.w	r2, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00b      	beq.n	8004a6e <HAL_UART_IRQHandler+0xd2>
 8004a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d005      	beq.n	8004a6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f043 0202 	orr.w	r2, r3, #2
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00b      	beq.n	8004a92 <HAL_UART_IRQHandler+0xf6>
 8004a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f043 0204 	orr.w	r2, r3, #4
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d011      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x126>
 8004a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d005      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f043 0208 	orr.w	r2, r3, #8
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 81ed 	beq.w	8004ea6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d008      	beq.n	8004aea <HAL_UART_IRQHandler+0x14e>
 8004ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fb92 	bl	800520e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b40      	cmp	r3, #64	; 0x40
 8004af6:	bf0c      	ite	eq
 8004af8:	2301      	moveq	r3, #1
 8004afa:	2300      	movne	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d103      	bne.n	8004b16 <HAL_UART_IRQHandler+0x17a>
 8004b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d04f      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fa9a 	bl	8005050 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b26:	2b40      	cmp	r3, #64	; 0x40
 8004b28:	d141      	bne.n	8004bae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3314      	adds	r3, #20
 8004b30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3314      	adds	r3, #20
 8004b52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1d9      	bne.n	8004b2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d013      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	4a7d      	ldr	r2, [pc, #500]	; (8004d78 <HAL_UART_IRQHandler+0x3dc>)
 8004b84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fe f9bb 	bl	8002f06 <HAL_DMA_Abort_IT>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d016      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba4:	e00e      	b.n	8004bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f990 	bl	8004ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bac:	e00a      	b.n	8004bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f98c 	bl	8004ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb4:	e006      	b.n	8004bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f988 	bl	8004ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004bc2:	e170      	b.n	8004ea6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc4:	bf00      	nop
    return;
 8004bc6:	e16e      	b.n	8004ea6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	f040 814a 	bne.w	8004e66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 8143 	beq.w	8004e66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be4:	f003 0310 	and.w	r3, r3, #16
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 813c 	beq.w	8004e66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60bb      	str	r3, [r7, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0e:	2b40      	cmp	r3, #64	; 0x40
 8004c10:	f040 80b4 	bne.w	8004d7c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8140 	beq.w	8004eaa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c32:	429a      	cmp	r2, r3
 8004c34:	f080 8139 	bcs.w	8004eaa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4a:	f000 8088 	beq.w	8004d5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	330c      	adds	r3, #12
 8004c54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	330c      	adds	r3, #12
 8004c76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c8a:	e841 2300 	strex	r3, r2, [r1]
 8004c8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1d9      	bne.n	8004c4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3314      	adds	r3, #20
 8004ca0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cac:	f023 0301 	bic.w	r3, r3, #1
 8004cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3314      	adds	r3, #20
 8004cba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004cbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004cc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004cc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e1      	bne.n	8004c9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3314      	adds	r3, #20
 8004cdc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ce0:	e853 3f00 	ldrex	r3, [r3]
 8004ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3314      	adds	r3, #20
 8004cf6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d02:	e841 2300 	strex	r3, r2, [r1]
 8004d06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1e3      	bne.n	8004cd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	330c      	adds	r3, #12
 8004d22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d26:	e853 3f00 	ldrex	r3, [r3]
 8004d2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d2e:	f023 0310 	bic.w	r3, r3, #16
 8004d32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d40:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e3      	bne.n	8004d1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fe f864 	bl	8002e26 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f8b6 	bl	8004ee0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d74:	e099      	b.n	8004eaa <HAL_UART_IRQHandler+0x50e>
 8004d76:	bf00      	nop
 8004d78:	08005117 	.word	0x08005117
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 808b 	beq.w	8004eae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004d98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8086 	beq.w	8004eae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	330c      	adds	r3, #12
 8004da8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dac:	e853 3f00 	ldrex	r3, [r3]
 8004db0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004db8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004dc6:	647a      	str	r2, [r7, #68]	; 0x44
 8004dc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dce:	e841 2300 	strex	r3, r2, [r1]
 8004dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1e3      	bne.n	8004da2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	3314      	adds	r3, #20
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	623b      	str	r3, [r7, #32]
   return(result);
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	f023 0301 	bic.w	r3, r3, #1
 8004df0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3314      	adds	r3, #20
 8004dfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dfe:	633a      	str	r2, [r7, #48]	; 0x30
 8004e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e3      	bne.n	8004dda <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	330c      	adds	r3, #12
 8004e26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	e853 3f00 	ldrex	r3, [r3]
 8004e2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0310 	bic.w	r3, r3, #16
 8004e36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	330c      	adds	r3, #12
 8004e40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e44:	61fa      	str	r2, [r7, #28]
 8004e46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e48:	69b9      	ldr	r1, [r7, #24]
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	e841 2300 	strex	r3, r2, [r1]
 8004e50:	617b      	str	r3, [r7, #20]
   return(result);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e3      	bne.n	8004e20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f83e 	bl	8004ee0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e64:	e023      	b.n	8004eae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d009      	beq.n	8004e86 <HAL_UART_IRQHandler+0x4ea>
 8004e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f95d 	bl	800513e <UART_Transmit_IT>
    return;
 8004e84:	e014      	b.n	8004eb0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00e      	beq.n	8004eb0 <HAL_UART_IRQHandler+0x514>
 8004e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d008      	beq.n	8004eb0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f99d 	bl	80051de <UART_EndTransmit_IT>
    return;
 8004ea4:	e004      	b.n	8004eb0 <HAL_UART_IRQHandler+0x514>
    return;
 8004ea6:	bf00      	nop
 8004ea8:	e002      	b.n	8004eb0 <HAL_UART_IRQHandler+0x514>
      return;
 8004eaa:	bf00      	nop
 8004eac:	e000      	b.n	8004eb0 <HAL_UART_IRQHandler+0x514>
      return;
 8004eae:	bf00      	nop
  }
}
 8004eb0:	37e8      	adds	r7, #232	; 0xe8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop

08004eb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b090      	sub	sp, #64	; 0x40
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	603b      	str	r3, [r7, #0]
 8004f04:	4613      	mov	r3, r2
 8004f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f08:	e050      	b.n	8004fac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f10:	d04c      	beq.n	8004fac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d007      	beq.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f18:	f7fc ff64 	bl	8001de4 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d241      	bcs.n	8004fac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f32:	e853 3f00 	ldrex	r3, [r3]
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f48:	637a      	str	r2, [r7, #52]	; 0x34
 8004f4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e5      	bne.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3314      	adds	r3, #20
 8004f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3314      	adds	r3, #20
 8004f7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f7c:	623a      	str	r2, [r7, #32]
 8004f7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	69f9      	ldr	r1, [r7, #28]
 8004f82:	6a3a      	ldr	r2, [r7, #32]
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e5      	bne.n	8004f5c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e00f      	b.n	8004fcc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	bf0c      	ite	eq
 8004fbc:	2301      	moveq	r3, #1
 8004fbe:	2300      	movne	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d09f      	beq.n	8004f0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3740      	adds	r7, #64	; 0x40
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	88fa      	ldrh	r2, [r7, #6]
 8004fec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	88fa      	ldrh	r2, [r7, #6]
 8004ff2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2222      	movs	r2, #34	; 0x22
 8004ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d007      	beq.n	8005022 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005020:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695a      	ldr	r2, [r3, #20]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0201 	orr.w	r2, r2, #1
 8005030:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68da      	ldr	r2, [r3, #12]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 0220 	orr.w	r2, r2, #32
 8005040:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005050:	b480      	push	{r7}
 8005052:	b095      	sub	sp, #84	; 0x54
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	330c      	adds	r3, #12
 800505e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005062:	e853 3f00 	ldrex	r3, [r3]
 8005066:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800506e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	330c      	adds	r3, #12
 8005076:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005078:	643a      	str	r2, [r7, #64]	; 0x40
 800507a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800507e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005080:	e841 2300 	strex	r3, r2, [r1]
 8005084:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1e5      	bne.n	8005058 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3314      	adds	r3, #20
 8005092:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	e853 3f00 	ldrex	r3, [r3]
 800509a:	61fb      	str	r3, [r7, #28]
   return(result);
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f023 0301 	bic.w	r3, r3, #1
 80050a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3314      	adds	r3, #20
 80050aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050b4:	e841 2300 	strex	r3, r2, [r1]
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1e5      	bne.n	800508c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d119      	bne.n	80050fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	330c      	adds	r3, #12
 80050ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	e853 3f00 	ldrex	r3, [r3]
 80050d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f023 0310 	bic.w	r3, r3, #16
 80050de:	647b      	str	r3, [r7, #68]	; 0x44
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	330c      	adds	r3, #12
 80050e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050e8:	61ba      	str	r2, [r7, #24]
 80050ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ec:	6979      	ldr	r1, [r7, #20]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	e841 2300 	strex	r3, r2, [r1]
 80050f4:	613b      	str	r3, [r7, #16]
   return(result);
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e5      	bne.n	80050c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2220      	movs	r2, #32
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	631a      	str	r2, [r3, #48]	; 0x30
}
 800510a:	bf00      	nop
 800510c:	3754      	adds	r7, #84	; 0x54
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff fecb 	bl	8004ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b21      	cmp	r3, #33	; 0x21
 8005150:	d13e      	bne.n	80051d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515a:	d114      	bne.n	8005186 <UART_Transmit_IT+0x48>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d110      	bne.n	8005186 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005178:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	1c9a      	adds	r2, r3, #2
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	621a      	str	r2, [r3, #32]
 8005184:	e008      	b.n	8005198 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	1c59      	adds	r1, r3, #1
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6211      	str	r1, [r2, #32]
 8005190:	781a      	ldrb	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	4619      	mov	r1, r3
 80051a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10f      	bne.n	80051cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e000      	b.n	80051d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051d0:	2302      	movs	r3, #2
  }
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff fe5a 	bl	8004eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b08c      	sub	sp, #48	; 0x30
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b22      	cmp	r3, #34	; 0x22
 8005220:	f040 80ab 	bne.w	800537a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800522c:	d117      	bne.n	800525e <UART_Receive_IT+0x50>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d113      	bne.n	800525e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005236:	2300      	movs	r3, #0
 8005238:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	b29b      	uxth	r3, r3
 8005248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800524c:	b29a      	uxth	r2, r3
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005256:	1c9a      	adds	r2, r3, #2
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	629a      	str	r2, [r3, #40]	; 0x28
 800525c:	e026      	b.n	80052ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005262:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005264:	2300      	movs	r3, #0
 8005266:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005270:	d007      	beq.n	8005282 <UART_Receive_IT+0x74>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <UART_Receive_IT+0x82>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d106      	bne.n	8005290 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	b2da      	uxtb	r2, r3
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	e008      	b.n	80052a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800529c:	b2da      	uxtb	r2, r3
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	4619      	mov	r1, r3
 80052ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d15a      	bne.n	8005376 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0220 	bic.w	r2, r2, #32
 80052ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695a      	ldr	r2, [r3, #20]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0201 	bic.w	r2, r2, #1
 80052ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d135      	bne.n	800536c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	330c      	adds	r3, #12
 800530c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	613b      	str	r3, [r7, #16]
   return(result);
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f023 0310 	bic.w	r3, r3, #16
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	330c      	adds	r3, #12
 8005324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005326:	623a      	str	r2, [r7, #32]
 8005328:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	69f9      	ldr	r1, [r7, #28]
 800532c:	6a3a      	ldr	r2, [r7, #32]
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	61bb      	str	r3, [r7, #24]
   return(result);
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e5      	bne.n	8005306 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	2b10      	cmp	r3, #16
 8005346:	d10a      	bne.n	800535e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005348:	2300      	movs	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005362:	4619      	mov	r1, r3
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff fdbb 	bl	8004ee0 <HAL_UARTEx_RxEventCallback>
 800536a:	e002      	b.n	8005372 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7fc fa15 	bl	800179c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	e002      	b.n	800537c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	e000      	b.n	800537c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800537a:	2302      	movs	r3, #2
  }
}
 800537c:	4618      	mov	r0, r3
 800537e:	3730      	adds	r7, #48	; 0x30
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005388:	b0c0      	sub	sp, #256	; 0x100
 800538a:	af00      	add	r7, sp, #0
 800538c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800539c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a0:	68d9      	ldr	r1, [r3, #12]
 80053a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	ea40 0301 	orr.w	r3, r0, r1
 80053ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053dc:	f021 010c 	bic.w	r1, r1, #12
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053ea:	430b      	orrs	r3, r1
 80053ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fe:	6999      	ldr	r1, [r3, #24]
 8005400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	ea40 0301 	orr.w	r3, r0, r1
 800540a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	4b8f      	ldr	r3, [pc, #572]	; (8005650 <UART_SetConfig+0x2cc>)
 8005414:	429a      	cmp	r2, r3
 8005416:	d005      	beq.n	8005424 <UART_SetConfig+0xa0>
 8005418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	4b8d      	ldr	r3, [pc, #564]	; (8005654 <UART_SetConfig+0x2d0>)
 8005420:	429a      	cmp	r2, r3
 8005422:	d104      	bne.n	800542e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005424:	f7fe f846 	bl	80034b4 <HAL_RCC_GetPCLK2Freq>
 8005428:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800542c:	e003      	b.n	8005436 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800542e:	f7fe f82d 	bl	800348c <HAL_RCC_GetPCLK1Freq>
 8005432:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005440:	f040 810c 	bne.w	800565c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005448:	2200      	movs	r2, #0
 800544a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800544e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005452:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005456:	4622      	mov	r2, r4
 8005458:	462b      	mov	r3, r5
 800545a:	1891      	adds	r1, r2, r2
 800545c:	65b9      	str	r1, [r7, #88]	; 0x58
 800545e:	415b      	adcs	r3, r3
 8005460:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005462:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005466:	4621      	mov	r1, r4
 8005468:	eb12 0801 	adds.w	r8, r2, r1
 800546c:	4629      	mov	r1, r5
 800546e:	eb43 0901 	adc.w	r9, r3, r1
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	f04f 0300 	mov.w	r3, #0
 800547a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800547e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005486:	4690      	mov	r8, r2
 8005488:	4699      	mov	r9, r3
 800548a:	4623      	mov	r3, r4
 800548c:	eb18 0303 	adds.w	r3, r8, r3
 8005490:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005494:	462b      	mov	r3, r5
 8005496:	eb49 0303 	adc.w	r3, r9, r3
 800549a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800549e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80054ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80054b2:	460b      	mov	r3, r1
 80054b4:	18db      	adds	r3, r3, r3
 80054b6:	653b      	str	r3, [r7, #80]	; 0x50
 80054b8:	4613      	mov	r3, r2
 80054ba:	eb42 0303 	adc.w	r3, r2, r3
 80054be:	657b      	str	r3, [r7, #84]	; 0x54
 80054c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80054c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80054c8:	f7fb fae8 	bl	8000a9c <__aeabi_uldivmod>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4b61      	ldr	r3, [pc, #388]	; (8005658 <UART_SetConfig+0x2d4>)
 80054d2:	fba3 2302 	umull	r2, r3, r3, r2
 80054d6:	095b      	lsrs	r3, r3, #5
 80054d8:	011c      	lsls	r4, r3, #4
 80054da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054de:	2200      	movs	r2, #0
 80054e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80054e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80054ec:	4642      	mov	r2, r8
 80054ee:	464b      	mov	r3, r9
 80054f0:	1891      	adds	r1, r2, r2
 80054f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80054f4:	415b      	adcs	r3, r3
 80054f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80054fc:	4641      	mov	r1, r8
 80054fe:	eb12 0a01 	adds.w	sl, r2, r1
 8005502:	4649      	mov	r1, r9
 8005504:	eb43 0b01 	adc.w	fp, r3, r1
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005514:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005518:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800551c:	4692      	mov	sl, r2
 800551e:	469b      	mov	fp, r3
 8005520:	4643      	mov	r3, r8
 8005522:	eb1a 0303 	adds.w	r3, sl, r3
 8005526:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800552a:	464b      	mov	r3, r9
 800552c:	eb4b 0303 	adc.w	r3, fp, r3
 8005530:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005540:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005544:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005548:	460b      	mov	r3, r1
 800554a:	18db      	adds	r3, r3, r3
 800554c:	643b      	str	r3, [r7, #64]	; 0x40
 800554e:	4613      	mov	r3, r2
 8005550:	eb42 0303 	adc.w	r3, r2, r3
 8005554:	647b      	str	r3, [r7, #68]	; 0x44
 8005556:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800555a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800555e:	f7fb fa9d 	bl	8000a9c <__aeabi_uldivmod>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	4611      	mov	r1, r2
 8005568:	4b3b      	ldr	r3, [pc, #236]	; (8005658 <UART_SetConfig+0x2d4>)
 800556a:	fba3 2301 	umull	r2, r3, r3, r1
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	2264      	movs	r2, #100	; 0x64
 8005572:	fb02 f303 	mul.w	r3, r2, r3
 8005576:	1acb      	subs	r3, r1, r3
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800557e:	4b36      	ldr	r3, [pc, #216]	; (8005658 <UART_SetConfig+0x2d4>)
 8005580:	fba3 2302 	umull	r2, r3, r3, r2
 8005584:	095b      	lsrs	r3, r3, #5
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800558c:	441c      	add	r4, r3
 800558e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005592:	2200      	movs	r2, #0
 8005594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005598:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800559c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80055a0:	4642      	mov	r2, r8
 80055a2:	464b      	mov	r3, r9
 80055a4:	1891      	adds	r1, r2, r2
 80055a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80055a8:	415b      	adcs	r3, r3
 80055aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055b0:	4641      	mov	r1, r8
 80055b2:	1851      	adds	r1, r2, r1
 80055b4:	6339      	str	r1, [r7, #48]	; 0x30
 80055b6:	4649      	mov	r1, r9
 80055b8:	414b      	adcs	r3, r1
 80055ba:	637b      	str	r3, [r7, #52]	; 0x34
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80055c8:	4659      	mov	r1, fp
 80055ca:	00cb      	lsls	r3, r1, #3
 80055cc:	4651      	mov	r1, sl
 80055ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055d2:	4651      	mov	r1, sl
 80055d4:	00ca      	lsls	r2, r1, #3
 80055d6:	4610      	mov	r0, r2
 80055d8:	4619      	mov	r1, r3
 80055da:	4603      	mov	r3, r0
 80055dc:	4642      	mov	r2, r8
 80055de:	189b      	adds	r3, r3, r2
 80055e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055e4:	464b      	mov	r3, r9
 80055e6:	460a      	mov	r2, r1
 80055e8:	eb42 0303 	adc.w	r3, r2, r3
 80055ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005600:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005604:	460b      	mov	r3, r1
 8005606:	18db      	adds	r3, r3, r3
 8005608:	62bb      	str	r3, [r7, #40]	; 0x28
 800560a:	4613      	mov	r3, r2
 800560c:	eb42 0303 	adc.w	r3, r2, r3
 8005610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005612:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005616:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800561a:	f7fb fa3f 	bl	8000a9c <__aeabi_uldivmod>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4b0d      	ldr	r3, [pc, #52]	; (8005658 <UART_SetConfig+0x2d4>)
 8005624:	fba3 1302 	umull	r1, r3, r3, r2
 8005628:	095b      	lsrs	r3, r3, #5
 800562a:	2164      	movs	r1, #100	; 0x64
 800562c:	fb01 f303 	mul.w	r3, r1, r3
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	3332      	adds	r3, #50	; 0x32
 8005636:	4a08      	ldr	r2, [pc, #32]	; (8005658 <UART_SetConfig+0x2d4>)
 8005638:	fba2 2303 	umull	r2, r3, r2, r3
 800563c:	095b      	lsrs	r3, r3, #5
 800563e:	f003 0207 	and.w	r2, r3, #7
 8005642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4422      	add	r2, r4
 800564a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800564c:	e105      	b.n	800585a <UART_SetConfig+0x4d6>
 800564e:	bf00      	nop
 8005650:	40011000 	.word	0x40011000
 8005654:	40011400 	.word	0x40011400
 8005658:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800565c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005660:	2200      	movs	r2, #0
 8005662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005666:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800566a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800566e:	4642      	mov	r2, r8
 8005670:	464b      	mov	r3, r9
 8005672:	1891      	adds	r1, r2, r2
 8005674:	6239      	str	r1, [r7, #32]
 8005676:	415b      	adcs	r3, r3
 8005678:	627b      	str	r3, [r7, #36]	; 0x24
 800567a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800567e:	4641      	mov	r1, r8
 8005680:	1854      	adds	r4, r2, r1
 8005682:	4649      	mov	r1, r9
 8005684:	eb43 0501 	adc.w	r5, r3, r1
 8005688:	f04f 0200 	mov.w	r2, #0
 800568c:	f04f 0300 	mov.w	r3, #0
 8005690:	00eb      	lsls	r3, r5, #3
 8005692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005696:	00e2      	lsls	r2, r4, #3
 8005698:	4614      	mov	r4, r2
 800569a:	461d      	mov	r5, r3
 800569c:	4643      	mov	r3, r8
 800569e:	18e3      	adds	r3, r4, r3
 80056a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056a4:	464b      	mov	r3, r9
 80056a6:	eb45 0303 	adc.w	r3, r5, r3
 80056aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056be:	f04f 0200 	mov.w	r2, #0
 80056c2:	f04f 0300 	mov.w	r3, #0
 80056c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80056ca:	4629      	mov	r1, r5
 80056cc:	008b      	lsls	r3, r1, #2
 80056ce:	4621      	mov	r1, r4
 80056d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056d4:	4621      	mov	r1, r4
 80056d6:	008a      	lsls	r2, r1, #2
 80056d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80056dc:	f7fb f9de 	bl	8000a9c <__aeabi_uldivmod>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4b60      	ldr	r3, [pc, #384]	; (8005868 <UART_SetConfig+0x4e4>)
 80056e6:	fba3 2302 	umull	r2, r3, r3, r2
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	011c      	lsls	r4, r3, #4
 80056ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056f2:	2200      	movs	r2, #0
 80056f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80056fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005700:	4642      	mov	r2, r8
 8005702:	464b      	mov	r3, r9
 8005704:	1891      	adds	r1, r2, r2
 8005706:	61b9      	str	r1, [r7, #24]
 8005708:	415b      	adcs	r3, r3
 800570a:	61fb      	str	r3, [r7, #28]
 800570c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005710:	4641      	mov	r1, r8
 8005712:	1851      	adds	r1, r2, r1
 8005714:	6139      	str	r1, [r7, #16]
 8005716:	4649      	mov	r1, r9
 8005718:	414b      	adcs	r3, r1
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	f04f 0200 	mov.w	r2, #0
 8005720:	f04f 0300 	mov.w	r3, #0
 8005724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005728:	4659      	mov	r1, fp
 800572a:	00cb      	lsls	r3, r1, #3
 800572c:	4651      	mov	r1, sl
 800572e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005732:	4651      	mov	r1, sl
 8005734:	00ca      	lsls	r2, r1, #3
 8005736:	4610      	mov	r0, r2
 8005738:	4619      	mov	r1, r3
 800573a:	4603      	mov	r3, r0
 800573c:	4642      	mov	r2, r8
 800573e:	189b      	adds	r3, r3, r2
 8005740:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005744:	464b      	mov	r3, r9
 8005746:	460a      	mov	r2, r1
 8005748:	eb42 0303 	adc.w	r3, r2, r3
 800574c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	67bb      	str	r3, [r7, #120]	; 0x78
 800575a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005768:	4649      	mov	r1, r9
 800576a:	008b      	lsls	r3, r1, #2
 800576c:	4641      	mov	r1, r8
 800576e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005772:	4641      	mov	r1, r8
 8005774:	008a      	lsls	r2, r1, #2
 8005776:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800577a:	f7fb f98f 	bl	8000a9c <__aeabi_uldivmod>
 800577e:	4602      	mov	r2, r0
 8005780:	460b      	mov	r3, r1
 8005782:	4b39      	ldr	r3, [pc, #228]	; (8005868 <UART_SetConfig+0x4e4>)
 8005784:	fba3 1302 	umull	r1, r3, r3, r2
 8005788:	095b      	lsrs	r3, r3, #5
 800578a:	2164      	movs	r1, #100	; 0x64
 800578c:	fb01 f303 	mul.w	r3, r1, r3
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	3332      	adds	r3, #50	; 0x32
 8005796:	4a34      	ldr	r2, [pc, #208]	; (8005868 <UART_SetConfig+0x4e4>)
 8005798:	fba2 2303 	umull	r2, r3, r2, r3
 800579c:	095b      	lsrs	r3, r3, #5
 800579e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057a2:	441c      	add	r4, r3
 80057a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057a8:	2200      	movs	r2, #0
 80057aa:	673b      	str	r3, [r7, #112]	; 0x70
 80057ac:	677a      	str	r2, [r7, #116]	; 0x74
 80057ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80057b2:	4642      	mov	r2, r8
 80057b4:	464b      	mov	r3, r9
 80057b6:	1891      	adds	r1, r2, r2
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	415b      	adcs	r3, r3
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057c2:	4641      	mov	r1, r8
 80057c4:	1851      	adds	r1, r2, r1
 80057c6:	6039      	str	r1, [r7, #0]
 80057c8:	4649      	mov	r1, r9
 80057ca:	414b      	adcs	r3, r1
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057da:	4659      	mov	r1, fp
 80057dc:	00cb      	lsls	r3, r1, #3
 80057de:	4651      	mov	r1, sl
 80057e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057e4:	4651      	mov	r1, sl
 80057e6:	00ca      	lsls	r2, r1, #3
 80057e8:	4610      	mov	r0, r2
 80057ea:	4619      	mov	r1, r3
 80057ec:	4603      	mov	r3, r0
 80057ee:	4642      	mov	r2, r8
 80057f0:	189b      	adds	r3, r3, r2
 80057f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80057f4:	464b      	mov	r3, r9
 80057f6:	460a      	mov	r2, r1
 80057f8:	eb42 0303 	adc.w	r3, r2, r3
 80057fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	663b      	str	r3, [r7, #96]	; 0x60
 8005808:	667a      	str	r2, [r7, #100]	; 0x64
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	f04f 0300 	mov.w	r3, #0
 8005812:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005816:	4649      	mov	r1, r9
 8005818:	008b      	lsls	r3, r1, #2
 800581a:	4641      	mov	r1, r8
 800581c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005820:	4641      	mov	r1, r8
 8005822:	008a      	lsls	r2, r1, #2
 8005824:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005828:	f7fb f938 	bl	8000a9c <__aeabi_uldivmod>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <UART_SetConfig+0x4e4>)
 8005832:	fba3 1302 	umull	r1, r3, r3, r2
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	2164      	movs	r1, #100	; 0x64
 800583a:	fb01 f303 	mul.w	r3, r1, r3
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	3332      	adds	r3, #50	; 0x32
 8005844:	4a08      	ldr	r2, [pc, #32]	; (8005868 <UART_SetConfig+0x4e4>)
 8005846:	fba2 2303 	umull	r2, r3, r2, r3
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	f003 020f 	and.w	r2, r3, #15
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4422      	add	r2, r4
 8005858:	609a      	str	r2, [r3, #8]
}
 800585a:	bf00      	nop
 800585c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005860:	46bd      	mov	sp, r7
 8005862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005866:	bf00      	nop
 8005868:	51eb851f 	.word	0x51eb851f

0800586c <__errno>:
 800586c:	4b01      	ldr	r3, [pc, #4]	; (8005874 <__errno+0x8>)
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	2000000c 	.word	0x2000000c

08005878 <__libc_init_array>:
 8005878:	b570      	push	{r4, r5, r6, lr}
 800587a:	4d0d      	ldr	r5, [pc, #52]	; (80058b0 <__libc_init_array+0x38>)
 800587c:	4c0d      	ldr	r4, [pc, #52]	; (80058b4 <__libc_init_array+0x3c>)
 800587e:	1b64      	subs	r4, r4, r5
 8005880:	10a4      	asrs	r4, r4, #2
 8005882:	2600      	movs	r6, #0
 8005884:	42a6      	cmp	r6, r4
 8005886:	d109      	bne.n	800589c <__libc_init_array+0x24>
 8005888:	4d0b      	ldr	r5, [pc, #44]	; (80058b8 <__libc_init_array+0x40>)
 800588a:	4c0c      	ldr	r4, [pc, #48]	; (80058bc <__libc_init_array+0x44>)
 800588c:	f001 f940 	bl	8006b10 <_init>
 8005890:	1b64      	subs	r4, r4, r5
 8005892:	10a4      	asrs	r4, r4, #2
 8005894:	2600      	movs	r6, #0
 8005896:	42a6      	cmp	r6, r4
 8005898:	d105      	bne.n	80058a6 <__libc_init_array+0x2e>
 800589a:	bd70      	pop	{r4, r5, r6, pc}
 800589c:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a0:	4798      	blx	r3
 80058a2:	3601      	adds	r6, #1
 80058a4:	e7ee      	b.n	8005884 <__libc_init_array+0xc>
 80058a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058aa:	4798      	blx	r3
 80058ac:	3601      	adds	r6, #1
 80058ae:	e7f2      	b.n	8005896 <__libc_init_array+0x1e>
 80058b0:	08006cb8 	.word	0x08006cb8
 80058b4:	08006cb8 	.word	0x08006cb8
 80058b8:	08006cb8 	.word	0x08006cb8
 80058bc:	08006cbc 	.word	0x08006cbc

080058c0 <memset>:
 80058c0:	4402      	add	r2, r0
 80058c2:	4603      	mov	r3, r0
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d100      	bne.n	80058ca <memset+0xa>
 80058c8:	4770      	bx	lr
 80058ca:	f803 1b01 	strb.w	r1, [r3], #1
 80058ce:	e7f9      	b.n	80058c4 <memset+0x4>

080058d0 <iprintf>:
 80058d0:	b40f      	push	{r0, r1, r2, r3}
 80058d2:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <iprintf+0x2c>)
 80058d4:	b513      	push	{r0, r1, r4, lr}
 80058d6:	681c      	ldr	r4, [r3, #0]
 80058d8:	b124      	cbz	r4, 80058e4 <iprintf+0x14>
 80058da:	69a3      	ldr	r3, [r4, #24]
 80058dc:	b913      	cbnz	r3, 80058e4 <iprintf+0x14>
 80058de:	4620      	mov	r0, r4
 80058e0:	f000 fb2c 	bl	8005f3c <__sinit>
 80058e4:	ab05      	add	r3, sp, #20
 80058e6:	9a04      	ldr	r2, [sp, #16]
 80058e8:	68a1      	ldr	r1, [r4, #8]
 80058ea:	9301      	str	r3, [sp, #4]
 80058ec:	4620      	mov	r0, r4
 80058ee:	f000 fd3d 	bl	800636c <_vfiprintf_r>
 80058f2:	b002      	add	sp, #8
 80058f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058f8:	b004      	add	sp, #16
 80058fa:	4770      	bx	lr
 80058fc:	2000000c 	.word	0x2000000c

08005900 <_puts_r>:
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	460e      	mov	r6, r1
 8005904:	4605      	mov	r5, r0
 8005906:	b118      	cbz	r0, 8005910 <_puts_r+0x10>
 8005908:	6983      	ldr	r3, [r0, #24]
 800590a:	b90b      	cbnz	r3, 8005910 <_puts_r+0x10>
 800590c:	f000 fb16 	bl	8005f3c <__sinit>
 8005910:	69ab      	ldr	r3, [r5, #24]
 8005912:	68ac      	ldr	r4, [r5, #8]
 8005914:	b913      	cbnz	r3, 800591c <_puts_r+0x1c>
 8005916:	4628      	mov	r0, r5
 8005918:	f000 fb10 	bl	8005f3c <__sinit>
 800591c:	4b2c      	ldr	r3, [pc, #176]	; (80059d0 <_puts_r+0xd0>)
 800591e:	429c      	cmp	r4, r3
 8005920:	d120      	bne.n	8005964 <_puts_r+0x64>
 8005922:	686c      	ldr	r4, [r5, #4]
 8005924:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005926:	07db      	lsls	r3, r3, #31
 8005928:	d405      	bmi.n	8005936 <_puts_r+0x36>
 800592a:	89a3      	ldrh	r3, [r4, #12]
 800592c:	0598      	lsls	r0, r3, #22
 800592e:	d402      	bmi.n	8005936 <_puts_r+0x36>
 8005930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005932:	f000 fba1 	bl	8006078 <__retarget_lock_acquire_recursive>
 8005936:	89a3      	ldrh	r3, [r4, #12]
 8005938:	0719      	lsls	r1, r3, #28
 800593a:	d51d      	bpl.n	8005978 <_puts_r+0x78>
 800593c:	6923      	ldr	r3, [r4, #16]
 800593e:	b1db      	cbz	r3, 8005978 <_puts_r+0x78>
 8005940:	3e01      	subs	r6, #1
 8005942:	68a3      	ldr	r3, [r4, #8]
 8005944:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005948:	3b01      	subs	r3, #1
 800594a:	60a3      	str	r3, [r4, #8]
 800594c:	bb39      	cbnz	r1, 800599e <_puts_r+0x9e>
 800594e:	2b00      	cmp	r3, #0
 8005950:	da38      	bge.n	80059c4 <_puts_r+0xc4>
 8005952:	4622      	mov	r2, r4
 8005954:	210a      	movs	r1, #10
 8005956:	4628      	mov	r0, r5
 8005958:	f000 f916 	bl	8005b88 <__swbuf_r>
 800595c:	3001      	adds	r0, #1
 800595e:	d011      	beq.n	8005984 <_puts_r+0x84>
 8005960:	250a      	movs	r5, #10
 8005962:	e011      	b.n	8005988 <_puts_r+0x88>
 8005964:	4b1b      	ldr	r3, [pc, #108]	; (80059d4 <_puts_r+0xd4>)
 8005966:	429c      	cmp	r4, r3
 8005968:	d101      	bne.n	800596e <_puts_r+0x6e>
 800596a:	68ac      	ldr	r4, [r5, #8]
 800596c:	e7da      	b.n	8005924 <_puts_r+0x24>
 800596e:	4b1a      	ldr	r3, [pc, #104]	; (80059d8 <_puts_r+0xd8>)
 8005970:	429c      	cmp	r4, r3
 8005972:	bf08      	it	eq
 8005974:	68ec      	ldreq	r4, [r5, #12]
 8005976:	e7d5      	b.n	8005924 <_puts_r+0x24>
 8005978:	4621      	mov	r1, r4
 800597a:	4628      	mov	r0, r5
 800597c:	f000 f956 	bl	8005c2c <__swsetup_r>
 8005980:	2800      	cmp	r0, #0
 8005982:	d0dd      	beq.n	8005940 <_puts_r+0x40>
 8005984:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005988:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800598a:	07da      	lsls	r2, r3, #31
 800598c:	d405      	bmi.n	800599a <_puts_r+0x9a>
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	059b      	lsls	r3, r3, #22
 8005992:	d402      	bmi.n	800599a <_puts_r+0x9a>
 8005994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005996:	f000 fb70 	bl	800607a <__retarget_lock_release_recursive>
 800599a:	4628      	mov	r0, r5
 800599c:	bd70      	pop	{r4, r5, r6, pc}
 800599e:	2b00      	cmp	r3, #0
 80059a0:	da04      	bge.n	80059ac <_puts_r+0xac>
 80059a2:	69a2      	ldr	r2, [r4, #24]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	dc06      	bgt.n	80059b6 <_puts_r+0xb6>
 80059a8:	290a      	cmp	r1, #10
 80059aa:	d004      	beq.n	80059b6 <_puts_r+0xb6>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	6022      	str	r2, [r4, #0]
 80059b2:	7019      	strb	r1, [r3, #0]
 80059b4:	e7c5      	b.n	8005942 <_puts_r+0x42>
 80059b6:	4622      	mov	r2, r4
 80059b8:	4628      	mov	r0, r5
 80059ba:	f000 f8e5 	bl	8005b88 <__swbuf_r>
 80059be:	3001      	adds	r0, #1
 80059c0:	d1bf      	bne.n	8005942 <_puts_r+0x42>
 80059c2:	e7df      	b.n	8005984 <_puts_r+0x84>
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	250a      	movs	r5, #10
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	6022      	str	r2, [r4, #0]
 80059cc:	701d      	strb	r5, [r3, #0]
 80059ce:	e7db      	b.n	8005988 <_puts_r+0x88>
 80059d0:	08006c3c 	.word	0x08006c3c
 80059d4:	08006c5c 	.word	0x08006c5c
 80059d8:	08006c1c 	.word	0x08006c1c

080059dc <puts>:
 80059dc:	4b02      	ldr	r3, [pc, #8]	; (80059e8 <puts+0xc>)
 80059de:	4601      	mov	r1, r0
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	f7ff bf8d 	b.w	8005900 <_puts_r>
 80059e6:	bf00      	nop
 80059e8:	2000000c 	.word	0x2000000c

080059ec <setbuf>:
 80059ec:	2900      	cmp	r1, #0
 80059ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059f2:	bf0c      	ite	eq
 80059f4:	2202      	moveq	r2, #2
 80059f6:	2200      	movne	r2, #0
 80059f8:	f000 b800 	b.w	80059fc <setvbuf>

080059fc <setvbuf>:
 80059fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a00:	461d      	mov	r5, r3
 8005a02:	4b5d      	ldr	r3, [pc, #372]	; (8005b78 <setvbuf+0x17c>)
 8005a04:	681f      	ldr	r7, [r3, #0]
 8005a06:	4604      	mov	r4, r0
 8005a08:	460e      	mov	r6, r1
 8005a0a:	4690      	mov	r8, r2
 8005a0c:	b127      	cbz	r7, 8005a18 <setvbuf+0x1c>
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	b913      	cbnz	r3, 8005a18 <setvbuf+0x1c>
 8005a12:	4638      	mov	r0, r7
 8005a14:	f000 fa92 	bl	8005f3c <__sinit>
 8005a18:	4b58      	ldr	r3, [pc, #352]	; (8005b7c <setvbuf+0x180>)
 8005a1a:	429c      	cmp	r4, r3
 8005a1c:	d167      	bne.n	8005aee <setvbuf+0xf2>
 8005a1e:	687c      	ldr	r4, [r7, #4]
 8005a20:	f1b8 0f02 	cmp.w	r8, #2
 8005a24:	d006      	beq.n	8005a34 <setvbuf+0x38>
 8005a26:	f1b8 0f01 	cmp.w	r8, #1
 8005a2a:	f200 809f 	bhi.w	8005b6c <setvbuf+0x170>
 8005a2e:	2d00      	cmp	r5, #0
 8005a30:	f2c0 809c 	blt.w	8005b6c <setvbuf+0x170>
 8005a34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a36:	07db      	lsls	r3, r3, #31
 8005a38:	d405      	bmi.n	8005a46 <setvbuf+0x4a>
 8005a3a:	89a3      	ldrh	r3, [r4, #12]
 8005a3c:	0598      	lsls	r0, r3, #22
 8005a3e:	d402      	bmi.n	8005a46 <setvbuf+0x4a>
 8005a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a42:	f000 fb19 	bl	8006078 <__retarget_lock_acquire_recursive>
 8005a46:	4621      	mov	r1, r4
 8005a48:	4638      	mov	r0, r7
 8005a4a:	f000 f9e3 	bl	8005e14 <_fflush_r>
 8005a4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a50:	b141      	cbz	r1, 8005a64 <setvbuf+0x68>
 8005a52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a56:	4299      	cmp	r1, r3
 8005a58:	d002      	beq.n	8005a60 <setvbuf+0x64>
 8005a5a:	4638      	mov	r0, r7
 8005a5c:	f000 fb7c 	bl	8006158 <_free_r>
 8005a60:	2300      	movs	r3, #0
 8005a62:	6363      	str	r3, [r4, #52]	; 0x34
 8005a64:	2300      	movs	r3, #0
 8005a66:	61a3      	str	r3, [r4, #24]
 8005a68:	6063      	str	r3, [r4, #4]
 8005a6a:	89a3      	ldrh	r3, [r4, #12]
 8005a6c:	0619      	lsls	r1, r3, #24
 8005a6e:	d503      	bpl.n	8005a78 <setvbuf+0x7c>
 8005a70:	6921      	ldr	r1, [r4, #16]
 8005a72:	4638      	mov	r0, r7
 8005a74:	f000 fb70 	bl	8006158 <_free_r>
 8005a78:	89a3      	ldrh	r3, [r4, #12]
 8005a7a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005a7e:	f023 0303 	bic.w	r3, r3, #3
 8005a82:	f1b8 0f02 	cmp.w	r8, #2
 8005a86:	81a3      	strh	r3, [r4, #12]
 8005a88:	d06c      	beq.n	8005b64 <setvbuf+0x168>
 8005a8a:	ab01      	add	r3, sp, #4
 8005a8c:	466a      	mov	r2, sp
 8005a8e:	4621      	mov	r1, r4
 8005a90:	4638      	mov	r0, r7
 8005a92:	f000 faf3 	bl	800607c <__swhatbuf_r>
 8005a96:	89a3      	ldrh	r3, [r4, #12]
 8005a98:	4318      	orrs	r0, r3
 8005a9a:	81a0      	strh	r0, [r4, #12]
 8005a9c:	2d00      	cmp	r5, #0
 8005a9e:	d130      	bne.n	8005b02 <setvbuf+0x106>
 8005aa0:	9d00      	ldr	r5, [sp, #0]
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	f000 fb50 	bl	8006148 <malloc>
 8005aa8:	4606      	mov	r6, r0
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	d155      	bne.n	8005b5a <setvbuf+0x15e>
 8005aae:	f8dd 9000 	ldr.w	r9, [sp]
 8005ab2:	45a9      	cmp	r9, r5
 8005ab4:	d14a      	bne.n	8005b4c <setvbuf+0x150>
 8005ab6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005aba:	2200      	movs	r2, #0
 8005abc:	60a2      	str	r2, [r4, #8]
 8005abe:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005ac2:	6022      	str	r2, [r4, #0]
 8005ac4:	6122      	str	r2, [r4, #16]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005acc:	6162      	str	r2, [r4, #20]
 8005ace:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ad0:	f043 0302 	orr.w	r3, r3, #2
 8005ad4:	07d2      	lsls	r2, r2, #31
 8005ad6:	81a3      	strh	r3, [r4, #12]
 8005ad8:	d405      	bmi.n	8005ae6 <setvbuf+0xea>
 8005ada:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005ade:	d102      	bne.n	8005ae6 <setvbuf+0xea>
 8005ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ae2:	f000 faca 	bl	800607a <__retarget_lock_release_recursive>
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	b003      	add	sp, #12
 8005aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005aee:	4b24      	ldr	r3, [pc, #144]	; (8005b80 <setvbuf+0x184>)
 8005af0:	429c      	cmp	r4, r3
 8005af2:	d101      	bne.n	8005af8 <setvbuf+0xfc>
 8005af4:	68bc      	ldr	r4, [r7, #8]
 8005af6:	e793      	b.n	8005a20 <setvbuf+0x24>
 8005af8:	4b22      	ldr	r3, [pc, #136]	; (8005b84 <setvbuf+0x188>)
 8005afa:	429c      	cmp	r4, r3
 8005afc:	bf08      	it	eq
 8005afe:	68fc      	ldreq	r4, [r7, #12]
 8005b00:	e78e      	b.n	8005a20 <setvbuf+0x24>
 8005b02:	2e00      	cmp	r6, #0
 8005b04:	d0cd      	beq.n	8005aa2 <setvbuf+0xa6>
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	b913      	cbnz	r3, 8005b10 <setvbuf+0x114>
 8005b0a:	4638      	mov	r0, r7
 8005b0c:	f000 fa16 	bl	8005f3c <__sinit>
 8005b10:	f1b8 0f01 	cmp.w	r8, #1
 8005b14:	bf08      	it	eq
 8005b16:	89a3      	ldrheq	r3, [r4, #12]
 8005b18:	6026      	str	r6, [r4, #0]
 8005b1a:	bf04      	itt	eq
 8005b1c:	f043 0301 	orreq.w	r3, r3, #1
 8005b20:	81a3      	strheq	r3, [r4, #12]
 8005b22:	89a2      	ldrh	r2, [r4, #12]
 8005b24:	f012 0308 	ands.w	r3, r2, #8
 8005b28:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005b2c:	d01c      	beq.n	8005b68 <setvbuf+0x16c>
 8005b2e:	07d3      	lsls	r3, r2, #31
 8005b30:	bf41      	itttt	mi
 8005b32:	2300      	movmi	r3, #0
 8005b34:	426d      	negmi	r5, r5
 8005b36:	60a3      	strmi	r3, [r4, #8]
 8005b38:	61a5      	strmi	r5, [r4, #24]
 8005b3a:	bf58      	it	pl
 8005b3c:	60a5      	strpl	r5, [r4, #8]
 8005b3e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005b40:	f015 0501 	ands.w	r5, r5, #1
 8005b44:	d115      	bne.n	8005b72 <setvbuf+0x176>
 8005b46:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005b4a:	e7c8      	b.n	8005ade <setvbuf+0xe2>
 8005b4c:	4648      	mov	r0, r9
 8005b4e:	f000 fafb 	bl	8006148 <malloc>
 8005b52:	4606      	mov	r6, r0
 8005b54:	2800      	cmp	r0, #0
 8005b56:	d0ae      	beq.n	8005ab6 <setvbuf+0xba>
 8005b58:	464d      	mov	r5, r9
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b60:	81a3      	strh	r3, [r4, #12]
 8005b62:	e7d0      	b.n	8005b06 <setvbuf+0x10a>
 8005b64:	2500      	movs	r5, #0
 8005b66:	e7a8      	b.n	8005aba <setvbuf+0xbe>
 8005b68:	60a3      	str	r3, [r4, #8]
 8005b6a:	e7e8      	b.n	8005b3e <setvbuf+0x142>
 8005b6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005b70:	e7b9      	b.n	8005ae6 <setvbuf+0xea>
 8005b72:	2500      	movs	r5, #0
 8005b74:	e7b7      	b.n	8005ae6 <setvbuf+0xea>
 8005b76:	bf00      	nop
 8005b78:	2000000c 	.word	0x2000000c
 8005b7c:	08006c3c 	.word	0x08006c3c
 8005b80:	08006c5c 	.word	0x08006c5c
 8005b84:	08006c1c 	.word	0x08006c1c

08005b88 <__swbuf_r>:
 8005b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8a:	460e      	mov	r6, r1
 8005b8c:	4614      	mov	r4, r2
 8005b8e:	4605      	mov	r5, r0
 8005b90:	b118      	cbz	r0, 8005b9a <__swbuf_r+0x12>
 8005b92:	6983      	ldr	r3, [r0, #24]
 8005b94:	b90b      	cbnz	r3, 8005b9a <__swbuf_r+0x12>
 8005b96:	f000 f9d1 	bl	8005f3c <__sinit>
 8005b9a:	4b21      	ldr	r3, [pc, #132]	; (8005c20 <__swbuf_r+0x98>)
 8005b9c:	429c      	cmp	r4, r3
 8005b9e:	d12b      	bne.n	8005bf8 <__swbuf_r+0x70>
 8005ba0:	686c      	ldr	r4, [r5, #4]
 8005ba2:	69a3      	ldr	r3, [r4, #24]
 8005ba4:	60a3      	str	r3, [r4, #8]
 8005ba6:	89a3      	ldrh	r3, [r4, #12]
 8005ba8:	071a      	lsls	r2, r3, #28
 8005baa:	d52f      	bpl.n	8005c0c <__swbuf_r+0x84>
 8005bac:	6923      	ldr	r3, [r4, #16]
 8005bae:	b36b      	cbz	r3, 8005c0c <__swbuf_r+0x84>
 8005bb0:	6923      	ldr	r3, [r4, #16]
 8005bb2:	6820      	ldr	r0, [r4, #0]
 8005bb4:	1ac0      	subs	r0, r0, r3
 8005bb6:	6963      	ldr	r3, [r4, #20]
 8005bb8:	b2f6      	uxtb	r6, r6
 8005bba:	4283      	cmp	r3, r0
 8005bbc:	4637      	mov	r7, r6
 8005bbe:	dc04      	bgt.n	8005bca <__swbuf_r+0x42>
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	f000 f926 	bl	8005e14 <_fflush_r>
 8005bc8:	bb30      	cbnz	r0, 8005c18 <__swbuf_r+0x90>
 8005bca:	68a3      	ldr	r3, [r4, #8]
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	60a3      	str	r3, [r4, #8]
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	1c5a      	adds	r2, r3, #1
 8005bd4:	6022      	str	r2, [r4, #0]
 8005bd6:	701e      	strb	r6, [r3, #0]
 8005bd8:	6963      	ldr	r3, [r4, #20]
 8005bda:	3001      	adds	r0, #1
 8005bdc:	4283      	cmp	r3, r0
 8005bde:	d004      	beq.n	8005bea <__swbuf_r+0x62>
 8005be0:	89a3      	ldrh	r3, [r4, #12]
 8005be2:	07db      	lsls	r3, r3, #31
 8005be4:	d506      	bpl.n	8005bf4 <__swbuf_r+0x6c>
 8005be6:	2e0a      	cmp	r6, #10
 8005be8:	d104      	bne.n	8005bf4 <__swbuf_r+0x6c>
 8005bea:	4621      	mov	r1, r4
 8005bec:	4628      	mov	r0, r5
 8005bee:	f000 f911 	bl	8005e14 <_fflush_r>
 8005bf2:	b988      	cbnz	r0, 8005c18 <__swbuf_r+0x90>
 8005bf4:	4638      	mov	r0, r7
 8005bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <__swbuf_r+0x9c>)
 8005bfa:	429c      	cmp	r4, r3
 8005bfc:	d101      	bne.n	8005c02 <__swbuf_r+0x7a>
 8005bfe:	68ac      	ldr	r4, [r5, #8]
 8005c00:	e7cf      	b.n	8005ba2 <__swbuf_r+0x1a>
 8005c02:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <__swbuf_r+0xa0>)
 8005c04:	429c      	cmp	r4, r3
 8005c06:	bf08      	it	eq
 8005c08:	68ec      	ldreq	r4, [r5, #12]
 8005c0a:	e7ca      	b.n	8005ba2 <__swbuf_r+0x1a>
 8005c0c:	4621      	mov	r1, r4
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f000 f80c 	bl	8005c2c <__swsetup_r>
 8005c14:	2800      	cmp	r0, #0
 8005c16:	d0cb      	beq.n	8005bb0 <__swbuf_r+0x28>
 8005c18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005c1c:	e7ea      	b.n	8005bf4 <__swbuf_r+0x6c>
 8005c1e:	bf00      	nop
 8005c20:	08006c3c 	.word	0x08006c3c
 8005c24:	08006c5c 	.word	0x08006c5c
 8005c28:	08006c1c 	.word	0x08006c1c

08005c2c <__swsetup_r>:
 8005c2c:	4b32      	ldr	r3, [pc, #200]	; (8005cf8 <__swsetup_r+0xcc>)
 8005c2e:	b570      	push	{r4, r5, r6, lr}
 8005c30:	681d      	ldr	r5, [r3, #0]
 8005c32:	4606      	mov	r6, r0
 8005c34:	460c      	mov	r4, r1
 8005c36:	b125      	cbz	r5, 8005c42 <__swsetup_r+0x16>
 8005c38:	69ab      	ldr	r3, [r5, #24]
 8005c3a:	b913      	cbnz	r3, 8005c42 <__swsetup_r+0x16>
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	f000 f97d 	bl	8005f3c <__sinit>
 8005c42:	4b2e      	ldr	r3, [pc, #184]	; (8005cfc <__swsetup_r+0xd0>)
 8005c44:	429c      	cmp	r4, r3
 8005c46:	d10f      	bne.n	8005c68 <__swsetup_r+0x3c>
 8005c48:	686c      	ldr	r4, [r5, #4]
 8005c4a:	89a3      	ldrh	r3, [r4, #12]
 8005c4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c50:	0719      	lsls	r1, r3, #28
 8005c52:	d42c      	bmi.n	8005cae <__swsetup_r+0x82>
 8005c54:	06dd      	lsls	r5, r3, #27
 8005c56:	d411      	bmi.n	8005c7c <__swsetup_r+0x50>
 8005c58:	2309      	movs	r3, #9
 8005c5a:	6033      	str	r3, [r6, #0]
 8005c5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c60:	81a3      	strh	r3, [r4, #12]
 8005c62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c66:	e03e      	b.n	8005ce6 <__swsetup_r+0xba>
 8005c68:	4b25      	ldr	r3, [pc, #148]	; (8005d00 <__swsetup_r+0xd4>)
 8005c6a:	429c      	cmp	r4, r3
 8005c6c:	d101      	bne.n	8005c72 <__swsetup_r+0x46>
 8005c6e:	68ac      	ldr	r4, [r5, #8]
 8005c70:	e7eb      	b.n	8005c4a <__swsetup_r+0x1e>
 8005c72:	4b24      	ldr	r3, [pc, #144]	; (8005d04 <__swsetup_r+0xd8>)
 8005c74:	429c      	cmp	r4, r3
 8005c76:	bf08      	it	eq
 8005c78:	68ec      	ldreq	r4, [r5, #12]
 8005c7a:	e7e6      	b.n	8005c4a <__swsetup_r+0x1e>
 8005c7c:	0758      	lsls	r0, r3, #29
 8005c7e:	d512      	bpl.n	8005ca6 <__swsetup_r+0x7a>
 8005c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c82:	b141      	cbz	r1, 8005c96 <__swsetup_r+0x6a>
 8005c84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c88:	4299      	cmp	r1, r3
 8005c8a:	d002      	beq.n	8005c92 <__swsetup_r+0x66>
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	f000 fa63 	bl	8006158 <_free_r>
 8005c92:	2300      	movs	r3, #0
 8005c94:	6363      	str	r3, [r4, #52]	; 0x34
 8005c96:	89a3      	ldrh	r3, [r4, #12]
 8005c98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c9c:	81a3      	strh	r3, [r4, #12]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	6063      	str	r3, [r4, #4]
 8005ca2:	6923      	ldr	r3, [r4, #16]
 8005ca4:	6023      	str	r3, [r4, #0]
 8005ca6:	89a3      	ldrh	r3, [r4, #12]
 8005ca8:	f043 0308 	orr.w	r3, r3, #8
 8005cac:	81a3      	strh	r3, [r4, #12]
 8005cae:	6923      	ldr	r3, [r4, #16]
 8005cb0:	b94b      	cbnz	r3, 8005cc6 <__swsetup_r+0x9a>
 8005cb2:	89a3      	ldrh	r3, [r4, #12]
 8005cb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cbc:	d003      	beq.n	8005cc6 <__swsetup_r+0x9a>
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	f000 fa01 	bl	80060c8 <__smakebuf_r>
 8005cc6:	89a0      	ldrh	r0, [r4, #12]
 8005cc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ccc:	f010 0301 	ands.w	r3, r0, #1
 8005cd0:	d00a      	beq.n	8005ce8 <__swsetup_r+0xbc>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60a3      	str	r3, [r4, #8]
 8005cd6:	6963      	ldr	r3, [r4, #20]
 8005cd8:	425b      	negs	r3, r3
 8005cda:	61a3      	str	r3, [r4, #24]
 8005cdc:	6923      	ldr	r3, [r4, #16]
 8005cde:	b943      	cbnz	r3, 8005cf2 <__swsetup_r+0xc6>
 8005ce0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ce4:	d1ba      	bne.n	8005c5c <__swsetup_r+0x30>
 8005ce6:	bd70      	pop	{r4, r5, r6, pc}
 8005ce8:	0781      	lsls	r1, r0, #30
 8005cea:	bf58      	it	pl
 8005cec:	6963      	ldrpl	r3, [r4, #20]
 8005cee:	60a3      	str	r3, [r4, #8]
 8005cf0:	e7f4      	b.n	8005cdc <__swsetup_r+0xb0>
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	e7f7      	b.n	8005ce6 <__swsetup_r+0xba>
 8005cf6:	bf00      	nop
 8005cf8:	2000000c 	.word	0x2000000c
 8005cfc:	08006c3c 	.word	0x08006c3c
 8005d00:	08006c5c 	.word	0x08006c5c
 8005d04:	08006c1c 	.word	0x08006c1c

08005d08 <__sflush_r>:
 8005d08:	898a      	ldrh	r2, [r1, #12]
 8005d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d0e:	4605      	mov	r5, r0
 8005d10:	0710      	lsls	r0, r2, #28
 8005d12:	460c      	mov	r4, r1
 8005d14:	d458      	bmi.n	8005dc8 <__sflush_r+0xc0>
 8005d16:	684b      	ldr	r3, [r1, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	dc05      	bgt.n	8005d28 <__sflush_r+0x20>
 8005d1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	dc02      	bgt.n	8005d28 <__sflush_r+0x20>
 8005d22:	2000      	movs	r0, #0
 8005d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d2a:	2e00      	cmp	r6, #0
 8005d2c:	d0f9      	beq.n	8005d22 <__sflush_r+0x1a>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d34:	682f      	ldr	r7, [r5, #0]
 8005d36:	602b      	str	r3, [r5, #0]
 8005d38:	d032      	beq.n	8005da0 <__sflush_r+0x98>
 8005d3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	075a      	lsls	r2, r3, #29
 8005d40:	d505      	bpl.n	8005d4e <__sflush_r+0x46>
 8005d42:	6863      	ldr	r3, [r4, #4]
 8005d44:	1ac0      	subs	r0, r0, r3
 8005d46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d48:	b10b      	cbz	r3, 8005d4e <__sflush_r+0x46>
 8005d4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d4c:	1ac0      	subs	r0, r0, r3
 8005d4e:	2300      	movs	r3, #0
 8005d50:	4602      	mov	r2, r0
 8005d52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d54:	6a21      	ldr	r1, [r4, #32]
 8005d56:	4628      	mov	r0, r5
 8005d58:	47b0      	blx	r6
 8005d5a:	1c43      	adds	r3, r0, #1
 8005d5c:	89a3      	ldrh	r3, [r4, #12]
 8005d5e:	d106      	bne.n	8005d6e <__sflush_r+0x66>
 8005d60:	6829      	ldr	r1, [r5, #0]
 8005d62:	291d      	cmp	r1, #29
 8005d64:	d82c      	bhi.n	8005dc0 <__sflush_r+0xb8>
 8005d66:	4a2a      	ldr	r2, [pc, #168]	; (8005e10 <__sflush_r+0x108>)
 8005d68:	40ca      	lsrs	r2, r1
 8005d6a:	07d6      	lsls	r6, r2, #31
 8005d6c:	d528      	bpl.n	8005dc0 <__sflush_r+0xb8>
 8005d6e:	2200      	movs	r2, #0
 8005d70:	6062      	str	r2, [r4, #4]
 8005d72:	04d9      	lsls	r1, r3, #19
 8005d74:	6922      	ldr	r2, [r4, #16]
 8005d76:	6022      	str	r2, [r4, #0]
 8005d78:	d504      	bpl.n	8005d84 <__sflush_r+0x7c>
 8005d7a:	1c42      	adds	r2, r0, #1
 8005d7c:	d101      	bne.n	8005d82 <__sflush_r+0x7a>
 8005d7e:	682b      	ldr	r3, [r5, #0]
 8005d80:	b903      	cbnz	r3, 8005d84 <__sflush_r+0x7c>
 8005d82:	6560      	str	r0, [r4, #84]	; 0x54
 8005d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d86:	602f      	str	r7, [r5, #0]
 8005d88:	2900      	cmp	r1, #0
 8005d8a:	d0ca      	beq.n	8005d22 <__sflush_r+0x1a>
 8005d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d90:	4299      	cmp	r1, r3
 8005d92:	d002      	beq.n	8005d9a <__sflush_r+0x92>
 8005d94:	4628      	mov	r0, r5
 8005d96:	f000 f9df 	bl	8006158 <_free_r>
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	6360      	str	r0, [r4, #52]	; 0x34
 8005d9e:	e7c1      	b.n	8005d24 <__sflush_r+0x1c>
 8005da0:	6a21      	ldr	r1, [r4, #32]
 8005da2:	2301      	movs	r3, #1
 8005da4:	4628      	mov	r0, r5
 8005da6:	47b0      	blx	r6
 8005da8:	1c41      	adds	r1, r0, #1
 8005daa:	d1c7      	bne.n	8005d3c <__sflush_r+0x34>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0c4      	beq.n	8005d3c <__sflush_r+0x34>
 8005db2:	2b1d      	cmp	r3, #29
 8005db4:	d001      	beq.n	8005dba <__sflush_r+0xb2>
 8005db6:	2b16      	cmp	r3, #22
 8005db8:	d101      	bne.n	8005dbe <__sflush_r+0xb6>
 8005dba:	602f      	str	r7, [r5, #0]
 8005dbc:	e7b1      	b.n	8005d22 <__sflush_r+0x1a>
 8005dbe:	89a3      	ldrh	r3, [r4, #12]
 8005dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dc4:	81a3      	strh	r3, [r4, #12]
 8005dc6:	e7ad      	b.n	8005d24 <__sflush_r+0x1c>
 8005dc8:	690f      	ldr	r7, [r1, #16]
 8005dca:	2f00      	cmp	r7, #0
 8005dcc:	d0a9      	beq.n	8005d22 <__sflush_r+0x1a>
 8005dce:	0793      	lsls	r3, r2, #30
 8005dd0:	680e      	ldr	r6, [r1, #0]
 8005dd2:	bf08      	it	eq
 8005dd4:	694b      	ldreq	r3, [r1, #20]
 8005dd6:	600f      	str	r7, [r1, #0]
 8005dd8:	bf18      	it	ne
 8005dda:	2300      	movne	r3, #0
 8005ddc:	eba6 0807 	sub.w	r8, r6, r7
 8005de0:	608b      	str	r3, [r1, #8]
 8005de2:	f1b8 0f00 	cmp.w	r8, #0
 8005de6:	dd9c      	ble.n	8005d22 <__sflush_r+0x1a>
 8005de8:	6a21      	ldr	r1, [r4, #32]
 8005dea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005dec:	4643      	mov	r3, r8
 8005dee:	463a      	mov	r2, r7
 8005df0:	4628      	mov	r0, r5
 8005df2:	47b0      	blx	r6
 8005df4:	2800      	cmp	r0, #0
 8005df6:	dc06      	bgt.n	8005e06 <__sflush_r+0xfe>
 8005df8:	89a3      	ldrh	r3, [r4, #12]
 8005dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dfe:	81a3      	strh	r3, [r4, #12]
 8005e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e04:	e78e      	b.n	8005d24 <__sflush_r+0x1c>
 8005e06:	4407      	add	r7, r0
 8005e08:	eba8 0800 	sub.w	r8, r8, r0
 8005e0c:	e7e9      	b.n	8005de2 <__sflush_r+0xda>
 8005e0e:	bf00      	nop
 8005e10:	20400001 	.word	0x20400001

08005e14 <_fflush_r>:
 8005e14:	b538      	push	{r3, r4, r5, lr}
 8005e16:	690b      	ldr	r3, [r1, #16]
 8005e18:	4605      	mov	r5, r0
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	b913      	cbnz	r3, 8005e24 <_fflush_r+0x10>
 8005e1e:	2500      	movs	r5, #0
 8005e20:	4628      	mov	r0, r5
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	b118      	cbz	r0, 8005e2e <_fflush_r+0x1a>
 8005e26:	6983      	ldr	r3, [r0, #24]
 8005e28:	b90b      	cbnz	r3, 8005e2e <_fflush_r+0x1a>
 8005e2a:	f000 f887 	bl	8005f3c <__sinit>
 8005e2e:	4b14      	ldr	r3, [pc, #80]	; (8005e80 <_fflush_r+0x6c>)
 8005e30:	429c      	cmp	r4, r3
 8005e32:	d11b      	bne.n	8005e6c <_fflush_r+0x58>
 8005e34:	686c      	ldr	r4, [r5, #4]
 8005e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0ef      	beq.n	8005e1e <_fflush_r+0xa>
 8005e3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e40:	07d0      	lsls	r0, r2, #31
 8005e42:	d404      	bmi.n	8005e4e <_fflush_r+0x3a>
 8005e44:	0599      	lsls	r1, r3, #22
 8005e46:	d402      	bmi.n	8005e4e <_fflush_r+0x3a>
 8005e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e4a:	f000 f915 	bl	8006078 <__retarget_lock_acquire_recursive>
 8005e4e:	4628      	mov	r0, r5
 8005e50:	4621      	mov	r1, r4
 8005e52:	f7ff ff59 	bl	8005d08 <__sflush_r>
 8005e56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e58:	07da      	lsls	r2, r3, #31
 8005e5a:	4605      	mov	r5, r0
 8005e5c:	d4e0      	bmi.n	8005e20 <_fflush_r+0xc>
 8005e5e:	89a3      	ldrh	r3, [r4, #12]
 8005e60:	059b      	lsls	r3, r3, #22
 8005e62:	d4dd      	bmi.n	8005e20 <_fflush_r+0xc>
 8005e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e66:	f000 f908 	bl	800607a <__retarget_lock_release_recursive>
 8005e6a:	e7d9      	b.n	8005e20 <_fflush_r+0xc>
 8005e6c:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <_fflush_r+0x70>)
 8005e6e:	429c      	cmp	r4, r3
 8005e70:	d101      	bne.n	8005e76 <_fflush_r+0x62>
 8005e72:	68ac      	ldr	r4, [r5, #8]
 8005e74:	e7df      	b.n	8005e36 <_fflush_r+0x22>
 8005e76:	4b04      	ldr	r3, [pc, #16]	; (8005e88 <_fflush_r+0x74>)
 8005e78:	429c      	cmp	r4, r3
 8005e7a:	bf08      	it	eq
 8005e7c:	68ec      	ldreq	r4, [r5, #12]
 8005e7e:	e7da      	b.n	8005e36 <_fflush_r+0x22>
 8005e80:	08006c3c 	.word	0x08006c3c
 8005e84:	08006c5c 	.word	0x08006c5c
 8005e88:	08006c1c 	.word	0x08006c1c

08005e8c <std>:
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	b510      	push	{r4, lr}
 8005e90:	4604      	mov	r4, r0
 8005e92:	e9c0 3300 	strd	r3, r3, [r0]
 8005e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e9a:	6083      	str	r3, [r0, #8]
 8005e9c:	8181      	strh	r1, [r0, #12]
 8005e9e:	6643      	str	r3, [r0, #100]	; 0x64
 8005ea0:	81c2      	strh	r2, [r0, #14]
 8005ea2:	6183      	str	r3, [r0, #24]
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	2208      	movs	r2, #8
 8005ea8:	305c      	adds	r0, #92	; 0x5c
 8005eaa:	f7ff fd09 	bl	80058c0 <memset>
 8005eae:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <std+0x38>)
 8005eb0:	6263      	str	r3, [r4, #36]	; 0x24
 8005eb2:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <std+0x3c>)
 8005eb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005eb6:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <std+0x40>)
 8005eb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005eba:	4b05      	ldr	r3, [pc, #20]	; (8005ed0 <std+0x44>)
 8005ebc:	6224      	str	r4, [r4, #32]
 8005ebe:	6323      	str	r3, [r4, #48]	; 0x30
 8005ec0:	bd10      	pop	{r4, pc}
 8005ec2:	bf00      	nop
 8005ec4:	08006915 	.word	0x08006915
 8005ec8:	08006937 	.word	0x08006937
 8005ecc:	0800696f 	.word	0x0800696f
 8005ed0:	08006993 	.word	0x08006993

08005ed4 <_cleanup_r>:
 8005ed4:	4901      	ldr	r1, [pc, #4]	; (8005edc <_cleanup_r+0x8>)
 8005ed6:	f000 b8af 	b.w	8006038 <_fwalk_reent>
 8005eda:	bf00      	nop
 8005edc:	08005e15 	.word	0x08005e15

08005ee0 <__sfmoreglue>:
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	2268      	movs	r2, #104	; 0x68
 8005ee4:	1e4d      	subs	r5, r1, #1
 8005ee6:	4355      	muls	r5, r2
 8005ee8:	460e      	mov	r6, r1
 8005eea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005eee:	f000 f99f 	bl	8006230 <_malloc_r>
 8005ef2:	4604      	mov	r4, r0
 8005ef4:	b140      	cbz	r0, 8005f08 <__sfmoreglue+0x28>
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	e9c0 1600 	strd	r1, r6, [r0]
 8005efc:	300c      	adds	r0, #12
 8005efe:	60a0      	str	r0, [r4, #8]
 8005f00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f04:	f7ff fcdc 	bl	80058c0 <memset>
 8005f08:	4620      	mov	r0, r4
 8005f0a:	bd70      	pop	{r4, r5, r6, pc}

08005f0c <__sfp_lock_acquire>:
 8005f0c:	4801      	ldr	r0, [pc, #4]	; (8005f14 <__sfp_lock_acquire+0x8>)
 8005f0e:	f000 b8b3 	b.w	8006078 <__retarget_lock_acquire_recursive>
 8005f12:	bf00      	nop
 8005f14:	2000025d 	.word	0x2000025d

08005f18 <__sfp_lock_release>:
 8005f18:	4801      	ldr	r0, [pc, #4]	; (8005f20 <__sfp_lock_release+0x8>)
 8005f1a:	f000 b8ae 	b.w	800607a <__retarget_lock_release_recursive>
 8005f1e:	bf00      	nop
 8005f20:	2000025d 	.word	0x2000025d

08005f24 <__sinit_lock_acquire>:
 8005f24:	4801      	ldr	r0, [pc, #4]	; (8005f2c <__sinit_lock_acquire+0x8>)
 8005f26:	f000 b8a7 	b.w	8006078 <__retarget_lock_acquire_recursive>
 8005f2a:	bf00      	nop
 8005f2c:	2000025e 	.word	0x2000025e

08005f30 <__sinit_lock_release>:
 8005f30:	4801      	ldr	r0, [pc, #4]	; (8005f38 <__sinit_lock_release+0x8>)
 8005f32:	f000 b8a2 	b.w	800607a <__retarget_lock_release_recursive>
 8005f36:	bf00      	nop
 8005f38:	2000025e 	.word	0x2000025e

08005f3c <__sinit>:
 8005f3c:	b510      	push	{r4, lr}
 8005f3e:	4604      	mov	r4, r0
 8005f40:	f7ff fff0 	bl	8005f24 <__sinit_lock_acquire>
 8005f44:	69a3      	ldr	r3, [r4, #24]
 8005f46:	b11b      	cbz	r3, 8005f50 <__sinit+0x14>
 8005f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f4c:	f7ff bff0 	b.w	8005f30 <__sinit_lock_release>
 8005f50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f54:	6523      	str	r3, [r4, #80]	; 0x50
 8005f56:	4b13      	ldr	r3, [pc, #76]	; (8005fa4 <__sinit+0x68>)
 8005f58:	4a13      	ldr	r2, [pc, #76]	; (8005fa8 <__sinit+0x6c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f5e:	42a3      	cmp	r3, r4
 8005f60:	bf04      	itt	eq
 8005f62:	2301      	moveq	r3, #1
 8005f64:	61a3      	streq	r3, [r4, #24]
 8005f66:	4620      	mov	r0, r4
 8005f68:	f000 f820 	bl	8005fac <__sfp>
 8005f6c:	6060      	str	r0, [r4, #4]
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f000 f81c 	bl	8005fac <__sfp>
 8005f74:	60a0      	str	r0, [r4, #8]
 8005f76:	4620      	mov	r0, r4
 8005f78:	f000 f818 	bl	8005fac <__sfp>
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	60e0      	str	r0, [r4, #12]
 8005f80:	2104      	movs	r1, #4
 8005f82:	6860      	ldr	r0, [r4, #4]
 8005f84:	f7ff ff82 	bl	8005e8c <std>
 8005f88:	68a0      	ldr	r0, [r4, #8]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	2109      	movs	r1, #9
 8005f8e:	f7ff ff7d 	bl	8005e8c <std>
 8005f92:	68e0      	ldr	r0, [r4, #12]
 8005f94:	2202      	movs	r2, #2
 8005f96:	2112      	movs	r1, #18
 8005f98:	f7ff ff78 	bl	8005e8c <std>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	61a3      	str	r3, [r4, #24]
 8005fa0:	e7d2      	b.n	8005f48 <__sinit+0xc>
 8005fa2:	bf00      	nop
 8005fa4:	08006c18 	.word	0x08006c18
 8005fa8:	08005ed5 	.word	0x08005ed5

08005fac <__sfp>:
 8005fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fae:	4607      	mov	r7, r0
 8005fb0:	f7ff ffac 	bl	8005f0c <__sfp_lock_acquire>
 8005fb4:	4b1e      	ldr	r3, [pc, #120]	; (8006030 <__sfp+0x84>)
 8005fb6:	681e      	ldr	r6, [r3, #0]
 8005fb8:	69b3      	ldr	r3, [r6, #24]
 8005fba:	b913      	cbnz	r3, 8005fc2 <__sfp+0x16>
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	f7ff ffbd 	bl	8005f3c <__sinit>
 8005fc2:	3648      	adds	r6, #72	; 0x48
 8005fc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	d503      	bpl.n	8005fd4 <__sfp+0x28>
 8005fcc:	6833      	ldr	r3, [r6, #0]
 8005fce:	b30b      	cbz	r3, 8006014 <__sfp+0x68>
 8005fd0:	6836      	ldr	r6, [r6, #0]
 8005fd2:	e7f7      	b.n	8005fc4 <__sfp+0x18>
 8005fd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005fd8:	b9d5      	cbnz	r5, 8006010 <__sfp+0x64>
 8005fda:	4b16      	ldr	r3, [pc, #88]	; (8006034 <__sfp+0x88>)
 8005fdc:	60e3      	str	r3, [r4, #12]
 8005fde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fe2:	6665      	str	r5, [r4, #100]	; 0x64
 8005fe4:	f000 f847 	bl	8006076 <__retarget_lock_init_recursive>
 8005fe8:	f7ff ff96 	bl	8005f18 <__sfp_lock_release>
 8005fec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ff0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ff4:	6025      	str	r5, [r4, #0]
 8005ff6:	61a5      	str	r5, [r4, #24]
 8005ff8:	2208      	movs	r2, #8
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006000:	f7ff fc5e 	bl	80058c0 <memset>
 8006004:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006008:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800600c:	4620      	mov	r0, r4
 800600e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006010:	3468      	adds	r4, #104	; 0x68
 8006012:	e7d9      	b.n	8005fc8 <__sfp+0x1c>
 8006014:	2104      	movs	r1, #4
 8006016:	4638      	mov	r0, r7
 8006018:	f7ff ff62 	bl	8005ee0 <__sfmoreglue>
 800601c:	4604      	mov	r4, r0
 800601e:	6030      	str	r0, [r6, #0]
 8006020:	2800      	cmp	r0, #0
 8006022:	d1d5      	bne.n	8005fd0 <__sfp+0x24>
 8006024:	f7ff ff78 	bl	8005f18 <__sfp_lock_release>
 8006028:	230c      	movs	r3, #12
 800602a:	603b      	str	r3, [r7, #0]
 800602c:	e7ee      	b.n	800600c <__sfp+0x60>
 800602e:	bf00      	nop
 8006030:	08006c18 	.word	0x08006c18
 8006034:	ffff0001 	.word	0xffff0001

08006038 <_fwalk_reent>:
 8006038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800603c:	4606      	mov	r6, r0
 800603e:	4688      	mov	r8, r1
 8006040:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006044:	2700      	movs	r7, #0
 8006046:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800604a:	f1b9 0901 	subs.w	r9, r9, #1
 800604e:	d505      	bpl.n	800605c <_fwalk_reent+0x24>
 8006050:	6824      	ldr	r4, [r4, #0]
 8006052:	2c00      	cmp	r4, #0
 8006054:	d1f7      	bne.n	8006046 <_fwalk_reent+0xe>
 8006056:	4638      	mov	r0, r7
 8006058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800605c:	89ab      	ldrh	r3, [r5, #12]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d907      	bls.n	8006072 <_fwalk_reent+0x3a>
 8006062:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006066:	3301      	adds	r3, #1
 8006068:	d003      	beq.n	8006072 <_fwalk_reent+0x3a>
 800606a:	4629      	mov	r1, r5
 800606c:	4630      	mov	r0, r6
 800606e:	47c0      	blx	r8
 8006070:	4307      	orrs	r7, r0
 8006072:	3568      	adds	r5, #104	; 0x68
 8006074:	e7e9      	b.n	800604a <_fwalk_reent+0x12>

08006076 <__retarget_lock_init_recursive>:
 8006076:	4770      	bx	lr

08006078 <__retarget_lock_acquire_recursive>:
 8006078:	4770      	bx	lr

0800607a <__retarget_lock_release_recursive>:
 800607a:	4770      	bx	lr

0800607c <__swhatbuf_r>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	460e      	mov	r6, r1
 8006080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006084:	2900      	cmp	r1, #0
 8006086:	b096      	sub	sp, #88	; 0x58
 8006088:	4614      	mov	r4, r2
 800608a:	461d      	mov	r5, r3
 800608c:	da08      	bge.n	80060a0 <__swhatbuf_r+0x24>
 800608e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	602a      	str	r2, [r5, #0]
 8006096:	061a      	lsls	r2, r3, #24
 8006098:	d410      	bmi.n	80060bc <__swhatbuf_r+0x40>
 800609a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800609e:	e00e      	b.n	80060be <__swhatbuf_r+0x42>
 80060a0:	466a      	mov	r2, sp
 80060a2:	f000 fc9d 	bl	80069e0 <_fstat_r>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	dbf1      	blt.n	800608e <__swhatbuf_r+0x12>
 80060aa:	9a01      	ldr	r2, [sp, #4]
 80060ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80060b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80060b4:	425a      	negs	r2, r3
 80060b6:	415a      	adcs	r2, r3
 80060b8:	602a      	str	r2, [r5, #0]
 80060ba:	e7ee      	b.n	800609a <__swhatbuf_r+0x1e>
 80060bc:	2340      	movs	r3, #64	; 0x40
 80060be:	2000      	movs	r0, #0
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	b016      	add	sp, #88	; 0x58
 80060c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080060c8 <__smakebuf_r>:
 80060c8:	898b      	ldrh	r3, [r1, #12]
 80060ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060cc:	079d      	lsls	r5, r3, #30
 80060ce:	4606      	mov	r6, r0
 80060d0:	460c      	mov	r4, r1
 80060d2:	d507      	bpl.n	80060e4 <__smakebuf_r+0x1c>
 80060d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060d8:	6023      	str	r3, [r4, #0]
 80060da:	6123      	str	r3, [r4, #16]
 80060dc:	2301      	movs	r3, #1
 80060de:	6163      	str	r3, [r4, #20]
 80060e0:	b002      	add	sp, #8
 80060e2:	bd70      	pop	{r4, r5, r6, pc}
 80060e4:	ab01      	add	r3, sp, #4
 80060e6:	466a      	mov	r2, sp
 80060e8:	f7ff ffc8 	bl	800607c <__swhatbuf_r>
 80060ec:	9900      	ldr	r1, [sp, #0]
 80060ee:	4605      	mov	r5, r0
 80060f0:	4630      	mov	r0, r6
 80060f2:	f000 f89d 	bl	8006230 <_malloc_r>
 80060f6:	b948      	cbnz	r0, 800610c <__smakebuf_r+0x44>
 80060f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060fc:	059a      	lsls	r2, r3, #22
 80060fe:	d4ef      	bmi.n	80060e0 <__smakebuf_r+0x18>
 8006100:	f023 0303 	bic.w	r3, r3, #3
 8006104:	f043 0302 	orr.w	r3, r3, #2
 8006108:	81a3      	strh	r3, [r4, #12]
 800610a:	e7e3      	b.n	80060d4 <__smakebuf_r+0xc>
 800610c:	4b0d      	ldr	r3, [pc, #52]	; (8006144 <__smakebuf_r+0x7c>)
 800610e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	6020      	str	r0, [r4, #0]
 8006114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006118:	81a3      	strh	r3, [r4, #12]
 800611a:	9b00      	ldr	r3, [sp, #0]
 800611c:	6163      	str	r3, [r4, #20]
 800611e:	9b01      	ldr	r3, [sp, #4]
 8006120:	6120      	str	r0, [r4, #16]
 8006122:	b15b      	cbz	r3, 800613c <__smakebuf_r+0x74>
 8006124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006128:	4630      	mov	r0, r6
 800612a:	f000 fc6b 	bl	8006a04 <_isatty_r>
 800612e:	b128      	cbz	r0, 800613c <__smakebuf_r+0x74>
 8006130:	89a3      	ldrh	r3, [r4, #12]
 8006132:	f023 0303 	bic.w	r3, r3, #3
 8006136:	f043 0301 	orr.w	r3, r3, #1
 800613a:	81a3      	strh	r3, [r4, #12]
 800613c:	89a0      	ldrh	r0, [r4, #12]
 800613e:	4305      	orrs	r5, r0
 8006140:	81a5      	strh	r5, [r4, #12]
 8006142:	e7cd      	b.n	80060e0 <__smakebuf_r+0x18>
 8006144:	08005ed5 	.word	0x08005ed5

08006148 <malloc>:
 8006148:	4b02      	ldr	r3, [pc, #8]	; (8006154 <malloc+0xc>)
 800614a:	4601      	mov	r1, r0
 800614c:	6818      	ldr	r0, [r3, #0]
 800614e:	f000 b86f 	b.w	8006230 <_malloc_r>
 8006152:	bf00      	nop
 8006154:	2000000c 	.word	0x2000000c

08006158 <_free_r>:
 8006158:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800615a:	2900      	cmp	r1, #0
 800615c:	d044      	beq.n	80061e8 <_free_r+0x90>
 800615e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006162:	9001      	str	r0, [sp, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	f1a1 0404 	sub.w	r4, r1, #4
 800616a:	bfb8      	it	lt
 800616c:	18e4      	addlt	r4, r4, r3
 800616e:	f000 fc6b 	bl	8006a48 <__malloc_lock>
 8006172:	4a1e      	ldr	r2, [pc, #120]	; (80061ec <_free_r+0x94>)
 8006174:	9801      	ldr	r0, [sp, #4]
 8006176:	6813      	ldr	r3, [r2, #0]
 8006178:	b933      	cbnz	r3, 8006188 <_free_r+0x30>
 800617a:	6063      	str	r3, [r4, #4]
 800617c:	6014      	str	r4, [r2, #0]
 800617e:	b003      	add	sp, #12
 8006180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006184:	f000 bc66 	b.w	8006a54 <__malloc_unlock>
 8006188:	42a3      	cmp	r3, r4
 800618a:	d908      	bls.n	800619e <_free_r+0x46>
 800618c:	6825      	ldr	r5, [r4, #0]
 800618e:	1961      	adds	r1, r4, r5
 8006190:	428b      	cmp	r3, r1
 8006192:	bf01      	itttt	eq
 8006194:	6819      	ldreq	r1, [r3, #0]
 8006196:	685b      	ldreq	r3, [r3, #4]
 8006198:	1949      	addeq	r1, r1, r5
 800619a:	6021      	streq	r1, [r4, #0]
 800619c:	e7ed      	b.n	800617a <_free_r+0x22>
 800619e:	461a      	mov	r2, r3
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	b10b      	cbz	r3, 80061a8 <_free_r+0x50>
 80061a4:	42a3      	cmp	r3, r4
 80061a6:	d9fa      	bls.n	800619e <_free_r+0x46>
 80061a8:	6811      	ldr	r1, [r2, #0]
 80061aa:	1855      	adds	r5, r2, r1
 80061ac:	42a5      	cmp	r5, r4
 80061ae:	d10b      	bne.n	80061c8 <_free_r+0x70>
 80061b0:	6824      	ldr	r4, [r4, #0]
 80061b2:	4421      	add	r1, r4
 80061b4:	1854      	adds	r4, r2, r1
 80061b6:	42a3      	cmp	r3, r4
 80061b8:	6011      	str	r1, [r2, #0]
 80061ba:	d1e0      	bne.n	800617e <_free_r+0x26>
 80061bc:	681c      	ldr	r4, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	6053      	str	r3, [r2, #4]
 80061c2:	4421      	add	r1, r4
 80061c4:	6011      	str	r1, [r2, #0]
 80061c6:	e7da      	b.n	800617e <_free_r+0x26>
 80061c8:	d902      	bls.n	80061d0 <_free_r+0x78>
 80061ca:	230c      	movs	r3, #12
 80061cc:	6003      	str	r3, [r0, #0]
 80061ce:	e7d6      	b.n	800617e <_free_r+0x26>
 80061d0:	6825      	ldr	r5, [r4, #0]
 80061d2:	1961      	adds	r1, r4, r5
 80061d4:	428b      	cmp	r3, r1
 80061d6:	bf04      	itt	eq
 80061d8:	6819      	ldreq	r1, [r3, #0]
 80061da:	685b      	ldreq	r3, [r3, #4]
 80061dc:	6063      	str	r3, [r4, #4]
 80061de:	bf04      	itt	eq
 80061e0:	1949      	addeq	r1, r1, r5
 80061e2:	6021      	streq	r1, [r4, #0]
 80061e4:	6054      	str	r4, [r2, #4]
 80061e6:	e7ca      	b.n	800617e <_free_r+0x26>
 80061e8:	b003      	add	sp, #12
 80061ea:	bd30      	pop	{r4, r5, pc}
 80061ec:	20000260 	.word	0x20000260

080061f0 <sbrk_aligned>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	4e0e      	ldr	r6, [pc, #56]	; (800622c <sbrk_aligned+0x3c>)
 80061f4:	460c      	mov	r4, r1
 80061f6:	6831      	ldr	r1, [r6, #0]
 80061f8:	4605      	mov	r5, r0
 80061fa:	b911      	cbnz	r1, 8006202 <sbrk_aligned+0x12>
 80061fc:	f000 fb7a 	bl	80068f4 <_sbrk_r>
 8006200:	6030      	str	r0, [r6, #0]
 8006202:	4621      	mov	r1, r4
 8006204:	4628      	mov	r0, r5
 8006206:	f000 fb75 	bl	80068f4 <_sbrk_r>
 800620a:	1c43      	adds	r3, r0, #1
 800620c:	d00a      	beq.n	8006224 <sbrk_aligned+0x34>
 800620e:	1cc4      	adds	r4, r0, #3
 8006210:	f024 0403 	bic.w	r4, r4, #3
 8006214:	42a0      	cmp	r0, r4
 8006216:	d007      	beq.n	8006228 <sbrk_aligned+0x38>
 8006218:	1a21      	subs	r1, r4, r0
 800621a:	4628      	mov	r0, r5
 800621c:	f000 fb6a 	bl	80068f4 <_sbrk_r>
 8006220:	3001      	adds	r0, #1
 8006222:	d101      	bne.n	8006228 <sbrk_aligned+0x38>
 8006224:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006228:	4620      	mov	r0, r4
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	20000264 	.word	0x20000264

08006230 <_malloc_r>:
 8006230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006234:	1ccd      	adds	r5, r1, #3
 8006236:	f025 0503 	bic.w	r5, r5, #3
 800623a:	3508      	adds	r5, #8
 800623c:	2d0c      	cmp	r5, #12
 800623e:	bf38      	it	cc
 8006240:	250c      	movcc	r5, #12
 8006242:	2d00      	cmp	r5, #0
 8006244:	4607      	mov	r7, r0
 8006246:	db01      	blt.n	800624c <_malloc_r+0x1c>
 8006248:	42a9      	cmp	r1, r5
 800624a:	d905      	bls.n	8006258 <_malloc_r+0x28>
 800624c:	230c      	movs	r3, #12
 800624e:	603b      	str	r3, [r7, #0]
 8006250:	2600      	movs	r6, #0
 8006252:	4630      	mov	r0, r6
 8006254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006258:	4e2e      	ldr	r6, [pc, #184]	; (8006314 <_malloc_r+0xe4>)
 800625a:	f000 fbf5 	bl	8006a48 <__malloc_lock>
 800625e:	6833      	ldr	r3, [r6, #0]
 8006260:	461c      	mov	r4, r3
 8006262:	bb34      	cbnz	r4, 80062b2 <_malloc_r+0x82>
 8006264:	4629      	mov	r1, r5
 8006266:	4638      	mov	r0, r7
 8006268:	f7ff ffc2 	bl	80061f0 <sbrk_aligned>
 800626c:	1c43      	adds	r3, r0, #1
 800626e:	4604      	mov	r4, r0
 8006270:	d14d      	bne.n	800630e <_malloc_r+0xde>
 8006272:	6834      	ldr	r4, [r6, #0]
 8006274:	4626      	mov	r6, r4
 8006276:	2e00      	cmp	r6, #0
 8006278:	d140      	bne.n	80062fc <_malloc_r+0xcc>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	4631      	mov	r1, r6
 800627e:	4638      	mov	r0, r7
 8006280:	eb04 0803 	add.w	r8, r4, r3
 8006284:	f000 fb36 	bl	80068f4 <_sbrk_r>
 8006288:	4580      	cmp	r8, r0
 800628a:	d13a      	bne.n	8006302 <_malloc_r+0xd2>
 800628c:	6821      	ldr	r1, [r4, #0]
 800628e:	3503      	adds	r5, #3
 8006290:	1a6d      	subs	r5, r5, r1
 8006292:	f025 0503 	bic.w	r5, r5, #3
 8006296:	3508      	adds	r5, #8
 8006298:	2d0c      	cmp	r5, #12
 800629a:	bf38      	it	cc
 800629c:	250c      	movcc	r5, #12
 800629e:	4629      	mov	r1, r5
 80062a0:	4638      	mov	r0, r7
 80062a2:	f7ff ffa5 	bl	80061f0 <sbrk_aligned>
 80062a6:	3001      	adds	r0, #1
 80062a8:	d02b      	beq.n	8006302 <_malloc_r+0xd2>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	442b      	add	r3, r5
 80062ae:	6023      	str	r3, [r4, #0]
 80062b0:	e00e      	b.n	80062d0 <_malloc_r+0xa0>
 80062b2:	6822      	ldr	r2, [r4, #0]
 80062b4:	1b52      	subs	r2, r2, r5
 80062b6:	d41e      	bmi.n	80062f6 <_malloc_r+0xc6>
 80062b8:	2a0b      	cmp	r2, #11
 80062ba:	d916      	bls.n	80062ea <_malloc_r+0xba>
 80062bc:	1961      	adds	r1, r4, r5
 80062be:	42a3      	cmp	r3, r4
 80062c0:	6025      	str	r5, [r4, #0]
 80062c2:	bf18      	it	ne
 80062c4:	6059      	strne	r1, [r3, #4]
 80062c6:	6863      	ldr	r3, [r4, #4]
 80062c8:	bf08      	it	eq
 80062ca:	6031      	streq	r1, [r6, #0]
 80062cc:	5162      	str	r2, [r4, r5]
 80062ce:	604b      	str	r3, [r1, #4]
 80062d0:	4638      	mov	r0, r7
 80062d2:	f104 060b 	add.w	r6, r4, #11
 80062d6:	f000 fbbd 	bl	8006a54 <__malloc_unlock>
 80062da:	f026 0607 	bic.w	r6, r6, #7
 80062de:	1d23      	adds	r3, r4, #4
 80062e0:	1af2      	subs	r2, r6, r3
 80062e2:	d0b6      	beq.n	8006252 <_malloc_r+0x22>
 80062e4:	1b9b      	subs	r3, r3, r6
 80062e6:	50a3      	str	r3, [r4, r2]
 80062e8:	e7b3      	b.n	8006252 <_malloc_r+0x22>
 80062ea:	6862      	ldr	r2, [r4, #4]
 80062ec:	42a3      	cmp	r3, r4
 80062ee:	bf0c      	ite	eq
 80062f0:	6032      	streq	r2, [r6, #0]
 80062f2:	605a      	strne	r2, [r3, #4]
 80062f4:	e7ec      	b.n	80062d0 <_malloc_r+0xa0>
 80062f6:	4623      	mov	r3, r4
 80062f8:	6864      	ldr	r4, [r4, #4]
 80062fa:	e7b2      	b.n	8006262 <_malloc_r+0x32>
 80062fc:	4634      	mov	r4, r6
 80062fe:	6876      	ldr	r6, [r6, #4]
 8006300:	e7b9      	b.n	8006276 <_malloc_r+0x46>
 8006302:	230c      	movs	r3, #12
 8006304:	603b      	str	r3, [r7, #0]
 8006306:	4638      	mov	r0, r7
 8006308:	f000 fba4 	bl	8006a54 <__malloc_unlock>
 800630c:	e7a1      	b.n	8006252 <_malloc_r+0x22>
 800630e:	6025      	str	r5, [r4, #0]
 8006310:	e7de      	b.n	80062d0 <_malloc_r+0xa0>
 8006312:	bf00      	nop
 8006314:	20000260 	.word	0x20000260

08006318 <__sfputc_r>:
 8006318:	6893      	ldr	r3, [r2, #8]
 800631a:	3b01      	subs	r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	b410      	push	{r4}
 8006320:	6093      	str	r3, [r2, #8]
 8006322:	da08      	bge.n	8006336 <__sfputc_r+0x1e>
 8006324:	6994      	ldr	r4, [r2, #24]
 8006326:	42a3      	cmp	r3, r4
 8006328:	db01      	blt.n	800632e <__sfputc_r+0x16>
 800632a:	290a      	cmp	r1, #10
 800632c:	d103      	bne.n	8006336 <__sfputc_r+0x1e>
 800632e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006332:	f7ff bc29 	b.w	8005b88 <__swbuf_r>
 8006336:	6813      	ldr	r3, [r2, #0]
 8006338:	1c58      	adds	r0, r3, #1
 800633a:	6010      	str	r0, [r2, #0]
 800633c:	7019      	strb	r1, [r3, #0]
 800633e:	4608      	mov	r0, r1
 8006340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006344:	4770      	bx	lr

08006346 <__sfputs_r>:
 8006346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006348:	4606      	mov	r6, r0
 800634a:	460f      	mov	r7, r1
 800634c:	4614      	mov	r4, r2
 800634e:	18d5      	adds	r5, r2, r3
 8006350:	42ac      	cmp	r4, r5
 8006352:	d101      	bne.n	8006358 <__sfputs_r+0x12>
 8006354:	2000      	movs	r0, #0
 8006356:	e007      	b.n	8006368 <__sfputs_r+0x22>
 8006358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800635c:	463a      	mov	r2, r7
 800635e:	4630      	mov	r0, r6
 8006360:	f7ff ffda 	bl	8006318 <__sfputc_r>
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	d1f3      	bne.n	8006350 <__sfputs_r+0xa>
 8006368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800636c <_vfiprintf_r>:
 800636c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006370:	460d      	mov	r5, r1
 8006372:	b09d      	sub	sp, #116	; 0x74
 8006374:	4614      	mov	r4, r2
 8006376:	4698      	mov	r8, r3
 8006378:	4606      	mov	r6, r0
 800637a:	b118      	cbz	r0, 8006384 <_vfiprintf_r+0x18>
 800637c:	6983      	ldr	r3, [r0, #24]
 800637e:	b90b      	cbnz	r3, 8006384 <_vfiprintf_r+0x18>
 8006380:	f7ff fddc 	bl	8005f3c <__sinit>
 8006384:	4b89      	ldr	r3, [pc, #548]	; (80065ac <_vfiprintf_r+0x240>)
 8006386:	429d      	cmp	r5, r3
 8006388:	d11b      	bne.n	80063c2 <_vfiprintf_r+0x56>
 800638a:	6875      	ldr	r5, [r6, #4]
 800638c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800638e:	07d9      	lsls	r1, r3, #31
 8006390:	d405      	bmi.n	800639e <_vfiprintf_r+0x32>
 8006392:	89ab      	ldrh	r3, [r5, #12]
 8006394:	059a      	lsls	r2, r3, #22
 8006396:	d402      	bmi.n	800639e <_vfiprintf_r+0x32>
 8006398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800639a:	f7ff fe6d 	bl	8006078 <__retarget_lock_acquire_recursive>
 800639e:	89ab      	ldrh	r3, [r5, #12]
 80063a0:	071b      	lsls	r3, r3, #28
 80063a2:	d501      	bpl.n	80063a8 <_vfiprintf_r+0x3c>
 80063a4:	692b      	ldr	r3, [r5, #16]
 80063a6:	b9eb      	cbnz	r3, 80063e4 <_vfiprintf_r+0x78>
 80063a8:	4629      	mov	r1, r5
 80063aa:	4630      	mov	r0, r6
 80063ac:	f7ff fc3e 	bl	8005c2c <__swsetup_r>
 80063b0:	b1c0      	cbz	r0, 80063e4 <_vfiprintf_r+0x78>
 80063b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063b4:	07dc      	lsls	r4, r3, #31
 80063b6:	d50e      	bpl.n	80063d6 <_vfiprintf_r+0x6a>
 80063b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063bc:	b01d      	add	sp, #116	; 0x74
 80063be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c2:	4b7b      	ldr	r3, [pc, #492]	; (80065b0 <_vfiprintf_r+0x244>)
 80063c4:	429d      	cmp	r5, r3
 80063c6:	d101      	bne.n	80063cc <_vfiprintf_r+0x60>
 80063c8:	68b5      	ldr	r5, [r6, #8]
 80063ca:	e7df      	b.n	800638c <_vfiprintf_r+0x20>
 80063cc:	4b79      	ldr	r3, [pc, #484]	; (80065b4 <_vfiprintf_r+0x248>)
 80063ce:	429d      	cmp	r5, r3
 80063d0:	bf08      	it	eq
 80063d2:	68f5      	ldreq	r5, [r6, #12]
 80063d4:	e7da      	b.n	800638c <_vfiprintf_r+0x20>
 80063d6:	89ab      	ldrh	r3, [r5, #12]
 80063d8:	0598      	lsls	r0, r3, #22
 80063da:	d4ed      	bmi.n	80063b8 <_vfiprintf_r+0x4c>
 80063dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063de:	f7ff fe4c 	bl	800607a <__retarget_lock_release_recursive>
 80063e2:	e7e9      	b.n	80063b8 <_vfiprintf_r+0x4c>
 80063e4:	2300      	movs	r3, #0
 80063e6:	9309      	str	r3, [sp, #36]	; 0x24
 80063e8:	2320      	movs	r3, #32
 80063ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80063f2:	2330      	movs	r3, #48	; 0x30
 80063f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80065b8 <_vfiprintf_r+0x24c>
 80063f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063fc:	f04f 0901 	mov.w	r9, #1
 8006400:	4623      	mov	r3, r4
 8006402:	469a      	mov	sl, r3
 8006404:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006408:	b10a      	cbz	r2, 800640e <_vfiprintf_r+0xa2>
 800640a:	2a25      	cmp	r2, #37	; 0x25
 800640c:	d1f9      	bne.n	8006402 <_vfiprintf_r+0x96>
 800640e:	ebba 0b04 	subs.w	fp, sl, r4
 8006412:	d00b      	beq.n	800642c <_vfiprintf_r+0xc0>
 8006414:	465b      	mov	r3, fp
 8006416:	4622      	mov	r2, r4
 8006418:	4629      	mov	r1, r5
 800641a:	4630      	mov	r0, r6
 800641c:	f7ff ff93 	bl	8006346 <__sfputs_r>
 8006420:	3001      	adds	r0, #1
 8006422:	f000 80aa 	beq.w	800657a <_vfiprintf_r+0x20e>
 8006426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006428:	445a      	add	r2, fp
 800642a:	9209      	str	r2, [sp, #36]	; 0x24
 800642c:	f89a 3000 	ldrb.w	r3, [sl]
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 80a2 	beq.w	800657a <_vfiprintf_r+0x20e>
 8006436:	2300      	movs	r3, #0
 8006438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800643c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006440:	f10a 0a01 	add.w	sl, sl, #1
 8006444:	9304      	str	r3, [sp, #16]
 8006446:	9307      	str	r3, [sp, #28]
 8006448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800644c:	931a      	str	r3, [sp, #104]	; 0x68
 800644e:	4654      	mov	r4, sl
 8006450:	2205      	movs	r2, #5
 8006452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006456:	4858      	ldr	r0, [pc, #352]	; (80065b8 <_vfiprintf_r+0x24c>)
 8006458:	f7f9 feda 	bl	8000210 <memchr>
 800645c:	9a04      	ldr	r2, [sp, #16]
 800645e:	b9d8      	cbnz	r0, 8006498 <_vfiprintf_r+0x12c>
 8006460:	06d1      	lsls	r1, r2, #27
 8006462:	bf44      	itt	mi
 8006464:	2320      	movmi	r3, #32
 8006466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800646a:	0713      	lsls	r3, r2, #28
 800646c:	bf44      	itt	mi
 800646e:	232b      	movmi	r3, #43	; 0x2b
 8006470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006474:	f89a 3000 	ldrb.w	r3, [sl]
 8006478:	2b2a      	cmp	r3, #42	; 0x2a
 800647a:	d015      	beq.n	80064a8 <_vfiprintf_r+0x13c>
 800647c:	9a07      	ldr	r2, [sp, #28]
 800647e:	4654      	mov	r4, sl
 8006480:	2000      	movs	r0, #0
 8006482:	f04f 0c0a 	mov.w	ip, #10
 8006486:	4621      	mov	r1, r4
 8006488:	f811 3b01 	ldrb.w	r3, [r1], #1
 800648c:	3b30      	subs	r3, #48	; 0x30
 800648e:	2b09      	cmp	r3, #9
 8006490:	d94e      	bls.n	8006530 <_vfiprintf_r+0x1c4>
 8006492:	b1b0      	cbz	r0, 80064c2 <_vfiprintf_r+0x156>
 8006494:	9207      	str	r2, [sp, #28]
 8006496:	e014      	b.n	80064c2 <_vfiprintf_r+0x156>
 8006498:	eba0 0308 	sub.w	r3, r0, r8
 800649c:	fa09 f303 	lsl.w	r3, r9, r3
 80064a0:	4313      	orrs	r3, r2
 80064a2:	9304      	str	r3, [sp, #16]
 80064a4:	46a2      	mov	sl, r4
 80064a6:	e7d2      	b.n	800644e <_vfiprintf_r+0xe2>
 80064a8:	9b03      	ldr	r3, [sp, #12]
 80064aa:	1d19      	adds	r1, r3, #4
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	9103      	str	r1, [sp, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	bfbb      	ittet	lt
 80064b4:	425b      	neglt	r3, r3
 80064b6:	f042 0202 	orrlt.w	r2, r2, #2
 80064ba:	9307      	strge	r3, [sp, #28]
 80064bc:	9307      	strlt	r3, [sp, #28]
 80064be:	bfb8      	it	lt
 80064c0:	9204      	strlt	r2, [sp, #16]
 80064c2:	7823      	ldrb	r3, [r4, #0]
 80064c4:	2b2e      	cmp	r3, #46	; 0x2e
 80064c6:	d10c      	bne.n	80064e2 <_vfiprintf_r+0x176>
 80064c8:	7863      	ldrb	r3, [r4, #1]
 80064ca:	2b2a      	cmp	r3, #42	; 0x2a
 80064cc:	d135      	bne.n	800653a <_vfiprintf_r+0x1ce>
 80064ce:	9b03      	ldr	r3, [sp, #12]
 80064d0:	1d1a      	adds	r2, r3, #4
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	9203      	str	r2, [sp, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	bfb8      	it	lt
 80064da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80064de:	3402      	adds	r4, #2
 80064e0:	9305      	str	r3, [sp, #20]
 80064e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80065c8 <_vfiprintf_r+0x25c>
 80064e6:	7821      	ldrb	r1, [r4, #0]
 80064e8:	2203      	movs	r2, #3
 80064ea:	4650      	mov	r0, sl
 80064ec:	f7f9 fe90 	bl	8000210 <memchr>
 80064f0:	b140      	cbz	r0, 8006504 <_vfiprintf_r+0x198>
 80064f2:	2340      	movs	r3, #64	; 0x40
 80064f4:	eba0 000a 	sub.w	r0, r0, sl
 80064f8:	fa03 f000 	lsl.w	r0, r3, r0
 80064fc:	9b04      	ldr	r3, [sp, #16]
 80064fe:	4303      	orrs	r3, r0
 8006500:	3401      	adds	r4, #1
 8006502:	9304      	str	r3, [sp, #16]
 8006504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006508:	482c      	ldr	r0, [pc, #176]	; (80065bc <_vfiprintf_r+0x250>)
 800650a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800650e:	2206      	movs	r2, #6
 8006510:	f7f9 fe7e 	bl	8000210 <memchr>
 8006514:	2800      	cmp	r0, #0
 8006516:	d03f      	beq.n	8006598 <_vfiprintf_r+0x22c>
 8006518:	4b29      	ldr	r3, [pc, #164]	; (80065c0 <_vfiprintf_r+0x254>)
 800651a:	bb1b      	cbnz	r3, 8006564 <_vfiprintf_r+0x1f8>
 800651c:	9b03      	ldr	r3, [sp, #12]
 800651e:	3307      	adds	r3, #7
 8006520:	f023 0307 	bic.w	r3, r3, #7
 8006524:	3308      	adds	r3, #8
 8006526:	9303      	str	r3, [sp, #12]
 8006528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800652a:	443b      	add	r3, r7
 800652c:	9309      	str	r3, [sp, #36]	; 0x24
 800652e:	e767      	b.n	8006400 <_vfiprintf_r+0x94>
 8006530:	fb0c 3202 	mla	r2, ip, r2, r3
 8006534:	460c      	mov	r4, r1
 8006536:	2001      	movs	r0, #1
 8006538:	e7a5      	b.n	8006486 <_vfiprintf_r+0x11a>
 800653a:	2300      	movs	r3, #0
 800653c:	3401      	adds	r4, #1
 800653e:	9305      	str	r3, [sp, #20]
 8006540:	4619      	mov	r1, r3
 8006542:	f04f 0c0a 	mov.w	ip, #10
 8006546:	4620      	mov	r0, r4
 8006548:	f810 2b01 	ldrb.w	r2, [r0], #1
 800654c:	3a30      	subs	r2, #48	; 0x30
 800654e:	2a09      	cmp	r2, #9
 8006550:	d903      	bls.n	800655a <_vfiprintf_r+0x1ee>
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0c5      	beq.n	80064e2 <_vfiprintf_r+0x176>
 8006556:	9105      	str	r1, [sp, #20]
 8006558:	e7c3      	b.n	80064e2 <_vfiprintf_r+0x176>
 800655a:	fb0c 2101 	mla	r1, ip, r1, r2
 800655e:	4604      	mov	r4, r0
 8006560:	2301      	movs	r3, #1
 8006562:	e7f0      	b.n	8006546 <_vfiprintf_r+0x1da>
 8006564:	ab03      	add	r3, sp, #12
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	462a      	mov	r2, r5
 800656a:	4b16      	ldr	r3, [pc, #88]	; (80065c4 <_vfiprintf_r+0x258>)
 800656c:	a904      	add	r1, sp, #16
 800656e:	4630      	mov	r0, r6
 8006570:	f3af 8000 	nop.w
 8006574:	4607      	mov	r7, r0
 8006576:	1c78      	adds	r0, r7, #1
 8006578:	d1d6      	bne.n	8006528 <_vfiprintf_r+0x1bc>
 800657a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800657c:	07d9      	lsls	r1, r3, #31
 800657e:	d405      	bmi.n	800658c <_vfiprintf_r+0x220>
 8006580:	89ab      	ldrh	r3, [r5, #12]
 8006582:	059a      	lsls	r2, r3, #22
 8006584:	d402      	bmi.n	800658c <_vfiprintf_r+0x220>
 8006586:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006588:	f7ff fd77 	bl	800607a <__retarget_lock_release_recursive>
 800658c:	89ab      	ldrh	r3, [r5, #12]
 800658e:	065b      	lsls	r3, r3, #25
 8006590:	f53f af12 	bmi.w	80063b8 <_vfiprintf_r+0x4c>
 8006594:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006596:	e711      	b.n	80063bc <_vfiprintf_r+0x50>
 8006598:	ab03      	add	r3, sp, #12
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	462a      	mov	r2, r5
 800659e:	4b09      	ldr	r3, [pc, #36]	; (80065c4 <_vfiprintf_r+0x258>)
 80065a0:	a904      	add	r1, sp, #16
 80065a2:	4630      	mov	r0, r6
 80065a4:	f000 f880 	bl	80066a8 <_printf_i>
 80065a8:	e7e4      	b.n	8006574 <_vfiprintf_r+0x208>
 80065aa:	bf00      	nop
 80065ac:	08006c3c 	.word	0x08006c3c
 80065b0:	08006c5c 	.word	0x08006c5c
 80065b4:	08006c1c 	.word	0x08006c1c
 80065b8:	08006c7c 	.word	0x08006c7c
 80065bc:	08006c86 	.word	0x08006c86
 80065c0:	00000000 	.word	0x00000000
 80065c4:	08006347 	.word	0x08006347
 80065c8:	08006c82 	.word	0x08006c82

080065cc <_printf_common>:
 80065cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065d0:	4616      	mov	r6, r2
 80065d2:	4699      	mov	r9, r3
 80065d4:	688a      	ldr	r2, [r1, #8]
 80065d6:	690b      	ldr	r3, [r1, #16]
 80065d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065dc:	4293      	cmp	r3, r2
 80065de:	bfb8      	it	lt
 80065e0:	4613      	movlt	r3, r2
 80065e2:	6033      	str	r3, [r6, #0]
 80065e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065e8:	4607      	mov	r7, r0
 80065ea:	460c      	mov	r4, r1
 80065ec:	b10a      	cbz	r2, 80065f2 <_printf_common+0x26>
 80065ee:	3301      	adds	r3, #1
 80065f0:	6033      	str	r3, [r6, #0]
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	0699      	lsls	r1, r3, #26
 80065f6:	bf42      	ittt	mi
 80065f8:	6833      	ldrmi	r3, [r6, #0]
 80065fa:	3302      	addmi	r3, #2
 80065fc:	6033      	strmi	r3, [r6, #0]
 80065fe:	6825      	ldr	r5, [r4, #0]
 8006600:	f015 0506 	ands.w	r5, r5, #6
 8006604:	d106      	bne.n	8006614 <_printf_common+0x48>
 8006606:	f104 0a19 	add.w	sl, r4, #25
 800660a:	68e3      	ldr	r3, [r4, #12]
 800660c:	6832      	ldr	r2, [r6, #0]
 800660e:	1a9b      	subs	r3, r3, r2
 8006610:	42ab      	cmp	r3, r5
 8006612:	dc26      	bgt.n	8006662 <_printf_common+0x96>
 8006614:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006618:	1e13      	subs	r3, r2, #0
 800661a:	6822      	ldr	r2, [r4, #0]
 800661c:	bf18      	it	ne
 800661e:	2301      	movne	r3, #1
 8006620:	0692      	lsls	r2, r2, #26
 8006622:	d42b      	bmi.n	800667c <_printf_common+0xb0>
 8006624:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006628:	4649      	mov	r1, r9
 800662a:	4638      	mov	r0, r7
 800662c:	47c0      	blx	r8
 800662e:	3001      	adds	r0, #1
 8006630:	d01e      	beq.n	8006670 <_printf_common+0xa4>
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	68e5      	ldr	r5, [r4, #12]
 8006636:	6832      	ldr	r2, [r6, #0]
 8006638:	f003 0306 	and.w	r3, r3, #6
 800663c:	2b04      	cmp	r3, #4
 800663e:	bf08      	it	eq
 8006640:	1aad      	subeq	r5, r5, r2
 8006642:	68a3      	ldr	r3, [r4, #8]
 8006644:	6922      	ldr	r2, [r4, #16]
 8006646:	bf0c      	ite	eq
 8006648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800664c:	2500      	movne	r5, #0
 800664e:	4293      	cmp	r3, r2
 8006650:	bfc4      	itt	gt
 8006652:	1a9b      	subgt	r3, r3, r2
 8006654:	18ed      	addgt	r5, r5, r3
 8006656:	2600      	movs	r6, #0
 8006658:	341a      	adds	r4, #26
 800665a:	42b5      	cmp	r5, r6
 800665c:	d11a      	bne.n	8006694 <_printf_common+0xc8>
 800665e:	2000      	movs	r0, #0
 8006660:	e008      	b.n	8006674 <_printf_common+0xa8>
 8006662:	2301      	movs	r3, #1
 8006664:	4652      	mov	r2, sl
 8006666:	4649      	mov	r1, r9
 8006668:	4638      	mov	r0, r7
 800666a:	47c0      	blx	r8
 800666c:	3001      	adds	r0, #1
 800666e:	d103      	bne.n	8006678 <_printf_common+0xac>
 8006670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006678:	3501      	adds	r5, #1
 800667a:	e7c6      	b.n	800660a <_printf_common+0x3e>
 800667c:	18e1      	adds	r1, r4, r3
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	2030      	movs	r0, #48	; 0x30
 8006682:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006686:	4422      	add	r2, r4
 8006688:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800668c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006690:	3302      	adds	r3, #2
 8006692:	e7c7      	b.n	8006624 <_printf_common+0x58>
 8006694:	2301      	movs	r3, #1
 8006696:	4622      	mov	r2, r4
 8006698:	4649      	mov	r1, r9
 800669a:	4638      	mov	r0, r7
 800669c:	47c0      	blx	r8
 800669e:	3001      	adds	r0, #1
 80066a0:	d0e6      	beq.n	8006670 <_printf_common+0xa4>
 80066a2:	3601      	adds	r6, #1
 80066a4:	e7d9      	b.n	800665a <_printf_common+0x8e>
	...

080066a8 <_printf_i>:
 80066a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066ac:	7e0f      	ldrb	r7, [r1, #24]
 80066ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066b0:	2f78      	cmp	r7, #120	; 0x78
 80066b2:	4691      	mov	r9, r2
 80066b4:	4680      	mov	r8, r0
 80066b6:	460c      	mov	r4, r1
 80066b8:	469a      	mov	sl, r3
 80066ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066be:	d807      	bhi.n	80066d0 <_printf_i+0x28>
 80066c0:	2f62      	cmp	r7, #98	; 0x62
 80066c2:	d80a      	bhi.n	80066da <_printf_i+0x32>
 80066c4:	2f00      	cmp	r7, #0
 80066c6:	f000 80d8 	beq.w	800687a <_printf_i+0x1d2>
 80066ca:	2f58      	cmp	r7, #88	; 0x58
 80066cc:	f000 80a3 	beq.w	8006816 <_printf_i+0x16e>
 80066d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066d8:	e03a      	b.n	8006750 <_printf_i+0xa8>
 80066da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066de:	2b15      	cmp	r3, #21
 80066e0:	d8f6      	bhi.n	80066d0 <_printf_i+0x28>
 80066e2:	a101      	add	r1, pc, #4	; (adr r1, 80066e8 <_printf_i+0x40>)
 80066e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066e8:	08006741 	.word	0x08006741
 80066ec:	08006755 	.word	0x08006755
 80066f0:	080066d1 	.word	0x080066d1
 80066f4:	080066d1 	.word	0x080066d1
 80066f8:	080066d1 	.word	0x080066d1
 80066fc:	080066d1 	.word	0x080066d1
 8006700:	08006755 	.word	0x08006755
 8006704:	080066d1 	.word	0x080066d1
 8006708:	080066d1 	.word	0x080066d1
 800670c:	080066d1 	.word	0x080066d1
 8006710:	080066d1 	.word	0x080066d1
 8006714:	08006861 	.word	0x08006861
 8006718:	08006785 	.word	0x08006785
 800671c:	08006843 	.word	0x08006843
 8006720:	080066d1 	.word	0x080066d1
 8006724:	080066d1 	.word	0x080066d1
 8006728:	08006883 	.word	0x08006883
 800672c:	080066d1 	.word	0x080066d1
 8006730:	08006785 	.word	0x08006785
 8006734:	080066d1 	.word	0x080066d1
 8006738:	080066d1 	.word	0x080066d1
 800673c:	0800684b 	.word	0x0800684b
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	1d1a      	adds	r2, r3, #4
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	602a      	str	r2, [r5, #0]
 8006748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800674c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006750:	2301      	movs	r3, #1
 8006752:	e0a3      	b.n	800689c <_printf_i+0x1f4>
 8006754:	6820      	ldr	r0, [r4, #0]
 8006756:	6829      	ldr	r1, [r5, #0]
 8006758:	0606      	lsls	r6, r0, #24
 800675a:	f101 0304 	add.w	r3, r1, #4
 800675e:	d50a      	bpl.n	8006776 <_printf_i+0xce>
 8006760:	680e      	ldr	r6, [r1, #0]
 8006762:	602b      	str	r3, [r5, #0]
 8006764:	2e00      	cmp	r6, #0
 8006766:	da03      	bge.n	8006770 <_printf_i+0xc8>
 8006768:	232d      	movs	r3, #45	; 0x2d
 800676a:	4276      	negs	r6, r6
 800676c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006770:	485e      	ldr	r0, [pc, #376]	; (80068ec <_printf_i+0x244>)
 8006772:	230a      	movs	r3, #10
 8006774:	e019      	b.n	80067aa <_printf_i+0x102>
 8006776:	680e      	ldr	r6, [r1, #0]
 8006778:	602b      	str	r3, [r5, #0]
 800677a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800677e:	bf18      	it	ne
 8006780:	b236      	sxthne	r6, r6
 8006782:	e7ef      	b.n	8006764 <_printf_i+0xbc>
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	6820      	ldr	r0, [r4, #0]
 8006788:	1d19      	adds	r1, r3, #4
 800678a:	6029      	str	r1, [r5, #0]
 800678c:	0601      	lsls	r1, r0, #24
 800678e:	d501      	bpl.n	8006794 <_printf_i+0xec>
 8006790:	681e      	ldr	r6, [r3, #0]
 8006792:	e002      	b.n	800679a <_printf_i+0xf2>
 8006794:	0646      	lsls	r6, r0, #25
 8006796:	d5fb      	bpl.n	8006790 <_printf_i+0xe8>
 8006798:	881e      	ldrh	r6, [r3, #0]
 800679a:	4854      	ldr	r0, [pc, #336]	; (80068ec <_printf_i+0x244>)
 800679c:	2f6f      	cmp	r7, #111	; 0x6f
 800679e:	bf0c      	ite	eq
 80067a0:	2308      	moveq	r3, #8
 80067a2:	230a      	movne	r3, #10
 80067a4:	2100      	movs	r1, #0
 80067a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067aa:	6865      	ldr	r5, [r4, #4]
 80067ac:	60a5      	str	r5, [r4, #8]
 80067ae:	2d00      	cmp	r5, #0
 80067b0:	bfa2      	ittt	ge
 80067b2:	6821      	ldrge	r1, [r4, #0]
 80067b4:	f021 0104 	bicge.w	r1, r1, #4
 80067b8:	6021      	strge	r1, [r4, #0]
 80067ba:	b90e      	cbnz	r6, 80067c0 <_printf_i+0x118>
 80067bc:	2d00      	cmp	r5, #0
 80067be:	d04d      	beq.n	800685c <_printf_i+0x1b4>
 80067c0:	4615      	mov	r5, r2
 80067c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80067c6:	fb03 6711 	mls	r7, r3, r1, r6
 80067ca:	5dc7      	ldrb	r7, [r0, r7]
 80067cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067d0:	4637      	mov	r7, r6
 80067d2:	42bb      	cmp	r3, r7
 80067d4:	460e      	mov	r6, r1
 80067d6:	d9f4      	bls.n	80067c2 <_printf_i+0x11a>
 80067d8:	2b08      	cmp	r3, #8
 80067da:	d10b      	bne.n	80067f4 <_printf_i+0x14c>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	07de      	lsls	r6, r3, #31
 80067e0:	d508      	bpl.n	80067f4 <_printf_i+0x14c>
 80067e2:	6923      	ldr	r3, [r4, #16]
 80067e4:	6861      	ldr	r1, [r4, #4]
 80067e6:	4299      	cmp	r1, r3
 80067e8:	bfde      	ittt	le
 80067ea:	2330      	movle	r3, #48	; 0x30
 80067ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80067f4:	1b52      	subs	r2, r2, r5
 80067f6:	6122      	str	r2, [r4, #16]
 80067f8:	f8cd a000 	str.w	sl, [sp]
 80067fc:	464b      	mov	r3, r9
 80067fe:	aa03      	add	r2, sp, #12
 8006800:	4621      	mov	r1, r4
 8006802:	4640      	mov	r0, r8
 8006804:	f7ff fee2 	bl	80065cc <_printf_common>
 8006808:	3001      	adds	r0, #1
 800680a:	d14c      	bne.n	80068a6 <_printf_i+0x1fe>
 800680c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006810:	b004      	add	sp, #16
 8006812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006816:	4835      	ldr	r0, [pc, #212]	; (80068ec <_printf_i+0x244>)
 8006818:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800681c:	6829      	ldr	r1, [r5, #0]
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	f851 6b04 	ldr.w	r6, [r1], #4
 8006824:	6029      	str	r1, [r5, #0]
 8006826:	061d      	lsls	r5, r3, #24
 8006828:	d514      	bpl.n	8006854 <_printf_i+0x1ac>
 800682a:	07df      	lsls	r7, r3, #31
 800682c:	bf44      	itt	mi
 800682e:	f043 0320 	orrmi.w	r3, r3, #32
 8006832:	6023      	strmi	r3, [r4, #0]
 8006834:	b91e      	cbnz	r6, 800683e <_printf_i+0x196>
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	f023 0320 	bic.w	r3, r3, #32
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	2310      	movs	r3, #16
 8006840:	e7b0      	b.n	80067a4 <_printf_i+0xfc>
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	f043 0320 	orr.w	r3, r3, #32
 8006848:	6023      	str	r3, [r4, #0]
 800684a:	2378      	movs	r3, #120	; 0x78
 800684c:	4828      	ldr	r0, [pc, #160]	; (80068f0 <_printf_i+0x248>)
 800684e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006852:	e7e3      	b.n	800681c <_printf_i+0x174>
 8006854:	0659      	lsls	r1, r3, #25
 8006856:	bf48      	it	mi
 8006858:	b2b6      	uxthmi	r6, r6
 800685a:	e7e6      	b.n	800682a <_printf_i+0x182>
 800685c:	4615      	mov	r5, r2
 800685e:	e7bb      	b.n	80067d8 <_printf_i+0x130>
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	6826      	ldr	r6, [r4, #0]
 8006864:	6961      	ldr	r1, [r4, #20]
 8006866:	1d18      	adds	r0, r3, #4
 8006868:	6028      	str	r0, [r5, #0]
 800686a:	0635      	lsls	r5, r6, #24
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	d501      	bpl.n	8006874 <_printf_i+0x1cc>
 8006870:	6019      	str	r1, [r3, #0]
 8006872:	e002      	b.n	800687a <_printf_i+0x1d2>
 8006874:	0670      	lsls	r0, r6, #25
 8006876:	d5fb      	bpl.n	8006870 <_printf_i+0x1c8>
 8006878:	8019      	strh	r1, [r3, #0]
 800687a:	2300      	movs	r3, #0
 800687c:	6123      	str	r3, [r4, #16]
 800687e:	4615      	mov	r5, r2
 8006880:	e7ba      	b.n	80067f8 <_printf_i+0x150>
 8006882:	682b      	ldr	r3, [r5, #0]
 8006884:	1d1a      	adds	r2, r3, #4
 8006886:	602a      	str	r2, [r5, #0]
 8006888:	681d      	ldr	r5, [r3, #0]
 800688a:	6862      	ldr	r2, [r4, #4]
 800688c:	2100      	movs	r1, #0
 800688e:	4628      	mov	r0, r5
 8006890:	f7f9 fcbe 	bl	8000210 <memchr>
 8006894:	b108      	cbz	r0, 800689a <_printf_i+0x1f2>
 8006896:	1b40      	subs	r0, r0, r5
 8006898:	6060      	str	r0, [r4, #4]
 800689a:	6863      	ldr	r3, [r4, #4]
 800689c:	6123      	str	r3, [r4, #16]
 800689e:	2300      	movs	r3, #0
 80068a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068a4:	e7a8      	b.n	80067f8 <_printf_i+0x150>
 80068a6:	6923      	ldr	r3, [r4, #16]
 80068a8:	462a      	mov	r2, r5
 80068aa:	4649      	mov	r1, r9
 80068ac:	4640      	mov	r0, r8
 80068ae:	47d0      	blx	sl
 80068b0:	3001      	adds	r0, #1
 80068b2:	d0ab      	beq.n	800680c <_printf_i+0x164>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	079b      	lsls	r3, r3, #30
 80068b8:	d413      	bmi.n	80068e2 <_printf_i+0x23a>
 80068ba:	68e0      	ldr	r0, [r4, #12]
 80068bc:	9b03      	ldr	r3, [sp, #12]
 80068be:	4298      	cmp	r0, r3
 80068c0:	bfb8      	it	lt
 80068c2:	4618      	movlt	r0, r3
 80068c4:	e7a4      	b.n	8006810 <_printf_i+0x168>
 80068c6:	2301      	movs	r3, #1
 80068c8:	4632      	mov	r2, r6
 80068ca:	4649      	mov	r1, r9
 80068cc:	4640      	mov	r0, r8
 80068ce:	47d0      	blx	sl
 80068d0:	3001      	adds	r0, #1
 80068d2:	d09b      	beq.n	800680c <_printf_i+0x164>
 80068d4:	3501      	adds	r5, #1
 80068d6:	68e3      	ldr	r3, [r4, #12]
 80068d8:	9903      	ldr	r1, [sp, #12]
 80068da:	1a5b      	subs	r3, r3, r1
 80068dc:	42ab      	cmp	r3, r5
 80068de:	dcf2      	bgt.n	80068c6 <_printf_i+0x21e>
 80068e0:	e7eb      	b.n	80068ba <_printf_i+0x212>
 80068e2:	2500      	movs	r5, #0
 80068e4:	f104 0619 	add.w	r6, r4, #25
 80068e8:	e7f5      	b.n	80068d6 <_printf_i+0x22e>
 80068ea:	bf00      	nop
 80068ec:	08006c8d 	.word	0x08006c8d
 80068f0:	08006c9e 	.word	0x08006c9e

080068f4 <_sbrk_r>:
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	4d06      	ldr	r5, [pc, #24]	; (8006910 <_sbrk_r+0x1c>)
 80068f8:	2300      	movs	r3, #0
 80068fa:	4604      	mov	r4, r0
 80068fc:	4608      	mov	r0, r1
 80068fe:	602b      	str	r3, [r5, #0]
 8006900:	f7fb f998 	bl	8001c34 <_sbrk>
 8006904:	1c43      	adds	r3, r0, #1
 8006906:	d102      	bne.n	800690e <_sbrk_r+0x1a>
 8006908:	682b      	ldr	r3, [r5, #0]
 800690a:	b103      	cbz	r3, 800690e <_sbrk_r+0x1a>
 800690c:	6023      	str	r3, [r4, #0]
 800690e:	bd38      	pop	{r3, r4, r5, pc}
 8006910:	20000268 	.word	0x20000268

08006914 <__sread>:
 8006914:	b510      	push	{r4, lr}
 8006916:	460c      	mov	r4, r1
 8006918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800691c:	f000 f8a0 	bl	8006a60 <_read_r>
 8006920:	2800      	cmp	r0, #0
 8006922:	bfab      	itete	ge
 8006924:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006926:	89a3      	ldrhlt	r3, [r4, #12]
 8006928:	181b      	addge	r3, r3, r0
 800692a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800692e:	bfac      	ite	ge
 8006930:	6563      	strge	r3, [r4, #84]	; 0x54
 8006932:	81a3      	strhlt	r3, [r4, #12]
 8006934:	bd10      	pop	{r4, pc}

08006936 <__swrite>:
 8006936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800693a:	461f      	mov	r7, r3
 800693c:	898b      	ldrh	r3, [r1, #12]
 800693e:	05db      	lsls	r3, r3, #23
 8006940:	4605      	mov	r5, r0
 8006942:	460c      	mov	r4, r1
 8006944:	4616      	mov	r6, r2
 8006946:	d505      	bpl.n	8006954 <__swrite+0x1e>
 8006948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800694c:	2302      	movs	r3, #2
 800694e:	2200      	movs	r2, #0
 8006950:	f000 f868 	bl	8006a24 <_lseek_r>
 8006954:	89a3      	ldrh	r3, [r4, #12]
 8006956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800695a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800695e:	81a3      	strh	r3, [r4, #12]
 8006960:	4632      	mov	r2, r6
 8006962:	463b      	mov	r3, r7
 8006964:	4628      	mov	r0, r5
 8006966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800696a:	f000 b817 	b.w	800699c <_write_r>

0800696e <__sseek>:
 800696e:	b510      	push	{r4, lr}
 8006970:	460c      	mov	r4, r1
 8006972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006976:	f000 f855 	bl	8006a24 <_lseek_r>
 800697a:	1c43      	adds	r3, r0, #1
 800697c:	89a3      	ldrh	r3, [r4, #12]
 800697e:	bf15      	itete	ne
 8006980:	6560      	strne	r0, [r4, #84]	; 0x54
 8006982:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006986:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800698a:	81a3      	strheq	r3, [r4, #12]
 800698c:	bf18      	it	ne
 800698e:	81a3      	strhne	r3, [r4, #12]
 8006990:	bd10      	pop	{r4, pc}

08006992 <__sclose>:
 8006992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006996:	f000 b813 	b.w	80069c0 <_close_r>
	...

0800699c <_write_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	4d07      	ldr	r5, [pc, #28]	; (80069bc <_write_r+0x20>)
 80069a0:	4604      	mov	r4, r0
 80069a2:	4608      	mov	r0, r1
 80069a4:	4611      	mov	r1, r2
 80069a6:	2200      	movs	r2, #0
 80069a8:	602a      	str	r2, [r5, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	f7fa fee2 	bl	8001774 <_write>
 80069b0:	1c43      	adds	r3, r0, #1
 80069b2:	d102      	bne.n	80069ba <_write_r+0x1e>
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	b103      	cbz	r3, 80069ba <_write_r+0x1e>
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	bd38      	pop	{r3, r4, r5, pc}
 80069bc:	20000268 	.word	0x20000268

080069c0 <_close_r>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	4d06      	ldr	r5, [pc, #24]	; (80069dc <_close_r+0x1c>)
 80069c4:	2300      	movs	r3, #0
 80069c6:	4604      	mov	r4, r0
 80069c8:	4608      	mov	r0, r1
 80069ca:	602b      	str	r3, [r5, #0]
 80069cc:	f7fb f8fd 	bl	8001bca <_close>
 80069d0:	1c43      	adds	r3, r0, #1
 80069d2:	d102      	bne.n	80069da <_close_r+0x1a>
 80069d4:	682b      	ldr	r3, [r5, #0]
 80069d6:	b103      	cbz	r3, 80069da <_close_r+0x1a>
 80069d8:	6023      	str	r3, [r4, #0]
 80069da:	bd38      	pop	{r3, r4, r5, pc}
 80069dc:	20000268 	.word	0x20000268

080069e0 <_fstat_r>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	4d07      	ldr	r5, [pc, #28]	; (8006a00 <_fstat_r+0x20>)
 80069e4:	2300      	movs	r3, #0
 80069e6:	4604      	mov	r4, r0
 80069e8:	4608      	mov	r0, r1
 80069ea:	4611      	mov	r1, r2
 80069ec:	602b      	str	r3, [r5, #0]
 80069ee:	f7fb f8f8 	bl	8001be2 <_fstat>
 80069f2:	1c43      	adds	r3, r0, #1
 80069f4:	d102      	bne.n	80069fc <_fstat_r+0x1c>
 80069f6:	682b      	ldr	r3, [r5, #0]
 80069f8:	b103      	cbz	r3, 80069fc <_fstat_r+0x1c>
 80069fa:	6023      	str	r3, [r4, #0]
 80069fc:	bd38      	pop	{r3, r4, r5, pc}
 80069fe:	bf00      	nop
 8006a00:	20000268 	.word	0x20000268

08006a04 <_isatty_r>:
 8006a04:	b538      	push	{r3, r4, r5, lr}
 8006a06:	4d06      	ldr	r5, [pc, #24]	; (8006a20 <_isatty_r+0x1c>)
 8006a08:	2300      	movs	r3, #0
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	4608      	mov	r0, r1
 8006a0e:	602b      	str	r3, [r5, #0]
 8006a10:	f7fb f8f7 	bl	8001c02 <_isatty>
 8006a14:	1c43      	adds	r3, r0, #1
 8006a16:	d102      	bne.n	8006a1e <_isatty_r+0x1a>
 8006a18:	682b      	ldr	r3, [r5, #0]
 8006a1a:	b103      	cbz	r3, 8006a1e <_isatty_r+0x1a>
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	bd38      	pop	{r3, r4, r5, pc}
 8006a20:	20000268 	.word	0x20000268

08006a24 <_lseek_r>:
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	4d07      	ldr	r5, [pc, #28]	; (8006a44 <_lseek_r+0x20>)
 8006a28:	4604      	mov	r4, r0
 8006a2a:	4608      	mov	r0, r1
 8006a2c:	4611      	mov	r1, r2
 8006a2e:	2200      	movs	r2, #0
 8006a30:	602a      	str	r2, [r5, #0]
 8006a32:	461a      	mov	r2, r3
 8006a34:	f7fb f8f0 	bl	8001c18 <_lseek>
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	d102      	bne.n	8006a42 <_lseek_r+0x1e>
 8006a3c:	682b      	ldr	r3, [r5, #0]
 8006a3e:	b103      	cbz	r3, 8006a42 <_lseek_r+0x1e>
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	bd38      	pop	{r3, r4, r5, pc}
 8006a44:	20000268 	.word	0x20000268

08006a48 <__malloc_lock>:
 8006a48:	4801      	ldr	r0, [pc, #4]	; (8006a50 <__malloc_lock+0x8>)
 8006a4a:	f7ff bb15 	b.w	8006078 <__retarget_lock_acquire_recursive>
 8006a4e:	bf00      	nop
 8006a50:	2000025c 	.word	0x2000025c

08006a54 <__malloc_unlock>:
 8006a54:	4801      	ldr	r0, [pc, #4]	; (8006a5c <__malloc_unlock+0x8>)
 8006a56:	f7ff bb10 	b.w	800607a <__retarget_lock_release_recursive>
 8006a5a:	bf00      	nop
 8006a5c:	2000025c 	.word	0x2000025c

08006a60 <_read_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	4d07      	ldr	r5, [pc, #28]	; (8006a80 <_read_r+0x20>)
 8006a64:	4604      	mov	r4, r0
 8006a66:	4608      	mov	r0, r1
 8006a68:	4611      	mov	r1, r2
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	602a      	str	r2, [r5, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f7fb f88e 	bl	8001b90 <_read>
 8006a74:	1c43      	adds	r3, r0, #1
 8006a76:	d102      	bne.n	8006a7e <_read_r+0x1e>
 8006a78:	682b      	ldr	r3, [r5, #0]
 8006a7a:	b103      	cbz	r3, 8006a7e <_read_r+0x1e>
 8006a7c:	6023      	str	r3, [r4, #0]
 8006a7e:	bd38      	pop	{r3, r4, r5, pc}
 8006a80:	20000268 	.word	0x20000268

08006a84 <round>:
 8006a84:	ec51 0b10 	vmov	r0, r1, d0
 8006a88:	b570      	push	{r4, r5, r6, lr}
 8006a8a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8006a8e:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8006a92:	2c13      	cmp	r4, #19
 8006a94:	ee10 2a10 	vmov	r2, s0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	dc19      	bgt.n	8006ad0 <round+0x4c>
 8006a9c:	2c00      	cmp	r4, #0
 8006a9e:	da09      	bge.n	8006ab4 <round+0x30>
 8006aa0:	3401      	adds	r4, #1
 8006aa2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8006aa6:	d103      	bne.n	8006ab0 <round+0x2c>
 8006aa8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006aac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	e028      	b.n	8006b06 <round+0x82>
 8006ab4:	4d15      	ldr	r5, [pc, #84]	; (8006b0c <round+0x88>)
 8006ab6:	4125      	asrs	r5, r4
 8006ab8:	ea01 0605 	and.w	r6, r1, r5
 8006abc:	4332      	orrs	r2, r6
 8006abe:	d00e      	beq.n	8006ade <round+0x5a>
 8006ac0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006ac4:	fa42 f404 	asr.w	r4, r2, r4
 8006ac8:	4423      	add	r3, r4
 8006aca:	ea23 0305 	bic.w	r3, r3, r5
 8006ace:	e7ef      	b.n	8006ab0 <round+0x2c>
 8006ad0:	2c33      	cmp	r4, #51	; 0x33
 8006ad2:	dd07      	ble.n	8006ae4 <round+0x60>
 8006ad4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006ad8:	d101      	bne.n	8006ade <round+0x5a>
 8006ada:	f7f9 fbef 	bl	80002bc <__adddf3>
 8006ade:	ec41 0b10 	vmov	d0, r0, r1
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
 8006ae4:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8006ae8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006aec:	40f5      	lsrs	r5, r6
 8006aee:	4228      	tst	r0, r5
 8006af0:	d0f5      	beq.n	8006ade <round+0x5a>
 8006af2:	2101      	movs	r1, #1
 8006af4:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8006af8:	fa01 f404 	lsl.w	r4, r1, r4
 8006afc:	1912      	adds	r2, r2, r4
 8006afe:	bf28      	it	cs
 8006b00:	185b      	addcs	r3, r3, r1
 8006b02:	ea22 0205 	bic.w	r2, r2, r5
 8006b06:	4619      	mov	r1, r3
 8006b08:	4610      	mov	r0, r2
 8006b0a:	e7e8      	b.n	8006ade <round+0x5a>
 8006b0c:	000fffff 	.word	0x000fffff

08006b10 <_init>:
 8006b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b12:	bf00      	nop
 8006b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b16:	bc08      	pop	{r3}
 8006b18:	469e      	mov	lr, r3
 8006b1a:	4770      	bx	lr

08006b1c <_fini>:
 8006b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1e:	bf00      	nop
 8006b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b22:	bc08      	pop	{r3}
 8006b24:	469e      	mov	lr, r3
 8006b26:	4770      	bx	lr
