
STMF446_ArmRemoteRobot_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cccc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c0  0800cea0  0800cea0  0001cea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d760  0800d760  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d760  0800d760  0001d760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d768  0800d768  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d768  0800d768  0001d768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d76c  0800d76c  0001d76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000958  200001e8  0800d958  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b40  0800d958  00020b40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013705  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002878  00000000  00000000  0003391d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  00036198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001038  00000000  00000000  000372d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000440e  00000000  00000000  00038310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013cf9  00000000  00000000  0003c71e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8c6d  00000000  00000000  00050417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00129084  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d54  00000000  00000000  001290d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ce84 	.word	0x0800ce84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800ce84 	.word	0x0800ce84

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <reset>:


}

static uint8_t reset()
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	//StepDir_init(STEPDIR_PRECISION);
	//StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);

	return tmc2209_reset(&TMC2209);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <reset+0x10>)
 8000f92:	f007 fa61 	bl	8008458 <tmc2209_reset>
 8000f96:	4603      	mov	r3, r0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000430 	.word	0x20000430

08000fa0 <restore>:

static uint8_t restore()
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <restore+0x10>)
 8000fa6:	f007 fa91 	bl	80084cc <tmc2209_restore>
 8000faa:	4603      	mov	r3, r0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000430 	.word	0x20000430

08000fb4 <TMC2209_INIT>:


void TMC2209_INIT()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	2007      	movs	r0, #7
 8000fc0:	f007 f91e 	bl	8008200 <tmc_fillCRC8Table>

	TMC2209_config.reset = reset;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <TMC2209_INIT+0x38>)
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <TMC2209_INIT+0x3c>)
 8000fc8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config.restore = restore;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <TMC2209_INIT+0x38>)
 8000fce:	4a09      	ldr	r2, [pc, #36]	; (8000ff4 <TMC2209_INIT+0x40>)
 8000fd0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <TMC2209_INIT+0x44>)
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <TMC2209_INIT+0x38>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4807      	ldr	r0, [pc, #28]	; (8000ffc <TMC2209_INIT+0x48>)
 8000fe0:	f007 f9f0 	bl	80083c4 <tmc2209_init>


	//restore();
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200006b8 	.word	0x200006b8
 8000ff0:	08000f8d 	.word	0x08000f8d
 8000ff4:	08000fa1 	.word	0x08000fa1
 8000ff8:	0800cea0 	.word	0x0800cea0
 8000ffc:	20000430 	.word	0x20000430

08001000 <Step0>:
	UNUSED(motor);

	return &TMC2209;
}

void Step0(){                                       //step pin
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	//pull+

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <Step0+0x20>)
 800100c:	f004 fa60 	bl	80054d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001016:	4802      	ldr	r0, [pc, #8]	; (8001020 <Step0+0x20>)
 8001018:	f004 fa5a 	bl	80054d0 <HAL_GPIO_WritePin>
	/*
	 * pull-
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
	 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40020400 	.word	0x40020400

08001024 <Dir0>:

void Dir0(int dir){
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, dir); //Dir0関数にdirピンを指定して格納
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	461a      	mov	r2, r3
 8001032:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001036:	4803      	ldr	r0, [pc, #12]	; (8001044 <Dir0+0x20>)
 8001038:	f004 fa4a 	bl	80054d0 <HAL_GPIO_WritePin>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40020400 	.word	0x40020400

08001048 <EnterMotorMode>:
	m2Tx_can_data[6] = 0xFF;
	m2Tx_can_data[7] = 0xFE;
    //WriteAll();
    }

void EnterMotorMode(){	//アームBLDC ON	コマンド
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
	m1Tx_can_data[0] = 0xFF;
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <EnterMotorMode+0x70>)
 800104e:	22ff      	movs	r2, #255	; 0xff
 8001050:	701a      	strb	r2, [r3, #0]
	m1Tx_can_data[1] = 0xFF;
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <EnterMotorMode+0x70>)
 8001054:	22ff      	movs	r2, #255	; 0xff
 8001056:	705a      	strb	r2, [r3, #1]
	m1Tx_can_data[2] = 0xFF;
 8001058:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <EnterMotorMode+0x70>)
 800105a:	22ff      	movs	r2, #255	; 0xff
 800105c:	709a      	strb	r2, [r3, #2]
	m1Tx_can_data[3] = 0xFF;
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <EnterMotorMode+0x70>)
 8001060:	22ff      	movs	r2, #255	; 0xff
 8001062:	70da      	strb	r2, [r3, #3]
	m1Tx_can_data[4] = 0xFF;
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <EnterMotorMode+0x70>)
 8001066:	22ff      	movs	r2, #255	; 0xff
 8001068:	711a      	strb	r2, [r3, #4]
	m1Tx_can_data[5] = 0xFF;
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <EnterMotorMode+0x70>)
 800106c:	22ff      	movs	r2, #255	; 0xff
 800106e:	715a      	strb	r2, [r3, #5]
	m1Tx_can_data[6] = 0xFF;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <EnterMotorMode+0x70>)
 8001072:	22ff      	movs	r2, #255	; 0xff
 8001074:	719a      	strb	r2, [r3, #6]
	m1Tx_can_data[7] = 0xFC;
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <EnterMotorMode+0x70>)
 8001078:	22fc      	movs	r2, #252	; 0xfc
 800107a:	71da      	strb	r2, [r3, #7]

	m2Tx_can_data[0] = 0xFF;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <EnterMotorMode+0x74>)
 800107e:	22ff      	movs	r2, #255	; 0xff
 8001080:	701a      	strb	r2, [r3, #0]
	m2Tx_can_data[1] = 0xFF;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <EnterMotorMode+0x74>)
 8001084:	22ff      	movs	r2, #255	; 0xff
 8001086:	705a      	strb	r2, [r3, #1]
	m2Tx_can_data[2] = 0xFF;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <EnterMotorMode+0x74>)
 800108a:	22ff      	movs	r2, #255	; 0xff
 800108c:	709a      	strb	r2, [r3, #2]
	m2Tx_can_data[3] = 0xFF;
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <EnterMotorMode+0x74>)
 8001090:	22ff      	movs	r2, #255	; 0xff
 8001092:	70da      	strb	r2, [r3, #3]
	m2Tx_can_data[4] = 0xFF;
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <EnterMotorMode+0x74>)
 8001096:	22ff      	movs	r2, #255	; 0xff
 8001098:	711a      	strb	r2, [r3, #4]
	m2Tx_can_data[5] = 0xFF;
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <EnterMotorMode+0x74>)
 800109c:	22ff      	movs	r2, #255	; 0xff
 800109e:	715a      	strb	r2, [r3, #5]
	m2Tx_can_data[6] = 0xFF;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <EnterMotorMode+0x74>)
 80010a2:	22ff      	movs	r2, #255	; 0xff
 80010a4:	719a      	strb	r2, [r3, #6]
	m2Tx_can_data[7] = 0xFC;
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <EnterMotorMode+0x74>)
 80010a8:	22fc      	movs	r2, #252	; 0xfc
 80010aa:	71da      	strb	r2, [r3, #7]

    //WriteAll();
    }
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	200003d0 	.word	0x200003d0
 80010bc:	200003e4 	.word	0x200003e4

080010c0 <ExitMotorMode>:

void ExitMotorMode(){	//アームBLDC OFFコマンド
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
	m1Tx_can_data[0] = 0xFF;
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <ExitMotorMode+0x70>)
 80010c6:	22ff      	movs	r2, #255	; 0xff
 80010c8:	701a      	strb	r2, [r3, #0]
	m1Tx_can_data[1] = 0xFF;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <ExitMotorMode+0x70>)
 80010cc:	22ff      	movs	r2, #255	; 0xff
 80010ce:	705a      	strb	r2, [r3, #1]
	m1Tx_can_data[2] = 0xFF;
 80010d0:	4b17      	ldr	r3, [pc, #92]	; (8001130 <ExitMotorMode+0x70>)
 80010d2:	22ff      	movs	r2, #255	; 0xff
 80010d4:	709a      	strb	r2, [r3, #2]
	m1Tx_can_data[3] = 0xFF;
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <ExitMotorMode+0x70>)
 80010d8:	22ff      	movs	r2, #255	; 0xff
 80010da:	70da      	strb	r2, [r3, #3]
	m1Tx_can_data[4] = 0xFF;
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <ExitMotorMode+0x70>)
 80010de:	22ff      	movs	r2, #255	; 0xff
 80010e0:	711a      	strb	r2, [r3, #4]
	m1Tx_can_data[5] = 0xFF;
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <ExitMotorMode+0x70>)
 80010e4:	22ff      	movs	r2, #255	; 0xff
 80010e6:	715a      	strb	r2, [r3, #5]
	m1Tx_can_data[6] = 0xFF;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <ExitMotorMode+0x70>)
 80010ea:	22ff      	movs	r2, #255	; 0xff
 80010ec:	719a      	strb	r2, [r3, #6]
	m1Tx_can_data[7] = 0xFD;
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <ExitMotorMode+0x70>)
 80010f0:	22fd      	movs	r2, #253	; 0xfd
 80010f2:	71da      	strb	r2, [r3, #7]

	m2Tx_can_data[0] = 0xFF;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <ExitMotorMode+0x74>)
 80010f6:	22ff      	movs	r2, #255	; 0xff
 80010f8:	701a      	strb	r2, [r3, #0]
	m2Tx_can_data[1] = 0xFF;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <ExitMotorMode+0x74>)
 80010fc:	22ff      	movs	r2, #255	; 0xff
 80010fe:	705a      	strb	r2, [r3, #1]
	m2Tx_can_data[2] = 0xFF;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <ExitMotorMode+0x74>)
 8001102:	22ff      	movs	r2, #255	; 0xff
 8001104:	709a      	strb	r2, [r3, #2]
	m2Tx_can_data[3] = 0xFF;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <ExitMotorMode+0x74>)
 8001108:	22ff      	movs	r2, #255	; 0xff
 800110a:	70da      	strb	r2, [r3, #3]
	m2Tx_can_data[4] = 0xFF;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <ExitMotorMode+0x74>)
 800110e:	22ff      	movs	r2, #255	; 0xff
 8001110:	711a      	strb	r2, [r3, #4]
	m2Tx_can_data[5] = 0xFF;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <ExitMotorMode+0x74>)
 8001114:	22ff      	movs	r2, #255	; 0xff
 8001116:	715a      	strb	r2, [r3, #5]
	m2Tx_can_data[6] = 0xFF;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <ExitMotorMode+0x74>)
 800111a:	22ff      	movs	r2, #255	; 0xff
 800111c:	719a      	strb	r2, [r3, #6]
	m2Tx_can_data[7] = 0xFD;
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <ExitMotorMode+0x74>)
 8001120:	22fd      	movs	r2, #253	; 0xfd
 8001122:	71da      	strb	r2, [r3, #7]
    //WriteAll();
    }
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	200003d0 	.word	0x200003d0
 8001134:	200003e4 	.word	0x200003e4

08001138 <pack_cmd>:
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());

	end_flag=1;

}
void pack_cmd(float _p_des, float _v_des, float _kp, float _kd, float _t_ff){	//floatのradをcanで送れるuint8に変換
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	b094      	sub	sp, #80	; 0x50
 800113c:	af00      	add	r7, sp, #0
 800113e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001142:	edc7 0a04 	vstr	s1, [r7, #16]
 8001146:	ed87 1a03 	vstr	s2, [r7, #12]
 800114a:	edc7 1a02 	vstr	s3, [r7, #8]
 800114e:	ed87 2a01 	vstr	s4, [r7, #4]
	uint8_t tx_can_data[20];

	/// limit data to be within bounds ///
	float p_des = fminf(fmaxf(P_MIN, _p_des), P_MAX);
 8001152:	edd7 0a05 	vldr	s1, [r7, #20]
 8001156:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800115a:	f002 fbfb 	bl	8003954 <fmaxf>
 800115e:	eef0 7a40 	vmov.f32	s15, s0
 8001162:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 8001166:	eeb0 0a67 	vmov.f32	s0, s15
 800116a:	f002 fc0f 	bl	800398c <fminf>
 800116e:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
	float v_des = fminf(fmaxf(V_MIN, _v_des), V_MAX);
 8001172:	edd7 0a04 	vldr	s1, [r7, #16]
 8001176:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8001300 <pack_cmd+0x1c8>
 800117a:	f002 fbeb 	bl	8003954 <fmaxf>
 800117e:	eef0 7a40 	vmov.f32	s15, s0
 8001182:	eddf 0a60 	vldr	s1, [pc, #384]	; 8001304 <pack_cmd+0x1cc>
 8001186:	eeb0 0a67 	vmov.f32	s0, s15
 800118a:	f002 fbff 	bl	800398c <fminf>
 800118e:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	float kp = fminf(fmaxf(KP_MIN, _kp), KP_MAX);
 8001192:	edd7 0a03 	vldr	s1, [r7, #12]
 8001196:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8001308 <pack_cmd+0x1d0>
 800119a:	f002 fbdb 	bl	8003954 <fmaxf>
 800119e:	eef0 7a40 	vmov.f32	s15, s0
 80011a2:	eddf 0a5a 	vldr	s1, [pc, #360]	; 800130c <pack_cmd+0x1d4>
 80011a6:	eeb0 0a67 	vmov.f32	s0, s15
 80011aa:	f002 fbef 	bl	800398c <fminf>
 80011ae:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
	float kd = fminf(fmaxf(KD_MIN, _kd), KD_MAX);
 80011b2:	edd7 0a02 	vldr	s1, [r7, #8]
 80011b6:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8001308 <pack_cmd+0x1d0>
 80011ba:	f002 fbcb 	bl	8003954 <fmaxf>
 80011be:	eef0 7a40 	vmov.f32	s15, s0
 80011c2:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80011c6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ca:	f002 fbdf 	bl	800398c <fminf>
 80011ce:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
	float t_ff = fminf(fmaxf(T_MIN, _t_ff), T_MAX);
 80011d2:	edd7 0a01 	vldr	s1, [r7, #4]
 80011d6:	eebb 0a02 	vmov.f32	s0, #178	; 0xc1900000 -18.0
 80011da:	f002 fbbb 	bl	8003954 <fmaxf>
 80011de:	eef0 7a40 	vmov.f32	s15, s0
 80011e2:	eef3 0a02 	vmov.f32	s1, #50	; 0x41900000  18.0
 80011e6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ea:	f002 fbcf 	bl	800398c <fminf>
 80011ee:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	/// convert floats to unsigned ints ///
	uint16_t p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);
 80011f2:	2010      	movs	r0, #16
 80011f4:	eeb2 1a09 	vmov.f32	s2, #41	; 0x41480000  12.5
 80011f8:	eefa 0a09 	vmov.f32	s1, #169	; 0xc1480000 -12.5
 80011fc:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001200:	f002 fbe0 	bl	80039c4 <float_to_uint>
 8001204:	4603      	mov	r3, r0
 8001206:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint16_t v_int = float_to_uint(v_des, V_MIN, V_MAX, 12);
 8001208:	200c      	movs	r0, #12
 800120a:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 8001304 <pack_cmd+0x1cc>
 800120e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8001300 <pack_cmd+0x1c8>
 8001212:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001216:	f002 fbd5 	bl	80039c4 <float_to_uint>
 800121a:	4603      	mov	r3, r0
 800121c:	873b      	strh	r3, [r7, #56]	; 0x38
	uint16_t kp_int = float_to_uint(kp, KP_MIN, KP_MAX, 12);
 800121e:	200c      	movs	r0, #12
 8001220:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 800130c <pack_cmd+0x1d4>
 8001224:	eddf 0a38 	vldr	s1, [pc, #224]	; 8001308 <pack_cmd+0x1d0>
 8001228:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 800122c:	f002 fbca 	bl	80039c4 <float_to_uint>
 8001230:	4603      	mov	r3, r0
 8001232:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t kd_int = float_to_uint(kd, KD_MIN, KD_MAX, 12);
 8001234:	200c      	movs	r0, #12
 8001236:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 800123a:	eddf 0a33 	vldr	s1, [pc, #204]	; 8001308 <pack_cmd+0x1d0>
 800123e:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8001242:	f002 fbbf 	bl	80039c4 <float_to_uint>
 8001246:	4603      	mov	r3, r0
 8001248:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t t_int = float_to_uint(t_ff, T_MIN, T_MAX, 12);
 800124a:	200c      	movs	r0, #12
 800124c:	eeb3 1a02 	vmov.f32	s2, #50	; 0x41900000  18.0
 8001250:	eefb 0a02 	vmov.f32	s1, #178	; 0xc1900000 -18.0
 8001254:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001258:	f002 fbb4 	bl	80039c4 <float_to_uint>
 800125c:	4603      	mov	r3, r0
 800125e:	867b      	strh	r3, [r7, #50]	; 0x32
	/// pack ints into the can buffer ///
	tx_can_data[0] = p_int>>8;
 8001260:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001262:	0a1b      	lsrs	r3, r3, #8
 8001264:	b29b      	uxth	r3, r3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	773b      	strb	r3, [r7, #28]
	tx_can_data[1] = p_int&0xFF;
 800126a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800126c:	b2db      	uxtb	r3, r3
 800126e:	777b      	strb	r3, [r7, #29]
	tx_can_data[2] = v_int>>4;
 8001270:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001272:	091b      	lsrs	r3, r3, #4
 8001274:	b29b      	uxth	r3, r3
 8001276:	b2db      	uxtb	r3, r3
 8001278:	77bb      	strb	r3, [r7, #30]
	tx_can_data[3] = ((v_int&0xF)<<4)|(kp_int>>8);
 800127a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	b25a      	sxtb	r2, r3
 8001280:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001282:	0a1b      	lsrs	r3, r3, #8
 8001284:	b29b      	uxth	r3, r3
 8001286:	b25b      	sxtb	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b25b      	sxtb	r3, r3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	77fb      	strb	r3, [r7, #31]
	tx_can_data[4] = kp_int&0xFF;
 8001290:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001292:	b2db      	uxtb	r3, r3
 8001294:	f887 3020 	strb.w	r3, [r7, #32]
	tx_can_data[5] = kd_int>>4;
 8001298:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800129a:	091b      	lsrs	r3, r3, #4
 800129c:	b29b      	uxth	r3, r3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	tx_can_data[6] = ((kd_int&0xF)<<4)|(t_int>>8);
 80012a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012a6:	011b      	lsls	r3, r3, #4
 80012a8:	b25a      	sxtb	r2, r3
 80012aa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	b25b      	sxtb	r3, r3
 80012b2:	4313      	orrs	r3, r2
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	tx_can_data[7] = t_int&0xFF;
 80012bc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if(canid==0x01){
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <pack_cmd+0x1d8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d108      	bne.n	80012de <pack_cmd+0x1a6>
		memcpy(m1Tx_can_data,tx_can_data,sizeof(m1Tx_can_data));
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <pack_cmd+0x1dc>)
 80012ce:	461d      	mov	r5, r3
 80012d0:	f107 041c 	add.w	r4, r7, #28
 80012d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012d8:	6823      	ldr	r3, [r4, #0]
 80012da:	602b      	str	r3, [r5, #0]
	}else if(canid==0x02){
		memcpy(m2Tx_can_data,tx_can_data,sizeof(m2Tx_can_data));
	}

}
 80012dc:	e00b      	b.n	80012f6 <pack_cmd+0x1be>
	}else if(canid==0x02){
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <pack_cmd+0x1d8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d107      	bne.n	80012f6 <pack_cmd+0x1be>
		memcpy(m2Tx_can_data,tx_can_data,sizeof(m2Tx_can_data));
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <pack_cmd+0x1e0>)
 80012e8:	461d      	mov	r5, r3
 80012ea:	f107 041c 	add.w	r4, r7, #28
 80012ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f2:	6823      	ldr	r3, [r4, #0]
 80012f4:	602b      	str	r3, [r5, #0]
}
 80012f6:	bf00      	nop
 80012f8:	3750      	adds	r7, #80	; 0x50
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bdb0      	pop	{r4, r5, r7, pc}
 80012fe:	bf00      	nop
 8001300:	c2820000 	.word	0xc2820000
 8001304:	42820000 	.word	0x42820000
 8001308:	00000000 	.word	0x00000000
 800130c:	43fa0000 	.word	0x43fa0000
 8001310:	20000410 	.word	0x20000410
 8001314:	200003d0 	.word	0x200003d0
 8001318:	200003e4 	.word	0x200003e4

0800131c <BLDC_CANTx>:
void BLDC_CANTx(){	//BLDCにcanを送る
 800131c:	b5b0      	push	{r4, r5, r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
	uint8_t BLDC_can_data[20];
	TxHeader.StdId=canid;
 8001322:	4b22      	ldr	r3, [pc, #136]	; (80013ac <BLDC_CANTx+0x90>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a22      	ldr	r2, [pc, #136]	; (80013b0 <BLDC_CANTx+0x94>)
 8001328:	6013      	str	r3, [r2, #0]
	TxHeader.IDE = CAN_ID_STD;
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <BLDC_CANTx+0x94>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 0x08;
 8001330:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <BLDC_CANTx+0x94>)
 8001332:	2208      	movs	r2, #8
 8001334:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <BLDC_CANTx+0x94>)
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <BLDC_CANTx+0x94>)
 800133e:	2200      	movs	r2, #0
 8001340:	751a      	strb	r2, [r3, #20]
//	HAL_CAN_AddTxMessage(&hcan1,&TxHeader,data,&TxMailbox);
//	HAL_Delay(10);

//	int i = 0;
	int count=0;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
	uint8_t can_mailboxflag=0;
 8001346:	2300      	movs	r3, #0
 8001348:	76fb      	strb	r3, [r7, #27]
	//HAL_CAN_GetTxMailboxesFreeLevelがあくまで待機
	if(canid==0x01){
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <BLDC_CANTx+0x90>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d107      	bne.n	8001362 <BLDC_CANTx+0x46>
		memcpy(BLDC_can_data,m1Tx_can_data,sizeof(m1Tx_can_data));
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <BLDC_CANTx+0x98>)
 8001354:	1d3c      	adds	r4, r7, #4
 8001356:	461d      	mov	r5, r3
 8001358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135c:	682b      	ldr	r3, [r5, #0]
 800135e:	6023      	str	r3, [r4, #0]
 8001360:	e00a      	b.n	8001378 <BLDC_CANTx+0x5c>
	}else if(canid==0x02){
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <BLDC_CANTx+0x90>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d106      	bne.n	8001378 <BLDC_CANTx+0x5c>
		memcpy(BLDC_can_data,m2Tx_can_data,sizeof(m2Tx_can_data));
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <BLDC_CANTx+0x9c>)
 800136c:	1d3c      	adds	r4, r7, #4
 800136e:	461d      	mov	r5, r3
 8001370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001374:	682b      	ldr	r3, [r5, #0]
 8001376:	6023      	str	r3, [r4, #0]
	}

	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)==0){}
 8001378:	bf00      	nop
 800137a:	4810      	ldr	r0, [pc, #64]	; (80013bc <BLDC_CANTx+0xa0>)
 800137c:	f003 f9c5 	bl	800470a <HAL_CAN_GetTxMailboxesFreeLevel>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f9      	beq.n	800137a <BLDC_CANTx+0x5e>
	HAL_CAN_AddTxMessage(&hcan1,&TxHeader,BLDC_can_data,&TxMailbox);
 8001386:	1d3a      	adds	r2, r7, #4
 8001388:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <BLDC_CANTx+0xa4>)
 800138a:	4909      	ldr	r1, [pc, #36]	; (80013b0 <BLDC_CANTx+0x94>)
 800138c:	480b      	ldr	r0, [pc, #44]	; (80013bc <BLDC_CANTx+0xa0>)
 800138e:	f003 f8e1 	bl	8004554 <HAL_CAN_AddTxMessage>
	HAL_Delay(10);
 8001392:	200a      	movs	r0, #10
 8001394:	f002 fe9a 	bl	80040cc <HAL_Delay>
//				HAL_CAN_Stop (&hcan1);
//				HAL_CAN_Start(&hcan1);
//			}
//		}
//	}
	nextcan_flag=0;
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <BLDC_CANTx+0xa8>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
	count=0;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
//		HAL_CAN_Stop (&hcan1);
//		HAL_CAN_Start(&hcan1);
//		nextcan_flag=1;
//		get_can_flag=1;
//	}
}
 80013a2:	bf00      	nop
 80013a4:	3720      	adds	r7, #32
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bdb0      	pop	{r4, r5, r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000410 	.word	0x20000410
 80013b0:	20000324 	.word	0x20000324
 80013b4:	200003d0 	.word	0x200003d0
 80013b8:	200003e4 	.word	0x200003e4
 80013bc:	20000204 	.word	0x20000204
 80013c0:	2000040c 	.word	0x2000040c
 80013c4:	20000417 	.word	0x20000417

080013c8 <unpack_reply>:

void unpack_reply(){	//canで受け取ったデータをfloatに変換
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
	uint16_t id ;
	uint16_t p_int ;
	uint16_t v_int ;
	uint16_t i_int ;

	if(canid==0x01){
 80013ce:	4b44      	ldr	r3, [pc, #272]	; (80014e0 <unpack_reply+0x118>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d106      	bne.n	80013e4 <unpack_reply+0x1c>
		memcpy(BLDC_can_data,m1Rx_can_data,sizeof(m1Rx_can_data));
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2214      	movs	r2, #20
 80013da:	4942      	ldr	r1, [pc, #264]	; (80014e4 <unpack_reply+0x11c>)
 80013dc:	4618      	mov	r0, r3
 80013de:	f007 f8b9 	bl	8008554 <memcpy>
 80013e2:	e009      	b.n	80013f8 <unpack_reply+0x30>
	}else if(canid==0x02){
 80013e4:	4b3e      	ldr	r3, [pc, #248]	; (80014e0 <unpack_reply+0x118>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d105      	bne.n	80013f8 <unpack_reply+0x30>
		memcpy(BLDC_can_data,m2Rx_can_data,sizeof(m2Rx_can_data));
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2214      	movs	r2, #20
 80013f0:	493d      	ldr	r1, [pc, #244]	; (80014e8 <unpack_reply+0x120>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f007 f8ae 	bl	8008554 <memcpy>
	}
	id = BLDC_can_data[0];
 80013f8:	793b      	ldrb	r3, [r7, #4]
 80013fa:	83fb      	strh	r3, [r7, #30]
	p_int = (BLDC_can_data[1]<<8)|BLDC_can_data[2];
 80013fc:	797b      	ldrb	r3, [r7, #5]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b21a      	sxth	r2, r3
 8001402:	79bb      	ldrb	r3, [r7, #6]
 8001404:	b21b      	sxth	r3, r3
 8001406:	4313      	orrs	r3, r2
 8001408:	b21b      	sxth	r3, r3
 800140a:	83bb      	strh	r3, [r7, #28]
	v_int = (BLDC_can_data[3]<<4)|(BLDC_can_data[4]>>4);
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	b21a      	sxth	r2, r3
 8001412:	7a3b      	ldrb	r3, [r7, #8]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	b2db      	uxtb	r3, r3
 8001418:	b21b      	sxth	r3, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	b21b      	sxth	r3, r3
 800141e:	837b      	strh	r3, [r7, #26]
	i_int = ((BLDC_can_data[4]&0xF)<<8)|BLDC_can_data[5];
 8001420:	7a3b      	ldrb	r3, [r7, #8]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	b21b      	sxth	r3, r3
 8001426:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800142a:	b21a      	sxth	r2, r3
 800142c:	7a7b      	ldrb	r3, [r7, #9]
 800142e:	b21b      	sxth	r3, r3
 8001430:	4313      	orrs	r3, r2
 8001432:	b21b      	sxth	r3, r3
 8001434:	833b      	strh	r3, [r7, #24]

//    p_getintdata=p_int;
    /// convert uints to floats ///
    float p = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001436:	8bbb      	ldrh	r3, [r7, #28]
 8001438:	2110      	movs	r1, #16
 800143a:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 800143e:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 8001442:	4618      	mov	r0, r3
 8001444:	f002 faf1 	bl	8003a2a <uint_to_float>
 8001448:	ed87 0a05 	vstr	s0, [r7, #20]
    float v = uint_to_float(v_int, V_MIN, V_MAX, 12);
 800144c:	8b7b      	ldrh	r3, [r7, #26]
 800144e:	210c      	movs	r1, #12
 8001450:	eddf 0a26 	vldr	s1, [pc, #152]	; 80014ec <unpack_reply+0x124>
 8001454:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80014f0 <unpack_reply+0x128>
 8001458:	4618      	mov	r0, r3
 800145a:	f002 fae6 	bl	8003a2a <uint_to_float>
 800145e:	ed87 0a04 	vstr	s0, [r7, #16]
    float t = uint_to_float(i_int, -T_MAX, T_MAX, 12);
 8001462:	8b3b      	ldrh	r3, [r7, #24]
 8001464:	210c      	movs	r1, #12
 8001466:	eef3 0a02 	vmov.f32	s1, #50	; 0x41900000  18.0
 800146a:	eebb 0a02 	vmov.f32	s0, #178	; 0xc1900000 -18.0
 800146e:	4618      	mov	r0, r3
 8001470:	f002 fadb 	bl	8003a2a <uint_to_float>
 8001474:	ed87 0a03 	vstr	s0, [r7, #12]
    p_getdata=p;
 8001478:	4a1e      	ldr	r2, [pc, #120]	; (80014f4 <unpack_reply+0x12c>)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	6013      	str	r3, [r2, #0]

    if(id==0x01){
 800147e:	8bfb      	ldrh	r3, [r7, #30]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d108      	bne.n	8001496 <unpack_reply+0xce>
    	p_getdata_s1=(-p_getdata);
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <unpack_reply+0x12c>)
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	eef1 7a67 	vneg.f32	s15, s15
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <unpack_reply+0x130>)
 8001490:	edc3 7a00 	vstr	s15, [r3]
    }else if(id==0x02)
    {
    	p_getdata_s2=(-p_getdata+M_PI);
    }
}
 8001494:	e01a      	b.n	80014cc <unpack_reply+0x104>
    }else if(id==0x02)
 8001496:	8bfb      	ldrh	r3, [r7, #30]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d117      	bne.n	80014cc <unpack_reply+0x104>
    	p_getdata_s2=(-p_getdata+M_PI);
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <unpack_reply+0x12c>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	eef1 7a67 	vneg.f32	s15, s15
 80014a6:	ee17 3a90 	vmov	r3, s15
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f86c 	bl	8000588 <__aeabi_f2d>
 80014b0:	a309      	add	r3, pc, #36	; (adr r3, 80014d8 <unpack_reply+0x110>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7fe ff09 	bl	80002cc <__adddf3>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f7ff fb91 	bl	8000be8 <__aeabi_d2f>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4a0c      	ldr	r2, [pc, #48]	; (80014fc <unpack_reply+0x134>)
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	f3af 8000 	nop.w
 80014d8:	54442d18 	.word	0x54442d18
 80014dc:	400921fb 	.word	0x400921fb
 80014e0:	20000410 	.word	0x20000410
 80014e4:	20000394 	.word	0x20000394
 80014e8:	200003a8 	.word	0x200003a8
 80014ec:	42820000 	.word	0x42820000
 80014f0:	c2820000 	.word	0xc2820000
 80014f4:	2000041c 	.word	0x2000041c
 80014f8:	20000420 	.word	0x20000420
 80014fc:	20000424 	.word	0x20000424

08001500 <RMDTx>:
void RMDTx(){	//RMDへのca
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
	int count=0;
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
	uint8_t can_mailboxflag=0;
 800150a:	2300      	movs	r3, #0
 800150c:	70fb      	strb	r3, [r7, #3]
	TxHeader.StdId=0x141;
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <RMDTx+0x68>)
 8001510:	f240 1241 	movw	r2, #321	; 0x141
 8001514:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <RMDTx+0x68>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 0x08;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <RMDTx+0x68>)
 800151e:	2208      	movs	r2, #8
 8001520:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <RMDTx+0x68>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <RMDTx+0x68>)
 800152a:	2200      	movs	r2, #0
 800152c:	751a      	strb	r2, [r3, #20]
	TxData[1] = 0x00;
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <RMDTx+0x6c>)
 8001530:	2200      	movs	r2, #0
 8001532:	705a      	strb	r2, [r3, #1]

	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)==0){}
 8001534:	bf00      	nop
 8001536:	480e      	ldr	r0, [pc, #56]	; (8001570 <RMDTx+0x70>)
 8001538:	f003 f8e7 	bl	800470a <HAL_CAN_GetTxMailboxesFreeLevel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f9      	beq.n	8001536 <RMDTx+0x36>
	HAL_CAN_AddTxMessage(&hcan1,&TxHeader,RMDTx_can_data,&TxMailbox);
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <RMDTx+0x74>)
 8001544:	4a0c      	ldr	r2, [pc, #48]	; (8001578 <RMDTx+0x78>)
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <RMDTx+0x68>)
 8001548:	4809      	ldr	r0, [pc, #36]	; (8001570 <RMDTx+0x70>)
 800154a:	f003 f803 	bl	8004554 <HAL_CAN_AddTxMessage>
	HAL_Delay(10);
 800154e:	200a      	movs	r0, #10
 8001550:	f002 fdbc 	bl	80040cc <HAL_Delay>

	nextcan_flag=0;
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <RMDTx+0x7c>)
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
	count=0;
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000324 	.word	0x20000324
 800156c:	20000358 	.word	0x20000358
 8001570:	20000204 	.word	0x20000204
 8001574:	2000040c 	.word	0x2000040c
 8001578:	200003f8 	.word	0x200003f8
 800157c:	20000417 	.word	0x20000417

08001580 <BLDC_MotorRotate>:
	TxData[19]=0xAA;
	HAL_UART_Transmit(&huart2,TxData,sizeof(TxData),100);

}

void BLDC_MotorRotate(){
 8001580:	b580      	push	{r7, lr}
 8001582:	b094      	sub	sp, #80	; 0x50
 8001584:	af00      	add	r7, sp, #0
	float count_rad=0.05;
 8001586:	4baa      	ldr	r3, [pc, #680]	; (8001830 <BLDC_MotorRotate+0x2b0>)
 8001588:	623b      	str	r3, [r7, #32]
	float set_Kp=40.0;
 800158a:	4baa      	ldr	r3, [pc, #680]	; (8001834 <BLDC_MotorRotate+0x2b4>)
 800158c:	61fb      	str	r3, [r7, #28]
	float setMax_kp=150.0;
 800158e:	4baa      	ldr	r3, [pc, #680]	; (8001838 <BLDC_MotorRotate+0x2b8>)
 8001590:	61bb      	str	r3, [r7, #24]
	uint8_t count_end=0;
 8001592:	2300      	movs	r3, #0
 8001594:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint32_t canid_select_far;
	uint32_t canid_select_near;
	float far_dis_dir=0;
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	643b      	str	r3, [r7, #64]	; 0x40
	float near_dis_dir=0;
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	float running_pos[2];
	float far_dis;
	float near_dis;
	float i=0.0;
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
	float m2_startpos;
	float m1_target_pos;
	float m2_target_pos;
	float far_getpos;
	float near_getpos;
	canid=0x01;
 80015aa:	4ba4      	ldr	r3, [pc, #656]	; (800183c <BLDC_MotorRotate+0x2bc>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 2.0, 0.0);	//現在の場所の所得
 80015b0:	ed9f 2aa3 	vldr	s4, [pc, #652]	; 8001840 <BLDC_MotorRotate+0x2c0>
 80015b4:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 80015b8:	ed9f 1aa1 	vldr	s2, [pc, #644]	; 8001840 <BLDC_MotorRotate+0x2c0>
 80015bc:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8001840 <BLDC_MotorRotate+0x2c0>
 80015c0:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 8001840 <BLDC_MotorRotate+0x2c0>
 80015c4:	f7ff fdb8 	bl	8001138 <pack_cmd>
	BLDC_CANTx();
 80015c8:	f7ff fea8 	bl	800131c <BLDC_CANTx>
	unpack_reply();
 80015cc:	f7ff fefc 	bl	80013c8 <unpack_reply>
	HAL_Delay(50);
 80015d0:	2032      	movs	r0, #50	; 0x32
 80015d2:	f002 fd7b 	bl	80040cc <HAL_Delay>
	m1_startpos=p_getdata;
 80015d6:	4b9b      	ldr	r3, [pc, #620]	; (8001844 <BLDC_MotorRotate+0x2c4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	617b      	str	r3, [r7, #20]
	m1_target_pos=-t_position[0];
 80015dc:	4b9a      	ldr	r3, [pc, #616]	; (8001848 <BLDC_MotorRotate+0x2c8>)
 80015de:	edd3 7a00 	vldr	s15, [r3]
 80015e2:	eef1 7a67 	vneg.f32	s15, s15
 80015e6:	edc7 7a04 	vstr	s15, [r7, #16]
	running_pos[0]=fabsf(m1_target_pos-m1_startpos);	//目標地点ー現在の地点＝移動距離
 80015ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80015ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80015f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f6:	eef0 7ae7 	vabs.f32	s15, s15
 80015fa:	edc7 7a00 	vstr	s15, [r7]
	canid=0x02;
 80015fe:	4b8f      	ldr	r3, [pc, #572]	; (800183c <BLDC_MotorRotate+0x2bc>)
 8001600:	2202      	movs	r2, #2
 8001602:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 2.0, 0.0);	//現在の場所の所得
 8001604:	ed9f 2a8e 	vldr	s4, [pc, #568]	; 8001840 <BLDC_MotorRotate+0x2c0>
 8001608:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 800160c:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 8001840 <BLDC_MotorRotate+0x2c0>
 8001610:	eddf 0a8b 	vldr	s1, [pc, #556]	; 8001840 <BLDC_MotorRotate+0x2c0>
 8001614:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8001840 <BLDC_MotorRotate+0x2c0>
 8001618:	f7ff fd8e 	bl	8001138 <pack_cmd>
	BLDC_CANTx();
 800161c:	f7ff fe7e 	bl	800131c <BLDC_CANTx>
	unpack_reply();
 8001620:	f7ff fed2 	bl	80013c8 <unpack_reply>
	HAL_Delay(50);
 8001624:	2032      	movs	r0, #50	; 0x32
 8001626:	f002 fd51 	bl	80040cc <HAL_Delay>
	m2_target_pos=(-t_position[1]+M_PI);
 800162a:	4b87      	ldr	r3, [pc, #540]	; (8001848 <BLDC_MotorRotate+0x2c8>)
 800162c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001630:	eef1 7a67 	vneg.f32	s15, s15
 8001634:	ee17 3a90 	vmov	r3, s15
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ffa5 	bl	8000588 <__aeabi_f2d>
 800163e:	a37a      	add	r3, pc, #488	; (adr r3, 8001828 <BLDC_MotorRotate+0x2a8>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7fe fe42 	bl	80002cc <__adddf3>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff faca 	bl	8000be8 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	60fb      	str	r3, [r7, #12]
	m2_startpos=p_getdata;
 8001658:	4b7a      	ldr	r3, [pc, #488]	; (8001844 <BLDC_MotorRotate+0x2c4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60bb      	str	r3, [r7, #8]
	running_pos[1]=fabsf(m2_target_pos-m2_startpos);
 800165e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001662:	edd7 7a02 	vldr	s15, [r7, #8]
 8001666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800166a:	eef0 7ae7 	vabs.f32	s15, s15
 800166e:	edc7 7a01 	vstr	s15, [r7, #4]

	if(running_pos[0]>running_pos[1]){
 8001672:	ed97 7a00 	vldr	s14, [r7]
 8001676:	edd7 7a01 	vldr	s15, [r7, #4]
 800167a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001682:	dd2c      	ble.n	80016de <BLDC_MotorRotate+0x15e>
		far_dis=running_pos[0];
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	63bb      	str	r3, [r7, #56]	; 0x38
		near_dis=running_pos[1];
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	637b      	str	r3, [r7, #52]	; 0x34
		canid_select_far=0x01;
 800168c:	2301      	movs	r3, #1
 800168e:	64bb      	str	r3, [r7, #72]	; 0x48
		canid_select_near=0x02;
 8001690:	2302      	movs	r3, #2
 8001692:	647b      	str	r3, [r7, #68]	; 0x44
		far_getpos=m1_startpos;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
		near_getpos=m2_startpos;
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
		far_dis_dir=((m1_target_pos-m1_startpos)>=0)?1:-1;
 800169c:	ed97 7a04 	vldr	s14, [r7, #16]
 80016a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80016a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b0:	db02      	blt.n	80016b8 <BLDC_MotorRotate+0x138>
 80016b2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80016b6:	e000      	b.n	80016ba <BLDC_MotorRotate+0x13a>
 80016b8:	4b64      	ldr	r3, [pc, #400]	; (800184c <BLDC_MotorRotate+0x2cc>)
 80016ba:	643b      	str	r3, [r7, #64]	; 0x40
		near_dis_dir=((m2_target_pos-(m2_startpos))>=0)?1:-1;
 80016bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80016c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80016c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d0:	db02      	blt.n	80016d8 <BLDC_MotorRotate+0x158>
 80016d2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80016d6:	e000      	b.n	80016da <BLDC_MotorRotate+0x15a>
 80016d8:	4b5c      	ldr	r3, [pc, #368]	; (800184c <BLDC_MotorRotate+0x2cc>)
 80016da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016dc:	e02b      	b.n	8001736 <BLDC_MotorRotate+0x1b6>

	}else{
		far_dis=running_pos[1];
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	63bb      	str	r3, [r7, #56]	; 0x38
		near_dis=running_pos[0];
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	637b      	str	r3, [r7, #52]	; 0x34
		canid_select_far=0x02;
 80016e6:	2302      	movs	r3, #2
 80016e8:	64bb      	str	r3, [r7, #72]	; 0x48
		canid_select_near=0x01;
 80016ea:	2301      	movs	r3, #1
 80016ec:	647b      	str	r3, [r7, #68]	; 0x44
		far_getpos=m2_startpos;
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		near_getpos=m1_startpos;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
		far_dis_dir=((m2_target_pos-m2_startpos)>=0)?1:-1;
 80016f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80016fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80016fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001702:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170a:	db02      	blt.n	8001712 <BLDC_MotorRotate+0x192>
 800170c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001710:	e000      	b.n	8001714 <BLDC_MotorRotate+0x194>
 8001712:	4b4e      	ldr	r3, [pc, #312]	; (800184c <BLDC_MotorRotate+0x2cc>)
 8001714:	643b      	str	r3, [r7, #64]	; 0x40
		near_dis_dir=((m1_target_pos-m1_startpos)>=0)?1:-1;
 8001716:	ed97 7a04 	vldr	s14, [r7, #16]
 800171a:	edd7 7a05 	vldr	s15, [r7, #20]
 800171e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001722:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172a:	db02      	blt.n	8001732 <BLDC_MotorRotate+0x1b2>
 800172c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001730:	e000      	b.n	8001734 <BLDC_MotorRotate+0x1b4>
 8001732:	4b46      	ldr	r3, [pc, #280]	; (800184c <BLDC_MotorRotate+0x2cc>)
 8001734:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (far_dis>count_rad){
 8001736:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800173a:	edd7 7a08 	vldr	s15, [r7, #32]
 800173e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001746:	dd69      	ble.n	800181c <BLDC_MotorRotate+0x29c>
		while(!count_end&&!motion_stop_flag){
 8001748:	e060      	b.n	800180c <BLDC_MotorRotate+0x28c>
			i+=(far_dis_dir*count_rad);
 800174a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800174e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001756:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800175a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800175e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			if(fabsf(i)<far_dis){
 8001762:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001766:	eef0 7ae7 	vabs.f32	s15, s15
 800176a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800176e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001776:	dd46      	ble.n	8001806 <BLDC_MotorRotate+0x286>
				canid=canid_select_far;
 8001778:	4a30      	ldr	r2, [pc, #192]	; (800183c <BLDC_MotorRotate+0x2bc>)
 800177a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800177c:	6013      	str	r3, [r2, #0]
				pack_cmd(far_getpos+i, 0.0, set_Kp, 3.0, 0.0);	//現在の場所の所得
 800177e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001782:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178a:	ed9f 2a2d 	vldr	s4, [pc, #180]	; 8001840 <BLDC_MotorRotate+0x2c0>
 800178e:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8001792:	ed97 1a07 	vldr	s2, [r7, #28]
 8001796:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8001840 <BLDC_MotorRotate+0x2c0>
 800179a:	eeb0 0a67 	vmov.f32	s0, s15
 800179e:	f7ff fccb 	bl	8001138 <pack_cmd>
				BLDC_CANTx();
 80017a2:	f7ff fdbb 	bl	800131c <BLDC_CANTx>
				unpack_reply();
 80017a6:	f7ff fe0f 	bl	80013c8 <unpack_reply>
				HAL_Delay(20);
 80017aa:	2014      	movs	r0, #20
 80017ac:	f002 fc8e 	bl	80040cc <HAL_Delay>
				canid=canid_select_near;
 80017b0:	4a22      	ldr	r2, [pc, #136]	; (800183c <BLDC_MotorRotate+0x2bc>)
 80017b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017b4:	6013      	str	r3, [r2, #0]
				pack_cmd(near_getpos+fabsf(i)*(near_dis/far_dis)*near_dis_dir, 0.0, set_Kp, 3.0, 0.0);	//現在の場所の所得
 80017b6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80017ba:	eeb0 7ae7 	vabs.f32	s14, s15
 80017be:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 80017c2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80017c6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80017ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ce:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80017d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017de:	ed9f 2a18 	vldr	s4, [pc, #96]	; 8001840 <BLDC_MotorRotate+0x2c0>
 80017e2:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 80017e6:	ed97 1a07 	vldr	s2, [r7, #28]
 80017ea:	eddf 0a15 	vldr	s1, [pc, #84]	; 8001840 <BLDC_MotorRotate+0x2c0>
 80017ee:	eeb0 0a67 	vmov.f32	s0, s15
 80017f2:	f7ff fca1 	bl	8001138 <pack_cmd>
				BLDC_CANTx();
 80017f6:	f7ff fd91 	bl	800131c <BLDC_CANTx>
				unpack_reply();
 80017fa:	f7ff fde5 	bl	80013c8 <unpack_reply>
//				sent_position();
//				RMDZero();
				HAL_Delay(20);
 80017fe:	2014      	movs	r0, #20
 8001800:	f002 fc64 	bl	80040cc <HAL_Delay>
 8001804:	e002      	b.n	800180c <BLDC_MotorRotate+0x28c>
			}
			else{
				count_end=1;
 8001806:	2301      	movs	r3, #1
 8001808:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		while(!count_end&&!motion_stop_flag){
 800180c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001810:	2b00      	cmp	r3, #0
 8001812:	d103      	bne.n	800181c <BLDC_MotorRotate+0x29c>
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <BLDC_MotorRotate+0x2d0>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d096      	beq.n	800174a <BLDC_MotorRotate+0x1ca>
			}
		}
	}
	for(int i=1;i<=50;i++){
 800181c:	2301      	movs	r3, #1
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
 8001820:	e078      	b.n	8001914 <BLDC_MotorRotate+0x394>
 8001822:	bf00      	nop
 8001824:	f3af 8000 	nop.w
 8001828:	54442d18 	.word	0x54442d18
 800182c:	400921fb 	.word	0x400921fb
 8001830:	3d4ccccd 	.word	0x3d4ccccd
 8001834:	42200000 	.word	0x42200000
 8001838:	43160000 	.word	0x43160000
 800183c:	20000410 	.word	0x20000410
 8001840:	00000000 	.word	0x00000000
 8001844:	2000041c 	.word	0x2000041c
 8001848:	20000428 	.word	0x20000428
 800184c:	bf800000 	.word	0xbf800000
 8001850:	20000419 	.word	0x20000419
		if(set_Kp+i*10<=setMax_kp&&!motion_stop_flag){
 8001854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	ee07 3a90 	vmov	s15, r3
 8001862:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001866:	edd7 7a07 	vldr	s15, [r7, #28]
 800186a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001872:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187a:	db46      	blt.n	800190a <BLDC_MotorRotate+0x38a>
 800187c:	4b2b      	ldr	r3, [pc, #172]	; (800192c <BLDC_MotorRotate+0x3ac>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d142      	bne.n	800190a <BLDC_MotorRotate+0x38a>
			canid=0x01;
 8001884:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <BLDC_MotorRotate+0x3b0>)
 8001886:	2201      	movs	r2, #1
 8001888:	601a      	str	r2, [r3, #0]
			pack_cmd(m1_target_pos, 0.0, set_Kp+i*10, 3.0, 0.0);	//現在の場所の所得
 800188a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	ee07 3a90 	vmov	s15, r3
 8001898:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800189c:	edd7 7a07 	vldr	s15, [r7, #28]
 80018a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a4:	ed9f 2a23 	vldr	s4, [pc, #140]	; 8001934 <BLDC_MotorRotate+0x3b4>
 80018a8:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 80018ac:	eeb0 1a67 	vmov.f32	s2, s15
 80018b0:	eddf 0a20 	vldr	s1, [pc, #128]	; 8001934 <BLDC_MotorRotate+0x3b4>
 80018b4:	ed97 0a04 	vldr	s0, [r7, #16]
 80018b8:	f7ff fc3e 	bl	8001138 <pack_cmd>
			BLDC_CANTx();
 80018bc:	f7ff fd2e 	bl	800131c <BLDC_CANTx>
			HAL_Delay(20);
 80018c0:	2014      	movs	r0, #20
 80018c2:	f002 fc03 	bl	80040cc <HAL_Delay>
			canid=0x02;
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <BLDC_MotorRotate+0x3b0>)
 80018c8:	2202      	movs	r2, #2
 80018ca:	601a      	str	r2, [r3, #0]
			pack_cmd(m2_target_pos, 0.0, set_Kp+i*10, 3.0, 0.0);	//現在の場所の所得
 80018cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	ee07 3a90 	vmov	s15, r3
 80018da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018de:	edd7 7a07 	vldr	s15, [r7, #28]
 80018e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e6:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8001934 <BLDC_MotorRotate+0x3b4>
 80018ea:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 80018ee:	eeb0 1a67 	vmov.f32	s2, s15
 80018f2:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001934 <BLDC_MotorRotate+0x3b4>
 80018f6:	ed97 0a03 	vldr	s0, [r7, #12]
 80018fa:	f7ff fc1d 	bl	8001138 <pack_cmd>
			BLDC_CANTx();
 80018fe:	f7ff fd0d 	bl	800131c <BLDC_CANTx>
			HAL_Delay(20);
 8001902:	2014      	movs	r0, #20
 8001904:	f002 fbe2 	bl	80040cc <HAL_Delay>
 8001908:	e001      	b.n	800190e <BLDC_MotorRotate+0x38e>
		}else{	//breakでいいよ
			i=50;
 800190a:	2332      	movs	r3, #50	; 0x32
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=1;i<=50;i++){
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	3301      	adds	r3, #1
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	2b32      	cmp	r3, #50	; 0x32
 8001918:	dd9c      	ble.n	8001854 <BLDC_MotorRotate+0x2d4>
		}
	}
	unpack_reply();
 800191a:	f7ff fd55 	bl	80013c8 <unpack_reply>
//	sent_position();
//	RMDZero();
	motion_stop_flag=0;
 800191e:	4b03      	ldr	r3, [pc, #12]	; (800192c <BLDC_MotorRotate+0x3ac>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
}
 8001924:	bf00      	nop
 8001926:	3750      	adds	r7, #80	; 0x50
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000419 	.word	0x20000419
 8001930:	20000410 	.word	0x20000410
 8001934:	00000000 	.word	0x00000000

08001938 <BLDC_M1Rotate>:
void BLDC_M1Rotate(){	//モーター1だけ回す
 8001938:	b580      	push	{r7, lr}
 800193a:	b08c      	sub	sp, #48	; 0x30
 800193c:	af00      	add	r7, sp, #0
	float m1_startpos;
	float m1_target_pos;
	float i=0.0;
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
	float m1_dis;
	float set_Kp=100.0;
 8001944:	4b83      	ldr	r3, [pc, #524]	; (8001b54 <BLDC_M1Rotate+0x21c>)
 8001946:	623b      	str	r3, [r7, #32]
	float setMax_kp=150.0;
 8001948:	4b83      	ldr	r3, [pc, #524]	; (8001b58 <BLDC_M1Rotate+0x220>)
 800194a:	61fb      	str	r3, [r7, #28]
	float count_rad=0.05;
 800194c:	4b83      	ldr	r3, [pc, #524]	; (8001b5c <BLDC_M1Rotate+0x224>)
 800194e:	61bb      	str	r3, [r7, #24]
	int m1_dir;
	int count=10;
 8001950:	230a      	movs	r3, #10
 8001952:	617b      	str	r3, [r7, #20]
	uint8_t count_end=0;
 8001954:	2300      	movs	r3, #0
 8001956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	canid=0x02;
 800195a:	4b81      	ldr	r3, [pc, #516]	; (8001b60 <BLDC_M1Rotate+0x228>)
 800195c:	2202      	movs	r2, #2
 800195e:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 2.0, 0.0);	//現在の場所の所得
 8001960:	ed9f 2a80 	vldr	s4, [pc, #512]	; 8001b64 <BLDC_M1Rotate+0x22c>
 8001964:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8001968:	ed9f 1a7e 	vldr	s2, [pc, #504]	; 8001b64 <BLDC_M1Rotate+0x22c>
 800196c:	eddf 0a7d 	vldr	s1, [pc, #500]	; 8001b64 <BLDC_M1Rotate+0x22c>
 8001970:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8001b64 <BLDC_M1Rotate+0x22c>
 8001974:	f7ff fbe0 	bl	8001138 <pack_cmd>
	BLDC_CANTx();
 8001978:	f7ff fcd0 	bl	800131c <BLDC_CANTx>
	unpack_reply();
 800197c:	f7ff fd24 	bl	80013c8 <unpack_reply>
	HAL_Delay(50);
 8001980:	2032      	movs	r0, #50	; 0x32
 8001982:	f002 fba3 	bl	80040cc <HAL_Delay>
	pack_cmd(p_getdata, 0.0, 100.0, 3.0, 0.0);	//現在の場所の所得
 8001986:	4b78      	ldr	r3, [pc, #480]	; (8001b68 <BLDC_M1Rotate+0x230>)
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	ed9f 2a75 	vldr	s4, [pc, #468]	; 8001b64 <BLDC_M1Rotate+0x22c>
 8001990:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8001994:	ed9f 1a75 	vldr	s2, [pc, #468]	; 8001b6c <BLDC_M1Rotate+0x234>
 8001998:	eddf 0a72 	vldr	s1, [pc, #456]	; 8001b64 <BLDC_M1Rotate+0x22c>
 800199c:	eeb0 0a67 	vmov.f32	s0, s15
 80019a0:	f7ff fbca 	bl	8001138 <pack_cmd>
	BLDC_CANTx();
 80019a4:	f7ff fcba 	bl	800131c <BLDC_CANTx>
	unpack_reply();
 80019a8:	f7ff fd0e 	bl	80013c8 <unpack_reply>
	canid=0x01;
 80019ac:	4b6c      	ldr	r3, [pc, #432]	; (8001b60 <BLDC_M1Rotate+0x228>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 2.0, 0.0);	//現在の場所の所得
 80019b2:	ed9f 2a6c 	vldr	s4, [pc, #432]	; 8001b64 <BLDC_M1Rotate+0x22c>
 80019b6:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 80019ba:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 8001b64 <BLDC_M1Rotate+0x22c>
 80019be:	eddf 0a69 	vldr	s1, [pc, #420]	; 8001b64 <BLDC_M1Rotate+0x22c>
 80019c2:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8001b64 <BLDC_M1Rotate+0x22c>
 80019c6:	f7ff fbb7 	bl	8001138 <pack_cmd>
	BLDC_CANTx();
 80019ca:	f7ff fca7 	bl	800131c <BLDC_CANTx>
	unpack_reply();
 80019ce:	f7ff fcfb 	bl	80013c8 <unpack_reply>
	HAL_Delay(50);
 80019d2:	2032      	movs	r0, #50	; 0x32
 80019d4:	f002 fb7a 	bl	80040cc <HAL_Delay>

	m1_startpos=p_getdata;
 80019d8:	4b63      	ldr	r3, [pc, #396]	; (8001b68 <BLDC_M1Rotate+0x230>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	613b      	str	r3, [r7, #16]
	m1_target_pos=-t_position[0];	//初期位置はθ=0,モーター回転方向は-
 80019de:	4b64      	ldr	r3, [pc, #400]	; (8001b70 <BLDC_M1Rotate+0x238>)
 80019e0:	edd3 7a00 	vldr	s15, [r3]
 80019e4:	eef1 7a67 	vneg.f32	s15, s15
 80019e8:	edc7 7a03 	vstr	s15, [r7, #12]
	m1_dis=fabsf(m1_target_pos-m1_startpos);	//目標地点ー現在の地点＝移動距離
 80019ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80019f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80019f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f8:	eef0 7ae7 	vabs.f32	s15, s15
 80019fc:	edc7 7a02 	vstr	s15, [r7, #8]
	m1_dir=((m1_target_pos-m1_startpos)>=0)?1:-1;
 8001a00:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a04:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	db01      	blt.n	8001a1a <BLDC_M1Rotate+0xe2>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e001      	b.n	8001a1e <BLDC_M1Rotate+0xe6>
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a1e:	607b      	str	r3, [r7, #4]
	i=count_rad;
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(count_rad<m1_dis){
 8001a24:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a28:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a34:	d542      	bpl.n	8001abc <BLDC_M1Rotate+0x184>
		while(!count_end&&!motion_stop_flag){
 8001a36:	e039      	b.n	8001aac <BLDC_M1Rotate+0x174>
			i+=(m1_dir*count_rad);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	ee07 3a90 	vmov	s15, r3
 8001a3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a42:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a52:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			if(fabsf(i)<m1_dis){
 8001a56:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a5a:	eef0 7ae7 	vabs.f32	s15, s15
 8001a5e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	dd1c      	ble.n	8001aa6 <BLDC_M1Rotate+0x16e>
				canid=0x01;
 8001a6c:	4b3c      	ldr	r3, [pc, #240]	; (8001b60 <BLDC_M1Rotate+0x228>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	601a      	str	r2, [r3, #0]
				pack_cmd(m1_startpos+i, 0.0, set_Kp, 2.0, 0.0);	//現在の場所の所得
 8001a72:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a76:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7e:	ed9f 2a39 	vldr	s4, [pc, #228]	; 8001b64 <BLDC_M1Rotate+0x22c>
 8001a82:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8001a86:	ed97 1a08 	vldr	s2, [r7, #32]
 8001a8a:	eddf 0a36 	vldr	s1, [pc, #216]	; 8001b64 <BLDC_M1Rotate+0x22c>
 8001a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a92:	f7ff fb51 	bl	8001138 <pack_cmd>
				BLDC_CANTx();
 8001a96:	f7ff fc41 	bl	800131c <BLDC_CANTx>
				unpack_reply();
 8001a9a:	f7ff fc95 	bl	80013c8 <unpack_reply>
//				sent_position();
//				RMDZero();
				HAL_Delay(40);
 8001a9e:	2028      	movs	r0, #40	; 0x28
 8001aa0:	f002 fb14 	bl	80040cc <HAL_Delay>
 8001aa4:	e002      	b.n	8001aac <BLDC_M1Rotate+0x174>
			}else{
				count_end=1;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		while(!count_end&&!motion_stop_flag){
 8001aac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d103      	bne.n	8001abc <BLDC_M1Rotate+0x184>
 8001ab4:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <BLDC_M1Rotate+0x23c>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0bd      	beq.n	8001a38 <BLDC_M1Rotate+0x100>
			}
		}
	}
	for(int i=1;i<=50;i++){
 8001abc:	2301      	movs	r3, #1
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac0:	e03c      	b.n	8001b3c <BLDC_M1Rotate+0x204>
			if(set_Kp+i*10<=setMax_kp&&!motion_stop_flag){
 8001ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001adc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ae0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae8:	db23      	blt.n	8001b32 <BLDC_M1Rotate+0x1fa>
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <BLDC_M1Rotate+0x23c>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d11f      	bne.n	8001b32 <BLDC_M1Rotate+0x1fa>
				canid=0x01;
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <BLDC_M1Rotate+0x228>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
				pack_cmd(m1_target_pos, 0.0, set_Kp+i*10, 3.0, 0.0);	//現在の場所の所得
 8001af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	ee07 3a90 	vmov	s15, r3
 8001b06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b0a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b12:	ed9f 2a14 	vldr	s4, [pc, #80]	; 8001b64 <BLDC_M1Rotate+0x22c>
 8001b16:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8001b1a:	eeb0 1a67 	vmov.f32	s2, s15
 8001b1e:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001b64 <BLDC_M1Rotate+0x22c>
 8001b22:	ed97 0a03 	vldr	s0, [r7, #12]
 8001b26:	f7ff fb07 	bl	8001138 <pack_cmd>
				HAL_Delay(20);
 8001b2a:	2014      	movs	r0, #20
 8001b2c:	f002 face 	bl	80040cc <HAL_Delay>
 8001b30:	e001      	b.n	8001b36 <BLDC_M1Rotate+0x1fe>
			}else{
				i=50;
 8001b32:	2332      	movs	r3, #50	; 0x32
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=1;i<=50;i++){
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	3301      	adds	r3, #1
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	2b32      	cmp	r3, #50	; 0x32
 8001b40:	ddbf      	ble.n	8001ac2 <BLDC_M1Rotate+0x18a>
			}
		}
	unpack_reply();
 8001b42:	f7ff fc41 	bl	80013c8 <unpack_reply>
//	sent_position();
//	RMDZero();
	motion_stop_flag=0;
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <BLDC_M1Rotate+0x23c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	3730      	adds	r7, #48	; 0x30
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	42c80000 	.word	0x42c80000
 8001b58:	43160000 	.word	0x43160000
 8001b5c:	3d4ccccd 	.word	0x3d4ccccd
 8001b60:	20000410 	.word	0x20000410
 8001b64:	00000000 	.word	0x00000000
 8001b68:	2000041c 	.word	0x2000041c
 8001b6c:	42c80000 	.word	0x42c80000
 8001b70:	20000428 	.word	0x20000428
 8001b74:	20000419 	.word	0x20000419

08001b78 <BLDC_M2Rotate>:
void BLDC_M2Rotate(){	//モーター2だけ回す
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
	float m2_startpos;
	float m2_target_pos;
	float i=0.0;
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
	float m2_dis;
	float set_Kp=40.0;
 8001b84:	4b8a      	ldr	r3, [pc, #552]	; (8001db0 <BLDC_M2Rotate+0x238>)
 8001b86:	61bb      	str	r3, [r7, #24]
	float setMax_kp=150.0;
 8001b88:	4b8a      	ldr	r3, [pc, #552]	; (8001db4 <BLDC_M2Rotate+0x23c>)
 8001b8a:	617b      	str	r3, [r7, #20]
	float count_rad=0.05;
 8001b8c:	4b8a      	ldr	r3, [pc, #552]	; (8001db8 <BLDC_M2Rotate+0x240>)
 8001b8e:	613b      	str	r3, [r7, #16]
	int m2_dir;
	uint8_t count_end=0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	canid=0x01;
 8001b96:	4b89      	ldr	r3, [pc, #548]	; (8001dbc <BLDC_M2Rotate+0x244>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 2.0, 0.0);	//現在の場所の所得
 8001b9c:	ed9f 2a88 	vldr	s4, [pc, #544]	; 8001dc0 <BLDC_M2Rotate+0x248>
 8001ba0:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8001ba4:	ed9f 1a86 	vldr	s2, [pc, #536]	; 8001dc0 <BLDC_M2Rotate+0x248>
 8001ba8:	eddf 0a85 	vldr	s1, [pc, #532]	; 8001dc0 <BLDC_M2Rotate+0x248>
 8001bac:	ed9f 0a84 	vldr	s0, [pc, #528]	; 8001dc0 <BLDC_M2Rotate+0x248>
 8001bb0:	f7ff fac2 	bl	8001138 <pack_cmd>
	BLDC_CANTx();
 8001bb4:	f7ff fbb2 	bl	800131c <BLDC_CANTx>
	unpack_reply();
 8001bb8:	f7ff fc06 	bl	80013c8 <unpack_reply>
	pack_cmd(p_getdata, 0.0, 100.0, 3.0, 0.0);	//現在の場所の所得
 8001bbc:	4b81      	ldr	r3, [pc, #516]	; (8001dc4 <BLDC_M2Rotate+0x24c>)
 8001bbe:	edd3 7a00 	vldr	s15, [r3]
 8001bc2:	ed9f 2a7f 	vldr	s4, [pc, #508]	; 8001dc0 <BLDC_M2Rotate+0x248>
 8001bc6:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8001bca:	ed9f 1a7f 	vldr	s2, [pc, #508]	; 8001dc8 <BLDC_M2Rotate+0x250>
 8001bce:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8001dc0 <BLDC_M2Rotate+0x248>
 8001bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bd6:	f7ff faaf 	bl	8001138 <pack_cmd>
	BLDC_CANTx();
 8001bda:	f7ff fb9f 	bl	800131c <BLDC_CANTx>
	unpack_reply();
 8001bde:	f7ff fbf3 	bl	80013c8 <unpack_reply>
	canid=0x02;
 8001be2:	4b76      	ldr	r3, [pc, #472]	; (8001dbc <BLDC_M2Rotate+0x244>)
 8001be4:	2202      	movs	r2, #2
 8001be6:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 2.0, 0.0);	//現在の場所の所得
 8001be8:	ed9f 2a75 	vldr	s4, [pc, #468]	; 8001dc0 <BLDC_M2Rotate+0x248>
 8001bec:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8001bf0:	ed9f 1a73 	vldr	s2, [pc, #460]	; 8001dc0 <BLDC_M2Rotate+0x248>
 8001bf4:	eddf 0a72 	vldr	s1, [pc, #456]	; 8001dc0 <BLDC_M2Rotate+0x248>
 8001bf8:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8001dc0 <BLDC_M2Rotate+0x248>
 8001bfc:	f7ff fa9c 	bl	8001138 <pack_cmd>
	BLDC_CANTx();
 8001c00:	f7ff fb8c 	bl	800131c <BLDC_CANTx>
	unpack_reply();
 8001c04:	f7ff fbe0 	bl	80013c8 <unpack_reply>
	m2_startpos=p_getdata;
 8001c08:	4b6e      	ldr	r3, [pc, #440]	; (8001dc4 <BLDC_M2Rotate+0x24c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
	m2_target_pos=(-(t_position[1]-M_PI));	//θ＝0はcwにπ、回転方向は-
 8001c0e:	4b6f      	ldr	r3, [pc, #444]	; (8001dcc <BLDC_M2Rotate+0x254>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fcb8 	bl	8000588 <__aeabi_f2d>
 8001c18:	a363      	add	r3, pc, #396	; (adr r3, 8001da8 <BLDC_M2Rotate+0x230>)
 8001c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1e:	f7fe fb53 	bl	80002c8 <__aeabi_dsub>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f7fe ffdd 	bl	8000be8 <__aeabi_d2f>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eef1 7a67 	vneg.f32	s15, s15
 8001c38:	edc7 7a02 	vstr	s15, [r7, #8]
	m2_dis=fabsf((m2_target_pos-m2_startpos));
 8001c3c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c48:	eef0 7ae7 	vabs.f32	s15, s15
 8001c4c:	edc7 7a01 	vstr	s15, [r7, #4]
	m2_dir=((m2_target_pos-m2_startpos)>=0)?1:-1;
 8001c50:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c64:	db01      	blt.n	8001c6a <BLDC_M2Rotate+0xf2>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e001      	b.n	8001c6e <BLDC_M2Rotate+0xf6>
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c6e:	603b      	str	r3, [r7, #0]

	i=count_rad;
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
	if(count_rad<m2_dis){
 8001c74:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c78:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c84:	d540      	bpl.n	8001d08 <BLDC_M2Rotate+0x190>
		while(!count_end&&!motion_stop_flag){
 8001c86:	e037      	b.n	8001cf8 <BLDC_M2Rotate+0x180>
			i+=(m2_dir*count_rad);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	ee07 3a90 	vmov	s15, r3
 8001c8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c92:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			if(fabsf(i)<m2_dis){
 8001ca6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001caa:	eef0 7ae7 	vabs.f32	s15, s15
 8001cae:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cba:	dd1a      	ble.n	8001cf2 <BLDC_M2Rotate+0x17a>
				canid=0x02;
 8001cbc:	4b3f      	ldr	r3, [pc, #252]	; (8001dbc <BLDC_M2Rotate+0x244>)
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	601a      	str	r2, [r3, #0]
				pack_cmd(m2_startpos+i, 0.0, set_Kp, 2.0, 0.0);	//現在の場所の所得
 8001cc2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cc6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cce:	ed9f 2a3c 	vldr	s4, [pc, #240]	; 8001dc0 <BLDC_M2Rotate+0x248>
 8001cd2:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8001cd6:	ed97 1a06 	vldr	s2, [r7, #24]
 8001cda:	eddf 0a39 	vldr	s1, [pc, #228]	; 8001dc0 <BLDC_M2Rotate+0x248>
 8001cde:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce2:	f7ff fa29 	bl	8001138 <pack_cmd>
				BLDC_CANTx();
 8001ce6:	f7ff fb19 	bl	800131c <BLDC_CANTx>
//				sent_position();
//				RMDZero();
				HAL_Delay(40);
 8001cea:	2028      	movs	r0, #40	; 0x28
 8001cec:	f002 f9ee 	bl	80040cc <HAL_Delay>
 8001cf0:	e002      	b.n	8001cf8 <BLDC_M2Rotate+0x180>
			}else{
				count_end=1;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		while(!count_end&&!motion_stop_flag){
 8001cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d103      	bne.n	8001d08 <BLDC_M2Rotate+0x190>
 8001d00:	4b33      	ldr	r3, [pc, #204]	; (8001dd0 <BLDC_M2Rotate+0x258>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0bf      	beq.n	8001c88 <BLDC_M2Rotate+0x110>
			}
		}
	}

	for(int i=1;i<=50;i++){
 8001d08:	2301      	movs	r3, #1
 8001d0a:	61fb      	str	r3, [r7, #28]
 8001d0c:	e03e      	b.n	8001d8c <BLDC_M2Rotate+0x214>
			if(set_Kp+i*10<=setMax_kp&&!motion_stop_flag){
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	ee07 3a90 	vmov	s15, r3
 8001d1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d20:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d28:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d34:	db25      	blt.n	8001d82 <BLDC_M2Rotate+0x20a>
 8001d36:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <BLDC_M2Rotate+0x258>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d121      	bne.n	8001d82 <BLDC_M2Rotate+0x20a>
				canid=0x02;
 8001d3e:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <BLDC_M2Rotate+0x244>)
 8001d40:	2202      	movs	r2, #2
 8001d42:	601a      	str	r2, [r3, #0]
				pack_cmd(m2_target_pos, 0.0, set_Kp+i*10, 3.0, 0.0);	//現在の場所の所得
 8001d44:	69fa      	ldr	r2, [r7, #28]
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	ee07 3a90 	vmov	s15, r3
 8001d52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d56:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5e:	ed9f 2a18 	vldr	s4, [pc, #96]	; 8001dc0 <BLDC_M2Rotate+0x248>
 8001d62:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8001d66:	eeb0 1a67 	vmov.f32	s2, s15
 8001d6a:	eddf 0a15 	vldr	s1, [pc, #84]	; 8001dc0 <BLDC_M2Rotate+0x248>
 8001d6e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001d72:	f7ff f9e1 	bl	8001138 <pack_cmd>
				BLDC_CANTx();
 8001d76:	f7ff fad1 	bl	800131c <BLDC_CANTx>
				HAL_Delay(20);
 8001d7a:	2014      	movs	r0, #20
 8001d7c:	f002 f9a6 	bl	80040cc <HAL_Delay>
 8001d80:	e001      	b.n	8001d86 <BLDC_M2Rotate+0x20e>
			}else{
				i=50;
 8001d82:	2332      	movs	r3, #50	; 0x32
 8001d84:	61fb      	str	r3, [r7, #28]
	for(int i=1;i<=50;i++){
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	2b32      	cmp	r3, #50	; 0x32
 8001d90:	ddbd      	ble.n	8001d0e <BLDC_M2Rotate+0x196>
			}
		}
//	sent_position();
//	RMDZero();
	count_end=0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	motion_stop_flag=0;
 8001d98:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <BLDC_M2Rotate+0x258>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
}
 8001d9e:	bf00      	nop
 8001da0:	3728      	adds	r7, #40	; 0x28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	54442d18 	.word	0x54442d18
 8001dac:	400921fb 	.word	0x400921fb
 8001db0:	42200000 	.word	0x42200000
 8001db4:	43160000 	.word	0x43160000
 8001db8:	3d4ccccd 	.word	0x3d4ccccd
 8001dbc:	20000410 	.word	0x20000410
 8001dc0:	00000000 	.word	0x00000000
 8001dc4:	2000041c 	.word	0x2000041c
 8001dc8:	42c80000 	.word	0x42c80000
 8001dcc:	20000428 	.word	0x20000428
 8001dd0:	20000419 	.word	0x20000419

08001dd4 <command_judgment>:
//	else if(modeflag_count==(buffersize-3)){	//コマンドモード,9byte ModeSelectが0だったら
//		selectmode_flag=1;
//	}
//}

void command_judgment(uint8_t *ModeSelect){
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	int modeflag_count=0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<buffersize ;i++){
 8001de0:	2300      	movs	r3, #0
 8001de2:	72fb      	strb	r3, [r7, #11]
 8001de4:	e015      	b.n	8001e12 <command_judgment+0x3e>
		ModeSelect[i]= ~(ModeSelect[i]);
 8001de6:	7afb      	ldrb	r3, [r7, #11]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	4413      	add	r3, r2
 8001dec:	781a      	ldrb	r2, [r3, #0]
 8001dee:	7afb      	ldrb	r3, [r7, #11]
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	440b      	add	r3, r1
 8001df4:	43d2      	mvns	r2, r2
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	701a      	strb	r2, [r3, #0]
		if(ModeSelect[i]==0){
 8001dfa:	7afb      	ldrb	r3, [r7, #11]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d102      	bne.n	8001e0c <command_judgment+0x38>
			modeflag_count++;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<buffersize ;i++){
 8001e0c:	7afb      	ldrb	r3, [r7, #11]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	72fb      	strb	r3, [r7, #11]
 8001e12:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <command_judgment+0x7c>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	7afa      	ldrb	r2, [r7, #11]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d3e4      	bcc.n	8001de6 <command_judgment+0x12>
			}
		}
	if(modeflag_count<(buffersize-3)){	//動作モード
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <command_judgment+0x7c>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	da03      	bge.n	8001e30 <command_judgment+0x5c>
		selectmode_flag=0;
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <command_judgment+0x80>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
	}
	else if(modeflag_count==(buffersize-3)){	//コマンドモード,9byte ModeSelectが0だったら
		selectmode_flag=1;
	}
}
 8001e2e:	e008      	b.n	8001e42 <command_judgment+0x6e>
	else if(modeflag_count==(buffersize-3)){	//コマンドモード,9byte ModeSelectが0だったら
 8001e30:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <command_judgment+0x7c>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	3b03      	subs	r3, #3
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d102      	bne.n	8001e42 <command_judgment+0x6e>
		selectmode_flag=1;
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <command_judgment+0x80>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
}
 8001e42:	bf00      	nop
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	20000008 	.word	0x20000008
 8001e54:	20000418 	.word	0x20000418

08001e58 <resetStepper>:
	si->stepPosition = 0;
	si->movementDone = 0;
}


void resetStepper(volatile stepperInfo* si){    //resetStepper関数に引数をstepperInfo構造隊にポイント型変数siとして与える
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	si->c0 = si->acceleration;      //変数*siがメンバc0にアクセス.した値に変数*siがメンバaccelerationにアクセス.した値を代入する
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	edd3 7a00 	vldr	s15, [r3]
 8001e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e6a:	ee17 2a90 	vmov	r2, s15
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	615a      	str	r2, [r3, #20]
	si->d = si->c0;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	si->di = si->d;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e8e:	ee17 2a90 	vmov	r2, s15
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	649a      	str	r2, [r3, #72]	; 0x48
	si->stepCount = 0;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	64da      	str	r2, [r3, #76]	; 0x4c
	si->n = 0;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	641a      	str	r2, [r3, #64]	; 0x40
	si->rampUpStepCount = 0;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	63da      	str	r2, [r3, #60]	; 0x3c
	si->movementDone = 0;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <prepareMovement>:

volatile uint8_t remainingSteppersFlag = 0; //remainingSteppersFlagをuint8_t型で定義し、初期化

void prepareMovement(int steps){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	if(steps == 0){
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d039      	beq.n	8001f3e <prepareMovement+0x82>
		return;
	}
	volatile stepperInfo* si = &steppers[0];
 8001eca:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <prepareMovement+0x8c>)
 8001ecc:	60fb      	str	r3, [r7, #12]
	if(si->dir_inv){
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d011      	beq.n	8001efa <prepareMovement+0x3e>
		si->dirFunc( steps < 0 ? 0 : 1);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	43d2      	mvns	r2, r2
 8001ede:	0fd2      	lsrs	r2, r2, #31
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4798      	blx	r3
		si->dir = steps > 0 ? -1:1;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	dd02      	ble.n	8001ef2 <prepareMovement+0x36>
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ef0:	e000      	b.n	8001ef4 <prepareMovement+0x38>
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	61da      	str	r2, [r3, #28]
 8001ef8:	e00e      	b.n	8001f18 <prepareMovement+0x5c>
	}else{
		si->dirFunc( steps < 0 ? 1 : 0);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	0fd2      	lsrs	r2, r2, #31
 8001f02:	4610      	mov	r0, r2
 8001f04:	4798      	blx	r3
		si->dir = steps > 0 ? 1:-1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	dd01      	ble.n	8001f10 <prepareMovement+0x54>
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	e001      	b.n	8001f14 <prepareMovement+0x58>
 8001f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	61da      	str	r2, [r3, #28]
	}
		si->totalSteps = abs(steps);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	bfb8      	it	lt
 8001f1e:	425b      	neglt	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	635a      	str	r2, [r3, #52]	; 0x34
		resetStepper(si);
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f7ff ff96 	bl	8001e58 <resetStepper>
		remainingSteppersFlag |= (1 << 0);
 8001f2c:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <prepareMovement+0x90>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <prepareMovement+0x90>)
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	e000      	b.n	8001f40 <prepareMovement+0x84>
		return;
 8001f3e:	bf00      	nop

}
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200008cc 	.word	0x200008cc
 8001f4c:	20000920 	.word	0x20000920

08001f50 <prepareAbsoluteMovement>:

void prepareAbsoluteMovement(int absolute_steps){   //prepareAbsoluteMovementで与えられたステップ数だけモータを回す(main文から）
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
	volatile stepperInfo* si = &steppers[0];	//steppers[0]のアドレスをstepperInfo* si に代入
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <prepareAbsoluteMovement+0x68>)
 8001f5a:	60fb      	str	r3, [r7, #12]
	int steps = absolute_steps - si->stepPosition;	//目標値からstepPositionを引いた値（stepposition=毎ステップカウントされるdirの値)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	60bb      	str	r3, [r7, #8]
	if(steps == 0){
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d021      	beq.n	8001fb0 <prepareAbsoluteMovement+0x60>
					return;
				}
	si->dirFunc( steps < 0 ? 1 : 0);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	0fd2      	lsrs	r2, r2, #31
 8001f74:	4610      	mov	r0, r2
 8001f76:	4798      	blx	r3
	si->dir = steps > 0 ? 1:-1;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	dd01      	ble.n	8001f82 <prepareAbsoluteMovement+0x32>
 8001f7e:	2201      	movs	r2, #1
 8001f80:	e001      	b.n	8001f86 <prepareAbsoluteMovement+0x36>
 8001f82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	61da      	str	r2, [r3, #28]
	//printf("prepareAbsoluteMovement\r\n");
	si->totalSteps = abs(steps);	//stepsの値をアブソリュートでtotalstepsに格納
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bfb8      	it	lt
 8001f90:	425b      	neglt	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	635a      	str	r2, [r3, #52]	; 0x34

	resetStepper(si);
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f7ff ff5d 	bl	8001e58 <resetStepper>
	remainingSteppersFlag |= (1 << 0);
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <prepareAbsoluteMovement+0x6c>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <prepareAbsoluteMovement+0x6c>)
 8001fac:	701a      	strb	r2, [r3, #0]
 8001fae:	e000      	b.n	8001fb2 <prepareAbsoluteMovement+0x62>
					return;
 8001fb0:	bf00      	nop
}
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	200008cc 	.word	0x200008cc
 8001fbc:	20000920 	.word	0x20000920

08001fc0 <setNextInterruptInterval>:
			t->checkcount=0;
		}
}
volatile uint8_t nextStepperFlag = 0;

void setNextInterruptInterval(){
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0

	unsigned int mind = 999999;
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <setNextInterruptInterval+0x7c>)
 8001fc8:	607b      	str	r3, [r7, #4]
//	currentcheck();
		if( ((1 << 0)& remainingSteppersFlag) && steppers[0].di < mind ){
 8001fca:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <setNextInterruptInterval+0x80>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <setNextInterruptInterval+0x2a>
 8001fda:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <setNextInterruptInterval+0x84>)
 8001fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d902      	bls.n	8001fea <setNextInterruptInterval+0x2a>
			mind = steppers[0].di;
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <setNextInterruptInterval+0x84>)
 8001fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe8:	607b      	str	r3, [r7, #4]
		}
		nextStepperFlag = 0;
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <setNextInterruptInterval+0x88>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]

			if( (1 << 0) && steppers[0].di == mind ){
 8001ff0:	4b14      	ldr	r3, [pc, #80]	; (8002044 <setNextInterruptInterval+0x84>)
 8001ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d107      	bne.n	800200a <setNextInterruptInterval+0x4a>
				nextStepperFlag |= (1 << 0);
 8001ffa:	4b13      	ldr	r3, [pc, #76]	; (8002048 <setNextInterruptInterval+0x88>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <setNextInterruptInterval+0x88>)
 8002008:	701a      	strb	r2, [r3, #0]
			}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);		//mindにコンペアを設定
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <setNextInterruptInterval+0x8c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	635a      	str	r2, [r3, #52]	; 0x34
			//printf("mind:%d \r\n",mind);

	if (remainingSteppersFlag == 0){
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <setNextInterruptInterval+0x80>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d104      	bne.n	8002026 <setNextInterruptInterval+0x66>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);    //65500→コンペアマッチさせない
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <setNextInterruptInterval+0x8c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8002024:	635a      	str	r2, [r3, #52]	; 0x34
	}

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <setNextInterruptInterval+0x8c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 800202e:	bf00      	nop

}
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	000f423f 	.word	0x000f423f
 8002040:	20000920 	.word	0x20000920
 8002044:	200008cc 	.word	0x200008cc
 8002048:	20000921 	.word	0x20000921
 800204c:	2000022c 	.word	0x2000022c

08002050 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){      //指定したコンペアを超えた時発火
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	//HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);

	if(htim == &htim3){
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a6e      	ldr	r2, [pc, #440]	; (8002214 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	f040 80d5 	bne.w	800220c <HAL_TIM_OC_DelayElapsedCallback+0x1bc>
	unsigned int tmpCtr = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);	//指定されたタイマーチャンネルのコンペアを所得
 8002062:	4b6c      	ldr	r3, [pc, #432]	; (8002214 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002068:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);			//コンペアを65500にセット
 800206a:	4b6a      	ldr	r3, [pc, #424]	; (8002214 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8002072:	635a      	str	r2, [r3, #52]	; 0x34

	if( homing_flag & (1 << 0)){
 8002074:	4b68      	ldr	r3, [pc, #416]	; (8002218 <HAL_TIM_OC_DelayElapsedCallback+0x1c8>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00d      	beq.n	800209c <HAL_TIM_OC_DelayElapsedCallback+0x4c>
				if(zhome_endstop_state & (1 << 0)){
 8002080:	4b66      	ldr	r3, [pc, #408]	; (800221c <HAL_TIM_OC_DelayElapsedCallback+0x1cc>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d007      	beq.n	800209c <HAL_TIM_OC_DelayElapsedCallback+0x4c>
					remainingSteppersFlag &= ~(1 << 0);
 800208c:	4b64      	ldr	r3, [pc, #400]	; (8002220 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f023 0301 	bic.w	r3, r3, #1
 8002096:	b2da      	uxtb	r2, r3
 8002098:	4b61      	ldr	r3, [pc, #388]	; (8002220 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 800209a:	701a      	strb	r2, [r3, #0]
				}
			}
	if ( ! (nextStepperFlag & (1 << 0)) ){				//nextStepperFlagが真でない(0なら)
 800209c:	4b61      	ldr	r3, [pc, #388]	; (8002224 <HAL_TIM_OC_DelayElapsedCallback+0x1d4>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d105      	bne.n	80020b6 <HAL_TIM_OC_DelayElapsedCallback+0x66>
			steppers[0].di -= tmpCtr;           //tmpCtrの値からsteppers[i].di引いた値を新しくsteppers[i].diに代入
 80020aa:	4b5f      	ldr	r3, [pc, #380]	; (8002228 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80020ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	4a5d      	ldr	r2, [pc, #372]	; (8002228 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80020b4:	6493      	str	r3, [r2, #72]	; 0x48
		}
		//printf("steppers:%ld \r\n",steppers[0].di);

		volatile stepperInfo* s = &steppers[0];
 80020b6:	4b5c      	ldr	r3, [pc, #368]	; (8002228 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80020b8:	60bb      	str	r3, [r7, #8]

		if( (s->stepCount) < (s->totalSteps)&& !(current_stall)  ){		//1周ごとにカウントしたstepCountがabs(steps)より小さかったら==動作が終了するまで
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d224      	bcs.n	8002110 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
 80020c6:	4b59      	ldr	r3, [pc, #356]	; (800222c <HAL_TIM_OC_DelayElapsedCallback+0x1dc>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d120      	bne.n	8002110 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
			s->stepFunc();
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	4798      	blx	r3
			s->stepCount++;							//カウントし続ける
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	64da      	str	r2, [r3, #76]	; 0x4c
			s->stepPosition += s->dir;		//dir(+もしくはー(dirの向き）を加算してstepPositionに格納
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	441a      	add	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	619a      	str	r2, [r3, #24]
			if ( (s->stepCount) >= (s->totalSteps) ){	//stepCountがtotalStepsを超えたとき
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d30b      	bcc.n	8002110 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
				s->movementDone = 1;	//movementDoneを1にする
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				remainingSteppersFlag &= ~(1 << 0);
 8002100:	4b47      	ldr	r3, [pc, #284]	; (8002220 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	f023 0301 	bic.w	r3, r3, #1
 800210a:	b2da      	uxtb	r2, r3
 800210c:	4b44      	ldr	r3, [pc, #272]	; (8002220 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 800210e:	701a      	strb	r2, [r3, #0]
			}
		}

		if (s->rampUpStepCount == 0){
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d142      	bne.n	800219e <HAL_TIM_OC_DelayElapsedCallback+0x14e>
			s->n++;									//sにnを代入して、nをプラス1する
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
			s->d = s->d - (2*s->d) / (4*s->n +1);	//加減速遅延時間
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800212e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	3301      	adds	r3, #1
 800213a:	ee07 3a90 	vmov	s15, r3
 800213e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002142:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002146:	ee77 7a67 	vsub.f32	s15, s14, s15
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			if (s->d <= s->minStepInterval ){		//加減速遅延時間がminStepIntervalより短いなら（定数で指定）
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	ee07 3a90 	vmov	s15, r3
 800215e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216a:	d80c      	bhi.n	8002186 <HAL_TIM_OC_DelayElapsedCallback+0x136>
				s->d = s->minStepInterval;			//minStepIntervalを加減速遅延時間にする
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	ee07 3a90 	vmov	s15, r3
 8002174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
				s->rampUpStepCount = s->stepCount;	//rampUpStepCountはstepCountとする
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	63da      	str	r2, [r3, #60]	; 0x3c
			}
			if (s->stepCount >= (s->totalSteps / 2) ){  //目標値から現在のステップを引いた値の1/2よりstepCountが大きくなったとき
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218e:	085b      	lsrs	r3, r3, #1
 8002190:	429a      	cmp	r2, r3
 8002192:	d32c      	bcc.n	80021ee <HAL_TIM_OC_DelayElapsedCallback+0x19e>
				s->rampUpStepCount = s->stepCount;		//rampUpStepCountはstepCountとする
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	63da      	str	r2, [r3, #60]	; 0x3c
 800219c:	e027      	b.n	80021ee <HAL_TIM_OC_DelayElapsedCallback+0x19e>
			}
		} else if ( s->stepCount >= s->totalSteps - s->rampUpStepCount) {	//目標値から現在のステップを引いた値からrampUpStepCountを引いた値がstepCountより小さいなら
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021aa:	1acb      	subs	r3, r1, r3
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d31e      	bcc.n	80021ee <HAL_TIM_OC_DelayElapsedCallback+0x19e>
			s->d = (s->d * (4 * s->n + 1)) / (4 * s->n + 1 -2);				//減速の時のステップ
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	3301      	adds	r3, #1
 80021be:	ee07 3a90 	vmov	s15, r3
 80021c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	3b01      	subs	r3, #1
 80021d2:	ee07 3a90 	vmov	s15, r3
 80021d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			s->n--;		//sにnを代入し、nから1を引く
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	1e5a      	subs	r2, r3, #1
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40
		}
		s->di = s->d;	//計算結果sをstepperInfoのメンバdに代入したものをメンバdiに代入
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80021f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021f8:	ee17 2a90 	vmov	r2, s15
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	649a      	str	r2, [r3, #72]	; 0x48
		//printf("stepPosition:%ld \r\n",s->stepPosition);
		setNextInterruptInterval();
 8002200:	f7ff fede 	bl	8001fc0 <setNextInterruptInterval>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002204:	4b03      	ldr	r3, [pc, #12]	; (8002214 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2200      	movs	r2, #0
 800220a:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	2000022c 	.word	0x2000022c
 8002218:	2000091d 	.word	0x2000091d
 800221c:	2000091c 	.word	0x2000091c
 8002220:	20000920 	.word	0x20000920
 8002224:	20000921 	.word	0x20000921
 8002228:	200008cc 	.word	0x200008cc
 800222c:	2000091e 	.word	0x2000091e

08002230 <stallguard_back>:
	if( ! HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)){	//割り込みピンが真でない(1でない=0なら)
		zhome_endstop_state |= 1;					//zhome_endstop_stateに左辺か右辺が1なら1を代入
	}
}

void stallguard_back(){
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
	prepareMovement(steppers[0].stall_off);	//stall_off
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <stallguard_back+0x18>)
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fe3f 	bl	8001ebc <prepareMovement>
	current_stall=0;
 800223e:	4b03      	ldr	r3, [pc, #12]	; (800224c <stallguard_back+0x1c>)
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
	return;
 8002244:	bf00      	nop
}
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200008cc 	.word	0x200008cc
 800224c:	2000091e 	.word	0x2000091e

08002250 <runAndWait>:
	HAL_UART_Transmit_IT(&huart2,TxData,sizeof(TxData));

	return;
}

void runAndWait(){
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
	setNextInterruptInterval();
 8002254:	f7ff feb4 	bl	8001fc0 <setNextInterruptInterval>
	while(remainingSteppersFlag && !(current_stall));
 8002258:	bf00      	nop
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <runAndWait+0x38>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <runAndWait+0x1c>
 8002264:	4b09      	ldr	r3, [pc, #36]	; (800228c <runAndWait+0x3c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f6      	beq.n	800225a <runAndWait+0xa>
	if(current_stall==1){
 800226c:	4b07      	ldr	r3, [pc, #28]	; (800228c <runAndWait+0x3c>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <runAndWait+0x28>
		stallguard_back();
 8002274:	f7ff ffdc 	bl	8002230 <stallguard_back>
	}
	HAL_Delay(100);
 8002278:	2064      	movs	r0, #100	; 0x64
 800227a:	f001 ff27 	bl	80040cc <HAL_Delay>
	end_flag=1;
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <runAndWait+0x40>)
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
	//printf("posi%d\r\n",re->totalSteps);
}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000920 	.word	0x20000920
 800228c:	2000091e 	.word	0x2000091e
 8002290:	2000091f 	.word	0x2000091f

08002294 <stepperHoming>:
	re->stepPosition = 0;
	end_flag=1;
}


void stepperHoming(){
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
	homing_flag |= (1 << 0);
 8002298:	4b2c      	ldr	r3, [pc, #176]	; (800234c <stepperHoming+0xb8>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4b2a      	ldr	r3, [pc, #168]	; (800234c <stepperHoming+0xb8>)
 80022a4:	701a      	strb	r2, [r3, #0]
	//seeking
	steppers[0].minStepInterval = steppers[0].seeking_vel;	//ホームピンに反応するまでモータ回す
 80022a6:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <stepperHoming+0xbc>)
 80022a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022aa:	461a      	mov	r2, r3
 80022ac:	4b28      	ldr	r3, [pc, #160]	; (8002350 <stepperHoming+0xbc>)
 80022ae:	605a      	str	r2, [r3, #4]
	prepareMovement( -100000000);
 80022b0:	4828      	ldr	r0, [pc, #160]	; (8002354 <stepperHoming+0xc0>)
 80022b2:	f7ff fe03 	bl	8001ebc <prepareMovement>
	runAndWait();
 80022b6:	f7ff ffcb 	bl	8002250 <runAndWait>
	HAL_Delay(500);
 80022ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022be:	f001 ff05 	bl	80040cc <HAL_Delay>
	//pull-off

	homing_flag &= ~(1 << 0);								//homing_flagが反応したらpull_offだけモータ回す
 80022c2:	4b22      	ldr	r3, [pc, #136]	; (800234c <stepperHoming+0xb8>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	f023 0301 	bic.w	r3, r3, #1
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	4b1f      	ldr	r3, [pc, #124]	; (800234c <stepperHoming+0xb8>)
 80022ce:	701a      	strb	r2, [r3, #0]
	prepareMovement(steppers[0].pull_off);
 80022d0:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <stepperHoming+0xbc>)
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fdf1 	bl	8001ebc <prepareMovement>
	runAndWait();
 80022da:	f7ff ffb9 	bl	8002250 <runAndWait>
	HAL_Delay(500);
 80022de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022e2:	f001 fef3 	bl	80040cc <HAL_Delay>
	//homing

	homing_flag |= (1 << 0);								//ホームピンに反応するまでモータ回す
 80022e6:	4b19      	ldr	r3, [pc, #100]	; (800234c <stepperHoming+0xb8>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	4b16      	ldr	r3, [pc, #88]	; (800234c <stepperHoming+0xb8>)
 80022f2:	701a      	strb	r2, [r3, #0]
	steppers[0].minStepInterval = steppers[0].homing_vel;
 80022f4:	4b16      	ldr	r3, [pc, #88]	; (8002350 <stepperHoming+0xbc>)
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <stepperHoming+0xbc>)
 80022fc:	605a      	str	r2, [r3, #4]
	prepareMovement( -100000000);
 80022fe:	4815      	ldr	r0, [pc, #84]	; (8002354 <stepperHoming+0xc0>)
 8002300:	f7ff fddc 	bl	8001ebc <prepareMovement>
	runAndWait();
 8002304:	f7ff ffa4 	bl	8002250 <runAndWait>
	HAL_Delay(500);
 8002308:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800230c:	f001 fede 	bl	80040cc <HAL_Delay>
	//pull-off
	homing_flag &= ~(1 << 0);
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <stepperHoming+0xb8>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <stepperHoming+0xb8>)
 800231c:	701a      	strb	r2, [r3, #0]
	prepareMovement(steppers[0].pull_off);
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <stepperHoming+0xbc>)
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fdca 	bl	8001ebc <prepareMovement>
	runAndWait();
 8002328:	f7ff ff92 	bl	8002250 <runAndWait>
	HAL_Delay(500);
 800232c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002330:	f001 fecc 	bl	80040cc <HAL_Delay>

	steppers[0].stepPosition = 0;
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <stepperHoming+0xbc>)
 8002336:	2200      	movs	r2, #0
 8002338:	619a      	str	r2, [r3, #24]
	steppers[0].homing = 1;
 800233a:	4b05      	ldr	r3, [pc, #20]	; (8002350 <stepperHoming+0xbc>)
 800233c:	2201      	movs	r2, #1
 800233e:	741a      	strb	r2, [r3, #16]
	steppers[0].minStepInterval = 500;
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <stepperHoming+0xbc>)
 8002342:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002346:	605a      	str	r2, [r3, #4]

}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	2000091d 	.word	0x2000091d
 8002350:	200008cc 	.word	0x200008cc
 8002354:	fa0a1f00 	.word	0xfa0a1f00

08002358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	ed2d 8b02 	vpush	{d8}
 800235e:	b0e0      	sub	sp, #384	; 0x180
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8002362:	4b9e      	ldr	r3, [pc, #632]	; (80025dc <main+0x284>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2100      	movs	r1, #0
 800236a:	4618      	mov	r0, r3
 800236c:	f006 fd72 	bl	8008e54 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002370:	f001 fe3a 	bl	8003fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002374:	f000 fe48 	bl	8003008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002378:	f000 ffb2 	bl	80032e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800237c:	f000 ff86 	bl	800328c <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8002380:	f000 feae 	bl	80030e0 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8002384:	f000 ff58 	bl	8003238 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002388:	f000 fee2 	bl	8003150 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uint32_t Init_flag=0;
 800238c:	2300      	movs	r3, #0
 800238e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)!=1){	//リミットスイッチON→待機状態
 8002392:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002396:	4892      	ldr	r0, [pc, #584]	; (80025e0 <main+0x288>)
 8002398:	f003 f882 	bl	80054a0 <HAL_GPIO_ReadPin>
 800239c:	4603      	mov	r3, r0
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d003      	beq.n	80023aa <main+0x52>
	  home_position_state=1;
 80023a2:	4b90      	ldr	r3, [pc, #576]	; (80025e4 <main+0x28c>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	701a      	strb	r2, [r3, #0]
 80023a8:	e002      	b.n	80023b0 <main+0x58>
  }else{
	  home_position_state=0;
 80023aa:	4b8e      	ldr	r3, [pc, #568]	; (80025e4 <main+0x28c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
  }
 TMC2209_INIT();
 80023b0:	f7fe fe00 	bl	8000fb4 <TMC2209_INIT>
 //rxbufを受信したらフラグを
 HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80023b4:	2100      	movs	r1, #0
 80023b6:	488c      	ldr	r0, [pc, #560]	; (80025e8 <main+0x290>)
 80023b8:	f003 ff4c 	bl	8006254 <HAL_TIM_OC_Start_IT>
 steppers[0].dirFunc = Dir0;
 80023bc:	4b8b      	ldr	r3, [pc, #556]	; (80025ec <main+0x294>)
 80023be:	4a8c      	ldr	r2, [pc, #560]	; (80025f0 <main+0x298>)
 80023c0:	609a      	str	r2, [r3, #8]
 steppers[0].stepFunc = Step0;
 80023c2:	4b8a      	ldr	r3, [pc, #552]	; (80025ec <main+0x294>)
 80023c4:	4a8b      	ldr	r2, [pc, #556]	; (80025f4 <main+0x29c>)
 80023c6:	60da      	str	r2, [r3, #12]
 steppers[0].acceleration = 1000;
 80023c8:	4b88      	ldr	r3, [pc, #544]	; (80025ec <main+0x294>)
 80023ca:	4a8b      	ldr	r2, [pc, #556]	; (80025f8 <main+0x2a0>)
 80023cc:	601a      	str	r2, [r3, #0]
 steppers[0].minStepInterval = 100;
 80023ce:	4b87      	ldr	r3, [pc, #540]	; (80025ec <main+0x294>)
 80023d0:	2264      	movs	r2, #100	; 0x64
 80023d2:	605a      	str	r2, [r3, #4]
 steppers[0].homing = 0;
 80023d4:	4b85      	ldr	r3, [pc, #532]	; (80025ec <main+0x294>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	741a      	strb	r2, [r3, #16]
 steppers[0].dir_inv = 1;
 80023da:	4b84      	ldr	r3, [pc, #528]	; (80025ec <main+0x294>)
 80023dc:	2201      	movs	r2, #1
 80023de:	621a      	str	r2, [r3, #32]
 steppers[0].seeking_vel = 100;
 80023e0:	4b82      	ldr	r3, [pc, #520]	; (80025ec <main+0x294>)
 80023e2:	2264      	movs	r2, #100	; 0x64
 80023e4:	62da      	str	r2, [r3, #44]	; 0x2c
 steppers[0].homing_vel = 200;
 80023e6:	4b81      	ldr	r3, [pc, #516]	; (80025ec <main+0x294>)
 80023e8:	22c8      	movs	r2, #200	; 0xc8
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
 steppers[0].pull_off = 500;
 80023ec:	4b7f      	ldr	r3, [pc, #508]	; (80025ec <main+0x294>)
 80023ee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24
 steppers[0].stall_off=10000;
 80023f4:	4b7d      	ldr	r3, [pc, #500]	; (80025ec <main+0x294>)
 80023f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28
 get_uart_flag=0;
 80023fc:	4b7f      	ldr	r3, [pc, #508]	; (80025fc <main+0x2a4>)
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]

 sFilterConfig.FilterBank = 0;
 8002402:	4b7f      	ldr	r3, [pc, #508]	; (8002600 <main+0x2a8>)
 8002404:	2200      	movs	r2, #0
 8002406:	615a      	str	r2, [r3, #20]
 sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002408:	4b7d      	ldr	r3, [pc, #500]	; (8002600 <main+0x2a8>)
 800240a:	2200      	movs	r2, #0
 800240c:	619a      	str	r2, [r3, #24]
 sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800240e:	4b7c      	ldr	r3, [pc, #496]	; (8002600 <main+0x2a8>)
 8002410:	2201      	movs	r2, #1
 8002412:	61da      	str	r2, [r3, #28]
 sFilterConfig.FilterIdHigh = 0x0000;
 8002414:	4b7a      	ldr	r3, [pc, #488]	; (8002600 <main+0x2a8>)
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 sFilterConfig.FilterIdLow = 0x0000;
 800241a:	4b79      	ldr	r3, [pc, #484]	; (8002600 <main+0x2a8>)
 800241c:	2200      	movs	r2, #0
 800241e:	605a      	str	r2, [r3, #4]
 sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002420:	4b77      	ldr	r3, [pc, #476]	; (8002600 <main+0x2a8>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
 sFilterConfig.FilterMaskIdLow = 0x0000;
 8002426:	4b76      	ldr	r3, [pc, #472]	; (8002600 <main+0x2a8>)
 8002428:	2200      	movs	r2, #0
 800242a:	60da      	str	r2, [r3, #12]
 sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800242c:	4b74      	ldr	r3, [pc, #464]	; (8002600 <main+0x2a8>)
 800242e:	2200      	movs	r2, #0
 8002430:	611a      	str	r2, [r3, #16]
 //	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;
 sFilterConfig.FilterActivation=ENABLE;
 8002432:	4b73      	ldr	r3, [pc, #460]	; (8002600 <main+0x2a8>)
 8002434:	2201      	movs	r2, #1
 8002436:	621a      	str	r2, [r3, #32]
 sFilterConfig.SlaveStartFilterBank=14;
 8002438:	4b71      	ldr	r3, [pc, #452]	; (8002600 <main+0x2a8>)
 800243a:	220e      	movs	r2, #14
 800243c:	625a      	str	r2, [r3, #36]	; 0x24

 if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 800243e:	4970      	ldr	r1, [pc, #448]	; (8002600 <main+0x2a8>)
 8002440:	4870      	ldr	r0, [pc, #448]	; (8002604 <main+0x2ac>)
 8002442:	f001 ff63 	bl	800430c <HAL_CAN_ConfigFilter>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <main+0xf8>
 {
 	Error_Handler();
 800244c:	f001 fa7d 	bl	800394a <Error_Handler>
 }
 if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 8002450:	486c      	ldr	r0, [pc, #432]	; (8002604 <main+0x2ac>)
 8002452:	f002 f83b 	bl	80044cc <HAL_CAN_Start>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <main+0x108>
 {
 	Error_Handler();
 800245c:	f001 fa75 	bl	800394a <Error_Handler>
 }

 if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8002460:	2103      	movs	r1, #3
 8002462:	4868      	ldr	r0, [pc, #416]	; (8002604 <main+0x2ac>)
 8002464:	f002 fa98 	bl	8004998 <HAL_CAN_ActivateNotification>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <main+0x11a>
 {
 	Error_Handler();
 800246e:	f001 fa6c 	bl	800394a <Error_Handler>
 }

uint8_t judgment[20];
uint8_t modeflag=0;
 8002472:	2300      	movs	r3, #0
 8002474:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
int sent_step;

float machine_origin_rad[20];
float machine_origin_coordinate[20];
uint16_t RMD_origin;
int next_step=0;
 8002478:	2300      	movs	r3, #0
 800247a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
int16_t next_RMDpos;
machine_origin_coordinate[0]=0.0;
 800247e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002482:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
machine_origin_coordinate[1]=300.0;
 800248c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002490:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002494:	4a5c      	ldr	r2, [pc, #368]	; (8002608 <main+0x2b0>)
 8002496:	605a      	str	r2, [r3, #4]
BLDC_IK(machine_origin_coordinate[0],machine_origin_coordinate[1],&rad_data[0],&rad_data[1]);
 8002498:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800249c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80024a8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80024ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80024b0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024b4:	1d1a      	adds	r2, r3, #4
 80024b6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	eef0 0a47 	vmov.f32	s1, s14
 80024c2:	eeb0 0a67 	vmov.f32	s0, s15
 80024c6:	f001 f887 	bl	80035d8 <BLDC_IK>
machine_origin_rad[0]=rad_data[0];
 80024ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80024ce:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80024d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80024d6:	601a      	str	r2, [r3, #0]
machine_origin_rad[1]=rad_data[1];
 80024d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024dc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80024e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80024e4:	605a      	str	r2, [r3, #4]
RMD_origin=9000;
 80024e6:	f242 3328 	movw	r3, #9000	; 0x2328
 80024ea:	f8a7 3158 	strh.w	r3, [r7, #344]	; 0x158
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  RxData[0]=0;
	  home_position_state=0;	//実験のためアームセンサー
 80024ee:	4b3d      	ldr	r3, [pc, #244]	; (80025e4 <main+0x28c>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
	  get_uart_flag=0;
 80024f4:	4b41      	ldr	r3, [pc, #260]	; (80025fc <main+0x2a4>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2, (uint8_t *)RxData, buffersize);
 80024fa:	4b44      	ldr	r3, [pc, #272]	; (800260c <main+0x2b4>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	4943      	ldr	r1, [pc, #268]	; (8002610 <main+0x2b8>)
 8002504:	4843      	ldr	r0, [pc, #268]	; (8002614 <main+0x2bc>)
 8002506:	f004 fee3 	bl	80072d0 <HAL_UART_Receive_IT>
	  //受信するまで待つ
	  while(!get_uart_flag){}
 800250a:	bf00      	nop
 800250c:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <main+0x2a4>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0fb      	beq.n	800250c <main+0x1b4>
	  get_can_flag=1;//canデータ受信用のフラグを0に
 8002514:	4b40      	ldr	r3, [pc, #256]	; (8002618 <main+0x2c0>)
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<buffersize;i++){
 800251a:	2300      	movs	r3, #0
 800251c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002520:	e010      	b.n	8002544 <main+0x1ec>
	  		  judgment[i]=RxData[i];
 8002522:	4a3b      	ldr	r2, [pc, #236]	; (8002610 <main+0x2b8>)
 8002524:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002528:	4413      	add	r3, r2
 800252a:	7819      	ldrb	r1, [r3, #0]
 800252c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8002530:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002534:	4413      	add	r3, r2
 8002536:	460a      	mov	r2, r1
 8002538:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<buffersize;i++){
 800253a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800253e:	3301      	adds	r3, #1
 8002540:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002544:	4b31      	ldr	r3, [pc, #196]	; (800260c <main+0x2b4>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800254e:	4293      	cmp	r3, r2
 8002550:	dbe7      	blt.n	8002522 <main+0x1ca>
	  	  }
	  if(RxData[0]==0xAA && RxData[(buffersize-1)]==0xAA){
 8002552:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <main+0x2b8>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2baa      	cmp	r3, #170	; 0xaa
 8002558:	d110      	bne.n	800257c <main+0x224>
 800255a:	4b2c      	ldr	r3, [pc, #176]	; (800260c <main+0x2b4>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	3b01      	subs	r3, #1
 8002560:	4a2b      	ldr	r2, [pc, #172]	; (8002610 <main+0x2b8>)
 8002562:	5cd3      	ldrb	r3, [r2, r3]
 8002564:	2baa      	cmp	r3, #170	; 0xaa
 8002566:	d109      	bne.n	800257c <main+0x224>
		  command_judgment(judgment);	//selectmode_flagが変か
 8002568:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fc31 	bl	8001dd4 <command_judgment>
		  	  }
		  HAL_UART_Transmit(&huart2,TxData,sizeof(TxData),100);
		  continue;
	  }

	  if(selectmode_flag==1){
 8002572:	4b2a      	ldr	r3, [pc, #168]	; (800261c <main+0x2c4>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d02a      	beq.n	80025d0 <main+0x278>
 800257a:	e053      	b.n	8002624 <main+0x2cc>
		  selectmode_flag=2;
 800257c:	4b27      	ldr	r3, [pc, #156]	; (800261c <main+0x2c4>)
 800257e:	2202      	movs	r2, #2
 8002580:	701a      	strb	r2, [r3, #0]
		  TxData[0]=0xAA;
 8002582:	4b27      	ldr	r3, [pc, #156]	; (8002620 <main+0x2c8>)
 8002584:	22aa      	movs	r2, #170	; 0xaa
 8002586:	701a      	strb	r2, [r3, #0]
		  TxData[buffersize]=0xAA;
 8002588:	4b20      	ldr	r3, [pc, #128]	; (800260c <main+0x2b4>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	4b24      	ldr	r3, [pc, #144]	; (8002620 <main+0x2c8>)
 8002590:	21aa      	movs	r1, #170	; 0xaa
 8002592:	5499      	strb	r1, [r3, r2]
		  for(int i=1;i<buffersize-1;i++){
 8002594:	2301      	movs	r3, #1
 8002596:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800259a:	e00a      	b.n	80025b2 <main+0x25a>
			  TxData[i]=0xFF;
 800259c:	4a20      	ldr	r2, [pc, #128]	; (8002620 <main+0x2c8>)
 800259e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80025a2:	4413      	add	r3, r2
 80025a4:	22ff      	movs	r2, #255	; 0xff
 80025a6:	701a      	strb	r2, [r3, #0]
		  for(int i=1;i<buffersize-1;i++){
 80025a8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80025ac:	3301      	adds	r3, #1
 80025ae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <main+0x2b4>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80025bc:	429a      	cmp	r2, r3
 80025be:	dbed      	blt.n	800259c <main+0x244>
		  HAL_UART_Transmit(&huart2,TxData,sizeof(TxData),100);
 80025c0:	2364      	movs	r3, #100	; 0x64
 80025c2:	2214      	movs	r2, #20
 80025c4:	4916      	ldr	r1, [pc, #88]	; (8002620 <main+0x2c8>)
 80025c6:	4813      	ldr	r0, [pc, #76]	; (8002614 <main+0x2bc>)
 80025c8:	f004 fdf0 	bl	80071ac <HAL_UART_Transmit>
		  continue;
 80025cc:	f000 bd0f 	b.w	8002fee <main+0xc96>
		  mode_select=RxData[1];	//モード変更
 80025d0:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <main+0x2b8>)
 80025d2:	785b      	ldrb	r3, [r3, #1]
 80025d4:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 80025d8:	e102      	b.n	80027e0 <main+0x488>
 80025da:	bf00      	nop
 80025dc:	20000018 	.word	0x20000018
 80025e0:	40020000 	.word	0x40020000
 80025e4:	20000414 	.word	0x20000414
 80025e8:	2000022c 	.word	0x2000022c
 80025ec:	200008cc 	.word	0x200008cc
 80025f0:	08001025 	.word	0x08001025
 80025f4:	08001001 	.word	0x08001001
 80025f8:	447a0000 	.word	0x447a0000
 80025fc:	20000415 	.word	0x20000415
 8002600:	200002fc 	.word	0x200002fc
 8002604:	20000204 	.word	0x20000204
 8002608:	43960000 	.word	0x43960000
 800260c:	20000008 	.word	0x20000008
 8002610:	2000036c 	.word	0x2000036c
 8002614:	200002b8 	.word	0x200002b8
 8002618:	20000416 	.word	0x20000416
 800261c:	20000418 	.word	0x20000418
 8002620:	20000358 	.word	0x20000358
	  }else if(selectmode_flag==0){
 8002624:	4bb7      	ldr	r3, [pc, #732]	; (8002904 <main+0x5ac>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 80d9 	bne.w	80027e0 <main+0x488>
		  signed_transmit_receive_data[0]=RxData[1]&0xFF;	//x1
 800262e:	4bb6      	ldr	r3, [pc, #728]	; (8002908 <main+0x5b0>)
 8002630:	785b      	ldrb	r3, [r3, #1]
 8002632:	b21b      	sxth	r3, r3
 8002634:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		  signed_transmit_receive_data[0]+= (RxData[2]&0xFF)<<8;
 8002638:	f9b7 310c 	ldrsh.w	r3, [r7, #268]	; 0x10c
 800263c:	b29a      	uxth	r2, r3
 800263e:	4bb2      	ldr	r3, [pc, #712]	; (8002908 <main+0x5b0>)
 8002640:	789b      	ldrb	r3, [r3, #2]
 8002642:	b29b      	uxth	r3, r3
 8002644:	021b      	lsls	r3, r3, #8
 8002646:	b29b      	uxth	r3, r3
 8002648:	4413      	add	r3, r2
 800264a:	b29b      	uxth	r3, r3
 800264c:	b21b      	sxth	r3, r3
 800264e:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		  signed_transmit_receive_data[1]=RxData[3]&0xFF;//y1
 8002652:	4bad      	ldr	r3, [pc, #692]	; (8002908 <main+0x5b0>)
 8002654:	78db      	ldrb	r3, [r3, #3]
 8002656:	b21b      	sxth	r3, r3
 8002658:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
		  signed_transmit_receive_data[1]+= (RxData[4]&0xFF)<<8;
 800265c:	f9b7 310e 	ldrsh.w	r3, [r7, #270]	; 0x10e
 8002660:	b29a      	uxth	r2, r3
 8002662:	4ba9      	ldr	r3, [pc, #676]	; (8002908 <main+0x5b0>)
 8002664:	791b      	ldrb	r3, [r3, #4]
 8002666:	b29b      	uxth	r3, r3
 8002668:	021b      	lsls	r3, r3, #8
 800266a:	b29b      	uxth	r3, r3
 800266c:	4413      	add	r3, r2
 800266e:	b29b      	uxth	r3, r3
 8002670:	b21b      	sxth	r3, r3
 8002672:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
		  signed_transmit_receive_data[2]=RxData[5]&0xFF;	//x2
 8002676:	4ba4      	ldr	r3, [pc, #656]	; (8002908 <main+0x5b0>)
 8002678:	795b      	ldrb	r3, [r3, #5]
 800267a:	b21b      	sxth	r3, r3
 800267c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
		  signed_transmit_receive_data[2]+= (RxData[6]&0xFF)<<8;
 8002680:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
 8002684:	b29a      	uxth	r2, r3
 8002686:	4ba0      	ldr	r3, [pc, #640]	; (8002908 <main+0x5b0>)
 8002688:	799b      	ldrb	r3, [r3, #6]
 800268a:	b29b      	uxth	r3, r3
 800268c:	021b      	lsls	r3, r3, #8
 800268e:	b29b      	uxth	r3, r3
 8002690:	4413      	add	r3, r2
 8002692:	b29b      	uxth	r3, r3
 8002694:	b21b      	sxth	r3, r3
 8002696:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
		  signed_transmit_receive_data[3]=RxData[7]&0xFF;	//y2
 800269a:	4b9b      	ldr	r3, [pc, #620]	; (8002908 <main+0x5b0>)
 800269c:	79db      	ldrb	r3, [r3, #7]
 800269e:	b21b      	sxth	r3, r3
 80026a0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
		  signed_transmit_receive_data[3]+= (RxData[8]&0xFF)<<8;
 80026a4:	f9b7 3112 	ldrsh.w	r3, [r7, #274]	; 0x112
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	4b97      	ldr	r3, [pc, #604]	; (8002908 <main+0x5b0>)
 80026ac:	7a1b      	ldrb	r3, [r3, #8]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	021b      	lsls	r3, r3, #8
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	4413      	add	r3, r2
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	b21b      	sxth	r3, r3
 80026ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
		  unsigned_transmit_receive_data[0]=RxData[9]&0xFF;	//z
 80026be:	4b92      	ldr	r3, [pc, #584]	; (8002908 <main+0x5b0>)
 80026c0:	7a5b      	ldrb	r3, [r3, #9]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
		  unsigned_transmit_receive_data[0]+= (RxData[10]&0xFF)<<8;
 80026c8:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	; 0xe4
 80026cc:	4b8e      	ldr	r3, [pc, #568]	; (8002908 <main+0x5b0>)
 80026ce:	7a9b      	ldrb	r3, [r3, #10]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	b29b      	uxth	r3, r3
 80026da:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
		  unsigned_transmit_receive_data[1]=RxData[11]&0xFF;	//a1
 80026de:	4b8a      	ldr	r3, [pc, #552]	; (8002908 <main+0x5b0>)
 80026e0:	7adb      	ldrb	r3, [r3, #11]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
		  unsigned_transmit_receive_data[1]+= (RxData[12]&0xFF)<<8;
 80026e8:	f8b7 20e6 	ldrh.w	r2, [r7, #230]	; 0xe6
 80026ec:	4b86      	ldr	r3, [pc, #536]	; (8002908 <main+0x5b0>)
 80026ee:	7b1b      	ldrb	r3, [r3, #12]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	4413      	add	r3, r2
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
		  unsigned_transmit_receive_data[2]=RxData[13]&0xFF;	//a2
 80026fe:	4b82      	ldr	r3, [pc, #520]	; (8002908 <main+0x5b0>)
 8002700:	7b5b      	ldrb	r3, [r3, #13]
 8002702:	b29b      	uxth	r3, r3
 8002704:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
		  unsigned_transmit_receive_data[2]+= (RxData[14]&0xFF)<<8;
 8002708:	f8b7 20e8 	ldrh.w	r2, [r7, #232]	; 0xe8
 800270c:	4b7e      	ldr	r3, [pc, #504]	; (8002908 <main+0x5b0>)
 800270e:	7b9b      	ldrb	r3, [r3, #14]
 8002710:	b29b      	uxth	r3, r3
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	b29b      	uxth	r3, r3
 8002716:	4413      	add	r3, r2
 8002718:	b29b      	uxth	r3, r3
 800271a:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
		  unsigned_transmit_receive_data[3]=RxData[15]&0xFF;	//xl1
 800271e:	4b7a      	ldr	r3, [pc, #488]	; (8002908 <main+0x5b0>)
 8002720:	7bdb      	ldrb	r3, [r3, #15]
 8002722:	b29b      	uxth	r3, r3
 8002724:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
		  unsigned_transmit_receive_data[3]+= (RxData[16]&0xFF)<<8;
 8002728:	f8b7 20ea 	ldrh.w	r2, [r7, #234]	; 0xea
 800272c:	4b76      	ldr	r3, [pc, #472]	; (8002908 <main+0x5b0>)
 800272e:	7c1b      	ldrb	r3, [r3, #16]
 8002730:	b29b      	uxth	r3, r3
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	b29b      	uxth	r3, r3
 8002736:	4413      	add	r3, r2
 8002738:	b29b      	uxth	r3, r3
 800273a:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
		  unsigned_transmit_receive_data[4]=RxData[17]&0xFF;	//l2
 800273e:	4b72      	ldr	r3, [pc, #456]	; (8002908 <main+0x5b0>)
 8002740:	7c5b      	ldrb	r3, [r3, #17]
 8002742:	b29b      	uxth	r3, r3
 8002744:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
		  unsigned_transmit_receive_data[4]+= (RxData[18]&0xFF)<<8;
 8002748:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 800274c:	4b6e      	ldr	r3, [pc, #440]	; (8002908 <main+0x5b0>)
 800274e:	7c9b      	ldrb	r3, [r3, #18]
 8002750:	b29b      	uxth	r3, r3
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	b29b      	uxth	r3, r3
 8002756:	4413      	add	r3, r2
 8002758:	b29b      	uxth	r3, r3
 800275a:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec

		  machine_coordinate_data[0]=(float)signed_transmit_receive_data[2];	//x2をfloatにする
 800275e:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
 8002762:	ee07 3a90 	vmov	s15, r3
 8002766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800276a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
		  machine_coordinate_data[1]=(float)signed_transmit_receive_data[3];	//y2をfloatにする
 800276e:	f9b7 3112 	ldrsh.w	r3, [r7, #274]	; 0x112
 8002772:	ee07 3a90 	vmov	s15, r3
 8002776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800277a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		  BLDC_IK(machine_coordinate_data[0],machine_coordinate_data[1],&rad_data[0],&rad_data[1]);
 800277e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002782:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002786:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800278a:	1d1a      	adds	r2, r3, #4
 800278c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002790:	4611      	mov	r1, r2
 8002792:	4618      	mov	r0, r3
 8002794:	eef0 0a47 	vmov.f32	s1, s14
 8002798:	eeb0 0a67 	vmov.f32	s0, s15
 800279c:	f000 ff1c 	bl	80035d8 <BLDC_IK>

		  step_pos=(unsigned_transmit_receive_data[0]/10)*3200;	//1/10してmm/revに変換
 80027a0:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80027a4:	4a59      	ldr	r2, [pc, #356]	; (800290c <main+0x5b4>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	08db      	lsrs	r3, r3, #3
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	461a      	mov	r2, r3
 80027b0:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80027b4:	fb02 f303 	mul.w	r3, r2, r3
 80027b8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
		  RMD_pos[0]=unsigned_transmit_receive_data[1]*10;	//10倍して36000deg/revに変換
 80027bc:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 80027c0:	461a      	mov	r2, r3
 80027c2:	0092      	lsls	r2, r2, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
		  RMD_pos[1]=unsigned_transmit_receive_data[2]*10;	//10倍して36000deg/revに変換
 80027ce:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 80027d2:	461a      	mov	r2, r3
 80027d4:	0092      	lsls	r2, r2, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	b29b      	uxth	r3, r3
 80027dc:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	  }
	  if(home_position_state==1){	//初期位置モード
 80027e0:	4b4b      	ldr	r3, [pc, #300]	; (8002910 <main+0x5b8>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d116      	bne.n	8002816 <main+0x4be>
		  switch(mode_select){
 80027e8:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80027ec:	2b0a      	cmp	r3, #10
 80027ee:	d10e      	bne.n	800280e <main+0x4b6>
		  case 0x0A:
			  canid=0x01;
 80027f0:	4b48      	ldr	r3, [pc, #288]	; (8002914 <main+0x5bc>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
			  EnterMotorMode();
 80027f6:	f7fe fc27 	bl	8001048 <EnterMotorMode>
			  BLDC_CANTx();
 80027fa:	f7fe fd8f 	bl	800131c <BLDC_CANTx>
			  canid=0x02;
 80027fe:	4b45      	ldr	r3, [pc, #276]	; (8002914 <main+0x5bc>)
 8002800:	2202      	movs	r2, #2
 8002802:	601a      	str	r2, [r3, #0]
			  EnterMotorMode();
 8002804:	f7fe fc20 	bl	8001048 <EnterMotorMode>
			  BLDC_CANTx();
 8002808:	f7fe fd88 	bl	800131c <BLDC_CANTx>
			  break;
 800280c:	e3a5      	b.n	8002f5a <main+0xc02>
//				  machine_origin_rad[0]=rad_data[0];
//				  machine_origin_rad[1]=rad_data[1];
//			  }
//			  break;
		  default:
			  get_can_flag=1;
 800280e:	4b42      	ldr	r3, [pc, #264]	; (8002918 <main+0x5c0>)
 8002810:	2201      	movs	r2, #1
 8002812:	701a      	strb	r2, [r3, #0]
			  break;
 8002814:	e3a1      	b.n	8002f5a <main+0xc02>
		  }
	  }
	  else if(home_position_state==0){
 8002816:	4b3e      	ldr	r3, [pc, #248]	; (8002910 <main+0x5b8>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	f040 8390 	bne.w	8002f40 <main+0xbe8>

		  switch(mode_select){
 8002820:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8002824:	2bb1      	cmp	r3, #177	; 0xb1
 8002826:	f000 824f 	beq.w	8002cc8 <main+0x970>
 800282a:	2bb1      	cmp	r3, #177	; 0xb1
 800282c:	f300 836b 	bgt.w	8002f06 <main+0xbae>
 8002830:	2b20      	cmp	r3, #32
 8002832:	dc49      	bgt.n	80028c8 <main+0x570>
 8002834:	2b00      	cmp	r3, #0
 8002836:	f340 8366 	ble.w	8002f06 <main+0xbae>
 800283a:	3b01      	subs	r3, #1
 800283c:	2b1f      	cmp	r3, #31
 800283e:	f200 8362 	bhi.w	8002f06 <main+0xbae>
 8002842:	a201      	add	r2, pc, #4	; (adr r2, 8002848 <main+0x4f0>)
 8002844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002848:	080028d1 	.word	0x080028d1
 800284c:	080028e7 	.word	0x080028e7
 8002850:	0800291d 	.word	0x0800291d
 8002854:	08002943 	.word	0x08002943
 8002858:	0800297d 	.word	0x0800297d
 800285c:	08002991 	.word	0x08002991
 8002860:	080029a7 	.word	0x080029a7
 8002864:	080029ed 	.word	0x080029ed
 8002868:	08002f07 	.word	0x08002f07
 800286c:	08002b7f 	.word	0x08002b7f
 8002870:	08002bdd 	.word	0x08002bdd
 8002874:	08002c8b 	.word	0x08002c8b
 8002878:	08002caf 	.word	0x08002caf
 800287c:	08002f07 	.word	0x08002f07
 8002880:	08002f07 	.word	0x08002f07
 8002884:	08002f07 	.word	0x08002f07
 8002888:	08002f07 	.word	0x08002f07
 800288c:	08002f07 	.word	0x08002f07
 8002890:	08002f07 	.word	0x08002f07
 8002894:	08002f07 	.word	0x08002f07
 8002898:	08002f07 	.word	0x08002f07
 800289c:	08002f07 	.word	0x08002f07
 80028a0:	08002f07 	.word	0x08002f07
 80028a4:	08002f07 	.word	0x08002f07
 80028a8:	08002f07 	.word	0x08002f07
 80028ac:	08002f07 	.word	0x08002f07
 80028b0:	08002f07 	.word	0x08002f07
 80028b4:	08002f07 	.word	0x08002f07
 80028b8:	08002f07 	.word	0x08002f07
 80028bc:	08002f07 	.word	0x08002f07
 80028c0:	08002f07 	.word	0x08002f07
 80028c4:	08002f45 	.word	0x08002f45
 80028c8:	2b90      	cmp	r3, #144	; 0x90
 80028ca:	f000 823e 	beq.w	8002d4a <main+0x9f2>
 80028ce:	e31a      	b.n	8002f06 <main+0xbae>
		  case 0x01:	//モーターON
			  canid=0x01;
 80028d0:	4b10      	ldr	r3, [pc, #64]	; (8002914 <main+0x5bc>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
			  EnterMotorMode();
 80028d6:	f7fe fbb7 	bl	8001048 <EnterMotorMode>
			  BLDC_CANTx();
 80028da:	f7fe fd1f 	bl	800131c <BLDC_CANTx>
			  HAL_Delay(10);
 80028de:	200a      	movs	r0, #10
 80028e0:	f001 fbf4 	bl	80040cc <HAL_Delay>
//			  canid=0x02;
//			  EnterMotorMode();
//			  BLDC_CANTx();
//			  TMCsetup();	//TMC_setup
			  break;
 80028e4:	e339      	b.n	8002f5a <main+0xc02>
		  case 0x02:	//モーターOFF
			  canid=0x01;
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <main+0x5bc>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	601a      	str	r2, [r3, #0]
			  ExitMotorMode();
 80028ec:	f7fe fbe8 	bl	80010c0 <ExitMotorMode>
			  BLDC_CANTx();
 80028f0:	f7fe fd14 	bl	800131c <BLDC_CANTx>
			  canid=0x02;
 80028f4:	4b07      	ldr	r3, [pc, #28]	; (8002914 <main+0x5bc>)
 80028f6:	2202      	movs	r2, #2
 80028f8:	601a      	str	r2, [r3, #0]
			  ExitMotorMode();
 80028fa:	f7fe fbe1 	bl	80010c0 <ExitMotorMode>
			  BLDC_CANTx();
 80028fe:	f7fe fd0d 	bl	800131c <BLDC_CANTx>
			  break;
 8002902:	e32a      	b.n	8002f5a <main+0xc02>
 8002904:	20000418 	.word	0x20000418
 8002908:	2000036c 	.word	0x2000036c
 800290c:	cccccccd 	.word	0xcccccccd
 8002910:	20000414 	.word	0x20000414
 8002914:	20000410 	.word	0x20000410
 8002918:	20000416 	.word	0x20000416
		  case 0x03:	//アーム動作モード
			  if(selectmode_flag==0){
 800291c:	4ba6      	ldr	r3, [pc, #664]	; (8002bb8 <main+0x860>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	f040 8311 	bne.w	8002f48 <main+0xbf0>
				  t_position[0] = rad_data[0];
 8002926:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800292a:	4aa4      	ldr	r2, [pc, #656]	; (8002bbc <main+0x864>)
 800292c:	6013      	str	r3, [r2, #0]
				  t_position[1] = rad_data[1];
 800292e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002932:	4aa2      	ldr	r2, [pc, #648]	; (8002bbc <main+0x864>)
 8002934:	6053      	str	r3, [r2, #4]
				  BLDC_MotorRotate();
 8002936:	f7fe fe23 	bl	8001580 <BLDC_MotorRotate>
				  mode_select=0;
 800293a:	2300      	movs	r3, #0
 800293c:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
			  }
			  break;
 8002940:	e302      	b.n	8002f48 <main+0xbf0>
		  case 0x04:
			  t_position[0] = 0;
 8002942:	4b9e      	ldr	r3, [pc, #632]	; (8002bbc <main+0x864>)
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
			  t_position[1] = 0;
 800294a:	4b9c      	ldr	r3, [pc, #624]	; (8002bbc <main+0x864>)
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	605a      	str	r2, [r3, #4]
			  BLDC_M2Rotate();
 8002952:	f7ff f911 	bl	8001b78 <BLDC_M2Rotate>
			  BLDC_M1Rotate();
 8002956:	f7fe ffef 	bl	8001938 <BLDC_M1Rotate>
			  t_position[0] = machine_origin_rad[0];	//スタンバイ状態
 800295a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800295e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a95      	ldr	r2, [pc, #596]	; (8002bbc <main+0x864>)
 8002966:	6013      	str	r3, [r2, #0]
			  t_position[1] = machine_origin_rad[1];
 8002968:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800296c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4a92      	ldr	r2, [pc, #584]	; (8002bbc <main+0x864>)
 8002974:	6053      	str	r3, [r2, #4]
			  BLDC_MotorRotate();
 8002976:	f7fe fe03 	bl	8001580 <BLDC_MotorRotate>
			  break;
 800297a:	e2ee      	b.n	8002f5a <main+0xc02>
		  case 0x05:	//初期状態へ戻る
			  t_position[0] = 0;
 800297c:	4b8f      	ldr	r3, [pc, #572]	; (8002bbc <main+0x864>)
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
			  t_position[1] = M_PI;
 8002984:	4b8d      	ldr	r3, [pc, #564]	; (8002bbc <main+0x864>)
 8002986:	4a8e      	ldr	r2, [pc, #568]	; (8002bc0 <main+0x868>)
 8002988:	605a      	str	r2, [r3, #4]
			  BLDC_MotorRotate();
 800298a:	f7fe fdf9 	bl	8001580 <BLDC_MotorRotate>
			  break;
 800298e:	e2e4      	b.n	8002f5a <main+0xc02>
		  case 0x06:	//腕伸ばした状態
			  t_position[0] = 0;
 8002990:	4b8a      	ldr	r3, [pc, #552]	; (8002bbc <main+0x864>)
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
			  t_position[1] = 0;
 8002998:	4b88      	ldr	r3, [pc, #544]	; (8002bbc <main+0x864>)
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	605a      	str	r2, [r3, #4]
			  BLDC_MotorRotate();
 80029a0:	f7fe fdee 	bl	8001580 <BLDC_MotorRotate>
			  break;
 80029a4:	e2d9      	b.n	8002f5a <main+0xc02>
		  case 0x07:	//ティーチングモード開始
			  canid=0x01;
 80029a6:	4b87      	ldr	r3, [pc, #540]	; (8002bc4 <main+0x86c>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 1.0, 0.0);
 80029ac:	ed9f 2a86 	vldr	s4, [pc, #536]	; 8002bc8 <main+0x870>
 80029b0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80029b4:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8002bc8 <main+0x870>
 80029b8:	eddf 0a83 	vldr	s1, [pc, #524]	; 8002bc8 <main+0x870>
 80029bc:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8002bc8 <main+0x870>
 80029c0:	f7fe fbba 	bl	8001138 <pack_cmd>
			  BLDC_CANTx();
 80029c4:	f7fe fcaa 	bl	800131c <BLDC_CANTx>
			  canid=0x02;
 80029c8:	4b7e      	ldr	r3, [pc, #504]	; (8002bc4 <main+0x86c>)
 80029ca:	2202      	movs	r2, #2
 80029cc:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 1.0, 0.0);
 80029ce:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 8002bc8 <main+0x870>
 80029d2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80029d6:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 8002bc8 <main+0x870>
 80029da:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8002bc8 <main+0x870>
 80029de:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8002bc8 <main+0x870>
 80029e2:	f7fe fba9 	bl	8001138 <pack_cmd>
			  BLDC_CANTx();
 80029e6:	f7fe fc99 	bl	800131c <BLDC_CANTx>
			  break;
 80029ea:	e2b6      	b.n	8002f5a <main+0xc02>
		  case 0x08:	//ティーチング決定
			  canid=0x01;
 80029ec:	4b75      	ldr	r3, [pc, #468]	; (8002bc4 <main+0x86c>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 4.0, 0.0);
 80029f2:	ed9f 2a75 	vldr	s4, [pc, #468]	; 8002bc8 <main+0x870>
 80029f6:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 80029fa:	ed9f 1a73 	vldr	s2, [pc, #460]	; 8002bc8 <main+0x870>
 80029fe:	eddf 0a72 	vldr	s1, [pc, #456]	; 8002bc8 <main+0x870>
 8002a02:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8002bc8 <main+0x870>
 8002a06:	f7fe fb97 	bl	8001138 <pack_cmd>
			  BLDC_CANTx();
 8002a0a:	f7fe fc87 	bl	800131c <BLDC_CANTx>
			  unpack_reply();
 8002a0e:	f7fe fcdb 	bl	80013c8 <unpack_reply>
			  pack_cmd(p_getdata, 0.0, 100.0, 3.0, 0.0);
 8002a12:	4b6e      	ldr	r3, [pc, #440]	; (8002bcc <main+0x874>)
 8002a14:	edd3 7a00 	vldr	s15, [r3]
 8002a18:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 8002bc8 <main+0x870>
 8002a1c:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8002a20:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 8002bd0 <main+0x878>
 8002a24:	eddf 0a68 	vldr	s1, [pc, #416]	; 8002bc8 <main+0x870>
 8002a28:	eeb0 0a67 	vmov.f32	s0, s15
 8002a2c:	f7fe fb84 	bl	8001138 <pack_cmd>
			  BLDC_CANTx();
 8002a30:	f7fe fc74 	bl	800131c <BLDC_CANTx>
			  unpack_reply();
 8002a34:	f7fe fcc8 	bl	80013c8 <unpack_reply>
			  rad_data[0]=p_getdata;
 8002a38:	4b64      	ldr	r3, [pc, #400]	; (8002bcc <main+0x874>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			  canid=0x02;
 8002a40:	4b60      	ldr	r3, [pc, #384]	; (8002bc4 <main+0x86c>)
 8002a42:	2202      	movs	r2, #2
 8002a44:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 4.0, 0.0);
 8002a46:	ed9f 2a60 	vldr	s4, [pc, #384]	; 8002bc8 <main+0x870>
 8002a4a:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8002a4e:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 8002bc8 <main+0x870>
 8002a52:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8002bc8 <main+0x870>
 8002a56:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8002bc8 <main+0x870>
 8002a5a:	f7fe fb6d 	bl	8001138 <pack_cmd>
			  BLDC_CANTx();
 8002a5e:	f7fe fc5d 	bl	800131c <BLDC_CANTx>
			  unpack_reply();
 8002a62:	f7fe fcb1 	bl	80013c8 <unpack_reply>
			  pack_cmd(p_getdata, 0.0, 100.0, 3.0, 0.0);
 8002a66:	4b59      	ldr	r3, [pc, #356]	; (8002bcc <main+0x874>)
 8002a68:	edd3 7a00 	vldr	s15, [r3]
 8002a6c:	ed9f 2a56 	vldr	s4, [pc, #344]	; 8002bc8 <main+0x870>
 8002a70:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8002a74:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8002bd0 <main+0x878>
 8002a78:	eddf 0a53 	vldr	s1, [pc, #332]	; 8002bc8 <main+0x870>
 8002a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a80:	f7fe fb5a 	bl	8001138 <pack_cmd>
			  BLDC_CANTx();
 8002a84:	f7fe fc4a 	bl	800131c <BLDC_CANTx>
			  unpack_reply();
 8002a88:	f7fe fc9e 	bl	80013c8 <unpack_reply>
			  rad_data[1]=p_getdata;
 8002a8c:	4b4f      	ldr	r3, [pc, #316]	; (8002bcc <main+0x874>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			  BLDC_FK(-rad_data[0],-(rad_data[1]+M_PI),&machine_coordinate_data[0],&machine_coordinate_data[1]);
 8002a94:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002a98:	eeb1 8a67 	vneg.f32	s16, s15
 8002a9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fd fd71 	bl	8000588 <__aeabi_f2d>
 8002aa6:	a342      	add	r3, pc, #264	; (adr r3, 8002bb0 <main+0x858>)
 8002aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aac:	f7fd fc0e 	bl	80002cc <__adddf3>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f7fe f896 	bl	8000be8 <__aeabi_d2f>
 8002abc:	4603      	mov	r3, r0
 8002abe:	ee07 3a90 	vmov	s15, r3
 8002ac2:	eef1 7a67 	vneg.f32	s15, s15
 8002ac6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002aca:	1d1a      	adds	r2, r3, #4
 8002acc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	eef0 0a67 	vmov.f32	s1, s15
 8002ad8:	eeb0 0a48 	vmov.f32	s0, s16
 8002adc:	f000 fcd2 	bl	8003484 <BLDC_FK>
			  sent_data[0]=round(machine_coordinate_data[0]);	//手先座標系から機械座標系への変換
 8002ae0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fd fd4f 	bl	8000588 <__aeabi_f2d>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	ec43 2b10 	vmov	d0, r2, r3
 8002af2:	f008 fb71 	bl	800b1d8 <round>
 8002af6:	ec53 2b10 	vmov	r2, r3, d0
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	f7fe f84b 	bl	8000b98 <__aeabi_d2iz>
 8002b02:	4603      	mov	r3, r0
 8002b04:	b21b      	sxth	r3, r3
 8002b06:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
			  sent_data[1]=round(machine_coordinate_data[1]);
 8002b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fd fd3a 	bl	8000588 <__aeabi_f2d>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	ec43 2b10 	vmov	d0, r2, r3
 8002b1c:	f008 fb5c 	bl	800b1d8 <round>
 8002b20:	ec53 2b10 	vmov	r2, r3, d0
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	f7fe f836 	bl	8000b98 <__aeabi_d2iz>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	b21b      	sxth	r3, r3
 8002b30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
			  TxData[0]=0xAA;
 8002b34:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <main+0x87c>)
 8002b36:	22aa      	movs	r2, #170	; 0xaa
 8002b38:	701a      	strb	r2, [r3, #0]
			  TxData[5]=sent_data[0]&0xFF;
 8002b3a:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <main+0x87c>)
 8002b42:	715a      	strb	r2, [r3, #5]
			  TxData[6]=(sent_data[0]>>8)&0xFF;
 8002b44:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8002b48:	121b      	asrs	r3, r3, #8
 8002b4a:	b21b      	sxth	r3, r3
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4b21      	ldr	r3, [pc, #132]	; (8002bd4 <main+0x87c>)
 8002b50:	719a      	strb	r2, [r3, #6]
			  TxData[7]=sent_data[1]&0xFF;
 8002b52:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <main+0x87c>)
 8002b5a:	71da      	strb	r2, [r3, #7]
			  TxData[8]=(sent_data[1]>>8)&0xFF;
 8002b5c:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 8002b60:	121b      	asrs	r3, r3, #8
 8002b62:	b21b      	sxth	r3, r3
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <main+0x87c>)
 8002b68:	721a      	strb	r2, [r3, #8]
			  TxData[19]=0xAA;
 8002b6a:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <main+0x87c>)
 8002b6c:	22aa      	movs	r2, #170	; 0xaa
 8002b6e:	74da      	strb	r2, [r3, #19]
			  HAL_UART_Transmit(&huart2,TxData,sizeof(TxData),100);
 8002b70:	2364      	movs	r3, #100	; 0x64
 8002b72:	2214      	movs	r2, #20
 8002b74:	4917      	ldr	r1, [pc, #92]	; (8002bd4 <main+0x87c>)
 8002b76:	4818      	ldr	r0, [pc, #96]	; (8002bd8 <main+0x880>)
 8002b78:	f004 fb18 	bl	80071ac <HAL_UART_Transmit>
			  break;
 8002b7c:	e1ed      	b.n	8002f5a <main+0xc02>
		  case 0x0A:	//push&pull auto
			  if(selectmode_flag==0){
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <main+0x860>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f040 81e2 	bne.w	8002f4c <main+0xbf4>
				  prepareAbsoluteMovement(step_pos);
 8002b88:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8002b8c:	f7ff f9e0 	bl	8001f50 <prepareAbsoluteMovement>
				  runAndWait();
 8002b90:	f7ff fb5e 	bl	8002250 <runAndWait>
				  HAL_Delay(100);
 8002b94:	2064      	movs	r0, #100	; 0x64
 8002b96:	f001 fa99 	bl	80040cc <HAL_Delay>
				  prepareAbsoluteMovement(0);
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f7ff f9d8 	bl	8001f50 <prepareAbsoluteMovement>
				  runAndWait();
 8002ba0:	f7ff fb56 	bl	8002250 <runAndWait>
				  mode_select=0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
			  }
			  break;
 8002baa:	e1cf      	b.n	8002f4c <main+0xbf4>
 8002bac:	f3af 8000 	nop.w
 8002bb0:	54442d18 	.word	0x54442d18
 8002bb4:	400921fb 	.word	0x400921fb
 8002bb8:	20000418 	.word	0x20000418
 8002bbc:	20000428 	.word	0x20000428
 8002bc0:	40490fdb 	.word	0x40490fdb
 8002bc4:	20000410 	.word	0x20000410
 8002bc8:	00000000 	.word	0x00000000
 8002bcc:	2000041c 	.word	0x2000041c
 8002bd0:	42c80000 	.word	0x42c80000
 8002bd4:	20000358 	.word	0x20000358
 8002bd8:	200002b8 	.word	0x200002b8
		  case 0x0B:	//push&pull&twist auto
			  if(selectmode_flag==0){
 8002bdc:	4bce      	ldr	r3, [pc, #824]	; (8002f18 <main+0xbc0>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f040 81b5 	bne.w	8002f50 <main+0xbf8>

				  RMDTx_can_data[0] = 0xA4;
 8002be6:	4bcd      	ldr	r3, [pc, #820]	; (8002f1c <main+0xbc4>)
 8002be8:	22a4      	movs	r2, #164	; 0xa4
 8002bea:	701a      	strb	r2, [r3, #0]
				  RMDTx_can_data[1] = 0x00;
 8002bec:	4bcb      	ldr	r3, [pc, #812]	; (8002f1c <main+0xbc4>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	705a      	strb	r2, [r3, #1]
				  RMDTx_can_data[2] = 0x2C;	//speed low
 8002bf2:	4bca      	ldr	r3, [pc, #808]	; (8002f1c <main+0xbc4>)
 8002bf4:	222c      	movs	r2, #44	; 0x2c
 8002bf6:	709a      	strb	r2, [r3, #2]
				  RMDTx_can_data[3] = 0x01;	//speed high
 8002bf8:	4bc8      	ldr	r3, [pc, #800]	; (8002f1c <main+0xbc4>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	70da      	strb	r2, [r3, #3]
				  RMDTx_can_data[4] =RMD_pos[0]&0xFF;	//poslow
 8002bfe:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	4bc5      	ldr	r3, [pc, #788]	; (8002f1c <main+0xbc4>)
 8002c06:	711a      	strb	r2, [r3, #4]
				  RMDTx_can_data[5] =RMD_pos[0]>>8;
 8002c08:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002c0c:	0a1b      	lsrs	r3, r3, #8
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4bc2      	ldr	r3, [pc, #776]	; (8002f1c <main+0xbc4>)
 8002c14:	715a      	strb	r2, [r3, #5]
				  RMDTx_can_data[6] = 0x00;
 8002c16:	4bc1      	ldr	r3, [pc, #772]	; (8002f1c <main+0xbc4>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	719a      	strb	r2, [r3, #6]
				  RMDTx_can_data[7] = 0x00;
 8002c1c:	4bbf      	ldr	r3, [pc, #764]	; (8002f1c <main+0xbc4>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	71da      	strb	r2, [r3, #7]
				  RMDTx();
 8002c22:	f7fe fc6d 	bl	8001500 <RMDTx>
				  prepareAbsoluteMovement(step_pos);
 8002c26:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8002c2a:	f7ff f991 	bl	8001f50 <prepareAbsoluteMovement>
				  runAndWait();
 8002c2e:	f7ff fb0f 	bl	8002250 <runAndWait>
				  HAL_Delay(100);
 8002c32:	2064      	movs	r0, #100	; 0x64
 8002c34:	f001 fa4a 	bl	80040cc <HAL_Delay>
				  RMDTx_can_data[0] = 0xA4;
 8002c38:	4bb8      	ldr	r3, [pc, #736]	; (8002f1c <main+0xbc4>)
 8002c3a:	22a4      	movs	r2, #164	; 0xa4
 8002c3c:	701a      	strb	r2, [r3, #0]
				  RMDTx_can_data[1] = 0x00;
 8002c3e:	4bb7      	ldr	r3, [pc, #732]	; (8002f1c <main+0xbc4>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	705a      	strb	r2, [r3, #1]
				  RMDTx_can_data[2] = 0x2C;	//speed low
 8002c44:	4bb5      	ldr	r3, [pc, #724]	; (8002f1c <main+0xbc4>)
 8002c46:	222c      	movs	r2, #44	; 0x2c
 8002c48:	709a      	strb	r2, [r3, #2]
				  RMDTx_can_data[3] = 0x01;	//speed high
 8002c4a:	4bb4      	ldr	r3, [pc, #720]	; (8002f1c <main+0xbc4>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	70da      	strb	r2, [r3, #3]
				  RMDTx_can_data[4] =RMD_pos[1]&0xFF;;	//poslow
 8002c50:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4bb1      	ldr	r3, [pc, #708]	; (8002f1c <main+0xbc4>)
 8002c58:	711a      	strb	r2, [r3, #4]
				  RMDTx_can_data[5] =RMD_pos[1]>>8;
 8002c5a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	4bad      	ldr	r3, [pc, #692]	; (8002f1c <main+0xbc4>)
 8002c66:	715a      	strb	r2, [r3, #5]
				  RMDTx_can_data[6] = 0x00;
 8002c68:	4bac      	ldr	r3, [pc, #688]	; (8002f1c <main+0xbc4>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	719a      	strb	r2, [r3, #6]
				  RMDTx_can_data[7] = 0x00;
 8002c6e:	4bab      	ldr	r3, [pc, #684]	; (8002f1c <main+0xbc4>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	71da      	strb	r2, [r3, #7]
				  RMDTx();
 8002c74:	f7fe fc44 	bl	8001500 <RMDTx>
				  prepareAbsoluteMovement(0);
 8002c78:	2000      	movs	r0, #0
 8002c7a:	f7ff f969 	bl	8001f50 <prepareAbsoluteMovement>
				  runAndWait();
 8002c7e:	f7ff fae7 	bl	8002250 <runAndWait>
				  mode_select=0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
			  }
			  break;
 8002c88:	e162      	b.n	8002f50 <main+0xbf8>
		  case 0x0C:	//keep push
			  if(selectmode_flag==0){
 8002c8a:	4ba3      	ldr	r3, [pc, #652]	; (8002f18 <main+0xbc0>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f040 8160 	bne.w	8002f54 <main+0xbfc>
				  prepareAbsoluteMovement(step_pos);
 8002c94:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8002c98:	f7ff f95a 	bl	8001f50 <prepareAbsoluteMovement>
				  runAndWait();
 8002c9c:	f7ff fad8 	bl	8002250 <runAndWait>
				  HAL_Delay(100);
 8002ca0:	2064      	movs	r0, #100	; 0x64
 8002ca2:	f001 fa13 	bl	80040cc <HAL_Delay>
				  mode_select=0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
			  }
			  break;
 8002cac:	e152      	b.n	8002f54 <main+0xbfc>
		  case 0x0D:	//leave button
			  if(selectmode_flag==0){
 8002cae:	4b9a      	ldr	r3, [pc, #616]	; (8002f18 <main+0xbc0>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f040 8150 	bne.w	8002f58 <main+0xc00>
				  stepperHoming();
 8002cb8:	f7ff faec 	bl	8002294 <stepperHoming>
				  runAndWait();
 8002cbc:	f7ff fac8 	bl	8002250 <runAndWait>
				  mode_select=0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
			  }
			  break;
 8002cc6:	e147      	b.n	8002f58 <main+0xc00>
		  case 0x20:	//InIt
			  break;
		  case 0xB1:
			  next_RMDpos+=3600;
 8002cc8:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 8002ccc:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	f8a7 3172 	strh.w	r3, [r7, #370]	; 0x172
			  RMDTx_can_data[0] = 0xA4;
 8002cd6:	4b91      	ldr	r3, [pc, #580]	; (8002f1c <main+0xbc4>)
 8002cd8:	22a4      	movs	r2, #164	; 0xa4
 8002cda:	701a      	strb	r2, [r3, #0]
			  RMDTx_can_data[1] = 0x00;
 8002cdc:	4b8f      	ldr	r3, [pc, #572]	; (8002f1c <main+0xbc4>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	705a      	strb	r2, [r3, #1]
			  RMDTx_can_data[2] = 0x2C;	//speed low
 8002ce2:	4b8e      	ldr	r3, [pc, #568]	; (8002f1c <main+0xbc4>)
 8002ce4:	222c      	movs	r2, #44	; 0x2c
 8002ce6:	709a      	strb	r2, [r3, #2]
			  RMDTx_can_data[3] = 0x01;	//speed high
 8002ce8:	4b8c      	ldr	r3, [pc, #560]	; (8002f1c <main+0xbc4>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	70da      	strb	r2, [r3, #3]
			  RMDTx_can_data[4] =next_RMDpos&0xFF;;	//poslow
 8002cee:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	4b89      	ldr	r3, [pc, #548]	; (8002f1c <main+0xbc4>)
 8002cf6:	711a      	strb	r2, [r3, #4]
			  RMDTx_can_data[5] =next_RMDpos>>8;
 8002cf8:	f9b7 3172 	ldrsh.w	r3, [r7, #370]	; 0x172
 8002cfc:	121b      	asrs	r3, r3, #8
 8002cfe:	b21b      	sxth	r3, r3
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	4b86      	ldr	r3, [pc, #536]	; (8002f1c <main+0xbc4>)
 8002d04:	715a      	strb	r2, [r3, #5]
			  RMDTx_can_data[6] = 0x00;
 8002d06:	4b85      	ldr	r3, [pc, #532]	; (8002f1c <main+0xbc4>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	719a      	strb	r2, [r3, #6]
			  RMDTx_can_data[7] = 0x00;
 8002d0c:	4b83      	ldr	r3, [pc, #524]	; (8002f1c <main+0xbc4>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	71da      	strb	r2, [r3, #7]
			  RMDTx();
 8002d12:	f7fe fbf5 	bl	8001500 <RMDTx>
			  next_step+=10;
 8002d16:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002d1a:	330a      	adds	r3, #10
 8002d1c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
			  sent_step=(next_step/10)*3200;
 8002d20:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002d24:	4a7e      	ldr	r2, [pc, #504]	; (8002f20 <main+0xbc8>)
 8002d26:	fb82 1203 	smull	r1, r2, r2, r3
 8002d2a:	1092      	asrs	r2, r2, #2
 8002d2c:	17db      	asrs	r3, r3, #31
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8002d34:	fb02 f303 	mul.w	r3, r2, r3
 8002d38:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
			  prepareAbsoluteMovement(sent_step);
 8002d3c:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8002d40:	f7ff f906 	bl	8001f50 <prepareAbsoluteMovement>
			  runAndWait();
 8002d44:	f7ff fa84 	bl	8002250 <runAndWait>
			  break;
 8002d48:	e107      	b.n	8002f5a <main+0xc02>
		  case 0x90:
			  canid=0x01;
 8002d4a:	4b76      	ldr	r3, [pc, #472]	; (8002f24 <main+0xbcc>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 3.0, 0.0);
 8002d50:	ed9f 2a75 	vldr	s4, [pc, #468]	; 8002f28 <main+0xbd0>
 8002d54:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8002d58:	ed9f 1a73 	vldr	s2, [pc, #460]	; 8002f28 <main+0xbd0>
 8002d5c:	eddf 0a72 	vldr	s1, [pc, #456]	; 8002f28 <main+0xbd0>
 8002d60:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8002f28 <main+0xbd0>
 8002d64:	f7fe f9e8 	bl	8001138 <pack_cmd>
			  BLDC_CANTx();
 8002d68:	f7fe fad8 	bl	800131c <BLDC_CANTx>
			  unpack_reply();
 8002d6c:	f7fe fb2c 	bl	80013c8 <unpack_reply>
			  rad_data[0]=p_getdata;
 8002d70:	4b6e      	ldr	r3, [pc, #440]	; (8002f2c <main+0xbd4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			  canid=0x02;
 8002d78:	4b6a      	ldr	r3, [pc, #424]	; (8002f24 <main+0xbcc>)
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 3.0, 0.0);
 8002d7e:	ed9f 2a6a 	vldr	s4, [pc, #424]	; 8002f28 <main+0xbd0>
 8002d82:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8002d86:	ed9f 1a68 	vldr	s2, [pc, #416]	; 8002f28 <main+0xbd0>
 8002d8a:	eddf 0a67 	vldr	s1, [pc, #412]	; 8002f28 <main+0xbd0>
 8002d8e:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8002f28 <main+0xbd0>
 8002d92:	f7fe f9d1 	bl	8001138 <pack_cmd>
			  BLDC_CANTx();
 8002d96:	f7fe fac1 	bl	800131c <BLDC_CANTx>
			  unpack_reply();
 8002d9a:	f7fe fb15 	bl	80013c8 <unpack_reply>
			  rad_data[1]=p_getdata;
 8002d9e:	4b63      	ldr	r3, [pc, #396]	; (8002f2c <main+0xbd4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

			  canid=0x01;
 8002da6:	4b5f      	ldr	r3, [pc, #380]	; (8002f24 <main+0xbcc>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	601a      	str	r2, [r3, #0]
			  pack_cmd(rad_data[0]+0.1, 0.0, 50.0, 2.0, 0.0);
 8002dac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fd fbe9 	bl	8000588 <__aeabi_f2d>
 8002db6:	a356      	add	r3, pc, #344	; (adr r3, 8002f10 <main+0xbb8>)
 8002db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbc:	f7fd fa86 	bl	80002cc <__adddf3>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f7fd ff0e 	bl	8000be8 <__aeabi_d2f>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	ed9f 2a56 	vldr	s4, [pc, #344]	; 8002f28 <main+0xbd0>
 8002dd2:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8002dd6:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8002f30 <main+0xbd8>
 8002dda:	eddf 0a53 	vldr	s1, [pc, #332]	; 8002f28 <main+0xbd0>
 8002dde:	ee00 3a10 	vmov	s0, r3
 8002de2:	f7fe f9a9 	bl	8001138 <pack_cmd>
			  BLDC_CANTx();
 8002de6:	f7fe fa99 	bl	800131c <BLDC_CANTx>
			  unpack_reply();
 8002dea:	f7fe faed 	bl	80013c8 <unpack_reply>
			  rad_data[0]=p_getdata;
 8002dee:	4b4f      	ldr	r3, [pc, #316]	; (8002f2c <main+0xbd4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			  canid=0x02;
 8002df6:	4b4b      	ldr	r3, [pc, #300]	; (8002f24 <main+0xbcc>)
 8002df8:	2202      	movs	r2, #2
 8002dfa:	601a      	str	r2, [r3, #0]
			  pack_cmd(rad_data[1]+0.1, 0.0, 50.0, 2.0, 0.0);
 8002dfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fd fbc1 	bl	8000588 <__aeabi_f2d>
 8002e06:	a342      	add	r3, pc, #264	; (adr r3, 8002f10 <main+0xbb8>)
 8002e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0c:	f7fd fa5e 	bl	80002cc <__adddf3>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4610      	mov	r0, r2
 8002e16:	4619      	mov	r1, r3
 8002e18:	f7fd fee6 	bl	8000be8 <__aeabi_d2f>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	ed9f 2a42 	vldr	s4, [pc, #264]	; 8002f28 <main+0xbd0>
 8002e22:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8002e26:	ed9f 1a42 	vldr	s2, [pc, #264]	; 8002f30 <main+0xbd8>
 8002e2a:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8002f28 <main+0xbd0>
 8002e2e:	ee00 3a10 	vmov	s0, r3
 8002e32:	f7fe f981 	bl	8001138 <pack_cmd>
			  BLDC_CANTx();
 8002e36:	f7fe fa71 	bl	800131c <BLDC_CANTx>
			  unpack_reply();
 8002e3a:	f7fe fac5 	bl	80013c8 <unpack_reply>
			  rad_data[1]=p_getdata;
 8002e3e:	4b3b      	ldr	r3, [pc, #236]	; (8002f2c <main+0xbd4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

			  BLDC_FK(rad_data[0],rad_data[1],&machine_coordinate_data[0],&machine_coordinate_data[1]);
 8002e46:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002e4a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002e4e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002e52:	1d1a      	adds	r2, r3, #4
 8002e54:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	eef0 0a47 	vmov.f32	s1, s14
 8002e60:	eeb0 0a67 	vmov.f32	s0, s15
 8002e64:	f000 fb0e 	bl	8003484 <BLDC_FK>
			  sent_data[0]=round(machine_coordinate_data[0]);	//手先座標系から機械座標系への変換
 8002e68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fd fb8b 	bl	8000588 <__aeabi_f2d>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	ec43 2b10 	vmov	d0, r2, r3
 8002e7a:	f008 f9ad 	bl	800b1d8 <round>
 8002e7e:	ec53 2b10 	vmov	r2, r3, d0
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	f7fd fe87 	bl	8000b98 <__aeabi_d2iz>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	b21b      	sxth	r3, r3
 8002e8e:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
			  sent_data[1]=round(machine_coordinate_data[1]);
 8002e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd fb76 	bl	8000588 <__aeabi_f2d>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	ec43 2b10 	vmov	d0, r2, r3
 8002ea4:	f008 f998 	bl	800b1d8 <round>
 8002ea8:	ec53 2b10 	vmov	r2, r3, d0
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f7fd fe72 	bl	8000b98 <__aeabi_d2iz>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	b21b      	sxth	r3, r3
 8002eb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
			  TxData[0]=0xAA;
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <main+0xbdc>)
 8002ebe:	22aa      	movs	r2, #170	; 0xaa
 8002ec0:	701a      	strb	r2, [r3, #0]
			  TxData[5]=sent_data[0]&0xFF;
 8002ec2:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <main+0xbdc>)
 8002eca:	715a      	strb	r2, [r3, #5]
			  TxData[6]=(sent_data[0]>>8)&0xFF;
 8002ecc:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8002ed0:	121b      	asrs	r3, r3, #8
 8002ed2:	b21b      	sxth	r3, r3
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <main+0xbdc>)
 8002ed8:	719a      	strb	r2, [r3, #6]
			  TxData[7]=sent_data[1]&0xFF;
 8002eda:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <main+0xbdc>)
 8002ee2:	71da      	strb	r2, [r3, #7]
			  TxData[8]=(sent_data[1]>>8)&0xFF;
 8002ee4:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 8002ee8:	121b      	asrs	r3, r3, #8
 8002eea:	b21b      	sxth	r3, r3
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <main+0xbdc>)
 8002ef0:	721a      	strb	r2, [r3, #8]
			  TxData[19]=0xAA;
 8002ef2:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <main+0xbdc>)
 8002ef4:	22aa      	movs	r2, #170	; 0xaa
 8002ef6:	74da      	strb	r2, [r3, #19]
			  HAL_UART_Transmit(&huart2,TxData,sizeof(TxData),100);
 8002ef8:	2364      	movs	r3, #100	; 0x64
 8002efa:	2214      	movs	r2, #20
 8002efc:	490d      	ldr	r1, [pc, #52]	; (8002f34 <main+0xbdc>)
 8002efe:	480e      	ldr	r0, [pc, #56]	; (8002f38 <main+0xbe0>)
 8002f00:	f004 f954 	bl	80071ac <HAL_UART_Transmit>
			  break;
 8002f04:	e029      	b.n	8002f5a <main+0xc02>
		  default:
			  get_can_flag=1;
 8002f06:	4b0d      	ldr	r3, [pc, #52]	; (8002f3c <main+0xbe4>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
			  break;
 8002f0c:	e025      	b.n	8002f5a <main+0xc02>
 8002f0e:	bf00      	nop
 8002f10:	9999999a 	.word	0x9999999a
 8002f14:	3fb99999 	.word	0x3fb99999
 8002f18:	20000418 	.word	0x20000418
 8002f1c:	200003f8 	.word	0x200003f8
 8002f20:	66666667 	.word	0x66666667
 8002f24:	20000410 	.word	0x20000410
 8002f28:	00000000 	.word	0x00000000
 8002f2c:	2000041c 	.word	0x2000041c
 8002f30:	42480000 	.word	0x42480000
 8002f34:	20000358 	.word	0x20000358
 8002f38:	200002b8 	.word	0x200002b8
 8002f3c:	20000416 	.word	0x20000416
		  }
	  }
 8002f40:	bf00      	nop
 8002f42:	e00a      	b.n	8002f5a <main+0xc02>
			  break;
 8002f44:	bf00      	nop
 8002f46:	e008      	b.n	8002f5a <main+0xc02>
			  break;
 8002f48:	bf00      	nop
 8002f4a:	e006      	b.n	8002f5a <main+0xc02>
			  break;
 8002f4c:	bf00      	nop
 8002f4e:	e004      	b.n	8002f5a <main+0xc02>
			  break;
 8002f50:	bf00      	nop
 8002f52:	e002      	b.n	8002f5a <main+0xc02>
			  break;
 8002f54:	bf00      	nop
 8002f56:	e000      	b.n	8002f5a <main+0xc02>
			  break;
 8002f58:	bf00      	nop
	  TxData[0]=0xAA;
 8002f5a:	4b26      	ldr	r3, [pc, #152]	; (8002ff4 <main+0xc9c>)
 8002f5c:	22aa      	movs	r2, #170	; 0xaa
 8002f5e:	701a      	strb	r2, [r3, #0]
	  TxData[1]= mode_select;
 8002f60:	4a24      	ldr	r2, [pc, #144]	; (8002ff4 <main+0xc9c>)
 8002f62:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8002f66:	7053      	strb	r3, [r2, #1]
	  TxData[buffersize-1]=0xAA;
 8002f68:	4b23      	ldr	r3, [pc, #140]	; (8002ff8 <main+0xca0>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	4a21      	ldr	r2, [pc, #132]	; (8002ff4 <main+0xc9c>)
 8002f70:	21aa      	movs	r1, #170	; 0xaa
 8002f72:	54d1      	strb	r1, [r2, r3]
	  for(int i=2;i<buffersize-1;i++){
 8002f74:	2302      	movs	r3, #2
 8002f76:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8002f7a:	e00a      	b.n	8002f92 <main+0xc3a>
		  TxData[i]=0xFF;
 8002f7c:	4a1d      	ldr	r2, [pc, #116]	; (8002ff4 <main+0xc9c>)
 8002f7e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002f82:	4413      	add	r3, r2
 8002f84:	22ff      	movs	r2, #255	; 0xff
 8002f86:	701a      	strb	r2, [r3, #0]
	  for(int i=2;i<buffersize-1;i++){
 8002f88:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8002f92:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <main+0xca0>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	dbed      	blt.n	8002f7c <main+0xc24>
	  }
	  HAL_UART_Transmit(&huart2,TxData,sizeof(TxData),100);
 8002fa0:	2364      	movs	r3, #100	; 0x64
 8002fa2:	2214      	movs	r2, #20
 8002fa4:	4913      	ldr	r1, [pc, #76]	; (8002ff4 <main+0xc9c>)
 8002fa6:	4815      	ldr	r0, [pc, #84]	; (8002ffc <main+0xca4>)
 8002fa8:	f004 f900 	bl	80071ac <HAL_UART_Transmit>
	  for(int i=0;i<buffersize;i++){	//memset(メモリーセット)で一発でできる
 8002fac:	2300      	movs	r3, #0
 8002fae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002fb2:	e010      	b.n	8002fd6 <main+0xc7e>
		  RxData[i]=0;
 8002fb4:	4a12      	ldr	r2, [pc, #72]	; (8003000 <main+0xca8>)
 8002fb6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002fba:	4413      	add	r3, r2
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	701a      	strb	r2, [r3, #0]
		  TxData[i]=0;
 8002fc0:	4a0c      	ldr	r2, [pc, #48]	; (8002ff4 <main+0xc9c>)
 8002fc2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002fc6:	4413      	add	r3, r2
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<buffersize;i++){	//memset(メモリーセット)で一発でできる
 8002fcc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <main+0xca0>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	dbe7      	blt.n	8002fb4 <main+0xc5c>
	  }
	  while(!get_can_flag){}
 8002fe4:	bf00      	nop
 8002fe6:	4b07      	ldr	r3, [pc, #28]	; (8003004 <main+0xcac>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0fb      	beq.n	8002fe6 <main+0xc8e>
	  home_position_state=0;	//実験のためアームセンサー
 8002fee:	f7ff ba7e 	b.w	80024ee <main+0x196>
 8002ff2:	bf00      	nop
 8002ff4:	20000358 	.word	0x20000358
 8002ff8:	20000008 	.word	0x20000008
 8002ffc:	200002b8 	.word	0x200002b8
 8003000:	2000036c 	.word	0x2000036c
 8003004:	20000416 	.word	0x20000416

08003008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b094      	sub	sp, #80	; 0x50
 800300c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800300e:	f107 031c 	add.w	r3, r7, #28
 8003012:	2234      	movs	r2, #52	; 0x34
 8003014:	2100      	movs	r1, #0
 8003016:	4618      	mov	r0, r3
 8003018:	f005 faaa 	bl	8008570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800301c:	f107 0308 	add.w	r3, r7, #8
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800302c:	2300      	movs	r3, #0
 800302e:	607b      	str	r3, [r7, #4]
 8003030:	4b29      	ldr	r3, [pc, #164]	; (80030d8 <SystemClock_Config+0xd0>)
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	4a28      	ldr	r2, [pc, #160]	; (80030d8 <SystemClock_Config+0xd0>)
 8003036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303a:	6413      	str	r3, [r2, #64]	; 0x40
 800303c:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <SystemClock_Config+0xd0>)
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003044:	607b      	str	r3, [r7, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003048:	2300      	movs	r3, #0
 800304a:	603b      	str	r3, [r7, #0]
 800304c:	4b23      	ldr	r3, [pc, #140]	; (80030dc <SystemClock_Config+0xd4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a22      	ldr	r2, [pc, #136]	; (80030dc <SystemClock_Config+0xd4>)
 8003052:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	4b20      	ldr	r3, [pc, #128]	; (80030dc <SystemClock_Config+0xd4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003064:	2302      	movs	r3, #2
 8003066:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003068:	2301      	movs	r3, #1
 800306a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800306c:	2310      	movs	r3, #16
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003070:	2302      	movs	r3, #2
 8003072:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003074:	2300      	movs	r3, #0
 8003076:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003078:	2308      	movs	r3, #8
 800307a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 800307c:	23a0      	movs	r3, #160	; 0xa0
 800307e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003080:	2302      	movs	r3, #2
 8003082:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003084:	2302      	movs	r3, #2
 8003086:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003088:	2302      	movs	r3, #2
 800308a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800308c:	f107 031c 	add.w	r3, r7, #28
 8003090:	4618      	mov	r0, r3
 8003092:	f002 fd99 	bl	8005bc8 <HAL_RCC_OscConfig>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800309c:	f000 fc55 	bl	800394a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030a0:	230f      	movs	r3, #15
 80030a2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030a4:	2302      	movs	r3, #2
 80030a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030a8:	2300      	movs	r3, #0
 80030aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80030ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80030b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80030b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80030b8:	f107 0308 	add.w	r3, r7, #8
 80030bc:	2105      	movs	r1, #5
 80030be:	4618      	mov	r0, r3
 80030c0:	f002 fa38 	bl	8005534 <HAL_RCC_ClockConfig>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80030ca:	f000 fc3e 	bl	800394a <Error_Handler>
  }
}
 80030ce:	bf00      	nop
 80030d0:	3750      	adds	r7, #80	; 0x50
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40007000 	.word	0x40007000

080030e0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80030e4:	4b18      	ldr	r3, [pc, #96]	; (8003148 <MX_CAN1_Init+0x68>)
 80030e6:	4a19      	ldr	r2, [pc, #100]	; (800314c <MX_CAN1_Init+0x6c>)
 80030e8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80030ea:	4b17      	ldr	r3, [pc, #92]	; (8003148 <MX_CAN1_Init+0x68>)
 80030ec:	2204      	movs	r2, #4
 80030ee:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80030f0:	4b15      	ldr	r3, [pc, #84]	; (8003148 <MX_CAN1_Init+0x68>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80030f6:	4b14      	ldr	r3, [pc, #80]	; (8003148 <MX_CAN1_Init+0x68>)
 80030f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030fc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80030fe:	4b12      	ldr	r3, [pc, #72]	; (8003148 <MX_CAN1_Init+0x68>)
 8003100:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8003104:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003106:	4b10      	ldr	r3, [pc, #64]	; (8003148 <MX_CAN1_Init+0x68>)
 8003108:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800310c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800310e:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <MX_CAN1_Init+0x68>)
 8003110:	2200      	movs	r2, #0
 8003112:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <MX_CAN1_Init+0x68>)
 8003116:	2200      	movs	r2, #0
 8003118:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800311a:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <MX_CAN1_Init+0x68>)
 800311c:	2200      	movs	r2, #0
 800311e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003120:	4b09      	ldr	r3, [pc, #36]	; (8003148 <MX_CAN1_Init+0x68>)
 8003122:	2200      	movs	r2, #0
 8003124:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003126:	4b08      	ldr	r3, [pc, #32]	; (8003148 <MX_CAN1_Init+0x68>)
 8003128:	2200      	movs	r2, #0
 800312a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800312c:	4b06      	ldr	r3, [pc, #24]	; (8003148 <MX_CAN1_Init+0x68>)
 800312e:	2200      	movs	r2, #0
 8003130:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003132:	4805      	ldr	r0, [pc, #20]	; (8003148 <MX_CAN1_Init+0x68>)
 8003134:	f000 ffee 	bl	8004114 <HAL_CAN_Init>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800313e:	f000 fc04 	bl	800394a <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000204 	.word	0x20000204
 800314c:	40006400 	.word	0x40006400

08003150 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08e      	sub	sp, #56	; 0x38
 8003154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003156:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	609a      	str	r2, [r3, #8]
 8003162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003164:	f107 0320 	add.w	r3, r7, #32
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800316e:	1d3b      	adds	r3, r7, #4
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	611a      	str	r2, [r3, #16]
 800317c:	615a      	str	r2, [r3, #20]
 800317e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003180:	4b2b      	ldr	r3, [pc, #172]	; (8003230 <MX_TIM3_Init+0xe0>)
 8003182:	4a2c      	ldr	r2, [pc, #176]	; (8003234 <MX_TIM3_Init+0xe4>)
 8003184:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 8003186:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <MX_TIM3_Init+0xe0>)
 8003188:	229f      	movs	r2, #159	; 0x9f
 800318a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800318c:	4b28      	ldr	r3, [pc, #160]	; (8003230 <MX_TIM3_Init+0xe0>)
 800318e:	2200      	movs	r2, #0
 8003190:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003192:	4b27      	ldr	r3, [pc, #156]	; (8003230 <MX_TIM3_Init+0xe0>)
 8003194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003198:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800319a:	4b25      	ldr	r3, [pc, #148]	; (8003230 <MX_TIM3_Init+0xe0>)
 800319c:	2200      	movs	r2, #0
 800319e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031a0:	4b23      	ldr	r3, [pc, #140]	; (8003230 <MX_TIM3_Init+0xe0>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80031a6:	4822      	ldr	r0, [pc, #136]	; (8003230 <MX_TIM3_Init+0xe0>)
 80031a8:	f002 ffac 	bl	8006104 <HAL_TIM_Base_Init>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80031b2:	f000 fbca 	bl	800394a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80031bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031c0:	4619      	mov	r1, r3
 80031c2:	481b      	ldr	r0, [pc, #108]	; (8003230 <MX_TIM3_Init+0xe0>)
 80031c4:	f003 fac0 	bl	8006748 <HAL_TIM_ConfigClockSource>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80031ce:	f000 fbbc 	bl	800394a <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80031d2:	4817      	ldr	r0, [pc, #92]	; (8003230 <MX_TIM3_Init+0xe0>)
 80031d4:	f002 ffe5 	bl	80061a2 <HAL_TIM_OC_Init>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80031de:	f000 fbb4 	bl	800394a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031e2:	2300      	movs	r3, #0
 80031e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031e6:	2300      	movs	r3, #0
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031ea:	f107 0320 	add.w	r3, r7, #32
 80031ee:	4619      	mov	r1, r3
 80031f0:	480f      	ldr	r0, [pc, #60]	; (8003230 <MX_TIM3_Init+0xe0>)
 80031f2:	f003 fea9 	bl	8006f48 <HAL_TIMEx_MasterConfigSynchronization>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80031fc:	f000 fba5 	bl	800394a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003200:	2300      	movs	r3, #0
 8003202:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003210:	1d3b      	adds	r3, r7, #4
 8003212:	2200      	movs	r2, #0
 8003214:	4619      	mov	r1, r3
 8003216:	4806      	ldr	r0, [pc, #24]	; (8003230 <MX_TIM3_Init+0xe0>)
 8003218:	f003 fa3a 	bl	8006690 <HAL_TIM_OC_ConfigChannel>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003222:	f000 fb92 	bl	800394a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003226:	bf00      	nop
 8003228:	3738      	adds	r7, #56	; 0x38
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	2000022c 	.word	0x2000022c
 8003234:	40000400 	.word	0x40000400

08003238 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800323c:	4b10      	ldr	r3, [pc, #64]	; (8003280 <MX_USART1_UART_Init+0x48>)
 800323e:	4a11      	ldr	r2, [pc, #68]	; (8003284 <MX_USART1_UART_Init+0x4c>)
 8003240:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 8003242:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <MX_USART1_UART_Init+0x48>)
 8003244:	4a10      	ldr	r2, [pc, #64]	; (8003288 <MX_USART1_UART_Init+0x50>)
 8003246:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003248:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <MX_USART1_UART_Init+0x48>)
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <MX_USART1_UART_Init+0x48>)
 8003250:	2200      	movs	r2, #0
 8003252:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003254:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <MX_USART1_UART_Init+0x48>)
 8003256:	2200      	movs	r2, #0
 8003258:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <MX_USART1_UART_Init+0x48>)
 800325c:	220c      	movs	r2, #12
 800325e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003260:	4b07      	ldr	r3, [pc, #28]	; (8003280 <MX_USART1_UART_Init+0x48>)
 8003262:	2200      	movs	r2, #0
 8003264:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <MX_USART1_UART_Init+0x48>)
 8003268:	2200      	movs	r2, #0
 800326a:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800326c:	4804      	ldr	r0, [pc, #16]	; (8003280 <MX_USART1_UART_Init+0x48>)
 800326e:	f003 ff48 	bl	8007102 <HAL_HalfDuplex_Init>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8003278:	f000 fb67 	bl	800394a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800327c:	bf00      	nop
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20000274 	.word	0x20000274
 8003284:	40011000 	.word	0x40011000
 8003288:	0007a120 	.word	0x0007a120

0800328c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003290:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <MX_USART2_UART_Init+0x4c>)
 8003292:	4a12      	ldr	r2, [pc, #72]	; (80032dc <MX_USART2_UART_Init+0x50>)
 8003294:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003296:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <MX_USART2_UART_Init+0x4c>)
 8003298:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800329c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800329e:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <MX_USART2_UART_Init+0x4c>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <MX_USART2_UART_Init+0x4c>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032aa:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <MX_USART2_UART_Init+0x4c>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032b0:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <MX_USART2_UART_Init+0x4c>)
 80032b2:	220c      	movs	r2, #12
 80032b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032b6:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <MX_USART2_UART_Init+0x4c>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <MX_USART2_UART_Init+0x4c>)
 80032be:	2200      	movs	r2, #0
 80032c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032c2:	4805      	ldr	r0, [pc, #20]	; (80032d8 <MX_USART2_UART_Init+0x4c>)
 80032c4:	f003 fed0 	bl	8007068 <HAL_UART_Init>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80032ce:	f000 fb3c 	bl	800394a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	200002b8 	.word	0x200002b8
 80032dc:	40004400 	.word	0x40004400

080032e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08a      	sub	sp, #40	; 0x28
 80032e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e6:	f107 0314 	add.w	r3, r7, #20
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	605a      	str	r2, [r3, #4]
 80032f0:	609a      	str	r2, [r3, #8]
 80032f2:	60da      	str	r2, [r3, #12]
 80032f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	4b5e      	ldr	r3, [pc, #376]	; (8003474 <MX_GPIO_Init+0x194>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	4a5d      	ldr	r2, [pc, #372]	; (8003474 <MX_GPIO_Init+0x194>)
 8003300:	f043 0304 	orr.w	r3, r3, #4
 8003304:	6313      	str	r3, [r2, #48]	; 0x30
 8003306:	4b5b      	ldr	r3, [pc, #364]	; (8003474 <MX_GPIO_Init+0x194>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	4b57      	ldr	r3, [pc, #348]	; (8003474 <MX_GPIO_Init+0x194>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	4a56      	ldr	r2, [pc, #344]	; (8003474 <MX_GPIO_Init+0x194>)
 800331c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003320:	6313      	str	r3, [r2, #48]	; 0x30
 8003322:	4b54      	ldr	r3, [pc, #336]	; (8003474 <MX_GPIO_Init+0x194>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	4b50      	ldr	r3, [pc, #320]	; (8003474 <MX_GPIO_Init+0x194>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	4a4f      	ldr	r2, [pc, #316]	; (8003474 <MX_GPIO_Init+0x194>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	6313      	str	r3, [r2, #48]	; 0x30
 800333e:	4b4d      	ldr	r3, [pc, #308]	; (8003474 <MX_GPIO_Init+0x194>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	607b      	str	r3, [r7, #4]
 800334e:	4b49      	ldr	r3, [pc, #292]	; (8003474 <MX_GPIO_Init+0x194>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	4a48      	ldr	r2, [pc, #288]	; (8003474 <MX_GPIO_Init+0x194>)
 8003354:	f043 0302 	orr.w	r3, r3, #2
 8003358:	6313      	str	r3, [r2, #48]	; 0x30
 800335a:	4b46      	ldr	r3, [pc, #280]	; (8003474 <MX_GPIO_Init+0x194>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	607b      	str	r3, [r7, #4]
 8003364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003366:	2200      	movs	r2, #0
 8003368:	2120      	movs	r1, #32
 800336a:	4843      	ldr	r0, [pc, #268]	; (8003478 <MX_GPIO_Init+0x198>)
 800336c:	f002 f8b0 	bl	80054d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8003370:	2200      	movs	r2, #0
 8003372:	f44f 7144 	mov.w	r1, #784	; 0x310
 8003376:	4841      	ldr	r0, [pc, #260]	; (800347c <MX_GPIO_Init+0x19c>)
 8003378:	f002 f8aa 	bl	80054d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800337c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003382:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003388:	2300      	movs	r3, #0
 800338a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800338c:	f107 0314 	add.w	r3, r7, #20
 8003390:	4619      	mov	r1, r3
 8003392:	483b      	ldr	r0, [pc, #236]	; (8003480 <MX_GPIO_Init+0x1a0>)
 8003394:	f001 fef0 	bl	8005178 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003398:	2320      	movs	r3, #32
 800339a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800339c:	2301      	movs	r3, #1
 800339e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a4:	2300      	movs	r3, #0
 80033a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80033a8:	f107 0314 	add.w	r3, r7, #20
 80033ac:	4619      	mov	r1, r3
 80033ae:	4832      	ldr	r0, [pc, #200]	; (8003478 <MX_GPIO_Init+0x198>)
 80033b0:	f001 fee2 	bl	8005178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 80033b4:	f44f 6390 	mov.w	r3, #1152	; 0x480
 80033b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80033ba:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80033be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c4:	f107 0314 	add.w	r3, r7, #20
 80033c8:	4619      	mov	r1, r3
 80033ca:	482b      	ldr	r0, [pc, #172]	; (8003478 <MX_GPIO_Init+0x198>)
 80033cc:	f001 fed4 	bl	8005178 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80033d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d6:	2302      	movs	r3, #2
 80033d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033de:	2303      	movs	r3, #3
 80033e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80033e2:	2309      	movs	r3, #9
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e6:	f107 0314 	add.w	r3, r7, #20
 80033ea:	4619      	mov	r1, r3
 80033ec:	4823      	ldr	r0, [pc, #140]	; (800347c <MX_GPIO_Init+0x19c>)
 80033ee:	f001 fec3 	bl	8005178 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80033f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f8:	2302      	movs	r3, #2
 80033fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033fc:	2301      	movs	r3, #1
 80033fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003400:	2303      	movs	r3, #3
 8003402:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003404:	2309      	movs	r3, #9
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003408:	f107 0314 	add.w	r3, r7, #20
 800340c:	4619      	mov	r1, r3
 800340e:	481b      	ldr	r0, [pc, #108]	; (800347c <MX_GPIO_Init+0x19c>)
 8003410:	f001 feb2 	bl	8005178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9;
 8003414:	f44f 7344 	mov.w	r3, #784	; 0x310
 8003418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800341a:	2301      	movs	r3, #1
 800341c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003422:	2300      	movs	r3, #0
 8003424:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003426:	f107 0314 	add.w	r3, r7, #20
 800342a:	4619      	mov	r1, r3
 800342c:	4813      	ldr	r0, [pc, #76]	; (800347c <MX_GPIO_Init+0x19c>)
 800342e:	f001 fea3 	bl	8005178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003432:	2360      	movs	r3, #96	; 0x60
 8003434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003436:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800343a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343c:	2300      	movs	r3, #0
 800343e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003440:	f107 0314 	add.w	r3, r7, #20
 8003444:	4619      	mov	r1, r3
 8003446:	480d      	ldr	r0, [pc, #52]	; (800347c <MX_GPIO_Init+0x19c>)
 8003448:	f001 fe96 	bl	8005178 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800344c:	2200      	movs	r2, #0
 800344e:	2101      	movs	r1, #1
 8003450:	2017      	movs	r0, #23
 8003452:	f001 fdc8 	bl	8004fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003456:	2017      	movs	r0, #23
 8003458:	f001 fde1 	bl	800501e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800345c:	2200      	movs	r2, #0
 800345e:	2101      	movs	r1, #1
 8003460:	2028      	movs	r0, #40	; 0x28
 8003462:	f001 fdc0 	bl	8004fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003466:	2028      	movs	r0, #40	; 0x28
 8003468:	f001 fdd9 	bl	800501e <HAL_NVIC_EnableIRQ>

}
 800346c:	bf00      	nop
 800346e:	3728      	adds	r7, #40	; 0x28
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40023800 	.word	0x40023800
 8003478:	40020000 	.word	0x40020000
 800347c:	40020400 	.word	0x40020400
 8003480:	40020800 	.word	0x40020800

08003484 <BLDC_FK>:

/* USER CODE BEGIN 4 */
void BLDC_FK(float s1,float s2,float* xp,float* yp){
 8003484:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003488:	b086      	sub	sp, #24
 800348a:	af00      	add	r7, sp, #0
 800348c:	ed87 0a03 	vstr	s0, [r7, #12]
 8003490:	edc7 0a02 	vstr	s1, [r7, #8]
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
	float x=0.0;
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
	float y=0.0;
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	613b      	str	r3, [r7, #16]
	x=l1*cos(s1)+l2*cos(s1+s2);
 80034a4:	4b4a      	ldr	r3, [pc, #296]	; (80035d0 <BLDC_FK+0x14c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fd f86d 	bl	8000588 <__aeabi_f2d>
 80034ae:	4604      	mov	r4, r0
 80034b0:	460d      	mov	r5, r1
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f7fd f868 	bl	8000588 <__aeabi_f2d>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	ec43 2b10 	vmov	d0, r2, r3
 80034c0:	f007 fe36 	bl	800b130 <cos>
 80034c4:	ec53 2b10 	vmov	r2, r3, d0
 80034c8:	4620      	mov	r0, r4
 80034ca:	4629      	mov	r1, r5
 80034cc:	f7fd f8b4 	bl	8000638 <__aeabi_dmul>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4690      	mov	r8, r2
 80034d6:	4699      	mov	r9, r3
 80034d8:	4b3e      	ldr	r3, [pc, #248]	; (80035d4 <BLDC_FK+0x150>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd f853 	bl	8000588 <__aeabi_f2d>
 80034e2:	4604      	mov	r4, r0
 80034e4:	460d      	mov	r5, r1
 80034e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80034ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80034ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f2:	ee17 0a90 	vmov	r0, s15
 80034f6:	f7fd f847 	bl	8000588 <__aeabi_f2d>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	ec43 2b10 	vmov	d0, r2, r3
 8003502:	f007 fe15 	bl	800b130 <cos>
 8003506:	ec53 2b10 	vmov	r2, r3, d0
 800350a:	4620      	mov	r0, r4
 800350c:	4629      	mov	r1, r5
 800350e:	f7fd f893 	bl	8000638 <__aeabi_dmul>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4640      	mov	r0, r8
 8003518:	4649      	mov	r1, r9
 800351a:	f7fc fed7 	bl	80002cc <__adddf3>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4610      	mov	r0, r2
 8003524:	4619      	mov	r1, r3
 8003526:	f7fd fb5f 	bl	8000be8 <__aeabi_d2f>
 800352a:	4603      	mov	r3, r0
 800352c:	617b      	str	r3, [r7, #20]
	y=l1*sin(s1)+l2*sin(s1+s2);
 800352e:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <BLDC_FK+0x14c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd f828 	bl	8000588 <__aeabi_f2d>
 8003538:	4604      	mov	r4, r0
 800353a:	460d      	mov	r5, r1
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f7fd f823 	bl	8000588 <__aeabi_f2d>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	ec43 2b10 	vmov	d0, r2, r3
 800354a:	f007 fe8d 	bl	800b268 <sin>
 800354e:	ec53 2b10 	vmov	r2, r3, d0
 8003552:	4620      	mov	r0, r4
 8003554:	4629      	mov	r1, r5
 8003556:	f7fd f86f 	bl	8000638 <__aeabi_dmul>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4690      	mov	r8, r2
 8003560:	4699      	mov	r9, r3
 8003562:	4b1c      	ldr	r3, [pc, #112]	; (80035d4 <BLDC_FK+0x150>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fd f80e 	bl	8000588 <__aeabi_f2d>
 800356c:	4604      	mov	r4, r0
 800356e:	460d      	mov	r5, r1
 8003570:	ed97 7a03 	vldr	s14, [r7, #12]
 8003574:	edd7 7a02 	vldr	s15, [r7, #8]
 8003578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800357c:	ee17 0a90 	vmov	r0, s15
 8003580:	f7fd f802 	bl	8000588 <__aeabi_f2d>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	ec43 2b10 	vmov	d0, r2, r3
 800358c:	f007 fe6c 	bl	800b268 <sin>
 8003590:	ec53 2b10 	vmov	r2, r3, d0
 8003594:	4620      	mov	r0, r4
 8003596:	4629      	mov	r1, r5
 8003598:	f7fd f84e 	bl	8000638 <__aeabi_dmul>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4640      	mov	r0, r8
 80035a2:	4649      	mov	r1, r9
 80035a4:	f7fc fe92 	bl	80002cc <__adddf3>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4610      	mov	r0, r2
 80035ae:	4619      	mov	r1, r3
 80035b0:	f7fd fb1a 	bl	8000be8 <__aeabi_d2f>
 80035b4:	4603      	mov	r3, r0
 80035b6:	613b      	str	r3, [r7, #16]
	*xp=x;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	601a      	str	r2, [r3, #0]
	*yp=y;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	601a      	str	r2, [r3, #0]
}
 80035c4:	bf00      	nop
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035ce:	bf00      	nop
 80035d0:	20000000 	.word	0x20000000
 80035d4:	20000004 	.word	0x20000004

080035d8 <BLDC_IK>:
void BLDC_IK(float x,float y,float* s1p,float* s2p){
 80035d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035dc:	ed2d 8b02 	vpush	{d8}
 80035e0:	b086      	sub	sp, #24
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	ed87 0a03 	vstr	s0, [r7, #12]
 80035e8:	edc7 0a02 	vstr	s1, [r7, #8]
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	6039      	str	r1, [r7, #0]
	float s1=0.0;
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
	float s2=0.0;
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]
	s2=-acos((x*x+y*y-l1*l1-l2*l2)/(2*l1*l2));
 80035fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003600:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003604:	edd7 7a02 	vldr	s15, [r7, #8]
 8003608:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800360c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003610:	4b8e      	ldr	r3, [pc, #568]	; (800384c <BLDC_IK+0x274>)
 8003612:	edd3 6a00 	vldr	s13, [r3]
 8003616:	4b8d      	ldr	r3, [pc, #564]	; (800384c <BLDC_IK+0x274>)
 8003618:	edd3 7a00 	vldr	s15, [r3]
 800361c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003620:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003624:	4b8a      	ldr	r3, [pc, #552]	; (8003850 <BLDC_IK+0x278>)
 8003626:	edd3 6a00 	vldr	s13, [r3]
 800362a:	4b89      	ldr	r3, [pc, #548]	; (8003850 <BLDC_IK+0x278>)
 800362c:	edd3 7a00 	vldr	s15, [r3]
 8003630:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003634:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003638:	4b84      	ldr	r3, [pc, #528]	; (800384c <BLDC_IK+0x274>)
 800363a:	edd3 7a00 	vldr	s15, [r3]
 800363e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003642:	4b83      	ldr	r3, [pc, #524]	; (8003850 <BLDC_IK+0x278>)
 8003644:	edd3 7a00 	vldr	s15, [r3]
 8003648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800364c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003650:	ee16 0a90 	vmov	r0, s13
 8003654:	f7fc ff98 	bl	8000588 <__aeabi_f2d>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	ec43 2b10 	vmov	d0, r2, r3
 8003660:	f007 fe5a 	bl	800b318 <acos>
 8003664:	ec53 2b10 	vmov	r2, r3, d0
 8003668:	4610      	mov	r0, r2
 800366a:	4619      	mov	r1, r3
 800366c:	f7fd fabc 	bl	8000be8 <__aeabi_d2f>
 8003670:	4603      	mov	r3, r0
 8003672:	ee07 3a90 	vmov	s15, r3
 8003676:	eef1 7a67 	vneg.f32	s15, s15
 800367a:	edc7 7a04 	vstr	s15, [r7, #16]
	s1=atan2((-l2*sin(s2)*x+(l1+l2*cos(s2))*y),((l1+l2*cos(s2))*x+l2*sin(s2)*y));
 800367e:	4b74      	ldr	r3, [pc, #464]	; (8003850 <BLDC_IK+0x278>)
 8003680:	edd3 7a00 	vldr	s15, [r3]
 8003684:	eef1 7a67 	vneg.f32	s15, s15
 8003688:	ee17 3a90 	vmov	r3, s15
 800368c:	4618      	mov	r0, r3
 800368e:	f7fc ff7b 	bl	8000588 <__aeabi_f2d>
 8003692:	4604      	mov	r4, r0
 8003694:	460d      	mov	r5, r1
 8003696:	6938      	ldr	r0, [r7, #16]
 8003698:	f7fc ff76 	bl	8000588 <__aeabi_f2d>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	ec43 2b10 	vmov	d0, r2, r3
 80036a4:	f007 fde0 	bl	800b268 <sin>
 80036a8:	ec53 2b10 	vmov	r2, r3, d0
 80036ac:	4620      	mov	r0, r4
 80036ae:	4629      	mov	r1, r5
 80036b0:	f7fc ffc2 	bl	8000638 <__aeabi_dmul>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4614      	mov	r4, r2
 80036ba:	461d      	mov	r5, r3
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f7fc ff63 	bl	8000588 <__aeabi_f2d>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4620      	mov	r0, r4
 80036c8:	4629      	mov	r1, r5
 80036ca:	f7fc ffb5 	bl	8000638 <__aeabi_dmul>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4692      	mov	sl, r2
 80036d4:	469b      	mov	fp, r3
 80036d6:	4b5d      	ldr	r3, [pc, #372]	; (800384c <BLDC_IK+0x274>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fc ff54 	bl	8000588 <__aeabi_f2d>
 80036e0:	4604      	mov	r4, r0
 80036e2:	460d      	mov	r5, r1
 80036e4:	4b5a      	ldr	r3, [pc, #360]	; (8003850 <BLDC_IK+0x278>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fc ff4d 	bl	8000588 <__aeabi_f2d>
 80036ee:	4680      	mov	r8, r0
 80036f0:	4689      	mov	r9, r1
 80036f2:	6938      	ldr	r0, [r7, #16]
 80036f4:	f7fc ff48 	bl	8000588 <__aeabi_f2d>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	ec43 2b10 	vmov	d0, r2, r3
 8003700:	f007 fd16 	bl	800b130 <cos>
 8003704:	ec53 2b10 	vmov	r2, r3, d0
 8003708:	4640      	mov	r0, r8
 800370a:	4649      	mov	r1, r9
 800370c:	f7fc ff94 	bl	8000638 <__aeabi_dmul>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4620      	mov	r0, r4
 8003716:	4629      	mov	r1, r5
 8003718:	f7fc fdd8 	bl	80002cc <__adddf3>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4614      	mov	r4, r2
 8003722:	461d      	mov	r5, r3
 8003724:	68b8      	ldr	r0, [r7, #8]
 8003726:	f7fc ff2f 	bl	8000588 <__aeabi_f2d>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	4620      	mov	r0, r4
 8003730:	4629      	mov	r1, r5
 8003732:	f7fc ff81 	bl	8000638 <__aeabi_dmul>
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	4650      	mov	r0, sl
 800373c:	4659      	mov	r1, fp
 800373e:	f7fc fdc5 	bl	80002cc <__adddf3>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	ec43 2b18 	vmov	d8, r2, r3
 800374a:	4b40      	ldr	r3, [pc, #256]	; (800384c <BLDC_IK+0x274>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fc ff1a 	bl	8000588 <__aeabi_f2d>
 8003754:	4604      	mov	r4, r0
 8003756:	460d      	mov	r5, r1
 8003758:	4b3d      	ldr	r3, [pc, #244]	; (8003850 <BLDC_IK+0x278>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f7fc ff13 	bl	8000588 <__aeabi_f2d>
 8003762:	4680      	mov	r8, r0
 8003764:	4689      	mov	r9, r1
 8003766:	6938      	ldr	r0, [r7, #16]
 8003768:	f7fc ff0e 	bl	8000588 <__aeabi_f2d>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	ec43 2b10 	vmov	d0, r2, r3
 8003774:	f007 fcdc 	bl	800b130 <cos>
 8003778:	ec53 2b10 	vmov	r2, r3, d0
 800377c:	4640      	mov	r0, r8
 800377e:	4649      	mov	r1, r9
 8003780:	f7fc ff5a 	bl	8000638 <__aeabi_dmul>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4620      	mov	r0, r4
 800378a:	4629      	mov	r1, r5
 800378c:	f7fc fd9e 	bl	80002cc <__adddf3>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4614      	mov	r4, r2
 8003796:	461d      	mov	r5, r3
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f7fc fef5 	bl	8000588 <__aeabi_f2d>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4620      	mov	r0, r4
 80037a4:	4629      	mov	r1, r5
 80037a6:	f7fc ff47 	bl	8000638 <__aeabi_dmul>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4690      	mov	r8, r2
 80037b0:	4699      	mov	r9, r3
 80037b2:	4b27      	ldr	r3, [pc, #156]	; (8003850 <BLDC_IK+0x278>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fc fee6 	bl	8000588 <__aeabi_f2d>
 80037bc:	4604      	mov	r4, r0
 80037be:	460d      	mov	r5, r1
 80037c0:	6938      	ldr	r0, [r7, #16]
 80037c2:	f7fc fee1 	bl	8000588 <__aeabi_f2d>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	ec43 2b10 	vmov	d0, r2, r3
 80037ce:	f007 fd4b 	bl	800b268 <sin>
 80037d2:	ec53 2b10 	vmov	r2, r3, d0
 80037d6:	4620      	mov	r0, r4
 80037d8:	4629      	mov	r1, r5
 80037da:	f7fc ff2d 	bl	8000638 <__aeabi_dmul>
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4614      	mov	r4, r2
 80037e4:	461d      	mov	r5, r3
 80037e6:	68b8      	ldr	r0, [r7, #8]
 80037e8:	f7fc fece 	bl	8000588 <__aeabi_f2d>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4620      	mov	r0, r4
 80037f2:	4629      	mov	r1, r5
 80037f4:	f7fc ff20 	bl	8000638 <__aeabi_dmul>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4640      	mov	r0, r8
 80037fe:	4649      	mov	r1, r9
 8003800:	f7fc fd64 	bl	80002cc <__adddf3>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	ec43 2b17 	vmov	d7, r2, r3
 800380c:	eeb0 1a47 	vmov.f32	s2, s14
 8003810:	eef0 1a67 	vmov.f32	s3, s15
 8003814:	eeb0 0a48 	vmov.f32	s0, s16
 8003818:	eef0 0a68 	vmov.f32	s1, s17
 800381c:	f007 fdb0 	bl	800b380 <atan2>
 8003820:	ec53 2b10 	vmov	r2, r3, d0
 8003824:	4610      	mov	r0, r2
 8003826:	4619      	mov	r1, r3
 8003828:	f7fd f9de 	bl	8000be8 <__aeabi_d2f>
 800382c:	4603      	mov	r3, r0
 800382e:	617b      	str	r3, [r7, #20]
	*s1p=s1;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	601a      	str	r2, [r3, #0]
	*s2p=s2;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	601a      	str	r2, [r3, #0]
}
 800383c:	bf00      	nop
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	ecbd 8b02 	vpop	{d8}
 8003846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800384a:	bf00      	nop
 800384c:	20000000 	.word	0x20000000
 8003850:	20000004 	.word	0x20000004

08003854 <HAL_UART_RxCpltCallback>:
//  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
//  return len;
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*UartHandle)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	get_uart_flag=1;
 800385c:	4b04      	ldr	r3, [pc, #16]	; (8003870 <HAL_UART_RxCpltCallback+0x1c>)
 800385e:	2201      	movs	r2, #1
 8003860:	701a      	strb	r2, [r3, #0]
//	command_judgment();
//	if(RxData[1]==0x63&&selectmode_flag==1){
//		motion_stop_flag=1;
//	}

}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000415 	.word	0x20000415

08003874 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
	  nextcan_flag=1;
 800387c:	4b04      	ldr	r3, [pc, #16]	; (8003890 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800387e:	2201      	movs	r2, #1
 8003880:	701a      	strb	r2, [r3, #0]
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	20000417 	.word	0x20000417

08003894 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003894:	b5b0      	push	{r4, r5, r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
	//バッファー設けてどのcanidから送られて来たのかを判定
	get_can_flag=1;
 800389c:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800389e:	2201      	movs	r2, #1
 80038a0:	701a      	strb	r2, [r3, #0]
	nextcan_flag=1;
 80038a2:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	701a      	strb	r2, [r3, #0]
//	printf("RxCan\r\n");
	HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0, &RxHeader, Rx_can_data);
 80038a8:	4b1c      	ldr	r3, [pc, #112]	; (800391c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80038aa:	4a1d      	ldr	r2, [pc, #116]	; (8003920 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80038ac:	2100      	movs	r1, #0
 80038ae:	481d      	ldr	r0, [pc, #116]	; (8003924 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80038b0:	f000 ff60 	bl	8004774 <HAL_CAN_GetRxMessage>
	if(RxHeader.StdId==0x00){
 80038b4:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d119      	bne.n	80038f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
		if(Rx_can_data[0]==0x01){
 80038bc:	4b17      	ldr	r3, [pc, #92]	; (800391c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d108      	bne.n	80038d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
			memcpy(m1Rx_can_data,Rx_can_data,sizeof(Rx_can_data));
 80038c4:	4a18      	ldr	r2, [pc, #96]	; (8003928 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80038c6:	4b15      	ldr	r3, [pc, #84]	; (800391c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80038c8:	4614      	mov	r4, r2
 80038ca:	461d      	mov	r5, r3
 80038cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038d0:	682b      	ldr	r3, [r5, #0]
 80038d2:	6023      	str	r3, [r4, #0]
	}else{
		if(RxHeader.StdId==0x141){
				memcpy(RMDRx_can_data,Rx_can_data,sizeof(Rx_can_data));
			}
	}
}
 80038d4:	e01a      	b.n	800390c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
			}else if(Rx_can_data[0]==0x02){
 80038d6:	4b11      	ldr	r3, [pc, #68]	; (800391c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d116      	bne.n	800390c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
				memcpy(m2Rx_can_data,Rx_can_data,sizeof(Rx_can_data));
 80038de:	4a13      	ldr	r2, [pc, #76]	; (800392c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80038e0:	4b0e      	ldr	r3, [pc, #56]	; (800391c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80038e2:	4614      	mov	r4, r2
 80038e4:	461d      	mov	r5, r3
 80038e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038ea:	682b      	ldr	r3, [r5, #0]
 80038ec:	6023      	str	r3, [r4, #0]
}
 80038ee:	e00d      	b.n	800390c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
		if(RxHeader.StdId==0x141){
 80038f0:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f240 1241 	movw	r2, #321	; 0x141
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d107      	bne.n	800390c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
				memcpy(RMDRx_can_data,Rx_can_data,sizeof(Rx_can_data));
 80038fc:	4a0c      	ldr	r2, [pc, #48]	; (8003930 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80038fe:	4b07      	ldr	r3, [pc, #28]	; (800391c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8003900:	4614      	mov	r4, r2
 8003902:	461d      	mov	r5, r3
 8003904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003908:	682b      	ldr	r3, [r5, #0]
 800390a:	6023      	str	r3, [r4, #0]
}
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bdb0      	pop	{r4, r5, r7, pc}
 8003914:	20000416 	.word	0x20000416
 8003918:	20000417 	.word	0x20000417
 800391c:	20000380 	.word	0x20000380
 8003920:	2000033c 	.word	0x2000033c
 8003924:	20000204 	.word	0x20000204
 8003928:	20000394 	.word	0x20000394
 800392c:	200003a8 	.word	0x200003a8
 8003930:	200003bc 	.word	0x200003bc

08003934 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	80fb      	strh	r3, [r7, #6]
//		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
//			current_stall = 1;
////			stallguard_error();
//		}
//	}
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800394a:	b480      	push	{r7}
 800394c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800394e:	b672      	cpsid	i
}
 8003950:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003952:	e7fe      	b.n	8003952 <Error_Handler+0x8>

08003954 <fmaxf>:
#include "math_ops.h"


float fmaxf(float x, float y){
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	ed87 0a01 	vstr	s0, [r7, #4]
 800395e:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8003962:	ed97 7a01 	vldr	s14, [r7, #4]
 8003966:	edd7 7a00 	vldr	s15, [r7]
 800396a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800396e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003972:	dd01      	ble.n	8003978 <fmaxf+0x24>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	e000      	b.n	800397a <fmaxf+0x26>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	ee07 3a90 	vmov	s15, r3
    }
 800397e:	eeb0 0a67 	vmov.f32	s0, s15
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <fminf>:

float fminf(float x, float y){
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	ed87 0a01 	vstr	s0, [r7, #4]
 8003996:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 800399a:	ed97 7a01 	vldr	s14, [r7, #4]
 800399e:	edd7 7a00 	vldr	s15, [r7]
 80039a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039aa:	d501      	bpl.n	80039b0 <fminf+0x24>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	e000      	b.n	80039b2 <fminf+0x26>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	ee07 3a90 	vmov	s15, r3
    }
 80039b6:	eeb0 0a67 	vmov.f32	s0, s15
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <float_to_uint>:
        *y = *y * limit/norm;
        }
    }


int float_to_uint(float x, float x_min, float x_max, int bits){
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	ed87 0a03 	vstr	s0, [r7, #12]
 80039ce:	edc7 0a02 	vstr	s1, [r7, #8]
 80039d2:	ed87 1a01 	vstr	s2, [r7, #4]
 80039d6:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 80039d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80039dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80039e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039e4:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 80039ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80039f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80039f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039f8:	2201      	movs	r2, #1
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a0a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003a0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a1a:	ee17 3a90 	vmov	r3, s15
    }
 8003a1e:	4618      	mov	r0, r3
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <uint_to_float>:


float uint_to_float(int x_int, float x_min, float x_max, int bits){
 8003a2a:	b480      	push	{r7}
 8003a2c:	b087      	sub	sp, #28
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a36:	edc7 0a01 	vstr	s1, [r7, #4]
 8003a3a:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8003a3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a40:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a48:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a5e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003a62:	2201      	movs	r2, #1
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	ee07 3a90 	vmov	s15, r3
 8003a70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a78:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8003a80:	eeb0 0a67 	vmov.f32	s0, s15
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
	...

08003a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	607b      	str	r3, [r7, #4]
 8003a9a:	4b10      	ldr	r3, [pc, #64]	; (8003adc <HAL_MspInit+0x4c>)
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	4a0f      	ldr	r2, [pc, #60]	; (8003adc <HAL_MspInit+0x4c>)
 8003aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8003aa6:	4b0d      	ldr	r3, [pc, #52]	; (8003adc <HAL_MspInit+0x4c>)
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aae:	607b      	str	r3, [r7, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	603b      	str	r3, [r7, #0]
 8003ab6:	4b09      	ldr	r3, [pc, #36]	; (8003adc <HAL_MspInit+0x4c>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	4a08      	ldr	r2, [pc, #32]	; (8003adc <HAL_MspInit+0x4c>)
 8003abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac2:	4b06      	ldr	r3, [pc, #24]	; (8003adc <HAL_MspInit+0x4c>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40023800 	.word	0x40023800

08003ae0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08a      	sub	sp, #40	; 0x28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae8:	f107 0314 	add.w	r3, r7, #20
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	609a      	str	r2, [r3, #8]
 8003af4:	60da      	str	r2, [r3, #12]
 8003af6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a2a      	ldr	r2, [pc, #168]	; (8003ba8 <HAL_CAN_MspInit+0xc8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d14d      	bne.n	8003b9e <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003b02:	2300      	movs	r3, #0
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	4b29      	ldr	r3, [pc, #164]	; (8003bac <HAL_CAN_MspInit+0xcc>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	4a28      	ldr	r2, [pc, #160]	; (8003bac <HAL_CAN_MspInit+0xcc>)
 8003b0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b10:	6413      	str	r3, [r2, #64]	; 0x40
 8003b12:	4b26      	ldr	r3, [pc, #152]	; (8003bac <HAL_CAN_MspInit+0xcc>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	4b22      	ldr	r3, [pc, #136]	; (8003bac <HAL_CAN_MspInit+0xcc>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	4a21      	ldr	r2, [pc, #132]	; (8003bac <HAL_CAN_MspInit+0xcc>)
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2e:	4b1f      	ldr	r3, [pc, #124]	; (8003bac <HAL_CAN_MspInit+0xcc>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003b3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b40:	2302      	movs	r3, #2
 8003b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003b4c:	2309      	movs	r3, #9
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b50:	f107 0314 	add.w	r3, r7, #20
 8003b54:	4619      	mov	r1, r3
 8003b56:	4816      	ldr	r0, [pc, #88]	; (8003bb0 <HAL_CAN_MspInit+0xd0>)
 8003b58:	f001 fb0e 	bl	8005178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b62:	2302      	movs	r3, #2
 8003b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b66:	2301      	movs	r3, #1
 8003b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003b6e:	2309      	movs	r3, #9
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b72:	f107 0314 	add.w	r3, r7, #20
 8003b76:	4619      	mov	r1, r3
 8003b78:	480d      	ldr	r0, [pc, #52]	; (8003bb0 <HAL_CAN_MspInit+0xd0>)
 8003b7a:	f001 fafd 	bl	8005178 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2100      	movs	r1, #0
 8003b82:	2013      	movs	r0, #19
 8003b84:	f001 fa2f 	bl	8004fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003b88:	2013      	movs	r0, #19
 8003b8a:	f001 fa48 	bl	800501e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2100      	movs	r1, #0
 8003b92:	2014      	movs	r0, #20
 8003b94:	f001 fa27 	bl	8004fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003b98:	2014      	movs	r0, #20
 8003b9a:	f001 fa40 	bl	800501e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003b9e:	bf00      	nop
 8003ba0:	3728      	adds	r7, #40	; 0x28
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40006400 	.word	0x40006400
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40020000 	.word	0x40020000

08003bb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a0e      	ldr	r2, [pc, #56]	; (8003bfc <HAL_TIM_Base_MspInit+0x48>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d115      	bne.n	8003bf2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <HAL_TIM_Base_MspInit+0x4c>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	4a0c      	ldr	r2, [pc, #48]	; (8003c00 <HAL_TIM_Base_MspInit+0x4c>)
 8003bd0:	f043 0302 	orr.w	r3, r3, #2
 8003bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <HAL_TIM_Base_MspInit+0x4c>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8003be2:	2200      	movs	r2, #0
 8003be4:	2102      	movs	r1, #2
 8003be6:	201d      	movs	r0, #29
 8003be8:	f001 f9fd 	bl	8004fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003bec:	201d      	movs	r0, #29
 8003bee:	f001 fa16 	bl	800501e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40000400 	.word	0x40000400
 8003c00:	40023800 	.word	0x40023800

08003c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08c      	sub	sp, #48	; 0x30
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c0c:	f107 031c 	add.w	r3, r7, #28
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	60da      	str	r2, [r3, #12]
 8003c1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a36      	ldr	r2, [pc, #216]	; (8003cfc <HAL_UART_MspInit+0xf8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d12d      	bne.n	8003c82 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	4b35      	ldr	r3, [pc, #212]	; (8003d00 <HAL_UART_MspInit+0xfc>)
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	4a34      	ldr	r2, [pc, #208]	; (8003d00 <HAL_UART_MspInit+0xfc>)
 8003c30:	f043 0310 	orr.w	r3, r3, #16
 8003c34:	6453      	str	r3, [r2, #68]	; 0x44
 8003c36:	4b32      	ldr	r3, [pc, #200]	; (8003d00 <HAL_UART_MspInit+0xfc>)
 8003c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3a:	f003 0310 	and.w	r3, r3, #16
 8003c3e:	61bb      	str	r3, [r7, #24]
 8003c40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	4b2e      	ldr	r3, [pc, #184]	; (8003d00 <HAL_UART_MspInit+0xfc>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	4a2d      	ldr	r2, [pc, #180]	; (8003d00 <HAL_UART_MspInit+0xfc>)
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	6313      	str	r3, [r2, #48]	; 0x30
 8003c52:	4b2b      	ldr	r3, [pc, #172]	; (8003d00 <HAL_UART_MspInit+0xfc>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c64:	2312      	movs	r3, #18
 8003c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c70:	2307      	movs	r3, #7
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c74:	f107 031c 	add.w	r3, r7, #28
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4822      	ldr	r0, [pc, #136]	; (8003d04 <HAL_UART_MspInit+0x100>)
 8003c7c:	f001 fa7c 	bl	8005178 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c80:	e038      	b.n	8003cf4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a20      	ldr	r2, [pc, #128]	; (8003d08 <HAL_UART_MspInit+0x104>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d133      	bne.n	8003cf4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	4b1b      	ldr	r3, [pc, #108]	; (8003d00 <HAL_UART_MspInit+0xfc>)
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	4a1a      	ldr	r2, [pc, #104]	; (8003d00 <HAL_UART_MspInit+0xfc>)
 8003c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c9c:	4b18      	ldr	r3, [pc, #96]	; (8003d00 <HAL_UART_MspInit+0xfc>)
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <HAL_UART_MspInit+0xfc>)
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	4a13      	ldr	r2, [pc, #76]	; (8003d00 <HAL_UART_MspInit+0xfc>)
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb8:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <HAL_UART_MspInit+0xfc>)
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003cc4:	230c      	movs	r3, #12
 8003cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003cd4:	2307      	movs	r3, #7
 8003cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cd8:	f107 031c 	add.w	r3, r7, #28
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4809      	ldr	r0, [pc, #36]	; (8003d04 <HAL_UART_MspInit+0x100>)
 8003ce0:	f001 fa4a 	bl	8005178 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	2026      	movs	r0, #38	; 0x26
 8003cea:	f001 f97c 	bl	8004fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003cee:	2026      	movs	r0, #38	; 0x26
 8003cf0:	f001 f995 	bl	800501e <HAL_NVIC_EnableIRQ>
}
 8003cf4:	bf00      	nop
 8003cf6:	3730      	adds	r7, #48	; 0x30
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40011000 	.word	0x40011000
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40020000 	.word	0x40020000
 8003d08:	40004400 	.word	0x40004400

08003d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d10:	e7fe      	b.n	8003d10 <NMI_Handler+0x4>

08003d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d12:	b480      	push	{r7}
 8003d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d16:	e7fe      	b.n	8003d16 <HardFault_Handler+0x4>

08003d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d1c:	e7fe      	b.n	8003d1c <MemManage_Handler+0x4>

08003d1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d22:	e7fe      	b.n	8003d22 <BusFault_Handler+0x4>

08003d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d28:	e7fe      	b.n	8003d28 <UsageFault_Handler+0x4>

08003d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d3c:	bf00      	nop
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d46:	b480      	push	{r7}
 8003d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d4a:	bf00      	nop
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d58:	f000 f998 	bl	800408c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d5c:	bf00      	nop
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003d64:	4802      	ldr	r0, [pc, #8]	; (8003d70 <CAN1_TX_IRQHandler+0x10>)
 8003d66:	f000 fe3d 	bl	80049e4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003d6a:	bf00      	nop
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000204 	.word	0x20000204

08003d74 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003d78:	4802      	ldr	r0, [pc, #8]	; (8003d84 <CAN1_RX0_IRQHandler+0x10>)
 8003d7a:	f000 fe33 	bl	80049e4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20000204 	.word	0x20000204

08003d88 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003d8c:	2020      	movs	r0, #32
 8003d8e:	f001 fbb9 	bl	8005504 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003d92:	2040      	movs	r0, #64	; 0x40
 8003d94:	f001 fbb6 	bl	8005504 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003d98:	2080      	movs	r0, #128	; 0x80
 8003d9a:	f001 fbb3 	bl	8005504 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003d9e:	bf00      	nop
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003da8:	4802      	ldr	r0, [pc, #8]	; (8003db4 <TIM3_IRQHandler+0x10>)
 8003daa:	f002 fb69 	bl	8006480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	2000022c 	.word	0x2000022c

08003db8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003dbc:	4802      	ldr	r0, [pc, #8]	; (8003dc8 <USART2_IRQHandler+0x10>)
 8003dbe:	f003 fab7 	bl	8007330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003dc2:	bf00      	nop
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	200002b8 	.word	0x200002b8

08003dcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003dd0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003dd4:	f001 fb96 	bl	8005504 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003dd8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003ddc:	f001 fb92 	bl	8005504 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003de0:	bf00      	nop
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
	return 1;
 8003de8:	2301      	movs	r3, #1
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <_kill>:

int _kill(int pid, int sig)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003dfe:	f004 fb7f 	bl	8008500 <__errno>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2216      	movs	r2, #22
 8003e06:	601a      	str	r2, [r3, #0]
	return -1;
 8003e08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <_exit>:

void _exit (int status)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff ffe7 	bl	8003df4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e26:	e7fe      	b.n	8003e26 <_exit+0x12>

08003e28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	e00a      	b.n	8003e50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e3a:	f3af 8000 	nop.w
 8003e3e:	4601      	mov	r1, r0
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	60ba      	str	r2, [r7, #8]
 8003e46:	b2ca      	uxtb	r2, r1
 8003e48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	dbf0      	blt.n	8003e3a <_read+0x12>
	}

return len;
 8003e58:	687b      	ldr	r3, [r7, #4]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b086      	sub	sp, #24
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	e009      	b.n	8003e88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	60ba      	str	r2, [r7, #8]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	3301      	adds	r3, #1
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	dbf1      	blt.n	8003e74 <_write+0x12>
	}
	return len;
 8003e90:	687b      	ldr	r3, [r7, #4]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <_close>:

int _close(int file)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
	return -1;
 8003ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ec2:	605a      	str	r2, [r3, #4]
	return 0;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <_isatty>:

int _isatty(int file)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
	return 1;
 8003eda:	2301      	movs	r3, #1
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
	return 0;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f0c:	4a14      	ldr	r2, [pc, #80]	; (8003f60 <_sbrk+0x5c>)
 8003f0e:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <_sbrk+0x60>)
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f18:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <_sbrk+0x64>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d102      	bne.n	8003f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f20:	4b11      	ldr	r3, [pc, #68]	; (8003f68 <_sbrk+0x64>)
 8003f22:	4a12      	ldr	r2, [pc, #72]	; (8003f6c <_sbrk+0x68>)
 8003f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <_sbrk+0x64>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d207      	bcs.n	8003f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f34:	f004 fae4 	bl	8008500 <__errno>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	220c      	movs	r2, #12
 8003f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f42:	e009      	b.n	8003f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f44:	4b08      	ldr	r3, [pc, #32]	; (8003f68 <_sbrk+0x64>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f4a:	4b07      	ldr	r3, [pc, #28]	; (8003f68 <_sbrk+0x64>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4413      	add	r3, r2
 8003f52:	4a05      	ldr	r2, [pc, #20]	; (8003f68 <_sbrk+0x64>)
 8003f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f56:	68fb      	ldr	r3, [r7, #12]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20020000 	.word	0x20020000
 8003f64:	00000400 	.word	0x00000400
 8003f68:	20000924 	.word	0x20000924
 8003f6c:	20000b40 	.word	0x20000b40

08003f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f74:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <SystemInit+0x20>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7a:	4a05      	ldr	r2, [pc, #20]	; (8003f90 <SystemInit+0x20>)
 8003f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f84:	bf00      	nop
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f98:	480d      	ldr	r0, [pc, #52]	; (8003fd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f9a:	490e      	ldr	r1, [pc, #56]	; (8003fd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f9c:	4a0e      	ldr	r2, [pc, #56]	; (8003fd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fa0:	e002      	b.n	8003fa8 <LoopCopyDataInit>

08003fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fa6:	3304      	adds	r3, #4

08003fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fac:	d3f9      	bcc.n	8003fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fae:	4a0b      	ldr	r2, [pc, #44]	; (8003fdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003fb0:	4c0b      	ldr	r4, [pc, #44]	; (8003fe0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fb4:	e001      	b.n	8003fba <LoopFillZerobss>

08003fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fb8:	3204      	adds	r2, #4

08003fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fbc:	d3fb      	bcc.n	8003fb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003fbe:	f7ff ffd7 	bl	8003f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fc2:	f004 faa3 	bl	800850c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fc6:	f7fe f9c7 	bl	8002358 <main>
  bx  lr    
 8003fca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003fcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fd4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003fd8:	0800d770 	.word	0x0800d770
  ldr r2, =_sbss
 8003fdc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003fe0:	20000b40 	.word	0x20000b40

08003fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fe4:	e7fe      	b.n	8003fe4 <ADC_IRQHandler>
	...

08003fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003fec:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <HAL_Init+0x40>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a0d      	ldr	r2, [pc, #52]	; (8004028 <HAL_Init+0x40>)
 8003ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_Init+0x40>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a0a      	ldr	r2, [pc, #40]	; (8004028 <HAL_Init+0x40>)
 8003ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004004:	4b08      	ldr	r3, [pc, #32]	; (8004028 <HAL_Init+0x40>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a07      	ldr	r2, [pc, #28]	; (8004028 <HAL_Init+0x40>)
 800400a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004010:	2003      	movs	r0, #3
 8004012:	f000 ffdd 	bl	8004fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004016:	2000      	movs	r0, #0
 8004018:	f000 f808 	bl	800402c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800401c:	f7ff fd38 	bl	8003a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40023c00 	.word	0x40023c00

0800402c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004034:	4b12      	ldr	r3, [pc, #72]	; (8004080 <HAL_InitTick+0x54>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4b12      	ldr	r3, [pc, #72]	; (8004084 <HAL_InitTick+0x58>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	4619      	mov	r1, r3
 800403e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004042:	fbb3 f3f1 	udiv	r3, r3, r1
 8004046:	fbb2 f3f3 	udiv	r3, r2, r3
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fff5 	bl	800503a <HAL_SYSTICK_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e00e      	b.n	8004078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b0f      	cmp	r3, #15
 800405e:	d80a      	bhi.n	8004076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004060:	2200      	movs	r2, #0
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004068:	f000 ffbd 	bl	8004fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800406c:	4a06      	ldr	r2, [pc, #24]	; (8004088 <HAL_InitTick+0x5c>)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	e000      	b.n	8004078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
}
 8004078:	4618      	mov	r0, r3
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	2000000c 	.word	0x2000000c
 8004084:	20000014 	.word	0x20000014
 8004088:	20000010 	.word	0x20000010

0800408c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004090:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_IncTick+0x20>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_IncTick+0x24>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4413      	add	r3, r2
 800409c:	4a04      	ldr	r2, [pc, #16]	; (80040b0 <HAL_IncTick+0x24>)
 800409e:	6013      	str	r3, [r2, #0]
}
 80040a0:	bf00      	nop
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	20000014 	.word	0x20000014
 80040b0:	20000928 	.word	0x20000928

080040b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  return uwTick;
 80040b8:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <HAL_GetTick+0x14>)
 80040ba:	681b      	ldr	r3, [r3, #0]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	20000928 	.word	0x20000928

080040cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040d4:	f7ff ffee 	bl	80040b4 <HAL_GetTick>
 80040d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040e4:	d005      	beq.n	80040f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040e6:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <HAL_Delay+0x44>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4413      	add	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80040f2:	bf00      	nop
 80040f4:	f7ff ffde 	bl	80040b4 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	429a      	cmp	r2, r3
 8004102:	d8f7      	bhi.n	80040f4 <HAL_Delay+0x28>
  {
  }
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000014 	.word	0x20000014

08004114 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e0ed      	b.n	8004302 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3020 	ldrb.w	r3, [r3, #32]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d102      	bne.n	8004138 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff fcd4 	bl	8003ae0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004148:	f7ff ffb4 	bl	80040b4 <HAL_GetTick>
 800414c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800414e:	e012      	b.n	8004176 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004150:	f7ff ffb0 	bl	80040b4 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b0a      	cmp	r3, #10
 800415c:	d90b      	bls.n	8004176 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2205      	movs	r2, #5
 800416e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e0c5      	b.n	8004302 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0e5      	beq.n	8004150 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0202 	bic.w	r2, r2, #2
 8004192:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004194:	f7ff ff8e 	bl	80040b4 <HAL_GetTick>
 8004198:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800419a:	e012      	b.n	80041c2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800419c:	f7ff ff8a 	bl	80040b4 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b0a      	cmp	r3, #10
 80041a8:	d90b      	bls.n	80041c2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2205      	movs	r2, #5
 80041ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e09f      	b.n	8004302 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e5      	bne.n	800419c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	7e1b      	ldrb	r3, [r3, #24]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d108      	bne.n	80041ea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	e007      	b.n	80041fa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	7e5b      	ldrb	r3, [r3, #25]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d108      	bne.n	8004214 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	e007      	b.n	8004224 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004222:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	7e9b      	ldrb	r3, [r3, #26]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d108      	bne.n	800423e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0220 	orr.w	r2, r2, #32
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	e007      	b.n	800424e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0220 	bic.w	r2, r2, #32
 800424c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	7edb      	ldrb	r3, [r3, #27]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d108      	bne.n	8004268 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0210 	bic.w	r2, r2, #16
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	e007      	b.n	8004278 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0210 	orr.w	r2, r2, #16
 8004276:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	7f1b      	ldrb	r3, [r3, #28]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d108      	bne.n	8004292 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0208 	orr.w	r2, r2, #8
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	e007      	b.n	80042a2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0208 	bic.w	r2, r2, #8
 80042a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	7f5b      	ldrb	r3, [r3, #29]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d108      	bne.n	80042bc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0204 	orr.w	r2, r2, #4
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	e007      	b.n	80042cc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0204 	bic.w	r2, r2, #4
 80042ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	431a      	orrs	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	ea42 0103 	orr.w	r1, r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	1e5a      	subs	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004322:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004324:	7cfb      	ldrb	r3, [r7, #19]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d003      	beq.n	8004332 <HAL_CAN_ConfigFilter+0x26>
 800432a:	7cfb      	ldrb	r3, [r7, #19]
 800432c:	2b02      	cmp	r3, #2
 800432e:	f040 80be 	bne.w	80044ae <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004332:	4b65      	ldr	r3, [pc, #404]	; (80044c8 <HAL_CAN_ConfigFilter+0x1bc>)
 8004334:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800433c:	f043 0201 	orr.w	r2, r3, #1
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800434c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	021b      	lsls	r3, r3, #8
 8004362:	431a      	orrs	r2, r3
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	2201      	movs	r2, #1
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	43db      	mvns	r3, r3
 8004384:	401a      	ands	r2, r3
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d123      	bne.n	80043dc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	43db      	mvns	r3, r3
 800439e:	401a      	ands	r2, r3
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80043b6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	3248      	adds	r2, #72	; 0x48
 80043bc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80043d0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80043d2:	6979      	ldr	r1, [r7, #20]
 80043d4:	3348      	adds	r3, #72	; 0x48
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	440b      	add	r3, r1
 80043da:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d122      	bne.n	800442a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	431a      	orrs	r2, r3
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004404:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	3248      	adds	r2, #72	; 0x48
 800440a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800441e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004420:	6979      	ldr	r1, [r7, #20]
 8004422:	3348      	adds	r3, #72	; 0x48
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	440b      	add	r3, r1
 8004428:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d109      	bne.n	8004446 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	43db      	mvns	r3, r3
 800443c:	401a      	ands	r2, r3
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004444:	e007      	b.n	8004456 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	431a      	orrs	r2, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	43db      	mvns	r3, r3
 8004468:	401a      	ands	r2, r3
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004470:	e007      	b.n	8004482 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	431a      	orrs	r2, r3
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d107      	bne.n	800449a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	431a      	orrs	r2, r3
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044a0:	f023 0201 	bic.w	r2, r3, #1
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e006      	b.n	80044bc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
  }
}
 80044bc:	4618      	mov	r0, r3
 80044be:	371c      	adds	r7, #28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	40006400 	.word	0x40006400

080044cc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d12e      	bne.n	800453e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0201 	bic.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044f8:	f7ff fddc 	bl	80040b4 <HAL_GetTick>
 80044fc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80044fe:	e012      	b.n	8004526 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004500:	f7ff fdd8 	bl	80040b4 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b0a      	cmp	r3, #10
 800450c:	d90b      	bls.n	8004526 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2205      	movs	r2, #5
 800451e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e012      	b.n	800454c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e5      	bne.n	8004500 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	e006      	b.n	800454c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
  }
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004554:	b480      	push	{r7}
 8004556:	b089      	sub	sp, #36	; 0x24
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004568:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004572:	7ffb      	ldrb	r3, [r7, #31]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d003      	beq.n	8004580 <HAL_CAN_AddTxMessage+0x2c>
 8004578:	7ffb      	ldrb	r3, [r7, #31]
 800457a:	2b02      	cmp	r3, #2
 800457c:	f040 80b8 	bne.w	80046f0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10a      	bne.n	80045a0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004590:	2b00      	cmp	r3, #0
 8004592:	d105      	bne.n	80045a0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 80a0 	beq.w	80046e0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	0e1b      	lsrs	r3, r3, #24
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d907      	bls.n	80045c0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e09e      	b.n	80046fe <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80045c0:	2201      	movs	r2, #1
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	409a      	lsls	r2, r3
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10d      	bne.n	80045ee <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80045dc:	68f9      	ldr	r1, [r7, #12]
 80045de:	6809      	ldr	r1, [r1, #0]
 80045e0:	431a      	orrs	r2, r3
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	3318      	adds	r3, #24
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	440b      	add	r3, r1
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	e00f      	b.n	800460e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80045f8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80045fe:	68f9      	ldr	r1, [r7, #12]
 8004600:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004602:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	3318      	adds	r3, #24
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	440b      	add	r3, r1
 800460c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6819      	ldr	r1, [r3, #0]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	691a      	ldr	r2, [r3, #16]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	3318      	adds	r3, #24
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	440b      	add	r3, r1
 800461e:	3304      	adds	r3, #4
 8004620:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	7d1b      	ldrb	r3, [r3, #20]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d111      	bne.n	800464e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	3318      	adds	r3, #24
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	4413      	add	r3, r2
 8004636:	3304      	adds	r3, #4
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	6811      	ldr	r1, [r2, #0]
 800463e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	3318      	adds	r3, #24
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	440b      	add	r3, r1
 800464a:	3304      	adds	r3, #4
 800464c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3307      	adds	r3, #7
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	061a      	lsls	r2, r3, #24
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3306      	adds	r3, #6
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	041b      	lsls	r3, r3, #16
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3305      	adds	r3, #5
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	4313      	orrs	r3, r2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	3204      	adds	r2, #4
 800466e:	7812      	ldrb	r2, [r2, #0]
 8004670:	4610      	mov	r0, r2
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	6811      	ldr	r1, [r2, #0]
 8004676:	ea43 0200 	orr.w	r2, r3, r0
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	440b      	add	r3, r1
 8004680:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004684:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3303      	adds	r3, #3
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	061a      	lsls	r2, r3, #24
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3302      	adds	r3, #2
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	041b      	lsls	r3, r3, #16
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3301      	adds	r3, #1
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	4313      	orrs	r3, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	7812      	ldrb	r2, [r2, #0]
 80046a6:	4610      	mov	r0, r2
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	6811      	ldr	r1, [r2, #0]
 80046ac:	ea43 0200 	orr.w	r2, r3, r0
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	440b      	add	r3, r1
 80046b6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80046ba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	3318      	adds	r3, #24
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	4413      	add	r3, r2
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	6811      	ldr	r1, [r2, #0]
 80046ce:	f043 0201 	orr.w	r2, r3, #1
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	3318      	adds	r3, #24
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	440b      	add	r3, r1
 80046da:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80046dc:	2300      	movs	r3, #0
 80046de:	e00e      	b.n	80046fe <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e006      	b.n	80046fe <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
  }
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3724      	adds	r7, #36	; 0x24
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800470a:	b480      	push	{r7}
 800470c:	b085      	sub	sp, #20
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800471c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800471e:	7afb      	ldrb	r3, [r7, #11]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d002      	beq.n	800472a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004724:	7afb      	ldrb	r3, [r7, #11]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d11d      	bne.n	8004766 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3301      	adds	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3301      	adds	r3, #1
 8004750:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	3301      	adds	r3, #1
 8004764:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004766:	68fb      	ldr	r3, [r7, #12]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004788:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800478a:	7dfb      	ldrb	r3, [r7, #23]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d003      	beq.n	8004798 <HAL_CAN_GetRxMessage+0x24>
 8004790:	7dfb      	ldrb	r3, [r7, #23]
 8004792:	2b02      	cmp	r3, #2
 8004794:	f040 80f3 	bne.w	800497e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10e      	bne.n	80047bc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f003 0303 	and.w	r3, r3, #3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d116      	bne.n	80047da <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e0e7      	b.n	800498c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d107      	bne.n	80047da <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e0d8      	b.n	800498c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	331b      	adds	r3, #27
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	4413      	add	r3, r2
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0204 	and.w	r2, r3, #4
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10c      	bne.n	8004812 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	331b      	adds	r3, #27
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	4413      	add	r3, r2
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	0d5b      	lsrs	r3, r3, #21
 8004808:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	e00b      	b.n	800482a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	331b      	adds	r3, #27
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	4413      	add	r3, r2
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	08db      	lsrs	r3, r3, #3
 8004822:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	331b      	adds	r3, #27
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	4413      	add	r3, r2
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0202 	and.w	r2, r3, #2
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	331b      	adds	r3, #27
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	4413      	add	r3, r2
 800484c:	3304      	adds	r3, #4
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 020f 	and.w	r2, r3, #15
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	331b      	adds	r3, #27
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	4413      	add	r3, r2
 8004864:	3304      	adds	r3, #4
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	0a1b      	lsrs	r3, r3, #8
 800486a:	b2da      	uxtb	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	331b      	adds	r3, #27
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	4413      	add	r3, r2
 800487c:	3304      	adds	r3, #4
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	0c1b      	lsrs	r3, r3, #16
 8004882:	b29a      	uxth	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	4413      	add	r3, r2
 8004892:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	b2da      	uxtb	r2, r3
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	0a1a      	lsrs	r2, r3, #8
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	3301      	adds	r3, #1
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	0c1a      	lsrs	r2, r3, #16
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	3302      	adds	r3, #2
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	4413      	add	r3, r2
 80048dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	0e1a      	lsrs	r2, r3, #24
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	3303      	adds	r3, #3
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	3304      	adds	r3, #4
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	4413      	add	r3, r2
 800490e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	0a1a      	lsrs	r2, r3, #8
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	3305      	adds	r3, #5
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	4413      	add	r3, r2
 8004928:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	0c1a      	lsrs	r2, r3, #16
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	3306      	adds	r3, #6
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	4413      	add	r3, r2
 8004942:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	0e1a      	lsrs	r2, r3, #24
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	3307      	adds	r3, #7
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d108      	bne.n	800496a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0220 	orr.w	r2, r2, #32
 8004966:	60da      	str	r2, [r3, #12]
 8004968:	e007      	b.n	800497a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0220 	orr.w	r2, r2, #32
 8004978:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	e006      	b.n	800498c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
  }
}
 800498c:	4618      	mov	r0, r3
 800498e:	371c      	adds	r7, #28
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049a8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d002      	beq.n	80049b6 <HAL_CAN_ActivateNotification+0x1e>
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d109      	bne.n	80049ca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6959      	ldr	r1, [r3, #20]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	e006      	b.n	80049d8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
  }
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08a      	sub	sp, #40	; 0x28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80049ec:	2300      	movs	r3, #0
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d07c      	beq.n	8004b24 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d023      	beq.n	8004a7c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fe ff14 	bl	8003874 <HAL_CAN_TxMailbox0CompleteCallback>
 8004a4c:	e016      	b.n	8004a7c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d004      	beq.n	8004a62 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a60:	e00c      	b.n	8004a7c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d004      	beq.n	8004a76 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
 8004a74:	e002      	b.n	8004a7c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f97f 	bl	8004d7a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d024      	beq.n	8004ad0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f959 	bl	8004d52 <HAL_CAN_TxMailbox1CompleteCallback>
 8004aa0:	e016      	b.n	8004ad0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d004      	beq.n	8004ab6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab4:	e00c      	b.n	8004ad0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d004      	beq.n	8004aca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac8:	e002      	b.n	8004ad0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f95f 	bl	8004d8e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d024      	beq.n	8004b24 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ae2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f939 	bl	8004d66 <HAL_CAN_TxMailbox2CompleteCallback>
 8004af4:	e016      	b.n	8004b24 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d004      	beq.n	8004b0a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
 8004b08:	e00c      	b.n	8004b24 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d004      	beq.n	8004b1e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b1c:	e002      	b.n	8004b24 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f93f 	bl	8004da2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00c      	beq.n	8004b48 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f003 0310 	and.w	r3, r3, #16
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d007      	beq.n	8004b48 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2210      	movs	r2, #16
 8004b46:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00b      	beq.n	8004b6a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f003 0308 	and.w	r3, r3, #8
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d006      	beq.n	8004b6a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2208      	movs	r2, #8
 8004b62:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f926 	bl	8004db6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d009      	beq.n	8004b88 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fe fe86 	bl	8003894 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00c      	beq.n	8004bac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f003 0310 	and.w	r3, r3, #16
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d007      	beq.n	8004bac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2210      	movs	r2, #16
 8004baa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00b      	beq.n	8004bce <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d006      	beq.n	8004bce <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2208      	movs	r2, #8
 8004bc6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f908 	bl	8004dde <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	f003 0310 	and.w	r3, r3, #16
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d009      	beq.n	8004bec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f8ef 	bl	8004dca <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00b      	beq.n	8004c0e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d006      	beq.n	8004c0e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2210      	movs	r2, #16
 8004c06:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f8f2 	bl	8004df2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00b      	beq.n	8004c30 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d006      	beq.n	8004c30 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2208      	movs	r2, #8
 8004c28:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f8eb 	bl	8004e06 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d07b      	beq.n	8004d32 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d072      	beq.n	8004d2a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d008      	beq.n	8004c60 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	f043 0301 	orr.w	r3, r3, #1
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d008      	beq.n	8004c7c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	f043 0302 	orr.w	r3, r3, #2
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d008      	beq.n	8004c98 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	f043 0304 	orr.w	r3, r3, #4
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d043      	beq.n	8004d2a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d03e      	beq.n	8004d2a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cb2:	2b60      	cmp	r3, #96	; 0x60
 8004cb4:	d02b      	beq.n	8004d0e <HAL_CAN_IRQHandler+0x32a>
 8004cb6:	2b60      	cmp	r3, #96	; 0x60
 8004cb8:	d82e      	bhi.n	8004d18 <HAL_CAN_IRQHandler+0x334>
 8004cba:	2b50      	cmp	r3, #80	; 0x50
 8004cbc:	d022      	beq.n	8004d04 <HAL_CAN_IRQHandler+0x320>
 8004cbe:	2b50      	cmp	r3, #80	; 0x50
 8004cc0:	d82a      	bhi.n	8004d18 <HAL_CAN_IRQHandler+0x334>
 8004cc2:	2b40      	cmp	r3, #64	; 0x40
 8004cc4:	d019      	beq.n	8004cfa <HAL_CAN_IRQHandler+0x316>
 8004cc6:	2b40      	cmp	r3, #64	; 0x40
 8004cc8:	d826      	bhi.n	8004d18 <HAL_CAN_IRQHandler+0x334>
 8004cca:	2b30      	cmp	r3, #48	; 0x30
 8004ccc:	d010      	beq.n	8004cf0 <HAL_CAN_IRQHandler+0x30c>
 8004cce:	2b30      	cmp	r3, #48	; 0x30
 8004cd0:	d822      	bhi.n	8004d18 <HAL_CAN_IRQHandler+0x334>
 8004cd2:	2b10      	cmp	r3, #16
 8004cd4:	d002      	beq.n	8004cdc <HAL_CAN_IRQHandler+0x2f8>
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d005      	beq.n	8004ce6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004cda:	e01d      	b.n	8004d18 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	f043 0308 	orr.w	r3, r3, #8
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ce4:	e019      	b.n	8004d1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	f043 0310 	orr.w	r3, r3, #16
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cee:	e014      	b.n	8004d1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	f043 0320 	orr.w	r3, r3, #32
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cf8:	e00f      	b.n	8004d1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004d02:	e00a      	b.n	8004d1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004d0c:	e005      	b.n	8004d1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004d16:	e000      	b.n	8004d1a <HAL_CAN_IRQHandler+0x336>
            break;
 8004d18:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	699a      	ldr	r2, [r3, #24]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d28:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2204      	movs	r2, #4
 8004d30:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d008      	beq.n	8004d4a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f868 	bl	8004e1a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004d4a:	bf00      	nop
 8004d4c:	3728      	adds	r7, #40	; 0x28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e40:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <__NVIC_SetPriorityGrouping+0x44>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e62:	4a04      	ldr	r2, [pc, #16]	; (8004e74 <__NVIC_SetPriorityGrouping+0x44>)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	60d3      	str	r3, [r2, #12]
}
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	e000ed00 	.word	0xe000ed00

08004e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e7c:	4b04      	ldr	r3, [pc, #16]	; (8004e90 <__NVIC_GetPriorityGrouping+0x18>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	0a1b      	lsrs	r3, r3, #8
 8004e82:	f003 0307 	and.w	r3, r3, #7
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	e000ed00 	.word	0xe000ed00

08004e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	db0b      	blt.n	8004ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ea6:	79fb      	ldrb	r3, [r7, #7]
 8004ea8:	f003 021f 	and.w	r2, r3, #31
 8004eac:	4907      	ldr	r1, [pc, #28]	; (8004ecc <__NVIC_EnableIRQ+0x38>)
 8004eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8004eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	e000e100 	.word	0xe000e100

08004ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	6039      	str	r1, [r7, #0]
 8004eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	db0a      	blt.n	8004efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	490c      	ldr	r1, [pc, #48]	; (8004f1c <__NVIC_SetPriority+0x4c>)
 8004eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eee:	0112      	lsls	r2, r2, #4
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ef8:	e00a      	b.n	8004f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	4908      	ldr	r1, [pc, #32]	; (8004f20 <__NVIC_SetPriority+0x50>)
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	3b04      	subs	r3, #4
 8004f08:	0112      	lsls	r2, r2, #4
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	761a      	strb	r2, [r3, #24]
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	e000e100 	.word	0xe000e100
 8004f20:	e000ed00 	.word	0xe000ed00

08004f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b089      	sub	sp, #36	; 0x24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	f1c3 0307 	rsb	r3, r3, #7
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	bf28      	it	cs
 8004f42:	2304      	movcs	r3, #4
 8004f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	3304      	adds	r3, #4
 8004f4a:	2b06      	cmp	r3, #6
 8004f4c:	d902      	bls.n	8004f54 <NVIC_EncodePriority+0x30>
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	3b03      	subs	r3, #3
 8004f52:	e000      	b.n	8004f56 <NVIC_EncodePriority+0x32>
 8004f54:	2300      	movs	r3, #0
 8004f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	43da      	mvns	r2, r3
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	401a      	ands	r2, r3
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	fa01 f303 	lsl.w	r3, r1, r3
 8004f76:	43d9      	mvns	r1, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f7c:	4313      	orrs	r3, r2
         );
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3724      	adds	r7, #36	; 0x24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
	...

08004f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f9c:	d301      	bcc.n	8004fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e00f      	b.n	8004fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fa2:	4a0a      	ldr	r2, [pc, #40]	; (8004fcc <SysTick_Config+0x40>)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004faa:	210f      	movs	r1, #15
 8004fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fb0:	f7ff ff8e 	bl	8004ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fb4:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <SysTick_Config+0x40>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fba:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <SysTick_Config+0x40>)
 8004fbc:	2207      	movs	r2, #7
 8004fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	e000e010 	.word	0xe000e010

08004fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff ff29 	bl	8004e30 <__NVIC_SetPriorityGrouping>
}
 8004fde:	bf00      	nop
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b086      	sub	sp, #24
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	4603      	mov	r3, r0
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	607a      	str	r2, [r7, #4]
 8004ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ff8:	f7ff ff3e 	bl	8004e78 <__NVIC_GetPriorityGrouping>
 8004ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	6978      	ldr	r0, [r7, #20]
 8005004:	f7ff ff8e 	bl	8004f24 <NVIC_EncodePriority>
 8005008:	4602      	mov	r2, r0
 800500a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800500e:	4611      	mov	r1, r2
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff ff5d 	bl	8004ed0 <__NVIC_SetPriority>
}
 8005016:	bf00      	nop
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b082      	sub	sp, #8
 8005022:	af00      	add	r7, sp, #0
 8005024:	4603      	mov	r3, r0
 8005026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502c:	4618      	mov	r0, r3
 800502e:	f7ff ff31 	bl	8004e94 <__NVIC_EnableIRQ>
}
 8005032:	bf00      	nop
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b082      	sub	sp, #8
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7ff ffa2 	bl	8004f8c <SysTick_Config>
 8005048:	4603      	mov	r3, r0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005060:	f7ff f828 	bl	80040b4 <HAL_GetTick>
 8005064:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d008      	beq.n	8005084 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2280      	movs	r2, #128	; 0x80
 8005076:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e052      	b.n	800512a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0216 	bic.w	r2, r2, #22
 8005092:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695a      	ldr	r2, [r3, #20]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d103      	bne.n	80050b4 <HAL_DMA_Abort+0x62>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d007      	beq.n	80050c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0208 	bic.w	r2, r2, #8
 80050c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0201 	bic.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050d4:	e013      	b.n	80050fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050d6:	f7fe ffed 	bl	80040b4 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b05      	cmp	r3, #5
 80050e2:	d90c      	bls.n	80050fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2203      	movs	r2, #3
 80050ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e015      	b.n	800512a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e4      	bne.n	80050d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005110:	223f      	movs	r2, #63	; 0x3f
 8005112:	409a      	lsls	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d004      	beq.n	8005150 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2280      	movs	r2, #128	; 0x80
 800514a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e00c      	b.n	800516a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2205      	movs	r2, #5
 8005154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0201 	bic.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
	...

08005178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005178:	b480      	push	{r7}
 800517a:	b089      	sub	sp, #36	; 0x24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005186:	2300      	movs	r3, #0
 8005188:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800518a:	2300      	movs	r3, #0
 800518c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800518e:	2300      	movs	r3, #0
 8005190:	61fb      	str	r3, [r7, #28]
 8005192:	e165      	b.n	8005460 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005194:	2201      	movs	r2, #1
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4013      	ands	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	f040 8154 	bne.w	800545a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d005      	beq.n	80051ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d130      	bne.n	800522c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	2203      	movs	r2, #3
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	43db      	mvns	r3, r3
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	4013      	ands	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	fa02 f303 	lsl.w	r3, r2, r3
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005200:	2201      	movs	r2, #1
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	43db      	mvns	r3, r3
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	4013      	ands	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	091b      	lsrs	r3, r3, #4
 8005216:	f003 0201 	and.w	r2, r3, #1
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	4313      	orrs	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f003 0303 	and.w	r3, r3, #3
 8005234:	2b03      	cmp	r3, #3
 8005236:	d017      	beq.n	8005268 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	2203      	movs	r2, #3
 8005244:	fa02 f303 	lsl.w	r3, r2, r3
 8005248:	43db      	mvns	r3, r3
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	4013      	ands	r3, r2
 800524e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	4313      	orrs	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f003 0303 	and.w	r3, r3, #3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d123      	bne.n	80052bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	08da      	lsrs	r2, r3, #3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3208      	adds	r2, #8
 800527c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005280:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	220f      	movs	r2, #15
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	43db      	mvns	r3, r3
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	4013      	ands	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	691a      	ldr	r2, [r3, #16]
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	08da      	lsrs	r2, r3, #3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	3208      	adds	r2, #8
 80052b6:	69b9      	ldr	r1, [r7, #24]
 80052b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	2203      	movs	r2, #3
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	43db      	mvns	r3, r3
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	4013      	ands	r3, r2
 80052d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f003 0203 	and.w	r2, r3, #3
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 80ae 	beq.w	800545a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	4b5d      	ldr	r3, [pc, #372]	; (8005478 <HAL_GPIO_Init+0x300>)
 8005304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005306:	4a5c      	ldr	r2, [pc, #368]	; (8005478 <HAL_GPIO_Init+0x300>)
 8005308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800530c:	6453      	str	r3, [r2, #68]	; 0x44
 800530e:	4b5a      	ldr	r3, [pc, #360]	; (8005478 <HAL_GPIO_Init+0x300>)
 8005310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800531a:	4a58      	ldr	r2, [pc, #352]	; (800547c <HAL_GPIO_Init+0x304>)
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	089b      	lsrs	r3, r3, #2
 8005320:	3302      	adds	r3, #2
 8005322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005326:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	220f      	movs	r2, #15
 8005332:	fa02 f303 	lsl.w	r3, r2, r3
 8005336:	43db      	mvns	r3, r3
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	4013      	ands	r3, r2
 800533c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a4f      	ldr	r2, [pc, #316]	; (8005480 <HAL_GPIO_Init+0x308>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d025      	beq.n	8005392 <HAL_GPIO_Init+0x21a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a4e      	ldr	r2, [pc, #312]	; (8005484 <HAL_GPIO_Init+0x30c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d01f      	beq.n	800538e <HAL_GPIO_Init+0x216>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a4d      	ldr	r2, [pc, #308]	; (8005488 <HAL_GPIO_Init+0x310>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d019      	beq.n	800538a <HAL_GPIO_Init+0x212>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a4c      	ldr	r2, [pc, #304]	; (800548c <HAL_GPIO_Init+0x314>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d013      	beq.n	8005386 <HAL_GPIO_Init+0x20e>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a4b      	ldr	r2, [pc, #300]	; (8005490 <HAL_GPIO_Init+0x318>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00d      	beq.n	8005382 <HAL_GPIO_Init+0x20a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a4a      	ldr	r2, [pc, #296]	; (8005494 <HAL_GPIO_Init+0x31c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d007      	beq.n	800537e <HAL_GPIO_Init+0x206>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a49      	ldr	r2, [pc, #292]	; (8005498 <HAL_GPIO_Init+0x320>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d101      	bne.n	800537a <HAL_GPIO_Init+0x202>
 8005376:	2306      	movs	r3, #6
 8005378:	e00c      	b.n	8005394 <HAL_GPIO_Init+0x21c>
 800537a:	2307      	movs	r3, #7
 800537c:	e00a      	b.n	8005394 <HAL_GPIO_Init+0x21c>
 800537e:	2305      	movs	r3, #5
 8005380:	e008      	b.n	8005394 <HAL_GPIO_Init+0x21c>
 8005382:	2304      	movs	r3, #4
 8005384:	e006      	b.n	8005394 <HAL_GPIO_Init+0x21c>
 8005386:	2303      	movs	r3, #3
 8005388:	e004      	b.n	8005394 <HAL_GPIO_Init+0x21c>
 800538a:	2302      	movs	r3, #2
 800538c:	e002      	b.n	8005394 <HAL_GPIO_Init+0x21c>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <HAL_GPIO_Init+0x21c>
 8005392:	2300      	movs	r3, #0
 8005394:	69fa      	ldr	r2, [r7, #28]
 8005396:	f002 0203 	and.w	r2, r2, #3
 800539a:	0092      	lsls	r2, r2, #2
 800539c:	4093      	lsls	r3, r2
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053a4:	4935      	ldr	r1, [pc, #212]	; (800547c <HAL_GPIO_Init+0x304>)
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	089b      	lsrs	r3, r3, #2
 80053aa:	3302      	adds	r3, #2
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053b2:	4b3a      	ldr	r3, [pc, #232]	; (800549c <HAL_GPIO_Init+0x324>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	43db      	mvns	r3, r3
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	4013      	ands	r3, r2
 80053c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053d6:	4a31      	ldr	r2, [pc, #196]	; (800549c <HAL_GPIO_Init+0x324>)
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053dc:	4b2f      	ldr	r3, [pc, #188]	; (800549c <HAL_GPIO_Init+0x324>)
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	43db      	mvns	r3, r3
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	4013      	ands	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005400:	4a26      	ldr	r2, [pc, #152]	; (800549c <HAL_GPIO_Init+0x324>)
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005406:	4b25      	ldr	r3, [pc, #148]	; (800549c <HAL_GPIO_Init+0x324>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	43db      	mvns	r3, r3
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	4013      	ands	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800542a:	4a1c      	ldr	r2, [pc, #112]	; (800549c <HAL_GPIO_Init+0x324>)
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005430:	4b1a      	ldr	r3, [pc, #104]	; (800549c <HAL_GPIO_Init+0x324>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	43db      	mvns	r3, r3
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	4013      	ands	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005454:	4a11      	ldr	r2, [pc, #68]	; (800549c <HAL_GPIO_Init+0x324>)
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	3301      	adds	r3, #1
 800545e:	61fb      	str	r3, [r7, #28]
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	2b0f      	cmp	r3, #15
 8005464:	f67f ae96 	bls.w	8005194 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005468:	bf00      	nop
 800546a:	bf00      	nop
 800546c:	3724      	adds	r7, #36	; 0x24
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	40023800 	.word	0x40023800
 800547c:	40013800 	.word	0x40013800
 8005480:	40020000 	.word	0x40020000
 8005484:	40020400 	.word	0x40020400
 8005488:	40020800 	.word	0x40020800
 800548c:	40020c00 	.word	0x40020c00
 8005490:	40021000 	.word	0x40021000
 8005494:	40021400 	.word	0x40021400
 8005498:	40021800 	.word	0x40021800
 800549c:	40013c00 	.word	0x40013c00

080054a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	460b      	mov	r3, r1
 80054aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	887b      	ldrh	r3, [r7, #2]
 80054b2:	4013      	ands	r3, r2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054b8:	2301      	movs	r3, #1
 80054ba:	73fb      	strb	r3, [r7, #15]
 80054bc:	e001      	b.n	80054c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054be:	2300      	movs	r3, #0
 80054c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	807b      	strh	r3, [r7, #2]
 80054dc:	4613      	mov	r3, r2
 80054de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054e0:	787b      	ldrb	r3, [r7, #1]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054e6:	887a      	ldrh	r2, [r7, #2]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054ec:	e003      	b.n	80054f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054ee:	887b      	ldrh	r3, [r7, #2]
 80054f0:	041a      	lsls	r2, r3, #16
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	619a      	str	r2, [r3, #24]
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
	...

08005504 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	4603      	mov	r3, r0
 800550c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800550e:	4b08      	ldr	r3, [pc, #32]	; (8005530 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005510:	695a      	ldr	r2, [r3, #20]
 8005512:	88fb      	ldrh	r3, [r7, #6]
 8005514:	4013      	ands	r3, r2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d006      	beq.n	8005528 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800551a:	4a05      	ldr	r2, [pc, #20]	; (8005530 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800551c:	88fb      	ldrh	r3, [r7, #6]
 800551e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005520:	88fb      	ldrh	r3, [r7, #6]
 8005522:	4618      	mov	r0, r3
 8005524:	f7fe fa06 	bl	8003934 <HAL_GPIO_EXTI_Callback>
  }
}
 8005528:	bf00      	nop
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	40013c00 	.word	0x40013c00

08005534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e0cc      	b.n	80056e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005548:	4b68      	ldr	r3, [pc, #416]	; (80056ec <HAL_RCC_ClockConfig+0x1b8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d90c      	bls.n	8005570 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005556:	4b65      	ldr	r3, [pc, #404]	; (80056ec <HAL_RCC_ClockConfig+0x1b8>)
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800555e:	4b63      	ldr	r3, [pc, #396]	; (80056ec <HAL_RCC_ClockConfig+0x1b8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	429a      	cmp	r2, r3
 800556a:	d001      	beq.n	8005570 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e0b8      	b.n	80056e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d020      	beq.n	80055be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b00      	cmp	r3, #0
 8005586:	d005      	beq.n	8005594 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005588:	4b59      	ldr	r3, [pc, #356]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	4a58      	ldr	r2, [pc, #352]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005592:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0308 	and.w	r3, r3, #8
 800559c:	2b00      	cmp	r3, #0
 800559e:	d005      	beq.n	80055ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055a0:	4b53      	ldr	r3, [pc, #332]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	4a52      	ldr	r2, [pc, #328]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055ac:	4b50      	ldr	r3, [pc, #320]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	494d      	ldr	r1, [pc, #308]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d044      	beq.n	8005654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d107      	bne.n	80055e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055d2:	4b47      	ldr	r3, [pc, #284]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d119      	bne.n	8005612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e07f      	b.n	80056e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d003      	beq.n	80055f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ee:	2b03      	cmp	r3, #3
 80055f0:	d107      	bne.n	8005602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f2:	4b3f      	ldr	r3, [pc, #252]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e06f      	b.n	80056e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005602:	4b3b      	ldr	r3, [pc, #236]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e067      	b.n	80056e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005612:	4b37      	ldr	r3, [pc, #220]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f023 0203 	bic.w	r2, r3, #3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	4934      	ldr	r1, [pc, #208]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005620:	4313      	orrs	r3, r2
 8005622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005624:	f7fe fd46 	bl	80040b4 <HAL_GetTick>
 8005628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562a:	e00a      	b.n	8005642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800562c:	f7fe fd42 	bl	80040b4 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	f241 3288 	movw	r2, #5000	; 0x1388
 800563a:	4293      	cmp	r3, r2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e04f      	b.n	80056e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005642:	4b2b      	ldr	r3, [pc, #172]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 020c 	and.w	r2, r3, #12
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	429a      	cmp	r2, r3
 8005652:	d1eb      	bne.n	800562c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005654:	4b25      	ldr	r3, [pc, #148]	; (80056ec <HAL_RCC_ClockConfig+0x1b8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 030f 	and.w	r3, r3, #15
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d20c      	bcs.n	800567c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005662:	4b22      	ldr	r3, [pc, #136]	; (80056ec <HAL_RCC_ClockConfig+0x1b8>)
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800566a:	4b20      	ldr	r3, [pc, #128]	; (80056ec <HAL_RCC_ClockConfig+0x1b8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	429a      	cmp	r2, r3
 8005676:	d001      	beq.n	800567c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e032      	b.n	80056e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	2b00      	cmp	r3, #0
 8005686:	d008      	beq.n	800569a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005688:	4b19      	ldr	r3, [pc, #100]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	4916      	ldr	r1, [pc, #88]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005696:	4313      	orrs	r3, r2
 8005698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d009      	beq.n	80056ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056a6:	4b12      	ldr	r3, [pc, #72]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	490e      	ldr	r1, [pc, #56]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056ba:	f000 f855 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 80056be:	4602      	mov	r2, r0
 80056c0:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	091b      	lsrs	r3, r3, #4
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	490a      	ldr	r1, [pc, #40]	; (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 80056cc:	5ccb      	ldrb	r3, [r1, r3]
 80056ce:	fa22 f303 	lsr.w	r3, r2, r3
 80056d2:	4a09      	ldr	r2, [pc, #36]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80056d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056d6:	4b09      	ldr	r3, [pc, #36]	; (80056fc <HAL_RCC_ClockConfig+0x1c8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fe fca6 	bl	800402c <HAL_InitTick>

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	40023c00 	.word	0x40023c00
 80056f0:	40023800 	.word	0x40023800
 80056f4:	0800d0a0 	.word	0x0800d0a0
 80056f8:	2000000c 	.word	0x2000000c
 80056fc:	20000010 	.word	0x20000010

08005700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005704:	4b03      	ldr	r3, [pc, #12]	; (8005714 <HAL_RCC_GetHCLKFreq+0x14>)
 8005706:	681b      	ldr	r3, [r3, #0]
}
 8005708:	4618      	mov	r0, r3
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	2000000c 	.word	0x2000000c

08005718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800571c:	f7ff fff0 	bl	8005700 <HAL_RCC_GetHCLKFreq>
 8005720:	4602      	mov	r2, r0
 8005722:	4b05      	ldr	r3, [pc, #20]	; (8005738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	0a9b      	lsrs	r3, r3, #10
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	4903      	ldr	r1, [pc, #12]	; (800573c <HAL_RCC_GetPCLK1Freq+0x24>)
 800572e:	5ccb      	ldrb	r3, [r1, r3]
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005734:	4618      	mov	r0, r3
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40023800 	.word	0x40023800
 800573c:	0800d0b0 	.word	0x0800d0b0

08005740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005744:	f7ff ffdc 	bl	8005700 <HAL_RCC_GetHCLKFreq>
 8005748:	4602      	mov	r2, r0
 800574a:	4b05      	ldr	r3, [pc, #20]	; (8005760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	0b5b      	lsrs	r3, r3, #13
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	4903      	ldr	r1, [pc, #12]	; (8005764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005756:	5ccb      	ldrb	r3, [r1, r3]
 8005758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800575c:	4618      	mov	r0, r3
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40023800 	.word	0x40023800
 8005764:	0800d0b0 	.word	0x0800d0b0

08005768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800576c:	b0ae      	sub	sp, #184	; 0xb8
 800576e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005776:	2300      	movs	r3, #0
 8005778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005782:	2300      	movs	r3, #0
 8005784:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800578e:	4bcb      	ldr	r3, [pc, #812]	; (8005abc <HAL_RCC_GetSysClockFreq+0x354>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 030c 	and.w	r3, r3, #12
 8005796:	2b0c      	cmp	r3, #12
 8005798:	f200 8206 	bhi.w	8005ba8 <HAL_RCC_GetSysClockFreq+0x440>
 800579c:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800579e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a2:	bf00      	nop
 80057a4:	080057d9 	.word	0x080057d9
 80057a8:	08005ba9 	.word	0x08005ba9
 80057ac:	08005ba9 	.word	0x08005ba9
 80057b0:	08005ba9 	.word	0x08005ba9
 80057b4:	080057e1 	.word	0x080057e1
 80057b8:	08005ba9 	.word	0x08005ba9
 80057bc:	08005ba9 	.word	0x08005ba9
 80057c0:	08005ba9 	.word	0x08005ba9
 80057c4:	080057e9 	.word	0x080057e9
 80057c8:	08005ba9 	.word	0x08005ba9
 80057cc:	08005ba9 	.word	0x08005ba9
 80057d0:	08005ba9 	.word	0x08005ba9
 80057d4:	080059d9 	.word	0x080059d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057d8:	4bb9      	ldr	r3, [pc, #740]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x358>)
 80057da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80057de:	e1e7      	b.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057e0:	4bb8      	ldr	r3, [pc, #736]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80057e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80057e6:	e1e3      	b.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057e8:	4bb4      	ldr	r3, [pc, #720]	; (8005abc <HAL_RCC_GetSysClockFreq+0x354>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057f4:	4bb1      	ldr	r3, [pc, #708]	; (8005abc <HAL_RCC_GetSysClockFreq+0x354>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d071      	beq.n	80058e4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005800:	4bae      	ldr	r3, [pc, #696]	; (8005abc <HAL_RCC_GetSysClockFreq+0x354>)
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	099b      	lsrs	r3, r3, #6
 8005806:	2200      	movs	r2, #0
 8005808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800580c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005810:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005818:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800581c:	2300      	movs	r3, #0
 800581e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005822:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005826:	4622      	mov	r2, r4
 8005828:	462b      	mov	r3, r5
 800582a:	f04f 0000 	mov.w	r0, #0
 800582e:	f04f 0100 	mov.w	r1, #0
 8005832:	0159      	lsls	r1, r3, #5
 8005834:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005838:	0150      	lsls	r0, r2, #5
 800583a:	4602      	mov	r2, r0
 800583c:	460b      	mov	r3, r1
 800583e:	4621      	mov	r1, r4
 8005840:	1a51      	subs	r1, r2, r1
 8005842:	6439      	str	r1, [r7, #64]	; 0x40
 8005844:	4629      	mov	r1, r5
 8005846:	eb63 0301 	sbc.w	r3, r3, r1
 800584a:	647b      	str	r3, [r7, #68]	; 0x44
 800584c:	f04f 0200 	mov.w	r2, #0
 8005850:	f04f 0300 	mov.w	r3, #0
 8005854:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005858:	4649      	mov	r1, r9
 800585a:	018b      	lsls	r3, r1, #6
 800585c:	4641      	mov	r1, r8
 800585e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005862:	4641      	mov	r1, r8
 8005864:	018a      	lsls	r2, r1, #6
 8005866:	4641      	mov	r1, r8
 8005868:	1a51      	subs	r1, r2, r1
 800586a:	63b9      	str	r1, [r7, #56]	; 0x38
 800586c:	4649      	mov	r1, r9
 800586e:	eb63 0301 	sbc.w	r3, r3, r1
 8005872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005880:	4649      	mov	r1, r9
 8005882:	00cb      	lsls	r3, r1, #3
 8005884:	4641      	mov	r1, r8
 8005886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800588a:	4641      	mov	r1, r8
 800588c:	00ca      	lsls	r2, r1, #3
 800588e:	4610      	mov	r0, r2
 8005890:	4619      	mov	r1, r3
 8005892:	4603      	mov	r3, r0
 8005894:	4622      	mov	r2, r4
 8005896:	189b      	adds	r3, r3, r2
 8005898:	633b      	str	r3, [r7, #48]	; 0x30
 800589a:	462b      	mov	r3, r5
 800589c:	460a      	mov	r2, r1
 800589e:	eb42 0303 	adc.w	r3, r2, r3
 80058a2:	637b      	str	r3, [r7, #52]	; 0x34
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	f04f 0300 	mov.w	r3, #0
 80058ac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80058b0:	4629      	mov	r1, r5
 80058b2:	024b      	lsls	r3, r1, #9
 80058b4:	4621      	mov	r1, r4
 80058b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058ba:	4621      	mov	r1, r4
 80058bc:	024a      	lsls	r2, r1, #9
 80058be:	4610      	mov	r0, r2
 80058c0:	4619      	mov	r1, r3
 80058c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058c6:	2200      	movs	r2, #0
 80058c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80058d0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80058d4:	f7fb f9d8 	bl	8000c88 <__aeabi_uldivmod>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4613      	mov	r3, r2
 80058de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058e2:	e067      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058e4:	4b75      	ldr	r3, [pc, #468]	; (8005abc <HAL_RCC_GetSysClockFreq+0x354>)
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	099b      	lsrs	r3, r3, #6
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058f0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80058f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80058fe:	2300      	movs	r3, #0
 8005900:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005902:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005906:	4622      	mov	r2, r4
 8005908:	462b      	mov	r3, r5
 800590a:	f04f 0000 	mov.w	r0, #0
 800590e:	f04f 0100 	mov.w	r1, #0
 8005912:	0159      	lsls	r1, r3, #5
 8005914:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005918:	0150      	lsls	r0, r2, #5
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	4621      	mov	r1, r4
 8005920:	1a51      	subs	r1, r2, r1
 8005922:	62b9      	str	r1, [r7, #40]	; 0x28
 8005924:	4629      	mov	r1, r5
 8005926:	eb63 0301 	sbc.w	r3, r3, r1
 800592a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005938:	4649      	mov	r1, r9
 800593a:	018b      	lsls	r3, r1, #6
 800593c:	4641      	mov	r1, r8
 800593e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005942:	4641      	mov	r1, r8
 8005944:	018a      	lsls	r2, r1, #6
 8005946:	4641      	mov	r1, r8
 8005948:	ebb2 0a01 	subs.w	sl, r2, r1
 800594c:	4649      	mov	r1, r9
 800594e:	eb63 0b01 	sbc.w	fp, r3, r1
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800595e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005962:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005966:	4692      	mov	sl, r2
 8005968:	469b      	mov	fp, r3
 800596a:	4623      	mov	r3, r4
 800596c:	eb1a 0303 	adds.w	r3, sl, r3
 8005970:	623b      	str	r3, [r7, #32]
 8005972:	462b      	mov	r3, r5
 8005974:	eb4b 0303 	adc.w	r3, fp, r3
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
 800597a:	f04f 0200 	mov.w	r2, #0
 800597e:	f04f 0300 	mov.w	r3, #0
 8005982:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005986:	4629      	mov	r1, r5
 8005988:	028b      	lsls	r3, r1, #10
 800598a:	4621      	mov	r1, r4
 800598c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005990:	4621      	mov	r1, r4
 8005992:	028a      	lsls	r2, r1, #10
 8005994:	4610      	mov	r0, r2
 8005996:	4619      	mov	r1, r3
 8005998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800599c:	2200      	movs	r2, #0
 800599e:	673b      	str	r3, [r7, #112]	; 0x70
 80059a0:	677a      	str	r2, [r7, #116]	; 0x74
 80059a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80059a6:	f7fb f96f 	bl	8000c88 <__aeabi_uldivmod>
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	4613      	mov	r3, r2
 80059b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059b4:	4b41      	ldr	r3, [pc, #260]	; (8005abc <HAL_RCC_GetSysClockFreq+0x354>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	0c1b      	lsrs	r3, r3, #16
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	3301      	adds	r3, #1
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80059c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80059d6:	e0eb      	b.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059d8:	4b38      	ldr	r3, [pc, #224]	; (8005abc <HAL_RCC_GetSysClockFreq+0x354>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059e4:	4b35      	ldr	r3, [pc, #212]	; (8005abc <HAL_RCC_GetSysClockFreq+0x354>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d06b      	beq.n	8005ac8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059f0:	4b32      	ldr	r3, [pc, #200]	; (8005abc <HAL_RCC_GetSysClockFreq+0x354>)
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	099b      	lsrs	r3, r3, #6
 80059f6:	2200      	movs	r2, #0
 80059f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80059fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a02:	663b      	str	r3, [r7, #96]	; 0x60
 8005a04:	2300      	movs	r3, #0
 8005a06:	667b      	str	r3, [r7, #100]	; 0x64
 8005a08:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005a0c:	4622      	mov	r2, r4
 8005a0e:	462b      	mov	r3, r5
 8005a10:	f04f 0000 	mov.w	r0, #0
 8005a14:	f04f 0100 	mov.w	r1, #0
 8005a18:	0159      	lsls	r1, r3, #5
 8005a1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a1e:	0150      	lsls	r0, r2, #5
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4621      	mov	r1, r4
 8005a26:	1a51      	subs	r1, r2, r1
 8005a28:	61b9      	str	r1, [r7, #24]
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	eb63 0301 	sbc.w	r3, r3, r1
 8005a30:	61fb      	str	r3, [r7, #28]
 8005a32:	f04f 0200 	mov.w	r2, #0
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005a3e:	4659      	mov	r1, fp
 8005a40:	018b      	lsls	r3, r1, #6
 8005a42:	4651      	mov	r1, sl
 8005a44:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a48:	4651      	mov	r1, sl
 8005a4a:	018a      	lsls	r2, r1, #6
 8005a4c:	4651      	mov	r1, sl
 8005a4e:	ebb2 0801 	subs.w	r8, r2, r1
 8005a52:	4659      	mov	r1, fp
 8005a54:	eb63 0901 	sbc.w	r9, r3, r1
 8005a58:	f04f 0200 	mov.w	r2, #0
 8005a5c:	f04f 0300 	mov.w	r3, #0
 8005a60:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a64:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a68:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a6c:	4690      	mov	r8, r2
 8005a6e:	4699      	mov	r9, r3
 8005a70:	4623      	mov	r3, r4
 8005a72:	eb18 0303 	adds.w	r3, r8, r3
 8005a76:	613b      	str	r3, [r7, #16]
 8005a78:	462b      	mov	r3, r5
 8005a7a:	eb49 0303 	adc.w	r3, r9, r3
 8005a7e:	617b      	str	r3, [r7, #20]
 8005a80:	f04f 0200 	mov.w	r2, #0
 8005a84:	f04f 0300 	mov.w	r3, #0
 8005a88:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	024b      	lsls	r3, r1, #9
 8005a90:	4621      	mov	r1, r4
 8005a92:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a96:	4621      	mov	r1, r4
 8005a98:	024a      	lsls	r2, r1, #9
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005aa6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005aa8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005aac:	f7fb f8ec 	bl	8000c88 <__aeabi_uldivmod>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005aba:	e065      	b.n	8005b88 <HAL_RCC_GetSysClockFreq+0x420>
 8005abc:	40023800 	.word	0x40023800
 8005ac0:	00f42400 	.word	0x00f42400
 8005ac4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ac8:	4b3d      	ldr	r3, [pc, #244]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0x458>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	099b      	lsrs	r3, r3, #6
 8005ace:	2200      	movs	r2, #0
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005ad8:	653b      	str	r3, [r7, #80]	; 0x50
 8005ada:	2300      	movs	r3, #0
 8005adc:	657b      	str	r3, [r7, #84]	; 0x54
 8005ade:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005ae2:	4642      	mov	r2, r8
 8005ae4:	464b      	mov	r3, r9
 8005ae6:	f04f 0000 	mov.w	r0, #0
 8005aea:	f04f 0100 	mov.w	r1, #0
 8005aee:	0159      	lsls	r1, r3, #5
 8005af0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005af4:	0150      	lsls	r0, r2, #5
 8005af6:	4602      	mov	r2, r0
 8005af8:	460b      	mov	r3, r1
 8005afa:	4641      	mov	r1, r8
 8005afc:	1a51      	subs	r1, r2, r1
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	4649      	mov	r1, r9
 8005b02:	eb63 0301 	sbc.w	r3, r3, r1
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	f04f 0200 	mov.w	r2, #0
 8005b0c:	f04f 0300 	mov.w	r3, #0
 8005b10:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005b14:	4659      	mov	r1, fp
 8005b16:	018b      	lsls	r3, r1, #6
 8005b18:	4651      	mov	r1, sl
 8005b1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b1e:	4651      	mov	r1, sl
 8005b20:	018a      	lsls	r2, r1, #6
 8005b22:	4651      	mov	r1, sl
 8005b24:	1a54      	subs	r4, r2, r1
 8005b26:	4659      	mov	r1, fp
 8005b28:	eb63 0501 	sbc.w	r5, r3, r1
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	f04f 0300 	mov.w	r3, #0
 8005b34:	00eb      	lsls	r3, r5, #3
 8005b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b3a:	00e2      	lsls	r2, r4, #3
 8005b3c:	4614      	mov	r4, r2
 8005b3e:	461d      	mov	r5, r3
 8005b40:	4643      	mov	r3, r8
 8005b42:	18e3      	adds	r3, r4, r3
 8005b44:	603b      	str	r3, [r7, #0]
 8005b46:	464b      	mov	r3, r9
 8005b48:	eb45 0303 	adc.w	r3, r5, r3
 8005b4c:	607b      	str	r3, [r7, #4]
 8005b4e:	f04f 0200 	mov.w	r2, #0
 8005b52:	f04f 0300 	mov.w	r3, #0
 8005b56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	028b      	lsls	r3, r1, #10
 8005b5e:	4621      	mov	r1, r4
 8005b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b64:	4621      	mov	r1, r4
 8005b66:	028a      	lsls	r2, r1, #10
 8005b68:	4610      	mov	r0, r2
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b70:	2200      	movs	r2, #0
 8005b72:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b74:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005b76:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b7a:	f7fb f885 	bl	8000c88 <__aeabi_uldivmod>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4613      	mov	r3, r2
 8005b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005b88:	4b0d      	ldr	r3, [pc, #52]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0x458>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	0f1b      	lsrs	r3, r3, #28
 8005b8e:	f003 0307 	and.w	r3, r3, #7
 8005b92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005b96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005ba6:	e003      	b.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ba8:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005baa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005bae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	37b8      	adds	r7, #184	; 0xb8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bbe:	bf00      	nop
 8005bc0:	40023800 	.word	0x40023800
 8005bc4:	00f42400 	.word	0x00f42400

08005bc8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e28d      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 8083 	beq.w	8005cee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005be8:	4b94      	ldr	r3, [pc, #592]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f003 030c 	and.w	r3, r3, #12
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d019      	beq.n	8005c28 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005bf4:	4b91      	ldr	r3, [pc, #580]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d106      	bne.n	8005c0e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c00:	4b8e      	ldr	r3, [pc, #568]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c0c:	d00c      	beq.n	8005c28 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c0e:	4b8b      	ldr	r3, [pc, #556]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c16:	2b0c      	cmp	r3, #12
 8005c18:	d112      	bne.n	8005c40 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c1a:	4b88      	ldr	r3, [pc, #544]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c26:	d10b      	bne.n	8005c40 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c28:	4b84      	ldr	r3, [pc, #528]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d05b      	beq.n	8005cec <HAL_RCC_OscConfig+0x124>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d157      	bne.n	8005cec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e25a      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c48:	d106      	bne.n	8005c58 <HAL_RCC_OscConfig+0x90>
 8005c4a:	4b7c      	ldr	r3, [pc, #496]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a7b      	ldr	r2, [pc, #492]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	e01d      	b.n	8005c94 <HAL_RCC_OscConfig+0xcc>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c60:	d10c      	bne.n	8005c7c <HAL_RCC_OscConfig+0xb4>
 8005c62:	4b76      	ldr	r3, [pc, #472]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a75      	ldr	r2, [pc, #468]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	4b73      	ldr	r3, [pc, #460]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a72      	ldr	r2, [pc, #456]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	e00b      	b.n	8005c94 <HAL_RCC_OscConfig+0xcc>
 8005c7c:	4b6f      	ldr	r3, [pc, #444]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a6e      	ldr	r2, [pc, #440]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	4b6c      	ldr	r3, [pc, #432]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a6b      	ldr	r2, [pc, #428]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d013      	beq.n	8005cc4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9c:	f7fe fa0a 	bl	80040b4 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ca4:	f7fe fa06 	bl	80040b4 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b64      	cmp	r3, #100	; 0x64
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e21f      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cb6:	4b61      	ldr	r3, [pc, #388]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0f0      	beq.n	8005ca4 <HAL_RCC_OscConfig+0xdc>
 8005cc2:	e014      	b.n	8005cee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc4:	f7fe f9f6 	bl	80040b4 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ccc:	f7fe f9f2 	bl	80040b4 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b64      	cmp	r3, #100	; 0x64
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e20b      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cde:	4b57      	ldr	r3, [pc, #348]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1f0      	bne.n	8005ccc <HAL_RCC_OscConfig+0x104>
 8005cea:	e000      	b.n	8005cee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d06f      	beq.n	8005dda <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005cfa:	4b50      	ldr	r3, [pc, #320]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 030c 	and.w	r3, r3, #12
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d017      	beq.n	8005d36 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d06:	4b4d      	ldr	r3, [pc, #308]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d0e:	2b08      	cmp	r3, #8
 8005d10:	d105      	bne.n	8005d1e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d12:	4b4a      	ldr	r3, [pc, #296]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d1e:	4b47      	ldr	r3, [pc, #284]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d26:	2b0c      	cmp	r3, #12
 8005d28:	d11c      	bne.n	8005d64 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d2a:	4b44      	ldr	r3, [pc, #272]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d116      	bne.n	8005d64 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d36:	4b41      	ldr	r3, [pc, #260]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d005      	beq.n	8005d4e <HAL_RCC_OscConfig+0x186>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d001      	beq.n	8005d4e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e1d3      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d4e:	4b3b      	ldr	r3, [pc, #236]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	4937      	ldr	r1, [pc, #220]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d62:	e03a      	b.n	8005dda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d020      	beq.n	8005dae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d6c:	4b34      	ldr	r3, [pc, #208]	; (8005e40 <HAL_RCC_OscConfig+0x278>)
 8005d6e:	2201      	movs	r2, #1
 8005d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d72:	f7fe f99f 	bl	80040b4 <HAL_GetTick>
 8005d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d78:	e008      	b.n	8005d8c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d7a:	f7fe f99b 	bl	80040b4 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d901      	bls.n	8005d8c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e1b4      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d8c:	4b2b      	ldr	r3, [pc, #172]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0f0      	beq.n	8005d7a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d98:	4b28      	ldr	r3, [pc, #160]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	4925      	ldr	r1, [pc, #148]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	600b      	str	r3, [r1, #0]
 8005dac:	e015      	b.n	8005dda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dae:	4b24      	ldr	r3, [pc, #144]	; (8005e40 <HAL_RCC_OscConfig+0x278>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db4:	f7fe f97e 	bl	80040b4 <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dba:	e008      	b.n	8005dce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dbc:	f7fe f97a 	bl	80040b4 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e193      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dce:	4b1b      	ldr	r3, [pc, #108]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1f0      	bne.n	8005dbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0308 	and.w	r3, r3, #8
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d036      	beq.n	8005e54 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d016      	beq.n	8005e1c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dee:	4b15      	ldr	r3, [pc, #84]	; (8005e44 <HAL_RCC_OscConfig+0x27c>)
 8005df0:	2201      	movs	r2, #1
 8005df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df4:	f7fe f95e 	bl	80040b4 <HAL_GetTick>
 8005df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dfa:	e008      	b.n	8005e0e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dfc:	f7fe f95a 	bl	80040b4 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e173      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e0e:	4b0b      	ldr	r3, [pc, #44]	; (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0f0      	beq.n	8005dfc <HAL_RCC_OscConfig+0x234>
 8005e1a:	e01b      	b.n	8005e54 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e1c:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <HAL_RCC_OscConfig+0x27c>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e22:	f7fe f947 	bl	80040b4 <HAL_GetTick>
 8005e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e28:	e00e      	b.n	8005e48 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e2a:	f7fe f943 	bl	80040b4 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d907      	bls.n	8005e48 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e15c      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
 8005e3c:	40023800 	.word	0x40023800
 8005e40:	42470000 	.word	0x42470000
 8005e44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e48:	4b8a      	ldr	r3, [pc, #552]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1ea      	bne.n	8005e2a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0304 	and.w	r3, r3, #4
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 8097 	beq.w	8005f90 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e62:	2300      	movs	r3, #0
 8005e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e66:	4b83      	ldr	r3, [pc, #524]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10f      	bne.n	8005e92 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e72:	2300      	movs	r3, #0
 8005e74:	60bb      	str	r3, [r7, #8]
 8005e76:	4b7f      	ldr	r3, [pc, #508]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	4a7e      	ldr	r2, [pc, #504]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e80:	6413      	str	r3, [r2, #64]	; 0x40
 8005e82:	4b7c      	ldr	r3, [pc, #496]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e8a:	60bb      	str	r3, [r7, #8]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e92:	4b79      	ldr	r3, [pc, #484]	; (8006078 <HAL_RCC_OscConfig+0x4b0>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d118      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e9e:	4b76      	ldr	r3, [pc, #472]	; (8006078 <HAL_RCC_OscConfig+0x4b0>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a75      	ldr	r2, [pc, #468]	; (8006078 <HAL_RCC_OscConfig+0x4b0>)
 8005ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eaa:	f7fe f903 	bl	80040b4 <HAL_GetTick>
 8005eae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eb0:	e008      	b.n	8005ec4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eb2:	f7fe f8ff 	bl	80040b4 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e118      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec4:	4b6c      	ldr	r3, [pc, #432]	; (8006078 <HAL_RCC_OscConfig+0x4b0>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d0f0      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d106      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x31e>
 8005ed8:	4b66      	ldr	r3, [pc, #408]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005edc:	4a65      	ldr	r2, [pc, #404]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005ede:	f043 0301 	orr.w	r3, r3, #1
 8005ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ee4:	e01c      	b.n	8005f20 <HAL_RCC_OscConfig+0x358>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	2b05      	cmp	r3, #5
 8005eec:	d10c      	bne.n	8005f08 <HAL_RCC_OscConfig+0x340>
 8005eee:	4b61      	ldr	r3, [pc, #388]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef2:	4a60      	ldr	r2, [pc, #384]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005ef4:	f043 0304 	orr.w	r3, r3, #4
 8005ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8005efa:	4b5e      	ldr	r3, [pc, #376]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efe:	4a5d      	ldr	r2, [pc, #372]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005f00:	f043 0301 	orr.w	r3, r3, #1
 8005f04:	6713      	str	r3, [r2, #112]	; 0x70
 8005f06:	e00b      	b.n	8005f20 <HAL_RCC_OscConfig+0x358>
 8005f08:	4b5a      	ldr	r3, [pc, #360]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0c:	4a59      	ldr	r2, [pc, #356]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005f0e:	f023 0301 	bic.w	r3, r3, #1
 8005f12:	6713      	str	r3, [r2, #112]	; 0x70
 8005f14:	4b57      	ldr	r3, [pc, #348]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f18:	4a56      	ldr	r2, [pc, #344]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005f1a:	f023 0304 	bic.w	r3, r3, #4
 8005f1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d015      	beq.n	8005f54 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f28:	f7fe f8c4 	bl	80040b4 <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f2e:	e00a      	b.n	8005f46 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f30:	f7fe f8c0 	bl	80040b4 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e0d7      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f46:	4b4b      	ldr	r3, [pc, #300]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0ee      	beq.n	8005f30 <HAL_RCC_OscConfig+0x368>
 8005f52:	e014      	b.n	8005f7e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f54:	f7fe f8ae 	bl	80040b4 <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f5a:	e00a      	b.n	8005f72 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f5c:	f7fe f8aa 	bl	80040b4 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e0c1      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f72:	4b40      	ldr	r3, [pc, #256]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1ee      	bne.n	8005f5c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f7e:	7dfb      	ldrb	r3, [r7, #23]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d105      	bne.n	8005f90 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f84:	4b3b      	ldr	r3, [pc, #236]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f88:	4a3a      	ldr	r2, [pc, #232]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 80ad 	beq.w	80060f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f9a:	4b36      	ldr	r3, [pc, #216]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 030c 	and.w	r3, r3, #12
 8005fa2:	2b08      	cmp	r3, #8
 8005fa4:	d060      	beq.n	8006068 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d145      	bne.n	800603a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fae:	4b33      	ldr	r3, [pc, #204]	; (800607c <HAL_RCC_OscConfig+0x4b4>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb4:	f7fe f87e 	bl	80040b4 <HAL_GetTick>
 8005fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fba:	e008      	b.n	8005fce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fbc:	f7fe f87a 	bl	80040b4 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e093      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fce:	4b29      	ldr	r3, [pc, #164]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1f0      	bne.n	8005fbc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	69da      	ldr	r2, [r3, #28]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	019b      	lsls	r3, r3, #6
 8005fea:	431a      	orrs	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff0:	085b      	lsrs	r3, r3, #1
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	041b      	lsls	r3, r3, #16
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffc:	061b      	lsls	r3, r3, #24
 8005ffe:	431a      	orrs	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006004:	071b      	lsls	r3, r3, #28
 8006006:	491b      	ldr	r1, [pc, #108]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8006008:	4313      	orrs	r3, r2
 800600a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800600c:	4b1b      	ldr	r3, [pc, #108]	; (800607c <HAL_RCC_OscConfig+0x4b4>)
 800600e:	2201      	movs	r2, #1
 8006010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006012:	f7fe f84f 	bl	80040b4 <HAL_GetTick>
 8006016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006018:	e008      	b.n	800602c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800601a:	f7fe f84b 	bl	80040b4 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	2b02      	cmp	r3, #2
 8006026:	d901      	bls.n	800602c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e064      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800602c:	4b11      	ldr	r3, [pc, #68]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0f0      	beq.n	800601a <HAL_RCC_OscConfig+0x452>
 8006038:	e05c      	b.n	80060f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800603a:	4b10      	ldr	r3, [pc, #64]	; (800607c <HAL_RCC_OscConfig+0x4b4>)
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006040:	f7fe f838 	bl	80040b4 <HAL_GetTick>
 8006044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006048:	f7fe f834 	bl	80040b4 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e04d      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800605a:	4b06      	ldr	r3, [pc, #24]	; (8006074 <HAL_RCC_OscConfig+0x4ac>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1f0      	bne.n	8006048 <HAL_RCC_OscConfig+0x480>
 8006066:	e045      	b.n	80060f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d107      	bne.n	8006080 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e040      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
 8006074:	40023800 	.word	0x40023800
 8006078:	40007000 	.word	0x40007000
 800607c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006080:	4b1f      	ldr	r3, [pc, #124]	; (8006100 <HAL_RCC_OscConfig+0x538>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d030      	beq.n	80060f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006098:	429a      	cmp	r2, r3
 800609a:	d129      	bne.n	80060f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d122      	bne.n	80060f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060b0:	4013      	ands	r3, r2
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d119      	bne.n	80060f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c6:	085b      	lsrs	r3, r3, #1
 80060c8:	3b01      	subs	r3, #1
 80060ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d10f      	bne.n	80060f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060dc:	429a      	cmp	r2, r3
 80060de:	d107      	bne.n	80060f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d001      	beq.n	80060f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e000      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	40023800 	.word	0x40023800

08006104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e041      	b.n	800619a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d106      	bne.n	8006130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7fd fd42 	bl	8003bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3304      	adds	r3, #4
 8006140:	4619      	mov	r1, r3
 8006142:	4610      	mov	r0, r2
 8006144:	f000 fbf0 	bl	8006928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b082      	sub	sp, #8
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e041      	b.n	8006238 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d106      	bne.n	80061ce <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f839 	bl	8006240 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2202      	movs	r2, #2
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	3304      	adds	r3, #4
 80061de:	4619      	mov	r1, r3
 80061e0:	4610      	mov	r0, r2
 80061e2:	f000 fba1 	bl	8006928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d109      	bne.n	800627c <HAL_TIM_OC_Start_IT+0x28>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b01      	cmp	r3, #1
 8006272:	bf14      	ite	ne
 8006274:	2301      	movne	r3, #1
 8006276:	2300      	moveq	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	e022      	b.n	80062c2 <HAL_TIM_OC_Start_IT+0x6e>
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2b04      	cmp	r3, #4
 8006280:	d109      	bne.n	8006296 <HAL_TIM_OC_Start_IT+0x42>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b01      	cmp	r3, #1
 800628c:	bf14      	ite	ne
 800628e:	2301      	movne	r3, #1
 8006290:	2300      	moveq	r3, #0
 8006292:	b2db      	uxtb	r3, r3
 8006294:	e015      	b.n	80062c2 <HAL_TIM_OC_Start_IT+0x6e>
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b08      	cmp	r3, #8
 800629a:	d109      	bne.n	80062b0 <HAL_TIM_OC_Start_IT+0x5c>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	bf14      	ite	ne
 80062a8:	2301      	movne	r3, #1
 80062aa:	2300      	moveq	r3, #0
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	e008      	b.n	80062c2 <HAL_TIM_OC_Start_IT+0x6e>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	bf14      	ite	ne
 80062bc:	2301      	movne	r3, #1
 80062be:	2300      	moveq	r3, #0
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e0c7      	b.n	800645a <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d104      	bne.n	80062da <HAL_TIM_OC_Start_IT+0x86>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062d8:	e013      	b.n	8006302 <HAL_TIM_OC_Start_IT+0xae>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b04      	cmp	r3, #4
 80062de:	d104      	bne.n	80062ea <HAL_TIM_OC_Start_IT+0x96>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062e8:	e00b      	b.n	8006302 <HAL_TIM_OC_Start_IT+0xae>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2b08      	cmp	r3, #8
 80062ee:	d104      	bne.n	80062fa <HAL_TIM_OC_Start_IT+0xa6>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2202      	movs	r2, #2
 80062f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062f8:	e003      	b.n	8006302 <HAL_TIM_OC_Start_IT+0xae>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2202      	movs	r2, #2
 80062fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b0c      	cmp	r3, #12
 8006306:	d841      	bhi.n	800638c <HAL_TIM_OC_Start_IT+0x138>
 8006308:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <HAL_TIM_OC_Start_IT+0xbc>)
 800630a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630e:	bf00      	nop
 8006310:	08006345 	.word	0x08006345
 8006314:	0800638d 	.word	0x0800638d
 8006318:	0800638d 	.word	0x0800638d
 800631c:	0800638d 	.word	0x0800638d
 8006320:	08006357 	.word	0x08006357
 8006324:	0800638d 	.word	0x0800638d
 8006328:	0800638d 	.word	0x0800638d
 800632c:	0800638d 	.word	0x0800638d
 8006330:	08006369 	.word	0x08006369
 8006334:	0800638d 	.word	0x0800638d
 8006338:	0800638d 	.word	0x0800638d
 800633c:	0800638d 	.word	0x0800638d
 8006340:	0800637b 	.word	0x0800637b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0202 	orr.w	r2, r2, #2
 8006352:	60da      	str	r2, [r3, #12]
      break;
 8006354:	e01d      	b.n	8006392 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f042 0204 	orr.w	r2, r2, #4
 8006364:	60da      	str	r2, [r3, #12]
      break;
 8006366:	e014      	b.n	8006392 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68da      	ldr	r2, [r3, #12]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0208 	orr.w	r2, r2, #8
 8006376:	60da      	str	r2, [r3, #12]
      break;
 8006378:	e00b      	b.n	8006392 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68da      	ldr	r2, [r3, #12]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f042 0210 	orr.w	r2, r2, #16
 8006388:	60da      	str	r2, [r3, #12]
      break;
 800638a:	e002      	b.n	8006392 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	73fb      	strb	r3, [r7, #15]
      break;
 8006390:	bf00      	nop
  }

  if (status == HAL_OK)
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d15f      	bne.n	8006458 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2201      	movs	r2, #1
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 fdab 	bl	8006efc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a2e      	ldr	r2, [pc, #184]	; (8006464 <HAL_TIM_OC_Start_IT+0x210>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d004      	beq.n	80063ba <HAL_TIM_OC_Start_IT+0x166>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a2c      	ldr	r2, [pc, #176]	; (8006468 <HAL_TIM_OC_Start_IT+0x214>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d101      	bne.n	80063be <HAL_TIM_OC_Start_IT+0x16a>
 80063ba:	2301      	movs	r3, #1
 80063bc:	e000      	b.n	80063c0 <HAL_TIM_OC_Start_IT+0x16c>
 80063be:	2300      	movs	r3, #0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d007      	beq.n	80063d4 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063d2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a22      	ldr	r2, [pc, #136]	; (8006464 <HAL_TIM_OC_Start_IT+0x210>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d022      	beq.n	8006424 <HAL_TIM_OC_Start_IT+0x1d0>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e6:	d01d      	beq.n	8006424 <HAL_TIM_OC_Start_IT+0x1d0>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a1f      	ldr	r2, [pc, #124]	; (800646c <HAL_TIM_OC_Start_IT+0x218>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d018      	beq.n	8006424 <HAL_TIM_OC_Start_IT+0x1d0>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a1e      	ldr	r2, [pc, #120]	; (8006470 <HAL_TIM_OC_Start_IT+0x21c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d013      	beq.n	8006424 <HAL_TIM_OC_Start_IT+0x1d0>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a1c      	ldr	r2, [pc, #112]	; (8006474 <HAL_TIM_OC_Start_IT+0x220>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00e      	beq.n	8006424 <HAL_TIM_OC_Start_IT+0x1d0>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a17      	ldr	r2, [pc, #92]	; (8006468 <HAL_TIM_OC_Start_IT+0x214>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d009      	beq.n	8006424 <HAL_TIM_OC_Start_IT+0x1d0>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a18      	ldr	r2, [pc, #96]	; (8006478 <HAL_TIM_OC_Start_IT+0x224>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d004      	beq.n	8006424 <HAL_TIM_OC_Start_IT+0x1d0>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a17      	ldr	r2, [pc, #92]	; (800647c <HAL_TIM_OC_Start_IT+0x228>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d111      	bne.n	8006448 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 0307 	and.w	r3, r3, #7
 800642e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2b06      	cmp	r3, #6
 8006434:	d010      	beq.n	8006458 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f042 0201 	orr.w	r2, r2, #1
 8006444:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006446:	e007      	b.n	8006458 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0201 	orr.w	r2, r2, #1
 8006456:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006458:	7bfb      	ldrb	r3, [r7, #15]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	40010000 	.word	0x40010000
 8006468:	40010400 	.word	0x40010400
 800646c:	40000400 	.word	0x40000400
 8006470:	40000800 	.word	0x40000800
 8006474:	40000c00 	.word	0x40000c00
 8006478:	40014000 	.word	0x40014000
 800647c:	40001800 	.word	0x40001800

08006480 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b02      	cmp	r3, #2
 8006494:	d122      	bne.n	80064dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d11b      	bne.n	80064dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f06f 0202 	mvn.w	r2, #2
 80064ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fa11 	bl	80068ea <HAL_TIM_IC_CaptureCallback>
 80064c8:	e005      	b.n	80064d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fb fdc0 	bl	8002050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fa14 	bl	80068fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	2b04      	cmp	r3, #4
 80064e8:	d122      	bne.n	8006530 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f003 0304 	and.w	r3, r3, #4
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	d11b      	bne.n	8006530 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f06f 0204 	mvn.w	r2, #4
 8006500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2202      	movs	r2, #2
 8006506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f9e7 	bl	80068ea <HAL_TIM_IC_CaptureCallback>
 800651c:	e005      	b.n	800652a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7fb fd96 	bl	8002050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f9ea 	bl	80068fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b08      	cmp	r3, #8
 800653c:	d122      	bne.n	8006584 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f003 0308 	and.w	r3, r3, #8
 8006548:	2b08      	cmp	r3, #8
 800654a:	d11b      	bne.n	8006584 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f06f 0208 	mvn.w	r2, #8
 8006554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2204      	movs	r2, #4
 800655a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	f003 0303 	and.w	r3, r3, #3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f9bd 	bl	80068ea <HAL_TIM_IC_CaptureCallback>
 8006570:	e005      	b.n	800657e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7fb fd6c 	bl	8002050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f9c0 	bl	80068fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f003 0310 	and.w	r3, r3, #16
 800658e:	2b10      	cmp	r3, #16
 8006590:	d122      	bne.n	80065d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f003 0310 	and.w	r3, r3, #16
 800659c:	2b10      	cmp	r3, #16
 800659e:	d11b      	bne.n	80065d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f06f 0210 	mvn.w	r2, #16
 80065a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2208      	movs	r2, #8
 80065ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f993 	bl	80068ea <HAL_TIM_IC_CaptureCallback>
 80065c4:	e005      	b.n	80065d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7fb fd42 	bl	8002050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f996 	bl	80068fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d10e      	bne.n	8006604 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d107      	bne.n	8006604 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f06f 0201 	mvn.w	r2, #1
 80065fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f969 	bl	80068d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660e:	2b80      	cmp	r3, #128	; 0x80
 8006610:	d10e      	bne.n	8006630 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661c:	2b80      	cmp	r3, #128	; 0x80
 800661e:	d107      	bne.n	8006630 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fd12 	bl	8007054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663a:	2b40      	cmp	r3, #64	; 0x40
 800663c:	d10e      	bne.n	800665c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006648:	2b40      	cmp	r3, #64	; 0x40
 800664a:	d107      	bne.n	800665c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f95b 	bl	8006912 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f003 0320 	and.w	r3, r3, #32
 8006666:	2b20      	cmp	r3, #32
 8006668:	d10e      	bne.n	8006688 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f003 0320 	and.w	r3, r3, #32
 8006674:	2b20      	cmp	r3, #32
 8006676:	d107      	bne.n	8006688 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f06f 0220 	mvn.w	r2, #32
 8006680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fcdc 	bl	8007040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006688:	bf00      	nop
 800668a:	3708      	adds	r7, #8
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d101      	bne.n	80066ae <HAL_TIM_OC_ConfigChannel+0x1e>
 80066aa:	2302      	movs	r3, #2
 80066ac:	e048      	b.n	8006740 <HAL_TIM_OC_ConfigChannel+0xb0>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b0c      	cmp	r3, #12
 80066ba:	d839      	bhi.n	8006730 <HAL_TIM_OC_ConfigChannel+0xa0>
 80066bc:	a201      	add	r2, pc, #4	; (adr r2, 80066c4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80066be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c2:	bf00      	nop
 80066c4:	080066f9 	.word	0x080066f9
 80066c8:	08006731 	.word	0x08006731
 80066cc:	08006731 	.word	0x08006731
 80066d0:	08006731 	.word	0x08006731
 80066d4:	08006707 	.word	0x08006707
 80066d8:	08006731 	.word	0x08006731
 80066dc:	08006731 	.word	0x08006731
 80066e0:	08006731 	.word	0x08006731
 80066e4:	08006715 	.word	0x08006715
 80066e8:	08006731 	.word	0x08006731
 80066ec:	08006731 	.word	0x08006731
 80066f0:	08006731 	.word	0x08006731
 80066f4:	08006723 	.word	0x08006723
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68b9      	ldr	r1, [r7, #8]
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 f9b2 	bl	8006a68 <TIM_OC1_SetConfig>
      break;
 8006704:	e017      	b.n	8006736 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68b9      	ldr	r1, [r7, #8]
 800670c:	4618      	mov	r0, r3
 800670e:	f000 fa1b 	bl	8006b48 <TIM_OC2_SetConfig>
      break;
 8006712:	e010      	b.n	8006736 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68b9      	ldr	r1, [r7, #8]
 800671a:	4618      	mov	r0, r3
 800671c:	f000 fa8a 	bl	8006c34 <TIM_OC3_SetConfig>
      break;
 8006720:	e009      	b.n	8006736 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68b9      	ldr	r1, [r7, #8]
 8006728:	4618      	mov	r0, r3
 800672a:	f000 faf7 	bl	8006d1c <TIM_OC4_SetConfig>
      break;
 800672e:	e002      	b.n	8006736 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	75fb      	strb	r3, [r7, #23]
      break;
 8006734:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800673e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3718      	adds	r7, #24
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800675c:	2b01      	cmp	r3, #1
 800675e:	d101      	bne.n	8006764 <HAL_TIM_ConfigClockSource+0x1c>
 8006760:	2302      	movs	r3, #2
 8006762:	e0b4      	b.n	80068ce <HAL_TIM_ConfigClockSource+0x186>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2202      	movs	r2, #2
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800678a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800679c:	d03e      	beq.n	800681c <HAL_TIM_ConfigClockSource+0xd4>
 800679e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067a2:	f200 8087 	bhi.w	80068b4 <HAL_TIM_ConfigClockSource+0x16c>
 80067a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067aa:	f000 8086 	beq.w	80068ba <HAL_TIM_ConfigClockSource+0x172>
 80067ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b2:	d87f      	bhi.n	80068b4 <HAL_TIM_ConfigClockSource+0x16c>
 80067b4:	2b70      	cmp	r3, #112	; 0x70
 80067b6:	d01a      	beq.n	80067ee <HAL_TIM_ConfigClockSource+0xa6>
 80067b8:	2b70      	cmp	r3, #112	; 0x70
 80067ba:	d87b      	bhi.n	80068b4 <HAL_TIM_ConfigClockSource+0x16c>
 80067bc:	2b60      	cmp	r3, #96	; 0x60
 80067be:	d050      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0x11a>
 80067c0:	2b60      	cmp	r3, #96	; 0x60
 80067c2:	d877      	bhi.n	80068b4 <HAL_TIM_ConfigClockSource+0x16c>
 80067c4:	2b50      	cmp	r3, #80	; 0x50
 80067c6:	d03c      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0xfa>
 80067c8:	2b50      	cmp	r3, #80	; 0x50
 80067ca:	d873      	bhi.n	80068b4 <HAL_TIM_ConfigClockSource+0x16c>
 80067cc:	2b40      	cmp	r3, #64	; 0x40
 80067ce:	d058      	beq.n	8006882 <HAL_TIM_ConfigClockSource+0x13a>
 80067d0:	2b40      	cmp	r3, #64	; 0x40
 80067d2:	d86f      	bhi.n	80068b4 <HAL_TIM_ConfigClockSource+0x16c>
 80067d4:	2b30      	cmp	r3, #48	; 0x30
 80067d6:	d064      	beq.n	80068a2 <HAL_TIM_ConfigClockSource+0x15a>
 80067d8:	2b30      	cmp	r3, #48	; 0x30
 80067da:	d86b      	bhi.n	80068b4 <HAL_TIM_ConfigClockSource+0x16c>
 80067dc:	2b20      	cmp	r3, #32
 80067de:	d060      	beq.n	80068a2 <HAL_TIM_ConfigClockSource+0x15a>
 80067e0:	2b20      	cmp	r3, #32
 80067e2:	d867      	bhi.n	80068b4 <HAL_TIM_ConfigClockSource+0x16c>
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d05c      	beq.n	80068a2 <HAL_TIM_ConfigClockSource+0x15a>
 80067e8:	2b10      	cmp	r3, #16
 80067ea:	d05a      	beq.n	80068a2 <HAL_TIM_ConfigClockSource+0x15a>
 80067ec:	e062      	b.n	80068b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6818      	ldr	r0, [r3, #0]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	6899      	ldr	r1, [r3, #8]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f000 fb5d 	bl	8006ebc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006810:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	609a      	str	r2, [r3, #8]
      break;
 800681a:	e04f      	b.n	80068bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	6899      	ldr	r1, [r3, #8]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f000 fb46 	bl	8006ebc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689a      	ldr	r2, [r3, #8]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800683e:	609a      	str	r2, [r3, #8]
      break;
 8006840:	e03c      	b.n	80068bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6818      	ldr	r0, [r3, #0]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	6859      	ldr	r1, [r3, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	461a      	mov	r2, r3
 8006850:	f000 faba 	bl	8006dc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2150      	movs	r1, #80	; 0x50
 800685a:	4618      	mov	r0, r3
 800685c:	f000 fb13 	bl	8006e86 <TIM_ITRx_SetConfig>
      break;
 8006860:	e02c      	b.n	80068bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6818      	ldr	r0, [r3, #0]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	6859      	ldr	r1, [r3, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	461a      	mov	r2, r3
 8006870:	f000 fad9 	bl	8006e26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2160      	movs	r1, #96	; 0x60
 800687a:	4618      	mov	r0, r3
 800687c:	f000 fb03 	bl	8006e86 <TIM_ITRx_SetConfig>
      break;
 8006880:	e01c      	b.n	80068bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6818      	ldr	r0, [r3, #0]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	6859      	ldr	r1, [r3, #4]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	461a      	mov	r2, r3
 8006890:	f000 fa9a 	bl	8006dc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2140      	movs	r1, #64	; 0x40
 800689a:	4618      	mov	r0, r3
 800689c:	f000 faf3 	bl	8006e86 <TIM_ITRx_SetConfig>
      break;
 80068a0:	e00c      	b.n	80068bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4619      	mov	r1, r3
 80068ac:	4610      	mov	r0, r2
 80068ae:	f000 faea 	bl	8006e86 <TIM_ITRx_SetConfig>
      break;
 80068b2:	e003      	b.n	80068bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	73fb      	strb	r3, [r7, #15]
      break;
 80068b8:	e000      	b.n	80068bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80068ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b083      	sub	sp, #12
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006912:	b480      	push	{r7}
 8006914:	b083      	sub	sp, #12
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a40      	ldr	r2, [pc, #256]	; (8006a3c <TIM_Base_SetConfig+0x114>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d013      	beq.n	8006968 <TIM_Base_SetConfig+0x40>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006946:	d00f      	beq.n	8006968 <TIM_Base_SetConfig+0x40>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a3d      	ldr	r2, [pc, #244]	; (8006a40 <TIM_Base_SetConfig+0x118>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d00b      	beq.n	8006968 <TIM_Base_SetConfig+0x40>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a3c      	ldr	r2, [pc, #240]	; (8006a44 <TIM_Base_SetConfig+0x11c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d007      	beq.n	8006968 <TIM_Base_SetConfig+0x40>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a3b      	ldr	r2, [pc, #236]	; (8006a48 <TIM_Base_SetConfig+0x120>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d003      	beq.n	8006968 <TIM_Base_SetConfig+0x40>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a3a      	ldr	r2, [pc, #232]	; (8006a4c <TIM_Base_SetConfig+0x124>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d108      	bne.n	800697a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	4313      	orrs	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a2f      	ldr	r2, [pc, #188]	; (8006a3c <TIM_Base_SetConfig+0x114>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d02b      	beq.n	80069da <TIM_Base_SetConfig+0xb2>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006988:	d027      	beq.n	80069da <TIM_Base_SetConfig+0xb2>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a2c      	ldr	r2, [pc, #176]	; (8006a40 <TIM_Base_SetConfig+0x118>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d023      	beq.n	80069da <TIM_Base_SetConfig+0xb2>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a2b      	ldr	r2, [pc, #172]	; (8006a44 <TIM_Base_SetConfig+0x11c>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d01f      	beq.n	80069da <TIM_Base_SetConfig+0xb2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a2a      	ldr	r2, [pc, #168]	; (8006a48 <TIM_Base_SetConfig+0x120>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d01b      	beq.n	80069da <TIM_Base_SetConfig+0xb2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a29      	ldr	r2, [pc, #164]	; (8006a4c <TIM_Base_SetConfig+0x124>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d017      	beq.n	80069da <TIM_Base_SetConfig+0xb2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a28      	ldr	r2, [pc, #160]	; (8006a50 <TIM_Base_SetConfig+0x128>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d013      	beq.n	80069da <TIM_Base_SetConfig+0xb2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a27      	ldr	r2, [pc, #156]	; (8006a54 <TIM_Base_SetConfig+0x12c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d00f      	beq.n	80069da <TIM_Base_SetConfig+0xb2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a26      	ldr	r2, [pc, #152]	; (8006a58 <TIM_Base_SetConfig+0x130>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d00b      	beq.n	80069da <TIM_Base_SetConfig+0xb2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a25      	ldr	r2, [pc, #148]	; (8006a5c <TIM_Base_SetConfig+0x134>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d007      	beq.n	80069da <TIM_Base_SetConfig+0xb2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a24      	ldr	r2, [pc, #144]	; (8006a60 <TIM_Base_SetConfig+0x138>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d003      	beq.n	80069da <TIM_Base_SetConfig+0xb2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a23      	ldr	r2, [pc, #140]	; (8006a64 <TIM_Base_SetConfig+0x13c>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d108      	bne.n	80069ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a0a      	ldr	r2, [pc, #40]	; (8006a3c <TIM_Base_SetConfig+0x114>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d003      	beq.n	8006a20 <TIM_Base_SetConfig+0xf8>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a0c      	ldr	r2, [pc, #48]	; (8006a4c <TIM_Base_SetConfig+0x124>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d103      	bne.n	8006a28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	691a      	ldr	r2, [r3, #16]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	615a      	str	r2, [r3, #20]
}
 8006a2e:	bf00      	nop
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	40010000 	.word	0x40010000
 8006a40:	40000400 	.word	0x40000400
 8006a44:	40000800 	.word	0x40000800
 8006a48:	40000c00 	.word	0x40000c00
 8006a4c:	40010400 	.word	0x40010400
 8006a50:	40014000 	.word	0x40014000
 8006a54:	40014400 	.word	0x40014400
 8006a58:	40014800 	.word	0x40014800
 8006a5c:	40001800 	.word	0x40001800
 8006a60:	40001c00 	.word	0x40001c00
 8006a64:	40002000 	.word	0x40002000

08006a68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	f023 0201 	bic.w	r2, r3, #1
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 0303 	bic.w	r3, r3, #3
 8006a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f023 0302 	bic.w	r3, r3, #2
 8006ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a20      	ldr	r2, [pc, #128]	; (8006b40 <TIM_OC1_SetConfig+0xd8>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d003      	beq.n	8006acc <TIM_OC1_SetConfig+0x64>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a1f      	ldr	r2, [pc, #124]	; (8006b44 <TIM_OC1_SetConfig+0xdc>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d10c      	bne.n	8006ae6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f023 0308 	bic.w	r3, r3, #8
 8006ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f023 0304 	bic.w	r3, r3, #4
 8006ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a15      	ldr	r2, [pc, #84]	; (8006b40 <TIM_OC1_SetConfig+0xd8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d003      	beq.n	8006af6 <TIM_OC1_SetConfig+0x8e>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a14      	ldr	r2, [pc, #80]	; (8006b44 <TIM_OC1_SetConfig+0xdc>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d111      	bne.n	8006b1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006afc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	621a      	str	r2, [r3, #32]
}
 8006b34:	bf00      	nop
 8006b36:	371c      	adds	r7, #28
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	40010000 	.word	0x40010000
 8006b44:	40010400 	.word	0x40010400

08006b48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	f023 0210 	bic.w	r2, r3, #16
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	021b      	lsls	r3, r3, #8
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f023 0320 	bic.w	r3, r3, #32
 8006b92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	011b      	lsls	r3, r3, #4
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a22      	ldr	r2, [pc, #136]	; (8006c2c <TIM_OC2_SetConfig+0xe4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d003      	beq.n	8006bb0 <TIM_OC2_SetConfig+0x68>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a21      	ldr	r2, [pc, #132]	; (8006c30 <TIM_OC2_SetConfig+0xe8>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d10d      	bne.n	8006bcc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	011b      	lsls	r3, r3, #4
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a17      	ldr	r2, [pc, #92]	; (8006c2c <TIM_OC2_SetConfig+0xe4>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d003      	beq.n	8006bdc <TIM_OC2_SetConfig+0x94>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a16      	ldr	r2, [pc, #88]	; (8006c30 <TIM_OC2_SetConfig+0xe8>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d113      	bne.n	8006c04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006be2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	621a      	str	r2, [r3, #32]
}
 8006c1e:	bf00      	nop
 8006c20:	371c      	adds	r7, #28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	40010000 	.word	0x40010000
 8006c30:	40010400 	.word	0x40010400

08006c34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f023 0303 	bic.w	r3, r3, #3
 8006c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	021b      	lsls	r3, r3, #8
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a21      	ldr	r2, [pc, #132]	; (8006d14 <TIM_OC3_SetConfig+0xe0>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d003      	beq.n	8006c9a <TIM_OC3_SetConfig+0x66>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a20      	ldr	r2, [pc, #128]	; (8006d18 <TIM_OC3_SetConfig+0xe4>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d10d      	bne.n	8006cb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ca0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	021b      	lsls	r3, r3, #8
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a16      	ldr	r2, [pc, #88]	; (8006d14 <TIM_OC3_SetConfig+0xe0>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d003      	beq.n	8006cc6 <TIM_OC3_SetConfig+0x92>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a15      	ldr	r2, [pc, #84]	; (8006d18 <TIM_OC3_SetConfig+0xe4>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d113      	bne.n	8006cee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	011b      	lsls	r3, r3, #4
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	621a      	str	r2, [r3, #32]
}
 8006d08:	bf00      	nop
 8006d0a:	371c      	adds	r7, #28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr
 8006d14:	40010000 	.word	0x40010000
 8006d18:	40010400 	.word	0x40010400

08006d1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	021b      	lsls	r3, r3, #8
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	031b      	lsls	r3, r3, #12
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a12      	ldr	r2, [pc, #72]	; (8006dc0 <TIM_OC4_SetConfig+0xa4>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d003      	beq.n	8006d84 <TIM_OC4_SetConfig+0x68>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a11      	ldr	r2, [pc, #68]	; (8006dc4 <TIM_OC4_SetConfig+0xa8>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d109      	bne.n	8006d98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	695b      	ldr	r3, [r3, #20]
 8006d90:	019b      	lsls	r3, r3, #6
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	621a      	str	r2, [r3, #32]
}
 8006db2:	bf00      	nop
 8006db4:	371c      	adds	r7, #28
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40010000 	.word	0x40010000
 8006dc4:	40010400 	.word	0x40010400

08006dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	f023 0201 	bic.w	r2, r3, #1
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	011b      	lsls	r3, r3, #4
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f023 030a 	bic.w	r3, r3, #10
 8006e04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	621a      	str	r2, [r3, #32]
}
 8006e1a:	bf00      	nop
 8006e1c:	371c      	adds	r7, #28
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b087      	sub	sp, #28
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	60f8      	str	r0, [r7, #12]
 8006e2e:	60b9      	str	r1, [r7, #8]
 8006e30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	f023 0210 	bic.w	r2, r3, #16
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6a1b      	ldr	r3, [r3, #32]
 8006e48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	031b      	lsls	r3, r3, #12
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	011b      	lsls	r3, r3, #4
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	621a      	str	r2, [r3, #32]
}
 8006e7a:	bf00      	nop
 8006e7c:	371c      	adds	r7, #28
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b085      	sub	sp, #20
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	f043 0307 	orr.w	r3, r3, #7
 8006ea8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	609a      	str	r2, [r3, #8]
}
 8006eb0:	bf00      	nop
 8006eb2:	3714      	adds	r7, #20
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
 8006ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ed6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	021a      	lsls	r2, r3, #8
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	609a      	str	r2, [r3, #8]
}
 8006ef0:	bf00      	nop
 8006ef2:	371c      	adds	r7, #28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f003 031f 	and.w	r3, r3, #31
 8006f0e:	2201      	movs	r2, #1
 8006f10:	fa02 f303 	lsl.w	r3, r2, r3
 8006f14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6a1a      	ldr	r2, [r3, #32]
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	401a      	ands	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a1a      	ldr	r2, [r3, #32]
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f003 031f 	and.w	r3, r3, #31
 8006f2e:	6879      	ldr	r1, [r7, #4]
 8006f30:	fa01 f303 	lsl.w	r3, r1, r3
 8006f34:	431a      	orrs	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	621a      	str	r2, [r3, #32]
}
 8006f3a:	bf00      	nop
 8006f3c:	371c      	adds	r7, #28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
	...

08006f48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d101      	bne.n	8006f60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	e05a      	b.n	8007016 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a21      	ldr	r2, [pc, #132]	; (8007024 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d022      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fac:	d01d      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a1d      	ldr	r2, [pc, #116]	; (8007028 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d018      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a1b      	ldr	r2, [pc, #108]	; (800702c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d013      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1a      	ldr	r2, [pc, #104]	; (8007030 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00e      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a18      	ldr	r2, [pc, #96]	; (8007034 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d009      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a17      	ldr	r2, [pc, #92]	; (8007038 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d004      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a15      	ldr	r2, [pc, #84]	; (800703c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d10c      	bne.n	8007004 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ff0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	40010000 	.word	0x40010000
 8007028:	40000400 	.word	0x40000400
 800702c:	40000800 	.word	0x40000800
 8007030:	40000c00 	.word	0x40000c00
 8007034:	40010400 	.word	0x40010400
 8007038:	40014000 	.word	0x40014000
 800703c:	40001800 	.word	0x40001800

08007040 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e03f      	b.n	80070fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d106      	bne.n	8007094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7fc fdb8 	bl	8003c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2224      	movs	r2, #36	; 0x24
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fe33 	bl	8007d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	691a      	ldr	r2, [r3, #16]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695a      	ldr	r2, [r3, #20]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68da      	ldr	r2, [r3, #12]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2220      	movs	r2, #32
 80070f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b082      	sub	sp, #8
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e047      	b.n	80071a4 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	d106      	bne.n	800712e <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7fc fd6b 	bl	8003c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2224      	movs	r2, #36	; 0x24
 8007132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68da      	ldr	r2, [r3, #12]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007144:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fde6 	bl	8007d18 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691a      	ldr	r2, [r3, #16]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800715a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	695a      	ldr	r2, [r3, #20]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800716a:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	695a      	ldr	r2, [r3, #20]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f042 0208 	orr.w	r2, r2, #8
 800717a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68da      	ldr	r2, [r3, #12]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800718a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2220      	movs	r2, #32
 8007196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2220      	movs	r2, #32
 800719e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08a      	sub	sp, #40	; 0x28
 80071b0:	af02      	add	r7, sp, #8
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	4613      	mov	r3, r2
 80071ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b20      	cmp	r3, #32
 80071ca:	d17c      	bne.n	80072c6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <HAL_UART_Transmit+0x2c>
 80071d2:	88fb      	ldrh	r3, [r7, #6]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e075      	b.n	80072c8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d101      	bne.n	80071ea <HAL_UART_Transmit+0x3e>
 80071e6:	2302      	movs	r3, #2
 80071e8:	e06e      	b.n	80072c8 <HAL_UART_Transmit+0x11c>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2221      	movs	r2, #33	; 0x21
 80071fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007200:	f7fc ff58 	bl	80040b4 <HAL_GetTick>
 8007204:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	88fa      	ldrh	r2, [r7, #6]
 800720a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	88fa      	ldrh	r2, [r7, #6]
 8007210:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800721a:	d108      	bne.n	800722e <HAL_UART_Transmit+0x82>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d104      	bne.n	800722e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007224:	2300      	movs	r3, #0
 8007226:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	61bb      	str	r3, [r7, #24]
 800722c:	e003      	b.n	8007236 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007232:	2300      	movs	r3, #0
 8007234:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800723e:	e02a      	b.n	8007296 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	2200      	movs	r2, #0
 8007248:	2180      	movs	r1, #128	; 0x80
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f000 fb1e 	bl	800788c <UART_WaitOnFlagUntilTimeout>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e036      	b.n	80072c8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10b      	bne.n	8007278 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	461a      	mov	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800726e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	3302      	adds	r3, #2
 8007274:	61bb      	str	r3, [r7, #24]
 8007276:	e007      	b.n	8007288 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	781a      	ldrb	r2, [r3, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	3301      	adds	r3, #1
 8007286:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800728c:	b29b      	uxth	r3, r3
 800728e:	3b01      	subs	r3, #1
 8007290:	b29a      	uxth	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800729a:	b29b      	uxth	r3, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1cf      	bne.n	8007240 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	2200      	movs	r2, #0
 80072a8:	2140      	movs	r1, #64	; 0x40
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 faee 	bl	800788c <UART_WaitOnFlagUntilTimeout>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e006      	b.n	80072c8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2220      	movs	r2, #32
 80072be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	e000      	b.n	80072c8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80072c6:	2302      	movs	r3, #2
  }
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3720      	adds	r7, #32
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	4613      	mov	r3, r2
 80072dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b20      	cmp	r3, #32
 80072e8:	d11d      	bne.n	8007326 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <HAL_UART_Receive_IT+0x26>
 80072f0:	88fb      	ldrh	r3, [r7, #6]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e016      	b.n	8007328 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007300:	2b01      	cmp	r3, #1
 8007302:	d101      	bne.n	8007308 <HAL_UART_Receive_IT+0x38>
 8007304:	2302      	movs	r3, #2
 8007306:	e00f      	b.n	8007328 <HAL_UART_Receive_IT+0x58>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007316:	88fb      	ldrh	r3, [r7, #6]
 8007318:	461a      	mov	r2, r3
 800731a:	68b9      	ldr	r1, [r7, #8]
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 fb23 	bl	8007968 <UART_Start_Receive_IT>
 8007322:	4603      	mov	r3, r0
 8007324:	e000      	b.n	8007328 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007326:	2302      	movs	r3, #2
  }
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b0ba      	sub	sp, #232	; 0xe8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007356:	2300      	movs	r3, #0
 8007358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800735c:	2300      	movs	r3, #0
 800735e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007366:	f003 030f 	and.w	r3, r3, #15
 800736a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800736e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10f      	bne.n	8007396 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800737a:	f003 0320 	and.w	r3, r3, #32
 800737e:	2b00      	cmp	r3, #0
 8007380:	d009      	beq.n	8007396 <HAL_UART_IRQHandler+0x66>
 8007382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fc07 	bl	8007ba2 <UART_Receive_IT>
      return;
 8007394:	e256      	b.n	8007844 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 80de 	beq.w	800755c <HAL_UART_IRQHandler+0x22c>
 80073a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d106      	bne.n	80073ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80073ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 80d1 	beq.w	800755c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80073ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00b      	beq.n	80073de <HAL_UART_IRQHandler+0xae>
 80073c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d005      	beq.n	80073de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	f043 0201 	orr.w	r2, r3, #1
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e2:	f003 0304 	and.w	r3, r3, #4
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00b      	beq.n	8007402 <HAL_UART_IRQHandler+0xd2>
 80073ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d005      	beq.n	8007402 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	f043 0202 	orr.w	r2, r3, #2
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00b      	beq.n	8007426 <HAL_UART_IRQHandler+0xf6>
 800740e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d005      	beq.n	8007426 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	f043 0204 	orr.w	r2, r3, #4
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800742a:	f003 0308 	and.w	r3, r3, #8
 800742e:	2b00      	cmp	r3, #0
 8007430:	d011      	beq.n	8007456 <HAL_UART_IRQHandler+0x126>
 8007432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007436:	f003 0320 	and.w	r3, r3, #32
 800743a:	2b00      	cmp	r3, #0
 800743c:	d105      	bne.n	800744a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800743e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d005      	beq.n	8007456 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	f043 0208 	orr.w	r2, r3, #8
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 81ed 	beq.w	800783a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	d008      	beq.n	800747e <HAL_UART_IRQHandler+0x14e>
 800746c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007470:	f003 0320 	and.w	r3, r3, #32
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fb92 	bl	8007ba2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007488:	2b40      	cmp	r3, #64	; 0x40
 800748a:	bf0c      	ite	eq
 800748c:	2301      	moveq	r3, #1
 800748e:	2300      	movne	r3, #0
 8007490:	b2db      	uxtb	r3, r3
 8007492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	f003 0308 	and.w	r3, r3, #8
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d103      	bne.n	80074aa <HAL_UART_IRQHandler+0x17a>
 80074a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d04f      	beq.n	800754a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fa9a 	bl	80079e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ba:	2b40      	cmp	r3, #64	; 0x40
 80074bc:	d141      	bne.n	8007542 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3314      	adds	r3, #20
 80074c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3314      	adds	r3, #20
 80074e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80074ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80074ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1d9      	bne.n	80074be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750e:	2b00      	cmp	r3, #0
 8007510:	d013      	beq.n	800753a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007516:	4a7d      	ldr	r2, [pc, #500]	; (800770c <HAL_UART_IRQHandler+0x3dc>)
 8007518:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751e:	4618      	mov	r0, r3
 8007520:	f7fd fe07 	bl	8005132 <HAL_DMA_Abort_IT>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d016      	beq.n	8007558 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007534:	4610      	mov	r0, r2
 8007536:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007538:	e00e      	b.n	8007558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f990 	bl	8007860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007540:	e00a      	b.n	8007558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f98c 	bl	8007860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007548:	e006      	b.n	8007558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f988 	bl	8007860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007556:	e170      	b.n	800783a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007558:	bf00      	nop
    return;
 800755a:	e16e      	b.n	800783a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007560:	2b01      	cmp	r3, #1
 8007562:	f040 814a 	bne.w	80077fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800756a:	f003 0310 	and.w	r3, r3, #16
 800756e:	2b00      	cmp	r3, #0
 8007570:	f000 8143 	beq.w	80077fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007578:	f003 0310 	and.w	r3, r3, #16
 800757c:	2b00      	cmp	r3, #0
 800757e:	f000 813c 	beq.w	80077fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007582:	2300      	movs	r3, #0
 8007584:	60bb      	str	r3, [r7, #8]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	60bb      	str	r3, [r7, #8]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	60bb      	str	r3, [r7, #8]
 8007596:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a2:	2b40      	cmp	r3, #64	; 0x40
 80075a4:	f040 80b4 	bne.w	8007710 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 8140 	beq.w	800783e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075c6:	429a      	cmp	r2, r3
 80075c8:	f080 8139 	bcs.w	800783e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075de:	f000 8088 	beq.w	80076f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	330c      	adds	r3, #12
 80075e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	330c      	adds	r3, #12
 800760a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800760e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800761a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007626:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1d9      	bne.n	80075e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3314      	adds	r3, #20
 8007634:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007638:	e853 3f00 	ldrex	r3, [r3]
 800763c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800763e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007640:	f023 0301 	bic.w	r3, r3, #1
 8007644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3314      	adds	r3, #20
 800764e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007652:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007656:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007658:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800765a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800765e:	e841 2300 	strex	r3, r2, [r1]
 8007662:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1e1      	bne.n	800762e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3314      	adds	r3, #20
 8007670:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007674:	e853 3f00 	ldrex	r3, [r3]
 8007678:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800767a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800767c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3314      	adds	r3, #20
 800768a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800768e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007690:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007694:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800769c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e3      	bne.n	800766a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	330c      	adds	r3, #12
 80076b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ba:	e853 3f00 	ldrex	r3, [r3]
 80076be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076c2:	f023 0310 	bic.w	r3, r3, #16
 80076c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	330c      	adds	r3, #12
 80076d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80076d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80076d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076dc:	e841 2300 	strex	r3, r2, [r1]
 80076e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1e3      	bne.n	80076b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fd fcb0 	bl	8005052 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	b29b      	uxth	r3, r3
 8007700:	4619      	mov	r1, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f8b6 	bl	8007874 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007708:	e099      	b.n	800783e <HAL_UART_IRQHandler+0x50e>
 800770a:	bf00      	nop
 800770c:	08007aab 	.word	0x08007aab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007718:	b29b      	uxth	r3, r3
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007724:	b29b      	uxth	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 808b 	beq.w	8007842 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800772c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 8086 	beq.w	8007842 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	330c      	adds	r3, #12
 800773c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007748:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800774c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	330c      	adds	r3, #12
 8007756:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800775a:	647a      	str	r2, [r7, #68]	; 0x44
 800775c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007762:	e841 2300 	strex	r3, r2, [r1]
 8007766:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e3      	bne.n	8007736 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3314      	adds	r3, #20
 8007774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	623b      	str	r3, [r7, #32]
   return(result);
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	f023 0301 	bic.w	r3, r3, #1
 8007784:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3314      	adds	r3, #20
 800778e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007792:	633a      	str	r2, [r7, #48]	; 0x30
 8007794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800779a:	e841 2300 	strex	r3, r2, [r1]
 800779e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1e3      	bne.n	800776e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2220      	movs	r2, #32
 80077aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	330c      	adds	r3, #12
 80077ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	e853 3f00 	ldrex	r3, [r3]
 80077c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f023 0310 	bic.w	r3, r3, #16
 80077ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	330c      	adds	r3, #12
 80077d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80077d8:	61fa      	str	r2, [r7, #28]
 80077da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077dc:	69b9      	ldr	r1, [r7, #24]
 80077de:	69fa      	ldr	r2, [r7, #28]
 80077e0:	e841 2300 	strex	r3, r2, [r1]
 80077e4:	617b      	str	r3, [r7, #20]
   return(result);
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1e3      	bne.n	80077b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f83e 	bl	8007874 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077f8:	e023      	b.n	8007842 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80077fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007802:	2b00      	cmp	r3, #0
 8007804:	d009      	beq.n	800781a <HAL_UART_IRQHandler+0x4ea>
 8007806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800780a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f95d 	bl	8007ad2 <UART_Transmit_IT>
    return;
 8007818:	e014      	b.n	8007844 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800781a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800781e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00e      	beq.n	8007844 <HAL_UART_IRQHandler+0x514>
 8007826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800782a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800782e:	2b00      	cmp	r3, #0
 8007830:	d008      	beq.n	8007844 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f99d 	bl	8007b72 <UART_EndTransmit_IT>
    return;
 8007838:	e004      	b.n	8007844 <HAL_UART_IRQHandler+0x514>
    return;
 800783a:	bf00      	nop
 800783c:	e002      	b.n	8007844 <HAL_UART_IRQHandler+0x514>
      return;
 800783e:	bf00      	nop
 8007840:	e000      	b.n	8007844 <HAL_UART_IRQHandler+0x514>
      return;
 8007842:	bf00      	nop
  }
}
 8007844:	37e8      	adds	r7, #232	; 0xe8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop

0800784c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	460b      	mov	r3, r1
 800787e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b090      	sub	sp, #64	; 0x40
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	603b      	str	r3, [r7, #0]
 8007898:	4613      	mov	r3, r2
 800789a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800789c:	e050      	b.n	8007940 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800789e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078a4:	d04c      	beq.n	8007940 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d007      	beq.n	80078bc <UART_WaitOnFlagUntilTimeout+0x30>
 80078ac:	f7fc fc02 	bl	80040b4 <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d241      	bcs.n	8007940 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	330c      	adds	r3, #12
 80078c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c6:	e853 3f00 	ldrex	r3, [r3]
 80078ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	330c      	adds	r3, #12
 80078da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078dc:	637a      	str	r2, [r7, #52]	; 0x34
 80078de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078e4:	e841 2300 	strex	r3, r2, [r1]
 80078e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1e5      	bne.n	80078bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3314      	adds	r3, #20
 80078f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	e853 3f00 	ldrex	r3, [r3]
 80078fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	f023 0301 	bic.w	r3, r3, #1
 8007906:	63bb      	str	r3, [r7, #56]	; 0x38
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3314      	adds	r3, #20
 800790e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007910:	623a      	str	r2, [r7, #32]
 8007912:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007914:	69f9      	ldr	r1, [r7, #28]
 8007916:	6a3a      	ldr	r2, [r7, #32]
 8007918:	e841 2300 	strex	r3, r2, [r1]
 800791c:	61bb      	str	r3, [r7, #24]
   return(result);
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1e5      	bne.n	80078f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2220      	movs	r2, #32
 8007928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2220      	movs	r2, #32
 8007930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e00f      	b.n	8007960 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	4013      	ands	r3, r2
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	429a      	cmp	r2, r3
 800794e:	bf0c      	ite	eq
 8007950:	2301      	moveq	r3, #1
 8007952:	2300      	movne	r3, #0
 8007954:	b2db      	uxtb	r3, r3
 8007956:	461a      	mov	r2, r3
 8007958:	79fb      	ldrb	r3, [r7, #7]
 800795a:	429a      	cmp	r2, r3
 800795c:	d09f      	beq.n	800789e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3740      	adds	r7, #64	; 0x40
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	4613      	mov	r3, r2
 8007974:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	88fa      	ldrh	r2, [r7, #6]
 8007980:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	88fa      	ldrh	r2, [r7, #6]
 8007986:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2222      	movs	r2, #34	; 0x22
 8007992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d007      	beq.n	80079b6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68da      	ldr	r2, [r3, #12]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079b4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	695a      	ldr	r2, [r3, #20]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f042 0201 	orr.w	r2, r2, #1
 80079c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68da      	ldr	r2, [r3, #12]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f042 0220 	orr.w	r2, r2, #32
 80079d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b095      	sub	sp, #84	; 0x54
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	330c      	adds	r3, #12
 80079f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f6:	e853 3f00 	ldrex	r3, [r3]
 80079fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	330c      	adds	r3, #12
 8007a0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a0c:	643a      	str	r2, [r7, #64]	; 0x40
 8007a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a14:	e841 2300 	strex	r3, r2, [r1]
 8007a18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1e5      	bne.n	80079ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	3314      	adds	r3, #20
 8007a26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	e853 3f00 	ldrex	r3, [r3]
 8007a2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	f023 0301 	bic.w	r3, r3, #1
 8007a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3314      	adds	r3, #20
 8007a3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a48:	e841 2300 	strex	r3, r2, [r1]
 8007a4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1e5      	bne.n	8007a20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d119      	bne.n	8007a90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	330c      	adds	r3, #12
 8007a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	e853 3f00 	ldrex	r3, [r3]
 8007a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f023 0310 	bic.w	r3, r3, #16
 8007a72:	647b      	str	r3, [r7, #68]	; 0x44
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	330c      	adds	r3, #12
 8007a7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a7c:	61ba      	str	r2, [r7, #24]
 8007a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	6979      	ldr	r1, [r7, #20]
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	e841 2300 	strex	r3, r2, [r1]
 8007a88:	613b      	str	r3, [r7, #16]
   return(result);
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e5      	bne.n	8007a5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2220      	movs	r2, #32
 8007a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a9e:	bf00      	nop
 8007aa0:	3754      	adds	r7, #84	; 0x54
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f7ff fecb 	bl	8007860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007aca:	bf00      	nop
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b085      	sub	sp, #20
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b21      	cmp	r3, #33	; 0x21
 8007ae4:	d13e      	bne.n	8007b64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aee:	d114      	bne.n	8007b1a <UART_Transmit_IT+0x48>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d110      	bne.n	8007b1a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a1b      	ldr	r3, [r3, #32]
 8007afc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	881b      	ldrh	r3, [r3, #0]
 8007b02:	461a      	mov	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	1c9a      	adds	r2, r3, #2
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	621a      	str	r2, [r3, #32]
 8007b18:	e008      	b.n	8007b2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	1c59      	adds	r1, r3, #1
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	6211      	str	r1, [r2, #32]
 8007b24:	781a      	ldrb	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b01      	subs	r3, #1
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	4619      	mov	r1, r3
 8007b3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10f      	bne.n	8007b60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68da      	ldr	r2, [r3, #12]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68da      	ldr	r2, [r3, #12]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	e000      	b.n	8007b66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b64:	2302      	movs	r3, #2
  }
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3714      	adds	r7, #20
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b082      	sub	sp, #8
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68da      	ldr	r2, [r3, #12]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7ff fe5a 	bl	800784c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b08c      	sub	sp, #48	; 0x30
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b22      	cmp	r3, #34	; 0x22
 8007bb4:	f040 80ab 	bne.w	8007d0e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bc0:	d117      	bne.n	8007bf2 <UART_Receive_IT+0x50>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d113      	bne.n	8007bf2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bea:	1c9a      	adds	r2, r3, #2
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	629a      	str	r2, [r3, #40]	; 0x28
 8007bf0:	e026      	b.n	8007c40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c04:	d007      	beq.n	8007c16 <UART_Receive_IT+0x74>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10a      	bne.n	8007c24 <UART_Receive_IT+0x82>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d106      	bne.n	8007c24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c20:	701a      	strb	r2, [r3, #0]
 8007c22:	e008      	b.n	8007c36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3a:	1c5a      	adds	r2, r3, #1
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	3b01      	subs	r3, #1
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d15a      	bne.n	8007d0a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68da      	ldr	r2, [r3, #12]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f022 0220 	bic.w	r2, r2, #32
 8007c62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68da      	ldr	r2, [r3, #12]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	695a      	ldr	r2, [r3, #20]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f022 0201 	bic.w	r2, r2, #1
 8007c82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2220      	movs	r2, #32
 8007c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d135      	bne.n	8007d00 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	330c      	adds	r3, #12
 8007ca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	f023 0310 	bic.w	r3, r3, #16
 8007cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	330c      	adds	r3, #12
 8007cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cba:	623a      	str	r2, [r7, #32]
 8007cbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	69f9      	ldr	r1, [r7, #28]
 8007cc0:	6a3a      	ldr	r2, [r7, #32]
 8007cc2:	e841 2300 	strex	r3, r2, [r1]
 8007cc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1e5      	bne.n	8007c9a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0310 	and.w	r3, r3, #16
 8007cd8:	2b10      	cmp	r3, #16
 8007cda:	d10a      	bne.n	8007cf2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cdc:	2300      	movs	r3, #0
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	60fb      	str	r3, [r7, #12]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7ff fdbb 	bl	8007874 <HAL_UARTEx_RxEventCallback>
 8007cfe:	e002      	b.n	8007d06 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7fb fda7 	bl	8003854 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	e002      	b.n	8007d10 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	e000      	b.n	8007d10 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007d0e:	2302      	movs	r3, #2
  }
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3730      	adds	r7, #48	; 0x30
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d1c:	b0c0      	sub	sp, #256	; 0x100
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d34:	68d9      	ldr	r1, [r3, #12]
 8007d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	ea40 0301 	orr.w	r3, r0, r1
 8007d40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d46:	689a      	ldr	r2, [r3, #8]
 8007d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	431a      	orrs	r2, r3
 8007d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d70:	f021 010c 	bic.w	r1, r1, #12
 8007d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d7e:	430b      	orrs	r3, r1
 8007d80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d92:	6999      	ldr	r1, [r3, #24]
 8007d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	ea40 0301 	orr.w	r3, r0, r1
 8007d9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	4b8f      	ldr	r3, [pc, #572]	; (8007fe4 <UART_SetConfig+0x2cc>)
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d005      	beq.n	8007db8 <UART_SetConfig+0xa0>
 8007dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	4b8d      	ldr	r3, [pc, #564]	; (8007fe8 <UART_SetConfig+0x2d0>)
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d104      	bne.n	8007dc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007db8:	f7fd fcc2 	bl	8005740 <HAL_RCC_GetPCLK2Freq>
 8007dbc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007dc0:	e003      	b.n	8007dca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007dc2:	f7fd fca9 	bl	8005718 <HAL_RCC_GetPCLK1Freq>
 8007dc6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dce:	69db      	ldr	r3, [r3, #28]
 8007dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dd4:	f040 810c 	bne.w	8007ff0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007de2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007de6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007dea:	4622      	mov	r2, r4
 8007dec:	462b      	mov	r3, r5
 8007dee:	1891      	adds	r1, r2, r2
 8007df0:	65b9      	str	r1, [r7, #88]	; 0x58
 8007df2:	415b      	adcs	r3, r3
 8007df4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007df6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	eb12 0801 	adds.w	r8, r2, r1
 8007e00:	4629      	mov	r1, r5
 8007e02:	eb43 0901 	adc.w	r9, r3, r1
 8007e06:	f04f 0200 	mov.w	r2, #0
 8007e0a:	f04f 0300 	mov.w	r3, #0
 8007e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e1a:	4690      	mov	r8, r2
 8007e1c:	4699      	mov	r9, r3
 8007e1e:	4623      	mov	r3, r4
 8007e20:	eb18 0303 	adds.w	r3, r8, r3
 8007e24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e28:	462b      	mov	r3, r5
 8007e2a:	eb49 0303 	adc.w	r3, r9, r3
 8007e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007e42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007e46:	460b      	mov	r3, r1
 8007e48:	18db      	adds	r3, r3, r3
 8007e4a:	653b      	str	r3, [r7, #80]	; 0x50
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	eb42 0303 	adc.w	r3, r2, r3
 8007e52:	657b      	str	r3, [r7, #84]	; 0x54
 8007e54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e5c:	f7f8 ff14 	bl	8000c88 <__aeabi_uldivmod>
 8007e60:	4602      	mov	r2, r0
 8007e62:	460b      	mov	r3, r1
 8007e64:	4b61      	ldr	r3, [pc, #388]	; (8007fec <UART_SetConfig+0x2d4>)
 8007e66:	fba3 2302 	umull	r2, r3, r3, r2
 8007e6a:	095b      	lsrs	r3, r3, #5
 8007e6c:	011c      	lsls	r4, r3, #4
 8007e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e72:	2200      	movs	r2, #0
 8007e74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007e7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007e80:	4642      	mov	r2, r8
 8007e82:	464b      	mov	r3, r9
 8007e84:	1891      	adds	r1, r2, r2
 8007e86:	64b9      	str	r1, [r7, #72]	; 0x48
 8007e88:	415b      	adcs	r3, r3
 8007e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e90:	4641      	mov	r1, r8
 8007e92:	eb12 0a01 	adds.w	sl, r2, r1
 8007e96:	4649      	mov	r1, r9
 8007e98:	eb43 0b01 	adc.w	fp, r3, r1
 8007e9c:	f04f 0200 	mov.w	r2, #0
 8007ea0:	f04f 0300 	mov.w	r3, #0
 8007ea4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ea8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007eac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007eb0:	4692      	mov	sl, r2
 8007eb2:	469b      	mov	fp, r3
 8007eb4:	4643      	mov	r3, r8
 8007eb6:	eb1a 0303 	adds.w	r3, sl, r3
 8007eba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ebe:	464b      	mov	r3, r9
 8007ec0:	eb4b 0303 	adc.w	r3, fp, r3
 8007ec4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ed4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007ed8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007edc:	460b      	mov	r3, r1
 8007ede:	18db      	adds	r3, r3, r3
 8007ee0:	643b      	str	r3, [r7, #64]	; 0x40
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	eb42 0303 	adc.w	r3, r2, r3
 8007ee8:	647b      	str	r3, [r7, #68]	; 0x44
 8007eea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007eee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007ef2:	f7f8 fec9 	bl	8000c88 <__aeabi_uldivmod>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4611      	mov	r1, r2
 8007efc:	4b3b      	ldr	r3, [pc, #236]	; (8007fec <UART_SetConfig+0x2d4>)
 8007efe:	fba3 2301 	umull	r2, r3, r3, r1
 8007f02:	095b      	lsrs	r3, r3, #5
 8007f04:	2264      	movs	r2, #100	; 0x64
 8007f06:	fb02 f303 	mul.w	r3, r2, r3
 8007f0a:	1acb      	subs	r3, r1, r3
 8007f0c:	00db      	lsls	r3, r3, #3
 8007f0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007f12:	4b36      	ldr	r3, [pc, #216]	; (8007fec <UART_SetConfig+0x2d4>)
 8007f14:	fba3 2302 	umull	r2, r3, r3, r2
 8007f18:	095b      	lsrs	r3, r3, #5
 8007f1a:	005b      	lsls	r3, r3, #1
 8007f1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f20:	441c      	add	r4, r3
 8007f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f26:	2200      	movs	r2, #0
 8007f28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007f30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007f34:	4642      	mov	r2, r8
 8007f36:	464b      	mov	r3, r9
 8007f38:	1891      	adds	r1, r2, r2
 8007f3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f3c:	415b      	adcs	r3, r3
 8007f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f44:	4641      	mov	r1, r8
 8007f46:	1851      	adds	r1, r2, r1
 8007f48:	6339      	str	r1, [r7, #48]	; 0x30
 8007f4a:	4649      	mov	r1, r9
 8007f4c:	414b      	adcs	r3, r1
 8007f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8007f50:	f04f 0200 	mov.w	r2, #0
 8007f54:	f04f 0300 	mov.w	r3, #0
 8007f58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007f5c:	4659      	mov	r1, fp
 8007f5e:	00cb      	lsls	r3, r1, #3
 8007f60:	4651      	mov	r1, sl
 8007f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f66:	4651      	mov	r1, sl
 8007f68:	00ca      	lsls	r2, r1, #3
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	4603      	mov	r3, r0
 8007f70:	4642      	mov	r2, r8
 8007f72:	189b      	adds	r3, r3, r2
 8007f74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f78:	464b      	mov	r3, r9
 8007f7a:	460a      	mov	r2, r1
 8007f7c:	eb42 0303 	adc.w	r3, r2, r3
 8007f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007f94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007f98:	460b      	mov	r3, r1
 8007f9a:	18db      	adds	r3, r3, r3
 8007f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	eb42 0303 	adc.w	r3, r2, r3
 8007fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007faa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007fae:	f7f8 fe6b 	bl	8000c88 <__aeabi_uldivmod>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	4b0d      	ldr	r3, [pc, #52]	; (8007fec <UART_SetConfig+0x2d4>)
 8007fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8007fbc:	095b      	lsrs	r3, r3, #5
 8007fbe:	2164      	movs	r1, #100	; 0x64
 8007fc0:	fb01 f303 	mul.w	r3, r1, r3
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	00db      	lsls	r3, r3, #3
 8007fc8:	3332      	adds	r3, #50	; 0x32
 8007fca:	4a08      	ldr	r2, [pc, #32]	; (8007fec <UART_SetConfig+0x2d4>)
 8007fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd0:	095b      	lsrs	r3, r3, #5
 8007fd2:	f003 0207 	and.w	r2, r3, #7
 8007fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4422      	add	r2, r4
 8007fde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007fe0:	e105      	b.n	80081ee <UART_SetConfig+0x4d6>
 8007fe2:	bf00      	nop
 8007fe4:	40011000 	.word	0x40011000
 8007fe8:	40011400 	.word	0x40011400
 8007fec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007ffa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007ffe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008002:	4642      	mov	r2, r8
 8008004:	464b      	mov	r3, r9
 8008006:	1891      	adds	r1, r2, r2
 8008008:	6239      	str	r1, [r7, #32]
 800800a:	415b      	adcs	r3, r3
 800800c:	627b      	str	r3, [r7, #36]	; 0x24
 800800e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008012:	4641      	mov	r1, r8
 8008014:	1854      	adds	r4, r2, r1
 8008016:	4649      	mov	r1, r9
 8008018:	eb43 0501 	adc.w	r5, r3, r1
 800801c:	f04f 0200 	mov.w	r2, #0
 8008020:	f04f 0300 	mov.w	r3, #0
 8008024:	00eb      	lsls	r3, r5, #3
 8008026:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800802a:	00e2      	lsls	r2, r4, #3
 800802c:	4614      	mov	r4, r2
 800802e:	461d      	mov	r5, r3
 8008030:	4643      	mov	r3, r8
 8008032:	18e3      	adds	r3, r4, r3
 8008034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008038:	464b      	mov	r3, r9
 800803a:	eb45 0303 	adc.w	r3, r5, r3
 800803e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800804e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008052:	f04f 0200 	mov.w	r2, #0
 8008056:	f04f 0300 	mov.w	r3, #0
 800805a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800805e:	4629      	mov	r1, r5
 8008060:	008b      	lsls	r3, r1, #2
 8008062:	4621      	mov	r1, r4
 8008064:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008068:	4621      	mov	r1, r4
 800806a:	008a      	lsls	r2, r1, #2
 800806c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008070:	f7f8 fe0a 	bl	8000c88 <__aeabi_uldivmod>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4b60      	ldr	r3, [pc, #384]	; (80081fc <UART_SetConfig+0x4e4>)
 800807a:	fba3 2302 	umull	r2, r3, r3, r2
 800807e:	095b      	lsrs	r3, r3, #5
 8008080:	011c      	lsls	r4, r3, #4
 8008082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008086:	2200      	movs	r2, #0
 8008088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800808c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008090:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008094:	4642      	mov	r2, r8
 8008096:	464b      	mov	r3, r9
 8008098:	1891      	adds	r1, r2, r2
 800809a:	61b9      	str	r1, [r7, #24]
 800809c:	415b      	adcs	r3, r3
 800809e:	61fb      	str	r3, [r7, #28]
 80080a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080a4:	4641      	mov	r1, r8
 80080a6:	1851      	adds	r1, r2, r1
 80080a8:	6139      	str	r1, [r7, #16]
 80080aa:	4649      	mov	r1, r9
 80080ac:	414b      	adcs	r3, r1
 80080ae:	617b      	str	r3, [r7, #20]
 80080b0:	f04f 0200 	mov.w	r2, #0
 80080b4:	f04f 0300 	mov.w	r3, #0
 80080b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080bc:	4659      	mov	r1, fp
 80080be:	00cb      	lsls	r3, r1, #3
 80080c0:	4651      	mov	r1, sl
 80080c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080c6:	4651      	mov	r1, sl
 80080c8:	00ca      	lsls	r2, r1, #3
 80080ca:	4610      	mov	r0, r2
 80080cc:	4619      	mov	r1, r3
 80080ce:	4603      	mov	r3, r0
 80080d0:	4642      	mov	r2, r8
 80080d2:	189b      	adds	r3, r3, r2
 80080d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080d8:	464b      	mov	r3, r9
 80080da:	460a      	mov	r2, r1
 80080dc:	eb42 0303 	adc.w	r3, r2, r3
 80080e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80080ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80080f0:	f04f 0200 	mov.w	r2, #0
 80080f4:	f04f 0300 	mov.w	r3, #0
 80080f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80080fc:	4649      	mov	r1, r9
 80080fe:	008b      	lsls	r3, r1, #2
 8008100:	4641      	mov	r1, r8
 8008102:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008106:	4641      	mov	r1, r8
 8008108:	008a      	lsls	r2, r1, #2
 800810a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800810e:	f7f8 fdbb 	bl	8000c88 <__aeabi_uldivmod>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	4b39      	ldr	r3, [pc, #228]	; (80081fc <UART_SetConfig+0x4e4>)
 8008118:	fba3 1302 	umull	r1, r3, r3, r2
 800811c:	095b      	lsrs	r3, r3, #5
 800811e:	2164      	movs	r1, #100	; 0x64
 8008120:	fb01 f303 	mul.w	r3, r1, r3
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	011b      	lsls	r3, r3, #4
 8008128:	3332      	adds	r3, #50	; 0x32
 800812a:	4a34      	ldr	r2, [pc, #208]	; (80081fc <UART_SetConfig+0x4e4>)
 800812c:	fba2 2303 	umull	r2, r3, r2, r3
 8008130:	095b      	lsrs	r3, r3, #5
 8008132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008136:	441c      	add	r4, r3
 8008138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800813c:	2200      	movs	r2, #0
 800813e:	673b      	str	r3, [r7, #112]	; 0x70
 8008140:	677a      	str	r2, [r7, #116]	; 0x74
 8008142:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008146:	4642      	mov	r2, r8
 8008148:	464b      	mov	r3, r9
 800814a:	1891      	adds	r1, r2, r2
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	415b      	adcs	r3, r3
 8008150:	60fb      	str	r3, [r7, #12]
 8008152:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008156:	4641      	mov	r1, r8
 8008158:	1851      	adds	r1, r2, r1
 800815a:	6039      	str	r1, [r7, #0]
 800815c:	4649      	mov	r1, r9
 800815e:	414b      	adcs	r3, r1
 8008160:	607b      	str	r3, [r7, #4]
 8008162:	f04f 0200 	mov.w	r2, #0
 8008166:	f04f 0300 	mov.w	r3, #0
 800816a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800816e:	4659      	mov	r1, fp
 8008170:	00cb      	lsls	r3, r1, #3
 8008172:	4651      	mov	r1, sl
 8008174:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008178:	4651      	mov	r1, sl
 800817a:	00ca      	lsls	r2, r1, #3
 800817c:	4610      	mov	r0, r2
 800817e:	4619      	mov	r1, r3
 8008180:	4603      	mov	r3, r0
 8008182:	4642      	mov	r2, r8
 8008184:	189b      	adds	r3, r3, r2
 8008186:	66bb      	str	r3, [r7, #104]	; 0x68
 8008188:	464b      	mov	r3, r9
 800818a:	460a      	mov	r2, r1
 800818c:	eb42 0303 	adc.w	r3, r2, r3
 8008190:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	663b      	str	r3, [r7, #96]	; 0x60
 800819c:	667a      	str	r2, [r7, #100]	; 0x64
 800819e:	f04f 0200 	mov.w	r2, #0
 80081a2:	f04f 0300 	mov.w	r3, #0
 80081a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80081aa:	4649      	mov	r1, r9
 80081ac:	008b      	lsls	r3, r1, #2
 80081ae:	4641      	mov	r1, r8
 80081b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081b4:	4641      	mov	r1, r8
 80081b6:	008a      	lsls	r2, r1, #2
 80081b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80081bc:	f7f8 fd64 	bl	8000c88 <__aeabi_uldivmod>
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	4b0d      	ldr	r3, [pc, #52]	; (80081fc <UART_SetConfig+0x4e4>)
 80081c6:	fba3 1302 	umull	r1, r3, r3, r2
 80081ca:	095b      	lsrs	r3, r3, #5
 80081cc:	2164      	movs	r1, #100	; 0x64
 80081ce:	fb01 f303 	mul.w	r3, r1, r3
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	011b      	lsls	r3, r3, #4
 80081d6:	3332      	adds	r3, #50	; 0x32
 80081d8:	4a08      	ldr	r2, [pc, #32]	; (80081fc <UART_SetConfig+0x4e4>)
 80081da:	fba2 2303 	umull	r2, r3, r2, r3
 80081de:	095b      	lsrs	r3, r3, #5
 80081e0:	f003 020f 	and.w	r2, r3, #15
 80081e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4422      	add	r2, r4
 80081ec:	609a      	str	r2, [r3, #8]
}
 80081ee:	bf00      	nop
 80081f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80081f4:	46bd      	mov	sp, r7
 80081f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081fa:	bf00      	nop
 80081fc:	51eb851f 	.word	0x51eb851f

08008200 <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b088      	sub	sp, #32
 8008204:	af00      	add	r7, sp, #0
 8008206:	4603      	mov	r3, r0
 8008208:	71fb      	strb	r3, [r7, #7]
 800820a:	460b      	mov	r3, r1
 800820c:	71bb      	strb	r3, [r7, #6]
 800820e:	4613      	mov	r3, r2
 8008210:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8008212:	797b      	ldrb	r3, [r7, #5]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d901      	bls.n	800821c <tmc_fillCRC8Table+0x1c>
		return 0;
 8008218:	2300      	movs	r3, #0
 800821a:	e09e      	b.n	800835a <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 800821c:	797a      	ldrb	r2, [r7, #5]
 800821e:	4951      	ldr	r1, [pc, #324]	; (8008364 <tmc_fillCRC8Table+0x164>)
 8008220:	4613      	mov	r3, r2
 8008222:	01db      	lsls	r3, r3, #7
 8008224:	4413      	add	r3, r2
 8008226:	005b      	lsls	r3, r3, #1
 8008228:	440b      	add	r3, r1
 800822a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800822e:	79fa      	ldrb	r2, [r7, #7]
 8008230:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 8008232:	797a      	ldrb	r2, [r7, #5]
 8008234:	494b      	ldr	r1, [pc, #300]	; (8008364 <tmc_fillCRC8Table+0x164>)
 8008236:	4613      	mov	r3, r2
 8008238:	01db      	lsls	r3, r3, #7
 800823a:	4413      	add	r3, r2
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	440b      	add	r3, r1
 8008240:	f203 1301 	addw	r3, r3, #257	; 0x101
 8008244:	79ba      	ldrb	r2, [r7, #6]
 8008246:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 8008248:	797a      	ldrb	r2, [r7, #5]
 800824a:	4613      	mov	r3, r2
 800824c:	01db      	lsls	r3, r3, #7
 800824e:	4413      	add	r3, r2
 8008250:	005b      	lsls	r3, r3, #1
 8008252:	4a44      	ldr	r2, [pc, #272]	; (8008364 <tmc_fillCRC8Table+0x164>)
 8008254:	4413      	add	r3, r2
 8008256:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 8008258:	79fb      	ldrb	r3, [r7, #7]
 800825a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800825e:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8008260:	4b41      	ldr	r3, [pc, #260]	; (8008368 <tmc_fillCRC8Table+0x168>)
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	e074      	b.n	8008350 <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 8008266:	79bb      	ldrb	r3, [r7, #6]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d004      	beq.n	8008276 <tmc_fillCRC8Table+0x76>
 800826c:	6978      	ldr	r0, [r7, #20]
 800826e:	f000 f87f 	bl	8008370 <flipBitsInBytes>
 8008272:	4603      	mov	r3, r0
 8008274:	e000      	b.n	8008278 <tmc_fillCRC8Table+0x78>
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 800827a:	2300      	movs	r3, #0
 800827c:	613b      	str	r3, [r7, #16]
 800827e:	e035      	b.n	80082ec <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	0fdb      	lsrs	r3, r3, #31
 8008284:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	005b      	lsls	r3, r3, #1
 800828a:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <tmc_fillCRC8Table+0x9a>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	e000      	b.n	800829c <tmc_fillCRC8Table+0x9c>
 800829a:	2300      	movs	r3, #0
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	4053      	eors	r3, r2
 80082a0:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d002      	beq.n	80082b2 <tmc_fillCRC8Table+0xb2>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	021b      	lsls	r3, r3, #8
 80082b0:	e000      	b.n	80082b4 <tmc_fillCRC8Table+0xb4>
 80082b2:	2300      	movs	r3, #0
 80082b4:	69fa      	ldr	r2, [r7, #28]
 80082b6:	4053      	eors	r3, r2
 80082b8:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d002      	beq.n	80082ca <tmc_fillCRC8Table+0xca>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	041b      	lsls	r3, r3, #16
 80082c8:	e000      	b.n	80082cc <tmc_fillCRC8Table+0xcc>
 80082ca:	2300      	movs	r3, #0
 80082cc:	69fa      	ldr	r2, [r7, #28]
 80082ce:	4053      	eors	r3, r2
 80082d0:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 80082d2:	7afb      	ldrb	r3, [r7, #11]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d002      	beq.n	80082de <tmc_fillCRC8Table+0xde>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	061b      	lsls	r3, r3, #24
 80082dc:	e000      	b.n	80082e0 <tmc_fillCRC8Table+0xe0>
 80082de:	2300      	movs	r3, #0
 80082e0:	69fa      	ldr	r2, [r7, #28]
 80082e2:	4053      	eors	r3, r2
 80082e4:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	3301      	adds	r3, #1
 80082ea:	613b      	str	r3, [r7, #16]
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	2b07      	cmp	r3, #7
 80082f0:	ddc6      	ble.n	8008280 <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 80082f2:	79bb      	ldrb	r3, [r7, #6]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d004      	beq.n	8008302 <tmc_fillCRC8Table+0x102>
 80082f8:	69f8      	ldr	r0, [r7, #28]
 80082fa:	f000 f839 	bl	8008370 <flipBitsInBytes>
 80082fe:	4603      	mov	r3, r0
 8008300:	e000      	b.n	8008304 <tmc_fillCRC8Table+0x104>
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	1c5a      	adds	r2, r3, #1
 800830a:	61ba      	str	r2, [r7, #24]
 800830c:	69fa      	ldr	r2, [r7, #28]
 800830e:	b2d2      	uxtb	r2, r2
 8008310:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	0a1b      	lsrs	r3, r3, #8
 8008316:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	61ba      	str	r2, [r7, #24]
 800831e:	69fa      	ldr	r2, [r7, #28]
 8008320:	b2d2      	uxtb	r2, r2
 8008322:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	0a1b      	lsrs	r3, r3, #8
 8008328:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	1c5a      	adds	r2, r3, #1
 800832e:	61ba      	str	r2, [r7, #24]
 8008330:	69fa      	ldr	r2, [r7, #28]
 8008332:	b2d2      	uxtb	r2, r2
 8008334:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	0a1b      	lsrs	r3, r3, #8
 800833a:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	1c5a      	adds	r2, r3, #1
 8008340:	61ba      	str	r2, [r7, #24]
 8008342:	69fa      	ldr	r2, [r7, #28]
 8008344:	b2d2      	uxtb	r2, r2
 8008346:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 800834e:	617b      	str	r3, [r7, #20]
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	4a06      	ldr	r2, [pc, #24]	; (800836c <tmc_fillCRC8Table+0x16c>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d186      	bne.n	8008266 <tmc_fillCRC8Table+0x66>
	}

	return 1;
 8008358:	2301      	movs	r3, #1
}
 800835a:	4618      	mov	r0, r3
 800835c:	3720      	adds	r7, #32
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	2000092c 	.word	0x2000092c
 8008368:	03020100 	.word	0x03020100
 800836c:	04030200 	.word	0x04030200

08008370 <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	085b      	lsrs	r3, r3, #1
 800837c:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	005b      	lsls	r3, r3, #1
 8008384:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8008388:	4313      	orrs	r3, r2
 800838a:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	089b      	lsrs	r3, r3, #2
 8008390:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 800839c:	4313      	orrs	r3, r2
 800839e:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	091b      	lsrs	r3, r3, #4
 80083a4:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	011b      	lsls	r3, r3, #4
 80083ac:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80083b0:	4313      	orrs	r3, r2
 80083b2:	607b      	str	r3, [r7, #4]

	return value;
 80083b4:	687b      	ldr	r3, [r7, #4]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
	...

080083c4 <tmc2209_init>:

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
}

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b087      	sub	sp, #28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	607b      	str	r3, [r7, #4]
 80083ce:	460b      	mov	r3, r1
 80083d0:	72fb      	strb	r3, [r7, #11]
 80083d2:	4613      	mov	r3, r2
 80083d4:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	7aba      	ldrb	r2, [r7, #10]
 80083da:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	7afa      	ldrb	r2, [r7, #11]
 80083f4:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2200      	movs	r2, #0
 80083fe:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2200      	movs	r2, #0
 8008406:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8008408:	2300      	movs	r3, #0
 800840a:	617b      	str	r3, [r7, #20]
 800840c:	e017      	b.n	800843e <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 800840e:	4a11      	ldr	r2, [pc, #68]	; (8008454 <tmc2209_init+0x90>)
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	4413      	add	r3, r2
 8008414:	7819      	ldrb	r1, [r3, #0]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	4413      	add	r3, r2
 800841c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008420:	460a      	mov	r2, r1
 8008422:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	6a3a      	ldr	r2, [r7, #32]
 800842a:	4413      	add	r3, r2
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	68f9      	ldr	r1, [r7, #12]
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	440b      	add	r3, r1
 8008436:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	3301      	adds	r3, #1
 800843c:	617b      	str	r3, [r7, #20]
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2b7f      	cmp	r3, #127	; 0x7f
 8008442:	d9e4      	bls.n	800840e <tmc2209_init+0x4a>
	}
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop
 8008448:	371c      	adds	r7, #28
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	0800d0b8 	.word	0x0800d0b8

08008458 <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <tmc2209_reset+0x16>
		return false;
 800846a:	2300      	movs	r3, #0
 800846c:	e028      	b.n	80084c0 <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 800846e:	2300      	movs	r3, #0
 8008470:	60fb      	str	r3, [r7, #12]
 8008472:	e019      	b.n	80084a8 <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	4413      	add	r3, r2
 800847a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	f023 0308 	bic.w	r3, r3, #8
 8008484:	b2d9      	uxtb	r1, r3
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	4413      	add	r3, r2
 800848c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008490:	460a      	mov	r2, r1
 8008492:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	2200      	movs	r2, #0
 80084a0:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3301      	adds	r3, #1
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b7f      	cmp	r3, #127	; 0x7f
 80084ac:	d9e2      	bls.n	8008474 <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2201      	movs	r2, #1
 80084b4:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2200      	movs	r2, #0
 80084bc:	705a      	strb	r2, [r3, #1]

	return true;
 80084be:	2301      	movs	r3, #1
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <tmc2209_restore+0x16>
		return false;
 80084de:	2300      	movs	r3, #0
 80084e0:	e008      	b.n	80084f4 <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2202      	movs	r2, #2
 80084e8:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2200      	movs	r2, #0
 80084f0:	705a      	strb	r2, [r3, #1]

	return true;
 80084f2:	2301      	movs	r3, #1
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <__errno>:
 8008500:	4b01      	ldr	r3, [pc, #4]	; (8008508 <__errno+0x8>)
 8008502:	6818      	ldr	r0, [r3, #0]
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	20000018 	.word	0x20000018

0800850c <__libc_init_array>:
 800850c:	b570      	push	{r4, r5, r6, lr}
 800850e:	4d0d      	ldr	r5, [pc, #52]	; (8008544 <__libc_init_array+0x38>)
 8008510:	4c0d      	ldr	r4, [pc, #52]	; (8008548 <__libc_init_array+0x3c>)
 8008512:	1b64      	subs	r4, r4, r5
 8008514:	10a4      	asrs	r4, r4, #2
 8008516:	2600      	movs	r6, #0
 8008518:	42a6      	cmp	r6, r4
 800851a:	d109      	bne.n	8008530 <__libc_init_array+0x24>
 800851c:	4d0b      	ldr	r5, [pc, #44]	; (800854c <__libc_init_array+0x40>)
 800851e:	4c0c      	ldr	r4, [pc, #48]	; (8008550 <__libc_init_array+0x44>)
 8008520:	f004 fcb0 	bl	800ce84 <_init>
 8008524:	1b64      	subs	r4, r4, r5
 8008526:	10a4      	asrs	r4, r4, #2
 8008528:	2600      	movs	r6, #0
 800852a:	42a6      	cmp	r6, r4
 800852c:	d105      	bne.n	800853a <__libc_init_array+0x2e>
 800852e:	bd70      	pop	{r4, r5, r6, pc}
 8008530:	f855 3b04 	ldr.w	r3, [r5], #4
 8008534:	4798      	blx	r3
 8008536:	3601      	adds	r6, #1
 8008538:	e7ee      	b.n	8008518 <__libc_init_array+0xc>
 800853a:	f855 3b04 	ldr.w	r3, [r5], #4
 800853e:	4798      	blx	r3
 8008540:	3601      	adds	r6, #1
 8008542:	e7f2      	b.n	800852a <__libc_init_array+0x1e>
 8008544:	0800d768 	.word	0x0800d768
 8008548:	0800d768 	.word	0x0800d768
 800854c:	0800d768 	.word	0x0800d768
 8008550:	0800d76c 	.word	0x0800d76c

08008554 <memcpy>:
 8008554:	440a      	add	r2, r1
 8008556:	4291      	cmp	r1, r2
 8008558:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800855c:	d100      	bne.n	8008560 <memcpy+0xc>
 800855e:	4770      	bx	lr
 8008560:	b510      	push	{r4, lr}
 8008562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800856a:	4291      	cmp	r1, r2
 800856c:	d1f9      	bne.n	8008562 <memcpy+0xe>
 800856e:	bd10      	pop	{r4, pc}

08008570 <memset>:
 8008570:	4402      	add	r2, r0
 8008572:	4603      	mov	r3, r0
 8008574:	4293      	cmp	r3, r2
 8008576:	d100      	bne.n	800857a <memset+0xa>
 8008578:	4770      	bx	lr
 800857a:	f803 1b01 	strb.w	r1, [r3], #1
 800857e:	e7f9      	b.n	8008574 <memset+0x4>

08008580 <__cvt>:
 8008580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008584:	ec55 4b10 	vmov	r4, r5, d0
 8008588:	2d00      	cmp	r5, #0
 800858a:	460e      	mov	r6, r1
 800858c:	4619      	mov	r1, r3
 800858e:	462b      	mov	r3, r5
 8008590:	bfbb      	ittet	lt
 8008592:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008596:	461d      	movlt	r5, r3
 8008598:	2300      	movge	r3, #0
 800859a:	232d      	movlt	r3, #45	; 0x2d
 800859c:	700b      	strb	r3, [r1, #0]
 800859e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80085a4:	4691      	mov	r9, r2
 80085a6:	f023 0820 	bic.w	r8, r3, #32
 80085aa:	bfbc      	itt	lt
 80085ac:	4622      	movlt	r2, r4
 80085ae:	4614      	movlt	r4, r2
 80085b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085b4:	d005      	beq.n	80085c2 <__cvt+0x42>
 80085b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80085ba:	d100      	bne.n	80085be <__cvt+0x3e>
 80085bc:	3601      	adds	r6, #1
 80085be:	2102      	movs	r1, #2
 80085c0:	e000      	b.n	80085c4 <__cvt+0x44>
 80085c2:	2103      	movs	r1, #3
 80085c4:	ab03      	add	r3, sp, #12
 80085c6:	9301      	str	r3, [sp, #4]
 80085c8:	ab02      	add	r3, sp, #8
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	ec45 4b10 	vmov	d0, r4, r5
 80085d0:	4653      	mov	r3, sl
 80085d2:	4632      	mov	r2, r6
 80085d4:	f000 fd98 	bl	8009108 <_dtoa_r>
 80085d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80085dc:	4607      	mov	r7, r0
 80085de:	d102      	bne.n	80085e6 <__cvt+0x66>
 80085e0:	f019 0f01 	tst.w	r9, #1
 80085e4:	d022      	beq.n	800862c <__cvt+0xac>
 80085e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085ea:	eb07 0906 	add.w	r9, r7, r6
 80085ee:	d110      	bne.n	8008612 <__cvt+0x92>
 80085f0:	783b      	ldrb	r3, [r7, #0]
 80085f2:	2b30      	cmp	r3, #48	; 0x30
 80085f4:	d10a      	bne.n	800860c <__cvt+0x8c>
 80085f6:	2200      	movs	r2, #0
 80085f8:	2300      	movs	r3, #0
 80085fa:	4620      	mov	r0, r4
 80085fc:	4629      	mov	r1, r5
 80085fe:	f7f8 fa83 	bl	8000b08 <__aeabi_dcmpeq>
 8008602:	b918      	cbnz	r0, 800860c <__cvt+0x8c>
 8008604:	f1c6 0601 	rsb	r6, r6, #1
 8008608:	f8ca 6000 	str.w	r6, [sl]
 800860c:	f8da 3000 	ldr.w	r3, [sl]
 8008610:	4499      	add	r9, r3
 8008612:	2200      	movs	r2, #0
 8008614:	2300      	movs	r3, #0
 8008616:	4620      	mov	r0, r4
 8008618:	4629      	mov	r1, r5
 800861a:	f7f8 fa75 	bl	8000b08 <__aeabi_dcmpeq>
 800861e:	b108      	cbz	r0, 8008624 <__cvt+0xa4>
 8008620:	f8cd 900c 	str.w	r9, [sp, #12]
 8008624:	2230      	movs	r2, #48	; 0x30
 8008626:	9b03      	ldr	r3, [sp, #12]
 8008628:	454b      	cmp	r3, r9
 800862a:	d307      	bcc.n	800863c <__cvt+0xbc>
 800862c:	9b03      	ldr	r3, [sp, #12]
 800862e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008630:	1bdb      	subs	r3, r3, r7
 8008632:	4638      	mov	r0, r7
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	b004      	add	sp, #16
 8008638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800863c:	1c59      	adds	r1, r3, #1
 800863e:	9103      	str	r1, [sp, #12]
 8008640:	701a      	strb	r2, [r3, #0]
 8008642:	e7f0      	b.n	8008626 <__cvt+0xa6>

08008644 <__exponent>:
 8008644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008646:	4603      	mov	r3, r0
 8008648:	2900      	cmp	r1, #0
 800864a:	bfb8      	it	lt
 800864c:	4249      	neglt	r1, r1
 800864e:	f803 2b02 	strb.w	r2, [r3], #2
 8008652:	bfb4      	ite	lt
 8008654:	222d      	movlt	r2, #45	; 0x2d
 8008656:	222b      	movge	r2, #43	; 0x2b
 8008658:	2909      	cmp	r1, #9
 800865a:	7042      	strb	r2, [r0, #1]
 800865c:	dd2a      	ble.n	80086b4 <__exponent+0x70>
 800865e:	f10d 0407 	add.w	r4, sp, #7
 8008662:	46a4      	mov	ip, r4
 8008664:	270a      	movs	r7, #10
 8008666:	46a6      	mov	lr, r4
 8008668:	460a      	mov	r2, r1
 800866a:	fb91 f6f7 	sdiv	r6, r1, r7
 800866e:	fb07 1516 	mls	r5, r7, r6, r1
 8008672:	3530      	adds	r5, #48	; 0x30
 8008674:	2a63      	cmp	r2, #99	; 0x63
 8008676:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800867a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800867e:	4631      	mov	r1, r6
 8008680:	dcf1      	bgt.n	8008666 <__exponent+0x22>
 8008682:	3130      	adds	r1, #48	; 0x30
 8008684:	f1ae 0502 	sub.w	r5, lr, #2
 8008688:	f804 1c01 	strb.w	r1, [r4, #-1]
 800868c:	1c44      	adds	r4, r0, #1
 800868e:	4629      	mov	r1, r5
 8008690:	4561      	cmp	r1, ip
 8008692:	d30a      	bcc.n	80086aa <__exponent+0x66>
 8008694:	f10d 0209 	add.w	r2, sp, #9
 8008698:	eba2 020e 	sub.w	r2, r2, lr
 800869c:	4565      	cmp	r5, ip
 800869e:	bf88      	it	hi
 80086a0:	2200      	movhi	r2, #0
 80086a2:	4413      	add	r3, r2
 80086a4:	1a18      	subs	r0, r3, r0
 80086a6:	b003      	add	sp, #12
 80086a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80086b2:	e7ed      	b.n	8008690 <__exponent+0x4c>
 80086b4:	2330      	movs	r3, #48	; 0x30
 80086b6:	3130      	adds	r1, #48	; 0x30
 80086b8:	7083      	strb	r3, [r0, #2]
 80086ba:	70c1      	strb	r1, [r0, #3]
 80086bc:	1d03      	adds	r3, r0, #4
 80086be:	e7f1      	b.n	80086a4 <__exponent+0x60>

080086c0 <_printf_float>:
 80086c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c4:	ed2d 8b02 	vpush	{d8}
 80086c8:	b08d      	sub	sp, #52	; 0x34
 80086ca:	460c      	mov	r4, r1
 80086cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80086d0:	4616      	mov	r6, r2
 80086d2:	461f      	mov	r7, r3
 80086d4:	4605      	mov	r5, r0
 80086d6:	f001 fcbd 	bl	800a054 <_localeconv_r>
 80086da:	f8d0 a000 	ldr.w	sl, [r0]
 80086de:	4650      	mov	r0, sl
 80086e0:	f7f7 fd96 	bl	8000210 <strlen>
 80086e4:	2300      	movs	r3, #0
 80086e6:	930a      	str	r3, [sp, #40]	; 0x28
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	9305      	str	r3, [sp, #20]
 80086ec:	f8d8 3000 	ldr.w	r3, [r8]
 80086f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80086f4:	3307      	adds	r3, #7
 80086f6:	f023 0307 	bic.w	r3, r3, #7
 80086fa:	f103 0208 	add.w	r2, r3, #8
 80086fe:	f8c8 2000 	str.w	r2, [r8]
 8008702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008706:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800870a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800870e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008712:	9307      	str	r3, [sp, #28]
 8008714:	f8cd 8018 	str.w	r8, [sp, #24]
 8008718:	ee08 0a10 	vmov	s16, r0
 800871c:	4b9f      	ldr	r3, [pc, #636]	; (800899c <_printf_float+0x2dc>)
 800871e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008726:	f7f8 fa21 	bl	8000b6c <__aeabi_dcmpun>
 800872a:	bb88      	cbnz	r0, 8008790 <_printf_float+0xd0>
 800872c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008730:	4b9a      	ldr	r3, [pc, #616]	; (800899c <_printf_float+0x2dc>)
 8008732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008736:	f7f8 f9fb 	bl	8000b30 <__aeabi_dcmple>
 800873a:	bb48      	cbnz	r0, 8008790 <_printf_float+0xd0>
 800873c:	2200      	movs	r2, #0
 800873e:	2300      	movs	r3, #0
 8008740:	4640      	mov	r0, r8
 8008742:	4649      	mov	r1, r9
 8008744:	f7f8 f9ea 	bl	8000b1c <__aeabi_dcmplt>
 8008748:	b110      	cbz	r0, 8008750 <_printf_float+0x90>
 800874a:	232d      	movs	r3, #45	; 0x2d
 800874c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008750:	4b93      	ldr	r3, [pc, #588]	; (80089a0 <_printf_float+0x2e0>)
 8008752:	4894      	ldr	r0, [pc, #592]	; (80089a4 <_printf_float+0x2e4>)
 8008754:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008758:	bf94      	ite	ls
 800875a:	4698      	movls	r8, r3
 800875c:	4680      	movhi	r8, r0
 800875e:	2303      	movs	r3, #3
 8008760:	6123      	str	r3, [r4, #16]
 8008762:	9b05      	ldr	r3, [sp, #20]
 8008764:	f023 0204 	bic.w	r2, r3, #4
 8008768:	6022      	str	r2, [r4, #0]
 800876a:	f04f 0900 	mov.w	r9, #0
 800876e:	9700      	str	r7, [sp, #0]
 8008770:	4633      	mov	r3, r6
 8008772:	aa0b      	add	r2, sp, #44	; 0x2c
 8008774:	4621      	mov	r1, r4
 8008776:	4628      	mov	r0, r5
 8008778:	f000 f9d8 	bl	8008b2c <_printf_common>
 800877c:	3001      	adds	r0, #1
 800877e:	f040 8090 	bne.w	80088a2 <_printf_float+0x1e2>
 8008782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008786:	b00d      	add	sp, #52	; 0x34
 8008788:	ecbd 8b02 	vpop	{d8}
 800878c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008790:	4642      	mov	r2, r8
 8008792:	464b      	mov	r3, r9
 8008794:	4640      	mov	r0, r8
 8008796:	4649      	mov	r1, r9
 8008798:	f7f8 f9e8 	bl	8000b6c <__aeabi_dcmpun>
 800879c:	b140      	cbz	r0, 80087b0 <_printf_float+0xf0>
 800879e:	464b      	mov	r3, r9
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	bfbc      	itt	lt
 80087a4:	232d      	movlt	r3, #45	; 0x2d
 80087a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80087aa:	487f      	ldr	r0, [pc, #508]	; (80089a8 <_printf_float+0x2e8>)
 80087ac:	4b7f      	ldr	r3, [pc, #508]	; (80089ac <_printf_float+0x2ec>)
 80087ae:	e7d1      	b.n	8008754 <_printf_float+0x94>
 80087b0:	6863      	ldr	r3, [r4, #4]
 80087b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80087b6:	9206      	str	r2, [sp, #24]
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	d13f      	bne.n	800883c <_printf_float+0x17c>
 80087bc:	2306      	movs	r3, #6
 80087be:	6063      	str	r3, [r4, #4]
 80087c0:	9b05      	ldr	r3, [sp, #20]
 80087c2:	6861      	ldr	r1, [r4, #4]
 80087c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80087c8:	2300      	movs	r3, #0
 80087ca:	9303      	str	r3, [sp, #12]
 80087cc:	ab0a      	add	r3, sp, #40	; 0x28
 80087ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80087d2:	ab09      	add	r3, sp, #36	; 0x24
 80087d4:	ec49 8b10 	vmov	d0, r8, r9
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	6022      	str	r2, [r4, #0]
 80087dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80087e0:	4628      	mov	r0, r5
 80087e2:	f7ff fecd 	bl	8008580 <__cvt>
 80087e6:	9b06      	ldr	r3, [sp, #24]
 80087e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087ea:	2b47      	cmp	r3, #71	; 0x47
 80087ec:	4680      	mov	r8, r0
 80087ee:	d108      	bne.n	8008802 <_printf_float+0x142>
 80087f0:	1cc8      	adds	r0, r1, #3
 80087f2:	db02      	blt.n	80087fa <_printf_float+0x13a>
 80087f4:	6863      	ldr	r3, [r4, #4]
 80087f6:	4299      	cmp	r1, r3
 80087f8:	dd41      	ble.n	800887e <_printf_float+0x1be>
 80087fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80087fe:	fa5f fb8b 	uxtb.w	fp, fp
 8008802:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008806:	d820      	bhi.n	800884a <_printf_float+0x18a>
 8008808:	3901      	subs	r1, #1
 800880a:	465a      	mov	r2, fp
 800880c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008810:	9109      	str	r1, [sp, #36]	; 0x24
 8008812:	f7ff ff17 	bl	8008644 <__exponent>
 8008816:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008818:	1813      	adds	r3, r2, r0
 800881a:	2a01      	cmp	r2, #1
 800881c:	4681      	mov	r9, r0
 800881e:	6123      	str	r3, [r4, #16]
 8008820:	dc02      	bgt.n	8008828 <_printf_float+0x168>
 8008822:	6822      	ldr	r2, [r4, #0]
 8008824:	07d2      	lsls	r2, r2, #31
 8008826:	d501      	bpl.n	800882c <_printf_float+0x16c>
 8008828:	3301      	adds	r3, #1
 800882a:	6123      	str	r3, [r4, #16]
 800882c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008830:	2b00      	cmp	r3, #0
 8008832:	d09c      	beq.n	800876e <_printf_float+0xae>
 8008834:	232d      	movs	r3, #45	; 0x2d
 8008836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800883a:	e798      	b.n	800876e <_printf_float+0xae>
 800883c:	9a06      	ldr	r2, [sp, #24]
 800883e:	2a47      	cmp	r2, #71	; 0x47
 8008840:	d1be      	bne.n	80087c0 <_printf_float+0x100>
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1bc      	bne.n	80087c0 <_printf_float+0x100>
 8008846:	2301      	movs	r3, #1
 8008848:	e7b9      	b.n	80087be <_printf_float+0xfe>
 800884a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800884e:	d118      	bne.n	8008882 <_printf_float+0x1c2>
 8008850:	2900      	cmp	r1, #0
 8008852:	6863      	ldr	r3, [r4, #4]
 8008854:	dd0b      	ble.n	800886e <_printf_float+0x1ae>
 8008856:	6121      	str	r1, [r4, #16]
 8008858:	b913      	cbnz	r3, 8008860 <_printf_float+0x1a0>
 800885a:	6822      	ldr	r2, [r4, #0]
 800885c:	07d0      	lsls	r0, r2, #31
 800885e:	d502      	bpl.n	8008866 <_printf_float+0x1a6>
 8008860:	3301      	adds	r3, #1
 8008862:	440b      	add	r3, r1
 8008864:	6123      	str	r3, [r4, #16]
 8008866:	65a1      	str	r1, [r4, #88]	; 0x58
 8008868:	f04f 0900 	mov.w	r9, #0
 800886c:	e7de      	b.n	800882c <_printf_float+0x16c>
 800886e:	b913      	cbnz	r3, 8008876 <_printf_float+0x1b6>
 8008870:	6822      	ldr	r2, [r4, #0]
 8008872:	07d2      	lsls	r2, r2, #31
 8008874:	d501      	bpl.n	800887a <_printf_float+0x1ba>
 8008876:	3302      	adds	r3, #2
 8008878:	e7f4      	b.n	8008864 <_printf_float+0x1a4>
 800887a:	2301      	movs	r3, #1
 800887c:	e7f2      	b.n	8008864 <_printf_float+0x1a4>
 800887e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008884:	4299      	cmp	r1, r3
 8008886:	db05      	blt.n	8008894 <_printf_float+0x1d4>
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	6121      	str	r1, [r4, #16]
 800888c:	07d8      	lsls	r0, r3, #31
 800888e:	d5ea      	bpl.n	8008866 <_printf_float+0x1a6>
 8008890:	1c4b      	adds	r3, r1, #1
 8008892:	e7e7      	b.n	8008864 <_printf_float+0x1a4>
 8008894:	2900      	cmp	r1, #0
 8008896:	bfd4      	ite	le
 8008898:	f1c1 0202 	rsble	r2, r1, #2
 800889c:	2201      	movgt	r2, #1
 800889e:	4413      	add	r3, r2
 80088a0:	e7e0      	b.n	8008864 <_printf_float+0x1a4>
 80088a2:	6823      	ldr	r3, [r4, #0]
 80088a4:	055a      	lsls	r2, r3, #21
 80088a6:	d407      	bmi.n	80088b8 <_printf_float+0x1f8>
 80088a8:	6923      	ldr	r3, [r4, #16]
 80088aa:	4642      	mov	r2, r8
 80088ac:	4631      	mov	r1, r6
 80088ae:	4628      	mov	r0, r5
 80088b0:	47b8      	blx	r7
 80088b2:	3001      	adds	r0, #1
 80088b4:	d12c      	bne.n	8008910 <_printf_float+0x250>
 80088b6:	e764      	b.n	8008782 <_printf_float+0xc2>
 80088b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088bc:	f240 80e0 	bls.w	8008a80 <_printf_float+0x3c0>
 80088c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088c4:	2200      	movs	r2, #0
 80088c6:	2300      	movs	r3, #0
 80088c8:	f7f8 f91e 	bl	8000b08 <__aeabi_dcmpeq>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d034      	beq.n	800893a <_printf_float+0x27a>
 80088d0:	4a37      	ldr	r2, [pc, #220]	; (80089b0 <_printf_float+0x2f0>)
 80088d2:	2301      	movs	r3, #1
 80088d4:	4631      	mov	r1, r6
 80088d6:	4628      	mov	r0, r5
 80088d8:	47b8      	blx	r7
 80088da:	3001      	adds	r0, #1
 80088dc:	f43f af51 	beq.w	8008782 <_printf_float+0xc2>
 80088e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088e4:	429a      	cmp	r2, r3
 80088e6:	db02      	blt.n	80088ee <_printf_float+0x22e>
 80088e8:	6823      	ldr	r3, [r4, #0]
 80088ea:	07d8      	lsls	r0, r3, #31
 80088ec:	d510      	bpl.n	8008910 <_printf_float+0x250>
 80088ee:	ee18 3a10 	vmov	r3, s16
 80088f2:	4652      	mov	r2, sl
 80088f4:	4631      	mov	r1, r6
 80088f6:	4628      	mov	r0, r5
 80088f8:	47b8      	blx	r7
 80088fa:	3001      	adds	r0, #1
 80088fc:	f43f af41 	beq.w	8008782 <_printf_float+0xc2>
 8008900:	f04f 0800 	mov.w	r8, #0
 8008904:	f104 091a 	add.w	r9, r4, #26
 8008908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800890a:	3b01      	subs	r3, #1
 800890c:	4543      	cmp	r3, r8
 800890e:	dc09      	bgt.n	8008924 <_printf_float+0x264>
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	079b      	lsls	r3, r3, #30
 8008914:	f100 8105 	bmi.w	8008b22 <_printf_float+0x462>
 8008918:	68e0      	ldr	r0, [r4, #12]
 800891a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800891c:	4298      	cmp	r0, r3
 800891e:	bfb8      	it	lt
 8008920:	4618      	movlt	r0, r3
 8008922:	e730      	b.n	8008786 <_printf_float+0xc6>
 8008924:	2301      	movs	r3, #1
 8008926:	464a      	mov	r2, r9
 8008928:	4631      	mov	r1, r6
 800892a:	4628      	mov	r0, r5
 800892c:	47b8      	blx	r7
 800892e:	3001      	adds	r0, #1
 8008930:	f43f af27 	beq.w	8008782 <_printf_float+0xc2>
 8008934:	f108 0801 	add.w	r8, r8, #1
 8008938:	e7e6      	b.n	8008908 <_printf_float+0x248>
 800893a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800893c:	2b00      	cmp	r3, #0
 800893e:	dc39      	bgt.n	80089b4 <_printf_float+0x2f4>
 8008940:	4a1b      	ldr	r2, [pc, #108]	; (80089b0 <_printf_float+0x2f0>)
 8008942:	2301      	movs	r3, #1
 8008944:	4631      	mov	r1, r6
 8008946:	4628      	mov	r0, r5
 8008948:	47b8      	blx	r7
 800894a:	3001      	adds	r0, #1
 800894c:	f43f af19 	beq.w	8008782 <_printf_float+0xc2>
 8008950:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008954:	4313      	orrs	r3, r2
 8008956:	d102      	bne.n	800895e <_printf_float+0x29e>
 8008958:	6823      	ldr	r3, [r4, #0]
 800895a:	07d9      	lsls	r1, r3, #31
 800895c:	d5d8      	bpl.n	8008910 <_printf_float+0x250>
 800895e:	ee18 3a10 	vmov	r3, s16
 8008962:	4652      	mov	r2, sl
 8008964:	4631      	mov	r1, r6
 8008966:	4628      	mov	r0, r5
 8008968:	47b8      	blx	r7
 800896a:	3001      	adds	r0, #1
 800896c:	f43f af09 	beq.w	8008782 <_printf_float+0xc2>
 8008970:	f04f 0900 	mov.w	r9, #0
 8008974:	f104 0a1a 	add.w	sl, r4, #26
 8008978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800897a:	425b      	negs	r3, r3
 800897c:	454b      	cmp	r3, r9
 800897e:	dc01      	bgt.n	8008984 <_printf_float+0x2c4>
 8008980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008982:	e792      	b.n	80088aa <_printf_float+0x1ea>
 8008984:	2301      	movs	r3, #1
 8008986:	4652      	mov	r2, sl
 8008988:	4631      	mov	r1, r6
 800898a:	4628      	mov	r0, r5
 800898c:	47b8      	blx	r7
 800898e:	3001      	adds	r0, #1
 8008990:	f43f aef7 	beq.w	8008782 <_printf_float+0xc2>
 8008994:	f109 0901 	add.w	r9, r9, #1
 8008998:	e7ee      	b.n	8008978 <_printf_float+0x2b8>
 800899a:	bf00      	nop
 800899c:	7fefffff 	.word	0x7fefffff
 80089a0:	0800d13c 	.word	0x0800d13c
 80089a4:	0800d140 	.word	0x0800d140
 80089a8:	0800d148 	.word	0x0800d148
 80089ac:	0800d144 	.word	0x0800d144
 80089b0:	0800d14c 	.word	0x0800d14c
 80089b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089b8:	429a      	cmp	r2, r3
 80089ba:	bfa8      	it	ge
 80089bc:	461a      	movge	r2, r3
 80089be:	2a00      	cmp	r2, #0
 80089c0:	4691      	mov	r9, r2
 80089c2:	dc37      	bgt.n	8008a34 <_printf_float+0x374>
 80089c4:	f04f 0b00 	mov.w	fp, #0
 80089c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089cc:	f104 021a 	add.w	r2, r4, #26
 80089d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089d2:	9305      	str	r3, [sp, #20]
 80089d4:	eba3 0309 	sub.w	r3, r3, r9
 80089d8:	455b      	cmp	r3, fp
 80089da:	dc33      	bgt.n	8008a44 <_printf_float+0x384>
 80089dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089e0:	429a      	cmp	r2, r3
 80089e2:	db3b      	blt.n	8008a5c <_printf_float+0x39c>
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	07da      	lsls	r2, r3, #31
 80089e8:	d438      	bmi.n	8008a5c <_printf_float+0x39c>
 80089ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ec:	9a05      	ldr	r2, [sp, #20]
 80089ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089f0:	1a9a      	subs	r2, r3, r2
 80089f2:	eba3 0901 	sub.w	r9, r3, r1
 80089f6:	4591      	cmp	r9, r2
 80089f8:	bfa8      	it	ge
 80089fa:	4691      	movge	r9, r2
 80089fc:	f1b9 0f00 	cmp.w	r9, #0
 8008a00:	dc35      	bgt.n	8008a6e <_printf_float+0x3ae>
 8008a02:	f04f 0800 	mov.w	r8, #0
 8008a06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a0a:	f104 0a1a 	add.w	sl, r4, #26
 8008a0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a12:	1a9b      	subs	r3, r3, r2
 8008a14:	eba3 0309 	sub.w	r3, r3, r9
 8008a18:	4543      	cmp	r3, r8
 8008a1a:	f77f af79 	ble.w	8008910 <_printf_float+0x250>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	4652      	mov	r2, sl
 8008a22:	4631      	mov	r1, r6
 8008a24:	4628      	mov	r0, r5
 8008a26:	47b8      	blx	r7
 8008a28:	3001      	adds	r0, #1
 8008a2a:	f43f aeaa 	beq.w	8008782 <_printf_float+0xc2>
 8008a2e:	f108 0801 	add.w	r8, r8, #1
 8008a32:	e7ec      	b.n	8008a0e <_printf_float+0x34e>
 8008a34:	4613      	mov	r3, r2
 8008a36:	4631      	mov	r1, r6
 8008a38:	4642      	mov	r2, r8
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	47b8      	blx	r7
 8008a3e:	3001      	adds	r0, #1
 8008a40:	d1c0      	bne.n	80089c4 <_printf_float+0x304>
 8008a42:	e69e      	b.n	8008782 <_printf_float+0xc2>
 8008a44:	2301      	movs	r3, #1
 8008a46:	4631      	mov	r1, r6
 8008a48:	4628      	mov	r0, r5
 8008a4a:	9205      	str	r2, [sp, #20]
 8008a4c:	47b8      	blx	r7
 8008a4e:	3001      	adds	r0, #1
 8008a50:	f43f ae97 	beq.w	8008782 <_printf_float+0xc2>
 8008a54:	9a05      	ldr	r2, [sp, #20]
 8008a56:	f10b 0b01 	add.w	fp, fp, #1
 8008a5a:	e7b9      	b.n	80089d0 <_printf_float+0x310>
 8008a5c:	ee18 3a10 	vmov	r3, s16
 8008a60:	4652      	mov	r2, sl
 8008a62:	4631      	mov	r1, r6
 8008a64:	4628      	mov	r0, r5
 8008a66:	47b8      	blx	r7
 8008a68:	3001      	adds	r0, #1
 8008a6a:	d1be      	bne.n	80089ea <_printf_float+0x32a>
 8008a6c:	e689      	b.n	8008782 <_printf_float+0xc2>
 8008a6e:	9a05      	ldr	r2, [sp, #20]
 8008a70:	464b      	mov	r3, r9
 8008a72:	4442      	add	r2, r8
 8008a74:	4631      	mov	r1, r6
 8008a76:	4628      	mov	r0, r5
 8008a78:	47b8      	blx	r7
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	d1c1      	bne.n	8008a02 <_printf_float+0x342>
 8008a7e:	e680      	b.n	8008782 <_printf_float+0xc2>
 8008a80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a82:	2a01      	cmp	r2, #1
 8008a84:	dc01      	bgt.n	8008a8a <_printf_float+0x3ca>
 8008a86:	07db      	lsls	r3, r3, #31
 8008a88:	d538      	bpl.n	8008afc <_printf_float+0x43c>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	4642      	mov	r2, r8
 8008a8e:	4631      	mov	r1, r6
 8008a90:	4628      	mov	r0, r5
 8008a92:	47b8      	blx	r7
 8008a94:	3001      	adds	r0, #1
 8008a96:	f43f ae74 	beq.w	8008782 <_printf_float+0xc2>
 8008a9a:	ee18 3a10 	vmov	r3, s16
 8008a9e:	4652      	mov	r2, sl
 8008aa0:	4631      	mov	r1, r6
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	47b8      	blx	r7
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	f43f ae6b 	beq.w	8008782 <_printf_float+0xc2>
 8008aac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f7f8 f828 	bl	8000b08 <__aeabi_dcmpeq>
 8008ab8:	b9d8      	cbnz	r0, 8008af2 <_printf_float+0x432>
 8008aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008abc:	f108 0201 	add.w	r2, r8, #1
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	47b8      	blx	r7
 8008ac8:	3001      	adds	r0, #1
 8008aca:	d10e      	bne.n	8008aea <_printf_float+0x42a>
 8008acc:	e659      	b.n	8008782 <_printf_float+0xc2>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	4652      	mov	r2, sl
 8008ad2:	4631      	mov	r1, r6
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	47b8      	blx	r7
 8008ad8:	3001      	adds	r0, #1
 8008ada:	f43f ae52 	beq.w	8008782 <_printf_float+0xc2>
 8008ade:	f108 0801 	add.w	r8, r8, #1
 8008ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	4543      	cmp	r3, r8
 8008ae8:	dcf1      	bgt.n	8008ace <_printf_float+0x40e>
 8008aea:	464b      	mov	r3, r9
 8008aec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008af0:	e6dc      	b.n	80088ac <_printf_float+0x1ec>
 8008af2:	f04f 0800 	mov.w	r8, #0
 8008af6:	f104 0a1a 	add.w	sl, r4, #26
 8008afa:	e7f2      	b.n	8008ae2 <_printf_float+0x422>
 8008afc:	2301      	movs	r3, #1
 8008afe:	4642      	mov	r2, r8
 8008b00:	e7df      	b.n	8008ac2 <_printf_float+0x402>
 8008b02:	2301      	movs	r3, #1
 8008b04:	464a      	mov	r2, r9
 8008b06:	4631      	mov	r1, r6
 8008b08:	4628      	mov	r0, r5
 8008b0a:	47b8      	blx	r7
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	f43f ae38 	beq.w	8008782 <_printf_float+0xc2>
 8008b12:	f108 0801 	add.w	r8, r8, #1
 8008b16:	68e3      	ldr	r3, [r4, #12]
 8008b18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b1a:	1a5b      	subs	r3, r3, r1
 8008b1c:	4543      	cmp	r3, r8
 8008b1e:	dcf0      	bgt.n	8008b02 <_printf_float+0x442>
 8008b20:	e6fa      	b.n	8008918 <_printf_float+0x258>
 8008b22:	f04f 0800 	mov.w	r8, #0
 8008b26:	f104 0919 	add.w	r9, r4, #25
 8008b2a:	e7f4      	b.n	8008b16 <_printf_float+0x456>

08008b2c <_printf_common>:
 8008b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b30:	4616      	mov	r6, r2
 8008b32:	4699      	mov	r9, r3
 8008b34:	688a      	ldr	r2, [r1, #8]
 8008b36:	690b      	ldr	r3, [r1, #16]
 8008b38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	bfb8      	it	lt
 8008b40:	4613      	movlt	r3, r2
 8008b42:	6033      	str	r3, [r6, #0]
 8008b44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b48:	4607      	mov	r7, r0
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	b10a      	cbz	r2, 8008b52 <_printf_common+0x26>
 8008b4e:	3301      	adds	r3, #1
 8008b50:	6033      	str	r3, [r6, #0]
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	0699      	lsls	r1, r3, #26
 8008b56:	bf42      	ittt	mi
 8008b58:	6833      	ldrmi	r3, [r6, #0]
 8008b5a:	3302      	addmi	r3, #2
 8008b5c:	6033      	strmi	r3, [r6, #0]
 8008b5e:	6825      	ldr	r5, [r4, #0]
 8008b60:	f015 0506 	ands.w	r5, r5, #6
 8008b64:	d106      	bne.n	8008b74 <_printf_common+0x48>
 8008b66:	f104 0a19 	add.w	sl, r4, #25
 8008b6a:	68e3      	ldr	r3, [r4, #12]
 8008b6c:	6832      	ldr	r2, [r6, #0]
 8008b6e:	1a9b      	subs	r3, r3, r2
 8008b70:	42ab      	cmp	r3, r5
 8008b72:	dc26      	bgt.n	8008bc2 <_printf_common+0x96>
 8008b74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b78:	1e13      	subs	r3, r2, #0
 8008b7a:	6822      	ldr	r2, [r4, #0]
 8008b7c:	bf18      	it	ne
 8008b7e:	2301      	movne	r3, #1
 8008b80:	0692      	lsls	r2, r2, #26
 8008b82:	d42b      	bmi.n	8008bdc <_printf_common+0xb0>
 8008b84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b88:	4649      	mov	r1, r9
 8008b8a:	4638      	mov	r0, r7
 8008b8c:	47c0      	blx	r8
 8008b8e:	3001      	adds	r0, #1
 8008b90:	d01e      	beq.n	8008bd0 <_printf_common+0xa4>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	68e5      	ldr	r5, [r4, #12]
 8008b96:	6832      	ldr	r2, [r6, #0]
 8008b98:	f003 0306 	and.w	r3, r3, #6
 8008b9c:	2b04      	cmp	r3, #4
 8008b9e:	bf08      	it	eq
 8008ba0:	1aad      	subeq	r5, r5, r2
 8008ba2:	68a3      	ldr	r3, [r4, #8]
 8008ba4:	6922      	ldr	r2, [r4, #16]
 8008ba6:	bf0c      	ite	eq
 8008ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bac:	2500      	movne	r5, #0
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	bfc4      	itt	gt
 8008bb2:	1a9b      	subgt	r3, r3, r2
 8008bb4:	18ed      	addgt	r5, r5, r3
 8008bb6:	2600      	movs	r6, #0
 8008bb8:	341a      	adds	r4, #26
 8008bba:	42b5      	cmp	r5, r6
 8008bbc:	d11a      	bne.n	8008bf4 <_printf_common+0xc8>
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	e008      	b.n	8008bd4 <_printf_common+0xa8>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	4652      	mov	r2, sl
 8008bc6:	4649      	mov	r1, r9
 8008bc8:	4638      	mov	r0, r7
 8008bca:	47c0      	blx	r8
 8008bcc:	3001      	adds	r0, #1
 8008bce:	d103      	bne.n	8008bd8 <_printf_common+0xac>
 8008bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bd8:	3501      	adds	r5, #1
 8008bda:	e7c6      	b.n	8008b6a <_printf_common+0x3e>
 8008bdc:	18e1      	adds	r1, r4, r3
 8008bde:	1c5a      	adds	r2, r3, #1
 8008be0:	2030      	movs	r0, #48	; 0x30
 8008be2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008be6:	4422      	add	r2, r4
 8008be8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bf0:	3302      	adds	r3, #2
 8008bf2:	e7c7      	b.n	8008b84 <_printf_common+0x58>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	4622      	mov	r2, r4
 8008bf8:	4649      	mov	r1, r9
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	47c0      	blx	r8
 8008bfe:	3001      	adds	r0, #1
 8008c00:	d0e6      	beq.n	8008bd0 <_printf_common+0xa4>
 8008c02:	3601      	adds	r6, #1
 8008c04:	e7d9      	b.n	8008bba <_printf_common+0x8e>
	...

08008c08 <_printf_i>:
 8008c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c0c:	7e0f      	ldrb	r7, [r1, #24]
 8008c0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c10:	2f78      	cmp	r7, #120	; 0x78
 8008c12:	4691      	mov	r9, r2
 8008c14:	4680      	mov	r8, r0
 8008c16:	460c      	mov	r4, r1
 8008c18:	469a      	mov	sl, r3
 8008c1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c1e:	d807      	bhi.n	8008c30 <_printf_i+0x28>
 8008c20:	2f62      	cmp	r7, #98	; 0x62
 8008c22:	d80a      	bhi.n	8008c3a <_printf_i+0x32>
 8008c24:	2f00      	cmp	r7, #0
 8008c26:	f000 80d8 	beq.w	8008dda <_printf_i+0x1d2>
 8008c2a:	2f58      	cmp	r7, #88	; 0x58
 8008c2c:	f000 80a3 	beq.w	8008d76 <_printf_i+0x16e>
 8008c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c38:	e03a      	b.n	8008cb0 <_printf_i+0xa8>
 8008c3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c3e:	2b15      	cmp	r3, #21
 8008c40:	d8f6      	bhi.n	8008c30 <_printf_i+0x28>
 8008c42:	a101      	add	r1, pc, #4	; (adr r1, 8008c48 <_printf_i+0x40>)
 8008c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c48:	08008ca1 	.word	0x08008ca1
 8008c4c:	08008cb5 	.word	0x08008cb5
 8008c50:	08008c31 	.word	0x08008c31
 8008c54:	08008c31 	.word	0x08008c31
 8008c58:	08008c31 	.word	0x08008c31
 8008c5c:	08008c31 	.word	0x08008c31
 8008c60:	08008cb5 	.word	0x08008cb5
 8008c64:	08008c31 	.word	0x08008c31
 8008c68:	08008c31 	.word	0x08008c31
 8008c6c:	08008c31 	.word	0x08008c31
 8008c70:	08008c31 	.word	0x08008c31
 8008c74:	08008dc1 	.word	0x08008dc1
 8008c78:	08008ce5 	.word	0x08008ce5
 8008c7c:	08008da3 	.word	0x08008da3
 8008c80:	08008c31 	.word	0x08008c31
 8008c84:	08008c31 	.word	0x08008c31
 8008c88:	08008de3 	.word	0x08008de3
 8008c8c:	08008c31 	.word	0x08008c31
 8008c90:	08008ce5 	.word	0x08008ce5
 8008c94:	08008c31 	.word	0x08008c31
 8008c98:	08008c31 	.word	0x08008c31
 8008c9c:	08008dab 	.word	0x08008dab
 8008ca0:	682b      	ldr	r3, [r5, #0]
 8008ca2:	1d1a      	adds	r2, r3, #4
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	602a      	str	r2, [r5, #0]
 8008ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e0a3      	b.n	8008dfc <_printf_i+0x1f4>
 8008cb4:	6820      	ldr	r0, [r4, #0]
 8008cb6:	6829      	ldr	r1, [r5, #0]
 8008cb8:	0606      	lsls	r6, r0, #24
 8008cba:	f101 0304 	add.w	r3, r1, #4
 8008cbe:	d50a      	bpl.n	8008cd6 <_printf_i+0xce>
 8008cc0:	680e      	ldr	r6, [r1, #0]
 8008cc2:	602b      	str	r3, [r5, #0]
 8008cc4:	2e00      	cmp	r6, #0
 8008cc6:	da03      	bge.n	8008cd0 <_printf_i+0xc8>
 8008cc8:	232d      	movs	r3, #45	; 0x2d
 8008cca:	4276      	negs	r6, r6
 8008ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cd0:	485e      	ldr	r0, [pc, #376]	; (8008e4c <_printf_i+0x244>)
 8008cd2:	230a      	movs	r3, #10
 8008cd4:	e019      	b.n	8008d0a <_printf_i+0x102>
 8008cd6:	680e      	ldr	r6, [r1, #0]
 8008cd8:	602b      	str	r3, [r5, #0]
 8008cda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cde:	bf18      	it	ne
 8008ce0:	b236      	sxthne	r6, r6
 8008ce2:	e7ef      	b.n	8008cc4 <_printf_i+0xbc>
 8008ce4:	682b      	ldr	r3, [r5, #0]
 8008ce6:	6820      	ldr	r0, [r4, #0]
 8008ce8:	1d19      	adds	r1, r3, #4
 8008cea:	6029      	str	r1, [r5, #0]
 8008cec:	0601      	lsls	r1, r0, #24
 8008cee:	d501      	bpl.n	8008cf4 <_printf_i+0xec>
 8008cf0:	681e      	ldr	r6, [r3, #0]
 8008cf2:	e002      	b.n	8008cfa <_printf_i+0xf2>
 8008cf4:	0646      	lsls	r6, r0, #25
 8008cf6:	d5fb      	bpl.n	8008cf0 <_printf_i+0xe8>
 8008cf8:	881e      	ldrh	r6, [r3, #0]
 8008cfa:	4854      	ldr	r0, [pc, #336]	; (8008e4c <_printf_i+0x244>)
 8008cfc:	2f6f      	cmp	r7, #111	; 0x6f
 8008cfe:	bf0c      	ite	eq
 8008d00:	2308      	moveq	r3, #8
 8008d02:	230a      	movne	r3, #10
 8008d04:	2100      	movs	r1, #0
 8008d06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d0a:	6865      	ldr	r5, [r4, #4]
 8008d0c:	60a5      	str	r5, [r4, #8]
 8008d0e:	2d00      	cmp	r5, #0
 8008d10:	bfa2      	ittt	ge
 8008d12:	6821      	ldrge	r1, [r4, #0]
 8008d14:	f021 0104 	bicge.w	r1, r1, #4
 8008d18:	6021      	strge	r1, [r4, #0]
 8008d1a:	b90e      	cbnz	r6, 8008d20 <_printf_i+0x118>
 8008d1c:	2d00      	cmp	r5, #0
 8008d1e:	d04d      	beq.n	8008dbc <_printf_i+0x1b4>
 8008d20:	4615      	mov	r5, r2
 8008d22:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d26:	fb03 6711 	mls	r7, r3, r1, r6
 8008d2a:	5dc7      	ldrb	r7, [r0, r7]
 8008d2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d30:	4637      	mov	r7, r6
 8008d32:	42bb      	cmp	r3, r7
 8008d34:	460e      	mov	r6, r1
 8008d36:	d9f4      	bls.n	8008d22 <_printf_i+0x11a>
 8008d38:	2b08      	cmp	r3, #8
 8008d3a:	d10b      	bne.n	8008d54 <_printf_i+0x14c>
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	07de      	lsls	r6, r3, #31
 8008d40:	d508      	bpl.n	8008d54 <_printf_i+0x14c>
 8008d42:	6923      	ldr	r3, [r4, #16]
 8008d44:	6861      	ldr	r1, [r4, #4]
 8008d46:	4299      	cmp	r1, r3
 8008d48:	bfde      	ittt	le
 8008d4a:	2330      	movle	r3, #48	; 0x30
 8008d4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d50:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008d54:	1b52      	subs	r2, r2, r5
 8008d56:	6122      	str	r2, [r4, #16]
 8008d58:	f8cd a000 	str.w	sl, [sp]
 8008d5c:	464b      	mov	r3, r9
 8008d5e:	aa03      	add	r2, sp, #12
 8008d60:	4621      	mov	r1, r4
 8008d62:	4640      	mov	r0, r8
 8008d64:	f7ff fee2 	bl	8008b2c <_printf_common>
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d14c      	bne.n	8008e06 <_printf_i+0x1fe>
 8008d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d70:	b004      	add	sp, #16
 8008d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d76:	4835      	ldr	r0, [pc, #212]	; (8008e4c <_printf_i+0x244>)
 8008d78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d7c:	6829      	ldr	r1, [r5, #0]
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d84:	6029      	str	r1, [r5, #0]
 8008d86:	061d      	lsls	r5, r3, #24
 8008d88:	d514      	bpl.n	8008db4 <_printf_i+0x1ac>
 8008d8a:	07df      	lsls	r7, r3, #31
 8008d8c:	bf44      	itt	mi
 8008d8e:	f043 0320 	orrmi.w	r3, r3, #32
 8008d92:	6023      	strmi	r3, [r4, #0]
 8008d94:	b91e      	cbnz	r6, 8008d9e <_printf_i+0x196>
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	f023 0320 	bic.w	r3, r3, #32
 8008d9c:	6023      	str	r3, [r4, #0]
 8008d9e:	2310      	movs	r3, #16
 8008da0:	e7b0      	b.n	8008d04 <_printf_i+0xfc>
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	f043 0320 	orr.w	r3, r3, #32
 8008da8:	6023      	str	r3, [r4, #0]
 8008daa:	2378      	movs	r3, #120	; 0x78
 8008dac:	4828      	ldr	r0, [pc, #160]	; (8008e50 <_printf_i+0x248>)
 8008dae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008db2:	e7e3      	b.n	8008d7c <_printf_i+0x174>
 8008db4:	0659      	lsls	r1, r3, #25
 8008db6:	bf48      	it	mi
 8008db8:	b2b6      	uxthmi	r6, r6
 8008dba:	e7e6      	b.n	8008d8a <_printf_i+0x182>
 8008dbc:	4615      	mov	r5, r2
 8008dbe:	e7bb      	b.n	8008d38 <_printf_i+0x130>
 8008dc0:	682b      	ldr	r3, [r5, #0]
 8008dc2:	6826      	ldr	r6, [r4, #0]
 8008dc4:	6961      	ldr	r1, [r4, #20]
 8008dc6:	1d18      	adds	r0, r3, #4
 8008dc8:	6028      	str	r0, [r5, #0]
 8008dca:	0635      	lsls	r5, r6, #24
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	d501      	bpl.n	8008dd4 <_printf_i+0x1cc>
 8008dd0:	6019      	str	r1, [r3, #0]
 8008dd2:	e002      	b.n	8008dda <_printf_i+0x1d2>
 8008dd4:	0670      	lsls	r0, r6, #25
 8008dd6:	d5fb      	bpl.n	8008dd0 <_printf_i+0x1c8>
 8008dd8:	8019      	strh	r1, [r3, #0]
 8008dda:	2300      	movs	r3, #0
 8008ddc:	6123      	str	r3, [r4, #16]
 8008dde:	4615      	mov	r5, r2
 8008de0:	e7ba      	b.n	8008d58 <_printf_i+0x150>
 8008de2:	682b      	ldr	r3, [r5, #0]
 8008de4:	1d1a      	adds	r2, r3, #4
 8008de6:	602a      	str	r2, [r5, #0]
 8008de8:	681d      	ldr	r5, [r3, #0]
 8008dea:	6862      	ldr	r2, [r4, #4]
 8008dec:	2100      	movs	r1, #0
 8008dee:	4628      	mov	r0, r5
 8008df0:	f7f7 fa16 	bl	8000220 <memchr>
 8008df4:	b108      	cbz	r0, 8008dfa <_printf_i+0x1f2>
 8008df6:	1b40      	subs	r0, r0, r5
 8008df8:	6060      	str	r0, [r4, #4]
 8008dfa:	6863      	ldr	r3, [r4, #4]
 8008dfc:	6123      	str	r3, [r4, #16]
 8008dfe:	2300      	movs	r3, #0
 8008e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e04:	e7a8      	b.n	8008d58 <_printf_i+0x150>
 8008e06:	6923      	ldr	r3, [r4, #16]
 8008e08:	462a      	mov	r2, r5
 8008e0a:	4649      	mov	r1, r9
 8008e0c:	4640      	mov	r0, r8
 8008e0e:	47d0      	blx	sl
 8008e10:	3001      	adds	r0, #1
 8008e12:	d0ab      	beq.n	8008d6c <_printf_i+0x164>
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	079b      	lsls	r3, r3, #30
 8008e18:	d413      	bmi.n	8008e42 <_printf_i+0x23a>
 8008e1a:	68e0      	ldr	r0, [r4, #12]
 8008e1c:	9b03      	ldr	r3, [sp, #12]
 8008e1e:	4298      	cmp	r0, r3
 8008e20:	bfb8      	it	lt
 8008e22:	4618      	movlt	r0, r3
 8008e24:	e7a4      	b.n	8008d70 <_printf_i+0x168>
 8008e26:	2301      	movs	r3, #1
 8008e28:	4632      	mov	r2, r6
 8008e2a:	4649      	mov	r1, r9
 8008e2c:	4640      	mov	r0, r8
 8008e2e:	47d0      	blx	sl
 8008e30:	3001      	adds	r0, #1
 8008e32:	d09b      	beq.n	8008d6c <_printf_i+0x164>
 8008e34:	3501      	adds	r5, #1
 8008e36:	68e3      	ldr	r3, [r4, #12]
 8008e38:	9903      	ldr	r1, [sp, #12]
 8008e3a:	1a5b      	subs	r3, r3, r1
 8008e3c:	42ab      	cmp	r3, r5
 8008e3e:	dcf2      	bgt.n	8008e26 <_printf_i+0x21e>
 8008e40:	e7eb      	b.n	8008e1a <_printf_i+0x212>
 8008e42:	2500      	movs	r5, #0
 8008e44:	f104 0619 	add.w	r6, r4, #25
 8008e48:	e7f5      	b.n	8008e36 <_printf_i+0x22e>
 8008e4a:	bf00      	nop
 8008e4c:	0800d14e 	.word	0x0800d14e
 8008e50:	0800d15f 	.word	0x0800d15f

08008e54 <setbuf>:
 8008e54:	2900      	cmp	r1, #0
 8008e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e5a:	bf0c      	ite	eq
 8008e5c:	2202      	moveq	r2, #2
 8008e5e:	2200      	movne	r2, #0
 8008e60:	f000 b800 	b.w	8008e64 <setvbuf>

08008e64 <setvbuf>:
 8008e64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e68:	461d      	mov	r5, r3
 8008e6a:	4b5d      	ldr	r3, [pc, #372]	; (8008fe0 <setvbuf+0x17c>)
 8008e6c:	681f      	ldr	r7, [r3, #0]
 8008e6e:	4604      	mov	r4, r0
 8008e70:	460e      	mov	r6, r1
 8008e72:	4690      	mov	r8, r2
 8008e74:	b127      	cbz	r7, 8008e80 <setvbuf+0x1c>
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	b913      	cbnz	r3, 8008e80 <setvbuf+0x1c>
 8008e7a:	4638      	mov	r0, r7
 8008e7c:	f001 f84c 	bl	8009f18 <__sinit>
 8008e80:	4b58      	ldr	r3, [pc, #352]	; (8008fe4 <setvbuf+0x180>)
 8008e82:	429c      	cmp	r4, r3
 8008e84:	d167      	bne.n	8008f56 <setvbuf+0xf2>
 8008e86:	687c      	ldr	r4, [r7, #4]
 8008e88:	f1b8 0f02 	cmp.w	r8, #2
 8008e8c:	d006      	beq.n	8008e9c <setvbuf+0x38>
 8008e8e:	f1b8 0f01 	cmp.w	r8, #1
 8008e92:	f200 809f 	bhi.w	8008fd4 <setvbuf+0x170>
 8008e96:	2d00      	cmp	r5, #0
 8008e98:	f2c0 809c 	blt.w	8008fd4 <setvbuf+0x170>
 8008e9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e9e:	07db      	lsls	r3, r3, #31
 8008ea0:	d405      	bmi.n	8008eae <setvbuf+0x4a>
 8008ea2:	89a3      	ldrh	r3, [r4, #12]
 8008ea4:	0598      	lsls	r0, r3, #22
 8008ea6:	d402      	bmi.n	8008eae <setvbuf+0x4a>
 8008ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eaa:	f001 f8d8 	bl	800a05e <__retarget_lock_acquire_recursive>
 8008eae:	4621      	mov	r1, r4
 8008eb0:	4638      	mov	r0, r7
 8008eb2:	f000 ff9d 	bl	8009df0 <_fflush_r>
 8008eb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008eb8:	b141      	cbz	r1, 8008ecc <setvbuf+0x68>
 8008eba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ebe:	4299      	cmp	r1, r3
 8008ec0:	d002      	beq.n	8008ec8 <setvbuf+0x64>
 8008ec2:	4638      	mov	r0, r7
 8008ec4:	f001 fcd4 	bl	800a870 <_free_r>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	6363      	str	r3, [r4, #52]	; 0x34
 8008ecc:	2300      	movs	r3, #0
 8008ece:	61a3      	str	r3, [r4, #24]
 8008ed0:	6063      	str	r3, [r4, #4]
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	0619      	lsls	r1, r3, #24
 8008ed6:	d503      	bpl.n	8008ee0 <setvbuf+0x7c>
 8008ed8:	6921      	ldr	r1, [r4, #16]
 8008eda:	4638      	mov	r0, r7
 8008edc:	f001 fcc8 	bl	800a870 <_free_r>
 8008ee0:	89a3      	ldrh	r3, [r4, #12]
 8008ee2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008ee6:	f023 0303 	bic.w	r3, r3, #3
 8008eea:	f1b8 0f02 	cmp.w	r8, #2
 8008eee:	81a3      	strh	r3, [r4, #12]
 8008ef0:	d06c      	beq.n	8008fcc <setvbuf+0x168>
 8008ef2:	ab01      	add	r3, sp, #4
 8008ef4:	466a      	mov	r2, sp
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	4638      	mov	r0, r7
 8008efa:	f001 f8b2 	bl	800a062 <__swhatbuf_r>
 8008efe:	89a3      	ldrh	r3, [r4, #12]
 8008f00:	4318      	orrs	r0, r3
 8008f02:	81a0      	strh	r0, [r4, #12]
 8008f04:	2d00      	cmp	r5, #0
 8008f06:	d130      	bne.n	8008f6a <setvbuf+0x106>
 8008f08:	9d00      	ldr	r5, [sp, #0]
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f001 f90e 	bl	800a12c <malloc>
 8008f10:	4606      	mov	r6, r0
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d155      	bne.n	8008fc2 <setvbuf+0x15e>
 8008f16:	f8dd 9000 	ldr.w	r9, [sp]
 8008f1a:	45a9      	cmp	r9, r5
 8008f1c:	d14a      	bne.n	8008fb4 <setvbuf+0x150>
 8008f1e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008f22:	2200      	movs	r2, #0
 8008f24:	60a2      	str	r2, [r4, #8]
 8008f26:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008f2a:	6022      	str	r2, [r4, #0]
 8008f2c:	6122      	str	r2, [r4, #16]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f34:	6162      	str	r2, [r4, #20]
 8008f36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f38:	f043 0302 	orr.w	r3, r3, #2
 8008f3c:	07d2      	lsls	r2, r2, #31
 8008f3e:	81a3      	strh	r3, [r4, #12]
 8008f40:	d405      	bmi.n	8008f4e <setvbuf+0xea>
 8008f42:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008f46:	d102      	bne.n	8008f4e <setvbuf+0xea>
 8008f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f4a:	f001 f889 	bl	800a060 <__retarget_lock_release_recursive>
 8008f4e:	4628      	mov	r0, r5
 8008f50:	b003      	add	sp, #12
 8008f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f56:	4b24      	ldr	r3, [pc, #144]	; (8008fe8 <setvbuf+0x184>)
 8008f58:	429c      	cmp	r4, r3
 8008f5a:	d101      	bne.n	8008f60 <setvbuf+0xfc>
 8008f5c:	68bc      	ldr	r4, [r7, #8]
 8008f5e:	e793      	b.n	8008e88 <setvbuf+0x24>
 8008f60:	4b22      	ldr	r3, [pc, #136]	; (8008fec <setvbuf+0x188>)
 8008f62:	429c      	cmp	r4, r3
 8008f64:	bf08      	it	eq
 8008f66:	68fc      	ldreq	r4, [r7, #12]
 8008f68:	e78e      	b.n	8008e88 <setvbuf+0x24>
 8008f6a:	2e00      	cmp	r6, #0
 8008f6c:	d0cd      	beq.n	8008f0a <setvbuf+0xa6>
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	b913      	cbnz	r3, 8008f78 <setvbuf+0x114>
 8008f72:	4638      	mov	r0, r7
 8008f74:	f000 ffd0 	bl	8009f18 <__sinit>
 8008f78:	f1b8 0f01 	cmp.w	r8, #1
 8008f7c:	bf08      	it	eq
 8008f7e:	89a3      	ldrheq	r3, [r4, #12]
 8008f80:	6026      	str	r6, [r4, #0]
 8008f82:	bf04      	itt	eq
 8008f84:	f043 0301 	orreq.w	r3, r3, #1
 8008f88:	81a3      	strheq	r3, [r4, #12]
 8008f8a:	89a2      	ldrh	r2, [r4, #12]
 8008f8c:	f012 0308 	ands.w	r3, r2, #8
 8008f90:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008f94:	d01c      	beq.n	8008fd0 <setvbuf+0x16c>
 8008f96:	07d3      	lsls	r3, r2, #31
 8008f98:	bf41      	itttt	mi
 8008f9a:	2300      	movmi	r3, #0
 8008f9c:	426d      	negmi	r5, r5
 8008f9e:	60a3      	strmi	r3, [r4, #8]
 8008fa0:	61a5      	strmi	r5, [r4, #24]
 8008fa2:	bf58      	it	pl
 8008fa4:	60a5      	strpl	r5, [r4, #8]
 8008fa6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008fa8:	f015 0501 	ands.w	r5, r5, #1
 8008fac:	d115      	bne.n	8008fda <setvbuf+0x176>
 8008fae:	f412 7f00 	tst.w	r2, #512	; 0x200
 8008fb2:	e7c8      	b.n	8008f46 <setvbuf+0xe2>
 8008fb4:	4648      	mov	r0, r9
 8008fb6:	f001 f8b9 	bl	800a12c <malloc>
 8008fba:	4606      	mov	r6, r0
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d0ae      	beq.n	8008f1e <setvbuf+0xba>
 8008fc0:	464d      	mov	r5, r9
 8008fc2:	89a3      	ldrh	r3, [r4, #12]
 8008fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc8:	81a3      	strh	r3, [r4, #12]
 8008fca:	e7d0      	b.n	8008f6e <setvbuf+0x10a>
 8008fcc:	2500      	movs	r5, #0
 8008fce:	e7a8      	b.n	8008f22 <setvbuf+0xbe>
 8008fd0:	60a3      	str	r3, [r4, #8]
 8008fd2:	e7e8      	b.n	8008fa6 <setvbuf+0x142>
 8008fd4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008fd8:	e7b9      	b.n	8008f4e <setvbuf+0xea>
 8008fda:	2500      	movs	r5, #0
 8008fdc:	e7b7      	b.n	8008f4e <setvbuf+0xea>
 8008fde:	bf00      	nop
 8008fe0:	20000018 	.word	0x20000018
 8008fe4:	0800d220 	.word	0x0800d220
 8008fe8:	0800d240 	.word	0x0800d240
 8008fec:	0800d200 	.word	0x0800d200

08008ff0 <quorem>:
 8008ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff4:	6903      	ldr	r3, [r0, #16]
 8008ff6:	690c      	ldr	r4, [r1, #16]
 8008ff8:	42a3      	cmp	r3, r4
 8008ffa:	4607      	mov	r7, r0
 8008ffc:	f2c0 8081 	blt.w	8009102 <quorem+0x112>
 8009000:	3c01      	subs	r4, #1
 8009002:	f101 0814 	add.w	r8, r1, #20
 8009006:	f100 0514 	add.w	r5, r0, #20
 800900a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800900e:	9301      	str	r3, [sp, #4]
 8009010:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009014:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009018:	3301      	adds	r3, #1
 800901a:	429a      	cmp	r2, r3
 800901c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009020:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009024:	fbb2 f6f3 	udiv	r6, r2, r3
 8009028:	d331      	bcc.n	800908e <quorem+0x9e>
 800902a:	f04f 0e00 	mov.w	lr, #0
 800902e:	4640      	mov	r0, r8
 8009030:	46ac      	mov	ip, r5
 8009032:	46f2      	mov	sl, lr
 8009034:	f850 2b04 	ldr.w	r2, [r0], #4
 8009038:	b293      	uxth	r3, r2
 800903a:	fb06 e303 	mla	r3, r6, r3, lr
 800903e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009042:	b29b      	uxth	r3, r3
 8009044:	ebaa 0303 	sub.w	r3, sl, r3
 8009048:	f8dc a000 	ldr.w	sl, [ip]
 800904c:	0c12      	lsrs	r2, r2, #16
 800904e:	fa13 f38a 	uxtah	r3, r3, sl
 8009052:	fb06 e202 	mla	r2, r6, r2, lr
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	9b00      	ldr	r3, [sp, #0]
 800905a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800905e:	b292      	uxth	r2, r2
 8009060:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009064:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009068:	f8bd 3000 	ldrh.w	r3, [sp]
 800906c:	4581      	cmp	r9, r0
 800906e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009072:	f84c 3b04 	str.w	r3, [ip], #4
 8009076:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800907a:	d2db      	bcs.n	8009034 <quorem+0x44>
 800907c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009080:	b92b      	cbnz	r3, 800908e <quorem+0x9e>
 8009082:	9b01      	ldr	r3, [sp, #4]
 8009084:	3b04      	subs	r3, #4
 8009086:	429d      	cmp	r5, r3
 8009088:	461a      	mov	r2, r3
 800908a:	d32e      	bcc.n	80090ea <quorem+0xfa>
 800908c:	613c      	str	r4, [r7, #16]
 800908e:	4638      	mov	r0, r7
 8009090:	f001 fad6 	bl	800a640 <__mcmp>
 8009094:	2800      	cmp	r0, #0
 8009096:	db24      	blt.n	80090e2 <quorem+0xf2>
 8009098:	3601      	adds	r6, #1
 800909a:	4628      	mov	r0, r5
 800909c:	f04f 0c00 	mov.w	ip, #0
 80090a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80090a4:	f8d0 e000 	ldr.w	lr, [r0]
 80090a8:	b293      	uxth	r3, r2
 80090aa:	ebac 0303 	sub.w	r3, ip, r3
 80090ae:	0c12      	lsrs	r2, r2, #16
 80090b0:	fa13 f38e 	uxtah	r3, r3, lr
 80090b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80090b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090bc:	b29b      	uxth	r3, r3
 80090be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090c2:	45c1      	cmp	r9, r8
 80090c4:	f840 3b04 	str.w	r3, [r0], #4
 80090c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80090cc:	d2e8      	bcs.n	80090a0 <quorem+0xb0>
 80090ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090d6:	b922      	cbnz	r2, 80090e2 <quorem+0xf2>
 80090d8:	3b04      	subs	r3, #4
 80090da:	429d      	cmp	r5, r3
 80090dc:	461a      	mov	r2, r3
 80090de:	d30a      	bcc.n	80090f6 <quorem+0x106>
 80090e0:	613c      	str	r4, [r7, #16]
 80090e2:	4630      	mov	r0, r6
 80090e4:	b003      	add	sp, #12
 80090e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ea:	6812      	ldr	r2, [r2, #0]
 80090ec:	3b04      	subs	r3, #4
 80090ee:	2a00      	cmp	r2, #0
 80090f0:	d1cc      	bne.n	800908c <quorem+0x9c>
 80090f2:	3c01      	subs	r4, #1
 80090f4:	e7c7      	b.n	8009086 <quorem+0x96>
 80090f6:	6812      	ldr	r2, [r2, #0]
 80090f8:	3b04      	subs	r3, #4
 80090fa:	2a00      	cmp	r2, #0
 80090fc:	d1f0      	bne.n	80090e0 <quorem+0xf0>
 80090fe:	3c01      	subs	r4, #1
 8009100:	e7eb      	b.n	80090da <quorem+0xea>
 8009102:	2000      	movs	r0, #0
 8009104:	e7ee      	b.n	80090e4 <quorem+0xf4>
	...

08009108 <_dtoa_r>:
 8009108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910c:	ed2d 8b04 	vpush	{d8-d9}
 8009110:	ec57 6b10 	vmov	r6, r7, d0
 8009114:	b093      	sub	sp, #76	; 0x4c
 8009116:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009118:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800911c:	9106      	str	r1, [sp, #24]
 800911e:	ee10 aa10 	vmov	sl, s0
 8009122:	4604      	mov	r4, r0
 8009124:	9209      	str	r2, [sp, #36]	; 0x24
 8009126:	930c      	str	r3, [sp, #48]	; 0x30
 8009128:	46bb      	mov	fp, r7
 800912a:	b975      	cbnz	r5, 800914a <_dtoa_r+0x42>
 800912c:	2010      	movs	r0, #16
 800912e:	f000 fffd 	bl	800a12c <malloc>
 8009132:	4602      	mov	r2, r0
 8009134:	6260      	str	r0, [r4, #36]	; 0x24
 8009136:	b920      	cbnz	r0, 8009142 <_dtoa_r+0x3a>
 8009138:	4ba7      	ldr	r3, [pc, #668]	; (80093d8 <_dtoa_r+0x2d0>)
 800913a:	21ea      	movs	r1, #234	; 0xea
 800913c:	48a7      	ldr	r0, [pc, #668]	; (80093dc <_dtoa_r+0x2d4>)
 800913e:	f001 fcdd 	bl	800aafc <__assert_func>
 8009142:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009146:	6005      	str	r5, [r0, #0]
 8009148:	60c5      	str	r5, [r0, #12]
 800914a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800914c:	6819      	ldr	r1, [r3, #0]
 800914e:	b151      	cbz	r1, 8009166 <_dtoa_r+0x5e>
 8009150:	685a      	ldr	r2, [r3, #4]
 8009152:	604a      	str	r2, [r1, #4]
 8009154:	2301      	movs	r3, #1
 8009156:	4093      	lsls	r3, r2
 8009158:	608b      	str	r3, [r1, #8]
 800915a:	4620      	mov	r0, r4
 800915c:	f001 f82e 	bl	800a1bc <_Bfree>
 8009160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009162:	2200      	movs	r2, #0
 8009164:	601a      	str	r2, [r3, #0]
 8009166:	1e3b      	subs	r3, r7, #0
 8009168:	bfaa      	itet	ge
 800916a:	2300      	movge	r3, #0
 800916c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009170:	f8c8 3000 	strge.w	r3, [r8]
 8009174:	4b9a      	ldr	r3, [pc, #616]	; (80093e0 <_dtoa_r+0x2d8>)
 8009176:	bfbc      	itt	lt
 8009178:	2201      	movlt	r2, #1
 800917a:	f8c8 2000 	strlt.w	r2, [r8]
 800917e:	ea33 030b 	bics.w	r3, r3, fp
 8009182:	d11b      	bne.n	80091bc <_dtoa_r+0xb4>
 8009184:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009186:	f242 730f 	movw	r3, #9999	; 0x270f
 800918a:	6013      	str	r3, [r2, #0]
 800918c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009190:	4333      	orrs	r3, r6
 8009192:	f000 8592 	beq.w	8009cba <_dtoa_r+0xbb2>
 8009196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009198:	b963      	cbnz	r3, 80091b4 <_dtoa_r+0xac>
 800919a:	4b92      	ldr	r3, [pc, #584]	; (80093e4 <_dtoa_r+0x2dc>)
 800919c:	e022      	b.n	80091e4 <_dtoa_r+0xdc>
 800919e:	4b92      	ldr	r3, [pc, #584]	; (80093e8 <_dtoa_r+0x2e0>)
 80091a0:	9301      	str	r3, [sp, #4]
 80091a2:	3308      	adds	r3, #8
 80091a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80091a6:	6013      	str	r3, [r2, #0]
 80091a8:	9801      	ldr	r0, [sp, #4]
 80091aa:	b013      	add	sp, #76	; 0x4c
 80091ac:	ecbd 8b04 	vpop	{d8-d9}
 80091b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b4:	4b8b      	ldr	r3, [pc, #556]	; (80093e4 <_dtoa_r+0x2dc>)
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	3303      	adds	r3, #3
 80091ba:	e7f3      	b.n	80091a4 <_dtoa_r+0x9c>
 80091bc:	2200      	movs	r2, #0
 80091be:	2300      	movs	r3, #0
 80091c0:	4650      	mov	r0, sl
 80091c2:	4659      	mov	r1, fp
 80091c4:	f7f7 fca0 	bl	8000b08 <__aeabi_dcmpeq>
 80091c8:	ec4b ab19 	vmov	d9, sl, fp
 80091cc:	4680      	mov	r8, r0
 80091ce:	b158      	cbz	r0, 80091e8 <_dtoa_r+0xe0>
 80091d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091d2:	2301      	movs	r3, #1
 80091d4:	6013      	str	r3, [r2, #0]
 80091d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 856b 	beq.w	8009cb4 <_dtoa_r+0xbac>
 80091de:	4883      	ldr	r0, [pc, #524]	; (80093ec <_dtoa_r+0x2e4>)
 80091e0:	6018      	str	r0, [r3, #0]
 80091e2:	1e43      	subs	r3, r0, #1
 80091e4:	9301      	str	r3, [sp, #4]
 80091e6:	e7df      	b.n	80091a8 <_dtoa_r+0xa0>
 80091e8:	ec4b ab10 	vmov	d0, sl, fp
 80091ec:	aa10      	add	r2, sp, #64	; 0x40
 80091ee:	a911      	add	r1, sp, #68	; 0x44
 80091f0:	4620      	mov	r0, r4
 80091f2:	f001 facb 	bl	800a78c <__d2b>
 80091f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80091fa:	ee08 0a10 	vmov	s16, r0
 80091fe:	2d00      	cmp	r5, #0
 8009200:	f000 8084 	beq.w	800930c <_dtoa_r+0x204>
 8009204:	ee19 3a90 	vmov	r3, s19
 8009208:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800920c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009210:	4656      	mov	r6, sl
 8009212:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009216:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800921a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800921e:	4b74      	ldr	r3, [pc, #464]	; (80093f0 <_dtoa_r+0x2e8>)
 8009220:	2200      	movs	r2, #0
 8009222:	4630      	mov	r0, r6
 8009224:	4639      	mov	r1, r7
 8009226:	f7f7 f84f 	bl	80002c8 <__aeabi_dsub>
 800922a:	a365      	add	r3, pc, #404	; (adr r3, 80093c0 <_dtoa_r+0x2b8>)
 800922c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009230:	f7f7 fa02 	bl	8000638 <__aeabi_dmul>
 8009234:	a364      	add	r3, pc, #400	; (adr r3, 80093c8 <_dtoa_r+0x2c0>)
 8009236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923a:	f7f7 f847 	bl	80002cc <__adddf3>
 800923e:	4606      	mov	r6, r0
 8009240:	4628      	mov	r0, r5
 8009242:	460f      	mov	r7, r1
 8009244:	f7f7 f98e 	bl	8000564 <__aeabi_i2d>
 8009248:	a361      	add	r3, pc, #388	; (adr r3, 80093d0 <_dtoa_r+0x2c8>)
 800924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924e:	f7f7 f9f3 	bl	8000638 <__aeabi_dmul>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	4630      	mov	r0, r6
 8009258:	4639      	mov	r1, r7
 800925a:	f7f7 f837 	bl	80002cc <__adddf3>
 800925e:	4606      	mov	r6, r0
 8009260:	460f      	mov	r7, r1
 8009262:	f7f7 fc99 	bl	8000b98 <__aeabi_d2iz>
 8009266:	2200      	movs	r2, #0
 8009268:	9000      	str	r0, [sp, #0]
 800926a:	2300      	movs	r3, #0
 800926c:	4630      	mov	r0, r6
 800926e:	4639      	mov	r1, r7
 8009270:	f7f7 fc54 	bl	8000b1c <__aeabi_dcmplt>
 8009274:	b150      	cbz	r0, 800928c <_dtoa_r+0x184>
 8009276:	9800      	ldr	r0, [sp, #0]
 8009278:	f7f7 f974 	bl	8000564 <__aeabi_i2d>
 800927c:	4632      	mov	r2, r6
 800927e:	463b      	mov	r3, r7
 8009280:	f7f7 fc42 	bl	8000b08 <__aeabi_dcmpeq>
 8009284:	b910      	cbnz	r0, 800928c <_dtoa_r+0x184>
 8009286:	9b00      	ldr	r3, [sp, #0]
 8009288:	3b01      	subs	r3, #1
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	9b00      	ldr	r3, [sp, #0]
 800928e:	2b16      	cmp	r3, #22
 8009290:	d85a      	bhi.n	8009348 <_dtoa_r+0x240>
 8009292:	9a00      	ldr	r2, [sp, #0]
 8009294:	4b57      	ldr	r3, [pc, #348]	; (80093f4 <_dtoa_r+0x2ec>)
 8009296:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800929a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929e:	ec51 0b19 	vmov	r0, r1, d9
 80092a2:	f7f7 fc3b 	bl	8000b1c <__aeabi_dcmplt>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d050      	beq.n	800934c <_dtoa_r+0x244>
 80092aa:	9b00      	ldr	r3, [sp, #0]
 80092ac:	3b01      	subs	r3, #1
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	2300      	movs	r3, #0
 80092b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80092b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092b6:	1b5d      	subs	r5, r3, r5
 80092b8:	1e6b      	subs	r3, r5, #1
 80092ba:	9305      	str	r3, [sp, #20]
 80092bc:	bf45      	ittet	mi
 80092be:	f1c5 0301 	rsbmi	r3, r5, #1
 80092c2:	9304      	strmi	r3, [sp, #16]
 80092c4:	2300      	movpl	r3, #0
 80092c6:	2300      	movmi	r3, #0
 80092c8:	bf4c      	ite	mi
 80092ca:	9305      	strmi	r3, [sp, #20]
 80092cc:	9304      	strpl	r3, [sp, #16]
 80092ce:	9b00      	ldr	r3, [sp, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	db3d      	blt.n	8009350 <_dtoa_r+0x248>
 80092d4:	9b05      	ldr	r3, [sp, #20]
 80092d6:	9a00      	ldr	r2, [sp, #0]
 80092d8:	920a      	str	r2, [sp, #40]	; 0x28
 80092da:	4413      	add	r3, r2
 80092dc:	9305      	str	r3, [sp, #20]
 80092de:	2300      	movs	r3, #0
 80092e0:	9307      	str	r3, [sp, #28]
 80092e2:	9b06      	ldr	r3, [sp, #24]
 80092e4:	2b09      	cmp	r3, #9
 80092e6:	f200 8089 	bhi.w	80093fc <_dtoa_r+0x2f4>
 80092ea:	2b05      	cmp	r3, #5
 80092ec:	bfc4      	itt	gt
 80092ee:	3b04      	subgt	r3, #4
 80092f0:	9306      	strgt	r3, [sp, #24]
 80092f2:	9b06      	ldr	r3, [sp, #24]
 80092f4:	f1a3 0302 	sub.w	r3, r3, #2
 80092f8:	bfcc      	ite	gt
 80092fa:	2500      	movgt	r5, #0
 80092fc:	2501      	movle	r5, #1
 80092fe:	2b03      	cmp	r3, #3
 8009300:	f200 8087 	bhi.w	8009412 <_dtoa_r+0x30a>
 8009304:	e8df f003 	tbb	[pc, r3]
 8009308:	59383a2d 	.word	0x59383a2d
 800930c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009310:	441d      	add	r5, r3
 8009312:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009316:	2b20      	cmp	r3, #32
 8009318:	bfc1      	itttt	gt
 800931a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800931e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009322:	fa0b f303 	lslgt.w	r3, fp, r3
 8009326:	fa26 f000 	lsrgt.w	r0, r6, r0
 800932a:	bfda      	itte	le
 800932c:	f1c3 0320 	rsble	r3, r3, #32
 8009330:	fa06 f003 	lslle.w	r0, r6, r3
 8009334:	4318      	orrgt	r0, r3
 8009336:	f7f7 f905 	bl	8000544 <__aeabi_ui2d>
 800933a:	2301      	movs	r3, #1
 800933c:	4606      	mov	r6, r0
 800933e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009342:	3d01      	subs	r5, #1
 8009344:	930e      	str	r3, [sp, #56]	; 0x38
 8009346:	e76a      	b.n	800921e <_dtoa_r+0x116>
 8009348:	2301      	movs	r3, #1
 800934a:	e7b2      	b.n	80092b2 <_dtoa_r+0x1aa>
 800934c:	900b      	str	r0, [sp, #44]	; 0x2c
 800934e:	e7b1      	b.n	80092b4 <_dtoa_r+0x1ac>
 8009350:	9b04      	ldr	r3, [sp, #16]
 8009352:	9a00      	ldr	r2, [sp, #0]
 8009354:	1a9b      	subs	r3, r3, r2
 8009356:	9304      	str	r3, [sp, #16]
 8009358:	4253      	negs	r3, r2
 800935a:	9307      	str	r3, [sp, #28]
 800935c:	2300      	movs	r3, #0
 800935e:	930a      	str	r3, [sp, #40]	; 0x28
 8009360:	e7bf      	b.n	80092e2 <_dtoa_r+0x1da>
 8009362:	2300      	movs	r3, #0
 8009364:	9308      	str	r3, [sp, #32]
 8009366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009368:	2b00      	cmp	r3, #0
 800936a:	dc55      	bgt.n	8009418 <_dtoa_r+0x310>
 800936c:	2301      	movs	r3, #1
 800936e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009372:	461a      	mov	r2, r3
 8009374:	9209      	str	r2, [sp, #36]	; 0x24
 8009376:	e00c      	b.n	8009392 <_dtoa_r+0x28a>
 8009378:	2301      	movs	r3, #1
 800937a:	e7f3      	b.n	8009364 <_dtoa_r+0x25c>
 800937c:	2300      	movs	r3, #0
 800937e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009380:	9308      	str	r3, [sp, #32]
 8009382:	9b00      	ldr	r3, [sp, #0]
 8009384:	4413      	add	r3, r2
 8009386:	9302      	str	r3, [sp, #8]
 8009388:	3301      	adds	r3, #1
 800938a:	2b01      	cmp	r3, #1
 800938c:	9303      	str	r3, [sp, #12]
 800938e:	bfb8      	it	lt
 8009390:	2301      	movlt	r3, #1
 8009392:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009394:	2200      	movs	r2, #0
 8009396:	6042      	str	r2, [r0, #4]
 8009398:	2204      	movs	r2, #4
 800939a:	f102 0614 	add.w	r6, r2, #20
 800939e:	429e      	cmp	r6, r3
 80093a0:	6841      	ldr	r1, [r0, #4]
 80093a2:	d93d      	bls.n	8009420 <_dtoa_r+0x318>
 80093a4:	4620      	mov	r0, r4
 80093a6:	f000 fec9 	bl	800a13c <_Balloc>
 80093aa:	9001      	str	r0, [sp, #4]
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d13b      	bne.n	8009428 <_dtoa_r+0x320>
 80093b0:	4b11      	ldr	r3, [pc, #68]	; (80093f8 <_dtoa_r+0x2f0>)
 80093b2:	4602      	mov	r2, r0
 80093b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80093b8:	e6c0      	b.n	800913c <_dtoa_r+0x34>
 80093ba:	2301      	movs	r3, #1
 80093bc:	e7df      	b.n	800937e <_dtoa_r+0x276>
 80093be:	bf00      	nop
 80093c0:	636f4361 	.word	0x636f4361
 80093c4:	3fd287a7 	.word	0x3fd287a7
 80093c8:	8b60c8b3 	.word	0x8b60c8b3
 80093cc:	3fc68a28 	.word	0x3fc68a28
 80093d0:	509f79fb 	.word	0x509f79fb
 80093d4:	3fd34413 	.word	0x3fd34413
 80093d8:	0800d17d 	.word	0x0800d17d
 80093dc:	0800d194 	.word	0x0800d194
 80093e0:	7ff00000 	.word	0x7ff00000
 80093e4:	0800d179 	.word	0x0800d179
 80093e8:	0800d170 	.word	0x0800d170
 80093ec:	0800d14d 	.word	0x0800d14d
 80093f0:	3ff80000 	.word	0x3ff80000
 80093f4:	0800d2e8 	.word	0x0800d2e8
 80093f8:	0800d1ef 	.word	0x0800d1ef
 80093fc:	2501      	movs	r5, #1
 80093fe:	2300      	movs	r3, #0
 8009400:	9306      	str	r3, [sp, #24]
 8009402:	9508      	str	r5, [sp, #32]
 8009404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009408:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800940c:	2200      	movs	r2, #0
 800940e:	2312      	movs	r3, #18
 8009410:	e7b0      	b.n	8009374 <_dtoa_r+0x26c>
 8009412:	2301      	movs	r3, #1
 8009414:	9308      	str	r3, [sp, #32]
 8009416:	e7f5      	b.n	8009404 <_dtoa_r+0x2fc>
 8009418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800941a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800941e:	e7b8      	b.n	8009392 <_dtoa_r+0x28a>
 8009420:	3101      	adds	r1, #1
 8009422:	6041      	str	r1, [r0, #4]
 8009424:	0052      	lsls	r2, r2, #1
 8009426:	e7b8      	b.n	800939a <_dtoa_r+0x292>
 8009428:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800942a:	9a01      	ldr	r2, [sp, #4]
 800942c:	601a      	str	r2, [r3, #0]
 800942e:	9b03      	ldr	r3, [sp, #12]
 8009430:	2b0e      	cmp	r3, #14
 8009432:	f200 809d 	bhi.w	8009570 <_dtoa_r+0x468>
 8009436:	2d00      	cmp	r5, #0
 8009438:	f000 809a 	beq.w	8009570 <_dtoa_r+0x468>
 800943c:	9b00      	ldr	r3, [sp, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	dd32      	ble.n	80094a8 <_dtoa_r+0x3a0>
 8009442:	4ab7      	ldr	r2, [pc, #732]	; (8009720 <_dtoa_r+0x618>)
 8009444:	f003 030f 	and.w	r3, r3, #15
 8009448:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800944c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009450:	9b00      	ldr	r3, [sp, #0]
 8009452:	05d8      	lsls	r0, r3, #23
 8009454:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009458:	d516      	bpl.n	8009488 <_dtoa_r+0x380>
 800945a:	4bb2      	ldr	r3, [pc, #712]	; (8009724 <_dtoa_r+0x61c>)
 800945c:	ec51 0b19 	vmov	r0, r1, d9
 8009460:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009464:	f7f7 fa12 	bl	800088c <__aeabi_ddiv>
 8009468:	f007 070f 	and.w	r7, r7, #15
 800946c:	4682      	mov	sl, r0
 800946e:	468b      	mov	fp, r1
 8009470:	2503      	movs	r5, #3
 8009472:	4eac      	ldr	r6, [pc, #688]	; (8009724 <_dtoa_r+0x61c>)
 8009474:	b957      	cbnz	r7, 800948c <_dtoa_r+0x384>
 8009476:	4642      	mov	r2, r8
 8009478:	464b      	mov	r3, r9
 800947a:	4650      	mov	r0, sl
 800947c:	4659      	mov	r1, fp
 800947e:	f7f7 fa05 	bl	800088c <__aeabi_ddiv>
 8009482:	4682      	mov	sl, r0
 8009484:	468b      	mov	fp, r1
 8009486:	e028      	b.n	80094da <_dtoa_r+0x3d2>
 8009488:	2502      	movs	r5, #2
 800948a:	e7f2      	b.n	8009472 <_dtoa_r+0x36a>
 800948c:	07f9      	lsls	r1, r7, #31
 800948e:	d508      	bpl.n	80094a2 <_dtoa_r+0x39a>
 8009490:	4640      	mov	r0, r8
 8009492:	4649      	mov	r1, r9
 8009494:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009498:	f7f7 f8ce 	bl	8000638 <__aeabi_dmul>
 800949c:	3501      	adds	r5, #1
 800949e:	4680      	mov	r8, r0
 80094a0:	4689      	mov	r9, r1
 80094a2:	107f      	asrs	r7, r7, #1
 80094a4:	3608      	adds	r6, #8
 80094a6:	e7e5      	b.n	8009474 <_dtoa_r+0x36c>
 80094a8:	f000 809b 	beq.w	80095e2 <_dtoa_r+0x4da>
 80094ac:	9b00      	ldr	r3, [sp, #0]
 80094ae:	4f9d      	ldr	r7, [pc, #628]	; (8009724 <_dtoa_r+0x61c>)
 80094b0:	425e      	negs	r6, r3
 80094b2:	4b9b      	ldr	r3, [pc, #620]	; (8009720 <_dtoa_r+0x618>)
 80094b4:	f006 020f 	and.w	r2, r6, #15
 80094b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c0:	ec51 0b19 	vmov	r0, r1, d9
 80094c4:	f7f7 f8b8 	bl	8000638 <__aeabi_dmul>
 80094c8:	1136      	asrs	r6, r6, #4
 80094ca:	4682      	mov	sl, r0
 80094cc:	468b      	mov	fp, r1
 80094ce:	2300      	movs	r3, #0
 80094d0:	2502      	movs	r5, #2
 80094d2:	2e00      	cmp	r6, #0
 80094d4:	d17a      	bne.n	80095cc <_dtoa_r+0x4c4>
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1d3      	bne.n	8009482 <_dtoa_r+0x37a>
 80094da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f000 8082 	beq.w	80095e6 <_dtoa_r+0x4de>
 80094e2:	4b91      	ldr	r3, [pc, #580]	; (8009728 <_dtoa_r+0x620>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	4650      	mov	r0, sl
 80094e8:	4659      	mov	r1, fp
 80094ea:	f7f7 fb17 	bl	8000b1c <__aeabi_dcmplt>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d079      	beq.n	80095e6 <_dtoa_r+0x4de>
 80094f2:	9b03      	ldr	r3, [sp, #12]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d076      	beq.n	80095e6 <_dtoa_r+0x4de>
 80094f8:	9b02      	ldr	r3, [sp, #8]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	dd36      	ble.n	800956c <_dtoa_r+0x464>
 80094fe:	9b00      	ldr	r3, [sp, #0]
 8009500:	4650      	mov	r0, sl
 8009502:	4659      	mov	r1, fp
 8009504:	1e5f      	subs	r7, r3, #1
 8009506:	2200      	movs	r2, #0
 8009508:	4b88      	ldr	r3, [pc, #544]	; (800972c <_dtoa_r+0x624>)
 800950a:	f7f7 f895 	bl	8000638 <__aeabi_dmul>
 800950e:	9e02      	ldr	r6, [sp, #8]
 8009510:	4682      	mov	sl, r0
 8009512:	468b      	mov	fp, r1
 8009514:	3501      	adds	r5, #1
 8009516:	4628      	mov	r0, r5
 8009518:	f7f7 f824 	bl	8000564 <__aeabi_i2d>
 800951c:	4652      	mov	r2, sl
 800951e:	465b      	mov	r3, fp
 8009520:	f7f7 f88a 	bl	8000638 <__aeabi_dmul>
 8009524:	4b82      	ldr	r3, [pc, #520]	; (8009730 <_dtoa_r+0x628>)
 8009526:	2200      	movs	r2, #0
 8009528:	f7f6 fed0 	bl	80002cc <__adddf3>
 800952c:	46d0      	mov	r8, sl
 800952e:	46d9      	mov	r9, fp
 8009530:	4682      	mov	sl, r0
 8009532:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009536:	2e00      	cmp	r6, #0
 8009538:	d158      	bne.n	80095ec <_dtoa_r+0x4e4>
 800953a:	4b7e      	ldr	r3, [pc, #504]	; (8009734 <_dtoa_r+0x62c>)
 800953c:	2200      	movs	r2, #0
 800953e:	4640      	mov	r0, r8
 8009540:	4649      	mov	r1, r9
 8009542:	f7f6 fec1 	bl	80002c8 <__aeabi_dsub>
 8009546:	4652      	mov	r2, sl
 8009548:	465b      	mov	r3, fp
 800954a:	4680      	mov	r8, r0
 800954c:	4689      	mov	r9, r1
 800954e:	f7f7 fb03 	bl	8000b58 <__aeabi_dcmpgt>
 8009552:	2800      	cmp	r0, #0
 8009554:	f040 8295 	bne.w	8009a82 <_dtoa_r+0x97a>
 8009558:	4652      	mov	r2, sl
 800955a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800955e:	4640      	mov	r0, r8
 8009560:	4649      	mov	r1, r9
 8009562:	f7f7 fadb 	bl	8000b1c <__aeabi_dcmplt>
 8009566:	2800      	cmp	r0, #0
 8009568:	f040 8289 	bne.w	8009a7e <_dtoa_r+0x976>
 800956c:	ec5b ab19 	vmov	sl, fp, d9
 8009570:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009572:	2b00      	cmp	r3, #0
 8009574:	f2c0 8148 	blt.w	8009808 <_dtoa_r+0x700>
 8009578:	9a00      	ldr	r2, [sp, #0]
 800957a:	2a0e      	cmp	r2, #14
 800957c:	f300 8144 	bgt.w	8009808 <_dtoa_r+0x700>
 8009580:	4b67      	ldr	r3, [pc, #412]	; (8009720 <_dtoa_r+0x618>)
 8009582:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009586:	e9d3 8900 	ldrd	r8, r9, [r3]
 800958a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800958c:	2b00      	cmp	r3, #0
 800958e:	f280 80d5 	bge.w	800973c <_dtoa_r+0x634>
 8009592:	9b03      	ldr	r3, [sp, #12]
 8009594:	2b00      	cmp	r3, #0
 8009596:	f300 80d1 	bgt.w	800973c <_dtoa_r+0x634>
 800959a:	f040 826f 	bne.w	8009a7c <_dtoa_r+0x974>
 800959e:	4b65      	ldr	r3, [pc, #404]	; (8009734 <_dtoa_r+0x62c>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	4640      	mov	r0, r8
 80095a4:	4649      	mov	r1, r9
 80095a6:	f7f7 f847 	bl	8000638 <__aeabi_dmul>
 80095aa:	4652      	mov	r2, sl
 80095ac:	465b      	mov	r3, fp
 80095ae:	f7f7 fac9 	bl	8000b44 <__aeabi_dcmpge>
 80095b2:	9e03      	ldr	r6, [sp, #12]
 80095b4:	4637      	mov	r7, r6
 80095b6:	2800      	cmp	r0, #0
 80095b8:	f040 8245 	bne.w	8009a46 <_dtoa_r+0x93e>
 80095bc:	9d01      	ldr	r5, [sp, #4]
 80095be:	2331      	movs	r3, #49	; 0x31
 80095c0:	f805 3b01 	strb.w	r3, [r5], #1
 80095c4:	9b00      	ldr	r3, [sp, #0]
 80095c6:	3301      	adds	r3, #1
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	e240      	b.n	8009a4e <_dtoa_r+0x946>
 80095cc:	07f2      	lsls	r2, r6, #31
 80095ce:	d505      	bpl.n	80095dc <_dtoa_r+0x4d4>
 80095d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095d4:	f7f7 f830 	bl	8000638 <__aeabi_dmul>
 80095d8:	3501      	adds	r5, #1
 80095da:	2301      	movs	r3, #1
 80095dc:	1076      	asrs	r6, r6, #1
 80095de:	3708      	adds	r7, #8
 80095e0:	e777      	b.n	80094d2 <_dtoa_r+0x3ca>
 80095e2:	2502      	movs	r5, #2
 80095e4:	e779      	b.n	80094da <_dtoa_r+0x3d2>
 80095e6:	9f00      	ldr	r7, [sp, #0]
 80095e8:	9e03      	ldr	r6, [sp, #12]
 80095ea:	e794      	b.n	8009516 <_dtoa_r+0x40e>
 80095ec:	9901      	ldr	r1, [sp, #4]
 80095ee:	4b4c      	ldr	r3, [pc, #304]	; (8009720 <_dtoa_r+0x618>)
 80095f0:	4431      	add	r1, r6
 80095f2:	910d      	str	r1, [sp, #52]	; 0x34
 80095f4:	9908      	ldr	r1, [sp, #32]
 80095f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80095fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095fe:	2900      	cmp	r1, #0
 8009600:	d043      	beq.n	800968a <_dtoa_r+0x582>
 8009602:	494d      	ldr	r1, [pc, #308]	; (8009738 <_dtoa_r+0x630>)
 8009604:	2000      	movs	r0, #0
 8009606:	f7f7 f941 	bl	800088c <__aeabi_ddiv>
 800960a:	4652      	mov	r2, sl
 800960c:	465b      	mov	r3, fp
 800960e:	f7f6 fe5b 	bl	80002c8 <__aeabi_dsub>
 8009612:	9d01      	ldr	r5, [sp, #4]
 8009614:	4682      	mov	sl, r0
 8009616:	468b      	mov	fp, r1
 8009618:	4649      	mov	r1, r9
 800961a:	4640      	mov	r0, r8
 800961c:	f7f7 fabc 	bl	8000b98 <__aeabi_d2iz>
 8009620:	4606      	mov	r6, r0
 8009622:	f7f6 ff9f 	bl	8000564 <__aeabi_i2d>
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	4640      	mov	r0, r8
 800962c:	4649      	mov	r1, r9
 800962e:	f7f6 fe4b 	bl	80002c8 <__aeabi_dsub>
 8009632:	3630      	adds	r6, #48	; 0x30
 8009634:	f805 6b01 	strb.w	r6, [r5], #1
 8009638:	4652      	mov	r2, sl
 800963a:	465b      	mov	r3, fp
 800963c:	4680      	mov	r8, r0
 800963e:	4689      	mov	r9, r1
 8009640:	f7f7 fa6c 	bl	8000b1c <__aeabi_dcmplt>
 8009644:	2800      	cmp	r0, #0
 8009646:	d163      	bne.n	8009710 <_dtoa_r+0x608>
 8009648:	4642      	mov	r2, r8
 800964a:	464b      	mov	r3, r9
 800964c:	4936      	ldr	r1, [pc, #216]	; (8009728 <_dtoa_r+0x620>)
 800964e:	2000      	movs	r0, #0
 8009650:	f7f6 fe3a 	bl	80002c8 <__aeabi_dsub>
 8009654:	4652      	mov	r2, sl
 8009656:	465b      	mov	r3, fp
 8009658:	f7f7 fa60 	bl	8000b1c <__aeabi_dcmplt>
 800965c:	2800      	cmp	r0, #0
 800965e:	f040 80b5 	bne.w	80097cc <_dtoa_r+0x6c4>
 8009662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009664:	429d      	cmp	r5, r3
 8009666:	d081      	beq.n	800956c <_dtoa_r+0x464>
 8009668:	4b30      	ldr	r3, [pc, #192]	; (800972c <_dtoa_r+0x624>)
 800966a:	2200      	movs	r2, #0
 800966c:	4650      	mov	r0, sl
 800966e:	4659      	mov	r1, fp
 8009670:	f7f6 ffe2 	bl	8000638 <__aeabi_dmul>
 8009674:	4b2d      	ldr	r3, [pc, #180]	; (800972c <_dtoa_r+0x624>)
 8009676:	4682      	mov	sl, r0
 8009678:	468b      	mov	fp, r1
 800967a:	4640      	mov	r0, r8
 800967c:	4649      	mov	r1, r9
 800967e:	2200      	movs	r2, #0
 8009680:	f7f6 ffda 	bl	8000638 <__aeabi_dmul>
 8009684:	4680      	mov	r8, r0
 8009686:	4689      	mov	r9, r1
 8009688:	e7c6      	b.n	8009618 <_dtoa_r+0x510>
 800968a:	4650      	mov	r0, sl
 800968c:	4659      	mov	r1, fp
 800968e:	f7f6 ffd3 	bl	8000638 <__aeabi_dmul>
 8009692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009694:	9d01      	ldr	r5, [sp, #4]
 8009696:	930f      	str	r3, [sp, #60]	; 0x3c
 8009698:	4682      	mov	sl, r0
 800969a:	468b      	mov	fp, r1
 800969c:	4649      	mov	r1, r9
 800969e:	4640      	mov	r0, r8
 80096a0:	f7f7 fa7a 	bl	8000b98 <__aeabi_d2iz>
 80096a4:	4606      	mov	r6, r0
 80096a6:	f7f6 ff5d 	bl	8000564 <__aeabi_i2d>
 80096aa:	3630      	adds	r6, #48	; 0x30
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4640      	mov	r0, r8
 80096b2:	4649      	mov	r1, r9
 80096b4:	f7f6 fe08 	bl	80002c8 <__aeabi_dsub>
 80096b8:	f805 6b01 	strb.w	r6, [r5], #1
 80096bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096be:	429d      	cmp	r5, r3
 80096c0:	4680      	mov	r8, r0
 80096c2:	4689      	mov	r9, r1
 80096c4:	f04f 0200 	mov.w	r2, #0
 80096c8:	d124      	bne.n	8009714 <_dtoa_r+0x60c>
 80096ca:	4b1b      	ldr	r3, [pc, #108]	; (8009738 <_dtoa_r+0x630>)
 80096cc:	4650      	mov	r0, sl
 80096ce:	4659      	mov	r1, fp
 80096d0:	f7f6 fdfc 	bl	80002cc <__adddf3>
 80096d4:	4602      	mov	r2, r0
 80096d6:	460b      	mov	r3, r1
 80096d8:	4640      	mov	r0, r8
 80096da:	4649      	mov	r1, r9
 80096dc:	f7f7 fa3c 	bl	8000b58 <__aeabi_dcmpgt>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d173      	bne.n	80097cc <_dtoa_r+0x6c4>
 80096e4:	4652      	mov	r2, sl
 80096e6:	465b      	mov	r3, fp
 80096e8:	4913      	ldr	r1, [pc, #76]	; (8009738 <_dtoa_r+0x630>)
 80096ea:	2000      	movs	r0, #0
 80096ec:	f7f6 fdec 	bl	80002c8 <__aeabi_dsub>
 80096f0:	4602      	mov	r2, r0
 80096f2:	460b      	mov	r3, r1
 80096f4:	4640      	mov	r0, r8
 80096f6:	4649      	mov	r1, r9
 80096f8:	f7f7 fa10 	bl	8000b1c <__aeabi_dcmplt>
 80096fc:	2800      	cmp	r0, #0
 80096fe:	f43f af35 	beq.w	800956c <_dtoa_r+0x464>
 8009702:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009704:	1e6b      	subs	r3, r5, #1
 8009706:	930f      	str	r3, [sp, #60]	; 0x3c
 8009708:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800970c:	2b30      	cmp	r3, #48	; 0x30
 800970e:	d0f8      	beq.n	8009702 <_dtoa_r+0x5fa>
 8009710:	9700      	str	r7, [sp, #0]
 8009712:	e049      	b.n	80097a8 <_dtoa_r+0x6a0>
 8009714:	4b05      	ldr	r3, [pc, #20]	; (800972c <_dtoa_r+0x624>)
 8009716:	f7f6 ff8f 	bl	8000638 <__aeabi_dmul>
 800971a:	4680      	mov	r8, r0
 800971c:	4689      	mov	r9, r1
 800971e:	e7bd      	b.n	800969c <_dtoa_r+0x594>
 8009720:	0800d2e8 	.word	0x0800d2e8
 8009724:	0800d2c0 	.word	0x0800d2c0
 8009728:	3ff00000 	.word	0x3ff00000
 800972c:	40240000 	.word	0x40240000
 8009730:	401c0000 	.word	0x401c0000
 8009734:	40140000 	.word	0x40140000
 8009738:	3fe00000 	.word	0x3fe00000
 800973c:	9d01      	ldr	r5, [sp, #4]
 800973e:	4656      	mov	r6, sl
 8009740:	465f      	mov	r7, fp
 8009742:	4642      	mov	r2, r8
 8009744:	464b      	mov	r3, r9
 8009746:	4630      	mov	r0, r6
 8009748:	4639      	mov	r1, r7
 800974a:	f7f7 f89f 	bl	800088c <__aeabi_ddiv>
 800974e:	f7f7 fa23 	bl	8000b98 <__aeabi_d2iz>
 8009752:	4682      	mov	sl, r0
 8009754:	f7f6 ff06 	bl	8000564 <__aeabi_i2d>
 8009758:	4642      	mov	r2, r8
 800975a:	464b      	mov	r3, r9
 800975c:	f7f6 ff6c 	bl	8000638 <__aeabi_dmul>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4630      	mov	r0, r6
 8009766:	4639      	mov	r1, r7
 8009768:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800976c:	f7f6 fdac 	bl	80002c8 <__aeabi_dsub>
 8009770:	f805 6b01 	strb.w	r6, [r5], #1
 8009774:	9e01      	ldr	r6, [sp, #4]
 8009776:	9f03      	ldr	r7, [sp, #12]
 8009778:	1bae      	subs	r6, r5, r6
 800977a:	42b7      	cmp	r7, r6
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	d135      	bne.n	80097ee <_dtoa_r+0x6e6>
 8009782:	f7f6 fda3 	bl	80002cc <__adddf3>
 8009786:	4642      	mov	r2, r8
 8009788:	464b      	mov	r3, r9
 800978a:	4606      	mov	r6, r0
 800978c:	460f      	mov	r7, r1
 800978e:	f7f7 f9e3 	bl	8000b58 <__aeabi_dcmpgt>
 8009792:	b9d0      	cbnz	r0, 80097ca <_dtoa_r+0x6c2>
 8009794:	4642      	mov	r2, r8
 8009796:	464b      	mov	r3, r9
 8009798:	4630      	mov	r0, r6
 800979a:	4639      	mov	r1, r7
 800979c:	f7f7 f9b4 	bl	8000b08 <__aeabi_dcmpeq>
 80097a0:	b110      	cbz	r0, 80097a8 <_dtoa_r+0x6a0>
 80097a2:	f01a 0f01 	tst.w	sl, #1
 80097a6:	d110      	bne.n	80097ca <_dtoa_r+0x6c2>
 80097a8:	4620      	mov	r0, r4
 80097aa:	ee18 1a10 	vmov	r1, s16
 80097ae:	f000 fd05 	bl	800a1bc <_Bfree>
 80097b2:	2300      	movs	r3, #0
 80097b4:	9800      	ldr	r0, [sp, #0]
 80097b6:	702b      	strb	r3, [r5, #0]
 80097b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097ba:	3001      	adds	r0, #1
 80097bc:	6018      	str	r0, [r3, #0]
 80097be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f43f acf1 	beq.w	80091a8 <_dtoa_r+0xa0>
 80097c6:	601d      	str	r5, [r3, #0]
 80097c8:	e4ee      	b.n	80091a8 <_dtoa_r+0xa0>
 80097ca:	9f00      	ldr	r7, [sp, #0]
 80097cc:	462b      	mov	r3, r5
 80097ce:	461d      	mov	r5, r3
 80097d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097d4:	2a39      	cmp	r2, #57	; 0x39
 80097d6:	d106      	bne.n	80097e6 <_dtoa_r+0x6de>
 80097d8:	9a01      	ldr	r2, [sp, #4]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d1f7      	bne.n	80097ce <_dtoa_r+0x6c6>
 80097de:	9901      	ldr	r1, [sp, #4]
 80097e0:	2230      	movs	r2, #48	; 0x30
 80097e2:	3701      	adds	r7, #1
 80097e4:	700a      	strb	r2, [r1, #0]
 80097e6:	781a      	ldrb	r2, [r3, #0]
 80097e8:	3201      	adds	r2, #1
 80097ea:	701a      	strb	r2, [r3, #0]
 80097ec:	e790      	b.n	8009710 <_dtoa_r+0x608>
 80097ee:	4ba6      	ldr	r3, [pc, #664]	; (8009a88 <_dtoa_r+0x980>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	f7f6 ff21 	bl	8000638 <__aeabi_dmul>
 80097f6:	2200      	movs	r2, #0
 80097f8:	2300      	movs	r3, #0
 80097fa:	4606      	mov	r6, r0
 80097fc:	460f      	mov	r7, r1
 80097fe:	f7f7 f983 	bl	8000b08 <__aeabi_dcmpeq>
 8009802:	2800      	cmp	r0, #0
 8009804:	d09d      	beq.n	8009742 <_dtoa_r+0x63a>
 8009806:	e7cf      	b.n	80097a8 <_dtoa_r+0x6a0>
 8009808:	9a08      	ldr	r2, [sp, #32]
 800980a:	2a00      	cmp	r2, #0
 800980c:	f000 80d7 	beq.w	80099be <_dtoa_r+0x8b6>
 8009810:	9a06      	ldr	r2, [sp, #24]
 8009812:	2a01      	cmp	r2, #1
 8009814:	f300 80ba 	bgt.w	800998c <_dtoa_r+0x884>
 8009818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800981a:	2a00      	cmp	r2, #0
 800981c:	f000 80b2 	beq.w	8009984 <_dtoa_r+0x87c>
 8009820:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009824:	9e07      	ldr	r6, [sp, #28]
 8009826:	9d04      	ldr	r5, [sp, #16]
 8009828:	9a04      	ldr	r2, [sp, #16]
 800982a:	441a      	add	r2, r3
 800982c:	9204      	str	r2, [sp, #16]
 800982e:	9a05      	ldr	r2, [sp, #20]
 8009830:	2101      	movs	r1, #1
 8009832:	441a      	add	r2, r3
 8009834:	4620      	mov	r0, r4
 8009836:	9205      	str	r2, [sp, #20]
 8009838:	f000 fd78 	bl	800a32c <__i2b>
 800983c:	4607      	mov	r7, r0
 800983e:	2d00      	cmp	r5, #0
 8009840:	dd0c      	ble.n	800985c <_dtoa_r+0x754>
 8009842:	9b05      	ldr	r3, [sp, #20]
 8009844:	2b00      	cmp	r3, #0
 8009846:	dd09      	ble.n	800985c <_dtoa_r+0x754>
 8009848:	42ab      	cmp	r3, r5
 800984a:	9a04      	ldr	r2, [sp, #16]
 800984c:	bfa8      	it	ge
 800984e:	462b      	movge	r3, r5
 8009850:	1ad2      	subs	r2, r2, r3
 8009852:	9204      	str	r2, [sp, #16]
 8009854:	9a05      	ldr	r2, [sp, #20]
 8009856:	1aed      	subs	r5, r5, r3
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	9305      	str	r3, [sp, #20]
 800985c:	9b07      	ldr	r3, [sp, #28]
 800985e:	b31b      	cbz	r3, 80098a8 <_dtoa_r+0x7a0>
 8009860:	9b08      	ldr	r3, [sp, #32]
 8009862:	2b00      	cmp	r3, #0
 8009864:	f000 80af 	beq.w	80099c6 <_dtoa_r+0x8be>
 8009868:	2e00      	cmp	r6, #0
 800986a:	dd13      	ble.n	8009894 <_dtoa_r+0x78c>
 800986c:	4639      	mov	r1, r7
 800986e:	4632      	mov	r2, r6
 8009870:	4620      	mov	r0, r4
 8009872:	f000 fe1b 	bl	800a4ac <__pow5mult>
 8009876:	ee18 2a10 	vmov	r2, s16
 800987a:	4601      	mov	r1, r0
 800987c:	4607      	mov	r7, r0
 800987e:	4620      	mov	r0, r4
 8009880:	f000 fd6a 	bl	800a358 <__multiply>
 8009884:	ee18 1a10 	vmov	r1, s16
 8009888:	4680      	mov	r8, r0
 800988a:	4620      	mov	r0, r4
 800988c:	f000 fc96 	bl	800a1bc <_Bfree>
 8009890:	ee08 8a10 	vmov	s16, r8
 8009894:	9b07      	ldr	r3, [sp, #28]
 8009896:	1b9a      	subs	r2, r3, r6
 8009898:	d006      	beq.n	80098a8 <_dtoa_r+0x7a0>
 800989a:	ee18 1a10 	vmov	r1, s16
 800989e:	4620      	mov	r0, r4
 80098a0:	f000 fe04 	bl	800a4ac <__pow5mult>
 80098a4:	ee08 0a10 	vmov	s16, r0
 80098a8:	2101      	movs	r1, #1
 80098aa:	4620      	mov	r0, r4
 80098ac:	f000 fd3e 	bl	800a32c <__i2b>
 80098b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	4606      	mov	r6, r0
 80098b6:	f340 8088 	ble.w	80099ca <_dtoa_r+0x8c2>
 80098ba:	461a      	mov	r2, r3
 80098bc:	4601      	mov	r1, r0
 80098be:	4620      	mov	r0, r4
 80098c0:	f000 fdf4 	bl	800a4ac <__pow5mult>
 80098c4:	9b06      	ldr	r3, [sp, #24]
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	4606      	mov	r6, r0
 80098ca:	f340 8081 	ble.w	80099d0 <_dtoa_r+0x8c8>
 80098ce:	f04f 0800 	mov.w	r8, #0
 80098d2:	6933      	ldr	r3, [r6, #16]
 80098d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80098d8:	6918      	ldr	r0, [r3, #16]
 80098da:	f000 fcd7 	bl	800a28c <__hi0bits>
 80098de:	f1c0 0020 	rsb	r0, r0, #32
 80098e2:	9b05      	ldr	r3, [sp, #20]
 80098e4:	4418      	add	r0, r3
 80098e6:	f010 001f 	ands.w	r0, r0, #31
 80098ea:	f000 8092 	beq.w	8009a12 <_dtoa_r+0x90a>
 80098ee:	f1c0 0320 	rsb	r3, r0, #32
 80098f2:	2b04      	cmp	r3, #4
 80098f4:	f340 808a 	ble.w	8009a0c <_dtoa_r+0x904>
 80098f8:	f1c0 001c 	rsb	r0, r0, #28
 80098fc:	9b04      	ldr	r3, [sp, #16]
 80098fe:	4403      	add	r3, r0
 8009900:	9304      	str	r3, [sp, #16]
 8009902:	9b05      	ldr	r3, [sp, #20]
 8009904:	4403      	add	r3, r0
 8009906:	4405      	add	r5, r0
 8009908:	9305      	str	r3, [sp, #20]
 800990a:	9b04      	ldr	r3, [sp, #16]
 800990c:	2b00      	cmp	r3, #0
 800990e:	dd07      	ble.n	8009920 <_dtoa_r+0x818>
 8009910:	ee18 1a10 	vmov	r1, s16
 8009914:	461a      	mov	r2, r3
 8009916:	4620      	mov	r0, r4
 8009918:	f000 fe22 	bl	800a560 <__lshift>
 800991c:	ee08 0a10 	vmov	s16, r0
 8009920:	9b05      	ldr	r3, [sp, #20]
 8009922:	2b00      	cmp	r3, #0
 8009924:	dd05      	ble.n	8009932 <_dtoa_r+0x82a>
 8009926:	4631      	mov	r1, r6
 8009928:	461a      	mov	r2, r3
 800992a:	4620      	mov	r0, r4
 800992c:	f000 fe18 	bl	800a560 <__lshift>
 8009930:	4606      	mov	r6, r0
 8009932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009934:	2b00      	cmp	r3, #0
 8009936:	d06e      	beq.n	8009a16 <_dtoa_r+0x90e>
 8009938:	ee18 0a10 	vmov	r0, s16
 800993c:	4631      	mov	r1, r6
 800993e:	f000 fe7f 	bl	800a640 <__mcmp>
 8009942:	2800      	cmp	r0, #0
 8009944:	da67      	bge.n	8009a16 <_dtoa_r+0x90e>
 8009946:	9b00      	ldr	r3, [sp, #0]
 8009948:	3b01      	subs	r3, #1
 800994a:	ee18 1a10 	vmov	r1, s16
 800994e:	9300      	str	r3, [sp, #0]
 8009950:	220a      	movs	r2, #10
 8009952:	2300      	movs	r3, #0
 8009954:	4620      	mov	r0, r4
 8009956:	f000 fc53 	bl	800a200 <__multadd>
 800995a:	9b08      	ldr	r3, [sp, #32]
 800995c:	ee08 0a10 	vmov	s16, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 81b1 	beq.w	8009cc8 <_dtoa_r+0xbc0>
 8009966:	2300      	movs	r3, #0
 8009968:	4639      	mov	r1, r7
 800996a:	220a      	movs	r2, #10
 800996c:	4620      	mov	r0, r4
 800996e:	f000 fc47 	bl	800a200 <__multadd>
 8009972:	9b02      	ldr	r3, [sp, #8]
 8009974:	2b00      	cmp	r3, #0
 8009976:	4607      	mov	r7, r0
 8009978:	f300 808e 	bgt.w	8009a98 <_dtoa_r+0x990>
 800997c:	9b06      	ldr	r3, [sp, #24]
 800997e:	2b02      	cmp	r3, #2
 8009980:	dc51      	bgt.n	8009a26 <_dtoa_r+0x91e>
 8009982:	e089      	b.n	8009a98 <_dtoa_r+0x990>
 8009984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009986:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800998a:	e74b      	b.n	8009824 <_dtoa_r+0x71c>
 800998c:	9b03      	ldr	r3, [sp, #12]
 800998e:	1e5e      	subs	r6, r3, #1
 8009990:	9b07      	ldr	r3, [sp, #28]
 8009992:	42b3      	cmp	r3, r6
 8009994:	bfbf      	itttt	lt
 8009996:	9b07      	ldrlt	r3, [sp, #28]
 8009998:	9607      	strlt	r6, [sp, #28]
 800999a:	1af2      	sublt	r2, r6, r3
 800999c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800999e:	bfb6      	itet	lt
 80099a0:	189b      	addlt	r3, r3, r2
 80099a2:	1b9e      	subge	r6, r3, r6
 80099a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80099a6:	9b03      	ldr	r3, [sp, #12]
 80099a8:	bfb8      	it	lt
 80099aa:	2600      	movlt	r6, #0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	bfb7      	itett	lt
 80099b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80099b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80099b8:	1a9d      	sublt	r5, r3, r2
 80099ba:	2300      	movlt	r3, #0
 80099bc:	e734      	b.n	8009828 <_dtoa_r+0x720>
 80099be:	9e07      	ldr	r6, [sp, #28]
 80099c0:	9d04      	ldr	r5, [sp, #16]
 80099c2:	9f08      	ldr	r7, [sp, #32]
 80099c4:	e73b      	b.n	800983e <_dtoa_r+0x736>
 80099c6:	9a07      	ldr	r2, [sp, #28]
 80099c8:	e767      	b.n	800989a <_dtoa_r+0x792>
 80099ca:	9b06      	ldr	r3, [sp, #24]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	dc18      	bgt.n	8009a02 <_dtoa_r+0x8fa>
 80099d0:	f1ba 0f00 	cmp.w	sl, #0
 80099d4:	d115      	bne.n	8009a02 <_dtoa_r+0x8fa>
 80099d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099da:	b993      	cbnz	r3, 8009a02 <_dtoa_r+0x8fa>
 80099dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80099e0:	0d1b      	lsrs	r3, r3, #20
 80099e2:	051b      	lsls	r3, r3, #20
 80099e4:	b183      	cbz	r3, 8009a08 <_dtoa_r+0x900>
 80099e6:	9b04      	ldr	r3, [sp, #16]
 80099e8:	3301      	adds	r3, #1
 80099ea:	9304      	str	r3, [sp, #16]
 80099ec:	9b05      	ldr	r3, [sp, #20]
 80099ee:	3301      	adds	r3, #1
 80099f0:	9305      	str	r3, [sp, #20]
 80099f2:	f04f 0801 	mov.w	r8, #1
 80099f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f47f af6a 	bne.w	80098d2 <_dtoa_r+0x7ca>
 80099fe:	2001      	movs	r0, #1
 8009a00:	e76f      	b.n	80098e2 <_dtoa_r+0x7da>
 8009a02:	f04f 0800 	mov.w	r8, #0
 8009a06:	e7f6      	b.n	80099f6 <_dtoa_r+0x8ee>
 8009a08:	4698      	mov	r8, r3
 8009a0a:	e7f4      	b.n	80099f6 <_dtoa_r+0x8ee>
 8009a0c:	f43f af7d 	beq.w	800990a <_dtoa_r+0x802>
 8009a10:	4618      	mov	r0, r3
 8009a12:	301c      	adds	r0, #28
 8009a14:	e772      	b.n	80098fc <_dtoa_r+0x7f4>
 8009a16:	9b03      	ldr	r3, [sp, #12]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	dc37      	bgt.n	8009a8c <_dtoa_r+0x984>
 8009a1c:	9b06      	ldr	r3, [sp, #24]
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	dd34      	ble.n	8009a8c <_dtoa_r+0x984>
 8009a22:	9b03      	ldr	r3, [sp, #12]
 8009a24:	9302      	str	r3, [sp, #8]
 8009a26:	9b02      	ldr	r3, [sp, #8]
 8009a28:	b96b      	cbnz	r3, 8009a46 <_dtoa_r+0x93e>
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	2205      	movs	r2, #5
 8009a2e:	4620      	mov	r0, r4
 8009a30:	f000 fbe6 	bl	800a200 <__multadd>
 8009a34:	4601      	mov	r1, r0
 8009a36:	4606      	mov	r6, r0
 8009a38:	ee18 0a10 	vmov	r0, s16
 8009a3c:	f000 fe00 	bl	800a640 <__mcmp>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	f73f adbb 	bgt.w	80095bc <_dtoa_r+0x4b4>
 8009a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a48:	9d01      	ldr	r5, [sp, #4]
 8009a4a:	43db      	mvns	r3, r3
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	f04f 0800 	mov.w	r8, #0
 8009a52:	4631      	mov	r1, r6
 8009a54:	4620      	mov	r0, r4
 8009a56:	f000 fbb1 	bl	800a1bc <_Bfree>
 8009a5a:	2f00      	cmp	r7, #0
 8009a5c:	f43f aea4 	beq.w	80097a8 <_dtoa_r+0x6a0>
 8009a60:	f1b8 0f00 	cmp.w	r8, #0
 8009a64:	d005      	beq.n	8009a72 <_dtoa_r+0x96a>
 8009a66:	45b8      	cmp	r8, r7
 8009a68:	d003      	beq.n	8009a72 <_dtoa_r+0x96a>
 8009a6a:	4641      	mov	r1, r8
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	f000 fba5 	bl	800a1bc <_Bfree>
 8009a72:	4639      	mov	r1, r7
 8009a74:	4620      	mov	r0, r4
 8009a76:	f000 fba1 	bl	800a1bc <_Bfree>
 8009a7a:	e695      	b.n	80097a8 <_dtoa_r+0x6a0>
 8009a7c:	2600      	movs	r6, #0
 8009a7e:	4637      	mov	r7, r6
 8009a80:	e7e1      	b.n	8009a46 <_dtoa_r+0x93e>
 8009a82:	9700      	str	r7, [sp, #0]
 8009a84:	4637      	mov	r7, r6
 8009a86:	e599      	b.n	80095bc <_dtoa_r+0x4b4>
 8009a88:	40240000 	.word	0x40240000
 8009a8c:	9b08      	ldr	r3, [sp, #32]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f000 80ca 	beq.w	8009c28 <_dtoa_r+0xb20>
 8009a94:	9b03      	ldr	r3, [sp, #12]
 8009a96:	9302      	str	r3, [sp, #8]
 8009a98:	2d00      	cmp	r5, #0
 8009a9a:	dd05      	ble.n	8009aa8 <_dtoa_r+0x9a0>
 8009a9c:	4639      	mov	r1, r7
 8009a9e:	462a      	mov	r2, r5
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f000 fd5d 	bl	800a560 <__lshift>
 8009aa6:	4607      	mov	r7, r0
 8009aa8:	f1b8 0f00 	cmp.w	r8, #0
 8009aac:	d05b      	beq.n	8009b66 <_dtoa_r+0xa5e>
 8009aae:	6879      	ldr	r1, [r7, #4]
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f000 fb43 	bl	800a13c <_Balloc>
 8009ab6:	4605      	mov	r5, r0
 8009ab8:	b928      	cbnz	r0, 8009ac6 <_dtoa_r+0x9be>
 8009aba:	4b87      	ldr	r3, [pc, #540]	; (8009cd8 <_dtoa_r+0xbd0>)
 8009abc:	4602      	mov	r2, r0
 8009abe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009ac2:	f7ff bb3b 	b.w	800913c <_dtoa_r+0x34>
 8009ac6:	693a      	ldr	r2, [r7, #16]
 8009ac8:	3202      	adds	r2, #2
 8009aca:	0092      	lsls	r2, r2, #2
 8009acc:	f107 010c 	add.w	r1, r7, #12
 8009ad0:	300c      	adds	r0, #12
 8009ad2:	f7fe fd3f 	bl	8008554 <memcpy>
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	4629      	mov	r1, r5
 8009ada:	4620      	mov	r0, r4
 8009adc:	f000 fd40 	bl	800a560 <__lshift>
 8009ae0:	9b01      	ldr	r3, [sp, #4]
 8009ae2:	f103 0901 	add.w	r9, r3, #1
 8009ae6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009aea:	4413      	add	r3, r2
 8009aec:	9305      	str	r3, [sp, #20]
 8009aee:	f00a 0301 	and.w	r3, sl, #1
 8009af2:	46b8      	mov	r8, r7
 8009af4:	9304      	str	r3, [sp, #16]
 8009af6:	4607      	mov	r7, r0
 8009af8:	4631      	mov	r1, r6
 8009afa:	ee18 0a10 	vmov	r0, s16
 8009afe:	f7ff fa77 	bl	8008ff0 <quorem>
 8009b02:	4641      	mov	r1, r8
 8009b04:	9002      	str	r0, [sp, #8]
 8009b06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009b0a:	ee18 0a10 	vmov	r0, s16
 8009b0e:	f000 fd97 	bl	800a640 <__mcmp>
 8009b12:	463a      	mov	r2, r7
 8009b14:	9003      	str	r0, [sp, #12]
 8009b16:	4631      	mov	r1, r6
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f000 fdad 	bl	800a678 <__mdiff>
 8009b1e:	68c2      	ldr	r2, [r0, #12]
 8009b20:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8009b24:	4605      	mov	r5, r0
 8009b26:	bb02      	cbnz	r2, 8009b6a <_dtoa_r+0xa62>
 8009b28:	4601      	mov	r1, r0
 8009b2a:	ee18 0a10 	vmov	r0, s16
 8009b2e:	f000 fd87 	bl	800a640 <__mcmp>
 8009b32:	4602      	mov	r2, r0
 8009b34:	4629      	mov	r1, r5
 8009b36:	4620      	mov	r0, r4
 8009b38:	9207      	str	r2, [sp, #28]
 8009b3a:	f000 fb3f 	bl	800a1bc <_Bfree>
 8009b3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009b42:	ea43 0102 	orr.w	r1, r3, r2
 8009b46:	9b04      	ldr	r3, [sp, #16]
 8009b48:	430b      	orrs	r3, r1
 8009b4a:	464d      	mov	r5, r9
 8009b4c:	d10f      	bne.n	8009b6e <_dtoa_r+0xa66>
 8009b4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b52:	d02a      	beq.n	8009baa <_dtoa_r+0xaa2>
 8009b54:	9b03      	ldr	r3, [sp, #12]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	dd02      	ble.n	8009b60 <_dtoa_r+0xa58>
 8009b5a:	9b02      	ldr	r3, [sp, #8]
 8009b5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009b60:	f88b a000 	strb.w	sl, [fp]
 8009b64:	e775      	b.n	8009a52 <_dtoa_r+0x94a>
 8009b66:	4638      	mov	r0, r7
 8009b68:	e7ba      	b.n	8009ae0 <_dtoa_r+0x9d8>
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	e7e2      	b.n	8009b34 <_dtoa_r+0xa2c>
 8009b6e:	9b03      	ldr	r3, [sp, #12]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	db04      	blt.n	8009b7e <_dtoa_r+0xa76>
 8009b74:	9906      	ldr	r1, [sp, #24]
 8009b76:	430b      	orrs	r3, r1
 8009b78:	9904      	ldr	r1, [sp, #16]
 8009b7a:	430b      	orrs	r3, r1
 8009b7c:	d122      	bne.n	8009bc4 <_dtoa_r+0xabc>
 8009b7e:	2a00      	cmp	r2, #0
 8009b80:	ddee      	ble.n	8009b60 <_dtoa_r+0xa58>
 8009b82:	ee18 1a10 	vmov	r1, s16
 8009b86:	2201      	movs	r2, #1
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f000 fce9 	bl	800a560 <__lshift>
 8009b8e:	4631      	mov	r1, r6
 8009b90:	ee08 0a10 	vmov	s16, r0
 8009b94:	f000 fd54 	bl	800a640 <__mcmp>
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	dc03      	bgt.n	8009ba4 <_dtoa_r+0xa9c>
 8009b9c:	d1e0      	bne.n	8009b60 <_dtoa_r+0xa58>
 8009b9e:	f01a 0f01 	tst.w	sl, #1
 8009ba2:	d0dd      	beq.n	8009b60 <_dtoa_r+0xa58>
 8009ba4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ba8:	d1d7      	bne.n	8009b5a <_dtoa_r+0xa52>
 8009baa:	2339      	movs	r3, #57	; 0x39
 8009bac:	f88b 3000 	strb.w	r3, [fp]
 8009bb0:	462b      	mov	r3, r5
 8009bb2:	461d      	mov	r5, r3
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009bba:	2a39      	cmp	r2, #57	; 0x39
 8009bbc:	d071      	beq.n	8009ca2 <_dtoa_r+0xb9a>
 8009bbe:	3201      	adds	r2, #1
 8009bc0:	701a      	strb	r2, [r3, #0]
 8009bc2:	e746      	b.n	8009a52 <_dtoa_r+0x94a>
 8009bc4:	2a00      	cmp	r2, #0
 8009bc6:	dd07      	ble.n	8009bd8 <_dtoa_r+0xad0>
 8009bc8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009bcc:	d0ed      	beq.n	8009baa <_dtoa_r+0xaa2>
 8009bce:	f10a 0301 	add.w	r3, sl, #1
 8009bd2:	f88b 3000 	strb.w	r3, [fp]
 8009bd6:	e73c      	b.n	8009a52 <_dtoa_r+0x94a>
 8009bd8:	9b05      	ldr	r3, [sp, #20]
 8009bda:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009bde:	4599      	cmp	r9, r3
 8009be0:	d047      	beq.n	8009c72 <_dtoa_r+0xb6a>
 8009be2:	ee18 1a10 	vmov	r1, s16
 8009be6:	2300      	movs	r3, #0
 8009be8:	220a      	movs	r2, #10
 8009bea:	4620      	mov	r0, r4
 8009bec:	f000 fb08 	bl	800a200 <__multadd>
 8009bf0:	45b8      	cmp	r8, r7
 8009bf2:	ee08 0a10 	vmov	s16, r0
 8009bf6:	f04f 0300 	mov.w	r3, #0
 8009bfa:	f04f 020a 	mov.w	r2, #10
 8009bfe:	4641      	mov	r1, r8
 8009c00:	4620      	mov	r0, r4
 8009c02:	d106      	bne.n	8009c12 <_dtoa_r+0xb0a>
 8009c04:	f000 fafc 	bl	800a200 <__multadd>
 8009c08:	4680      	mov	r8, r0
 8009c0a:	4607      	mov	r7, r0
 8009c0c:	f109 0901 	add.w	r9, r9, #1
 8009c10:	e772      	b.n	8009af8 <_dtoa_r+0x9f0>
 8009c12:	f000 faf5 	bl	800a200 <__multadd>
 8009c16:	4639      	mov	r1, r7
 8009c18:	4680      	mov	r8, r0
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	220a      	movs	r2, #10
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f000 faee 	bl	800a200 <__multadd>
 8009c24:	4607      	mov	r7, r0
 8009c26:	e7f1      	b.n	8009c0c <_dtoa_r+0xb04>
 8009c28:	9b03      	ldr	r3, [sp, #12]
 8009c2a:	9302      	str	r3, [sp, #8]
 8009c2c:	9d01      	ldr	r5, [sp, #4]
 8009c2e:	ee18 0a10 	vmov	r0, s16
 8009c32:	4631      	mov	r1, r6
 8009c34:	f7ff f9dc 	bl	8008ff0 <quorem>
 8009c38:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009c3c:	9b01      	ldr	r3, [sp, #4]
 8009c3e:	f805 ab01 	strb.w	sl, [r5], #1
 8009c42:	1aea      	subs	r2, r5, r3
 8009c44:	9b02      	ldr	r3, [sp, #8]
 8009c46:	4293      	cmp	r3, r2
 8009c48:	dd09      	ble.n	8009c5e <_dtoa_r+0xb56>
 8009c4a:	ee18 1a10 	vmov	r1, s16
 8009c4e:	2300      	movs	r3, #0
 8009c50:	220a      	movs	r2, #10
 8009c52:	4620      	mov	r0, r4
 8009c54:	f000 fad4 	bl	800a200 <__multadd>
 8009c58:	ee08 0a10 	vmov	s16, r0
 8009c5c:	e7e7      	b.n	8009c2e <_dtoa_r+0xb26>
 8009c5e:	9b02      	ldr	r3, [sp, #8]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	bfc8      	it	gt
 8009c64:	461d      	movgt	r5, r3
 8009c66:	9b01      	ldr	r3, [sp, #4]
 8009c68:	bfd8      	it	le
 8009c6a:	2501      	movle	r5, #1
 8009c6c:	441d      	add	r5, r3
 8009c6e:	f04f 0800 	mov.w	r8, #0
 8009c72:	ee18 1a10 	vmov	r1, s16
 8009c76:	2201      	movs	r2, #1
 8009c78:	4620      	mov	r0, r4
 8009c7a:	f000 fc71 	bl	800a560 <__lshift>
 8009c7e:	4631      	mov	r1, r6
 8009c80:	ee08 0a10 	vmov	s16, r0
 8009c84:	f000 fcdc 	bl	800a640 <__mcmp>
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	dc91      	bgt.n	8009bb0 <_dtoa_r+0xaa8>
 8009c8c:	d102      	bne.n	8009c94 <_dtoa_r+0xb8c>
 8009c8e:	f01a 0f01 	tst.w	sl, #1
 8009c92:	d18d      	bne.n	8009bb0 <_dtoa_r+0xaa8>
 8009c94:	462b      	mov	r3, r5
 8009c96:	461d      	mov	r5, r3
 8009c98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c9c:	2a30      	cmp	r2, #48	; 0x30
 8009c9e:	d0fa      	beq.n	8009c96 <_dtoa_r+0xb8e>
 8009ca0:	e6d7      	b.n	8009a52 <_dtoa_r+0x94a>
 8009ca2:	9a01      	ldr	r2, [sp, #4]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d184      	bne.n	8009bb2 <_dtoa_r+0xaaa>
 8009ca8:	9b00      	ldr	r3, [sp, #0]
 8009caa:	3301      	adds	r3, #1
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	2331      	movs	r3, #49	; 0x31
 8009cb0:	7013      	strb	r3, [r2, #0]
 8009cb2:	e6ce      	b.n	8009a52 <_dtoa_r+0x94a>
 8009cb4:	4b09      	ldr	r3, [pc, #36]	; (8009cdc <_dtoa_r+0xbd4>)
 8009cb6:	f7ff ba95 	b.w	80091e4 <_dtoa_r+0xdc>
 8009cba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f47f aa6e 	bne.w	800919e <_dtoa_r+0x96>
 8009cc2:	4b07      	ldr	r3, [pc, #28]	; (8009ce0 <_dtoa_r+0xbd8>)
 8009cc4:	f7ff ba8e 	b.w	80091e4 <_dtoa_r+0xdc>
 8009cc8:	9b02      	ldr	r3, [sp, #8]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	dcae      	bgt.n	8009c2c <_dtoa_r+0xb24>
 8009cce:	9b06      	ldr	r3, [sp, #24]
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	f73f aea8 	bgt.w	8009a26 <_dtoa_r+0x91e>
 8009cd6:	e7a9      	b.n	8009c2c <_dtoa_r+0xb24>
 8009cd8:	0800d1ef 	.word	0x0800d1ef
 8009cdc:	0800d14c 	.word	0x0800d14c
 8009ce0:	0800d170 	.word	0x0800d170

08009ce4 <__sflush_r>:
 8009ce4:	898a      	ldrh	r2, [r1, #12]
 8009ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cea:	4605      	mov	r5, r0
 8009cec:	0710      	lsls	r0, r2, #28
 8009cee:	460c      	mov	r4, r1
 8009cf0:	d458      	bmi.n	8009da4 <__sflush_r+0xc0>
 8009cf2:	684b      	ldr	r3, [r1, #4]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	dc05      	bgt.n	8009d04 <__sflush_r+0x20>
 8009cf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	dc02      	bgt.n	8009d04 <__sflush_r+0x20>
 8009cfe:	2000      	movs	r0, #0
 8009d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d06:	2e00      	cmp	r6, #0
 8009d08:	d0f9      	beq.n	8009cfe <__sflush_r+0x1a>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d10:	682f      	ldr	r7, [r5, #0]
 8009d12:	602b      	str	r3, [r5, #0]
 8009d14:	d032      	beq.n	8009d7c <__sflush_r+0x98>
 8009d16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	075a      	lsls	r2, r3, #29
 8009d1c:	d505      	bpl.n	8009d2a <__sflush_r+0x46>
 8009d1e:	6863      	ldr	r3, [r4, #4]
 8009d20:	1ac0      	subs	r0, r0, r3
 8009d22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d24:	b10b      	cbz	r3, 8009d2a <__sflush_r+0x46>
 8009d26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d28:	1ac0      	subs	r0, r0, r3
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d30:	6a21      	ldr	r1, [r4, #32]
 8009d32:	4628      	mov	r0, r5
 8009d34:	47b0      	blx	r6
 8009d36:	1c43      	adds	r3, r0, #1
 8009d38:	89a3      	ldrh	r3, [r4, #12]
 8009d3a:	d106      	bne.n	8009d4a <__sflush_r+0x66>
 8009d3c:	6829      	ldr	r1, [r5, #0]
 8009d3e:	291d      	cmp	r1, #29
 8009d40:	d82c      	bhi.n	8009d9c <__sflush_r+0xb8>
 8009d42:	4a2a      	ldr	r2, [pc, #168]	; (8009dec <__sflush_r+0x108>)
 8009d44:	40ca      	lsrs	r2, r1
 8009d46:	07d6      	lsls	r6, r2, #31
 8009d48:	d528      	bpl.n	8009d9c <__sflush_r+0xb8>
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	6062      	str	r2, [r4, #4]
 8009d4e:	04d9      	lsls	r1, r3, #19
 8009d50:	6922      	ldr	r2, [r4, #16]
 8009d52:	6022      	str	r2, [r4, #0]
 8009d54:	d504      	bpl.n	8009d60 <__sflush_r+0x7c>
 8009d56:	1c42      	adds	r2, r0, #1
 8009d58:	d101      	bne.n	8009d5e <__sflush_r+0x7a>
 8009d5a:	682b      	ldr	r3, [r5, #0]
 8009d5c:	b903      	cbnz	r3, 8009d60 <__sflush_r+0x7c>
 8009d5e:	6560      	str	r0, [r4, #84]	; 0x54
 8009d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d62:	602f      	str	r7, [r5, #0]
 8009d64:	2900      	cmp	r1, #0
 8009d66:	d0ca      	beq.n	8009cfe <__sflush_r+0x1a>
 8009d68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d6c:	4299      	cmp	r1, r3
 8009d6e:	d002      	beq.n	8009d76 <__sflush_r+0x92>
 8009d70:	4628      	mov	r0, r5
 8009d72:	f000 fd7d 	bl	800a870 <_free_r>
 8009d76:	2000      	movs	r0, #0
 8009d78:	6360      	str	r0, [r4, #52]	; 0x34
 8009d7a:	e7c1      	b.n	8009d00 <__sflush_r+0x1c>
 8009d7c:	6a21      	ldr	r1, [r4, #32]
 8009d7e:	2301      	movs	r3, #1
 8009d80:	4628      	mov	r0, r5
 8009d82:	47b0      	blx	r6
 8009d84:	1c41      	adds	r1, r0, #1
 8009d86:	d1c7      	bne.n	8009d18 <__sflush_r+0x34>
 8009d88:	682b      	ldr	r3, [r5, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d0c4      	beq.n	8009d18 <__sflush_r+0x34>
 8009d8e:	2b1d      	cmp	r3, #29
 8009d90:	d001      	beq.n	8009d96 <__sflush_r+0xb2>
 8009d92:	2b16      	cmp	r3, #22
 8009d94:	d101      	bne.n	8009d9a <__sflush_r+0xb6>
 8009d96:	602f      	str	r7, [r5, #0]
 8009d98:	e7b1      	b.n	8009cfe <__sflush_r+0x1a>
 8009d9a:	89a3      	ldrh	r3, [r4, #12]
 8009d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009da0:	81a3      	strh	r3, [r4, #12]
 8009da2:	e7ad      	b.n	8009d00 <__sflush_r+0x1c>
 8009da4:	690f      	ldr	r7, [r1, #16]
 8009da6:	2f00      	cmp	r7, #0
 8009da8:	d0a9      	beq.n	8009cfe <__sflush_r+0x1a>
 8009daa:	0793      	lsls	r3, r2, #30
 8009dac:	680e      	ldr	r6, [r1, #0]
 8009dae:	bf08      	it	eq
 8009db0:	694b      	ldreq	r3, [r1, #20]
 8009db2:	600f      	str	r7, [r1, #0]
 8009db4:	bf18      	it	ne
 8009db6:	2300      	movne	r3, #0
 8009db8:	eba6 0807 	sub.w	r8, r6, r7
 8009dbc:	608b      	str	r3, [r1, #8]
 8009dbe:	f1b8 0f00 	cmp.w	r8, #0
 8009dc2:	dd9c      	ble.n	8009cfe <__sflush_r+0x1a>
 8009dc4:	6a21      	ldr	r1, [r4, #32]
 8009dc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009dc8:	4643      	mov	r3, r8
 8009dca:	463a      	mov	r2, r7
 8009dcc:	4628      	mov	r0, r5
 8009dce:	47b0      	blx	r6
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	dc06      	bgt.n	8009de2 <__sflush_r+0xfe>
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dda:	81a3      	strh	r3, [r4, #12]
 8009ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009de0:	e78e      	b.n	8009d00 <__sflush_r+0x1c>
 8009de2:	4407      	add	r7, r0
 8009de4:	eba8 0800 	sub.w	r8, r8, r0
 8009de8:	e7e9      	b.n	8009dbe <__sflush_r+0xda>
 8009dea:	bf00      	nop
 8009dec:	20400001 	.word	0x20400001

08009df0 <_fflush_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	690b      	ldr	r3, [r1, #16]
 8009df4:	4605      	mov	r5, r0
 8009df6:	460c      	mov	r4, r1
 8009df8:	b913      	cbnz	r3, 8009e00 <_fflush_r+0x10>
 8009dfa:	2500      	movs	r5, #0
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	bd38      	pop	{r3, r4, r5, pc}
 8009e00:	b118      	cbz	r0, 8009e0a <_fflush_r+0x1a>
 8009e02:	6983      	ldr	r3, [r0, #24]
 8009e04:	b90b      	cbnz	r3, 8009e0a <_fflush_r+0x1a>
 8009e06:	f000 f887 	bl	8009f18 <__sinit>
 8009e0a:	4b14      	ldr	r3, [pc, #80]	; (8009e5c <_fflush_r+0x6c>)
 8009e0c:	429c      	cmp	r4, r3
 8009e0e:	d11b      	bne.n	8009e48 <_fflush_r+0x58>
 8009e10:	686c      	ldr	r4, [r5, #4]
 8009e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d0ef      	beq.n	8009dfa <_fflush_r+0xa>
 8009e1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e1c:	07d0      	lsls	r0, r2, #31
 8009e1e:	d404      	bmi.n	8009e2a <_fflush_r+0x3a>
 8009e20:	0599      	lsls	r1, r3, #22
 8009e22:	d402      	bmi.n	8009e2a <_fflush_r+0x3a>
 8009e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e26:	f000 f91a 	bl	800a05e <__retarget_lock_acquire_recursive>
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	4621      	mov	r1, r4
 8009e2e:	f7ff ff59 	bl	8009ce4 <__sflush_r>
 8009e32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e34:	07da      	lsls	r2, r3, #31
 8009e36:	4605      	mov	r5, r0
 8009e38:	d4e0      	bmi.n	8009dfc <_fflush_r+0xc>
 8009e3a:	89a3      	ldrh	r3, [r4, #12]
 8009e3c:	059b      	lsls	r3, r3, #22
 8009e3e:	d4dd      	bmi.n	8009dfc <_fflush_r+0xc>
 8009e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e42:	f000 f90d 	bl	800a060 <__retarget_lock_release_recursive>
 8009e46:	e7d9      	b.n	8009dfc <_fflush_r+0xc>
 8009e48:	4b05      	ldr	r3, [pc, #20]	; (8009e60 <_fflush_r+0x70>)
 8009e4a:	429c      	cmp	r4, r3
 8009e4c:	d101      	bne.n	8009e52 <_fflush_r+0x62>
 8009e4e:	68ac      	ldr	r4, [r5, #8]
 8009e50:	e7df      	b.n	8009e12 <_fflush_r+0x22>
 8009e52:	4b04      	ldr	r3, [pc, #16]	; (8009e64 <_fflush_r+0x74>)
 8009e54:	429c      	cmp	r4, r3
 8009e56:	bf08      	it	eq
 8009e58:	68ec      	ldreq	r4, [r5, #12]
 8009e5a:	e7da      	b.n	8009e12 <_fflush_r+0x22>
 8009e5c:	0800d220 	.word	0x0800d220
 8009e60:	0800d240 	.word	0x0800d240
 8009e64:	0800d200 	.word	0x0800d200

08009e68 <std>:
 8009e68:	2300      	movs	r3, #0
 8009e6a:	b510      	push	{r4, lr}
 8009e6c:	4604      	mov	r4, r0
 8009e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8009e72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e76:	6083      	str	r3, [r0, #8]
 8009e78:	8181      	strh	r1, [r0, #12]
 8009e7a:	6643      	str	r3, [r0, #100]	; 0x64
 8009e7c:	81c2      	strh	r2, [r0, #14]
 8009e7e:	6183      	str	r3, [r0, #24]
 8009e80:	4619      	mov	r1, r3
 8009e82:	2208      	movs	r2, #8
 8009e84:	305c      	adds	r0, #92	; 0x5c
 8009e86:	f7fe fb73 	bl	8008570 <memset>
 8009e8a:	4b05      	ldr	r3, [pc, #20]	; (8009ea0 <std+0x38>)
 8009e8c:	6263      	str	r3, [r4, #36]	; 0x24
 8009e8e:	4b05      	ldr	r3, [pc, #20]	; (8009ea4 <std+0x3c>)
 8009e90:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e92:	4b05      	ldr	r3, [pc, #20]	; (8009ea8 <std+0x40>)
 8009e94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e96:	4b05      	ldr	r3, [pc, #20]	; (8009eac <std+0x44>)
 8009e98:	6224      	str	r4, [r4, #32]
 8009e9a:	6323      	str	r3, [r4, #48]	; 0x30
 8009e9c:	bd10      	pop	{r4, pc}
 8009e9e:	bf00      	nop
 8009ea0:	0800aa51 	.word	0x0800aa51
 8009ea4:	0800aa73 	.word	0x0800aa73
 8009ea8:	0800aaab 	.word	0x0800aaab
 8009eac:	0800aacf 	.word	0x0800aacf

08009eb0 <_cleanup_r>:
 8009eb0:	4901      	ldr	r1, [pc, #4]	; (8009eb8 <_cleanup_r+0x8>)
 8009eb2:	f000 b8af 	b.w	800a014 <_fwalk_reent>
 8009eb6:	bf00      	nop
 8009eb8:	08009df1 	.word	0x08009df1

08009ebc <__sfmoreglue>:
 8009ebc:	b570      	push	{r4, r5, r6, lr}
 8009ebe:	2268      	movs	r2, #104	; 0x68
 8009ec0:	1e4d      	subs	r5, r1, #1
 8009ec2:	4355      	muls	r5, r2
 8009ec4:	460e      	mov	r6, r1
 8009ec6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009eca:	f000 fd3d 	bl	800a948 <_malloc_r>
 8009ece:	4604      	mov	r4, r0
 8009ed0:	b140      	cbz	r0, 8009ee4 <__sfmoreglue+0x28>
 8009ed2:	2100      	movs	r1, #0
 8009ed4:	e9c0 1600 	strd	r1, r6, [r0]
 8009ed8:	300c      	adds	r0, #12
 8009eda:	60a0      	str	r0, [r4, #8]
 8009edc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ee0:	f7fe fb46 	bl	8008570 <memset>
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	bd70      	pop	{r4, r5, r6, pc}

08009ee8 <__sfp_lock_acquire>:
 8009ee8:	4801      	ldr	r0, [pc, #4]	; (8009ef0 <__sfp_lock_acquire+0x8>)
 8009eea:	f000 b8b8 	b.w	800a05e <__retarget_lock_acquire_recursive>
 8009eee:	bf00      	nop
 8009ef0:	20000b31 	.word	0x20000b31

08009ef4 <__sfp_lock_release>:
 8009ef4:	4801      	ldr	r0, [pc, #4]	; (8009efc <__sfp_lock_release+0x8>)
 8009ef6:	f000 b8b3 	b.w	800a060 <__retarget_lock_release_recursive>
 8009efa:	bf00      	nop
 8009efc:	20000b31 	.word	0x20000b31

08009f00 <__sinit_lock_acquire>:
 8009f00:	4801      	ldr	r0, [pc, #4]	; (8009f08 <__sinit_lock_acquire+0x8>)
 8009f02:	f000 b8ac 	b.w	800a05e <__retarget_lock_acquire_recursive>
 8009f06:	bf00      	nop
 8009f08:	20000b32 	.word	0x20000b32

08009f0c <__sinit_lock_release>:
 8009f0c:	4801      	ldr	r0, [pc, #4]	; (8009f14 <__sinit_lock_release+0x8>)
 8009f0e:	f000 b8a7 	b.w	800a060 <__retarget_lock_release_recursive>
 8009f12:	bf00      	nop
 8009f14:	20000b32 	.word	0x20000b32

08009f18 <__sinit>:
 8009f18:	b510      	push	{r4, lr}
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	f7ff fff0 	bl	8009f00 <__sinit_lock_acquire>
 8009f20:	69a3      	ldr	r3, [r4, #24]
 8009f22:	b11b      	cbz	r3, 8009f2c <__sinit+0x14>
 8009f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f28:	f7ff bff0 	b.w	8009f0c <__sinit_lock_release>
 8009f2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f30:	6523      	str	r3, [r4, #80]	; 0x50
 8009f32:	4b13      	ldr	r3, [pc, #76]	; (8009f80 <__sinit+0x68>)
 8009f34:	4a13      	ldr	r2, [pc, #76]	; (8009f84 <__sinit+0x6c>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f3a:	42a3      	cmp	r3, r4
 8009f3c:	bf04      	itt	eq
 8009f3e:	2301      	moveq	r3, #1
 8009f40:	61a3      	streq	r3, [r4, #24]
 8009f42:	4620      	mov	r0, r4
 8009f44:	f000 f820 	bl	8009f88 <__sfp>
 8009f48:	6060      	str	r0, [r4, #4]
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f000 f81c 	bl	8009f88 <__sfp>
 8009f50:	60a0      	str	r0, [r4, #8]
 8009f52:	4620      	mov	r0, r4
 8009f54:	f000 f818 	bl	8009f88 <__sfp>
 8009f58:	2200      	movs	r2, #0
 8009f5a:	60e0      	str	r0, [r4, #12]
 8009f5c:	2104      	movs	r1, #4
 8009f5e:	6860      	ldr	r0, [r4, #4]
 8009f60:	f7ff ff82 	bl	8009e68 <std>
 8009f64:	68a0      	ldr	r0, [r4, #8]
 8009f66:	2201      	movs	r2, #1
 8009f68:	2109      	movs	r1, #9
 8009f6a:	f7ff ff7d 	bl	8009e68 <std>
 8009f6e:	68e0      	ldr	r0, [r4, #12]
 8009f70:	2202      	movs	r2, #2
 8009f72:	2112      	movs	r1, #18
 8009f74:	f7ff ff78 	bl	8009e68 <std>
 8009f78:	2301      	movs	r3, #1
 8009f7a:	61a3      	str	r3, [r4, #24]
 8009f7c:	e7d2      	b.n	8009f24 <__sinit+0xc>
 8009f7e:	bf00      	nop
 8009f80:	0800d138 	.word	0x0800d138
 8009f84:	08009eb1 	.word	0x08009eb1

08009f88 <__sfp>:
 8009f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f8a:	4607      	mov	r7, r0
 8009f8c:	f7ff ffac 	bl	8009ee8 <__sfp_lock_acquire>
 8009f90:	4b1e      	ldr	r3, [pc, #120]	; (800a00c <__sfp+0x84>)
 8009f92:	681e      	ldr	r6, [r3, #0]
 8009f94:	69b3      	ldr	r3, [r6, #24]
 8009f96:	b913      	cbnz	r3, 8009f9e <__sfp+0x16>
 8009f98:	4630      	mov	r0, r6
 8009f9a:	f7ff ffbd 	bl	8009f18 <__sinit>
 8009f9e:	3648      	adds	r6, #72	; 0x48
 8009fa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	d503      	bpl.n	8009fb0 <__sfp+0x28>
 8009fa8:	6833      	ldr	r3, [r6, #0]
 8009faa:	b30b      	cbz	r3, 8009ff0 <__sfp+0x68>
 8009fac:	6836      	ldr	r6, [r6, #0]
 8009fae:	e7f7      	b.n	8009fa0 <__sfp+0x18>
 8009fb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009fb4:	b9d5      	cbnz	r5, 8009fec <__sfp+0x64>
 8009fb6:	4b16      	ldr	r3, [pc, #88]	; (800a010 <__sfp+0x88>)
 8009fb8:	60e3      	str	r3, [r4, #12]
 8009fba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fbe:	6665      	str	r5, [r4, #100]	; 0x64
 8009fc0:	f000 f84c 	bl	800a05c <__retarget_lock_init_recursive>
 8009fc4:	f7ff ff96 	bl	8009ef4 <__sfp_lock_release>
 8009fc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009fcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009fd0:	6025      	str	r5, [r4, #0]
 8009fd2:	61a5      	str	r5, [r4, #24]
 8009fd4:	2208      	movs	r2, #8
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009fdc:	f7fe fac8 	bl	8008570 <memset>
 8009fe0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009fe4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009fe8:	4620      	mov	r0, r4
 8009fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fec:	3468      	adds	r4, #104	; 0x68
 8009fee:	e7d9      	b.n	8009fa4 <__sfp+0x1c>
 8009ff0:	2104      	movs	r1, #4
 8009ff2:	4638      	mov	r0, r7
 8009ff4:	f7ff ff62 	bl	8009ebc <__sfmoreglue>
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	6030      	str	r0, [r6, #0]
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d1d5      	bne.n	8009fac <__sfp+0x24>
 800a000:	f7ff ff78 	bl	8009ef4 <__sfp_lock_release>
 800a004:	230c      	movs	r3, #12
 800a006:	603b      	str	r3, [r7, #0]
 800a008:	e7ee      	b.n	8009fe8 <__sfp+0x60>
 800a00a:	bf00      	nop
 800a00c:	0800d138 	.word	0x0800d138
 800a010:	ffff0001 	.word	0xffff0001

0800a014 <_fwalk_reent>:
 800a014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a018:	4606      	mov	r6, r0
 800a01a:	4688      	mov	r8, r1
 800a01c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a020:	2700      	movs	r7, #0
 800a022:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a026:	f1b9 0901 	subs.w	r9, r9, #1
 800a02a:	d505      	bpl.n	800a038 <_fwalk_reent+0x24>
 800a02c:	6824      	ldr	r4, [r4, #0]
 800a02e:	2c00      	cmp	r4, #0
 800a030:	d1f7      	bne.n	800a022 <_fwalk_reent+0xe>
 800a032:	4638      	mov	r0, r7
 800a034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a038:	89ab      	ldrh	r3, [r5, #12]
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d907      	bls.n	800a04e <_fwalk_reent+0x3a>
 800a03e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a042:	3301      	adds	r3, #1
 800a044:	d003      	beq.n	800a04e <_fwalk_reent+0x3a>
 800a046:	4629      	mov	r1, r5
 800a048:	4630      	mov	r0, r6
 800a04a:	47c0      	blx	r8
 800a04c:	4307      	orrs	r7, r0
 800a04e:	3568      	adds	r5, #104	; 0x68
 800a050:	e7e9      	b.n	800a026 <_fwalk_reent+0x12>
	...

0800a054 <_localeconv_r>:
 800a054:	4800      	ldr	r0, [pc, #0]	; (800a058 <_localeconv_r+0x4>)
 800a056:	4770      	bx	lr
 800a058:	2000016c 	.word	0x2000016c

0800a05c <__retarget_lock_init_recursive>:
 800a05c:	4770      	bx	lr

0800a05e <__retarget_lock_acquire_recursive>:
 800a05e:	4770      	bx	lr

0800a060 <__retarget_lock_release_recursive>:
 800a060:	4770      	bx	lr

0800a062 <__swhatbuf_r>:
 800a062:	b570      	push	{r4, r5, r6, lr}
 800a064:	460e      	mov	r6, r1
 800a066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a06a:	2900      	cmp	r1, #0
 800a06c:	b096      	sub	sp, #88	; 0x58
 800a06e:	4614      	mov	r4, r2
 800a070:	461d      	mov	r5, r3
 800a072:	da08      	bge.n	800a086 <__swhatbuf_r+0x24>
 800a074:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	602a      	str	r2, [r5, #0]
 800a07c:	061a      	lsls	r2, r3, #24
 800a07e:	d410      	bmi.n	800a0a2 <__swhatbuf_r+0x40>
 800a080:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a084:	e00e      	b.n	800a0a4 <__swhatbuf_r+0x42>
 800a086:	466a      	mov	r2, sp
 800a088:	f000 fd78 	bl	800ab7c <_fstat_r>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	dbf1      	blt.n	800a074 <__swhatbuf_r+0x12>
 800a090:	9a01      	ldr	r2, [sp, #4]
 800a092:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a096:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a09a:	425a      	negs	r2, r3
 800a09c:	415a      	adcs	r2, r3
 800a09e:	602a      	str	r2, [r5, #0]
 800a0a0:	e7ee      	b.n	800a080 <__swhatbuf_r+0x1e>
 800a0a2:	2340      	movs	r3, #64	; 0x40
 800a0a4:	2000      	movs	r0, #0
 800a0a6:	6023      	str	r3, [r4, #0]
 800a0a8:	b016      	add	sp, #88	; 0x58
 800a0aa:	bd70      	pop	{r4, r5, r6, pc}

0800a0ac <__smakebuf_r>:
 800a0ac:	898b      	ldrh	r3, [r1, #12]
 800a0ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0b0:	079d      	lsls	r5, r3, #30
 800a0b2:	4606      	mov	r6, r0
 800a0b4:	460c      	mov	r4, r1
 800a0b6:	d507      	bpl.n	800a0c8 <__smakebuf_r+0x1c>
 800a0b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0bc:	6023      	str	r3, [r4, #0]
 800a0be:	6123      	str	r3, [r4, #16]
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	6163      	str	r3, [r4, #20]
 800a0c4:	b002      	add	sp, #8
 800a0c6:	bd70      	pop	{r4, r5, r6, pc}
 800a0c8:	ab01      	add	r3, sp, #4
 800a0ca:	466a      	mov	r2, sp
 800a0cc:	f7ff ffc9 	bl	800a062 <__swhatbuf_r>
 800a0d0:	9900      	ldr	r1, [sp, #0]
 800a0d2:	4605      	mov	r5, r0
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	f000 fc37 	bl	800a948 <_malloc_r>
 800a0da:	b948      	cbnz	r0, 800a0f0 <__smakebuf_r+0x44>
 800a0dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0e0:	059a      	lsls	r2, r3, #22
 800a0e2:	d4ef      	bmi.n	800a0c4 <__smakebuf_r+0x18>
 800a0e4:	f023 0303 	bic.w	r3, r3, #3
 800a0e8:	f043 0302 	orr.w	r3, r3, #2
 800a0ec:	81a3      	strh	r3, [r4, #12]
 800a0ee:	e7e3      	b.n	800a0b8 <__smakebuf_r+0xc>
 800a0f0:	4b0d      	ldr	r3, [pc, #52]	; (800a128 <__smakebuf_r+0x7c>)
 800a0f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0f4:	89a3      	ldrh	r3, [r4, #12]
 800a0f6:	6020      	str	r0, [r4, #0]
 800a0f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0fc:	81a3      	strh	r3, [r4, #12]
 800a0fe:	9b00      	ldr	r3, [sp, #0]
 800a100:	6163      	str	r3, [r4, #20]
 800a102:	9b01      	ldr	r3, [sp, #4]
 800a104:	6120      	str	r0, [r4, #16]
 800a106:	b15b      	cbz	r3, 800a120 <__smakebuf_r+0x74>
 800a108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a10c:	4630      	mov	r0, r6
 800a10e:	f000 fd47 	bl	800aba0 <_isatty_r>
 800a112:	b128      	cbz	r0, 800a120 <__smakebuf_r+0x74>
 800a114:	89a3      	ldrh	r3, [r4, #12]
 800a116:	f023 0303 	bic.w	r3, r3, #3
 800a11a:	f043 0301 	orr.w	r3, r3, #1
 800a11e:	81a3      	strh	r3, [r4, #12]
 800a120:	89a0      	ldrh	r0, [r4, #12]
 800a122:	4305      	orrs	r5, r0
 800a124:	81a5      	strh	r5, [r4, #12]
 800a126:	e7cd      	b.n	800a0c4 <__smakebuf_r+0x18>
 800a128:	08009eb1 	.word	0x08009eb1

0800a12c <malloc>:
 800a12c:	4b02      	ldr	r3, [pc, #8]	; (800a138 <malloc+0xc>)
 800a12e:	4601      	mov	r1, r0
 800a130:	6818      	ldr	r0, [r3, #0]
 800a132:	f000 bc09 	b.w	800a948 <_malloc_r>
 800a136:	bf00      	nop
 800a138:	20000018 	.word	0x20000018

0800a13c <_Balloc>:
 800a13c:	b570      	push	{r4, r5, r6, lr}
 800a13e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a140:	4604      	mov	r4, r0
 800a142:	460d      	mov	r5, r1
 800a144:	b976      	cbnz	r6, 800a164 <_Balloc+0x28>
 800a146:	2010      	movs	r0, #16
 800a148:	f7ff fff0 	bl	800a12c <malloc>
 800a14c:	4602      	mov	r2, r0
 800a14e:	6260      	str	r0, [r4, #36]	; 0x24
 800a150:	b920      	cbnz	r0, 800a15c <_Balloc+0x20>
 800a152:	4b18      	ldr	r3, [pc, #96]	; (800a1b4 <_Balloc+0x78>)
 800a154:	4818      	ldr	r0, [pc, #96]	; (800a1b8 <_Balloc+0x7c>)
 800a156:	2166      	movs	r1, #102	; 0x66
 800a158:	f000 fcd0 	bl	800aafc <__assert_func>
 800a15c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a160:	6006      	str	r6, [r0, #0]
 800a162:	60c6      	str	r6, [r0, #12]
 800a164:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a166:	68f3      	ldr	r3, [r6, #12]
 800a168:	b183      	cbz	r3, 800a18c <_Balloc+0x50>
 800a16a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a172:	b9b8      	cbnz	r0, 800a1a4 <_Balloc+0x68>
 800a174:	2101      	movs	r1, #1
 800a176:	fa01 f605 	lsl.w	r6, r1, r5
 800a17a:	1d72      	adds	r2, r6, #5
 800a17c:	0092      	lsls	r2, r2, #2
 800a17e:	4620      	mov	r0, r4
 800a180:	f000 fb60 	bl	800a844 <_calloc_r>
 800a184:	b160      	cbz	r0, 800a1a0 <_Balloc+0x64>
 800a186:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a18a:	e00e      	b.n	800a1aa <_Balloc+0x6e>
 800a18c:	2221      	movs	r2, #33	; 0x21
 800a18e:	2104      	movs	r1, #4
 800a190:	4620      	mov	r0, r4
 800a192:	f000 fb57 	bl	800a844 <_calloc_r>
 800a196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a198:	60f0      	str	r0, [r6, #12]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d1e4      	bne.n	800a16a <_Balloc+0x2e>
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	bd70      	pop	{r4, r5, r6, pc}
 800a1a4:	6802      	ldr	r2, [r0, #0]
 800a1a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1b0:	e7f7      	b.n	800a1a2 <_Balloc+0x66>
 800a1b2:	bf00      	nop
 800a1b4:	0800d17d 	.word	0x0800d17d
 800a1b8:	0800d260 	.word	0x0800d260

0800a1bc <_Bfree>:
 800a1bc:	b570      	push	{r4, r5, r6, lr}
 800a1be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1c0:	4605      	mov	r5, r0
 800a1c2:	460c      	mov	r4, r1
 800a1c4:	b976      	cbnz	r6, 800a1e4 <_Bfree+0x28>
 800a1c6:	2010      	movs	r0, #16
 800a1c8:	f7ff ffb0 	bl	800a12c <malloc>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	6268      	str	r0, [r5, #36]	; 0x24
 800a1d0:	b920      	cbnz	r0, 800a1dc <_Bfree+0x20>
 800a1d2:	4b09      	ldr	r3, [pc, #36]	; (800a1f8 <_Bfree+0x3c>)
 800a1d4:	4809      	ldr	r0, [pc, #36]	; (800a1fc <_Bfree+0x40>)
 800a1d6:	218a      	movs	r1, #138	; 0x8a
 800a1d8:	f000 fc90 	bl	800aafc <__assert_func>
 800a1dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1e0:	6006      	str	r6, [r0, #0]
 800a1e2:	60c6      	str	r6, [r0, #12]
 800a1e4:	b13c      	cbz	r4, 800a1f6 <_Bfree+0x3a>
 800a1e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a1e8:	6862      	ldr	r2, [r4, #4]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1f0:	6021      	str	r1, [r4, #0]
 800a1f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1f6:	bd70      	pop	{r4, r5, r6, pc}
 800a1f8:	0800d17d 	.word	0x0800d17d
 800a1fc:	0800d260 	.word	0x0800d260

0800a200 <__multadd>:
 800a200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a204:	690d      	ldr	r5, [r1, #16]
 800a206:	4607      	mov	r7, r0
 800a208:	460c      	mov	r4, r1
 800a20a:	461e      	mov	r6, r3
 800a20c:	f101 0c14 	add.w	ip, r1, #20
 800a210:	2000      	movs	r0, #0
 800a212:	f8dc 3000 	ldr.w	r3, [ip]
 800a216:	b299      	uxth	r1, r3
 800a218:	fb02 6101 	mla	r1, r2, r1, r6
 800a21c:	0c1e      	lsrs	r6, r3, #16
 800a21e:	0c0b      	lsrs	r3, r1, #16
 800a220:	fb02 3306 	mla	r3, r2, r6, r3
 800a224:	b289      	uxth	r1, r1
 800a226:	3001      	adds	r0, #1
 800a228:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a22c:	4285      	cmp	r5, r0
 800a22e:	f84c 1b04 	str.w	r1, [ip], #4
 800a232:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a236:	dcec      	bgt.n	800a212 <__multadd+0x12>
 800a238:	b30e      	cbz	r6, 800a27e <__multadd+0x7e>
 800a23a:	68a3      	ldr	r3, [r4, #8]
 800a23c:	42ab      	cmp	r3, r5
 800a23e:	dc19      	bgt.n	800a274 <__multadd+0x74>
 800a240:	6861      	ldr	r1, [r4, #4]
 800a242:	4638      	mov	r0, r7
 800a244:	3101      	adds	r1, #1
 800a246:	f7ff ff79 	bl	800a13c <_Balloc>
 800a24a:	4680      	mov	r8, r0
 800a24c:	b928      	cbnz	r0, 800a25a <__multadd+0x5a>
 800a24e:	4602      	mov	r2, r0
 800a250:	4b0c      	ldr	r3, [pc, #48]	; (800a284 <__multadd+0x84>)
 800a252:	480d      	ldr	r0, [pc, #52]	; (800a288 <__multadd+0x88>)
 800a254:	21b5      	movs	r1, #181	; 0xb5
 800a256:	f000 fc51 	bl	800aafc <__assert_func>
 800a25a:	6922      	ldr	r2, [r4, #16]
 800a25c:	3202      	adds	r2, #2
 800a25e:	f104 010c 	add.w	r1, r4, #12
 800a262:	0092      	lsls	r2, r2, #2
 800a264:	300c      	adds	r0, #12
 800a266:	f7fe f975 	bl	8008554 <memcpy>
 800a26a:	4621      	mov	r1, r4
 800a26c:	4638      	mov	r0, r7
 800a26e:	f7ff ffa5 	bl	800a1bc <_Bfree>
 800a272:	4644      	mov	r4, r8
 800a274:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a278:	3501      	adds	r5, #1
 800a27a:	615e      	str	r6, [r3, #20]
 800a27c:	6125      	str	r5, [r4, #16]
 800a27e:	4620      	mov	r0, r4
 800a280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a284:	0800d1ef 	.word	0x0800d1ef
 800a288:	0800d260 	.word	0x0800d260

0800a28c <__hi0bits>:
 800a28c:	0c03      	lsrs	r3, r0, #16
 800a28e:	041b      	lsls	r3, r3, #16
 800a290:	b9d3      	cbnz	r3, 800a2c8 <__hi0bits+0x3c>
 800a292:	0400      	lsls	r0, r0, #16
 800a294:	2310      	movs	r3, #16
 800a296:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a29a:	bf04      	itt	eq
 800a29c:	0200      	lsleq	r0, r0, #8
 800a29e:	3308      	addeq	r3, #8
 800a2a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a2a4:	bf04      	itt	eq
 800a2a6:	0100      	lsleq	r0, r0, #4
 800a2a8:	3304      	addeq	r3, #4
 800a2aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a2ae:	bf04      	itt	eq
 800a2b0:	0080      	lsleq	r0, r0, #2
 800a2b2:	3302      	addeq	r3, #2
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	db05      	blt.n	800a2c4 <__hi0bits+0x38>
 800a2b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a2bc:	f103 0301 	add.w	r3, r3, #1
 800a2c0:	bf08      	it	eq
 800a2c2:	2320      	moveq	r3, #32
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	4770      	bx	lr
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	e7e4      	b.n	800a296 <__hi0bits+0xa>

0800a2cc <__lo0bits>:
 800a2cc:	6803      	ldr	r3, [r0, #0]
 800a2ce:	f013 0207 	ands.w	r2, r3, #7
 800a2d2:	4601      	mov	r1, r0
 800a2d4:	d00b      	beq.n	800a2ee <__lo0bits+0x22>
 800a2d6:	07da      	lsls	r2, r3, #31
 800a2d8:	d423      	bmi.n	800a322 <__lo0bits+0x56>
 800a2da:	0798      	lsls	r0, r3, #30
 800a2dc:	bf49      	itett	mi
 800a2de:	085b      	lsrmi	r3, r3, #1
 800a2e0:	089b      	lsrpl	r3, r3, #2
 800a2e2:	2001      	movmi	r0, #1
 800a2e4:	600b      	strmi	r3, [r1, #0]
 800a2e6:	bf5c      	itt	pl
 800a2e8:	600b      	strpl	r3, [r1, #0]
 800a2ea:	2002      	movpl	r0, #2
 800a2ec:	4770      	bx	lr
 800a2ee:	b298      	uxth	r0, r3
 800a2f0:	b9a8      	cbnz	r0, 800a31e <__lo0bits+0x52>
 800a2f2:	0c1b      	lsrs	r3, r3, #16
 800a2f4:	2010      	movs	r0, #16
 800a2f6:	b2da      	uxtb	r2, r3
 800a2f8:	b90a      	cbnz	r2, 800a2fe <__lo0bits+0x32>
 800a2fa:	3008      	adds	r0, #8
 800a2fc:	0a1b      	lsrs	r3, r3, #8
 800a2fe:	071a      	lsls	r2, r3, #28
 800a300:	bf04      	itt	eq
 800a302:	091b      	lsreq	r3, r3, #4
 800a304:	3004      	addeq	r0, #4
 800a306:	079a      	lsls	r2, r3, #30
 800a308:	bf04      	itt	eq
 800a30a:	089b      	lsreq	r3, r3, #2
 800a30c:	3002      	addeq	r0, #2
 800a30e:	07da      	lsls	r2, r3, #31
 800a310:	d403      	bmi.n	800a31a <__lo0bits+0x4e>
 800a312:	085b      	lsrs	r3, r3, #1
 800a314:	f100 0001 	add.w	r0, r0, #1
 800a318:	d005      	beq.n	800a326 <__lo0bits+0x5a>
 800a31a:	600b      	str	r3, [r1, #0]
 800a31c:	4770      	bx	lr
 800a31e:	4610      	mov	r0, r2
 800a320:	e7e9      	b.n	800a2f6 <__lo0bits+0x2a>
 800a322:	2000      	movs	r0, #0
 800a324:	4770      	bx	lr
 800a326:	2020      	movs	r0, #32
 800a328:	4770      	bx	lr
	...

0800a32c <__i2b>:
 800a32c:	b510      	push	{r4, lr}
 800a32e:	460c      	mov	r4, r1
 800a330:	2101      	movs	r1, #1
 800a332:	f7ff ff03 	bl	800a13c <_Balloc>
 800a336:	4602      	mov	r2, r0
 800a338:	b928      	cbnz	r0, 800a346 <__i2b+0x1a>
 800a33a:	4b05      	ldr	r3, [pc, #20]	; (800a350 <__i2b+0x24>)
 800a33c:	4805      	ldr	r0, [pc, #20]	; (800a354 <__i2b+0x28>)
 800a33e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a342:	f000 fbdb 	bl	800aafc <__assert_func>
 800a346:	2301      	movs	r3, #1
 800a348:	6144      	str	r4, [r0, #20]
 800a34a:	6103      	str	r3, [r0, #16]
 800a34c:	bd10      	pop	{r4, pc}
 800a34e:	bf00      	nop
 800a350:	0800d1ef 	.word	0x0800d1ef
 800a354:	0800d260 	.word	0x0800d260

0800a358 <__multiply>:
 800a358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35c:	4691      	mov	r9, r2
 800a35e:	690a      	ldr	r2, [r1, #16]
 800a360:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a364:	429a      	cmp	r2, r3
 800a366:	bfb8      	it	lt
 800a368:	460b      	movlt	r3, r1
 800a36a:	460c      	mov	r4, r1
 800a36c:	bfbc      	itt	lt
 800a36e:	464c      	movlt	r4, r9
 800a370:	4699      	movlt	r9, r3
 800a372:	6927      	ldr	r7, [r4, #16]
 800a374:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a378:	68a3      	ldr	r3, [r4, #8]
 800a37a:	6861      	ldr	r1, [r4, #4]
 800a37c:	eb07 060a 	add.w	r6, r7, sl
 800a380:	42b3      	cmp	r3, r6
 800a382:	b085      	sub	sp, #20
 800a384:	bfb8      	it	lt
 800a386:	3101      	addlt	r1, #1
 800a388:	f7ff fed8 	bl	800a13c <_Balloc>
 800a38c:	b930      	cbnz	r0, 800a39c <__multiply+0x44>
 800a38e:	4602      	mov	r2, r0
 800a390:	4b44      	ldr	r3, [pc, #272]	; (800a4a4 <__multiply+0x14c>)
 800a392:	4845      	ldr	r0, [pc, #276]	; (800a4a8 <__multiply+0x150>)
 800a394:	f240 115d 	movw	r1, #349	; 0x15d
 800a398:	f000 fbb0 	bl	800aafc <__assert_func>
 800a39c:	f100 0514 	add.w	r5, r0, #20
 800a3a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a3a4:	462b      	mov	r3, r5
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	4543      	cmp	r3, r8
 800a3aa:	d321      	bcc.n	800a3f0 <__multiply+0x98>
 800a3ac:	f104 0314 	add.w	r3, r4, #20
 800a3b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a3b4:	f109 0314 	add.w	r3, r9, #20
 800a3b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a3bc:	9202      	str	r2, [sp, #8]
 800a3be:	1b3a      	subs	r2, r7, r4
 800a3c0:	3a15      	subs	r2, #21
 800a3c2:	f022 0203 	bic.w	r2, r2, #3
 800a3c6:	3204      	adds	r2, #4
 800a3c8:	f104 0115 	add.w	r1, r4, #21
 800a3cc:	428f      	cmp	r7, r1
 800a3ce:	bf38      	it	cc
 800a3d0:	2204      	movcc	r2, #4
 800a3d2:	9201      	str	r2, [sp, #4]
 800a3d4:	9a02      	ldr	r2, [sp, #8]
 800a3d6:	9303      	str	r3, [sp, #12]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d80c      	bhi.n	800a3f6 <__multiply+0x9e>
 800a3dc:	2e00      	cmp	r6, #0
 800a3de:	dd03      	ble.n	800a3e8 <__multiply+0x90>
 800a3e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d05a      	beq.n	800a49e <__multiply+0x146>
 800a3e8:	6106      	str	r6, [r0, #16]
 800a3ea:	b005      	add	sp, #20
 800a3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f0:	f843 2b04 	str.w	r2, [r3], #4
 800a3f4:	e7d8      	b.n	800a3a8 <__multiply+0x50>
 800a3f6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a3fa:	f1ba 0f00 	cmp.w	sl, #0
 800a3fe:	d024      	beq.n	800a44a <__multiply+0xf2>
 800a400:	f104 0e14 	add.w	lr, r4, #20
 800a404:	46a9      	mov	r9, r5
 800a406:	f04f 0c00 	mov.w	ip, #0
 800a40a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a40e:	f8d9 1000 	ldr.w	r1, [r9]
 800a412:	fa1f fb82 	uxth.w	fp, r2
 800a416:	b289      	uxth	r1, r1
 800a418:	fb0a 110b 	mla	r1, sl, fp, r1
 800a41c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a420:	f8d9 2000 	ldr.w	r2, [r9]
 800a424:	4461      	add	r1, ip
 800a426:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a42a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a42e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a432:	b289      	uxth	r1, r1
 800a434:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a438:	4577      	cmp	r7, lr
 800a43a:	f849 1b04 	str.w	r1, [r9], #4
 800a43e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a442:	d8e2      	bhi.n	800a40a <__multiply+0xb2>
 800a444:	9a01      	ldr	r2, [sp, #4]
 800a446:	f845 c002 	str.w	ip, [r5, r2]
 800a44a:	9a03      	ldr	r2, [sp, #12]
 800a44c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a450:	3304      	adds	r3, #4
 800a452:	f1b9 0f00 	cmp.w	r9, #0
 800a456:	d020      	beq.n	800a49a <__multiply+0x142>
 800a458:	6829      	ldr	r1, [r5, #0]
 800a45a:	f104 0c14 	add.w	ip, r4, #20
 800a45e:	46ae      	mov	lr, r5
 800a460:	f04f 0a00 	mov.w	sl, #0
 800a464:	f8bc b000 	ldrh.w	fp, [ip]
 800a468:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a46c:	fb09 220b 	mla	r2, r9, fp, r2
 800a470:	4492      	add	sl, r2
 800a472:	b289      	uxth	r1, r1
 800a474:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a478:	f84e 1b04 	str.w	r1, [lr], #4
 800a47c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a480:	f8be 1000 	ldrh.w	r1, [lr]
 800a484:	0c12      	lsrs	r2, r2, #16
 800a486:	fb09 1102 	mla	r1, r9, r2, r1
 800a48a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a48e:	4567      	cmp	r7, ip
 800a490:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a494:	d8e6      	bhi.n	800a464 <__multiply+0x10c>
 800a496:	9a01      	ldr	r2, [sp, #4]
 800a498:	50a9      	str	r1, [r5, r2]
 800a49a:	3504      	adds	r5, #4
 800a49c:	e79a      	b.n	800a3d4 <__multiply+0x7c>
 800a49e:	3e01      	subs	r6, #1
 800a4a0:	e79c      	b.n	800a3dc <__multiply+0x84>
 800a4a2:	bf00      	nop
 800a4a4:	0800d1ef 	.word	0x0800d1ef
 800a4a8:	0800d260 	.word	0x0800d260

0800a4ac <__pow5mult>:
 800a4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4b0:	4615      	mov	r5, r2
 800a4b2:	f012 0203 	ands.w	r2, r2, #3
 800a4b6:	4606      	mov	r6, r0
 800a4b8:	460f      	mov	r7, r1
 800a4ba:	d007      	beq.n	800a4cc <__pow5mult+0x20>
 800a4bc:	4c25      	ldr	r4, [pc, #148]	; (800a554 <__pow5mult+0xa8>)
 800a4be:	3a01      	subs	r2, #1
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4c6:	f7ff fe9b 	bl	800a200 <__multadd>
 800a4ca:	4607      	mov	r7, r0
 800a4cc:	10ad      	asrs	r5, r5, #2
 800a4ce:	d03d      	beq.n	800a54c <__pow5mult+0xa0>
 800a4d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a4d2:	b97c      	cbnz	r4, 800a4f4 <__pow5mult+0x48>
 800a4d4:	2010      	movs	r0, #16
 800a4d6:	f7ff fe29 	bl	800a12c <malloc>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	6270      	str	r0, [r6, #36]	; 0x24
 800a4de:	b928      	cbnz	r0, 800a4ec <__pow5mult+0x40>
 800a4e0:	4b1d      	ldr	r3, [pc, #116]	; (800a558 <__pow5mult+0xac>)
 800a4e2:	481e      	ldr	r0, [pc, #120]	; (800a55c <__pow5mult+0xb0>)
 800a4e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a4e8:	f000 fb08 	bl	800aafc <__assert_func>
 800a4ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4f0:	6004      	str	r4, [r0, #0]
 800a4f2:	60c4      	str	r4, [r0, #12]
 800a4f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a4f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4fc:	b94c      	cbnz	r4, 800a512 <__pow5mult+0x66>
 800a4fe:	f240 2171 	movw	r1, #625	; 0x271
 800a502:	4630      	mov	r0, r6
 800a504:	f7ff ff12 	bl	800a32c <__i2b>
 800a508:	2300      	movs	r3, #0
 800a50a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a50e:	4604      	mov	r4, r0
 800a510:	6003      	str	r3, [r0, #0]
 800a512:	f04f 0900 	mov.w	r9, #0
 800a516:	07eb      	lsls	r3, r5, #31
 800a518:	d50a      	bpl.n	800a530 <__pow5mult+0x84>
 800a51a:	4639      	mov	r1, r7
 800a51c:	4622      	mov	r2, r4
 800a51e:	4630      	mov	r0, r6
 800a520:	f7ff ff1a 	bl	800a358 <__multiply>
 800a524:	4639      	mov	r1, r7
 800a526:	4680      	mov	r8, r0
 800a528:	4630      	mov	r0, r6
 800a52a:	f7ff fe47 	bl	800a1bc <_Bfree>
 800a52e:	4647      	mov	r7, r8
 800a530:	106d      	asrs	r5, r5, #1
 800a532:	d00b      	beq.n	800a54c <__pow5mult+0xa0>
 800a534:	6820      	ldr	r0, [r4, #0]
 800a536:	b938      	cbnz	r0, 800a548 <__pow5mult+0x9c>
 800a538:	4622      	mov	r2, r4
 800a53a:	4621      	mov	r1, r4
 800a53c:	4630      	mov	r0, r6
 800a53e:	f7ff ff0b 	bl	800a358 <__multiply>
 800a542:	6020      	str	r0, [r4, #0]
 800a544:	f8c0 9000 	str.w	r9, [r0]
 800a548:	4604      	mov	r4, r0
 800a54a:	e7e4      	b.n	800a516 <__pow5mult+0x6a>
 800a54c:	4638      	mov	r0, r7
 800a54e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a552:	bf00      	nop
 800a554:	0800d3b0 	.word	0x0800d3b0
 800a558:	0800d17d 	.word	0x0800d17d
 800a55c:	0800d260 	.word	0x0800d260

0800a560 <__lshift>:
 800a560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a564:	460c      	mov	r4, r1
 800a566:	6849      	ldr	r1, [r1, #4]
 800a568:	6923      	ldr	r3, [r4, #16]
 800a56a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a56e:	68a3      	ldr	r3, [r4, #8]
 800a570:	4607      	mov	r7, r0
 800a572:	4691      	mov	r9, r2
 800a574:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a578:	f108 0601 	add.w	r6, r8, #1
 800a57c:	42b3      	cmp	r3, r6
 800a57e:	db0b      	blt.n	800a598 <__lshift+0x38>
 800a580:	4638      	mov	r0, r7
 800a582:	f7ff fddb 	bl	800a13c <_Balloc>
 800a586:	4605      	mov	r5, r0
 800a588:	b948      	cbnz	r0, 800a59e <__lshift+0x3e>
 800a58a:	4602      	mov	r2, r0
 800a58c:	4b2a      	ldr	r3, [pc, #168]	; (800a638 <__lshift+0xd8>)
 800a58e:	482b      	ldr	r0, [pc, #172]	; (800a63c <__lshift+0xdc>)
 800a590:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a594:	f000 fab2 	bl	800aafc <__assert_func>
 800a598:	3101      	adds	r1, #1
 800a59a:	005b      	lsls	r3, r3, #1
 800a59c:	e7ee      	b.n	800a57c <__lshift+0x1c>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	f100 0114 	add.w	r1, r0, #20
 800a5a4:	f100 0210 	add.w	r2, r0, #16
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	4553      	cmp	r3, sl
 800a5ac:	db37      	blt.n	800a61e <__lshift+0xbe>
 800a5ae:	6920      	ldr	r0, [r4, #16]
 800a5b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5b4:	f104 0314 	add.w	r3, r4, #20
 800a5b8:	f019 091f 	ands.w	r9, r9, #31
 800a5bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a5c4:	d02f      	beq.n	800a626 <__lshift+0xc6>
 800a5c6:	f1c9 0e20 	rsb	lr, r9, #32
 800a5ca:	468a      	mov	sl, r1
 800a5cc:	f04f 0c00 	mov.w	ip, #0
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	fa02 f209 	lsl.w	r2, r2, r9
 800a5d6:	ea42 020c 	orr.w	r2, r2, ip
 800a5da:	f84a 2b04 	str.w	r2, [sl], #4
 800a5de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5e2:	4298      	cmp	r0, r3
 800a5e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a5e8:	d8f2      	bhi.n	800a5d0 <__lshift+0x70>
 800a5ea:	1b03      	subs	r3, r0, r4
 800a5ec:	3b15      	subs	r3, #21
 800a5ee:	f023 0303 	bic.w	r3, r3, #3
 800a5f2:	3304      	adds	r3, #4
 800a5f4:	f104 0215 	add.w	r2, r4, #21
 800a5f8:	4290      	cmp	r0, r2
 800a5fa:	bf38      	it	cc
 800a5fc:	2304      	movcc	r3, #4
 800a5fe:	f841 c003 	str.w	ip, [r1, r3]
 800a602:	f1bc 0f00 	cmp.w	ip, #0
 800a606:	d001      	beq.n	800a60c <__lshift+0xac>
 800a608:	f108 0602 	add.w	r6, r8, #2
 800a60c:	3e01      	subs	r6, #1
 800a60e:	4638      	mov	r0, r7
 800a610:	612e      	str	r6, [r5, #16]
 800a612:	4621      	mov	r1, r4
 800a614:	f7ff fdd2 	bl	800a1bc <_Bfree>
 800a618:	4628      	mov	r0, r5
 800a61a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a61e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a622:	3301      	adds	r3, #1
 800a624:	e7c1      	b.n	800a5aa <__lshift+0x4a>
 800a626:	3904      	subs	r1, #4
 800a628:	f853 2b04 	ldr.w	r2, [r3], #4
 800a62c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a630:	4298      	cmp	r0, r3
 800a632:	d8f9      	bhi.n	800a628 <__lshift+0xc8>
 800a634:	e7ea      	b.n	800a60c <__lshift+0xac>
 800a636:	bf00      	nop
 800a638:	0800d1ef 	.word	0x0800d1ef
 800a63c:	0800d260 	.word	0x0800d260

0800a640 <__mcmp>:
 800a640:	b530      	push	{r4, r5, lr}
 800a642:	6902      	ldr	r2, [r0, #16]
 800a644:	690c      	ldr	r4, [r1, #16]
 800a646:	1b12      	subs	r2, r2, r4
 800a648:	d10e      	bne.n	800a668 <__mcmp+0x28>
 800a64a:	f100 0314 	add.w	r3, r0, #20
 800a64e:	3114      	adds	r1, #20
 800a650:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a654:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a658:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a65c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a660:	42a5      	cmp	r5, r4
 800a662:	d003      	beq.n	800a66c <__mcmp+0x2c>
 800a664:	d305      	bcc.n	800a672 <__mcmp+0x32>
 800a666:	2201      	movs	r2, #1
 800a668:	4610      	mov	r0, r2
 800a66a:	bd30      	pop	{r4, r5, pc}
 800a66c:	4283      	cmp	r3, r0
 800a66e:	d3f3      	bcc.n	800a658 <__mcmp+0x18>
 800a670:	e7fa      	b.n	800a668 <__mcmp+0x28>
 800a672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a676:	e7f7      	b.n	800a668 <__mcmp+0x28>

0800a678 <__mdiff>:
 800a678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67c:	460c      	mov	r4, r1
 800a67e:	4606      	mov	r6, r0
 800a680:	4611      	mov	r1, r2
 800a682:	4620      	mov	r0, r4
 800a684:	4690      	mov	r8, r2
 800a686:	f7ff ffdb 	bl	800a640 <__mcmp>
 800a68a:	1e05      	subs	r5, r0, #0
 800a68c:	d110      	bne.n	800a6b0 <__mdiff+0x38>
 800a68e:	4629      	mov	r1, r5
 800a690:	4630      	mov	r0, r6
 800a692:	f7ff fd53 	bl	800a13c <_Balloc>
 800a696:	b930      	cbnz	r0, 800a6a6 <__mdiff+0x2e>
 800a698:	4b3a      	ldr	r3, [pc, #232]	; (800a784 <__mdiff+0x10c>)
 800a69a:	4602      	mov	r2, r0
 800a69c:	f240 2132 	movw	r1, #562	; 0x232
 800a6a0:	4839      	ldr	r0, [pc, #228]	; (800a788 <__mdiff+0x110>)
 800a6a2:	f000 fa2b 	bl	800aafc <__assert_func>
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b0:	bfa4      	itt	ge
 800a6b2:	4643      	movge	r3, r8
 800a6b4:	46a0      	movge	r8, r4
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a6bc:	bfa6      	itte	ge
 800a6be:	461c      	movge	r4, r3
 800a6c0:	2500      	movge	r5, #0
 800a6c2:	2501      	movlt	r5, #1
 800a6c4:	f7ff fd3a 	bl	800a13c <_Balloc>
 800a6c8:	b920      	cbnz	r0, 800a6d4 <__mdiff+0x5c>
 800a6ca:	4b2e      	ldr	r3, [pc, #184]	; (800a784 <__mdiff+0x10c>)
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a6d2:	e7e5      	b.n	800a6a0 <__mdiff+0x28>
 800a6d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a6d8:	6926      	ldr	r6, [r4, #16]
 800a6da:	60c5      	str	r5, [r0, #12]
 800a6dc:	f104 0914 	add.w	r9, r4, #20
 800a6e0:	f108 0514 	add.w	r5, r8, #20
 800a6e4:	f100 0e14 	add.w	lr, r0, #20
 800a6e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a6ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a6f0:	f108 0210 	add.w	r2, r8, #16
 800a6f4:	46f2      	mov	sl, lr
 800a6f6:	2100      	movs	r1, #0
 800a6f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a6fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a700:	fa1f f883 	uxth.w	r8, r3
 800a704:	fa11 f18b 	uxtah	r1, r1, fp
 800a708:	0c1b      	lsrs	r3, r3, #16
 800a70a:	eba1 0808 	sub.w	r8, r1, r8
 800a70e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a712:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a716:	fa1f f888 	uxth.w	r8, r8
 800a71a:	1419      	asrs	r1, r3, #16
 800a71c:	454e      	cmp	r6, r9
 800a71e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a722:	f84a 3b04 	str.w	r3, [sl], #4
 800a726:	d8e7      	bhi.n	800a6f8 <__mdiff+0x80>
 800a728:	1b33      	subs	r3, r6, r4
 800a72a:	3b15      	subs	r3, #21
 800a72c:	f023 0303 	bic.w	r3, r3, #3
 800a730:	3304      	adds	r3, #4
 800a732:	3415      	adds	r4, #21
 800a734:	42a6      	cmp	r6, r4
 800a736:	bf38      	it	cc
 800a738:	2304      	movcc	r3, #4
 800a73a:	441d      	add	r5, r3
 800a73c:	4473      	add	r3, lr
 800a73e:	469e      	mov	lr, r3
 800a740:	462e      	mov	r6, r5
 800a742:	4566      	cmp	r6, ip
 800a744:	d30e      	bcc.n	800a764 <__mdiff+0xec>
 800a746:	f10c 0203 	add.w	r2, ip, #3
 800a74a:	1b52      	subs	r2, r2, r5
 800a74c:	f022 0203 	bic.w	r2, r2, #3
 800a750:	3d03      	subs	r5, #3
 800a752:	45ac      	cmp	ip, r5
 800a754:	bf38      	it	cc
 800a756:	2200      	movcc	r2, #0
 800a758:	441a      	add	r2, r3
 800a75a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a75e:	b17b      	cbz	r3, 800a780 <__mdiff+0x108>
 800a760:	6107      	str	r7, [r0, #16]
 800a762:	e7a3      	b.n	800a6ac <__mdiff+0x34>
 800a764:	f856 8b04 	ldr.w	r8, [r6], #4
 800a768:	fa11 f288 	uxtah	r2, r1, r8
 800a76c:	1414      	asrs	r4, r2, #16
 800a76e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a772:	b292      	uxth	r2, r2
 800a774:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a778:	f84e 2b04 	str.w	r2, [lr], #4
 800a77c:	1421      	asrs	r1, r4, #16
 800a77e:	e7e0      	b.n	800a742 <__mdiff+0xca>
 800a780:	3f01      	subs	r7, #1
 800a782:	e7ea      	b.n	800a75a <__mdiff+0xe2>
 800a784:	0800d1ef 	.word	0x0800d1ef
 800a788:	0800d260 	.word	0x0800d260

0800a78c <__d2b>:
 800a78c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a790:	4689      	mov	r9, r1
 800a792:	2101      	movs	r1, #1
 800a794:	ec57 6b10 	vmov	r6, r7, d0
 800a798:	4690      	mov	r8, r2
 800a79a:	f7ff fccf 	bl	800a13c <_Balloc>
 800a79e:	4604      	mov	r4, r0
 800a7a0:	b930      	cbnz	r0, 800a7b0 <__d2b+0x24>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	4b25      	ldr	r3, [pc, #148]	; (800a83c <__d2b+0xb0>)
 800a7a6:	4826      	ldr	r0, [pc, #152]	; (800a840 <__d2b+0xb4>)
 800a7a8:	f240 310a 	movw	r1, #778	; 0x30a
 800a7ac:	f000 f9a6 	bl	800aafc <__assert_func>
 800a7b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a7b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a7b8:	bb35      	cbnz	r5, 800a808 <__d2b+0x7c>
 800a7ba:	2e00      	cmp	r6, #0
 800a7bc:	9301      	str	r3, [sp, #4]
 800a7be:	d028      	beq.n	800a812 <__d2b+0x86>
 800a7c0:	4668      	mov	r0, sp
 800a7c2:	9600      	str	r6, [sp, #0]
 800a7c4:	f7ff fd82 	bl	800a2cc <__lo0bits>
 800a7c8:	9900      	ldr	r1, [sp, #0]
 800a7ca:	b300      	cbz	r0, 800a80e <__d2b+0x82>
 800a7cc:	9a01      	ldr	r2, [sp, #4]
 800a7ce:	f1c0 0320 	rsb	r3, r0, #32
 800a7d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7d6:	430b      	orrs	r3, r1
 800a7d8:	40c2      	lsrs	r2, r0
 800a7da:	6163      	str	r3, [r4, #20]
 800a7dc:	9201      	str	r2, [sp, #4]
 800a7de:	9b01      	ldr	r3, [sp, #4]
 800a7e0:	61a3      	str	r3, [r4, #24]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	bf14      	ite	ne
 800a7e6:	2202      	movne	r2, #2
 800a7e8:	2201      	moveq	r2, #1
 800a7ea:	6122      	str	r2, [r4, #16]
 800a7ec:	b1d5      	cbz	r5, 800a824 <__d2b+0x98>
 800a7ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a7f2:	4405      	add	r5, r0
 800a7f4:	f8c9 5000 	str.w	r5, [r9]
 800a7f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7fc:	f8c8 0000 	str.w	r0, [r8]
 800a800:	4620      	mov	r0, r4
 800a802:	b003      	add	sp, #12
 800a804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a808:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a80c:	e7d5      	b.n	800a7ba <__d2b+0x2e>
 800a80e:	6161      	str	r1, [r4, #20]
 800a810:	e7e5      	b.n	800a7de <__d2b+0x52>
 800a812:	a801      	add	r0, sp, #4
 800a814:	f7ff fd5a 	bl	800a2cc <__lo0bits>
 800a818:	9b01      	ldr	r3, [sp, #4]
 800a81a:	6163      	str	r3, [r4, #20]
 800a81c:	2201      	movs	r2, #1
 800a81e:	6122      	str	r2, [r4, #16]
 800a820:	3020      	adds	r0, #32
 800a822:	e7e3      	b.n	800a7ec <__d2b+0x60>
 800a824:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a828:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a82c:	f8c9 0000 	str.w	r0, [r9]
 800a830:	6918      	ldr	r0, [r3, #16]
 800a832:	f7ff fd2b 	bl	800a28c <__hi0bits>
 800a836:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a83a:	e7df      	b.n	800a7fc <__d2b+0x70>
 800a83c:	0800d1ef 	.word	0x0800d1ef
 800a840:	0800d260 	.word	0x0800d260

0800a844 <_calloc_r>:
 800a844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a846:	fba1 2402 	umull	r2, r4, r1, r2
 800a84a:	b94c      	cbnz	r4, 800a860 <_calloc_r+0x1c>
 800a84c:	4611      	mov	r1, r2
 800a84e:	9201      	str	r2, [sp, #4]
 800a850:	f000 f87a 	bl	800a948 <_malloc_r>
 800a854:	9a01      	ldr	r2, [sp, #4]
 800a856:	4605      	mov	r5, r0
 800a858:	b930      	cbnz	r0, 800a868 <_calloc_r+0x24>
 800a85a:	4628      	mov	r0, r5
 800a85c:	b003      	add	sp, #12
 800a85e:	bd30      	pop	{r4, r5, pc}
 800a860:	220c      	movs	r2, #12
 800a862:	6002      	str	r2, [r0, #0]
 800a864:	2500      	movs	r5, #0
 800a866:	e7f8      	b.n	800a85a <_calloc_r+0x16>
 800a868:	4621      	mov	r1, r4
 800a86a:	f7fd fe81 	bl	8008570 <memset>
 800a86e:	e7f4      	b.n	800a85a <_calloc_r+0x16>

0800a870 <_free_r>:
 800a870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a872:	2900      	cmp	r1, #0
 800a874:	d044      	beq.n	800a900 <_free_r+0x90>
 800a876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a87a:	9001      	str	r0, [sp, #4]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f1a1 0404 	sub.w	r4, r1, #4
 800a882:	bfb8      	it	lt
 800a884:	18e4      	addlt	r4, r4, r3
 800a886:	f000 f9bf 	bl	800ac08 <__malloc_lock>
 800a88a:	4a1e      	ldr	r2, [pc, #120]	; (800a904 <_free_r+0x94>)
 800a88c:	9801      	ldr	r0, [sp, #4]
 800a88e:	6813      	ldr	r3, [r2, #0]
 800a890:	b933      	cbnz	r3, 800a8a0 <_free_r+0x30>
 800a892:	6063      	str	r3, [r4, #4]
 800a894:	6014      	str	r4, [r2, #0]
 800a896:	b003      	add	sp, #12
 800a898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a89c:	f000 b9ba 	b.w	800ac14 <__malloc_unlock>
 800a8a0:	42a3      	cmp	r3, r4
 800a8a2:	d908      	bls.n	800a8b6 <_free_r+0x46>
 800a8a4:	6825      	ldr	r5, [r4, #0]
 800a8a6:	1961      	adds	r1, r4, r5
 800a8a8:	428b      	cmp	r3, r1
 800a8aa:	bf01      	itttt	eq
 800a8ac:	6819      	ldreq	r1, [r3, #0]
 800a8ae:	685b      	ldreq	r3, [r3, #4]
 800a8b0:	1949      	addeq	r1, r1, r5
 800a8b2:	6021      	streq	r1, [r4, #0]
 800a8b4:	e7ed      	b.n	800a892 <_free_r+0x22>
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	b10b      	cbz	r3, 800a8c0 <_free_r+0x50>
 800a8bc:	42a3      	cmp	r3, r4
 800a8be:	d9fa      	bls.n	800a8b6 <_free_r+0x46>
 800a8c0:	6811      	ldr	r1, [r2, #0]
 800a8c2:	1855      	adds	r5, r2, r1
 800a8c4:	42a5      	cmp	r5, r4
 800a8c6:	d10b      	bne.n	800a8e0 <_free_r+0x70>
 800a8c8:	6824      	ldr	r4, [r4, #0]
 800a8ca:	4421      	add	r1, r4
 800a8cc:	1854      	adds	r4, r2, r1
 800a8ce:	42a3      	cmp	r3, r4
 800a8d0:	6011      	str	r1, [r2, #0]
 800a8d2:	d1e0      	bne.n	800a896 <_free_r+0x26>
 800a8d4:	681c      	ldr	r4, [r3, #0]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	6053      	str	r3, [r2, #4]
 800a8da:	4421      	add	r1, r4
 800a8dc:	6011      	str	r1, [r2, #0]
 800a8de:	e7da      	b.n	800a896 <_free_r+0x26>
 800a8e0:	d902      	bls.n	800a8e8 <_free_r+0x78>
 800a8e2:	230c      	movs	r3, #12
 800a8e4:	6003      	str	r3, [r0, #0]
 800a8e6:	e7d6      	b.n	800a896 <_free_r+0x26>
 800a8e8:	6825      	ldr	r5, [r4, #0]
 800a8ea:	1961      	adds	r1, r4, r5
 800a8ec:	428b      	cmp	r3, r1
 800a8ee:	bf04      	itt	eq
 800a8f0:	6819      	ldreq	r1, [r3, #0]
 800a8f2:	685b      	ldreq	r3, [r3, #4]
 800a8f4:	6063      	str	r3, [r4, #4]
 800a8f6:	bf04      	itt	eq
 800a8f8:	1949      	addeq	r1, r1, r5
 800a8fa:	6021      	streq	r1, [r4, #0]
 800a8fc:	6054      	str	r4, [r2, #4]
 800a8fe:	e7ca      	b.n	800a896 <_free_r+0x26>
 800a900:	b003      	add	sp, #12
 800a902:	bd30      	pop	{r4, r5, pc}
 800a904:	20000b34 	.word	0x20000b34

0800a908 <sbrk_aligned>:
 800a908:	b570      	push	{r4, r5, r6, lr}
 800a90a:	4e0e      	ldr	r6, [pc, #56]	; (800a944 <sbrk_aligned+0x3c>)
 800a90c:	460c      	mov	r4, r1
 800a90e:	6831      	ldr	r1, [r6, #0]
 800a910:	4605      	mov	r5, r0
 800a912:	b911      	cbnz	r1, 800a91a <sbrk_aligned+0x12>
 800a914:	f000 f88c 	bl	800aa30 <_sbrk_r>
 800a918:	6030      	str	r0, [r6, #0]
 800a91a:	4621      	mov	r1, r4
 800a91c:	4628      	mov	r0, r5
 800a91e:	f000 f887 	bl	800aa30 <_sbrk_r>
 800a922:	1c43      	adds	r3, r0, #1
 800a924:	d00a      	beq.n	800a93c <sbrk_aligned+0x34>
 800a926:	1cc4      	adds	r4, r0, #3
 800a928:	f024 0403 	bic.w	r4, r4, #3
 800a92c:	42a0      	cmp	r0, r4
 800a92e:	d007      	beq.n	800a940 <sbrk_aligned+0x38>
 800a930:	1a21      	subs	r1, r4, r0
 800a932:	4628      	mov	r0, r5
 800a934:	f000 f87c 	bl	800aa30 <_sbrk_r>
 800a938:	3001      	adds	r0, #1
 800a93a:	d101      	bne.n	800a940 <sbrk_aligned+0x38>
 800a93c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a940:	4620      	mov	r0, r4
 800a942:	bd70      	pop	{r4, r5, r6, pc}
 800a944:	20000b38 	.word	0x20000b38

0800a948 <_malloc_r>:
 800a948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a94c:	1ccd      	adds	r5, r1, #3
 800a94e:	f025 0503 	bic.w	r5, r5, #3
 800a952:	3508      	adds	r5, #8
 800a954:	2d0c      	cmp	r5, #12
 800a956:	bf38      	it	cc
 800a958:	250c      	movcc	r5, #12
 800a95a:	2d00      	cmp	r5, #0
 800a95c:	4607      	mov	r7, r0
 800a95e:	db01      	blt.n	800a964 <_malloc_r+0x1c>
 800a960:	42a9      	cmp	r1, r5
 800a962:	d905      	bls.n	800a970 <_malloc_r+0x28>
 800a964:	230c      	movs	r3, #12
 800a966:	603b      	str	r3, [r7, #0]
 800a968:	2600      	movs	r6, #0
 800a96a:	4630      	mov	r0, r6
 800a96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a970:	4e2e      	ldr	r6, [pc, #184]	; (800aa2c <_malloc_r+0xe4>)
 800a972:	f000 f949 	bl	800ac08 <__malloc_lock>
 800a976:	6833      	ldr	r3, [r6, #0]
 800a978:	461c      	mov	r4, r3
 800a97a:	bb34      	cbnz	r4, 800a9ca <_malloc_r+0x82>
 800a97c:	4629      	mov	r1, r5
 800a97e:	4638      	mov	r0, r7
 800a980:	f7ff ffc2 	bl	800a908 <sbrk_aligned>
 800a984:	1c43      	adds	r3, r0, #1
 800a986:	4604      	mov	r4, r0
 800a988:	d14d      	bne.n	800aa26 <_malloc_r+0xde>
 800a98a:	6834      	ldr	r4, [r6, #0]
 800a98c:	4626      	mov	r6, r4
 800a98e:	2e00      	cmp	r6, #0
 800a990:	d140      	bne.n	800aa14 <_malloc_r+0xcc>
 800a992:	6823      	ldr	r3, [r4, #0]
 800a994:	4631      	mov	r1, r6
 800a996:	4638      	mov	r0, r7
 800a998:	eb04 0803 	add.w	r8, r4, r3
 800a99c:	f000 f848 	bl	800aa30 <_sbrk_r>
 800a9a0:	4580      	cmp	r8, r0
 800a9a2:	d13a      	bne.n	800aa1a <_malloc_r+0xd2>
 800a9a4:	6821      	ldr	r1, [r4, #0]
 800a9a6:	3503      	adds	r5, #3
 800a9a8:	1a6d      	subs	r5, r5, r1
 800a9aa:	f025 0503 	bic.w	r5, r5, #3
 800a9ae:	3508      	adds	r5, #8
 800a9b0:	2d0c      	cmp	r5, #12
 800a9b2:	bf38      	it	cc
 800a9b4:	250c      	movcc	r5, #12
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	4638      	mov	r0, r7
 800a9ba:	f7ff ffa5 	bl	800a908 <sbrk_aligned>
 800a9be:	3001      	adds	r0, #1
 800a9c0:	d02b      	beq.n	800aa1a <_malloc_r+0xd2>
 800a9c2:	6823      	ldr	r3, [r4, #0]
 800a9c4:	442b      	add	r3, r5
 800a9c6:	6023      	str	r3, [r4, #0]
 800a9c8:	e00e      	b.n	800a9e8 <_malloc_r+0xa0>
 800a9ca:	6822      	ldr	r2, [r4, #0]
 800a9cc:	1b52      	subs	r2, r2, r5
 800a9ce:	d41e      	bmi.n	800aa0e <_malloc_r+0xc6>
 800a9d0:	2a0b      	cmp	r2, #11
 800a9d2:	d916      	bls.n	800aa02 <_malloc_r+0xba>
 800a9d4:	1961      	adds	r1, r4, r5
 800a9d6:	42a3      	cmp	r3, r4
 800a9d8:	6025      	str	r5, [r4, #0]
 800a9da:	bf18      	it	ne
 800a9dc:	6059      	strne	r1, [r3, #4]
 800a9de:	6863      	ldr	r3, [r4, #4]
 800a9e0:	bf08      	it	eq
 800a9e2:	6031      	streq	r1, [r6, #0]
 800a9e4:	5162      	str	r2, [r4, r5]
 800a9e6:	604b      	str	r3, [r1, #4]
 800a9e8:	4638      	mov	r0, r7
 800a9ea:	f104 060b 	add.w	r6, r4, #11
 800a9ee:	f000 f911 	bl	800ac14 <__malloc_unlock>
 800a9f2:	f026 0607 	bic.w	r6, r6, #7
 800a9f6:	1d23      	adds	r3, r4, #4
 800a9f8:	1af2      	subs	r2, r6, r3
 800a9fa:	d0b6      	beq.n	800a96a <_malloc_r+0x22>
 800a9fc:	1b9b      	subs	r3, r3, r6
 800a9fe:	50a3      	str	r3, [r4, r2]
 800aa00:	e7b3      	b.n	800a96a <_malloc_r+0x22>
 800aa02:	6862      	ldr	r2, [r4, #4]
 800aa04:	42a3      	cmp	r3, r4
 800aa06:	bf0c      	ite	eq
 800aa08:	6032      	streq	r2, [r6, #0]
 800aa0a:	605a      	strne	r2, [r3, #4]
 800aa0c:	e7ec      	b.n	800a9e8 <_malloc_r+0xa0>
 800aa0e:	4623      	mov	r3, r4
 800aa10:	6864      	ldr	r4, [r4, #4]
 800aa12:	e7b2      	b.n	800a97a <_malloc_r+0x32>
 800aa14:	4634      	mov	r4, r6
 800aa16:	6876      	ldr	r6, [r6, #4]
 800aa18:	e7b9      	b.n	800a98e <_malloc_r+0x46>
 800aa1a:	230c      	movs	r3, #12
 800aa1c:	603b      	str	r3, [r7, #0]
 800aa1e:	4638      	mov	r0, r7
 800aa20:	f000 f8f8 	bl	800ac14 <__malloc_unlock>
 800aa24:	e7a1      	b.n	800a96a <_malloc_r+0x22>
 800aa26:	6025      	str	r5, [r4, #0]
 800aa28:	e7de      	b.n	800a9e8 <_malloc_r+0xa0>
 800aa2a:	bf00      	nop
 800aa2c:	20000b34 	.word	0x20000b34

0800aa30 <_sbrk_r>:
 800aa30:	b538      	push	{r3, r4, r5, lr}
 800aa32:	4d06      	ldr	r5, [pc, #24]	; (800aa4c <_sbrk_r+0x1c>)
 800aa34:	2300      	movs	r3, #0
 800aa36:	4604      	mov	r4, r0
 800aa38:	4608      	mov	r0, r1
 800aa3a:	602b      	str	r3, [r5, #0]
 800aa3c:	f7f9 fa62 	bl	8003f04 <_sbrk>
 800aa40:	1c43      	adds	r3, r0, #1
 800aa42:	d102      	bne.n	800aa4a <_sbrk_r+0x1a>
 800aa44:	682b      	ldr	r3, [r5, #0]
 800aa46:	b103      	cbz	r3, 800aa4a <_sbrk_r+0x1a>
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	bd38      	pop	{r3, r4, r5, pc}
 800aa4c:	20000b3c 	.word	0x20000b3c

0800aa50 <__sread>:
 800aa50:	b510      	push	{r4, lr}
 800aa52:	460c      	mov	r4, r1
 800aa54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa58:	f000 fa3c 	bl	800aed4 <_read_r>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	bfab      	itete	ge
 800aa60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa62:	89a3      	ldrhlt	r3, [r4, #12]
 800aa64:	181b      	addge	r3, r3, r0
 800aa66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa6a:	bfac      	ite	ge
 800aa6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa6e:	81a3      	strhlt	r3, [r4, #12]
 800aa70:	bd10      	pop	{r4, pc}

0800aa72 <__swrite>:
 800aa72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa76:	461f      	mov	r7, r3
 800aa78:	898b      	ldrh	r3, [r1, #12]
 800aa7a:	05db      	lsls	r3, r3, #23
 800aa7c:	4605      	mov	r5, r0
 800aa7e:	460c      	mov	r4, r1
 800aa80:	4616      	mov	r6, r2
 800aa82:	d505      	bpl.n	800aa90 <__swrite+0x1e>
 800aa84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa88:	2302      	movs	r3, #2
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f000 f898 	bl	800abc0 <_lseek_r>
 800aa90:	89a3      	ldrh	r3, [r4, #12]
 800aa92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa9a:	81a3      	strh	r3, [r4, #12]
 800aa9c:	4632      	mov	r2, r6
 800aa9e:	463b      	mov	r3, r7
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa6:	f000 b817 	b.w	800aad8 <_write_r>

0800aaaa <__sseek>:
 800aaaa:	b510      	push	{r4, lr}
 800aaac:	460c      	mov	r4, r1
 800aaae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aab2:	f000 f885 	bl	800abc0 <_lseek_r>
 800aab6:	1c43      	adds	r3, r0, #1
 800aab8:	89a3      	ldrh	r3, [r4, #12]
 800aaba:	bf15      	itete	ne
 800aabc:	6560      	strne	r0, [r4, #84]	; 0x54
 800aabe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aac2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aac6:	81a3      	strheq	r3, [r4, #12]
 800aac8:	bf18      	it	ne
 800aaca:	81a3      	strhne	r3, [r4, #12]
 800aacc:	bd10      	pop	{r4, pc}

0800aace <__sclose>:
 800aace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad2:	f000 b831 	b.w	800ab38 <_close_r>
	...

0800aad8 <_write_r>:
 800aad8:	b538      	push	{r3, r4, r5, lr}
 800aada:	4d07      	ldr	r5, [pc, #28]	; (800aaf8 <_write_r+0x20>)
 800aadc:	4604      	mov	r4, r0
 800aade:	4608      	mov	r0, r1
 800aae0:	4611      	mov	r1, r2
 800aae2:	2200      	movs	r2, #0
 800aae4:	602a      	str	r2, [r5, #0]
 800aae6:	461a      	mov	r2, r3
 800aae8:	f7f9 f9bb 	bl	8003e62 <_write>
 800aaec:	1c43      	adds	r3, r0, #1
 800aaee:	d102      	bne.n	800aaf6 <_write_r+0x1e>
 800aaf0:	682b      	ldr	r3, [r5, #0]
 800aaf2:	b103      	cbz	r3, 800aaf6 <_write_r+0x1e>
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	bd38      	pop	{r3, r4, r5, pc}
 800aaf8:	20000b3c 	.word	0x20000b3c

0800aafc <__assert_func>:
 800aafc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aafe:	4614      	mov	r4, r2
 800ab00:	461a      	mov	r2, r3
 800ab02:	4b09      	ldr	r3, [pc, #36]	; (800ab28 <__assert_func+0x2c>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4605      	mov	r5, r0
 800ab08:	68d8      	ldr	r0, [r3, #12]
 800ab0a:	b14c      	cbz	r4, 800ab20 <__assert_func+0x24>
 800ab0c:	4b07      	ldr	r3, [pc, #28]	; (800ab2c <__assert_func+0x30>)
 800ab0e:	9100      	str	r1, [sp, #0]
 800ab10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab14:	4906      	ldr	r1, [pc, #24]	; (800ab30 <__assert_func+0x34>)
 800ab16:	462b      	mov	r3, r5
 800ab18:	f000 f81e 	bl	800ab58 <fiprintf>
 800ab1c:	f000 faba 	bl	800b094 <abort>
 800ab20:	4b04      	ldr	r3, [pc, #16]	; (800ab34 <__assert_func+0x38>)
 800ab22:	461c      	mov	r4, r3
 800ab24:	e7f3      	b.n	800ab0e <__assert_func+0x12>
 800ab26:	bf00      	nop
 800ab28:	20000018 	.word	0x20000018
 800ab2c:	0800d3bc 	.word	0x0800d3bc
 800ab30:	0800d3c9 	.word	0x0800d3c9
 800ab34:	0800d3f7 	.word	0x0800d3f7

0800ab38 <_close_r>:
 800ab38:	b538      	push	{r3, r4, r5, lr}
 800ab3a:	4d06      	ldr	r5, [pc, #24]	; (800ab54 <_close_r+0x1c>)
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	4604      	mov	r4, r0
 800ab40:	4608      	mov	r0, r1
 800ab42:	602b      	str	r3, [r5, #0]
 800ab44:	f7f9 f9a9 	bl	8003e9a <_close>
 800ab48:	1c43      	adds	r3, r0, #1
 800ab4a:	d102      	bne.n	800ab52 <_close_r+0x1a>
 800ab4c:	682b      	ldr	r3, [r5, #0]
 800ab4e:	b103      	cbz	r3, 800ab52 <_close_r+0x1a>
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	bd38      	pop	{r3, r4, r5, pc}
 800ab54:	20000b3c 	.word	0x20000b3c

0800ab58 <fiprintf>:
 800ab58:	b40e      	push	{r1, r2, r3}
 800ab5a:	b503      	push	{r0, r1, lr}
 800ab5c:	4601      	mov	r1, r0
 800ab5e:	ab03      	add	r3, sp, #12
 800ab60:	4805      	ldr	r0, [pc, #20]	; (800ab78 <fiprintf+0x20>)
 800ab62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab66:	6800      	ldr	r0, [r0, #0]
 800ab68:	9301      	str	r3, [sp, #4]
 800ab6a:	f000 f883 	bl	800ac74 <_vfiprintf_r>
 800ab6e:	b002      	add	sp, #8
 800ab70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab74:	b003      	add	sp, #12
 800ab76:	4770      	bx	lr
 800ab78:	20000018 	.word	0x20000018

0800ab7c <_fstat_r>:
 800ab7c:	b538      	push	{r3, r4, r5, lr}
 800ab7e:	4d07      	ldr	r5, [pc, #28]	; (800ab9c <_fstat_r+0x20>)
 800ab80:	2300      	movs	r3, #0
 800ab82:	4604      	mov	r4, r0
 800ab84:	4608      	mov	r0, r1
 800ab86:	4611      	mov	r1, r2
 800ab88:	602b      	str	r3, [r5, #0]
 800ab8a:	f7f9 f992 	bl	8003eb2 <_fstat>
 800ab8e:	1c43      	adds	r3, r0, #1
 800ab90:	d102      	bne.n	800ab98 <_fstat_r+0x1c>
 800ab92:	682b      	ldr	r3, [r5, #0]
 800ab94:	b103      	cbz	r3, 800ab98 <_fstat_r+0x1c>
 800ab96:	6023      	str	r3, [r4, #0]
 800ab98:	bd38      	pop	{r3, r4, r5, pc}
 800ab9a:	bf00      	nop
 800ab9c:	20000b3c 	.word	0x20000b3c

0800aba0 <_isatty_r>:
 800aba0:	b538      	push	{r3, r4, r5, lr}
 800aba2:	4d06      	ldr	r5, [pc, #24]	; (800abbc <_isatty_r+0x1c>)
 800aba4:	2300      	movs	r3, #0
 800aba6:	4604      	mov	r4, r0
 800aba8:	4608      	mov	r0, r1
 800abaa:	602b      	str	r3, [r5, #0]
 800abac:	f7f9 f991 	bl	8003ed2 <_isatty>
 800abb0:	1c43      	adds	r3, r0, #1
 800abb2:	d102      	bne.n	800abba <_isatty_r+0x1a>
 800abb4:	682b      	ldr	r3, [r5, #0]
 800abb6:	b103      	cbz	r3, 800abba <_isatty_r+0x1a>
 800abb8:	6023      	str	r3, [r4, #0]
 800abba:	bd38      	pop	{r3, r4, r5, pc}
 800abbc:	20000b3c 	.word	0x20000b3c

0800abc0 <_lseek_r>:
 800abc0:	b538      	push	{r3, r4, r5, lr}
 800abc2:	4d07      	ldr	r5, [pc, #28]	; (800abe0 <_lseek_r+0x20>)
 800abc4:	4604      	mov	r4, r0
 800abc6:	4608      	mov	r0, r1
 800abc8:	4611      	mov	r1, r2
 800abca:	2200      	movs	r2, #0
 800abcc:	602a      	str	r2, [r5, #0]
 800abce:	461a      	mov	r2, r3
 800abd0:	f7f9 f98a 	bl	8003ee8 <_lseek>
 800abd4:	1c43      	adds	r3, r0, #1
 800abd6:	d102      	bne.n	800abde <_lseek_r+0x1e>
 800abd8:	682b      	ldr	r3, [r5, #0]
 800abda:	b103      	cbz	r3, 800abde <_lseek_r+0x1e>
 800abdc:	6023      	str	r3, [r4, #0]
 800abde:	bd38      	pop	{r3, r4, r5, pc}
 800abe0:	20000b3c 	.word	0x20000b3c

0800abe4 <__ascii_mbtowc>:
 800abe4:	b082      	sub	sp, #8
 800abe6:	b901      	cbnz	r1, 800abea <__ascii_mbtowc+0x6>
 800abe8:	a901      	add	r1, sp, #4
 800abea:	b142      	cbz	r2, 800abfe <__ascii_mbtowc+0x1a>
 800abec:	b14b      	cbz	r3, 800ac02 <__ascii_mbtowc+0x1e>
 800abee:	7813      	ldrb	r3, [r2, #0]
 800abf0:	600b      	str	r3, [r1, #0]
 800abf2:	7812      	ldrb	r2, [r2, #0]
 800abf4:	1e10      	subs	r0, r2, #0
 800abf6:	bf18      	it	ne
 800abf8:	2001      	movne	r0, #1
 800abfa:	b002      	add	sp, #8
 800abfc:	4770      	bx	lr
 800abfe:	4610      	mov	r0, r2
 800ac00:	e7fb      	b.n	800abfa <__ascii_mbtowc+0x16>
 800ac02:	f06f 0001 	mvn.w	r0, #1
 800ac06:	e7f8      	b.n	800abfa <__ascii_mbtowc+0x16>

0800ac08 <__malloc_lock>:
 800ac08:	4801      	ldr	r0, [pc, #4]	; (800ac10 <__malloc_lock+0x8>)
 800ac0a:	f7ff ba28 	b.w	800a05e <__retarget_lock_acquire_recursive>
 800ac0e:	bf00      	nop
 800ac10:	20000b30 	.word	0x20000b30

0800ac14 <__malloc_unlock>:
 800ac14:	4801      	ldr	r0, [pc, #4]	; (800ac1c <__malloc_unlock+0x8>)
 800ac16:	f7ff ba23 	b.w	800a060 <__retarget_lock_release_recursive>
 800ac1a:	bf00      	nop
 800ac1c:	20000b30 	.word	0x20000b30

0800ac20 <__sfputc_r>:
 800ac20:	6893      	ldr	r3, [r2, #8]
 800ac22:	3b01      	subs	r3, #1
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	b410      	push	{r4}
 800ac28:	6093      	str	r3, [r2, #8]
 800ac2a:	da08      	bge.n	800ac3e <__sfputc_r+0x1e>
 800ac2c:	6994      	ldr	r4, [r2, #24]
 800ac2e:	42a3      	cmp	r3, r4
 800ac30:	db01      	blt.n	800ac36 <__sfputc_r+0x16>
 800ac32:	290a      	cmp	r1, #10
 800ac34:	d103      	bne.n	800ac3e <__sfputc_r+0x1e>
 800ac36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac3a:	f000 b95d 	b.w	800aef8 <__swbuf_r>
 800ac3e:	6813      	ldr	r3, [r2, #0]
 800ac40:	1c58      	adds	r0, r3, #1
 800ac42:	6010      	str	r0, [r2, #0]
 800ac44:	7019      	strb	r1, [r3, #0]
 800ac46:	4608      	mov	r0, r1
 800ac48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac4c:	4770      	bx	lr

0800ac4e <__sfputs_r>:
 800ac4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac50:	4606      	mov	r6, r0
 800ac52:	460f      	mov	r7, r1
 800ac54:	4614      	mov	r4, r2
 800ac56:	18d5      	adds	r5, r2, r3
 800ac58:	42ac      	cmp	r4, r5
 800ac5a:	d101      	bne.n	800ac60 <__sfputs_r+0x12>
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	e007      	b.n	800ac70 <__sfputs_r+0x22>
 800ac60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac64:	463a      	mov	r2, r7
 800ac66:	4630      	mov	r0, r6
 800ac68:	f7ff ffda 	bl	800ac20 <__sfputc_r>
 800ac6c:	1c43      	adds	r3, r0, #1
 800ac6e:	d1f3      	bne.n	800ac58 <__sfputs_r+0xa>
 800ac70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac74 <_vfiprintf_r>:
 800ac74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac78:	460d      	mov	r5, r1
 800ac7a:	b09d      	sub	sp, #116	; 0x74
 800ac7c:	4614      	mov	r4, r2
 800ac7e:	4698      	mov	r8, r3
 800ac80:	4606      	mov	r6, r0
 800ac82:	b118      	cbz	r0, 800ac8c <_vfiprintf_r+0x18>
 800ac84:	6983      	ldr	r3, [r0, #24]
 800ac86:	b90b      	cbnz	r3, 800ac8c <_vfiprintf_r+0x18>
 800ac88:	f7ff f946 	bl	8009f18 <__sinit>
 800ac8c:	4b89      	ldr	r3, [pc, #548]	; (800aeb4 <_vfiprintf_r+0x240>)
 800ac8e:	429d      	cmp	r5, r3
 800ac90:	d11b      	bne.n	800acca <_vfiprintf_r+0x56>
 800ac92:	6875      	ldr	r5, [r6, #4]
 800ac94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac96:	07d9      	lsls	r1, r3, #31
 800ac98:	d405      	bmi.n	800aca6 <_vfiprintf_r+0x32>
 800ac9a:	89ab      	ldrh	r3, [r5, #12]
 800ac9c:	059a      	lsls	r2, r3, #22
 800ac9e:	d402      	bmi.n	800aca6 <_vfiprintf_r+0x32>
 800aca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aca2:	f7ff f9dc 	bl	800a05e <__retarget_lock_acquire_recursive>
 800aca6:	89ab      	ldrh	r3, [r5, #12]
 800aca8:	071b      	lsls	r3, r3, #28
 800acaa:	d501      	bpl.n	800acb0 <_vfiprintf_r+0x3c>
 800acac:	692b      	ldr	r3, [r5, #16]
 800acae:	b9eb      	cbnz	r3, 800acec <_vfiprintf_r+0x78>
 800acb0:	4629      	mov	r1, r5
 800acb2:	4630      	mov	r0, r6
 800acb4:	f000 f980 	bl	800afb8 <__swsetup_r>
 800acb8:	b1c0      	cbz	r0, 800acec <_vfiprintf_r+0x78>
 800acba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acbc:	07dc      	lsls	r4, r3, #31
 800acbe:	d50e      	bpl.n	800acde <_vfiprintf_r+0x6a>
 800acc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acc4:	b01d      	add	sp, #116	; 0x74
 800acc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acca:	4b7b      	ldr	r3, [pc, #492]	; (800aeb8 <_vfiprintf_r+0x244>)
 800accc:	429d      	cmp	r5, r3
 800acce:	d101      	bne.n	800acd4 <_vfiprintf_r+0x60>
 800acd0:	68b5      	ldr	r5, [r6, #8]
 800acd2:	e7df      	b.n	800ac94 <_vfiprintf_r+0x20>
 800acd4:	4b79      	ldr	r3, [pc, #484]	; (800aebc <_vfiprintf_r+0x248>)
 800acd6:	429d      	cmp	r5, r3
 800acd8:	bf08      	it	eq
 800acda:	68f5      	ldreq	r5, [r6, #12]
 800acdc:	e7da      	b.n	800ac94 <_vfiprintf_r+0x20>
 800acde:	89ab      	ldrh	r3, [r5, #12]
 800ace0:	0598      	lsls	r0, r3, #22
 800ace2:	d4ed      	bmi.n	800acc0 <_vfiprintf_r+0x4c>
 800ace4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ace6:	f7ff f9bb 	bl	800a060 <__retarget_lock_release_recursive>
 800acea:	e7e9      	b.n	800acc0 <_vfiprintf_r+0x4c>
 800acec:	2300      	movs	r3, #0
 800acee:	9309      	str	r3, [sp, #36]	; 0x24
 800acf0:	2320      	movs	r3, #32
 800acf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800acfa:	2330      	movs	r3, #48	; 0x30
 800acfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aec0 <_vfiprintf_r+0x24c>
 800ad00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad04:	f04f 0901 	mov.w	r9, #1
 800ad08:	4623      	mov	r3, r4
 800ad0a:	469a      	mov	sl, r3
 800ad0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad10:	b10a      	cbz	r2, 800ad16 <_vfiprintf_r+0xa2>
 800ad12:	2a25      	cmp	r2, #37	; 0x25
 800ad14:	d1f9      	bne.n	800ad0a <_vfiprintf_r+0x96>
 800ad16:	ebba 0b04 	subs.w	fp, sl, r4
 800ad1a:	d00b      	beq.n	800ad34 <_vfiprintf_r+0xc0>
 800ad1c:	465b      	mov	r3, fp
 800ad1e:	4622      	mov	r2, r4
 800ad20:	4629      	mov	r1, r5
 800ad22:	4630      	mov	r0, r6
 800ad24:	f7ff ff93 	bl	800ac4e <__sfputs_r>
 800ad28:	3001      	adds	r0, #1
 800ad2a:	f000 80aa 	beq.w	800ae82 <_vfiprintf_r+0x20e>
 800ad2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad30:	445a      	add	r2, fp
 800ad32:	9209      	str	r2, [sp, #36]	; 0x24
 800ad34:	f89a 3000 	ldrb.w	r3, [sl]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f000 80a2 	beq.w	800ae82 <_vfiprintf_r+0x20e>
 800ad3e:	2300      	movs	r3, #0
 800ad40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad48:	f10a 0a01 	add.w	sl, sl, #1
 800ad4c:	9304      	str	r3, [sp, #16]
 800ad4e:	9307      	str	r3, [sp, #28]
 800ad50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad54:	931a      	str	r3, [sp, #104]	; 0x68
 800ad56:	4654      	mov	r4, sl
 800ad58:	2205      	movs	r2, #5
 800ad5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad5e:	4858      	ldr	r0, [pc, #352]	; (800aec0 <_vfiprintf_r+0x24c>)
 800ad60:	f7f5 fa5e 	bl	8000220 <memchr>
 800ad64:	9a04      	ldr	r2, [sp, #16]
 800ad66:	b9d8      	cbnz	r0, 800ada0 <_vfiprintf_r+0x12c>
 800ad68:	06d1      	lsls	r1, r2, #27
 800ad6a:	bf44      	itt	mi
 800ad6c:	2320      	movmi	r3, #32
 800ad6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad72:	0713      	lsls	r3, r2, #28
 800ad74:	bf44      	itt	mi
 800ad76:	232b      	movmi	r3, #43	; 0x2b
 800ad78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad80:	2b2a      	cmp	r3, #42	; 0x2a
 800ad82:	d015      	beq.n	800adb0 <_vfiprintf_r+0x13c>
 800ad84:	9a07      	ldr	r2, [sp, #28]
 800ad86:	4654      	mov	r4, sl
 800ad88:	2000      	movs	r0, #0
 800ad8a:	f04f 0c0a 	mov.w	ip, #10
 800ad8e:	4621      	mov	r1, r4
 800ad90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad94:	3b30      	subs	r3, #48	; 0x30
 800ad96:	2b09      	cmp	r3, #9
 800ad98:	d94e      	bls.n	800ae38 <_vfiprintf_r+0x1c4>
 800ad9a:	b1b0      	cbz	r0, 800adca <_vfiprintf_r+0x156>
 800ad9c:	9207      	str	r2, [sp, #28]
 800ad9e:	e014      	b.n	800adca <_vfiprintf_r+0x156>
 800ada0:	eba0 0308 	sub.w	r3, r0, r8
 800ada4:	fa09 f303 	lsl.w	r3, r9, r3
 800ada8:	4313      	orrs	r3, r2
 800adaa:	9304      	str	r3, [sp, #16]
 800adac:	46a2      	mov	sl, r4
 800adae:	e7d2      	b.n	800ad56 <_vfiprintf_r+0xe2>
 800adb0:	9b03      	ldr	r3, [sp, #12]
 800adb2:	1d19      	adds	r1, r3, #4
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	9103      	str	r1, [sp, #12]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	bfbb      	ittet	lt
 800adbc:	425b      	neglt	r3, r3
 800adbe:	f042 0202 	orrlt.w	r2, r2, #2
 800adc2:	9307      	strge	r3, [sp, #28]
 800adc4:	9307      	strlt	r3, [sp, #28]
 800adc6:	bfb8      	it	lt
 800adc8:	9204      	strlt	r2, [sp, #16]
 800adca:	7823      	ldrb	r3, [r4, #0]
 800adcc:	2b2e      	cmp	r3, #46	; 0x2e
 800adce:	d10c      	bne.n	800adea <_vfiprintf_r+0x176>
 800add0:	7863      	ldrb	r3, [r4, #1]
 800add2:	2b2a      	cmp	r3, #42	; 0x2a
 800add4:	d135      	bne.n	800ae42 <_vfiprintf_r+0x1ce>
 800add6:	9b03      	ldr	r3, [sp, #12]
 800add8:	1d1a      	adds	r2, r3, #4
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	9203      	str	r2, [sp, #12]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	bfb8      	it	lt
 800ade2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ade6:	3402      	adds	r4, #2
 800ade8:	9305      	str	r3, [sp, #20]
 800adea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aed0 <_vfiprintf_r+0x25c>
 800adee:	7821      	ldrb	r1, [r4, #0]
 800adf0:	2203      	movs	r2, #3
 800adf2:	4650      	mov	r0, sl
 800adf4:	f7f5 fa14 	bl	8000220 <memchr>
 800adf8:	b140      	cbz	r0, 800ae0c <_vfiprintf_r+0x198>
 800adfa:	2340      	movs	r3, #64	; 0x40
 800adfc:	eba0 000a 	sub.w	r0, r0, sl
 800ae00:	fa03 f000 	lsl.w	r0, r3, r0
 800ae04:	9b04      	ldr	r3, [sp, #16]
 800ae06:	4303      	orrs	r3, r0
 800ae08:	3401      	adds	r4, #1
 800ae0a:	9304      	str	r3, [sp, #16]
 800ae0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae10:	482c      	ldr	r0, [pc, #176]	; (800aec4 <_vfiprintf_r+0x250>)
 800ae12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae16:	2206      	movs	r2, #6
 800ae18:	f7f5 fa02 	bl	8000220 <memchr>
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	d03f      	beq.n	800aea0 <_vfiprintf_r+0x22c>
 800ae20:	4b29      	ldr	r3, [pc, #164]	; (800aec8 <_vfiprintf_r+0x254>)
 800ae22:	bb1b      	cbnz	r3, 800ae6c <_vfiprintf_r+0x1f8>
 800ae24:	9b03      	ldr	r3, [sp, #12]
 800ae26:	3307      	adds	r3, #7
 800ae28:	f023 0307 	bic.w	r3, r3, #7
 800ae2c:	3308      	adds	r3, #8
 800ae2e:	9303      	str	r3, [sp, #12]
 800ae30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae32:	443b      	add	r3, r7
 800ae34:	9309      	str	r3, [sp, #36]	; 0x24
 800ae36:	e767      	b.n	800ad08 <_vfiprintf_r+0x94>
 800ae38:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae3c:	460c      	mov	r4, r1
 800ae3e:	2001      	movs	r0, #1
 800ae40:	e7a5      	b.n	800ad8e <_vfiprintf_r+0x11a>
 800ae42:	2300      	movs	r3, #0
 800ae44:	3401      	adds	r4, #1
 800ae46:	9305      	str	r3, [sp, #20]
 800ae48:	4619      	mov	r1, r3
 800ae4a:	f04f 0c0a 	mov.w	ip, #10
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae54:	3a30      	subs	r2, #48	; 0x30
 800ae56:	2a09      	cmp	r2, #9
 800ae58:	d903      	bls.n	800ae62 <_vfiprintf_r+0x1ee>
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d0c5      	beq.n	800adea <_vfiprintf_r+0x176>
 800ae5e:	9105      	str	r1, [sp, #20]
 800ae60:	e7c3      	b.n	800adea <_vfiprintf_r+0x176>
 800ae62:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae66:	4604      	mov	r4, r0
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e7f0      	b.n	800ae4e <_vfiprintf_r+0x1da>
 800ae6c:	ab03      	add	r3, sp, #12
 800ae6e:	9300      	str	r3, [sp, #0]
 800ae70:	462a      	mov	r2, r5
 800ae72:	4b16      	ldr	r3, [pc, #88]	; (800aecc <_vfiprintf_r+0x258>)
 800ae74:	a904      	add	r1, sp, #16
 800ae76:	4630      	mov	r0, r6
 800ae78:	f7fd fc22 	bl	80086c0 <_printf_float>
 800ae7c:	4607      	mov	r7, r0
 800ae7e:	1c78      	adds	r0, r7, #1
 800ae80:	d1d6      	bne.n	800ae30 <_vfiprintf_r+0x1bc>
 800ae82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae84:	07d9      	lsls	r1, r3, #31
 800ae86:	d405      	bmi.n	800ae94 <_vfiprintf_r+0x220>
 800ae88:	89ab      	ldrh	r3, [r5, #12]
 800ae8a:	059a      	lsls	r2, r3, #22
 800ae8c:	d402      	bmi.n	800ae94 <_vfiprintf_r+0x220>
 800ae8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae90:	f7ff f8e6 	bl	800a060 <__retarget_lock_release_recursive>
 800ae94:	89ab      	ldrh	r3, [r5, #12]
 800ae96:	065b      	lsls	r3, r3, #25
 800ae98:	f53f af12 	bmi.w	800acc0 <_vfiprintf_r+0x4c>
 800ae9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae9e:	e711      	b.n	800acc4 <_vfiprintf_r+0x50>
 800aea0:	ab03      	add	r3, sp, #12
 800aea2:	9300      	str	r3, [sp, #0]
 800aea4:	462a      	mov	r2, r5
 800aea6:	4b09      	ldr	r3, [pc, #36]	; (800aecc <_vfiprintf_r+0x258>)
 800aea8:	a904      	add	r1, sp, #16
 800aeaa:	4630      	mov	r0, r6
 800aeac:	f7fd feac 	bl	8008c08 <_printf_i>
 800aeb0:	e7e4      	b.n	800ae7c <_vfiprintf_r+0x208>
 800aeb2:	bf00      	nop
 800aeb4:	0800d220 	.word	0x0800d220
 800aeb8:	0800d240 	.word	0x0800d240
 800aebc:	0800d200 	.word	0x0800d200
 800aec0:	0800d402 	.word	0x0800d402
 800aec4:	0800d40c 	.word	0x0800d40c
 800aec8:	080086c1 	.word	0x080086c1
 800aecc:	0800ac4f 	.word	0x0800ac4f
 800aed0:	0800d408 	.word	0x0800d408

0800aed4 <_read_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	4d07      	ldr	r5, [pc, #28]	; (800aef4 <_read_r+0x20>)
 800aed8:	4604      	mov	r4, r0
 800aeda:	4608      	mov	r0, r1
 800aedc:	4611      	mov	r1, r2
 800aede:	2200      	movs	r2, #0
 800aee0:	602a      	str	r2, [r5, #0]
 800aee2:	461a      	mov	r2, r3
 800aee4:	f7f8 ffa0 	bl	8003e28 <_read>
 800aee8:	1c43      	adds	r3, r0, #1
 800aeea:	d102      	bne.n	800aef2 <_read_r+0x1e>
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	b103      	cbz	r3, 800aef2 <_read_r+0x1e>
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	bd38      	pop	{r3, r4, r5, pc}
 800aef4:	20000b3c 	.word	0x20000b3c

0800aef8 <__swbuf_r>:
 800aef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefa:	460e      	mov	r6, r1
 800aefc:	4614      	mov	r4, r2
 800aefe:	4605      	mov	r5, r0
 800af00:	b118      	cbz	r0, 800af0a <__swbuf_r+0x12>
 800af02:	6983      	ldr	r3, [r0, #24]
 800af04:	b90b      	cbnz	r3, 800af0a <__swbuf_r+0x12>
 800af06:	f7ff f807 	bl	8009f18 <__sinit>
 800af0a:	4b21      	ldr	r3, [pc, #132]	; (800af90 <__swbuf_r+0x98>)
 800af0c:	429c      	cmp	r4, r3
 800af0e:	d12b      	bne.n	800af68 <__swbuf_r+0x70>
 800af10:	686c      	ldr	r4, [r5, #4]
 800af12:	69a3      	ldr	r3, [r4, #24]
 800af14:	60a3      	str	r3, [r4, #8]
 800af16:	89a3      	ldrh	r3, [r4, #12]
 800af18:	071a      	lsls	r2, r3, #28
 800af1a:	d52f      	bpl.n	800af7c <__swbuf_r+0x84>
 800af1c:	6923      	ldr	r3, [r4, #16]
 800af1e:	b36b      	cbz	r3, 800af7c <__swbuf_r+0x84>
 800af20:	6923      	ldr	r3, [r4, #16]
 800af22:	6820      	ldr	r0, [r4, #0]
 800af24:	1ac0      	subs	r0, r0, r3
 800af26:	6963      	ldr	r3, [r4, #20]
 800af28:	b2f6      	uxtb	r6, r6
 800af2a:	4283      	cmp	r3, r0
 800af2c:	4637      	mov	r7, r6
 800af2e:	dc04      	bgt.n	800af3a <__swbuf_r+0x42>
 800af30:	4621      	mov	r1, r4
 800af32:	4628      	mov	r0, r5
 800af34:	f7fe ff5c 	bl	8009df0 <_fflush_r>
 800af38:	bb30      	cbnz	r0, 800af88 <__swbuf_r+0x90>
 800af3a:	68a3      	ldr	r3, [r4, #8]
 800af3c:	3b01      	subs	r3, #1
 800af3e:	60a3      	str	r3, [r4, #8]
 800af40:	6823      	ldr	r3, [r4, #0]
 800af42:	1c5a      	adds	r2, r3, #1
 800af44:	6022      	str	r2, [r4, #0]
 800af46:	701e      	strb	r6, [r3, #0]
 800af48:	6963      	ldr	r3, [r4, #20]
 800af4a:	3001      	adds	r0, #1
 800af4c:	4283      	cmp	r3, r0
 800af4e:	d004      	beq.n	800af5a <__swbuf_r+0x62>
 800af50:	89a3      	ldrh	r3, [r4, #12]
 800af52:	07db      	lsls	r3, r3, #31
 800af54:	d506      	bpl.n	800af64 <__swbuf_r+0x6c>
 800af56:	2e0a      	cmp	r6, #10
 800af58:	d104      	bne.n	800af64 <__swbuf_r+0x6c>
 800af5a:	4621      	mov	r1, r4
 800af5c:	4628      	mov	r0, r5
 800af5e:	f7fe ff47 	bl	8009df0 <_fflush_r>
 800af62:	b988      	cbnz	r0, 800af88 <__swbuf_r+0x90>
 800af64:	4638      	mov	r0, r7
 800af66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af68:	4b0a      	ldr	r3, [pc, #40]	; (800af94 <__swbuf_r+0x9c>)
 800af6a:	429c      	cmp	r4, r3
 800af6c:	d101      	bne.n	800af72 <__swbuf_r+0x7a>
 800af6e:	68ac      	ldr	r4, [r5, #8]
 800af70:	e7cf      	b.n	800af12 <__swbuf_r+0x1a>
 800af72:	4b09      	ldr	r3, [pc, #36]	; (800af98 <__swbuf_r+0xa0>)
 800af74:	429c      	cmp	r4, r3
 800af76:	bf08      	it	eq
 800af78:	68ec      	ldreq	r4, [r5, #12]
 800af7a:	e7ca      	b.n	800af12 <__swbuf_r+0x1a>
 800af7c:	4621      	mov	r1, r4
 800af7e:	4628      	mov	r0, r5
 800af80:	f000 f81a 	bl	800afb8 <__swsetup_r>
 800af84:	2800      	cmp	r0, #0
 800af86:	d0cb      	beq.n	800af20 <__swbuf_r+0x28>
 800af88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800af8c:	e7ea      	b.n	800af64 <__swbuf_r+0x6c>
 800af8e:	bf00      	nop
 800af90:	0800d220 	.word	0x0800d220
 800af94:	0800d240 	.word	0x0800d240
 800af98:	0800d200 	.word	0x0800d200

0800af9c <__ascii_wctomb>:
 800af9c:	b149      	cbz	r1, 800afb2 <__ascii_wctomb+0x16>
 800af9e:	2aff      	cmp	r2, #255	; 0xff
 800afa0:	bf85      	ittet	hi
 800afa2:	238a      	movhi	r3, #138	; 0x8a
 800afa4:	6003      	strhi	r3, [r0, #0]
 800afa6:	700a      	strbls	r2, [r1, #0]
 800afa8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800afac:	bf98      	it	ls
 800afae:	2001      	movls	r0, #1
 800afb0:	4770      	bx	lr
 800afb2:	4608      	mov	r0, r1
 800afb4:	4770      	bx	lr
	...

0800afb8 <__swsetup_r>:
 800afb8:	4b32      	ldr	r3, [pc, #200]	; (800b084 <__swsetup_r+0xcc>)
 800afba:	b570      	push	{r4, r5, r6, lr}
 800afbc:	681d      	ldr	r5, [r3, #0]
 800afbe:	4606      	mov	r6, r0
 800afc0:	460c      	mov	r4, r1
 800afc2:	b125      	cbz	r5, 800afce <__swsetup_r+0x16>
 800afc4:	69ab      	ldr	r3, [r5, #24]
 800afc6:	b913      	cbnz	r3, 800afce <__swsetup_r+0x16>
 800afc8:	4628      	mov	r0, r5
 800afca:	f7fe ffa5 	bl	8009f18 <__sinit>
 800afce:	4b2e      	ldr	r3, [pc, #184]	; (800b088 <__swsetup_r+0xd0>)
 800afd0:	429c      	cmp	r4, r3
 800afd2:	d10f      	bne.n	800aff4 <__swsetup_r+0x3c>
 800afd4:	686c      	ldr	r4, [r5, #4]
 800afd6:	89a3      	ldrh	r3, [r4, #12]
 800afd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afdc:	0719      	lsls	r1, r3, #28
 800afde:	d42c      	bmi.n	800b03a <__swsetup_r+0x82>
 800afe0:	06dd      	lsls	r5, r3, #27
 800afe2:	d411      	bmi.n	800b008 <__swsetup_r+0x50>
 800afe4:	2309      	movs	r3, #9
 800afe6:	6033      	str	r3, [r6, #0]
 800afe8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800afec:	81a3      	strh	r3, [r4, #12]
 800afee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aff2:	e03e      	b.n	800b072 <__swsetup_r+0xba>
 800aff4:	4b25      	ldr	r3, [pc, #148]	; (800b08c <__swsetup_r+0xd4>)
 800aff6:	429c      	cmp	r4, r3
 800aff8:	d101      	bne.n	800affe <__swsetup_r+0x46>
 800affa:	68ac      	ldr	r4, [r5, #8]
 800affc:	e7eb      	b.n	800afd6 <__swsetup_r+0x1e>
 800affe:	4b24      	ldr	r3, [pc, #144]	; (800b090 <__swsetup_r+0xd8>)
 800b000:	429c      	cmp	r4, r3
 800b002:	bf08      	it	eq
 800b004:	68ec      	ldreq	r4, [r5, #12]
 800b006:	e7e6      	b.n	800afd6 <__swsetup_r+0x1e>
 800b008:	0758      	lsls	r0, r3, #29
 800b00a:	d512      	bpl.n	800b032 <__swsetup_r+0x7a>
 800b00c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b00e:	b141      	cbz	r1, 800b022 <__swsetup_r+0x6a>
 800b010:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b014:	4299      	cmp	r1, r3
 800b016:	d002      	beq.n	800b01e <__swsetup_r+0x66>
 800b018:	4630      	mov	r0, r6
 800b01a:	f7ff fc29 	bl	800a870 <_free_r>
 800b01e:	2300      	movs	r3, #0
 800b020:	6363      	str	r3, [r4, #52]	; 0x34
 800b022:	89a3      	ldrh	r3, [r4, #12]
 800b024:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b028:	81a3      	strh	r3, [r4, #12]
 800b02a:	2300      	movs	r3, #0
 800b02c:	6063      	str	r3, [r4, #4]
 800b02e:	6923      	ldr	r3, [r4, #16]
 800b030:	6023      	str	r3, [r4, #0]
 800b032:	89a3      	ldrh	r3, [r4, #12]
 800b034:	f043 0308 	orr.w	r3, r3, #8
 800b038:	81a3      	strh	r3, [r4, #12]
 800b03a:	6923      	ldr	r3, [r4, #16]
 800b03c:	b94b      	cbnz	r3, 800b052 <__swsetup_r+0x9a>
 800b03e:	89a3      	ldrh	r3, [r4, #12]
 800b040:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b048:	d003      	beq.n	800b052 <__swsetup_r+0x9a>
 800b04a:	4621      	mov	r1, r4
 800b04c:	4630      	mov	r0, r6
 800b04e:	f7ff f82d 	bl	800a0ac <__smakebuf_r>
 800b052:	89a0      	ldrh	r0, [r4, #12]
 800b054:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b058:	f010 0301 	ands.w	r3, r0, #1
 800b05c:	d00a      	beq.n	800b074 <__swsetup_r+0xbc>
 800b05e:	2300      	movs	r3, #0
 800b060:	60a3      	str	r3, [r4, #8]
 800b062:	6963      	ldr	r3, [r4, #20]
 800b064:	425b      	negs	r3, r3
 800b066:	61a3      	str	r3, [r4, #24]
 800b068:	6923      	ldr	r3, [r4, #16]
 800b06a:	b943      	cbnz	r3, 800b07e <__swsetup_r+0xc6>
 800b06c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b070:	d1ba      	bne.n	800afe8 <__swsetup_r+0x30>
 800b072:	bd70      	pop	{r4, r5, r6, pc}
 800b074:	0781      	lsls	r1, r0, #30
 800b076:	bf58      	it	pl
 800b078:	6963      	ldrpl	r3, [r4, #20]
 800b07a:	60a3      	str	r3, [r4, #8]
 800b07c:	e7f4      	b.n	800b068 <__swsetup_r+0xb0>
 800b07e:	2000      	movs	r0, #0
 800b080:	e7f7      	b.n	800b072 <__swsetup_r+0xba>
 800b082:	bf00      	nop
 800b084:	20000018 	.word	0x20000018
 800b088:	0800d220 	.word	0x0800d220
 800b08c:	0800d240 	.word	0x0800d240
 800b090:	0800d200 	.word	0x0800d200

0800b094 <abort>:
 800b094:	b508      	push	{r3, lr}
 800b096:	2006      	movs	r0, #6
 800b098:	f000 f82c 	bl	800b0f4 <raise>
 800b09c:	2001      	movs	r0, #1
 800b09e:	f7f8 feb9 	bl	8003e14 <_exit>

0800b0a2 <_raise_r>:
 800b0a2:	291f      	cmp	r1, #31
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	460d      	mov	r5, r1
 800b0aa:	d904      	bls.n	800b0b6 <_raise_r+0x14>
 800b0ac:	2316      	movs	r3, #22
 800b0ae:	6003      	str	r3, [r0, #0]
 800b0b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0b4:	bd38      	pop	{r3, r4, r5, pc}
 800b0b6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b0b8:	b112      	cbz	r2, 800b0c0 <_raise_r+0x1e>
 800b0ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0be:	b94b      	cbnz	r3, 800b0d4 <_raise_r+0x32>
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	f000 f831 	bl	800b128 <_getpid_r>
 800b0c6:	462a      	mov	r2, r5
 800b0c8:	4601      	mov	r1, r0
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0d0:	f000 b818 	b.w	800b104 <_kill_r>
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d00a      	beq.n	800b0ee <_raise_r+0x4c>
 800b0d8:	1c59      	adds	r1, r3, #1
 800b0da:	d103      	bne.n	800b0e4 <_raise_r+0x42>
 800b0dc:	2316      	movs	r3, #22
 800b0de:	6003      	str	r3, [r0, #0]
 800b0e0:	2001      	movs	r0, #1
 800b0e2:	e7e7      	b.n	800b0b4 <_raise_r+0x12>
 800b0e4:	2400      	movs	r4, #0
 800b0e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	4798      	blx	r3
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	e7e0      	b.n	800b0b4 <_raise_r+0x12>
	...

0800b0f4 <raise>:
 800b0f4:	4b02      	ldr	r3, [pc, #8]	; (800b100 <raise+0xc>)
 800b0f6:	4601      	mov	r1, r0
 800b0f8:	6818      	ldr	r0, [r3, #0]
 800b0fa:	f7ff bfd2 	b.w	800b0a2 <_raise_r>
 800b0fe:	bf00      	nop
 800b100:	20000018 	.word	0x20000018

0800b104 <_kill_r>:
 800b104:	b538      	push	{r3, r4, r5, lr}
 800b106:	4d07      	ldr	r5, [pc, #28]	; (800b124 <_kill_r+0x20>)
 800b108:	2300      	movs	r3, #0
 800b10a:	4604      	mov	r4, r0
 800b10c:	4608      	mov	r0, r1
 800b10e:	4611      	mov	r1, r2
 800b110:	602b      	str	r3, [r5, #0]
 800b112:	f7f8 fe6f 	bl	8003df4 <_kill>
 800b116:	1c43      	adds	r3, r0, #1
 800b118:	d102      	bne.n	800b120 <_kill_r+0x1c>
 800b11a:	682b      	ldr	r3, [r5, #0]
 800b11c:	b103      	cbz	r3, 800b120 <_kill_r+0x1c>
 800b11e:	6023      	str	r3, [r4, #0]
 800b120:	bd38      	pop	{r3, r4, r5, pc}
 800b122:	bf00      	nop
 800b124:	20000b3c 	.word	0x20000b3c

0800b128 <_getpid_r>:
 800b128:	f7f8 be5c 	b.w	8003de4 <_getpid>
 800b12c:	0000      	movs	r0, r0
	...

0800b130 <cos>:
 800b130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b132:	ec53 2b10 	vmov	r2, r3, d0
 800b136:	4826      	ldr	r0, [pc, #152]	; (800b1d0 <cos+0xa0>)
 800b138:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b13c:	4281      	cmp	r1, r0
 800b13e:	dc06      	bgt.n	800b14e <cos+0x1e>
 800b140:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b1c8 <cos+0x98>
 800b144:	b005      	add	sp, #20
 800b146:	f85d eb04 	ldr.w	lr, [sp], #4
 800b14a:	f000 bf09 	b.w	800bf60 <__kernel_cos>
 800b14e:	4821      	ldr	r0, [pc, #132]	; (800b1d4 <cos+0xa4>)
 800b150:	4281      	cmp	r1, r0
 800b152:	dd09      	ble.n	800b168 <cos+0x38>
 800b154:	ee10 0a10 	vmov	r0, s0
 800b158:	4619      	mov	r1, r3
 800b15a:	f7f5 f8b5 	bl	80002c8 <__aeabi_dsub>
 800b15e:	ec41 0b10 	vmov	d0, r0, r1
 800b162:	b005      	add	sp, #20
 800b164:	f85d fb04 	ldr.w	pc, [sp], #4
 800b168:	4668      	mov	r0, sp
 800b16a:	f000 fc39 	bl	800b9e0 <__ieee754_rem_pio2>
 800b16e:	f000 0003 	and.w	r0, r0, #3
 800b172:	2801      	cmp	r0, #1
 800b174:	d00b      	beq.n	800b18e <cos+0x5e>
 800b176:	2802      	cmp	r0, #2
 800b178:	d016      	beq.n	800b1a8 <cos+0x78>
 800b17a:	b9e0      	cbnz	r0, 800b1b6 <cos+0x86>
 800b17c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b180:	ed9d 0b00 	vldr	d0, [sp]
 800b184:	f000 feec 	bl	800bf60 <__kernel_cos>
 800b188:	ec51 0b10 	vmov	r0, r1, d0
 800b18c:	e7e7      	b.n	800b15e <cos+0x2e>
 800b18e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b192:	ed9d 0b00 	vldr	d0, [sp]
 800b196:	f001 fafb 	bl	800c790 <__kernel_sin>
 800b19a:	ec53 2b10 	vmov	r2, r3, d0
 800b19e:	ee10 0a10 	vmov	r0, s0
 800b1a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b1a6:	e7da      	b.n	800b15e <cos+0x2e>
 800b1a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b1ac:	ed9d 0b00 	vldr	d0, [sp]
 800b1b0:	f000 fed6 	bl	800bf60 <__kernel_cos>
 800b1b4:	e7f1      	b.n	800b19a <cos+0x6a>
 800b1b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b1ba:	ed9d 0b00 	vldr	d0, [sp]
 800b1be:	2001      	movs	r0, #1
 800b1c0:	f001 fae6 	bl	800c790 <__kernel_sin>
 800b1c4:	e7e0      	b.n	800b188 <cos+0x58>
 800b1c6:	bf00      	nop
	...
 800b1d0:	3fe921fb 	.word	0x3fe921fb
 800b1d4:	7fefffff 	.word	0x7fefffff

0800b1d8 <round>:
 800b1d8:	ec51 0b10 	vmov	r0, r1, d0
 800b1dc:	b570      	push	{r4, r5, r6, lr}
 800b1de:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800b1e2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800b1e6:	2c13      	cmp	r4, #19
 800b1e8:	ee10 2a10 	vmov	r2, s0
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	dc19      	bgt.n	800b224 <round+0x4c>
 800b1f0:	2c00      	cmp	r4, #0
 800b1f2:	da09      	bge.n	800b208 <round+0x30>
 800b1f4:	3401      	adds	r4, #1
 800b1f6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800b1fa:	d103      	bne.n	800b204 <round+0x2c>
 800b1fc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b200:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b204:	2200      	movs	r2, #0
 800b206:	e028      	b.n	800b25a <round+0x82>
 800b208:	4d15      	ldr	r5, [pc, #84]	; (800b260 <round+0x88>)
 800b20a:	4125      	asrs	r5, r4
 800b20c:	ea01 0605 	and.w	r6, r1, r5
 800b210:	4332      	orrs	r2, r6
 800b212:	d00e      	beq.n	800b232 <round+0x5a>
 800b214:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b218:	fa42 f404 	asr.w	r4, r2, r4
 800b21c:	4423      	add	r3, r4
 800b21e:	ea23 0305 	bic.w	r3, r3, r5
 800b222:	e7ef      	b.n	800b204 <round+0x2c>
 800b224:	2c33      	cmp	r4, #51	; 0x33
 800b226:	dd07      	ble.n	800b238 <round+0x60>
 800b228:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800b22c:	d101      	bne.n	800b232 <round+0x5a>
 800b22e:	f7f5 f84d 	bl	80002cc <__adddf3>
 800b232:	ec41 0b10 	vmov	d0, r0, r1
 800b236:	bd70      	pop	{r4, r5, r6, pc}
 800b238:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800b23c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b240:	40f5      	lsrs	r5, r6
 800b242:	4228      	tst	r0, r5
 800b244:	d0f5      	beq.n	800b232 <round+0x5a>
 800b246:	2101      	movs	r1, #1
 800b248:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800b24c:	fa01 f404 	lsl.w	r4, r1, r4
 800b250:	1912      	adds	r2, r2, r4
 800b252:	bf28      	it	cs
 800b254:	185b      	addcs	r3, r3, r1
 800b256:	ea22 0205 	bic.w	r2, r2, r5
 800b25a:	4619      	mov	r1, r3
 800b25c:	4610      	mov	r0, r2
 800b25e:	e7e8      	b.n	800b232 <round+0x5a>
 800b260:	000fffff 	.word	0x000fffff
 800b264:	00000000 	.word	0x00000000

0800b268 <sin>:
 800b268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b26a:	ec53 2b10 	vmov	r2, r3, d0
 800b26e:	4828      	ldr	r0, [pc, #160]	; (800b310 <sin+0xa8>)
 800b270:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b274:	4281      	cmp	r1, r0
 800b276:	dc07      	bgt.n	800b288 <sin+0x20>
 800b278:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b308 <sin+0xa0>
 800b27c:	2000      	movs	r0, #0
 800b27e:	b005      	add	sp, #20
 800b280:	f85d eb04 	ldr.w	lr, [sp], #4
 800b284:	f001 ba84 	b.w	800c790 <__kernel_sin>
 800b288:	4822      	ldr	r0, [pc, #136]	; (800b314 <sin+0xac>)
 800b28a:	4281      	cmp	r1, r0
 800b28c:	dd09      	ble.n	800b2a2 <sin+0x3a>
 800b28e:	ee10 0a10 	vmov	r0, s0
 800b292:	4619      	mov	r1, r3
 800b294:	f7f5 f818 	bl	80002c8 <__aeabi_dsub>
 800b298:	ec41 0b10 	vmov	d0, r0, r1
 800b29c:	b005      	add	sp, #20
 800b29e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b2a2:	4668      	mov	r0, sp
 800b2a4:	f000 fb9c 	bl	800b9e0 <__ieee754_rem_pio2>
 800b2a8:	f000 0003 	and.w	r0, r0, #3
 800b2ac:	2801      	cmp	r0, #1
 800b2ae:	d00c      	beq.n	800b2ca <sin+0x62>
 800b2b0:	2802      	cmp	r0, #2
 800b2b2:	d011      	beq.n	800b2d8 <sin+0x70>
 800b2b4:	b9f0      	cbnz	r0, 800b2f4 <sin+0x8c>
 800b2b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b2ba:	ed9d 0b00 	vldr	d0, [sp]
 800b2be:	2001      	movs	r0, #1
 800b2c0:	f001 fa66 	bl	800c790 <__kernel_sin>
 800b2c4:	ec51 0b10 	vmov	r0, r1, d0
 800b2c8:	e7e6      	b.n	800b298 <sin+0x30>
 800b2ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b2ce:	ed9d 0b00 	vldr	d0, [sp]
 800b2d2:	f000 fe45 	bl	800bf60 <__kernel_cos>
 800b2d6:	e7f5      	b.n	800b2c4 <sin+0x5c>
 800b2d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b2dc:	ed9d 0b00 	vldr	d0, [sp]
 800b2e0:	2001      	movs	r0, #1
 800b2e2:	f001 fa55 	bl	800c790 <__kernel_sin>
 800b2e6:	ec53 2b10 	vmov	r2, r3, d0
 800b2ea:	ee10 0a10 	vmov	r0, s0
 800b2ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b2f2:	e7d1      	b.n	800b298 <sin+0x30>
 800b2f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b2f8:	ed9d 0b00 	vldr	d0, [sp]
 800b2fc:	f000 fe30 	bl	800bf60 <__kernel_cos>
 800b300:	e7f1      	b.n	800b2e6 <sin+0x7e>
 800b302:	bf00      	nop
 800b304:	f3af 8000 	nop.w
	...
 800b310:	3fe921fb 	.word	0x3fe921fb
 800b314:	7fefffff 	.word	0x7fefffff

0800b318 <acos>:
 800b318:	b538      	push	{r3, r4, r5, lr}
 800b31a:	ed2d 8b02 	vpush	{d8}
 800b31e:	ec55 4b10 	vmov	r4, r5, d0
 800b322:	f000 f831 	bl	800b388 <__ieee754_acos>
 800b326:	4622      	mov	r2, r4
 800b328:	462b      	mov	r3, r5
 800b32a:	4620      	mov	r0, r4
 800b32c:	4629      	mov	r1, r5
 800b32e:	eeb0 8a40 	vmov.f32	s16, s0
 800b332:	eef0 8a60 	vmov.f32	s17, s1
 800b336:	f7f5 fc19 	bl	8000b6c <__aeabi_dcmpun>
 800b33a:	b9a8      	cbnz	r0, 800b368 <acos+0x50>
 800b33c:	ec45 4b10 	vmov	d0, r4, r5
 800b340:	f001 fc86 	bl	800cc50 <fabs>
 800b344:	4b0c      	ldr	r3, [pc, #48]	; (800b378 <acos+0x60>)
 800b346:	ec51 0b10 	vmov	r0, r1, d0
 800b34a:	2200      	movs	r2, #0
 800b34c:	f7f5 fc04 	bl	8000b58 <__aeabi_dcmpgt>
 800b350:	b150      	cbz	r0, 800b368 <acos+0x50>
 800b352:	f7fd f8d5 	bl	8008500 <__errno>
 800b356:	ecbd 8b02 	vpop	{d8}
 800b35a:	2321      	movs	r3, #33	; 0x21
 800b35c:	6003      	str	r3, [r0, #0]
 800b35e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b362:	4806      	ldr	r0, [pc, #24]	; (800b37c <acos+0x64>)
 800b364:	f001 bd00 	b.w	800cd68 <nan>
 800b368:	eeb0 0a48 	vmov.f32	s0, s16
 800b36c:	eef0 0a68 	vmov.f32	s1, s17
 800b370:	ecbd 8b02 	vpop	{d8}
 800b374:	bd38      	pop	{r3, r4, r5, pc}
 800b376:	bf00      	nop
 800b378:	3ff00000 	.word	0x3ff00000
 800b37c:	0800d3f7 	.word	0x0800d3f7

0800b380 <atan2>:
 800b380:	f000 ba62 	b.w	800b848 <__ieee754_atan2>
 800b384:	0000      	movs	r0, r0
	...

0800b388 <__ieee754_acos>:
 800b388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b38c:	ec55 4b10 	vmov	r4, r5, d0
 800b390:	49b7      	ldr	r1, [pc, #732]	; (800b670 <__ieee754_acos+0x2e8>)
 800b392:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b396:	428b      	cmp	r3, r1
 800b398:	dd1b      	ble.n	800b3d2 <__ieee754_acos+0x4a>
 800b39a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800b39e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b3a2:	4323      	orrs	r3, r4
 800b3a4:	d106      	bne.n	800b3b4 <__ieee754_acos+0x2c>
 800b3a6:	2d00      	cmp	r5, #0
 800b3a8:	f300 8211 	bgt.w	800b7ce <__ieee754_acos+0x446>
 800b3ac:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800b608 <__ieee754_acos+0x280>
 800b3b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b4:	ee10 2a10 	vmov	r2, s0
 800b3b8:	462b      	mov	r3, r5
 800b3ba:	ee10 0a10 	vmov	r0, s0
 800b3be:	4629      	mov	r1, r5
 800b3c0:	f7f4 ff82 	bl	80002c8 <__aeabi_dsub>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	460b      	mov	r3, r1
 800b3c8:	f7f5 fa60 	bl	800088c <__aeabi_ddiv>
 800b3cc:	ec41 0b10 	vmov	d0, r0, r1
 800b3d0:	e7ee      	b.n	800b3b0 <__ieee754_acos+0x28>
 800b3d2:	49a8      	ldr	r1, [pc, #672]	; (800b674 <__ieee754_acos+0x2ec>)
 800b3d4:	428b      	cmp	r3, r1
 800b3d6:	f300 8087 	bgt.w	800b4e8 <__ieee754_acos+0x160>
 800b3da:	4aa7      	ldr	r2, [pc, #668]	; (800b678 <__ieee754_acos+0x2f0>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	f340 81f9 	ble.w	800b7d4 <__ieee754_acos+0x44c>
 800b3e2:	ee10 2a10 	vmov	r2, s0
 800b3e6:	ee10 0a10 	vmov	r0, s0
 800b3ea:	462b      	mov	r3, r5
 800b3ec:	4629      	mov	r1, r5
 800b3ee:	f7f5 f923 	bl	8000638 <__aeabi_dmul>
 800b3f2:	a387      	add	r3, pc, #540	; (adr r3, 800b610 <__ieee754_acos+0x288>)
 800b3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f8:	4606      	mov	r6, r0
 800b3fa:	460f      	mov	r7, r1
 800b3fc:	f7f5 f91c 	bl	8000638 <__aeabi_dmul>
 800b400:	a385      	add	r3, pc, #532	; (adr r3, 800b618 <__ieee754_acos+0x290>)
 800b402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b406:	f7f4 ff61 	bl	80002cc <__adddf3>
 800b40a:	4632      	mov	r2, r6
 800b40c:	463b      	mov	r3, r7
 800b40e:	f7f5 f913 	bl	8000638 <__aeabi_dmul>
 800b412:	a383      	add	r3, pc, #524	; (adr r3, 800b620 <__ieee754_acos+0x298>)
 800b414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b418:	f7f4 ff56 	bl	80002c8 <__aeabi_dsub>
 800b41c:	4632      	mov	r2, r6
 800b41e:	463b      	mov	r3, r7
 800b420:	f7f5 f90a 	bl	8000638 <__aeabi_dmul>
 800b424:	a380      	add	r3, pc, #512	; (adr r3, 800b628 <__ieee754_acos+0x2a0>)
 800b426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42a:	f7f4 ff4f 	bl	80002cc <__adddf3>
 800b42e:	4632      	mov	r2, r6
 800b430:	463b      	mov	r3, r7
 800b432:	f7f5 f901 	bl	8000638 <__aeabi_dmul>
 800b436:	a37e      	add	r3, pc, #504	; (adr r3, 800b630 <__ieee754_acos+0x2a8>)
 800b438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43c:	f7f4 ff44 	bl	80002c8 <__aeabi_dsub>
 800b440:	4632      	mov	r2, r6
 800b442:	463b      	mov	r3, r7
 800b444:	f7f5 f8f8 	bl	8000638 <__aeabi_dmul>
 800b448:	a37b      	add	r3, pc, #492	; (adr r3, 800b638 <__ieee754_acos+0x2b0>)
 800b44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44e:	f7f4 ff3d 	bl	80002cc <__adddf3>
 800b452:	4632      	mov	r2, r6
 800b454:	463b      	mov	r3, r7
 800b456:	f7f5 f8ef 	bl	8000638 <__aeabi_dmul>
 800b45a:	a379      	add	r3, pc, #484	; (adr r3, 800b640 <__ieee754_acos+0x2b8>)
 800b45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b460:	4680      	mov	r8, r0
 800b462:	4689      	mov	r9, r1
 800b464:	4630      	mov	r0, r6
 800b466:	4639      	mov	r1, r7
 800b468:	f7f5 f8e6 	bl	8000638 <__aeabi_dmul>
 800b46c:	a376      	add	r3, pc, #472	; (adr r3, 800b648 <__ieee754_acos+0x2c0>)
 800b46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b472:	f7f4 ff29 	bl	80002c8 <__aeabi_dsub>
 800b476:	4632      	mov	r2, r6
 800b478:	463b      	mov	r3, r7
 800b47a:	f7f5 f8dd 	bl	8000638 <__aeabi_dmul>
 800b47e:	a374      	add	r3, pc, #464	; (adr r3, 800b650 <__ieee754_acos+0x2c8>)
 800b480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b484:	f7f4 ff22 	bl	80002cc <__adddf3>
 800b488:	4632      	mov	r2, r6
 800b48a:	463b      	mov	r3, r7
 800b48c:	f7f5 f8d4 	bl	8000638 <__aeabi_dmul>
 800b490:	a371      	add	r3, pc, #452	; (adr r3, 800b658 <__ieee754_acos+0x2d0>)
 800b492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b496:	f7f4 ff17 	bl	80002c8 <__aeabi_dsub>
 800b49a:	4632      	mov	r2, r6
 800b49c:	463b      	mov	r3, r7
 800b49e:	f7f5 f8cb 	bl	8000638 <__aeabi_dmul>
 800b4a2:	4b76      	ldr	r3, [pc, #472]	; (800b67c <__ieee754_acos+0x2f4>)
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f7f4 ff11 	bl	80002cc <__adddf3>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	4640      	mov	r0, r8
 800b4b0:	4649      	mov	r1, r9
 800b4b2:	f7f5 f9eb 	bl	800088c <__aeabi_ddiv>
 800b4b6:	4622      	mov	r2, r4
 800b4b8:	462b      	mov	r3, r5
 800b4ba:	f7f5 f8bd 	bl	8000638 <__aeabi_dmul>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	a167      	add	r1, pc, #412	; (adr r1, 800b660 <__ieee754_acos+0x2d8>)
 800b4c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4c8:	f7f4 fefe 	bl	80002c8 <__aeabi_dsub>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	4629      	mov	r1, r5
 800b4d4:	f7f4 fef8 	bl	80002c8 <__aeabi_dsub>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	460b      	mov	r3, r1
 800b4dc:	a162      	add	r1, pc, #392	; (adr r1, 800b668 <__ieee754_acos+0x2e0>)
 800b4de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4e2:	f7f4 fef1 	bl	80002c8 <__aeabi_dsub>
 800b4e6:	e771      	b.n	800b3cc <__ieee754_acos+0x44>
 800b4e8:	2d00      	cmp	r5, #0
 800b4ea:	f280 80cb 	bge.w	800b684 <__ieee754_acos+0x2fc>
 800b4ee:	ee10 0a10 	vmov	r0, s0
 800b4f2:	4b62      	ldr	r3, [pc, #392]	; (800b67c <__ieee754_acos+0x2f4>)
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	4629      	mov	r1, r5
 800b4f8:	f7f4 fee8 	bl	80002cc <__adddf3>
 800b4fc:	4b60      	ldr	r3, [pc, #384]	; (800b680 <__ieee754_acos+0x2f8>)
 800b4fe:	2200      	movs	r2, #0
 800b500:	f7f5 f89a 	bl	8000638 <__aeabi_dmul>
 800b504:	a342      	add	r3, pc, #264	; (adr r3, 800b610 <__ieee754_acos+0x288>)
 800b506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50a:	4604      	mov	r4, r0
 800b50c:	460d      	mov	r5, r1
 800b50e:	f7f5 f893 	bl	8000638 <__aeabi_dmul>
 800b512:	a341      	add	r3, pc, #260	; (adr r3, 800b618 <__ieee754_acos+0x290>)
 800b514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b518:	f7f4 fed8 	bl	80002cc <__adddf3>
 800b51c:	4622      	mov	r2, r4
 800b51e:	462b      	mov	r3, r5
 800b520:	f7f5 f88a 	bl	8000638 <__aeabi_dmul>
 800b524:	a33e      	add	r3, pc, #248	; (adr r3, 800b620 <__ieee754_acos+0x298>)
 800b526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52a:	f7f4 fecd 	bl	80002c8 <__aeabi_dsub>
 800b52e:	4622      	mov	r2, r4
 800b530:	462b      	mov	r3, r5
 800b532:	f7f5 f881 	bl	8000638 <__aeabi_dmul>
 800b536:	a33c      	add	r3, pc, #240	; (adr r3, 800b628 <__ieee754_acos+0x2a0>)
 800b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53c:	f7f4 fec6 	bl	80002cc <__adddf3>
 800b540:	4622      	mov	r2, r4
 800b542:	462b      	mov	r3, r5
 800b544:	f7f5 f878 	bl	8000638 <__aeabi_dmul>
 800b548:	a339      	add	r3, pc, #228	; (adr r3, 800b630 <__ieee754_acos+0x2a8>)
 800b54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54e:	f7f4 febb 	bl	80002c8 <__aeabi_dsub>
 800b552:	4622      	mov	r2, r4
 800b554:	462b      	mov	r3, r5
 800b556:	f7f5 f86f 	bl	8000638 <__aeabi_dmul>
 800b55a:	a337      	add	r3, pc, #220	; (adr r3, 800b638 <__ieee754_acos+0x2b0>)
 800b55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b560:	f7f4 feb4 	bl	80002cc <__adddf3>
 800b564:	4622      	mov	r2, r4
 800b566:	462b      	mov	r3, r5
 800b568:	f7f5 f866 	bl	8000638 <__aeabi_dmul>
 800b56c:	ec45 4b10 	vmov	d0, r4, r5
 800b570:	4680      	mov	r8, r0
 800b572:	4689      	mov	r9, r1
 800b574:	f000 fc40 	bl	800bdf8 <__ieee754_sqrt>
 800b578:	a331      	add	r3, pc, #196	; (adr r3, 800b640 <__ieee754_acos+0x2b8>)
 800b57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57e:	4620      	mov	r0, r4
 800b580:	4629      	mov	r1, r5
 800b582:	ec57 6b10 	vmov	r6, r7, d0
 800b586:	f7f5 f857 	bl	8000638 <__aeabi_dmul>
 800b58a:	a32f      	add	r3, pc, #188	; (adr r3, 800b648 <__ieee754_acos+0x2c0>)
 800b58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b590:	f7f4 fe9a 	bl	80002c8 <__aeabi_dsub>
 800b594:	4622      	mov	r2, r4
 800b596:	462b      	mov	r3, r5
 800b598:	f7f5 f84e 	bl	8000638 <__aeabi_dmul>
 800b59c:	a32c      	add	r3, pc, #176	; (adr r3, 800b650 <__ieee754_acos+0x2c8>)
 800b59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a2:	f7f4 fe93 	bl	80002cc <__adddf3>
 800b5a6:	4622      	mov	r2, r4
 800b5a8:	462b      	mov	r3, r5
 800b5aa:	f7f5 f845 	bl	8000638 <__aeabi_dmul>
 800b5ae:	a32a      	add	r3, pc, #168	; (adr r3, 800b658 <__ieee754_acos+0x2d0>)
 800b5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b4:	f7f4 fe88 	bl	80002c8 <__aeabi_dsub>
 800b5b8:	4622      	mov	r2, r4
 800b5ba:	462b      	mov	r3, r5
 800b5bc:	f7f5 f83c 	bl	8000638 <__aeabi_dmul>
 800b5c0:	4b2e      	ldr	r3, [pc, #184]	; (800b67c <__ieee754_acos+0x2f4>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f7f4 fe82 	bl	80002cc <__adddf3>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	4640      	mov	r0, r8
 800b5ce:	4649      	mov	r1, r9
 800b5d0:	f7f5 f95c 	bl	800088c <__aeabi_ddiv>
 800b5d4:	4632      	mov	r2, r6
 800b5d6:	463b      	mov	r3, r7
 800b5d8:	f7f5 f82e 	bl	8000638 <__aeabi_dmul>
 800b5dc:	a320      	add	r3, pc, #128	; (adr r3, 800b660 <__ieee754_acos+0x2d8>)
 800b5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e2:	f7f4 fe71 	bl	80002c8 <__aeabi_dsub>
 800b5e6:	4632      	mov	r2, r6
 800b5e8:	463b      	mov	r3, r7
 800b5ea:	f7f4 fe6f 	bl	80002cc <__adddf3>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	f7f4 fe6b 	bl	80002cc <__adddf3>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	a103      	add	r1, pc, #12	; (adr r1, 800b608 <__ieee754_acos+0x280>)
 800b5fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b600:	e76f      	b.n	800b4e2 <__ieee754_acos+0x15a>
 800b602:	bf00      	nop
 800b604:	f3af 8000 	nop.w
 800b608:	54442d18 	.word	0x54442d18
 800b60c:	400921fb 	.word	0x400921fb
 800b610:	0dfdf709 	.word	0x0dfdf709
 800b614:	3f023de1 	.word	0x3f023de1
 800b618:	7501b288 	.word	0x7501b288
 800b61c:	3f49efe0 	.word	0x3f49efe0
 800b620:	b5688f3b 	.word	0xb5688f3b
 800b624:	3fa48228 	.word	0x3fa48228
 800b628:	0e884455 	.word	0x0e884455
 800b62c:	3fc9c155 	.word	0x3fc9c155
 800b630:	03eb6f7d 	.word	0x03eb6f7d
 800b634:	3fd4d612 	.word	0x3fd4d612
 800b638:	55555555 	.word	0x55555555
 800b63c:	3fc55555 	.word	0x3fc55555
 800b640:	b12e9282 	.word	0xb12e9282
 800b644:	3fb3b8c5 	.word	0x3fb3b8c5
 800b648:	1b8d0159 	.word	0x1b8d0159
 800b64c:	3fe6066c 	.word	0x3fe6066c
 800b650:	9c598ac8 	.word	0x9c598ac8
 800b654:	40002ae5 	.word	0x40002ae5
 800b658:	1c8a2d4b 	.word	0x1c8a2d4b
 800b65c:	40033a27 	.word	0x40033a27
 800b660:	33145c07 	.word	0x33145c07
 800b664:	3c91a626 	.word	0x3c91a626
 800b668:	54442d18 	.word	0x54442d18
 800b66c:	3ff921fb 	.word	0x3ff921fb
 800b670:	3fefffff 	.word	0x3fefffff
 800b674:	3fdfffff 	.word	0x3fdfffff
 800b678:	3c600000 	.word	0x3c600000
 800b67c:	3ff00000 	.word	0x3ff00000
 800b680:	3fe00000 	.word	0x3fe00000
 800b684:	ee10 2a10 	vmov	r2, s0
 800b688:	462b      	mov	r3, r5
 800b68a:	496d      	ldr	r1, [pc, #436]	; (800b840 <__ieee754_acos+0x4b8>)
 800b68c:	2000      	movs	r0, #0
 800b68e:	f7f4 fe1b 	bl	80002c8 <__aeabi_dsub>
 800b692:	4b6c      	ldr	r3, [pc, #432]	; (800b844 <__ieee754_acos+0x4bc>)
 800b694:	2200      	movs	r2, #0
 800b696:	f7f4 ffcf 	bl	8000638 <__aeabi_dmul>
 800b69a:	4604      	mov	r4, r0
 800b69c:	460d      	mov	r5, r1
 800b69e:	ec45 4b10 	vmov	d0, r4, r5
 800b6a2:	f000 fba9 	bl	800bdf8 <__ieee754_sqrt>
 800b6a6:	a34e      	add	r3, pc, #312	; (adr r3, 800b7e0 <__ieee754_acos+0x458>)
 800b6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	4629      	mov	r1, r5
 800b6b0:	ec59 8b10 	vmov	r8, r9, d0
 800b6b4:	f7f4 ffc0 	bl	8000638 <__aeabi_dmul>
 800b6b8:	a34b      	add	r3, pc, #300	; (adr r3, 800b7e8 <__ieee754_acos+0x460>)
 800b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6be:	f7f4 fe05 	bl	80002cc <__adddf3>
 800b6c2:	4622      	mov	r2, r4
 800b6c4:	462b      	mov	r3, r5
 800b6c6:	f7f4 ffb7 	bl	8000638 <__aeabi_dmul>
 800b6ca:	a349      	add	r3, pc, #292	; (adr r3, 800b7f0 <__ieee754_acos+0x468>)
 800b6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d0:	f7f4 fdfa 	bl	80002c8 <__aeabi_dsub>
 800b6d4:	4622      	mov	r2, r4
 800b6d6:	462b      	mov	r3, r5
 800b6d8:	f7f4 ffae 	bl	8000638 <__aeabi_dmul>
 800b6dc:	a346      	add	r3, pc, #280	; (adr r3, 800b7f8 <__ieee754_acos+0x470>)
 800b6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e2:	f7f4 fdf3 	bl	80002cc <__adddf3>
 800b6e6:	4622      	mov	r2, r4
 800b6e8:	462b      	mov	r3, r5
 800b6ea:	f7f4 ffa5 	bl	8000638 <__aeabi_dmul>
 800b6ee:	a344      	add	r3, pc, #272	; (adr r3, 800b800 <__ieee754_acos+0x478>)
 800b6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f4:	f7f4 fde8 	bl	80002c8 <__aeabi_dsub>
 800b6f8:	4622      	mov	r2, r4
 800b6fa:	462b      	mov	r3, r5
 800b6fc:	f7f4 ff9c 	bl	8000638 <__aeabi_dmul>
 800b700:	a341      	add	r3, pc, #260	; (adr r3, 800b808 <__ieee754_acos+0x480>)
 800b702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b706:	f7f4 fde1 	bl	80002cc <__adddf3>
 800b70a:	4622      	mov	r2, r4
 800b70c:	462b      	mov	r3, r5
 800b70e:	f7f4 ff93 	bl	8000638 <__aeabi_dmul>
 800b712:	a33f      	add	r3, pc, #252	; (adr r3, 800b810 <__ieee754_acos+0x488>)
 800b714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b718:	4682      	mov	sl, r0
 800b71a:	468b      	mov	fp, r1
 800b71c:	4620      	mov	r0, r4
 800b71e:	4629      	mov	r1, r5
 800b720:	f7f4 ff8a 	bl	8000638 <__aeabi_dmul>
 800b724:	a33c      	add	r3, pc, #240	; (adr r3, 800b818 <__ieee754_acos+0x490>)
 800b726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72a:	f7f4 fdcd 	bl	80002c8 <__aeabi_dsub>
 800b72e:	4622      	mov	r2, r4
 800b730:	462b      	mov	r3, r5
 800b732:	f7f4 ff81 	bl	8000638 <__aeabi_dmul>
 800b736:	a33a      	add	r3, pc, #232	; (adr r3, 800b820 <__ieee754_acos+0x498>)
 800b738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73c:	f7f4 fdc6 	bl	80002cc <__adddf3>
 800b740:	4622      	mov	r2, r4
 800b742:	462b      	mov	r3, r5
 800b744:	f7f4 ff78 	bl	8000638 <__aeabi_dmul>
 800b748:	a337      	add	r3, pc, #220	; (adr r3, 800b828 <__ieee754_acos+0x4a0>)
 800b74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74e:	f7f4 fdbb 	bl	80002c8 <__aeabi_dsub>
 800b752:	4622      	mov	r2, r4
 800b754:	462b      	mov	r3, r5
 800b756:	f7f4 ff6f 	bl	8000638 <__aeabi_dmul>
 800b75a:	4b39      	ldr	r3, [pc, #228]	; (800b840 <__ieee754_acos+0x4b8>)
 800b75c:	2200      	movs	r2, #0
 800b75e:	f7f4 fdb5 	bl	80002cc <__adddf3>
 800b762:	4602      	mov	r2, r0
 800b764:	460b      	mov	r3, r1
 800b766:	4650      	mov	r0, sl
 800b768:	4659      	mov	r1, fp
 800b76a:	f7f5 f88f 	bl	800088c <__aeabi_ddiv>
 800b76e:	4642      	mov	r2, r8
 800b770:	464b      	mov	r3, r9
 800b772:	f7f4 ff61 	bl	8000638 <__aeabi_dmul>
 800b776:	2600      	movs	r6, #0
 800b778:	4682      	mov	sl, r0
 800b77a:	468b      	mov	fp, r1
 800b77c:	4632      	mov	r2, r6
 800b77e:	464b      	mov	r3, r9
 800b780:	4630      	mov	r0, r6
 800b782:	4649      	mov	r1, r9
 800b784:	f7f4 ff58 	bl	8000638 <__aeabi_dmul>
 800b788:	4602      	mov	r2, r0
 800b78a:	460b      	mov	r3, r1
 800b78c:	4620      	mov	r0, r4
 800b78e:	4629      	mov	r1, r5
 800b790:	f7f4 fd9a 	bl	80002c8 <__aeabi_dsub>
 800b794:	4632      	mov	r2, r6
 800b796:	4604      	mov	r4, r0
 800b798:	460d      	mov	r5, r1
 800b79a:	464b      	mov	r3, r9
 800b79c:	4640      	mov	r0, r8
 800b79e:	4649      	mov	r1, r9
 800b7a0:	f7f4 fd94 	bl	80002cc <__adddf3>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	4629      	mov	r1, r5
 800b7ac:	f7f5 f86e 	bl	800088c <__aeabi_ddiv>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	4650      	mov	r0, sl
 800b7b6:	4659      	mov	r1, fp
 800b7b8:	f7f4 fd88 	bl	80002cc <__adddf3>
 800b7bc:	4632      	mov	r2, r6
 800b7be:	464b      	mov	r3, r9
 800b7c0:	f7f4 fd84 	bl	80002cc <__adddf3>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	f7f4 fd80 	bl	80002cc <__adddf3>
 800b7cc:	e5fe      	b.n	800b3cc <__ieee754_acos+0x44>
 800b7ce:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800b830 <__ieee754_acos+0x4a8>
 800b7d2:	e5ed      	b.n	800b3b0 <__ieee754_acos+0x28>
 800b7d4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800b838 <__ieee754_acos+0x4b0>
 800b7d8:	e5ea      	b.n	800b3b0 <__ieee754_acos+0x28>
 800b7da:	bf00      	nop
 800b7dc:	f3af 8000 	nop.w
 800b7e0:	0dfdf709 	.word	0x0dfdf709
 800b7e4:	3f023de1 	.word	0x3f023de1
 800b7e8:	7501b288 	.word	0x7501b288
 800b7ec:	3f49efe0 	.word	0x3f49efe0
 800b7f0:	b5688f3b 	.word	0xb5688f3b
 800b7f4:	3fa48228 	.word	0x3fa48228
 800b7f8:	0e884455 	.word	0x0e884455
 800b7fc:	3fc9c155 	.word	0x3fc9c155
 800b800:	03eb6f7d 	.word	0x03eb6f7d
 800b804:	3fd4d612 	.word	0x3fd4d612
 800b808:	55555555 	.word	0x55555555
 800b80c:	3fc55555 	.word	0x3fc55555
 800b810:	b12e9282 	.word	0xb12e9282
 800b814:	3fb3b8c5 	.word	0x3fb3b8c5
 800b818:	1b8d0159 	.word	0x1b8d0159
 800b81c:	3fe6066c 	.word	0x3fe6066c
 800b820:	9c598ac8 	.word	0x9c598ac8
 800b824:	40002ae5 	.word	0x40002ae5
 800b828:	1c8a2d4b 	.word	0x1c8a2d4b
 800b82c:	40033a27 	.word	0x40033a27
	...
 800b838:	54442d18 	.word	0x54442d18
 800b83c:	3ff921fb 	.word	0x3ff921fb
 800b840:	3ff00000 	.word	0x3ff00000
 800b844:	3fe00000 	.word	0x3fe00000

0800b848 <__ieee754_atan2>:
 800b848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b84c:	ec57 6b11 	vmov	r6, r7, d1
 800b850:	4273      	negs	r3, r6
 800b852:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b9d8 <__ieee754_atan2+0x190>
 800b856:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b85a:	4333      	orrs	r3, r6
 800b85c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b860:	4573      	cmp	r3, lr
 800b862:	ec51 0b10 	vmov	r0, r1, d0
 800b866:	ee11 8a10 	vmov	r8, s2
 800b86a:	d80a      	bhi.n	800b882 <__ieee754_atan2+0x3a>
 800b86c:	4244      	negs	r4, r0
 800b86e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b872:	4304      	orrs	r4, r0
 800b874:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b878:	4574      	cmp	r4, lr
 800b87a:	ee10 9a10 	vmov	r9, s0
 800b87e:	468c      	mov	ip, r1
 800b880:	d907      	bls.n	800b892 <__ieee754_atan2+0x4a>
 800b882:	4632      	mov	r2, r6
 800b884:	463b      	mov	r3, r7
 800b886:	f7f4 fd21 	bl	80002cc <__adddf3>
 800b88a:	ec41 0b10 	vmov	d0, r0, r1
 800b88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b892:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b896:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b89a:	4334      	orrs	r4, r6
 800b89c:	d103      	bne.n	800b8a6 <__ieee754_atan2+0x5e>
 800b89e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8a2:	f001 b835 	b.w	800c910 <atan>
 800b8a6:	17bc      	asrs	r4, r7, #30
 800b8a8:	f004 0402 	and.w	r4, r4, #2
 800b8ac:	ea53 0909 	orrs.w	r9, r3, r9
 800b8b0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b8b4:	d107      	bne.n	800b8c6 <__ieee754_atan2+0x7e>
 800b8b6:	2c02      	cmp	r4, #2
 800b8b8:	d060      	beq.n	800b97c <__ieee754_atan2+0x134>
 800b8ba:	2c03      	cmp	r4, #3
 800b8bc:	d1e5      	bne.n	800b88a <__ieee754_atan2+0x42>
 800b8be:	a142      	add	r1, pc, #264	; (adr r1, 800b9c8 <__ieee754_atan2+0x180>)
 800b8c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8c4:	e7e1      	b.n	800b88a <__ieee754_atan2+0x42>
 800b8c6:	ea52 0808 	orrs.w	r8, r2, r8
 800b8ca:	d106      	bne.n	800b8da <__ieee754_atan2+0x92>
 800b8cc:	f1bc 0f00 	cmp.w	ip, #0
 800b8d0:	da5f      	bge.n	800b992 <__ieee754_atan2+0x14a>
 800b8d2:	a13f      	add	r1, pc, #252	; (adr r1, 800b9d0 <__ieee754_atan2+0x188>)
 800b8d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8d8:	e7d7      	b.n	800b88a <__ieee754_atan2+0x42>
 800b8da:	4572      	cmp	r2, lr
 800b8dc:	d10f      	bne.n	800b8fe <__ieee754_atan2+0xb6>
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b8e4:	d107      	bne.n	800b8f6 <__ieee754_atan2+0xae>
 800b8e6:	2c02      	cmp	r4, #2
 800b8e8:	d84c      	bhi.n	800b984 <__ieee754_atan2+0x13c>
 800b8ea:	4b35      	ldr	r3, [pc, #212]	; (800b9c0 <__ieee754_atan2+0x178>)
 800b8ec:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b8f0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b8f4:	e7c9      	b.n	800b88a <__ieee754_atan2+0x42>
 800b8f6:	2c02      	cmp	r4, #2
 800b8f8:	d848      	bhi.n	800b98c <__ieee754_atan2+0x144>
 800b8fa:	4b32      	ldr	r3, [pc, #200]	; (800b9c4 <__ieee754_atan2+0x17c>)
 800b8fc:	e7f6      	b.n	800b8ec <__ieee754_atan2+0xa4>
 800b8fe:	4573      	cmp	r3, lr
 800b900:	d0e4      	beq.n	800b8cc <__ieee754_atan2+0x84>
 800b902:	1a9b      	subs	r3, r3, r2
 800b904:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b908:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b90c:	da1e      	bge.n	800b94c <__ieee754_atan2+0x104>
 800b90e:	2f00      	cmp	r7, #0
 800b910:	da01      	bge.n	800b916 <__ieee754_atan2+0xce>
 800b912:	323c      	adds	r2, #60	; 0x3c
 800b914:	db1e      	blt.n	800b954 <__ieee754_atan2+0x10c>
 800b916:	4632      	mov	r2, r6
 800b918:	463b      	mov	r3, r7
 800b91a:	f7f4 ffb7 	bl	800088c <__aeabi_ddiv>
 800b91e:	ec41 0b10 	vmov	d0, r0, r1
 800b922:	f001 f995 	bl	800cc50 <fabs>
 800b926:	f000 fff3 	bl	800c910 <atan>
 800b92a:	ec51 0b10 	vmov	r0, r1, d0
 800b92e:	2c01      	cmp	r4, #1
 800b930:	d013      	beq.n	800b95a <__ieee754_atan2+0x112>
 800b932:	2c02      	cmp	r4, #2
 800b934:	d015      	beq.n	800b962 <__ieee754_atan2+0x11a>
 800b936:	2c00      	cmp	r4, #0
 800b938:	d0a7      	beq.n	800b88a <__ieee754_atan2+0x42>
 800b93a:	a319      	add	r3, pc, #100	; (adr r3, 800b9a0 <__ieee754_atan2+0x158>)
 800b93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b940:	f7f4 fcc2 	bl	80002c8 <__aeabi_dsub>
 800b944:	a318      	add	r3, pc, #96	; (adr r3, 800b9a8 <__ieee754_atan2+0x160>)
 800b946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94a:	e014      	b.n	800b976 <__ieee754_atan2+0x12e>
 800b94c:	a118      	add	r1, pc, #96	; (adr r1, 800b9b0 <__ieee754_atan2+0x168>)
 800b94e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b952:	e7ec      	b.n	800b92e <__ieee754_atan2+0xe6>
 800b954:	2000      	movs	r0, #0
 800b956:	2100      	movs	r1, #0
 800b958:	e7e9      	b.n	800b92e <__ieee754_atan2+0xe6>
 800b95a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b95e:	4619      	mov	r1, r3
 800b960:	e793      	b.n	800b88a <__ieee754_atan2+0x42>
 800b962:	a30f      	add	r3, pc, #60	; (adr r3, 800b9a0 <__ieee754_atan2+0x158>)
 800b964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b968:	f7f4 fcae 	bl	80002c8 <__aeabi_dsub>
 800b96c:	4602      	mov	r2, r0
 800b96e:	460b      	mov	r3, r1
 800b970:	a10d      	add	r1, pc, #52	; (adr r1, 800b9a8 <__ieee754_atan2+0x160>)
 800b972:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b976:	f7f4 fca7 	bl	80002c8 <__aeabi_dsub>
 800b97a:	e786      	b.n	800b88a <__ieee754_atan2+0x42>
 800b97c:	a10a      	add	r1, pc, #40	; (adr r1, 800b9a8 <__ieee754_atan2+0x160>)
 800b97e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b982:	e782      	b.n	800b88a <__ieee754_atan2+0x42>
 800b984:	a10c      	add	r1, pc, #48	; (adr r1, 800b9b8 <__ieee754_atan2+0x170>)
 800b986:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b98a:	e77e      	b.n	800b88a <__ieee754_atan2+0x42>
 800b98c:	2000      	movs	r0, #0
 800b98e:	2100      	movs	r1, #0
 800b990:	e77b      	b.n	800b88a <__ieee754_atan2+0x42>
 800b992:	a107      	add	r1, pc, #28	; (adr r1, 800b9b0 <__ieee754_atan2+0x168>)
 800b994:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b998:	e777      	b.n	800b88a <__ieee754_atan2+0x42>
 800b99a:	bf00      	nop
 800b99c:	f3af 8000 	nop.w
 800b9a0:	33145c07 	.word	0x33145c07
 800b9a4:	3ca1a626 	.word	0x3ca1a626
 800b9a8:	54442d18 	.word	0x54442d18
 800b9ac:	400921fb 	.word	0x400921fb
 800b9b0:	54442d18 	.word	0x54442d18
 800b9b4:	3ff921fb 	.word	0x3ff921fb
 800b9b8:	54442d18 	.word	0x54442d18
 800b9bc:	3fe921fb 	.word	0x3fe921fb
 800b9c0:	0800d518 	.word	0x0800d518
 800b9c4:	0800d530 	.word	0x0800d530
 800b9c8:	54442d18 	.word	0x54442d18
 800b9cc:	c00921fb 	.word	0xc00921fb
 800b9d0:	54442d18 	.word	0x54442d18
 800b9d4:	bff921fb 	.word	0xbff921fb
 800b9d8:	7ff00000 	.word	0x7ff00000
 800b9dc:	00000000 	.word	0x00000000

0800b9e0 <__ieee754_rem_pio2>:
 800b9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e4:	ed2d 8b02 	vpush	{d8}
 800b9e8:	ec55 4b10 	vmov	r4, r5, d0
 800b9ec:	4bca      	ldr	r3, [pc, #808]	; (800bd18 <__ieee754_rem_pio2+0x338>)
 800b9ee:	b08b      	sub	sp, #44	; 0x2c
 800b9f0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b9f4:	4598      	cmp	r8, r3
 800b9f6:	4682      	mov	sl, r0
 800b9f8:	9502      	str	r5, [sp, #8]
 800b9fa:	dc08      	bgt.n	800ba0e <__ieee754_rem_pio2+0x2e>
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	2300      	movs	r3, #0
 800ba00:	ed80 0b00 	vstr	d0, [r0]
 800ba04:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ba08:	f04f 0b00 	mov.w	fp, #0
 800ba0c:	e028      	b.n	800ba60 <__ieee754_rem_pio2+0x80>
 800ba0e:	4bc3      	ldr	r3, [pc, #780]	; (800bd1c <__ieee754_rem_pio2+0x33c>)
 800ba10:	4598      	cmp	r8, r3
 800ba12:	dc78      	bgt.n	800bb06 <__ieee754_rem_pio2+0x126>
 800ba14:	9b02      	ldr	r3, [sp, #8]
 800ba16:	4ec2      	ldr	r6, [pc, #776]	; (800bd20 <__ieee754_rem_pio2+0x340>)
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	ee10 0a10 	vmov	r0, s0
 800ba1e:	a3b0      	add	r3, pc, #704	; (adr r3, 800bce0 <__ieee754_rem_pio2+0x300>)
 800ba20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba24:	4629      	mov	r1, r5
 800ba26:	dd39      	ble.n	800ba9c <__ieee754_rem_pio2+0xbc>
 800ba28:	f7f4 fc4e 	bl	80002c8 <__aeabi_dsub>
 800ba2c:	45b0      	cmp	r8, r6
 800ba2e:	4604      	mov	r4, r0
 800ba30:	460d      	mov	r5, r1
 800ba32:	d01b      	beq.n	800ba6c <__ieee754_rem_pio2+0x8c>
 800ba34:	a3ac      	add	r3, pc, #688	; (adr r3, 800bce8 <__ieee754_rem_pio2+0x308>)
 800ba36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3a:	f7f4 fc45 	bl	80002c8 <__aeabi_dsub>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	460b      	mov	r3, r1
 800ba42:	e9ca 2300 	strd	r2, r3, [sl]
 800ba46:	4620      	mov	r0, r4
 800ba48:	4629      	mov	r1, r5
 800ba4a:	f7f4 fc3d 	bl	80002c8 <__aeabi_dsub>
 800ba4e:	a3a6      	add	r3, pc, #664	; (adr r3, 800bce8 <__ieee754_rem_pio2+0x308>)
 800ba50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba54:	f7f4 fc38 	bl	80002c8 <__aeabi_dsub>
 800ba58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ba5c:	f04f 0b01 	mov.w	fp, #1
 800ba60:	4658      	mov	r0, fp
 800ba62:	b00b      	add	sp, #44	; 0x2c
 800ba64:	ecbd 8b02 	vpop	{d8}
 800ba68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6c:	a3a0      	add	r3, pc, #640	; (adr r3, 800bcf0 <__ieee754_rem_pio2+0x310>)
 800ba6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba72:	f7f4 fc29 	bl	80002c8 <__aeabi_dsub>
 800ba76:	a3a0      	add	r3, pc, #640	; (adr r3, 800bcf8 <__ieee754_rem_pio2+0x318>)
 800ba78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7c:	4604      	mov	r4, r0
 800ba7e:	460d      	mov	r5, r1
 800ba80:	f7f4 fc22 	bl	80002c8 <__aeabi_dsub>
 800ba84:	4602      	mov	r2, r0
 800ba86:	460b      	mov	r3, r1
 800ba88:	e9ca 2300 	strd	r2, r3, [sl]
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	4629      	mov	r1, r5
 800ba90:	f7f4 fc1a 	bl	80002c8 <__aeabi_dsub>
 800ba94:	a398      	add	r3, pc, #608	; (adr r3, 800bcf8 <__ieee754_rem_pio2+0x318>)
 800ba96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9a:	e7db      	b.n	800ba54 <__ieee754_rem_pio2+0x74>
 800ba9c:	f7f4 fc16 	bl	80002cc <__adddf3>
 800baa0:	45b0      	cmp	r8, r6
 800baa2:	4604      	mov	r4, r0
 800baa4:	460d      	mov	r5, r1
 800baa6:	d016      	beq.n	800bad6 <__ieee754_rem_pio2+0xf6>
 800baa8:	a38f      	add	r3, pc, #572	; (adr r3, 800bce8 <__ieee754_rem_pio2+0x308>)
 800baaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baae:	f7f4 fc0d 	bl	80002cc <__adddf3>
 800bab2:	4602      	mov	r2, r0
 800bab4:	460b      	mov	r3, r1
 800bab6:	e9ca 2300 	strd	r2, r3, [sl]
 800baba:	4620      	mov	r0, r4
 800babc:	4629      	mov	r1, r5
 800babe:	f7f4 fc03 	bl	80002c8 <__aeabi_dsub>
 800bac2:	a389      	add	r3, pc, #548	; (adr r3, 800bce8 <__ieee754_rem_pio2+0x308>)
 800bac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac8:	f7f4 fc00 	bl	80002cc <__adddf3>
 800bacc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800bad0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bad4:	e7c4      	b.n	800ba60 <__ieee754_rem_pio2+0x80>
 800bad6:	a386      	add	r3, pc, #536	; (adr r3, 800bcf0 <__ieee754_rem_pio2+0x310>)
 800bad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800badc:	f7f4 fbf6 	bl	80002cc <__adddf3>
 800bae0:	a385      	add	r3, pc, #532	; (adr r3, 800bcf8 <__ieee754_rem_pio2+0x318>)
 800bae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae6:	4604      	mov	r4, r0
 800bae8:	460d      	mov	r5, r1
 800baea:	f7f4 fbef 	bl	80002cc <__adddf3>
 800baee:	4602      	mov	r2, r0
 800baf0:	460b      	mov	r3, r1
 800baf2:	e9ca 2300 	strd	r2, r3, [sl]
 800baf6:	4620      	mov	r0, r4
 800baf8:	4629      	mov	r1, r5
 800bafa:	f7f4 fbe5 	bl	80002c8 <__aeabi_dsub>
 800bafe:	a37e      	add	r3, pc, #504	; (adr r3, 800bcf8 <__ieee754_rem_pio2+0x318>)
 800bb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb04:	e7e0      	b.n	800bac8 <__ieee754_rem_pio2+0xe8>
 800bb06:	4b87      	ldr	r3, [pc, #540]	; (800bd24 <__ieee754_rem_pio2+0x344>)
 800bb08:	4598      	cmp	r8, r3
 800bb0a:	f300 80d9 	bgt.w	800bcc0 <__ieee754_rem_pio2+0x2e0>
 800bb0e:	f001 f89f 	bl	800cc50 <fabs>
 800bb12:	ec55 4b10 	vmov	r4, r5, d0
 800bb16:	ee10 0a10 	vmov	r0, s0
 800bb1a:	a379      	add	r3, pc, #484	; (adr r3, 800bd00 <__ieee754_rem_pio2+0x320>)
 800bb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb20:	4629      	mov	r1, r5
 800bb22:	f7f4 fd89 	bl	8000638 <__aeabi_dmul>
 800bb26:	4b80      	ldr	r3, [pc, #512]	; (800bd28 <__ieee754_rem_pio2+0x348>)
 800bb28:	2200      	movs	r2, #0
 800bb2a:	f7f4 fbcf 	bl	80002cc <__adddf3>
 800bb2e:	f7f5 f833 	bl	8000b98 <__aeabi_d2iz>
 800bb32:	4683      	mov	fp, r0
 800bb34:	f7f4 fd16 	bl	8000564 <__aeabi_i2d>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	ec43 2b18 	vmov	d8, r2, r3
 800bb40:	a367      	add	r3, pc, #412	; (adr r3, 800bce0 <__ieee754_rem_pio2+0x300>)
 800bb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb46:	f7f4 fd77 	bl	8000638 <__aeabi_dmul>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	4620      	mov	r0, r4
 800bb50:	4629      	mov	r1, r5
 800bb52:	f7f4 fbb9 	bl	80002c8 <__aeabi_dsub>
 800bb56:	a364      	add	r3, pc, #400	; (adr r3, 800bce8 <__ieee754_rem_pio2+0x308>)
 800bb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5c:	4606      	mov	r6, r0
 800bb5e:	460f      	mov	r7, r1
 800bb60:	ec51 0b18 	vmov	r0, r1, d8
 800bb64:	f7f4 fd68 	bl	8000638 <__aeabi_dmul>
 800bb68:	f1bb 0f1f 	cmp.w	fp, #31
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	460d      	mov	r5, r1
 800bb70:	dc0d      	bgt.n	800bb8e <__ieee754_rem_pio2+0x1ae>
 800bb72:	4b6e      	ldr	r3, [pc, #440]	; (800bd2c <__ieee754_rem_pio2+0x34c>)
 800bb74:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800bb78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb7c:	4543      	cmp	r3, r8
 800bb7e:	d006      	beq.n	800bb8e <__ieee754_rem_pio2+0x1ae>
 800bb80:	4622      	mov	r2, r4
 800bb82:	462b      	mov	r3, r5
 800bb84:	4630      	mov	r0, r6
 800bb86:	4639      	mov	r1, r7
 800bb88:	f7f4 fb9e 	bl	80002c8 <__aeabi_dsub>
 800bb8c:	e00f      	b.n	800bbae <__ieee754_rem_pio2+0x1ce>
 800bb8e:	462b      	mov	r3, r5
 800bb90:	4622      	mov	r2, r4
 800bb92:	4630      	mov	r0, r6
 800bb94:	4639      	mov	r1, r7
 800bb96:	f7f4 fb97 	bl	80002c8 <__aeabi_dsub>
 800bb9a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bb9e:	9303      	str	r3, [sp, #12]
 800bba0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bba4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800bba8:	f1b8 0f10 	cmp.w	r8, #16
 800bbac:	dc02      	bgt.n	800bbb4 <__ieee754_rem_pio2+0x1d4>
 800bbae:	e9ca 0100 	strd	r0, r1, [sl]
 800bbb2:	e039      	b.n	800bc28 <__ieee754_rem_pio2+0x248>
 800bbb4:	a34e      	add	r3, pc, #312	; (adr r3, 800bcf0 <__ieee754_rem_pio2+0x310>)
 800bbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbba:	ec51 0b18 	vmov	r0, r1, d8
 800bbbe:	f7f4 fd3b 	bl	8000638 <__aeabi_dmul>
 800bbc2:	4604      	mov	r4, r0
 800bbc4:	460d      	mov	r5, r1
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	460b      	mov	r3, r1
 800bbca:	4630      	mov	r0, r6
 800bbcc:	4639      	mov	r1, r7
 800bbce:	f7f4 fb7b 	bl	80002c8 <__aeabi_dsub>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	4680      	mov	r8, r0
 800bbd8:	4689      	mov	r9, r1
 800bbda:	4630      	mov	r0, r6
 800bbdc:	4639      	mov	r1, r7
 800bbde:	f7f4 fb73 	bl	80002c8 <__aeabi_dsub>
 800bbe2:	4622      	mov	r2, r4
 800bbe4:	462b      	mov	r3, r5
 800bbe6:	f7f4 fb6f 	bl	80002c8 <__aeabi_dsub>
 800bbea:	a343      	add	r3, pc, #268	; (adr r3, 800bcf8 <__ieee754_rem_pio2+0x318>)
 800bbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf0:	4604      	mov	r4, r0
 800bbf2:	460d      	mov	r5, r1
 800bbf4:	ec51 0b18 	vmov	r0, r1, d8
 800bbf8:	f7f4 fd1e 	bl	8000638 <__aeabi_dmul>
 800bbfc:	4622      	mov	r2, r4
 800bbfe:	462b      	mov	r3, r5
 800bc00:	f7f4 fb62 	bl	80002c8 <__aeabi_dsub>
 800bc04:	4602      	mov	r2, r0
 800bc06:	460b      	mov	r3, r1
 800bc08:	4604      	mov	r4, r0
 800bc0a:	460d      	mov	r5, r1
 800bc0c:	4640      	mov	r0, r8
 800bc0e:	4649      	mov	r1, r9
 800bc10:	f7f4 fb5a 	bl	80002c8 <__aeabi_dsub>
 800bc14:	9a03      	ldr	r2, [sp, #12]
 800bc16:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	2b31      	cmp	r3, #49	; 0x31
 800bc1e:	dc24      	bgt.n	800bc6a <__ieee754_rem_pio2+0x28a>
 800bc20:	e9ca 0100 	strd	r0, r1, [sl]
 800bc24:	4646      	mov	r6, r8
 800bc26:	464f      	mov	r7, r9
 800bc28:	e9da 8900 	ldrd	r8, r9, [sl]
 800bc2c:	4630      	mov	r0, r6
 800bc2e:	4642      	mov	r2, r8
 800bc30:	464b      	mov	r3, r9
 800bc32:	4639      	mov	r1, r7
 800bc34:	f7f4 fb48 	bl	80002c8 <__aeabi_dsub>
 800bc38:	462b      	mov	r3, r5
 800bc3a:	4622      	mov	r2, r4
 800bc3c:	f7f4 fb44 	bl	80002c8 <__aeabi_dsub>
 800bc40:	9b02      	ldr	r3, [sp, #8]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bc48:	f6bf af0a 	bge.w	800ba60 <__ieee754_rem_pio2+0x80>
 800bc4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bc50:	f8ca 3004 	str.w	r3, [sl, #4]
 800bc54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc58:	f8ca 8000 	str.w	r8, [sl]
 800bc5c:	f8ca 0008 	str.w	r0, [sl, #8]
 800bc60:	f8ca 300c 	str.w	r3, [sl, #12]
 800bc64:	f1cb 0b00 	rsb	fp, fp, #0
 800bc68:	e6fa      	b.n	800ba60 <__ieee754_rem_pio2+0x80>
 800bc6a:	a327      	add	r3, pc, #156	; (adr r3, 800bd08 <__ieee754_rem_pio2+0x328>)
 800bc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc70:	ec51 0b18 	vmov	r0, r1, d8
 800bc74:	f7f4 fce0 	bl	8000638 <__aeabi_dmul>
 800bc78:	4604      	mov	r4, r0
 800bc7a:	460d      	mov	r5, r1
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	460b      	mov	r3, r1
 800bc80:	4640      	mov	r0, r8
 800bc82:	4649      	mov	r1, r9
 800bc84:	f7f4 fb20 	bl	80002c8 <__aeabi_dsub>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	4606      	mov	r6, r0
 800bc8e:	460f      	mov	r7, r1
 800bc90:	4640      	mov	r0, r8
 800bc92:	4649      	mov	r1, r9
 800bc94:	f7f4 fb18 	bl	80002c8 <__aeabi_dsub>
 800bc98:	4622      	mov	r2, r4
 800bc9a:	462b      	mov	r3, r5
 800bc9c:	f7f4 fb14 	bl	80002c8 <__aeabi_dsub>
 800bca0:	a31b      	add	r3, pc, #108	; (adr r3, 800bd10 <__ieee754_rem_pio2+0x330>)
 800bca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca6:	4604      	mov	r4, r0
 800bca8:	460d      	mov	r5, r1
 800bcaa:	ec51 0b18 	vmov	r0, r1, d8
 800bcae:	f7f4 fcc3 	bl	8000638 <__aeabi_dmul>
 800bcb2:	4622      	mov	r2, r4
 800bcb4:	462b      	mov	r3, r5
 800bcb6:	f7f4 fb07 	bl	80002c8 <__aeabi_dsub>
 800bcba:	4604      	mov	r4, r0
 800bcbc:	460d      	mov	r5, r1
 800bcbe:	e75f      	b.n	800bb80 <__ieee754_rem_pio2+0x1a0>
 800bcc0:	4b1b      	ldr	r3, [pc, #108]	; (800bd30 <__ieee754_rem_pio2+0x350>)
 800bcc2:	4598      	cmp	r8, r3
 800bcc4:	dd36      	ble.n	800bd34 <__ieee754_rem_pio2+0x354>
 800bcc6:	ee10 2a10 	vmov	r2, s0
 800bcca:	462b      	mov	r3, r5
 800bccc:	4620      	mov	r0, r4
 800bcce:	4629      	mov	r1, r5
 800bcd0:	f7f4 fafa 	bl	80002c8 <__aeabi_dsub>
 800bcd4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bcd8:	e9ca 0100 	strd	r0, r1, [sl]
 800bcdc:	e694      	b.n	800ba08 <__ieee754_rem_pio2+0x28>
 800bcde:	bf00      	nop
 800bce0:	54400000 	.word	0x54400000
 800bce4:	3ff921fb 	.word	0x3ff921fb
 800bce8:	1a626331 	.word	0x1a626331
 800bcec:	3dd0b461 	.word	0x3dd0b461
 800bcf0:	1a600000 	.word	0x1a600000
 800bcf4:	3dd0b461 	.word	0x3dd0b461
 800bcf8:	2e037073 	.word	0x2e037073
 800bcfc:	3ba3198a 	.word	0x3ba3198a
 800bd00:	6dc9c883 	.word	0x6dc9c883
 800bd04:	3fe45f30 	.word	0x3fe45f30
 800bd08:	2e000000 	.word	0x2e000000
 800bd0c:	3ba3198a 	.word	0x3ba3198a
 800bd10:	252049c1 	.word	0x252049c1
 800bd14:	397b839a 	.word	0x397b839a
 800bd18:	3fe921fb 	.word	0x3fe921fb
 800bd1c:	4002d97b 	.word	0x4002d97b
 800bd20:	3ff921fb 	.word	0x3ff921fb
 800bd24:	413921fb 	.word	0x413921fb
 800bd28:	3fe00000 	.word	0x3fe00000
 800bd2c:	0800d548 	.word	0x0800d548
 800bd30:	7fefffff 	.word	0x7fefffff
 800bd34:	ea4f 5428 	mov.w	r4, r8, asr #20
 800bd38:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800bd3c:	ee10 0a10 	vmov	r0, s0
 800bd40:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800bd44:	ee10 6a10 	vmov	r6, s0
 800bd48:	460f      	mov	r7, r1
 800bd4a:	f7f4 ff25 	bl	8000b98 <__aeabi_d2iz>
 800bd4e:	f7f4 fc09 	bl	8000564 <__aeabi_i2d>
 800bd52:	4602      	mov	r2, r0
 800bd54:	460b      	mov	r3, r1
 800bd56:	4630      	mov	r0, r6
 800bd58:	4639      	mov	r1, r7
 800bd5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd5e:	f7f4 fab3 	bl	80002c8 <__aeabi_dsub>
 800bd62:	4b23      	ldr	r3, [pc, #140]	; (800bdf0 <__ieee754_rem_pio2+0x410>)
 800bd64:	2200      	movs	r2, #0
 800bd66:	f7f4 fc67 	bl	8000638 <__aeabi_dmul>
 800bd6a:	460f      	mov	r7, r1
 800bd6c:	4606      	mov	r6, r0
 800bd6e:	f7f4 ff13 	bl	8000b98 <__aeabi_d2iz>
 800bd72:	f7f4 fbf7 	bl	8000564 <__aeabi_i2d>
 800bd76:	4602      	mov	r2, r0
 800bd78:	460b      	mov	r3, r1
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	4639      	mov	r1, r7
 800bd7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bd82:	f7f4 faa1 	bl	80002c8 <__aeabi_dsub>
 800bd86:	4b1a      	ldr	r3, [pc, #104]	; (800bdf0 <__ieee754_rem_pio2+0x410>)
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f7f4 fc55 	bl	8000638 <__aeabi_dmul>
 800bd8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bd92:	ad04      	add	r5, sp, #16
 800bd94:	f04f 0803 	mov.w	r8, #3
 800bd98:	46a9      	mov	r9, r5
 800bd9a:	2600      	movs	r6, #0
 800bd9c:	2700      	movs	r7, #0
 800bd9e:	4632      	mov	r2, r6
 800bda0:	463b      	mov	r3, r7
 800bda2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800bda6:	46c3      	mov	fp, r8
 800bda8:	3d08      	subs	r5, #8
 800bdaa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bdae:	f7f4 feab 	bl	8000b08 <__aeabi_dcmpeq>
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d1f3      	bne.n	800bd9e <__ieee754_rem_pio2+0x3be>
 800bdb6:	4b0f      	ldr	r3, [pc, #60]	; (800bdf4 <__ieee754_rem_pio2+0x414>)
 800bdb8:	9301      	str	r3, [sp, #4]
 800bdba:	2302      	movs	r3, #2
 800bdbc:	9300      	str	r3, [sp, #0]
 800bdbe:	4622      	mov	r2, r4
 800bdc0:	465b      	mov	r3, fp
 800bdc2:	4651      	mov	r1, sl
 800bdc4:	4648      	mov	r0, r9
 800bdc6:	f000 f993 	bl	800c0f0 <__kernel_rem_pio2>
 800bdca:	9b02      	ldr	r3, [sp, #8]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	4683      	mov	fp, r0
 800bdd0:	f6bf ae46 	bge.w	800ba60 <__ieee754_rem_pio2+0x80>
 800bdd4:	e9da 2100 	ldrd	r2, r1, [sl]
 800bdd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bddc:	e9ca 2300 	strd	r2, r3, [sl]
 800bde0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800bde4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bde8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800bdec:	e73a      	b.n	800bc64 <__ieee754_rem_pio2+0x284>
 800bdee:	bf00      	nop
 800bdf0:	41700000 	.word	0x41700000
 800bdf4:	0800d5c8 	.word	0x0800d5c8

0800bdf8 <__ieee754_sqrt>:
 800bdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdfc:	ec55 4b10 	vmov	r4, r5, d0
 800be00:	4e55      	ldr	r6, [pc, #340]	; (800bf58 <__ieee754_sqrt+0x160>)
 800be02:	43ae      	bics	r6, r5
 800be04:	ee10 0a10 	vmov	r0, s0
 800be08:	ee10 3a10 	vmov	r3, s0
 800be0c:	462a      	mov	r2, r5
 800be0e:	4629      	mov	r1, r5
 800be10:	d110      	bne.n	800be34 <__ieee754_sqrt+0x3c>
 800be12:	ee10 2a10 	vmov	r2, s0
 800be16:	462b      	mov	r3, r5
 800be18:	f7f4 fc0e 	bl	8000638 <__aeabi_dmul>
 800be1c:	4602      	mov	r2, r0
 800be1e:	460b      	mov	r3, r1
 800be20:	4620      	mov	r0, r4
 800be22:	4629      	mov	r1, r5
 800be24:	f7f4 fa52 	bl	80002cc <__adddf3>
 800be28:	4604      	mov	r4, r0
 800be2a:	460d      	mov	r5, r1
 800be2c:	ec45 4b10 	vmov	d0, r4, r5
 800be30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be34:	2d00      	cmp	r5, #0
 800be36:	dc10      	bgt.n	800be5a <__ieee754_sqrt+0x62>
 800be38:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800be3c:	4330      	orrs	r0, r6
 800be3e:	d0f5      	beq.n	800be2c <__ieee754_sqrt+0x34>
 800be40:	b15d      	cbz	r5, 800be5a <__ieee754_sqrt+0x62>
 800be42:	ee10 2a10 	vmov	r2, s0
 800be46:	462b      	mov	r3, r5
 800be48:	ee10 0a10 	vmov	r0, s0
 800be4c:	f7f4 fa3c 	bl	80002c8 <__aeabi_dsub>
 800be50:	4602      	mov	r2, r0
 800be52:	460b      	mov	r3, r1
 800be54:	f7f4 fd1a 	bl	800088c <__aeabi_ddiv>
 800be58:	e7e6      	b.n	800be28 <__ieee754_sqrt+0x30>
 800be5a:	1512      	asrs	r2, r2, #20
 800be5c:	d074      	beq.n	800bf48 <__ieee754_sqrt+0x150>
 800be5e:	07d4      	lsls	r4, r2, #31
 800be60:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800be64:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800be68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800be6c:	bf5e      	ittt	pl
 800be6e:	0fda      	lsrpl	r2, r3, #31
 800be70:	005b      	lslpl	r3, r3, #1
 800be72:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800be76:	2400      	movs	r4, #0
 800be78:	0fda      	lsrs	r2, r3, #31
 800be7a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800be7e:	107f      	asrs	r7, r7, #1
 800be80:	005b      	lsls	r3, r3, #1
 800be82:	2516      	movs	r5, #22
 800be84:	4620      	mov	r0, r4
 800be86:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800be8a:	1886      	adds	r6, r0, r2
 800be8c:	428e      	cmp	r6, r1
 800be8e:	bfde      	ittt	le
 800be90:	1b89      	suble	r1, r1, r6
 800be92:	18b0      	addle	r0, r6, r2
 800be94:	18a4      	addle	r4, r4, r2
 800be96:	0049      	lsls	r1, r1, #1
 800be98:	3d01      	subs	r5, #1
 800be9a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800be9e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800bea2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bea6:	d1f0      	bne.n	800be8a <__ieee754_sqrt+0x92>
 800bea8:	462a      	mov	r2, r5
 800beaa:	f04f 0e20 	mov.w	lr, #32
 800beae:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800beb2:	4281      	cmp	r1, r0
 800beb4:	eb06 0c05 	add.w	ip, r6, r5
 800beb8:	dc02      	bgt.n	800bec0 <__ieee754_sqrt+0xc8>
 800beba:	d113      	bne.n	800bee4 <__ieee754_sqrt+0xec>
 800bebc:	459c      	cmp	ip, r3
 800bebe:	d811      	bhi.n	800bee4 <__ieee754_sqrt+0xec>
 800bec0:	f1bc 0f00 	cmp.w	ip, #0
 800bec4:	eb0c 0506 	add.w	r5, ip, r6
 800bec8:	da43      	bge.n	800bf52 <__ieee754_sqrt+0x15a>
 800beca:	2d00      	cmp	r5, #0
 800becc:	db41      	blt.n	800bf52 <__ieee754_sqrt+0x15a>
 800bece:	f100 0801 	add.w	r8, r0, #1
 800bed2:	1a09      	subs	r1, r1, r0
 800bed4:	459c      	cmp	ip, r3
 800bed6:	bf88      	it	hi
 800bed8:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800bedc:	eba3 030c 	sub.w	r3, r3, ip
 800bee0:	4432      	add	r2, r6
 800bee2:	4640      	mov	r0, r8
 800bee4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bee8:	f1be 0e01 	subs.w	lr, lr, #1
 800beec:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800bef0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bef4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bef8:	d1db      	bne.n	800beb2 <__ieee754_sqrt+0xba>
 800befa:	430b      	orrs	r3, r1
 800befc:	d006      	beq.n	800bf0c <__ieee754_sqrt+0x114>
 800befe:	1c50      	adds	r0, r2, #1
 800bf00:	bf13      	iteet	ne
 800bf02:	3201      	addne	r2, #1
 800bf04:	3401      	addeq	r4, #1
 800bf06:	4672      	moveq	r2, lr
 800bf08:	f022 0201 	bicne.w	r2, r2, #1
 800bf0c:	1063      	asrs	r3, r4, #1
 800bf0e:	0852      	lsrs	r2, r2, #1
 800bf10:	07e1      	lsls	r1, r4, #31
 800bf12:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bf16:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bf1a:	bf48      	it	mi
 800bf1c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bf20:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bf24:	4614      	mov	r4, r2
 800bf26:	e781      	b.n	800be2c <__ieee754_sqrt+0x34>
 800bf28:	0ad9      	lsrs	r1, r3, #11
 800bf2a:	3815      	subs	r0, #21
 800bf2c:	055b      	lsls	r3, r3, #21
 800bf2e:	2900      	cmp	r1, #0
 800bf30:	d0fa      	beq.n	800bf28 <__ieee754_sqrt+0x130>
 800bf32:	02cd      	lsls	r5, r1, #11
 800bf34:	d50a      	bpl.n	800bf4c <__ieee754_sqrt+0x154>
 800bf36:	f1c2 0420 	rsb	r4, r2, #32
 800bf3a:	fa23 f404 	lsr.w	r4, r3, r4
 800bf3e:	1e55      	subs	r5, r2, #1
 800bf40:	4093      	lsls	r3, r2
 800bf42:	4321      	orrs	r1, r4
 800bf44:	1b42      	subs	r2, r0, r5
 800bf46:	e78a      	b.n	800be5e <__ieee754_sqrt+0x66>
 800bf48:	4610      	mov	r0, r2
 800bf4a:	e7f0      	b.n	800bf2e <__ieee754_sqrt+0x136>
 800bf4c:	0049      	lsls	r1, r1, #1
 800bf4e:	3201      	adds	r2, #1
 800bf50:	e7ef      	b.n	800bf32 <__ieee754_sqrt+0x13a>
 800bf52:	4680      	mov	r8, r0
 800bf54:	e7bd      	b.n	800bed2 <__ieee754_sqrt+0xda>
 800bf56:	bf00      	nop
 800bf58:	7ff00000 	.word	0x7ff00000
 800bf5c:	00000000 	.word	0x00000000

0800bf60 <__kernel_cos>:
 800bf60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf64:	ec57 6b10 	vmov	r6, r7, d0
 800bf68:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bf6c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bf70:	ed8d 1b00 	vstr	d1, [sp]
 800bf74:	da07      	bge.n	800bf86 <__kernel_cos+0x26>
 800bf76:	ee10 0a10 	vmov	r0, s0
 800bf7a:	4639      	mov	r1, r7
 800bf7c:	f7f4 fe0c 	bl	8000b98 <__aeabi_d2iz>
 800bf80:	2800      	cmp	r0, #0
 800bf82:	f000 8088 	beq.w	800c096 <__kernel_cos+0x136>
 800bf86:	4632      	mov	r2, r6
 800bf88:	463b      	mov	r3, r7
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	4639      	mov	r1, r7
 800bf8e:	f7f4 fb53 	bl	8000638 <__aeabi_dmul>
 800bf92:	4b51      	ldr	r3, [pc, #324]	; (800c0d8 <__kernel_cos+0x178>)
 800bf94:	2200      	movs	r2, #0
 800bf96:	4604      	mov	r4, r0
 800bf98:	460d      	mov	r5, r1
 800bf9a:	f7f4 fb4d 	bl	8000638 <__aeabi_dmul>
 800bf9e:	a340      	add	r3, pc, #256	; (adr r3, 800c0a0 <__kernel_cos+0x140>)
 800bfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa4:	4682      	mov	sl, r0
 800bfa6:	468b      	mov	fp, r1
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	4629      	mov	r1, r5
 800bfac:	f7f4 fb44 	bl	8000638 <__aeabi_dmul>
 800bfb0:	a33d      	add	r3, pc, #244	; (adr r3, 800c0a8 <__kernel_cos+0x148>)
 800bfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb6:	f7f4 f989 	bl	80002cc <__adddf3>
 800bfba:	4622      	mov	r2, r4
 800bfbc:	462b      	mov	r3, r5
 800bfbe:	f7f4 fb3b 	bl	8000638 <__aeabi_dmul>
 800bfc2:	a33b      	add	r3, pc, #236	; (adr r3, 800c0b0 <__kernel_cos+0x150>)
 800bfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc8:	f7f4 f97e 	bl	80002c8 <__aeabi_dsub>
 800bfcc:	4622      	mov	r2, r4
 800bfce:	462b      	mov	r3, r5
 800bfd0:	f7f4 fb32 	bl	8000638 <__aeabi_dmul>
 800bfd4:	a338      	add	r3, pc, #224	; (adr r3, 800c0b8 <__kernel_cos+0x158>)
 800bfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfda:	f7f4 f977 	bl	80002cc <__adddf3>
 800bfde:	4622      	mov	r2, r4
 800bfe0:	462b      	mov	r3, r5
 800bfe2:	f7f4 fb29 	bl	8000638 <__aeabi_dmul>
 800bfe6:	a336      	add	r3, pc, #216	; (adr r3, 800c0c0 <__kernel_cos+0x160>)
 800bfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfec:	f7f4 f96c 	bl	80002c8 <__aeabi_dsub>
 800bff0:	4622      	mov	r2, r4
 800bff2:	462b      	mov	r3, r5
 800bff4:	f7f4 fb20 	bl	8000638 <__aeabi_dmul>
 800bff8:	a333      	add	r3, pc, #204	; (adr r3, 800c0c8 <__kernel_cos+0x168>)
 800bffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffe:	f7f4 f965 	bl	80002cc <__adddf3>
 800c002:	4622      	mov	r2, r4
 800c004:	462b      	mov	r3, r5
 800c006:	f7f4 fb17 	bl	8000638 <__aeabi_dmul>
 800c00a:	4622      	mov	r2, r4
 800c00c:	462b      	mov	r3, r5
 800c00e:	f7f4 fb13 	bl	8000638 <__aeabi_dmul>
 800c012:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c016:	4604      	mov	r4, r0
 800c018:	460d      	mov	r5, r1
 800c01a:	4630      	mov	r0, r6
 800c01c:	4639      	mov	r1, r7
 800c01e:	f7f4 fb0b 	bl	8000638 <__aeabi_dmul>
 800c022:	460b      	mov	r3, r1
 800c024:	4602      	mov	r2, r0
 800c026:	4629      	mov	r1, r5
 800c028:	4620      	mov	r0, r4
 800c02a:	f7f4 f94d 	bl	80002c8 <__aeabi_dsub>
 800c02e:	4b2b      	ldr	r3, [pc, #172]	; (800c0dc <__kernel_cos+0x17c>)
 800c030:	4598      	cmp	r8, r3
 800c032:	4606      	mov	r6, r0
 800c034:	460f      	mov	r7, r1
 800c036:	dc10      	bgt.n	800c05a <__kernel_cos+0xfa>
 800c038:	4602      	mov	r2, r0
 800c03a:	460b      	mov	r3, r1
 800c03c:	4650      	mov	r0, sl
 800c03e:	4659      	mov	r1, fp
 800c040:	f7f4 f942 	bl	80002c8 <__aeabi_dsub>
 800c044:	460b      	mov	r3, r1
 800c046:	4926      	ldr	r1, [pc, #152]	; (800c0e0 <__kernel_cos+0x180>)
 800c048:	4602      	mov	r2, r0
 800c04a:	2000      	movs	r0, #0
 800c04c:	f7f4 f93c 	bl	80002c8 <__aeabi_dsub>
 800c050:	ec41 0b10 	vmov	d0, r0, r1
 800c054:	b003      	add	sp, #12
 800c056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c05a:	4b22      	ldr	r3, [pc, #136]	; (800c0e4 <__kernel_cos+0x184>)
 800c05c:	4920      	ldr	r1, [pc, #128]	; (800c0e0 <__kernel_cos+0x180>)
 800c05e:	4598      	cmp	r8, r3
 800c060:	bfcc      	ite	gt
 800c062:	4d21      	ldrgt	r5, [pc, #132]	; (800c0e8 <__kernel_cos+0x188>)
 800c064:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c068:	2400      	movs	r4, #0
 800c06a:	4622      	mov	r2, r4
 800c06c:	462b      	mov	r3, r5
 800c06e:	2000      	movs	r0, #0
 800c070:	f7f4 f92a 	bl	80002c8 <__aeabi_dsub>
 800c074:	4622      	mov	r2, r4
 800c076:	4680      	mov	r8, r0
 800c078:	4689      	mov	r9, r1
 800c07a:	462b      	mov	r3, r5
 800c07c:	4650      	mov	r0, sl
 800c07e:	4659      	mov	r1, fp
 800c080:	f7f4 f922 	bl	80002c8 <__aeabi_dsub>
 800c084:	4632      	mov	r2, r6
 800c086:	463b      	mov	r3, r7
 800c088:	f7f4 f91e 	bl	80002c8 <__aeabi_dsub>
 800c08c:	4602      	mov	r2, r0
 800c08e:	460b      	mov	r3, r1
 800c090:	4640      	mov	r0, r8
 800c092:	4649      	mov	r1, r9
 800c094:	e7da      	b.n	800c04c <__kernel_cos+0xec>
 800c096:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c0d0 <__kernel_cos+0x170>
 800c09a:	e7db      	b.n	800c054 <__kernel_cos+0xf4>
 800c09c:	f3af 8000 	nop.w
 800c0a0:	be8838d4 	.word	0xbe8838d4
 800c0a4:	bda8fae9 	.word	0xbda8fae9
 800c0a8:	bdb4b1c4 	.word	0xbdb4b1c4
 800c0ac:	3e21ee9e 	.word	0x3e21ee9e
 800c0b0:	809c52ad 	.word	0x809c52ad
 800c0b4:	3e927e4f 	.word	0x3e927e4f
 800c0b8:	19cb1590 	.word	0x19cb1590
 800c0bc:	3efa01a0 	.word	0x3efa01a0
 800c0c0:	16c15177 	.word	0x16c15177
 800c0c4:	3f56c16c 	.word	0x3f56c16c
 800c0c8:	5555554c 	.word	0x5555554c
 800c0cc:	3fa55555 	.word	0x3fa55555
 800c0d0:	00000000 	.word	0x00000000
 800c0d4:	3ff00000 	.word	0x3ff00000
 800c0d8:	3fe00000 	.word	0x3fe00000
 800c0dc:	3fd33332 	.word	0x3fd33332
 800c0e0:	3ff00000 	.word	0x3ff00000
 800c0e4:	3fe90000 	.word	0x3fe90000
 800c0e8:	3fd20000 	.word	0x3fd20000
 800c0ec:	00000000 	.word	0x00000000

0800c0f0 <__kernel_rem_pio2>:
 800c0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f4:	ed2d 8b02 	vpush	{d8}
 800c0f8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800c0fc:	f112 0f14 	cmn.w	r2, #20
 800c100:	9308      	str	r3, [sp, #32]
 800c102:	9101      	str	r1, [sp, #4]
 800c104:	4bc4      	ldr	r3, [pc, #784]	; (800c418 <__kernel_rem_pio2+0x328>)
 800c106:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800c108:	900b      	str	r0, [sp, #44]	; 0x2c
 800c10a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c10e:	9302      	str	r3, [sp, #8]
 800c110:	9b08      	ldr	r3, [sp, #32]
 800c112:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800c116:	bfa8      	it	ge
 800c118:	1ed4      	subge	r4, r2, #3
 800c11a:	9306      	str	r3, [sp, #24]
 800c11c:	bfb2      	itee	lt
 800c11e:	2400      	movlt	r4, #0
 800c120:	2318      	movge	r3, #24
 800c122:	fb94 f4f3 	sdivge	r4, r4, r3
 800c126:	f06f 0317 	mvn.w	r3, #23
 800c12a:	fb04 3303 	mla	r3, r4, r3, r3
 800c12e:	eb03 0a02 	add.w	sl, r3, r2
 800c132:	9b02      	ldr	r3, [sp, #8]
 800c134:	9a06      	ldr	r2, [sp, #24]
 800c136:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800c408 <__kernel_rem_pio2+0x318>
 800c13a:	eb03 0802 	add.w	r8, r3, r2
 800c13e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c140:	1aa7      	subs	r7, r4, r2
 800c142:	ae22      	add	r6, sp, #136	; 0x88
 800c144:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c148:	2500      	movs	r5, #0
 800c14a:	4545      	cmp	r5, r8
 800c14c:	dd13      	ble.n	800c176 <__kernel_rem_pio2+0x86>
 800c14e:	9b08      	ldr	r3, [sp, #32]
 800c150:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800c408 <__kernel_rem_pio2+0x318>
 800c154:	aa22      	add	r2, sp, #136	; 0x88
 800c156:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c15a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800c15e:	f04f 0800 	mov.w	r8, #0
 800c162:	9b02      	ldr	r3, [sp, #8]
 800c164:	4598      	cmp	r8, r3
 800c166:	dc2f      	bgt.n	800c1c8 <__kernel_rem_pio2+0xd8>
 800c168:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c16c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800c170:	462f      	mov	r7, r5
 800c172:	2600      	movs	r6, #0
 800c174:	e01b      	b.n	800c1ae <__kernel_rem_pio2+0xbe>
 800c176:	42ef      	cmn	r7, r5
 800c178:	d407      	bmi.n	800c18a <__kernel_rem_pio2+0x9a>
 800c17a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c17e:	f7f4 f9f1 	bl	8000564 <__aeabi_i2d>
 800c182:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c186:	3501      	adds	r5, #1
 800c188:	e7df      	b.n	800c14a <__kernel_rem_pio2+0x5a>
 800c18a:	ec51 0b18 	vmov	r0, r1, d8
 800c18e:	e7f8      	b.n	800c182 <__kernel_rem_pio2+0x92>
 800c190:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c194:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c198:	f7f4 fa4e 	bl	8000638 <__aeabi_dmul>
 800c19c:	4602      	mov	r2, r0
 800c19e:	460b      	mov	r3, r1
 800c1a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1a4:	f7f4 f892 	bl	80002cc <__adddf3>
 800c1a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1ac:	3601      	adds	r6, #1
 800c1ae:	9b06      	ldr	r3, [sp, #24]
 800c1b0:	429e      	cmp	r6, r3
 800c1b2:	f1a7 0708 	sub.w	r7, r7, #8
 800c1b6:	ddeb      	ble.n	800c190 <__kernel_rem_pio2+0xa0>
 800c1b8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c1bc:	f108 0801 	add.w	r8, r8, #1
 800c1c0:	ecab 7b02 	vstmia	fp!, {d7}
 800c1c4:	3508      	adds	r5, #8
 800c1c6:	e7cc      	b.n	800c162 <__kernel_rem_pio2+0x72>
 800c1c8:	9b02      	ldr	r3, [sp, #8]
 800c1ca:	aa0e      	add	r2, sp, #56	; 0x38
 800c1cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c1d0:	930d      	str	r3, [sp, #52]	; 0x34
 800c1d2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c1d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c1d8:	9c02      	ldr	r4, [sp, #8]
 800c1da:	930c      	str	r3, [sp, #48]	; 0x30
 800c1dc:	00e3      	lsls	r3, r4, #3
 800c1de:	930a      	str	r3, [sp, #40]	; 0x28
 800c1e0:	ab9a      	add	r3, sp, #616	; 0x268
 800c1e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c1e6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c1ea:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800c1ee:	ab72      	add	r3, sp, #456	; 0x1c8
 800c1f0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800c1f4:	46c3      	mov	fp, r8
 800c1f6:	46a1      	mov	r9, r4
 800c1f8:	f1b9 0f00 	cmp.w	r9, #0
 800c1fc:	f1a5 0508 	sub.w	r5, r5, #8
 800c200:	dc77      	bgt.n	800c2f2 <__kernel_rem_pio2+0x202>
 800c202:	ec47 6b10 	vmov	d0, r6, r7
 800c206:	4650      	mov	r0, sl
 800c208:	f000 fdb6 	bl	800cd78 <scalbn>
 800c20c:	ec57 6b10 	vmov	r6, r7, d0
 800c210:	2200      	movs	r2, #0
 800c212:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c216:	ee10 0a10 	vmov	r0, s0
 800c21a:	4639      	mov	r1, r7
 800c21c:	f7f4 fa0c 	bl	8000638 <__aeabi_dmul>
 800c220:	ec41 0b10 	vmov	d0, r0, r1
 800c224:	f000 fd20 	bl	800cc68 <floor>
 800c228:	4b7c      	ldr	r3, [pc, #496]	; (800c41c <__kernel_rem_pio2+0x32c>)
 800c22a:	ec51 0b10 	vmov	r0, r1, d0
 800c22e:	2200      	movs	r2, #0
 800c230:	f7f4 fa02 	bl	8000638 <__aeabi_dmul>
 800c234:	4602      	mov	r2, r0
 800c236:	460b      	mov	r3, r1
 800c238:	4630      	mov	r0, r6
 800c23a:	4639      	mov	r1, r7
 800c23c:	f7f4 f844 	bl	80002c8 <__aeabi_dsub>
 800c240:	460f      	mov	r7, r1
 800c242:	4606      	mov	r6, r0
 800c244:	f7f4 fca8 	bl	8000b98 <__aeabi_d2iz>
 800c248:	9004      	str	r0, [sp, #16]
 800c24a:	f7f4 f98b 	bl	8000564 <__aeabi_i2d>
 800c24e:	4602      	mov	r2, r0
 800c250:	460b      	mov	r3, r1
 800c252:	4630      	mov	r0, r6
 800c254:	4639      	mov	r1, r7
 800c256:	f7f4 f837 	bl	80002c8 <__aeabi_dsub>
 800c25a:	f1ba 0f00 	cmp.w	sl, #0
 800c25e:	4606      	mov	r6, r0
 800c260:	460f      	mov	r7, r1
 800c262:	dd6d      	ble.n	800c340 <__kernel_rem_pio2+0x250>
 800c264:	1e62      	subs	r2, r4, #1
 800c266:	ab0e      	add	r3, sp, #56	; 0x38
 800c268:	9d04      	ldr	r5, [sp, #16]
 800c26a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c26e:	f1ca 0118 	rsb	r1, sl, #24
 800c272:	fa40 f301 	asr.w	r3, r0, r1
 800c276:	441d      	add	r5, r3
 800c278:	408b      	lsls	r3, r1
 800c27a:	1ac0      	subs	r0, r0, r3
 800c27c:	ab0e      	add	r3, sp, #56	; 0x38
 800c27e:	9504      	str	r5, [sp, #16]
 800c280:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c284:	f1ca 0317 	rsb	r3, sl, #23
 800c288:	fa40 fb03 	asr.w	fp, r0, r3
 800c28c:	f1bb 0f00 	cmp.w	fp, #0
 800c290:	dd65      	ble.n	800c35e <__kernel_rem_pio2+0x26e>
 800c292:	9b04      	ldr	r3, [sp, #16]
 800c294:	2200      	movs	r2, #0
 800c296:	3301      	adds	r3, #1
 800c298:	9304      	str	r3, [sp, #16]
 800c29a:	4615      	mov	r5, r2
 800c29c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c2a0:	4294      	cmp	r4, r2
 800c2a2:	f300 809c 	bgt.w	800c3de <__kernel_rem_pio2+0x2ee>
 800c2a6:	f1ba 0f00 	cmp.w	sl, #0
 800c2aa:	dd07      	ble.n	800c2bc <__kernel_rem_pio2+0x1cc>
 800c2ac:	f1ba 0f01 	cmp.w	sl, #1
 800c2b0:	f000 80c0 	beq.w	800c434 <__kernel_rem_pio2+0x344>
 800c2b4:	f1ba 0f02 	cmp.w	sl, #2
 800c2b8:	f000 80c6 	beq.w	800c448 <__kernel_rem_pio2+0x358>
 800c2bc:	f1bb 0f02 	cmp.w	fp, #2
 800c2c0:	d14d      	bne.n	800c35e <__kernel_rem_pio2+0x26e>
 800c2c2:	4632      	mov	r2, r6
 800c2c4:	463b      	mov	r3, r7
 800c2c6:	4956      	ldr	r1, [pc, #344]	; (800c420 <__kernel_rem_pio2+0x330>)
 800c2c8:	2000      	movs	r0, #0
 800c2ca:	f7f3 fffd 	bl	80002c8 <__aeabi_dsub>
 800c2ce:	4606      	mov	r6, r0
 800c2d0:	460f      	mov	r7, r1
 800c2d2:	2d00      	cmp	r5, #0
 800c2d4:	d043      	beq.n	800c35e <__kernel_rem_pio2+0x26e>
 800c2d6:	4650      	mov	r0, sl
 800c2d8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800c410 <__kernel_rem_pio2+0x320>
 800c2dc:	f000 fd4c 	bl	800cd78 <scalbn>
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	4639      	mov	r1, r7
 800c2e4:	ec53 2b10 	vmov	r2, r3, d0
 800c2e8:	f7f3 ffee 	bl	80002c8 <__aeabi_dsub>
 800c2ec:	4606      	mov	r6, r0
 800c2ee:	460f      	mov	r7, r1
 800c2f0:	e035      	b.n	800c35e <__kernel_rem_pio2+0x26e>
 800c2f2:	4b4c      	ldr	r3, [pc, #304]	; (800c424 <__kernel_rem_pio2+0x334>)
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	4630      	mov	r0, r6
 800c2f8:	4639      	mov	r1, r7
 800c2fa:	f7f4 f99d 	bl	8000638 <__aeabi_dmul>
 800c2fe:	f7f4 fc4b 	bl	8000b98 <__aeabi_d2iz>
 800c302:	f7f4 f92f 	bl	8000564 <__aeabi_i2d>
 800c306:	4602      	mov	r2, r0
 800c308:	460b      	mov	r3, r1
 800c30a:	ec43 2b18 	vmov	d8, r2, r3
 800c30e:	4b46      	ldr	r3, [pc, #280]	; (800c428 <__kernel_rem_pio2+0x338>)
 800c310:	2200      	movs	r2, #0
 800c312:	f7f4 f991 	bl	8000638 <__aeabi_dmul>
 800c316:	4602      	mov	r2, r0
 800c318:	460b      	mov	r3, r1
 800c31a:	4630      	mov	r0, r6
 800c31c:	4639      	mov	r1, r7
 800c31e:	f7f3 ffd3 	bl	80002c8 <__aeabi_dsub>
 800c322:	f7f4 fc39 	bl	8000b98 <__aeabi_d2iz>
 800c326:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c32a:	f84b 0b04 	str.w	r0, [fp], #4
 800c32e:	ec51 0b18 	vmov	r0, r1, d8
 800c332:	f7f3 ffcb 	bl	80002cc <__adddf3>
 800c336:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c33a:	4606      	mov	r6, r0
 800c33c:	460f      	mov	r7, r1
 800c33e:	e75b      	b.n	800c1f8 <__kernel_rem_pio2+0x108>
 800c340:	d106      	bne.n	800c350 <__kernel_rem_pio2+0x260>
 800c342:	1e63      	subs	r3, r4, #1
 800c344:	aa0e      	add	r2, sp, #56	; 0x38
 800c346:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c34a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800c34e:	e79d      	b.n	800c28c <__kernel_rem_pio2+0x19c>
 800c350:	4b36      	ldr	r3, [pc, #216]	; (800c42c <__kernel_rem_pio2+0x33c>)
 800c352:	2200      	movs	r2, #0
 800c354:	f7f4 fbf6 	bl	8000b44 <__aeabi_dcmpge>
 800c358:	2800      	cmp	r0, #0
 800c35a:	d13d      	bne.n	800c3d8 <__kernel_rem_pio2+0x2e8>
 800c35c:	4683      	mov	fp, r0
 800c35e:	2200      	movs	r2, #0
 800c360:	2300      	movs	r3, #0
 800c362:	4630      	mov	r0, r6
 800c364:	4639      	mov	r1, r7
 800c366:	f7f4 fbcf 	bl	8000b08 <__aeabi_dcmpeq>
 800c36a:	2800      	cmp	r0, #0
 800c36c:	f000 80c0 	beq.w	800c4f0 <__kernel_rem_pio2+0x400>
 800c370:	1e65      	subs	r5, r4, #1
 800c372:	462b      	mov	r3, r5
 800c374:	2200      	movs	r2, #0
 800c376:	9902      	ldr	r1, [sp, #8]
 800c378:	428b      	cmp	r3, r1
 800c37a:	da6c      	bge.n	800c456 <__kernel_rem_pio2+0x366>
 800c37c:	2a00      	cmp	r2, #0
 800c37e:	f000 8089 	beq.w	800c494 <__kernel_rem_pio2+0x3a4>
 800c382:	ab0e      	add	r3, sp, #56	; 0x38
 800c384:	f1aa 0a18 	sub.w	sl, sl, #24
 800c388:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	f000 80ad 	beq.w	800c4ec <__kernel_rem_pio2+0x3fc>
 800c392:	4650      	mov	r0, sl
 800c394:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800c410 <__kernel_rem_pio2+0x320>
 800c398:	f000 fcee 	bl	800cd78 <scalbn>
 800c39c:	ab9a      	add	r3, sp, #616	; 0x268
 800c39e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c3a2:	ec57 6b10 	vmov	r6, r7, d0
 800c3a6:	00ec      	lsls	r4, r5, #3
 800c3a8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800c3ac:	46aa      	mov	sl, r5
 800c3ae:	f1ba 0f00 	cmp.w	sl, #0
 800c3b2:	f280 80d6 	bge.w	800c562 <__kernel_rem_pio2+0x472>
 800c3b6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800c408 <__kernel_rem_pio2+0x318>
 800c3ba:	462e      	mov	r6, r5
 800c3bc:	2e00      	cmp	r6, #0
 800c3be:	f2c0 8104 	blt.w	800c5ca <__kernel_rem_pio2+0x4da>
 800c3c2:	ab72      	add	r3, sp, #456	; 0x1c8
 800c3c4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c3c8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800c430 <__kernel_rem_pio2+0x340>
 800c3cc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c3d0:	f04f 0800 	mov.w	r8, #0
 800c3d4:	1baf      	subs	r7, r5, r6
 800c3d6:	e0ea      	b.n	800c5ae <__kernel_rem_pio2+0x4be>
 800c3d8:	f04f 0b02 	mov.w	fp, #2
 800c3dc:	e759      	b.n	800c292 <__kernel_rem_pio2+0x1a2>
 800c3de:	f8d8 3000 	ldr.w	r3, [r8]
 800c3e2:	b955      	cbnz	r5, 800c3fa <__kernel_rem_pio2+0x30a>
 800c3e4:	b123      	cbz	r3, 800c3f0 <__kernel_rem_pio2+0x300>
 800c3e6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c3ea:	f8c8 3000 	str.w	r3, [r8]
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	3201      	adds	r2, #1
 800c3f2:	f108 0804 	add.w	r8, r8, #4
 800c3f6:	461d      	mov	r5, r3
 800c3f8:	e752      	b.n	800c2a0 <__kernel_rem_pio2+0x1b0>
 800c3fa:	1acb      	subs	r3, r1, r3
 800c3fc:	f8c8 3000 	str.w	r3, [r8]
 800c400:	462b      	mov	r3, r5
 800c402:	e7f5      	b.n	800c3f0 <__kernel_rem_pio2+0x300>
 800c404:	f3af 8000 	nop.w
	...
 800c414:	3ff00000 	.word	0x3ff00000
 800c418:	0800d710 	.word	0x0800d710
 800c41c:	40200000 	.word	0x40200000
 800c420:	3ff00000 	.word	0x3ff00000
 800c424:	3e700000 	.word	0x3e700000
 800c428:	41700000 	.word	0x41700000
 800c42c:	3fe00000 	.word	0x3fe00000
 800c430:	0800d6d0 	.word	0x0800d6d0
 800c434:	1e62      	subs	r2, r4, #1
 800c436:	ab0e      	add	r3, sp, #56	; 0x38
 800c438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c43c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c440:	a90e      	add	r1, sp, #56	; 0x38
 800c442:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c446:	e739      	b.n	800c2bc <__kernel_rem_pio2+0x1cc>
 800c448:	1e62      	subs	r2, r4, #1
 800c44a:	ab0e      	add	r3, sp, #56	; 0x38
 800c44c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c450:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c454:	e7f4      	b.n	800c440 <__kernel_rem_pio2+0x350>
 800c456:	a90e      	add	r1, sp, #56	; 0x38
 800c458:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c45c:	3b01      	subs	r3, #1
 800c45e:	430a      	orrs	r2, r1
 800c460:	e789      	b.n	800c376 <__kernel_rem_pio2+0x286>
 800c462:	3301      	adds	r3, #1
 800c464:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c468:	2900      	cmp	r1, #0
 800c46a:	d0fa      	beq.n	800c462 <__kernel_rem_pio2+0x372>
 800c46c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c46e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800c472:	446a      	add	r2, sp
 800c474:	3a98      	subs	r2, #152	; 0x98
 800c476:	920a      	str	r2, [sp, #40]	; 0x28
 800c478:	9a08      	ldr	r2, [sp, #32]
 800c47a:	18e3      	adds	r3, r4, r3
 800c47c:	18a5      	adds	r5, r4, r2
 800c47e:	aa22      	add	r2, sp, #136	; 0x88
 800c480:	f104 0801 	add.w	r8, r4, #1
 800c484:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c488:	9304      	str	r3, [sp, #16]
 800c48a:	9b04      	ldr	r3, [sp, #16]
 800c48c:	4543      	cmp	r3, r8
 800c48e:	da04      	bge.n	800c49a <__kernel_rem_pio2+0x3aa>
 800c490:	461c      	mov	r4, r3
 800c492:	e6a3      	b.n	800c1dc <__kernel_rem_pio2+0xec>
 800c494:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c496:	2301      	movs	r3, #1
 800c498:	e7e4      	b.n	800c464 <__kernel_rem_pio2+0x374>
 800c49a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c49c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c4a0:	f7f4 f860 	bl	8000564 <__aeabi_i2d>
 800c4a4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c4a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4aa:	46ab      	mov	fp, r5
 800c4ac:	461c      	mov	r4, r3
 800c4ae:	f04f 0900 	mov.w	r9, #0
 800c4b2:	2600      	movs	r6, #0
 800c4b4:	2700      	movs	r7, #0
 800c4b6:	9b06      	ldr	r3, [sp, #24]
 800c4b8:	4599      	cmp	r9, r3
 800c4ba:	dd06      	ble.n	800c4ca <__kernel_rem_pio2+0x3da>
 800c4bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4be:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c4c2:	f108 0801 	add.w	r8, r8, #1
 800c4c6:	930a      	str	r3, [sp, #40]	; 0x28
 800c4c8:	e7df      	b.n	800c48a <__kernel_rem_pio2+0x39a>
 800c4ca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c4ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c4d2:	f7f4 f8b1 	bl	8000638 <__aeabi_dmul>
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	460b      	mov	r3, r1
 800c4da:	4630      	mov	r0, r6
 800c4dc:	4639      	mov	r1, r7
 800c4de:	f7f3 fef5 	bl	80002cc <__adddf3>
 800c4e2:	f109 0901 	add.w	r9, r9, #1
 800c4e6:	4606      	mov	r6, r0
 800c4e8:	460f      	mov	r7, r1
 800c4ea:	e7e4      	b.n	800c4b6 <__kernel_rem_pio2+0x3c6>
 800c4ec:	3d01      	subs	r5, #1
 800c4ee:	e748      	b.n	800c382 <__kernel_rem_pio2+0x292>
 800c4f0:	ec47 6b10 	vmov	d0, r6, r7
 800c4f4:	f1ca 0000 	rsb	r0, sl, #0
 800c4f8:	f000 fc3e 	bl	800cd78 <scalbn>
 800c4fc:	ec57 6b10 	vmov	r6, r7, d0
 800c500:	4ba0      	ldr	r3, [pc, #640]	; (800c784 <__kernel_rem_pio2+0x694>)
 800c502:	ee10 0a10 	vmov	r0, s0
 800c506:	2200      	movs	r2, #0
 800c508:	4639      	mov	r1, r7
 800c50a:	f7f4 fb1b 	bl	8000b44 <__aeabi_dcmpge>
 800c50e:	b1f8      	cbz	r0, 800c550 <__kernel_rem_pio2+0x460>
 800c510:	4b9d      	ldr	r3, [pc, #628]	; (800c788 <__kernel_rem_pio2+0x698>)
 800c512:	2200      	movs	r2, #0
 800c514:	4630      	mov	r0, r6
 800c516:	4639      	mov	r1, r7
 800c518:	f7f4 f88e 	bl	8000638 <__aeabi_dmul>
 800c51c:	f7f4 fb3c 	bl	8000b98 <__aeabi_d2iz>
 800c520:	4680      	mov	r8, r0
 800c522:	f7f4 f81f 	bl	8000564 <__aeabi_i2d>
 800c526:	4b97      	ldr	r3, [pc, #604]	; (800c784 <__kernel_rem_pio2+0x694>)
 800c528:	2200      	movs	r2, #0
 800c52a:	f7f4 f885 	bl	8000638 <__aeabi_dmul>
 800c52e:	460b      	mov	r3, r1
 800c530:	4602      	mov	r2, r0
 800c532:	4639      	mov	r1, r7
 800c534:	4630      	mov	r0, r6
 800c536:	f7f3 fec7 	bl	80002c8 <__aeabi_dsub>
 800c53a:	f7f4 fb2d 	bl	8000b98 <__aeabi_d2iz>
 800c53e:	1c65      	adds	r5, r4, #1
 800c540:	ab0e      	add	r3, sp, #56	; 0x38
 800c542:	f10a 0a18 	add.w	sl, sl, #24
 800c546:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c54a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c54e:	e720      	b.n	800c392 <__kernel_rem_pio2+0x2a2>
 800c550:	4630      	mov	r0, r6
 800c552:	4639      	mov	r1, r7
 800c554:	f7f4 fb20 	bl	8000b98 <__aeabi_d2iz>
 800c558:	ab0e      	add	r3, sp, #56	; 0x38
 800c55a:	4625      	mov	r5, r4
 800c55c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c560:	e717      	b.n	800c392 <__kernel_rem_pio2+0x2a2>
 800c562:	ab0e      	add	r3, sp, #56	; 0x38
 800c564:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c568:	f7f3 fffc 	bl	8000564 <__aeabi_i2d>
 800c56c:	4632      	mov	r2, r6
 800c56e:	463b      	mov	r3, r7
 800c570:	f7f4 f862 	bl	8000638 <__aeabi_dmul>
 800c574:	4b84      	ldr	r3, [pc, #528]	; (800c788 <__kernel_rem_pio2+0x698>)
 800c576:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800c57a:	2200      	movs	r2, #0
 800c57c:	4630      	mov	r0, r6
 800c57e:	4639      	mov	r1, r7
 800c580:	f7f4 f85a 	bl	8000638 <__aeabi_dmul>
 800c584:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c588:	4606      	mov	r6, r0
 800c58a:	460f      	mov	r7, r1
 800c58c:	e70f      	b.n	800c3ae <__kernel_rem_pio2+0x2be>
 800c58e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c592:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c596:	f7f4 f84f 	bl	8000638 <__aeabi_dmul>
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5a2:	f7f3 fe93 	bl	80002cc <__adddf3>
 800c5a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c5aa:	f108 0801 	add.w	r8, r8, #1
 800c5ae:	9b02      	ldr	r3, [sp, #8]
 800c5b0:	4598      	cmp	r8, r3
 800c5b2:	dc01      	bgt.n	800c5b8 <__kernel_rem_pio2+0x4c8>
 800c5b4:	45b8      	cmp	r8, r7
 800c5b6:	ddea      	ble.n	800c58e <__kernel_rem_pio2+0x49e>
 800c5b8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c5bc:	ab4a      	add	r3, sp, #296	; 0x128
 800c5be:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c5c2:	ed87 7b00 	vstr	d7, [r7]
 800c5c6:	3e01      	subs	r6, #1
 800c5c8:	e6f8      	b.n	800c3bc <__kernel_rem_pio2+0x2cc>
 800c5ca:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c5cc:	2b02      	cmp	r3, #2
 800c5ce:	dc0b      	bgt.n	800c5e8 <__kernel_rem_pio2+0x4f8>
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	dc35      	bgt.n	800c640 <__kernel_rem_pio2+0x550>
 800c5d4:	d059      	beq.n	800c68a <__kernel_rem_pio2+0x59a>
 800c5d6:	9b04      	ldr	r3, [sp, #16]
 800c5d8:	f003 0007 	and.w	r0, r3, #7
 800c5dc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800c5e0:	ecbd 8b02 	vpop	{d8}
 800c5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c5ea:	2b03      	cmp	r3, #3
 800c5ec:	d1f3      	bne.n	800c5d6 <__kernel_rem_pio2+0x4e6>
 800c5ee:	ab4a      	add	r3, sp, #296	; 0x128
 800c5f0:	4423      	add	r3, r4
 800c5f2:	9306      	str	r3, [sp, #24]
 800c5f4:	461c      	mov	r4, r3
 800c5f6:	469a      	mov	sl, r3
 800c5f8:	9502      	str	r5, [sp, #8]
 800c5fa:	9b02      	ldr	r3, [sp, #8]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	f1aa 0a08 	sub.w	sl, sl, #8
 800c602:	dc6b      	bgt.n	800c6dc <__kernel_rem_pio2+0x5ec>
 800c604:	46aa      	mov	sl, r5
 800c606:	f1ba 0f01 	cmp.w	sl, #1
 800c60a:	f1a4 0408 	sub.w	r4, r4, #8
 800c60e:	f300 8085 	bgt.w	800c71c <__kernel_rem_pio2+0x62c>
 800c612:	9c06      	ldr	r4, [sp, #24]
 800c614:	2000      	movs	r0, #0
 800c616:	3408      	adds	r4, #8
 800c618:	2100      	movs	r1, #0
 800c61a:	2d01      	cmp	r5, #1
 800c61c:	f300 809d 	bgt.w	800c75a <__kernel_rem_pio2+0x66a>
 800c620:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c624:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800c628:	f1bb 0f00 	cmp.w	fp, #0
 800c62c:	f040 809b 	bne.w	800c766 <__kernel_rem_pio2+0x676>
 800c630:	9b01      	ldr	r3, [sp, #4]
 800c632:	e9c3 5600 	strd	r5, r6, [r3]
 800c636:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c63a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c63e:	e7ca      	b.n	800c5d6 <__kernel_rem_pio2+0x4e6>
 800c640:	3408      	adds	r4, #8
 800c642:	ab4a      	add	r3, sp, #296	; 0x128
 800c644:	441c      	add	r4, r3
 800c646:	462e      	mov	r6, r5
 800c648:	2000      	movs	r0, #0
 800c64a:	2100      	movs	r1, #0
 800c64c:	2e00      	cmp	r6, #0
 800c64e:	da36      	bge.n	800c6be <__kernel_rem_pio2+0x5ce>
 800c650:	f1bb 0f00 	cmp.w	fp, #0
 800c654:	d039      	beq.n	800c6ca <__kernel_rem_pio2+0x5da>
 800c656:	4602      	mov	r2, r0
 800c658:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c65c:	9c01      	ldr	r4, [sp, #4]
 800c65e:	e9c4 2300 	strd	r2, r3, [r4]
 800c662:	4602      	mov	r2, r0
 800c664:	460b      	mov	r3, r1
 800c666:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800c66a:	f7f3 fe2d 	bl	80002c8 <__aeabi_dsub>
 800c66e:	ae4c      	add	r6, sp, #304	; 0x130
 800c670:	2401      	movs	r4, #1
 800c672:	42a5      	cmp	r5, r4
 800c674:	da2c      	bge.n	800c6d0 <__kernel_rem_pio2+0x5e0>
 800c676:	f1bb 0f00 	cmp.w	fp, #0
 800c67a:	d002      	beq.n	800c682 <__kernel_rem_pio2+0x592>
 800c67c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c680:	4619      	mov	r1, r3
 800c682:	9b01      	ldr	r3, [sp, #4]
 800c684:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c688:	e7a5      	b.n	800c5d6 <__kernel_rem_pio2+0x4e6>
 800c68a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800c68e:	eb0d 0403 	add.w	r4, sp, r3
 800c692:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c696:	2000      	movs	r0, #0
 800c698:	2100      	movs	r1, #0
 800c69a:	2d00      	cmp	r5, #0
 800c69c:	da09      	bge.n	800c6b2 <__kernel_rem_pio2+0x5c2>
 800c69e:	f1bb 0f00 	cmp.w	fp, #0
 800c6a2:	d002      	beq.n	800c6aa <__kernel_rem_pio2+0x5ba>
 800c6a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	9b01      	ldr	r3, [sp, #4]
 800c6ac:	e9c3 0100 	strd	r0, r1, [r3]
 800c6b0:	e791      	b.n	800c5d6 <__kernel_rem_pio2+0x4e6>
 800c6b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c6b6:	f7f3 fe09 	bl	80002cc <__adddf3>
 800c6ba:	3d01      	subs	r5, #1
 800c6bc:	e7ed      	b.n	800c69a <__kernel_rem_pio2+0x5aa>
 800c6be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c6c2:	f7f3 fe03 	bl	80002cc <__adddf3>
 800c6c6:	3e01      	subs	r6, #1
 800c6c8:	e7c0      	b.n	800c64c <__kernel_rem_pio2+0x55c>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	e7c5      	b.n	800c65c <__kernel_rem_pio2+0x56c>
 800c6d0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c6d4:	f7f3 fdfa 	bl	80002cc <__adddf3>
 800c6d8:	3401      	adds	r4, #1
 800c6da:	e7ca      	b.n	800c672 <__kernel_rem_pio2+0x582>
 800c6dc:	e9da 8900 	ldrd	r8, r9, [sl]
 800c6e0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c6e4:	9b02      	ldr	r3, [sp, #8]
 800c6e6:	3b01      	subs	r3, #1
 800c6e8:	9302      	str	r3, [sp, #8]
 800c6ea:	4632      	mov	r2, r6
 800c6ec:	463b      	mov	r3, r7
 800c6ee:	4640      	mov	r0, r8
 800c6f0:	4649      	mov	r1, r9
 800c6f2:	f7f3 fdeb 	bl	80002cc <__adddf3>
 800c6f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	4640      	mov	r0, r8
 800c700:	4649      	mov	r1, r9
 800c702:	f7f3 fde1 	bl	80002c8 <__aeabi_dsub>
 800c706:	4632      	mov	r2, r6
 800c708:	463b      	mov	r3, r7
 800c70a:	f7f3 fddf 	bl	80002cc <__adddf3>
 800c70e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800c712:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c716:	ed8a 7b00 	vstr	d7, [sl]
 800c71a:	e76e      	b.n	800c5fa <__kernel_rem_pio2+0x50a>
 800c71c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c720:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c724:	4640      	mov	r0, r8
 800c726:	4632      	mov	r2, r6
 800c728:	463b      	mov	r3, r7
 800c72a:	4649      	mov	r1, r9
 800c72c:	f7f3 fdce 	bl	80002cc <__adddf3>
 800c730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c734:	4602      	mov	r2, r0
 800c736:	460b      	mov	r3, r1
 800c738:	4640      	mov	r0, r8
 800c73a:	4649      	mov	r1, r9
 800c73c:	f7f3 fdc4 	bl	80002c8 <__aeabi_dsub>
 800c740:	4632      	mov	r2, r6
 800c742:	463b      	mov	r3, r7
 800c744:	f7f3 fdc2 	bl	80002cc <__adddf3>
 800c748:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c74c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c750:	ed84 7b00 	vstr	d7, [r4]
 800c754:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c758:	e755      	b.n	800c606 <__kernel_rem_pio2+0x516>
 800c75a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c75e:	f7f3 fdb5 	bl	80002cc <__adddf3>
 800c762:	3d01      	subs	r5, #1
 800c764:	e759      	b.n	800c61a <__kernel_rem_pio2+0x52a>
 800c766:	9b01      	ldr	r3, [sp, #4]
 800c768:	9a01      	ldr	r2, [sp, #4]
 800c76a:	601d      	str	r5, [r3, #0]
 800c76c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c770:	605c      	str	r4, [r3, #4]
 800c772:	609f      	str	r7, [r3, #8]
 800c774:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c778:	60d3      	str	r3, [r2, #12]
 800c77a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c77e:	6110      	str	r0, [r2, #16]
 800c780:	6153      	str	r3, [r2, #20]
 800c782:	e728      	b.n	800c5d6 <__kernel_rem_pio2+0x4e6>
 800c784:	41700000 	.word	0x41700000
 800c788:	3e700000 	.word	0x3e700000
 800c78c:	00000000 	.word	0x00000000

0800c790 <__kernel_sin>:
 800c790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c794:	ed2d 8b04 	vpush	{d8-d9}
 800c798:	eeb0 8a41 	vmov.f32	s16, s2
 800c79c:	eef0 8a61 	vmov.f32	s17, s3
 800c7a0:	ec55 4b10 	vmov	r4, r5, d0
 800c7a4:	b083      	sub	sp, #12
 800c7a6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c7aa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c7ae:	9001      	str	r0, [sp, #4]
 800c7b0:	da06      	bge.n	800c7c0 <__kernel_sin+0x30>
 800c7b2:	ee10 0a10 	vmov	r0, s0
 800c7b6:	4629      	mov	r1, r5
 800c7b8:	f7f4 f9ee 	bl	8000b98 <__aeabi_d2iz>
 800c7bc:	2800      	cmp	r0, #0
 800c7be:	d051      	beq.n	800c864 <__kernel_sin+0xd4>
 800c7c0:	4622      	mov	r2, r4
 800c7c2:	462b      	mov	r3, r5
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	4629      	mov	r1, r5
 800c7c8:	f7f3 ff36 	bl	8000638 <__aeabi_dmul>
 800c7cc:	4682      	mov	sl, r0
 800c7ce:	468b      	mov	fp, r1
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	460b      	mov	r3, r1
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	4629      	mov	r1, r5
 800c7d8:	f7f3 ff2e 	bl	8000638 <__aeabi_dmul>
 800c7dc:	a341      	add	r3, pc, #260	; (adr r3, 800c8e4 <__kernel_sin+0x154>)
 800c7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e2:	4680      	mov	r8, r0
 800c7e4:	4689      	mov	r9, r1
 800c7e6:	4650      	mov	r0, sl
 800c7e8:	4659      	mov	r1, fp
 800c7ea:	f7f3 ff25 	bl	8000638 <__aeabi_dmul>
 800c7ee:	a33f      	add	r3, pc, #252	; (adr r3, 800c8ec <__kernel_sin+0x15c>)
 800c7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f4:	f7f3 fd68 	bl	80002c8 <__aeabi_dsub>
 800c7f8:	4652      	mov	r2, sl
 800c7fa:	465b      	mov	r3, fp
 800c7fc:	f7f3 ff1c 	bl	8000638 <__aeabi_dmul>
 800c800:	a33c      	add	r3, pc, #240	; (adr r3, 800c8f4 <__kernel_sin+0x164>)
 800c802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c806:	f7f3 fd61 	bl	80002cc <__adddf3>
 800c80a:	4652      	mov	r2, sl
 800c80c:	465b      	mov	r3, fp
 800c80e:	f7f3 ff13 	bl	8000638 <__aeabi_dmul>
 800c812:	a33a      	add	r3, pc, #232	; (adr r3, 800c8fc <__kernel_sin+0x16c>)
 800c814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c818:	f7f3 fd56 	bl	80002c8 <__aeabi_dsub>
 800c81c:	4652      	mov	r2, sl
 800c81e:	465b      	mov	r3, fp
 800c820:	f7f3 ff0a 	bl	8000638 <__aeabi_dmul>
 800c824:	a337      	add	r3, pc, #220	; (adr r3, 800c904 <__kernel_sin+0x174>)
 800c826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82a:	f7f3 fd4f 	bl	80002cc <__adddf3>
 800c82e:	9b01      	ldr	r3, [sp, #4]
 800c830:	4606      	mov	r6, r0
 800c832:	460f      	mov	r7, r1
 800c834:	b9eb      	cbnz	r3, 800c872 <__kernel_sin+0xe2>
 800c836:	4602      	mov	r2, r0
 800c838:	460b      	mov	r3, r1
 800c83a:	4650      	mov	r0, sl
 800c83c:	4659      	mov	r1, fp
 800c83e:	f7f3 fefb 	bl	8000638 <__aeabi_dmul>
 800c842:	a325      	add	r3, pc, #148	; (adr r3, 800c8d8 <__kernel_sin+0x148>)
 800c844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c848:	f7f3 fd3e 	bl	80002c8 <__aeabi_dsub>
 800c84c:	4642      	mov	r2, r8
 800c84e:	464b      	mov	r3, r9
 800c850:	f7f3 fef2 	bl	8000638 <__aeabi_dmul>
 800c854:	4602      	mov	r2, r0
 800c856:	460b      	mov	r3, r1
 800c858:	4620      	mov	r0, r4
 800c85a:	4629      	mov	r1, r5
 800c85c:	f7f3 fd36 	bl	80002cc <__adddf3>
 800c860:	4604      	mov	r4, r0
 800c862:	460d      	mov	r5, r1
 800c864:	ec45 4b10 	vmov	d0, r4, r5
 800c868:	b003      	add	sp, #12
 800c86a:	ecbd 8b04 	vpop	{d8-d9}
 800c86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c872:	4b1b      	ldr	r3, [pc, #108]	; (800c8e0 <__kernel_sin+0x150>)
 800c874:	ec51 0b18 	vmov	r0, r1, d8
 800c878:	2200      	movs	r2, #0
 800c87a:	f7f3 fedd 	bl	8000638 <__aeabi_dmul>
 800c87e:	4632      	mov	r2, r6
 800c880:	ec41 0b19 	vmov	d9, r0, r1
 800c884:	463b      	mov	r3, r7
 800c886:	4640      	mov	r0, r8
 800c888:	4649      	mov	r1, r9
 800c88a:	f7f3 fed5 	bl	8000638 <__aeabi_dmul>
 800c88e:	4602      	mov	r2, r0
 800c890:	460b      	mov	r3, r1
 800c892:	ec51 0b19 	vmov	r0, r1, d9
 800c896:	f7f3 fd17 	bl	80002c8 <__aeabi_dsub>
 800c89a:	4652      	mov	r2, sl
 800c89c:	465b      	mov	r3, fp
 800c89e:	f7f3 fecb 	bl	8000638 <__aeabi_dmul>
 800c8a2:	ec53 2b18 	vmov	r2, r3, d8
 800c8a6:	f7f3 fd0f 	bl	80002c8 <__aeabi_dsub>
 800c8aa:	a30b      	add	r3, pc, #44	; (adr r3, 800c8d8 <__kernel_sin+0x148>)
 800c8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b0:	4606      	mov	r6, r0
 800c8b2:	460f      	mov	r7, r1
 800c8b4:	4640      	mov	r0, r8
 800c8b6:	4649      	mov	r1, r9
 800c8b8:	f7f3 febe 	bl	8000638 <__aeabi_dmul>
 800c8bc:	4602      	mov	r2, r0
 800c8be:	460b      	mov	r3, r1
 800c8c0:	4630      	mov	r0, r6
 800c8c2:	4639      	mov	r1, r7
 800c8c4:	f7f3 fd02 	bl	80002cc <__adddf3>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	4629      	mov	r1, r5
 800c8d0:	f7f3 fcfa 	bl	80002c8 <__aeabi_dsub>
 800c8d4:	e7c4      	b.n	800c860 <__kernel_sin+0xd0>
 800c8d6:	bf00      	nop
 800c8d8:	55555549 	.word	0x55555549
 800c8dc:	3fc55555 	.word	0x3fc55555
 800c8e0:	3fe00000 	.word	0x3fe00000
 800c8e4:	5acfd57c 	.word	0x5acfd57c
 800c8e8:	3de5d93a 	.word	0x3de5d93a
 800c8ec:	8a2b9ceb 	.word	0x8a2b9ceb
 800c8f0:	3e5ae5e6 	.word	0x3e5ae5e6
 800c8f4:	57b1fe7d 	.word	0x57b1fe7d
 800c8f8:	3ec71de3 	.word	0x3ec71de3
 800c8fc:	19c161d5 	.word	0x19c161d5
 800c900:	3f2a01a0 	.word	0x3f2a01a0
 800c904:	1110f8a6 	.word	0x1110f8a6
 800c908:	3f811111 	.word	0x3f811111
 800c90c:	00000000 	.word	0x00000000

0800c910 <atan>:
 800c910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c914:	ec55 4b10 	vmov	r4, r5, d0
 800c918:	4bc3      	ldr	r3, [pc, #780]	; (800cc28 <atan+0x318>)
 800c91a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c91e:	429e      	cmp	r6, r3
 800c920:	46ab      	mov	fp, r5
 800c922:	dd18      	ble.n	800c956 <atan+0x46>
 800c924:	4bc1      	ldr	r3, [pc, #772]	; (800cc2c <atan+0x31c>)
 800c926:	429e      	cmp	r6, r3
 800c928:	dc01      	bgt.n	800c92e <atan+0x1e>
 800c92a:	d109      	bne.n	800c940 <atan+0x30>
 800c92c:	b144      	cbz	r4, 800c940 <atan+0x30>
 800c92e:	4622      	mov	r2, r4
 800c930:	462b      	mov	r3, r5
 800c932:	4620      	mov	r0, r4
 800c934:	4629      	mov	r1, r5
 800c936:	f7f3 fcc9 	bl	80002cc <__adddf3>
 800c93a:	4604      	mov	r4, r0
 800c93c:	460d      	mov	r5, r1
 800c93e:	e006      	b.n	800c94e <atan+0x3e>
 800c940:	f1bb 0f00 	cmp.w	fp, #0
 800c944:	f300 8131 	bgt.w	800cbaa <atan+0x29a>
 800c948:	a59b      	add	r5, pc, #620	; (adr r5, 800cbb8 <atan+0x2a8>)
 800c94a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c94e:	ec45 4b10 	vmov	d0, r4, r5
 800c952:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c956:	4bb6      	ldr	r3, [pc, #728]	; (800cc30 <atan+0x320>)
 800c958:	429e      	cmp	r6, r3
 800c95a:	dc14      	bgt.n	800c986 <atan+0x76>
 800c95c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c960:	429e      	cmp	r6, r3
 800c962:	dc0d      	bgt.n	800c980 <atan+0x70>
 800c964:	a396      	add	r3, pc, #600	; (adr r3, 800cbc0 <atan+0x2b0>)
 800c966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96a:	ee10 0a10 	vmov	r0, s0
 800c96e:	4629      	mov	r1, r5
 800c970:	f7f3 fcac 	bl	80002cc <__adddf3>
 800c974:	4baf      	ldr	r3, [pc, #700]	; (800cc34 <atan+0x324>)
 800c976:	2200      	movs	r2, #0
 800c978:	f7f4 f8ee 	bl	8000b58 <__aeabi_dcmpgt>
 800c97c:	2800      	cmp	r0, #0
 800c97e:	d1e6      	bne.n	800c94e <atan+0x3e>
 800c980:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c984:	e02b      	b.n	800c9de <atan+0xce>
 800c986:	f000 f963 	bl	800cc50 <fabs>
 800c98a:	4bab      	ldr	r3, [pc, #684]	; (800cc38 <atan+0x328>)
 800c98c:	429e      	cmp	r6, r3
 800c98e:	ec55 4b10 	vmov	r4, r5, d0
 800c992:	f300 80bf 	bgt.w	800cb14 <atan+0x204>
 800c996:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c99a:	429e      	cmp	r6, r3
 800c99c:	f300 80a0 	bgt.w	800cae0 <atan+0x1d0>
 800c9a0:	ee10 2a10 	vmov	r2, s0
 800c9a4:	ee10 0a10 	vmov	r0, s0
 800c9a8:	462b      	mov	r3, r5
 800c9aa:	4629      	mov	r1, r5
 800c9ac:	f7f3 fc8e 	bl	80002cc <__adddf3>
 800c9b0:	4ba0      	ldr	r3, [pc, #640]	; (800cc34 <atan+0x324>)
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f7f3 fc88 	bl	80002c8 <__aeabi_dsub>
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	4606      	mov	r6, r0
 800c9bc:	460f      	mov	r7, r1
 800c9be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	4629      	mov	r1, r5
 800c9c6:	f7f3 fc81 	bl	80002cc <__adddf3>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	4630      	mov	r0, r6
 800c9d0:	4639      	mov	r1, r7
 800c9d2:	f7f3 ff5b 	bl	800088c <__aeabi_ddiv>
 800c9d6:	f04f 0a00 	mov.w	sl, #0
 800c9da:	4604      	mov	r4, r0
 800c9dc:	460d      	mov	r5, r1
 800c9de:	4622      	mov	r2, r4
 800c9e0:	462b      	mov	r3, r5
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	4629      	mov	r1, r5
 800c9e6:	f7f3 fe27 	bl	8000638 <__aeabi_dmul>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	4680      	mov	r8, r0
 800c9f0:	4689      	mov	r9, r1
 800c9f2:	f7f3 fe21 	bl	8000638 <__aeabi_dmul>
 800c9f6:	a374      	add	r3, pc, #464	; (adr r3, 800cbc8 <atan+0x2b8>)
 800c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fc:	4606      	mov	r6, r0
 800c9fe:	460f      	mov	r7, r1
 800ca00:	f7f3 fe1a 	bl	8000638 <__aeabi_dmul>
 800ca04:	a372      	add	r3, pc, #456	; (adr r3, 800cbd0 <atan+0x2c0>)
 800ca06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0a:	f7f3 fc5f 	bl	80002cc <__adddf3>
 800ca0e:	4632      	mov	r2, r6
 800ca10:	463b      	mov	r3, r7
 800ca12:	f7f3 fe11 	bl	8000638 <__aeabi_dmul>
 800ca16:	a370      	add	r3, pc, #448	; (adr r3, 800cbd8 <atan+0x2c8>)
 800ca18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1c:	f7f3 fc56 	bl	80002cc <__adddf3>
 800ca20:	4632      	mov	r2, r6
 800ca22:	463b      	mov	r3, r7
 800ca24:	f7f3 fe08 	bl	8000638 <__aeabi_dmul>
 800ca28:	a36d      	add	r3, pc, #436	; (adr r3, 800cbe0 <atan+0x2d0>)
 800ca2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca2e:	f7f3 fc4d 	bl	80002cc <__adddf3>
 800ca32:	4632      	mov	r2, r6
 800ca34:	463b      	mov	r3, r7
 800ca36:	f7f3 fdff 	bl	8000638 <__aeabi_dmul>
 800ca3a:	a36b      	add	r3, pc, #428	; (adr r3, 800cbe8 <atan+0x2d8>)
 800ca3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca40:	f7f3 fc44 	bl	80002cc <__adddf3>
 800ca44:	4632      	mov	r2, r6
 800ca46:	463b      	mov	r3, r7
 800ca48:	f7f3 fdf6 	bl	8000638 <__aeabi_dmul>
 800ca4c:	a368      	add	r3, pc, #416	; (adr r3, 800cbf0 <atan+0x2e0>)
 800ca4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca52:	f7f3 fc3b 	bl	80002cc <__adddf3>
 800ca56:	4642      	mov	r2, r8
 800ca58:	464b      	mov	r3, r9
 800ca5a:	f7f3 fded 	bl	8000638 <__aeabi_dmul>
 800ca5e:	a366      	add	r3, pc, #408	; (adr r3, 800cbf8 <atan+0x2e8>)
 800ca60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca64:	4680      	mov	r8, r0
 800ca66:	4689      	mov	r9, r1
 800ca68:	4630      	mov	r0, r6
 800ca6a:	4639      	mov	r1, r7
 800ca6c:	f7f3 fde4 	bl	8000638 <__aeabi_dmul>
 800ca70:	a363      	add	r3, pc, #396	; (adr r3, 800cc00 <atan+0x2f0>)
 800ca72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca76:	f7f3 fc27 	bl	80002c8 <__aeabi_dsub>
 800ca7a:	4632      	mov	r2, r6
 800ca7c:	463b      	mov	r3, r7
 800ca7e:	f7f3 fddb 	bl	8000638 <__aeabi_dmul>
 800ca82:	a361      	add	r3, pc, #388	; (adr r3, 800cc08 <atan+0x2f8>)
 800ca84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca88:	f7f3 fc1e 	bl	80002c8 <__aeabi_dsub>
 800ca8c:	4632      	mov	r2, r6
 800ca8e:	463b      	mov	r3, r7
 800ca90:	f7f3 fdd2 	bl	8000638 <__aeabi_dmul>
 800ca94:	a35e      	add	r3, pc, #376	; (adr r3, 800cc10 <atan+0x300>)
 800ca96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9a:	f7f3 fc15 	bl	80002c8 <__aeabi_dsub>
 800ca9e:	4632      	mov	r2, r6
 800caa0:	463b      	mov	r3, r7
 800caa2:	f7f3 fdc9 	bl	8000638 <__aeabi_dmul>
 800caa6:	a35c      	add	r3, pc, #368	; (adr r3, 800cc18 <atan+0x308>)
 800caa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caac:	f7f3 fc0c 	bl	80002c8 <__aeabi_dsub>
 800cab0:	4632      	mov	r2, r6
 800cab2:	463b      	mov	r3, r7
 800cab4:	f7f3 fdc0 	bl	8000638 <__aeabi_dmul>
 800cab8:	4602      	mov	r2, r0
 800caba:	460b      	mov	r3, r1
 800cabc:	4640      	mov	r0, r8
 800cabe:	4649      	mov	r1, r9
 800cac0:	f7f3 fc04 	bl	80002cc <__adddf3>
 800cac4:	4622      	mov	r2, r4
 800cac6:	462b      	mov	r3, r5
 800cac8:	f7f3 fdb6 	bl	8000638 <__aeabi_dmul>
 800cacc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800cad0:	4602      	mov	r2, r0
 800cad2:	460b      	mov	r3, r1
 800cad4:	d14b      	bne.n	800cb6e <atan+0x25e>
 800cad6:	4620      	mov	r0, r4
 800cad8:	4629      	mov	r1, r5
 800cada:	f7f3 fbf5 	bl	80002c8 <__aeabi_dsub>
 800cade:	e72c      	b.n	800c93a <atan+0x2a>
 800cae0:	ee10 0a10 	vmov	r0, s0
 800cae4:	4b53      	ldr	r3, [pc, #332]	; (800cc34 <atan+0x324>)
 800cae6:	2200      	movs	r2, #0
 800cae8:	4629      	mov	r1, r5
 800caea:	f7f3 fbed 	bl	80002c8 <__aeabi_dsub>
 800caee:	4b51      	ldr	r3, [pc, #324]	; (800cc34 <atan+0x324>)
 800caf0:	4606      	mov	r6, r0
 800caf2:	460f      	mov	r7, r1
 800caf4:	2200      	movs	r2, #0
 800caf6:	4620      	mov	r0, r4
 800caf8:	4629      	mov	r1, r5
 800cafa:	f7f3 fbe7 	bl	80002cc <__adddf3>
 800cafe:	4602      	mov	r2, r0
 800cb00:	460b      	mov	r3, r1
 800cb02:	4630      	mov	r0, r6
 800cb04:	4639      	mov	r1, r7
 800cb06:	f7f3 fec1 	bl	800088c <__aeabi_ddiv>
 800cb0a:	f04f 0a01 	mov.w	sl, #1
 800cb0e:	4604      	mov	r4, r0
 800cb10:	460d      	mov	r5, r1
 800cb12:	e764      	b.n	800c9de <atan+0xce>
 800cb14:	4b49      	ldr	r3, [pc, #292]	; (800cc3c <atan+0x32c>)
 800cb16:	429e      	cmp	r6, r3
 800cb18:	da1d      	bge.n	800cb56 <atan+0x246>
 800cb1a:	ee10 0a10 	vmov	r0, s0
 800cb1e:	4b48      	ldr	r3, [pc, #288]	; (800cc40 <atan+0x330>)
 800cb20:	2200      	movs	r2, #0
 800cb22:	4629      	mov	r1, r5
 800cb24:	f7f3 fbd0 	bl	80002c8 <__aeabi_dsub>
 800cb28:	4b45      	ldr	r3, [pc, #276]	; (800cc40 <atan+0x330>)
 800cb2a:	4606      	mov	r6, r0
 800cb2c:	460f      	mov	r7, r1
 800cb2e:	2200      	movs	r2, #0
 800cb30:	4620      	mov	r0, r4
 800cb32:	4629      	mov	r1, r5
 800cb34:	f7f3 fd80 	bl	8000638 <__aeabi_dmul>
 800cb38:	4b3e      	ldr	r3, [pc, #248]	; (800cc34 <atan+0x324>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f7f3 fbc6 	bl	80002cc <__adddf3>
 800cb40:	4602      	mov	r2, r0
 800cb42:	460b      	mov	r3, r1
 800cb44:	4630      	mov	r0, r6
 800cb46:	4639      	mov	r1, r7
 800cb48:	f7f3 fea0 	bl	800088c <__aeabi_ddiv>
 800cb4c:	f04f 0a02 	mov.w	sl, #2
 800cb50:	4604      	mov	r4, r0
 800cb52:	460d      	mov	r5, r1
 800cb54:	e743      	b.n	800c9de <atan+0xce>
 800cb56:	462b      	mov	r3, r5
 800cb58:	ee10 2a10 	vmov	r2, s0
 800cb5c:	4939      	ldr	r1, [pc, #228]	; (800cc44 <atan+0x334>)
 800cb5e:	2000      	movs	r0, #0
 800cb60:	f7f3 fe94 	bl	800088c <__aeabi_ddiv>
 800cb64:	f04f 0a03 	mov.w	sl, #3
 800cb68:	4604      	mov	r4, r0
 800cb6a:	460d      	mov	r5, r1
 800cb6c:	e737      	b.n	800c9de <atan+0xce>
 800cb6e:	4b36      	ldr	r3, [pc, #216]	; (800cc48 <atan+0x338>)
 800cb70:	4e36      	ldr	r6, [pc, #216]	; (800cc4c <atan+0x33c>)
 800cb72:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cb76:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800cb7a:	e9da 2300 	ldrd	r2, r3, [sl]
 800cb7e:	f7f3 fba3 	bl	80002c8 <__aeabi_dsub>
 800cb82:	4622      	mov	r2, r4
 800cb84:	462b      	mov	r3, r5
 800cb86:	f7f3 fb9f 	bl	80002c8 <__aeabi_dsub>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cb92:	f7f3 fb99 	bl	80002c8 <__aeabi_dsub>
 800cb96:	f1bb 0f00 	cmp.w	fp, #0
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	460d      	mov	r5, r1
 800cb9e:	f6bf aed6 	bge.w	800c94e <atan+0x3e>
 800cba2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cba6:	461d      	mov	r5, r3
 800cba8:	e6d1      	b.n	800c94e <atan+0x3e>
 800cbaa:	a51d      	add	r5, pc, #116	; (adr r5, 800cc20 <atan+0x310>)
 800cbac:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cbb0:	e6cd      	b.n	800c94e <atan+0x3e>
 800cbb2:	bf00      	nop
 800cbb4:	f3af 8000 	nop.w
 800cbb8:	54442d18 	.word	0x54442d18
 800cbbc:	bff921fb 	.word	0xbff921fb
 800cbc0:	8800759c 	.word	0x8800759c
 800cbc4:	7e37e43c 	.word	0x7e37e43c
 800cbc8:	e322da11 	.word	0xe322da11
 800cbcc:	3f90ad3a 	.word	0x3f90ad3a
 800cbd0:	24760deb 	.word	0x24760deb
 800cbd4:	3fa97b4b 	.word	0x3fa97b4b
 800cbd8:	a0d03d51 	.word	0xa0d03d51
 800cbdc:	3fb10d66 	.word	0x3fb10d66
 800cbe0:	c54c206e 	.word	0xc54c206e
 800cbe4:	3fb745cd 	.word	0x3fb745cd
 800cbe8:	920083ff 	.word	0x920083ff
 800cbec:	3fc24924 	.word	0x3fc24924
 800cbf0:	5555550d 	.word	0x5555550d
 800cbf4:	3fd55555 	.word	0x3fd55555
 800cbf8:	2c6a6c2f 	.word	0x2c6a6c2f
 800cbfc:	bfa2b444 	.word	0xbfa2b444
 800cc00:	52defd9a 	.word	0x52defd9a
 800cc04:	3fadde2d 	.word	0x3fadde2d
 800cc08:	af749a6d 	.word	0xaf749a6d
 800cc0c:	3fb3b0f2 	.word	0x3fb3b0f2
 800cc10:	fe231671 	.word	0xfe231671
 800cc14:	3fbc71c6 	.word	0x3fbc71c6
 800cc18:	9998ebc4 	.word	0x9998ebc4
 800cc1c:	3fc99999 	.word	0x3fc99999
 800cc20:	54442d18 	.word	0x54442d18
 800cc24:	3ff921fb 	.word	0x3ff921fb
 800cc28:	440fffff 	.word	0x440fffff
 800cc2c:	7ff00000 	.word	0x7ff00000
 800cc30:	3fdbffff 	.word	0x3fdbffff
 800cc34:	3ff00000 	.word	0x3ff00000
 800cc38:	3ff2ffff 	.word	0x3ff2ffff
 800cc3c:	40038000 	.word	0x40038000
 800cc40:	3ff80000 	.word	0x3ff80000
 800cc44:	bff00000 	.word	0xbff00000
 800cc48:	0800d740 	.word	0x0800d740
 800cc4c:	0800d720 	.word	0x0800d720

0800cc50 <fabs>:
 800cc50:	ec51 0b10 	vmov	r0, r1, d0
 800cc54:	ee10 2a10 	vmov	r2, s0
 800cc58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cc5c:	ec43 2b10 	vmov	d0, r2, r3
 800cc60:	4770      	bx	lr
 800cc62:	0000      	movs	r0, r0
 800cc64:	0000      	movs	r0, r0
	...

0800cc68 <floor>:
 800cc68:	ec51 0b10 	vmov	r0, r1, d0
 800cc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc70:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800cc74:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800cc78:	2e13      	cmp	r6, #19
 800cc7a:	ee10 5a10 	vmov	r5, s0
 800cc7e:	ee10 8a10 	vmov	r8, s0
 800cc82:	460c      	mov	r4, r1
 800cc84:	dc32      	bgt.n	800ccec <floor+0x84>
 800cc86:	2e00      	cmp	r6, #0
 800cc88:	da14      	bge.n	800ccb4 <floor+0x4c>
 800cc8a:	a333      	add	r3, pc, #204	; (adr r3, 800cd58 <floor+0xf0>)
 800cc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc90:	f7f3 fb1c 	bl	80002cc <__adddf3>
 800cc94:	2200      	movs	r2, #0
 800cc96:	2300      	movs	r3, #0
 800cc98:	f7f3 ff5e 	bl	8000b58 <__aeabi_dcmpgt>
 800cc9c:	b138      	cbz	r0, 800ccae <floor+0x46>
 800cc9e:	2c00      	cmp	r4, #0
 800cca0:	da57      	bge.n	800cd52 <floor+0xea>
 800cca2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cca6:	431d      	orrs	r5, r3
 800cca8:	d001      	beq.n	800ccae <floor+0x46>
 800ccaa:	4c2d      	ldr	r4, [pc, #180]	; (800cd60 <floor+0xf8>)
 800ccac:	2500      	movs	r5, #0
 800ccae:	4621      	mov	r1, r4
 800ccb0:	4628      	mov	r0, r5
 800ccb2:	e025      	b.n	800cd00 <floor+0x98>
 800ccb4:	4f2b      	ldr	r7, [pc, #172]	; (800cd64 <floor+0xfc>)
 800ccb6:	4137      	asrs	r7, r6
 800ccb8:	ea01 0307 	and.w	r3, r1, r7
 800ccbc:	4303      	orrs	r3, r0
 800ccbe:	d01f      	beq.n	800cd00 <floor+0x98>
 800ccc0:	a325      	add	r3, pc, #148	; (adr r3, 800cd58 <floor+0xf0>)
 800ccc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc6:	f7f3 fb01 	bl	80002cc <__adddf3>
 800ccca:	2200      	movs	r2, #0
 800cccc:	2300      	movs	r3, #0
 800ccce:	f7f3 ff43 	bl	8000b58 <__aeabi_dcmpgt>
 800ccd2:	2800      	cmp	r0, #0
 800ccd4:	d0eb      	beq.n	800ccae <floor+0x46>
 800ccd6:	2c00      	cmp	r4, #0
 800ccd8:	bfbe      	ittt	lt
 800ccda:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ccde:	fa43 f606 	asrlt.w	r6, r3, r6
 800cce2:	19a4      	addlt	r4, r4, r6
 800cce4:	ea24 0407 	bic.w	r4, r4, r7
 800cce8:	2500      	movs	r5, #0
 800ccea:	e7e0      	b.n	800ccae <floor+0x46>
 800ccec:	2e33      	cmp	r6, #51	; 0x33
 800ccee:	dd0b      	ble.n	800cd08 <floor+0xa0>
 800ccf0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ccf4:	d104      	bne.n	800cd00 <floor+0x98>
 800ccf6:	ee10 2a10 	vmov	r2, s0
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	f7f3 fae6 	bl	80002cc <__adddf3>
 800cd00:	ec41 0b10 	vmov	d0, r0, r1
 800cd04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd08:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800cd0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd10:	fa23 f707 	lsr.w	r7, r3, r7
 800cd14:	4207      	tst	r7, r0
 800cd16:	d0f3      	beq.n	800cd00 <floor+0x98>
 800cd18:	a30f      	add	r3, pc, #60	; (adr r3, 800cd58 <floor+0xf0>)
 800cd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1e:	f7f3 fad5 	bl	80002cc <__adddf3>
 800cd22:	2200      	movs	r2, #0
 800cd24:	2300      	movs	r3, #0
 800cd26:	f7f3 ff17 	bl	8000b58 <__aeabi_dcmpgt>
 800cd2a:	2800      	cmp	r0, #0
 800cd2c:	d0bf      	beq.n	800ccae <floor+0x46>
 800cd2e:	2c00      	cmp	r4, #0
 800cd30:	da02      	bge.n	800cd38 <floor+0xd0>
 800cd32:	2e14      	cmp	r6, #20
 800cd34:	d103      	bne.n	800cd3e <floor+0xd6>
 800cd36:	3401      	adds	r4, #1
 800cd38:	ea25 0507 	bic.w	r5, r5, r7
 800cd3c:	e7b7      	b.n	800ccae <floor+0x46>
 800cd3e:	2301      	movs	r3, #1
 800cd40:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cd44:	fa03 f606 	lsl.w	r6, r3, r6
 800cd48:	4435      	add	r5, r6
 800cd4a:	4545      	cmp	r5, r8
 800cd4c:	bf38      	it	cc
 800cd4e:	18e4      	addcc	r4, r4, r3
 800cd50:	e7f2      	b.n	800cd38 <floor+0xd0>
 800cd52:	2500      	movs	r5, #0
 800cd54:	462c      	mov	r4, r5
 800cd56:	e7aa      	b.n	800ccae <floor+0x46>
 800cd58:	8800759c 	.word	0x8800759c
 800cd5c:	7e37e43c 	.word	0x7e37e43c
 800cd60:	bff00000 	.word	0xbff00000
 800cd64:	000fffff 	.word	0x000fffff

0800cd68 <nan>:
 800cd68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cd70 <nan+0x8>
 800cd6c:	4770      	bx	lr
 800cd6e:	bf00      	nop
 800cd70:	00000000 	.word	0x00000000
 800cd74:	7ff80000 	.word	0x7ff80000

0800cd78 <scalbn>:
 800cd78:	b570      	push	{r4, r5, r6, lr}
 800cd7a:	ec55 4b10 	vmov	r4, r5, d0
 800cd7e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cd82:	4606      	mov	r6, r0
 800cd84:	462b      	mov	r3, r5
 800cd86:	b99a      	cbnz	r2, 800cdb0 <scalbn+0x38>
 800cd88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cd8c:	4323      	orrs	r3, r4
 800cd8e:	d036      	beq.n	800cdfe <scalbn+0x86>
 800cd90:	4b39      	ldr	r3, [pc, #228]	; (800ce78 <scalbn+0x100>)
 800cd92:	4629      	mov	r1, r5
 800cd94:	ee10 0a10 	vmov	r0, s0
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f7f3 fc4d 	bl	8000638 <__aeabi_dmul>
 800cd9e:	4b37      	ldr	r3, [pc, #220]	; (800ce7c <scalbn+0x104>)
 800cda0:	429e      	cmp	r6, r3
 800cda2:	4604      	mov	r4, r0
 800cda4:	460d      	mov	r5, r1
 800cda6:	da10      	bge.n	800cdca <scalbn+0x52>
 800cda8:	a32b      	add	r3, pc, #172	; (adr r3, 800ce58 <scalbn+0xe0>)
 800cdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdae:	e03a      	b.n	800ce26 <scalbn+0xae>
 800cdb0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cdb4:	428a      	cmp	r2, r1
 800cdb6:	d10c      	bne.n	800cdd2 <scalbn+0x5a>
 800cdb8:	ee10 2a10 	vmov	r2, s0
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	4629      	mov	r1, r5
 800cdc0:	f7f3 fa84 	bl	80002cc <__adddf3>
 800cdc4:	4604      	mov	r4, r0
 800cdc6:	460d      	mov	r5, r1
 800cdc8:	e019      	b.n	800cdfe <scalbn+0x86>
 800cdca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cdce:	460b      	mov	r3, r1
 800cdd0:	3a36      	subs	r2, #54	; 0x36
 800cdd2:	4432      	add	r2, r6
 800cdd4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cdd8:	428a      	cmp	r2, r1
 800cdda:	dd08      	ble.n	800cdee <scalbn+0x76>
 800cddc:	2d00      	cmp	r5, #0
 800cdde:	a120      	add	r1, pc, #128	; (adr r1, 800ce60 <scalbn+0xe8>)
 800cde0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cde4:	da1c      	bge.n	800ce20 <scalbn+0xa8>
 800cde6:	a120      	add	r1, pc, #128	; (adr r1, 800ce68 <scalbn+0xf0>)
 800cde8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdec:	e018      	b.n	800ce20 <scalbn+0xa8>
 800cdee:	2a00      	cmp	r2, #0
 800cdf0:	dd08      	ble.n	800ce04 <scalbn+0x8c>
 800cdf2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cdf6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cdfa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cdfe:	ec45 4b10 	vmov	d0, r4, r5
 800ce02:	bd70      	pop	{r4, r5, r6, pc}
 800ce04:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ce08:	da19      	bge.n	800ce3e <scalbn+0xc6>
 800ce0a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ce0e:	429e      	cmp	r6, r3
 800ce10:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ce14:	dd0a      	ble.n	800ce2c <scalbn+0xb4>
 800ce16:	a112      	add	r1, pc, #72	; (adr r1, 800ce60 <scalbn+0xe8>)
 800ce18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d1e2      	bne.n	800cde6 <scalbn+0x6e>
 800ce20:	a30f      	add	r3, pc, #60	; (adr r3, 800ce60 <scalbn+0xe8>)
 800ce22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce26:	f7f3 fc07 	bl	8000638 <__aeabi_dmul>
 800ce2a:	e7cb      	b.n	800cdc4 <scalbn+0x4c>
 800ce2c:	a10a      	add	r1, pc, #40	; (adr r1, 800ce58 <scalbn+0xe0>)
 800ce2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d0b8      	beq.n	800cda8 <scalbn+0x30>
 800ce36:	a10e      	add	r1, pc, #56	; (adr r1, 800ce70 <scalbn+0xf8>)
 800ce38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce3c:	e7b4      	b.n	800cda8 <scalbn+0x30>
 800ce3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce42:	3236      	adds	r2, #54	; 0x36
 800ce44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	4b0c      	ldr	r3, [pc, #48]	; (800ce80 <scalbn+0x108>)
 800ce50:	2200      	movs	r2, #0
 800ce52:	e7e8      	b.n	800ce26 <scalbn+0xae>
 800ce54:	f3af 8000 	nop.w
 800ce58:	c2f8f359 	.word	0xc2f8f359
 800ce5c:	01a56e1f 	.word	0x01a56e1f
 800ce60:	8800759c 	.word	0x8800759c
 800ce64:	7e37e43c 	.word	0x7e37e43c
 800ce68:	8800759c 	.word	0x8800759c
 800ce6c:	fe37e43c 	.word	0xfe37e43c
 800ce70:	c2f8f359 	.word	0xc2f8f359
 800ce74:	81a56e1f 	.word	0x81a56e1f
 800ce78:	43500000 	.word	0x43500000
 800ce7c:	ffff3cb0 	.word	0xffff3cb0
 800ce80:	3c900000 	.word	0x3c900000

0800ce84 <_init>:
 800ce84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce86:	bf00      	nop
 800ce88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce8a:	bc08      	pop	{r3}
 800ce8c:	469e      	mov	lr, r3
 800ce8e:	4770      	bx	lr

0800ce90 <_fini>:
 800ce90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce92:	bf00      	nop
 800ce94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce96:	bc08      	pop	{r3}
 800ce98:	469e      	mov	lr, r3
 800ce9a:	4770      	bx	lr
