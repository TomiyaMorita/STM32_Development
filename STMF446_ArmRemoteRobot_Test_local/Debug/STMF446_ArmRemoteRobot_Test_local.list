
STMF446_ArmRemoteRobot_Test_local.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da1c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000998  0800dbf0  0800dbf0  0001dbf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e588  0800e588  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e588  0800e588  0001e588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e590  0800e590  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e590  0800e590  0001e590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e594  0800e594  0001e594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800e598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000096c  200001e8  0800e780  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b54  0800e780  00020b54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136e3  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000284c  00000000  00000000  000338fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00036148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  00037290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000440e  00000000  00000000  000382d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c3e  00000000  00000000  0003c6de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8ceb  00000000  00000000  0005031c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00129007  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e28  00000000  00000000  00129058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800dbd4 	.word	0x0800dbd4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800dbd4 	.word	0x0800dbd4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <EnterMotorMode>:
	m2Tx_can_data[6] = 0xFF;
	m2Tx_can_data[7] = 0xFE;
    //WriteAll();
    }

void EnterMotorMode(){	//アームBLDC ON	コマンド
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
	m1Tx_can_data[0] = 0xFF;
 8000f90:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <EnterMotorMode+0x70>)
 8000f92:	22ff      	movs	r2, #255	; 0xff
 8000f94:	701a      	strb	r2, [r3, #0]
	m1Tx_can_data[1] = 0xFF;
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <EnterMotorMode+0x70>)
 8000f98:	22ff      	movs	r2, #255	; 0xff
 8000f9a:	705a      	strb	r2, [r3, #1]
	m1Tx_can_data[2] = 0xFF;
 8000f9c:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <EnterMotorMode+0x70>)
 8000f9e:	22ff      	movs	r2, #255	; 0xff
 8000fa0:	709a      	strb	r2, [r3, #2]
	m1Tx_can_data[3] = 0xFF;
 8000fa2:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <EnterMotorMode+0x70>)
 8000fa4:	22ff      	movs	r2, #255	; 0xff
 8000fa6:	70da      	strb	r2, [r3, #3]
	m1Tx_can_data[4] = 0xFF;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <EnterMotorMode+0x70>)
 8000faa:	22ff      	movs	r2, #255	; 0xff
 8000fac:	711a      	strb	r2, [r3, #4]
	m1Tx_can_data[5] = 0xFF;
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <EnterMotorMode+0x70>)
 8000fb0:	22ff      	movs	r2, #255	; 0xff
 8000fb2:	715a      	strb	r2, [r3, #5]
	m1Tx_can_data[6] = 0xFF;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <EnterMotorMode+0x70>)
 8000fb6:	22ff      	movs	r2, #255	; 0xff
 8000fb8:	719a      	strb	r2, [r3, #6]
	m1Tx_can_data[7] = 0xFC;
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <EnterMotorMode+0x70>)
 8000fbc:	22fc      	movs	r2, #252	; 0xfc
 8000fbe:	71da      	strb	r2, [r3, #7]

	m2Tx_can_data[0] = 0xFF;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <EnterMotorMode+0x74>)
 8000fc2:	22ff      	movs	r2, #255	; 0xff
 8000fc4:	701a      	strb	r2, [r3, #0]
	m2Tx_can_data[1] = 0xFF;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <EnterMotorMode+0x74>)
 8000fc8:	22ff      	movs	r2, #255	; 0xff
 8000fca:	705a      	strb	r2, [r3, #1]
	m2Tx_can_data[2] = 0xFF;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <EnterMotorMode+0x74>)
 8000fce:	22ff      	movs	r2, #255	; 0xff
 8000fd0:	709a      	strb	r2, [r3, #2]
	m2Tx_can_data[3] = 0xFF;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <EnterMotorMode+0x74>)
 8000fd4:	22ff      	movs	r2, #255	; 0xff
 8000fd6:	70da      	strb	r2, [r3, #3]
	m2Tx_can_data[4] = 0xFF;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <EnterMotorMode+0x74>)
 8000fda:	22ff      	movs	r2, #255	; 0xff
 8000fdc:	711a      	strb	r2, [r3, #4]
	m2Tx_can_data[5] = 0xFF;
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <EnterMotorMode+0x74>)
 8000fe0:	22ff      	movs	r2, #255	; 0xff
 8000fe2:	715a      	strb	r2, [r3, #5]
	m2Tx_can_data[6] = 0xFF;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <EnterMotorMode+0x74>)
 8000fe6:	22ff      	movs	r2, #255	; 0xff
 8000fe8:	719a      	strb	r2, [r3, #6]
	m2Tx_can_data[7] = 0xFC;
 8000fea:	4b05      	ldr	r3, [pc, #20]	; (8001000 <EnterMotorMode+0x74>)
 8000fec:	22fc      	movs	r2, #252	; 0xfc
 8000fee:	71da      	strb	r2, [r3, #7]

    //WriteAll();
    }
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	200003a8 	.word	0x200003a8
 8001000:	200003bc 	.word	0x200003bc

08001004 <ExitMotorMode>:

void ExitMotorMode(){	//アームBLDC OFFコマンド
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
	m1Tx_can_data[0] = 0xFF;
 8001008:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <ExitMotorMode+0x70>)
 800100a:	22ff      	movs	r2, #255	; 0xff
 800100c:	701a      	strb	r2, [r3, #0]
	m1Tx_can_data[1] = 0xFF;
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <ExitMotorMode+0x70>)
 8001010:	22ff      	movs	r2, #255	; 0xff
 8001012:	705a      	strb	r2, [r3, #1]
	m1Tx_can_data[2] = 0xFF;
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <ExitMotorMode+0x70>)
 8001016:	22ff      	movs	r2, #255	; 0xff
 8001018:	709a      	strb	r2, [r3, #2]
	m1Tx_can_data[3] = 0xFF;
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <ExitMotorMode+0x70>)
 800101c:	22ff      	movs	r2, #255	; 0xff
 800101e:	70da      	strb	r2, [r3, #3]
	m1Tx_can_data[4] = 0xFF;
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <ExitMotorMode+0x70>)
 8001022:	22ff      	movs	r2, #255	; 0xff
 8001024:	711a      	strb	r2, [r3, #4]
	m1Tx_can_data[5] = 0xFF;
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <ExitMotorMode+0x70>)
 8001028:	22ff      	movs	r2, #255	; 0xff
 800102a:	715a      	strb	r2, [r3, #5]
	m1Tx_can_data[6] = 0xFF;
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <ExitMotorMode+0x70>)
 800102e:	22ff      	movs	r2, #255	; 0xff
 8001030:	719a      	strb	r2, [r3, #6]
	m1Tx_can_data[7] = 0xFD;
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <ExitMotorMode+0x70>)
 8001034:	22fd      	movs	r2, #253	; 0xfd
 8001036:	71da      	strb	r2, [r3, #7]

	m2Tx_can_data[0] = 0xFF;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <ExitMotorMode+0x74>)
 800103a:	22ff      	movs	r2, #255	; 0xff
 800103c:	701a      	strb	r2, [r3, #0]
	m2Tx_can_data[1] = 0xFF;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <ExitMotorMode+0x74>)
 8001040:	22ff      	movs	r2, #255	; 0xff
 8001042:	705a      	strb	r2, [r3, #1]
	m2Tx_can_data[2] = 0xFF;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <ExitMotorMode+0x74>)
 8001046:	22ff      	movs	r2, #255	; 0xff
 8001048:	709a      	strb	r2, [r3, #2]
	m2Tx_can_data[3] = 0xFF;
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <ExitMotorMode+0x74>)
 800104c:	22ff      	movs	r2, #255	; 0xff
 800104e:	70da      	strb	r2, [r3, #3]
	m2Tx_can_data[4] = 0xFF;
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <ExitMotorMode+0x74>)
 8001052:	22ff      	movs	r2, #255	; 0xff
 8001054:	711a      	strb	r2, [r3, #4]
	m2Tx_can_data[5] = 0xFF;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <ExitMotorMode+0x74>)
 8001058:	22ff      	movs	r2, #255	; 0xff
 800105a:	715a      	strb	r2, [r3, #5]
	m2Tx_can_data[6] = 0xFF;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <ExitMotorMode+0x74>)
 800105e:	22ff      	movs	r2, #255	; 0xff
 8001060:	719a      	strb	r2, [r3, #6]
	m2Tx_can_data[7] = 0xFD;
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <ExitMotorMode+0x74>)
 8001064:	22fd      	movs	r2, #253	; 0xfd
 8001066:	71da      	strb	r2, [r3, #7]
    //WriteAll();
    }
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	200003a8 	.word	0x200003a8
 8001078:	200003bc 	.word	0x200003bc

0800107c <pack_cmd>:
void pack_cmd(float _p_des, float _v_des, float _kp, float _kd, float _t_ff){	//floatのradをcanで送れるuint8に変換
 800107c:	b5b0      	push	{r4, r5, r7, lr}
 800107e:	b094      	sub	sp, #80	; 0x50
 8001080:	af00      	add	r7, sp, #0
 8001082:	ed87 0a05 	vstr	s0, [r7, #20]
 8001086:	edc7 0a04 	vstr	s1, [r7, #16]
 800108a:	ed87 1a03 	vstr	s2, [r7, #12]
 800108e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001092:	ed87 2a01 	vstr	s4, [r7, #4]
	uint8_t tx_can_data[20];

	/// limit data to be within bounds ///
	float p_des = fminf(fmaxf(P_MIN, _p_des), P_MAX);
 8001096:	edd7 0a05 	vldr	s1, [r7, #20]
 800109a:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800109e:	f002 ff7c 	bl	8003f9a <fmaxf>
 80010a2:	eef0 7a40 	vmov.f32	s15, s0
 80010a6:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 80010aa:	eeb0 0a67 	vmov.f32	s0, s15
 80010ae:	f002 ff90 	bl	8003fd2 <fminf>
 80010b2:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
	float v_des = fminf(fmaxf(V_MIN, _v_des), V_MAX);
 80010b6:	edd7 0a04 	vldr	s1, [r7, #16]
 80010ba:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8001244 <pack_cmd+0x1c8>
 80010be:	f002 ff6c 	bl	8003f9a <fmaxf>
 80010c2:	eef0 7a40 	vmov.f32	s15, s0
 80010c6:	eddf 0a60 	vldr	s1, [pc, #384]	; 8001248 <pack_cmd+0x1cc>
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	f002 ff80 	bl	8003fd2 <fminf>
 80010d2:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	float kp = fminf(fmaxf(KP_MIN, _kp), KP_MAX);
 80010d6:	edd7 0a03 	vldr	s1, [r7, #12]
 80010da:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 800124c <pack_cmd+0x1d0>
 80010de:	f002 ff5c 	bl	8003f9a <fmaxf>
 80010e2:	eef0 7a40 	vmov.f32	s15, s0
 80010e6:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8001250 <pack_cmd+0x1d4>
 80010ea:	eeb0 0a67 	vmov.f32	s0, s15
 80010ee:	f002 ff70 	bl	8003fd2 <fminf>
 80010f2:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
	float kd = fminf(fmaxf(KD_MIN, _kd), KD_MAX);
 80010f6:	edd7 0a02 	vldr	s1, [r7, #8]
 80010fa:	ed9f 0a54 	vldr	s0, [pc, #336]	; 800124c <pack_cmd+0x1d0>
 80010fe:	f002 ff4c 	bl	8003f9a <fmaxf>
 8001102:	eef0 7a40 	vmov.f32	s15, s0
 8001106:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800110a:	eeb0 0a67 	vmov.f32	s0, s15
 800110e:	f002 ff60 	bl	8003fd2 <fminf>
 8001112:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
	float t_ff = fminf(fmaxf(T_MIN, _t_ff), T_MAX);
 8001116:	edd7 0a01 	vldr	s1, [r7, #4]
 800111a:	eebb 0a02 	vmov.f32	s0, #178	; 0xc1900000 -18.0
 800111e:	f002 ff3c 	bl	8003f9a <fmaxf>
 8001122:	eef0 7a40 	vmov.f32	s15, s0
 8001126:	eef3 0a02 	vmov.f32	s1, #50	; 0x41900000  18.0
 800112a:	eeb0 0a67 	vmov.f32	s0, s15
 800112e:	f002 ff50 	bl	8003fd2 <fminf>
 8001132:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	/// convert floats to unsigned ints ///
	uint16_t p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);
 8001136:	2010      	movs	r0, #16
 8001138:	eeb2 1a09 	vmov.f32	s2, #41	; 0x41480000  12.5
 800113c:	eefa 0a09 	vmov.f32	s1, #169	; 0xc1480000 -12.5
 8001140:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001144:	f002 ff61 	bl	800400a <float_to_uint>
 8001148:	4603      	mov	r3, r0
 800114a:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint16_t v_int = float_to_uint(v_des, V_MIN, V_MAX, 12);
 800114c:	200c      	movs	r0, #12
 800114e:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 8001248 <pack_cmd+0x1cc>
 8001152:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8001244 <pack_cmd+0x1c8>
 8001156:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 800115a:	f002 ff56 	bl	800400a <float_to_uint>
 800115e:	4603      	mov	r3, r0
 8001160:	873b      	strh	r3, [r7, #56]	; 0x38
	uint16_t kp_int = float_to_uint(kp, KP_MIN, KP_MAX, 12);
 8001162:	200c      	movs	r0, #12
 8001164:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 8001250 <pack_cmd+0x1d4>
 8001168:	eddf 0a38 	vldr	s1, [pc, #224]	; 800124c <pack_cmd+0x1d0>
 800116c:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8001170:	f002 ff4b 	bl	800400a <float_to_uint>
 8001174:	4603      	mov	r3, r0
 8001176:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t kd_int = float_to_uint(kd, KD_MIN, KD_MAX, 12);
 8001178:	200c      	movs	r0, #12
 800117a:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 800117e:	eddf 0a33 	vldr	s1, [pc, #204]	; 800124c <pack_cmd+0x1d0>
 8001182:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8001186:	f002 ff40 	bl	800400a <float_to_uint>
 800118a:	4603      	mov	r3, r0
 800118c:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t t_int = float_to_uint(t_ff, T_MIN, T_MAX, 12);
 800118e:	200c      	movs	r0, #12
 8001190:	eeb3 1a02 	vmov.f32	s2, #50	; 0x41900000  18.0
 8001194:	eefb 0a02 	vmov.f32	s1, #178	; 0xc1900000 -18.0
 8001198:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800119c:	f002 ff35 	bl	800400a <float_to_uint>
 80011a0:	4603      	mov	r3, r0
 80011a2:	867b      	strh	r3, [r7, #50]	; 0x32
	/// pack ints into the can buffer ///
	tx_can_data[0] = p_int>>8;
 80011a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80011a6:	0a1b      	lsrs	r3, r3, #8
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	773b      	strb	r3, [r7, #28]
	tx_can_data[1] = p_int&0xFF;
 80011ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	777b      	strb	r3, [r7, #29]
	tx_can_data[2] = v_int>>4;
 80011b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80011b6:	091b      	lsrs	r3, r3, #4
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	77bb      	strb	r3, [r7, #30]
	tx_can_data[3] = ((v_int&0xF)<<4)|(kp_int>>8);
 80011be:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	b25a      	sxtb	r2, r3
 80011c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80011c6:	0a1b      	lsrs	r3, r3, #8
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b25b      	sxtb	r3, r3
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	77fb      	strb	r3, [r7, #31]
	tx_can_data[4] = kp_int&0xFF;
 80011d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	f887 3020 	strb.w	r3, [r7, #32]
	tx_can_data[5] = kd_int>>4;
 80011dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80011de:	091b      	lsrs	r3, r3, #4
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	tx_can_data[6] = ((kd_int&0xF)<<4)|(t_int>>8);
 80011e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	b25a      	sxtb	r2, r3
 80011ee:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b25b      	sxtb	r3, r3
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	tx_can_data[7] = t_int&0xFF;
 8001200:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if(canid==0x01){
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <pack_cmd+0x1d8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d108      	bne.n	8001222 <pack_cmd+0x1a6>
		memcpy(m1Tx_can_data,tx_can_data,sizeof(m1Tx_can_data));
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <pack_cmd+0x1dc>)
 8001212:	461d      	mov	r5, r3
 8001214:	f107 041c 	add.w	r4, r7, #28
 8001218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800121a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800121c:	6823      	ldr	r3, [r4, #0]
 800121e:	602b      	str	r3, [r5, #0]
//		for(int i=0;i<20;i++){	//memset(メモリーセット)で一発でできる
//			m2Tx_can_data[i]=tx_can_data[i];
//		}
//	}

}
 8001220:	e00b      	b.n	800123a <pack_cmd+0x1be>
	}else if(canid==0x02){
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <pack_cmd+0x1d8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d107      	bne.n	800123a <pack_cmd+0x1be>
		memcpy(m2Tx_can_data,tx_can_data,sizeof(m2Tx_can_data));
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <pack_cmd+0x1e0>)
 800122c:	461d      	mov	r5, r3
 800122e:	f107 041c 	add.w	r4, r7, #28
 8001232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	602b      	str	r3, [r5, #0]
}
 800123a:	bf00      	nop
 800123c:	3750      	adds	r7, #80	; 0x50
 800123e:	46bd      	mov	sp, r7
 8001240:	bdb0      	pop	{r4, r5, r7, pc}
 8001242:	bf00      	nop
 8001244:	c2820000 	.word	0xc2820000
 8001248:	42820000 	.word	0x42820000
 800124c:	00000000 	.word	0x00000000
 8001250:	43fa0000 	.word	0x43fa0000
 8001254:	20000424 	.word	0x20000424
 8001258:	200003a8 	.word	0x200003a8
 800125c:	200003bc 	.word	0x200003bc

08001260 <BLDC_CANTx>:
void BLDC_CANTx(){	//BLDCにcanを送る
 8001260:	b5b0      	push	{r4, r5, r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
	uint8_t BLDC_can_data[20];
	TxHeader.StdId=canid;
 8001266:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <BLDC_CANTx+0x90>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a22      	ldr	r2, [pc, #136]	; (80012f4 <BLDC_CANTx+0x94>)
 800126c:	6013      	str	r3, [r2, #0]
	TxHeader.IDE = CAN_ID_STD;
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <BLDC_CANTx+0x94>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 0x08;
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <BLDC_CANTx+0x94>)
 8001276:	2208      	movs	r2, #8
 8001278:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <BLDC_CANTx+0x94>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001280:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <BLDC_CANTx+0x94>)
 8001282:	2200      	movs	r2, #0
 8001284:	751a      	strb	r2, [r3, #20]
//	HAL_CAN_AddTxMessage(&hcan1,&TxHeader,data,&TxMailbox);
//	HAL_Delay(10);

//	int i = 0;
	int count=0;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
	uint8_t can_mailboxflag=0;
 800128a:	2300      	movs	r3, #0
 800128c:	76fb      	strb	r3, [r7, #27]
	//HAL_CAN_GetTxMailboxesFreeLevelがあくまで待機
	if(canid==0x01){
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <BLDC_CANTx+0x90>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d107      	bne.n	80012a6 <BLDC_CANTx+0x46>
		memcpy(BLDC_can_data,m1Tx_can_data,sizeof(m1Tx_can_data));
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <BLDC_CANTx+0x98>)
 8001298:	1d3c      	adds	r4, r7, #4
 800129a:	461d      	mov	r5, r3
 800129c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800129e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a0:	682b      	ldr	r3, [r5, #0]
 80012a2:	6023      	str	r3, [r4, #0]
 80012a4:	e00a      	b.n	80012bc <BLDC_CANTx+0x5c>
	}else if(canid==0x02){
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <BLDC_CANTx+0x90>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d106      	bne.n	80012bc <BLDC_CANTx+0x5c>
		memcpy(BLDC_can_data,m2Tx_can_data,sizeof(m2Tx_can_data));
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <BLDC_CANTx+0x9c>)
 80012b0:	1d3c      	adds	r4, r7, #4
 80012b2:	461d      	mov	r5, r3
 80012b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b8:	682b      	ldr	r3, [r5, #0]
 80012ba:	6023      	str	r3, [r4, #0]
	}

	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)==0){}
 80012bc:	bf00      	nop
 80012be:	4810      	ldr	r0, [pc, #64]	; (8001300 <BLDC_CANTx+0xa0>)
 80012c0:	f003 fd72 	bl	8004da8 <HAL_CAN_GetTxMailboxesFreeLevel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f9      	beq.n	80012be <BLDC_CANTx+0x5e>
	HAL_CAN_AddTxMessage(&hcan1,&TxHeader,BLDC_can_data,&TxMailbox);
 80012ca:	1d3a      	adds	r2, r7, #4
 80012cc:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <BLDC_CANTx+0xa4>)
 80012ce:	4909      	ldr	r1, [pc, #36]	; (80012f4 <BLDC_CANTx+0x94>)
 80012d0:	480b      	ldr	r0, [pc, #44]	; (8001300 <BLDC_CANTx+0xa0>)
 80012d2:	f003 fc8e 	bl	8004bf2 <HAL_CAN_AddTxMessage>
	HAL_Delay(10);
 80012d6:	200a      	movs	r0, #10
 80012d8:	f003 f9fe 	bl	80046d8 <HAL_Delay>
//				HAL_CAN_Stop (&hcan1);
//				HAL_CAN_Start(&hcan1);
//			}
//		}
//	}
	nextcan_flag=0;
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <BLDC_CANTx+0xa8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
	count=0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
//		HAL_CAN_Stop (&hcan1);
//		HAL_CAN_Start(&hcan1);
//		nextcan_flag=1;
//		get_can_flag=1;
//	}
}
 80012e6:	bf00      	nop
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bdb0      	pop	{r4, r5, r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000424 	.word	0x20000424
 80012f4:	20000324 	.word	0x20000324
 80012f8:	200003a8 	.word	0x200003a8
 80012fc:	200003bc 	.word	0x200003bc
 8001300:	20000204 	.word	0x20000204
 8001304:	20000420 	.word	0x20000420
 8001308:	2000042b 	.word	0x2000042b
 800130c:	00000000 	.word	0x00000000

08001310 <unpack_reply>:

void unpack_reply(){	//canで受け取ったデータをfloatに変換
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
	uint16_t id ;
	uint16_t p_int ;
	uint16_t v_int ;
	uint16_t i_int ;

	if(canid==0x01){
 8001316:	4b44      	ldr	r3, [pc, #272]	; (8001428 <unpack_reply+0x118>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d107      	bne.n	800132e <unpack_reply+0x1e>
		memcpy(BLDC_can_data,m1Rx_can_data,sizeof(m1Rx_can_data));
 800131e:	4b43      	ldr	r3, [pc, #268]	; (800142c <unpack_reply+0x11c>)
 8001320:	463c      	mov	r4, r7
 8001322:	461d      	mov	r5, r3
 8001324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001328:	682b      	ldr	r3, [r5, #0]
 800132a:	6023      	str	r3, [r4, #0]
 800132c:	e00a      	b.n	8001344 <unpack_reply+0x34>
	}else if(canid==0x02){
 800132e:	4b3e      	ldr	r3, [pc, #248]	; (8001428 <unpack_reply+0x118>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d106      	bne.n	8001344 <unpack_reply+0x34>
		memcpy(BLDC_can_data,m2Rx_can_data,sizeof(m2Rx_can_data));
 8001336:	4b3e      	ldr	r3, [pc, #248]	; (8001430 <unpack_reply+0x120>)
 8001338:	463c      	mov	r4, r7
 800133a:	461d      	mov	r5, r3
 800133c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001340:	682b      	ldr	r3, [r5, #0]
 8001342:	6023      	str	r3, [r4, #0]
	}
//	printf("m1Rx_can_data%d\r\n",m1Rx_can_data[0]);
//	printf("m2Rx_can_data%d\r\n",m2Rx_can_data[0]);
	id = BLDC_can_data[0];
 8001344:	783b      	ldrb	r3, [r7, #0]
 8001346:	84fb      	strh	r3, [r7, #38]	; 0x26
	p_int = (BLDC_can_data[1]<<8)|BLDC_can_data[2];
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	b21a      	sxth	r2, r3
 800134e:	78bb      	ldrb	r3, [r7, #2]
 8001350:	b21b      	sxth	r3, r3
 8001352:	4313      	orrs	r3, r2
 8001354:	b21b      	sxth	r3, r3
 8001356:	84bb      	strh	r3, [r7, #36]	; 0x24
	v_int = (BLDC_can_data[3]<<4)|(BLDC_can_data[4]>>4);
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	011b      	lsls	r3, r3, #4
 800135c:	b21a      	sxth	r2, r3
 800135e:	793b      	ldrb	r3, [r7, #4]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	b2db      	uxtb	r3, r3
 8001364:	b21b      	sxth	r3, r3
 8001366:	4313      	orrs	r3, r2
 8001368:	b21b      	sxth	r3, r3
 800136a:	847b      	strh	r3, [r7, #34]	; 0x22
	i_int = ((BLDC_can_data[4]&0xF)<<8)|BLDC_can_data[5];
 800136c:	793b      	ldrb	r3, [r7, #4]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	b21b      	sxth	r3, r3
 8001372:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001376:	b21a      	sxth	r2, r3
 8001378:	797b      	ldrb	r3, [r7, #5]
 800137a:	b21b      	sxth	r3, r3
 800137c:	4313      	orrs	r3, r2
 800137e:	b21b      	sxth	r3, r3
 8001380:	843b      	strh	r3, [r7, #32]

//    p_getintdata=p_int;
    /// convert uints to floats ///
    float p = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001382:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001384:	2110      	movs	r1, #16
 8001386:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 800138a:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800138e:	4618      	mov	r0, r3
 8001390:	f002 fe6e 	bl	8004070 <uint_to_float>
 8001394:	ed87 0a07 	vstr	s0, [r7, #28]
    float v = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8001398:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800139a:	210c      	movs	r1, #12
 800139c:	eddf 0a25 	vldr	s1, [pc, #148]	; 8001434 <unpack_reply+0x124>
 80013a0:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001438 <unpack_reply+0x128>
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 fe63 	bl	8004070 <uint_to_float>
 80013aa:	ed87 0a06 	vstr	s0, [r7, #24]
    float t = uint_to_float(i_int, -T_MAX, T_MAX, 12);
 80013ae:	8c3b      	ldrh	r3, [r7, #32]
 80013b0:	210c      	movs	r1, #12
 80013b2:	eef3 0a02 	vmov.f32	s1, #50	; 0x41900000  18.0
 80013b6:	eebb 0a02 	vmov.f32	s0, #178	; 0xc1900000 -18.0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f002 fe58 	bl	8004070 <uint_to_float>
 80013c0:	ed87 0a05 	vstr	s0, [r7, #20]
    p_getdata=p;
 80013c4:	4a1d      	ldr	r2, [pc, #116]	; (800143c <unpack_reply+0x12c>)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	6013      	str	r3, [r2, #0]

    if(id==0x01){
 80013ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d108      	bne.n	80013e2 <unpack_reply+0xd2>
    	p_getdata_s1=(-p_getdata);
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <unpack_reply+0x12c>)
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	eef1 7a67 	vneg.f32	s15, s15
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <unpack_reply+0x130>)
 80013dc:	edc3 7a00 	vstr	s15, [r3]
    }else if(id==0x02)
    {
//    	printf("m1_p_getdata%f\r\n",p_getdata);
    	p_getdata_s2=(-p_getdata+M_PI);
    }
}
 80013e0:	e01a      	b.n	8001418 <unpack_reply+0x108>
    }else if(id==0x02)
 80013e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d117      	bne.n	8001418 <unpack_reply+0x108>
    	p_getdata_s2=(-p_getdata+M_PI);
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <unpack_reply+0x12c>)
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	eef1 7a67 	vneg.f32	s15, s15
 80013f2:	ee17 3a90 	vmov	r3, s15
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f8c6 	bl	8000588 <__aeabi_f2d>
 80013fc:	a308      	add	r3, pc, #32	; (adr r3, 8001420 <unpack_reply+0x110>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	f7fe ff63 	bl	80002cc <__adddf3>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f7ff fbeb 	bl	8000be8 <__aeabi_d2f>
 8001412:	4603      	mov	r3, r0
 8001414:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <unpack_reply+0x134>)
 8001416:	6013      	str	r3, [r2, #0]
}
 8001418:	bf00      	nop
 800141a:	3728      	adds	r7, #40	; 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bdb0      	pop	{r4, r5, r7, pc}
 8001420:	54442d18 	.word	0x54442d18
 8001424:	400921fb 	.word	0x400921fb
 8001428:	20000424 	.word	0x20000424
 800142c:	200003e4 	.word	0x200003e4
 8001430:	200003f8 	.word	0x200003f8
 8001434:	42820000 	.word	0x42820000
 8001438:	c2820000 	.word	0xc2820000
 800143c:	20000430 	.word	0x20000430
 8001440:	20000434 	.word	0x20000434
 8001444:	20000438 	.word	0x20000438

08001448 <RMDTx>:
void RMDTx(){	//RMDへのca
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
	int count=0;
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
	TxHeader.StdId=0x141;
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <RMDTx+0x90>)
 8001454:	f240 1241 	movw	r2, #321	; 0x141
 8001458:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800145a:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <RMDTx+0x90>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 0x08;
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <RMDTx+0x90>)
 8001462:	2208      	movs	r2, #8
 8001464:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <RMDTx+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <RMDTx+0x90>)
 800146e:	2200      	movs	r2, #0
 8001470:	751a      	strb	r2, [r3, #20]
	TxData[1] = 0x00;
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <RMDTx+0x94>)
 8001474:	2200      	movs	r2, #0
 8001476:	705a      	strb	r2, [r3, #1]

	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)==0){}
 8001478:	bf00      	nop
 800147a:	4819      	ldr	r0, [pc, #100]	; (80014e0 <RMDTx+0x98>)
 800147c:	f003 fc94 	bl	8004da8 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f9      	beq.n	800147a <RMDTx+0x32>
	while(!nextcan_flag){
 8001486:	e01a      	b.n	80014be <RMDTx+0x76>
		HAL_CAN_AddTxMessage(&hcan1,&TxHeader,RMDTx_can_data,&TxMailbox);
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <RMDTx+0x9c>)
 800148a:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <RMDTx+0xa0>)
 800148c:	4912      	ldr	r1, [pc, #72]	; (80014d8 <RMDTx+0x90>)
 800148e:	4814      	ldr	r0, [pc, #80]	; (80014e0 <RMDTx+0x98>)
 8001490:	f003 fbaf 	bl	8004bf2 <HAL_CAN_AddTxMessage>
		HAL_Delay(10);
 8001494:	200a      	movs	r0, #10
 8001496:	f003 f91f 	bl	80046d8 <HAL_Delay>
		count++;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3301      	adds	r3, #1
 800149e:	607b      	str	r3, [r7, #4]
		if(count==10){
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b0a      	cmp	r3, #10
 80014a4:	d10b      	bne.n	80014be <RMDTx+0x76>
			nextcan_flag=1;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <RMDTx+0xa4>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
			get_can_flag=1;
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <RMDTx+0xa8>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	701a      	strb	r2, [r3, #0]
			HAL_CAN_Stop (&hcan1);
 80014b2:	480b      	ldr	r0, [pc, #44]	; (80014e0 <RMDTx+0x98>)
 80014b4:	f003 fb54 	bl	8004b60 <HAL_CAN_Stop>
			HAL_CAN_Start(&hcan1);
 80014b8:	4809      	ldr	r0, [pc, #36]	; (80014e0 <RMDTx+0x98>)
 80014ba:	f003 fb0d 	bl	8004ad8 <HAL_CAN_Start>
	while(!nextcan_flag){
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <RMDTx+0xa4>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0e0      	beq.n	8001488 <RMDTx+0x40>
		}
	}
	nextcan_flag=0;
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <RMDTx+0xa4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
	count=0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000324 	.word	0x20000324
 80014dc:	20000358 	.word	0x20000358
 80014e0:	20000204 	.word	0x20000204
 80014e4:	20000420 	.word	0x20000420
 80014e8:	200003d0 	.word	0x200003d0
 80014ec:	2000042b 	.word	0x2000042b
 80014f0:	2000042a 	.word	0x2000042a
 80014f4:	00000000 	.word	0x00000000

080014f8 <RMDZero>:
void RMDZero(){
 80014f8:	b5b0      	push	{r4, r5, r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
	int get_RMD_deg;
	int first_deg_pos=90*100;
 80014fe:	f242 3328 	movw	r3, #9000	; 0x2328
 8001502:	607b      	str	r3, [r7, #4]

	get_RMD_deg=first_deg_pos+100*(((-p_getdata_s1-p_getdata_s2+M_PI)*180)/M_PI);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff f82d 	bl	8000564 <__aeabi_i2d>
 800150a:	4604      	mov	r4, r0
 800150c:	460d      	mov	r5, r1
 800150e:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <RMDZero+0xd8>)
 8001510:	edd3 7a00 	vldr	s15, [r3]
 8001514:	eeb1 7a67 	vneg.f32	s14, s15
 8001518:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <RMDZero+0xdc>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001522:	ee17 0a90 	vmov	r0, s15
 8001526:	f7ff f82f 	bl	8000588 <__aeabi_f2d>
 800152a:	a327      	add	r3, pc, #156	; (adr r3, 80015c8 <RMDZero+0xd0>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7fe fecc 	bl	80002cc <__adddf3>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <RMDZero+0xe0>)
 8001542:	f7ff f879 	bl	8000638 <__aeabi_dmul>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	a31e      	add	r3, pc, #120	; (adr r3, 80015c8 <RMDZero+0xd0>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7ff f99a 	bl	800088c <__aeabi_ddiv>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <RMDZero+0xe4>)
 8001566:	f7ff f867 	bl	8000638 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4620      	mov	r0, r4
 8001570:	4629      	mov	r1, r5
 8001572:	f7fe feab 	bl	80002cc <__adddf3>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fb0b 	bl	8000b98 <__aeabi_d2iz>
 8001582:	4603      	mov	r3, r0
 8001584:	603b      	str	r3, [r7, #0]
	RMDTx_can_data[0] = 0xA4;
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <RMDZero+0xe8>)
 8001588:	22a4      	movs	r2, #164	; 0xa4
 800158a:	701a      	strb	r2, [r3, #0]
	RMDTx_can_data[1] = 0x00;
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <RMDZero+0xe8>)
 800158e:	2200      	movs	r2, #0
 8001590:	705a      	strb	r2, [r3, #1]
	RMDTx_can_data[2] = 0x64;	//speed low
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <RMDZero+0xe8>)
 8001594:	2264      	movs	r2, #100	; 0x64
 8001596:	709a      	strb	r2, [r3, #2]
	RMDTx_can_data[3] = 0x00;	//speed high
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <RMDZero+0xe8>)
 800159a:	2200      	movs	r2, #0
 800159c:	70da      	strb	r2, [r3, #3]
	RMDTx_can_data[4] =(get_RMD_deg&0xFF);	//poslow
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <RMDZero+0xe8>)
 80015a4:	711a      	strb	r2, [r3, #4]
	RMDTx_can_data[5] =(get_RMD_deg>>8)&0xFF;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	121b      	asrs	r3, r3, #8
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <RMDZero+0xe8>)
 80015ae:	715a      	strb	r2, [r3, #5]
	RMDTx_can_data[6] = 0x00;
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <RMDZero+0xe8>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	719a      	strb	r2, [r3, #6]
	RMDTx_can_data[7] = 0x00;
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <RMDZero+0xe8>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	71da      	strb	r2, [r3, #7]
	RMDTx();
 80015bc:	f7ff ff44 	bl	8001448 <RMDTx>
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bdb0      	pop	{r4, r5, r7, pc}
 80015c8:	54442d18 	.word	0x54442d18
 80015cc:	400921fb 	.word	0x400921fb
 80015d0:	20000434 	.word	0x20000434
 80015d4:	20000438 	.word	0x20000438
 80015d8:	40668000 	.word	0x40668000
 80015dc:	40590000 	.word	0x40590000
 80015e0:	200003d0 	.word	0x200003d0

080015e4 <sent_position>:
//	can_data[6] = 0x00;
//	can_data[7] = 0x00;
//
//	RMDTx();
//}
void sent_position(){
 80015e4:	b5b0      	push	{r4, r5, r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
	float current_coordinate[2];
	int16_t x1;
	int16_t y1;
	int16_t x2;
	int16_t y2;
	BLDC_FK(p_getdata_s1,p_getdata_s2,&current_coordinate[0],&current_coordinate[1]);
 80015ea:	4b63      	ldr	r3, [pc, #396]	; (8001778 <sent_position+0x194>)
 80015ec:	edd3 7a00 	vldr	s15, [r3]
 80015f0:	4b62      	ldr	r3, [pc, #392]	; (800177c <sent_position+0x198>)
 80015f2:	ed93 7a00 	vldr	s14, [r3]
 80015f6:	463b      	mov	r3, r7
 80015f8:	1d1a      	adds	r2, r3, #4
 80015fa:	463b      	mov	r3, r7
 80015fc:	4611      	mov	r1, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	eef0 0a47 	vmov.f32	s1, s14
 8001604:	eeb0 0a67 	vmov.f32	s0, s15
 8001608:	f002 f9fc 	bl	8003a04 <BLDC_FK>

	x1=round(l1*cos(p_getdata_s1));
 800160c:	4b5c      	ldr	r3, [pc, #368]	; (8001780 <sent_position+0x19c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ffb9 	bl	8000588 <__aeabi_f2d>
 8001616:	4604      	mov	r4, r0
 8001618:	460d      	mov	r5, r1
 800161a:	4b57      	ldr	r3, [pc, #348]	; (8001778 <sent_position+0x194>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ffb2 	bl	8000588 <__aeabi_f2d>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	ec43 2b10 	vmov	d0, r2, r3
 800162c:	f00a fc28 	bl	800be80 <cos>
 8001630:	ec53 2b10 	vmov	r2, r3, d0
 8001634:	4620      	mov	r0, r4
 8001636:	4629      	mov	r1, r5
 8001638:	f7fe fffe 	bl	8000638 <__aeabi_dmul>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	ec43 2b17 	vmov	d7, r2, r3
 8001644:	eeb0 0a47 	vmov.f32	s0, s14
 8001648:	eef0 0a67 	vmov.f32	s1, s15
 800164c:	f00a fc6c 	bl	800bf28 <round>
 8001650:	ec53 2b10 	vmov	r2, r3, d0
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f7ff fa9e 	bl	8000b98 <__aeabi_d2iz>
 800165c:	4603      	mov	r3, r0
 800165e:	81fb      	strh	r3, [r7, #14]
	y1=round(l1*sin(p_getdata_s1));
 8001660:	4b47      	ldr	r3, [pc, #284]	; (8001780 <sent_position+0x19c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff8f 	bl	8000588 <__aeabi_f2d>
 800166a:	4604      	mov	r4, r0
 800166c:	460d      	mov	r5, r1
 800166e:	4b42      	ldr	r3, [pc, #264]	; (8001778 <sent_position+0x194>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff88 	bl	8000588 <__aeabi_f2d>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	ec43 2b10 	vmov	d0, r2, r3
 8001680:	f00a fc9a 	bl	800bfb8 <sin>
 8001684:	ec53 2b10 	vmov	r2, r3, d0
 8001688:	4620      	mov	r0, r4
 800168a:	4629      	mov	r1, r5
 800168c:	f7fe ffd4 	bl	8000638 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	ec43 2b17 	vmov	d7, r2, r3
 8001698:	eeb0 0a47 	vmov.f32	s0, s14
 800169c:	eef0 0a67 	vmov.f32	s1, s15
 80016a0:	f00a fc42 	bl	800bf28 <round>
 80016a4:	ec53 2b10 	vmov	r2, r3, d0
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f7ff fa74 	bl	8000b98 <__aeabi_d2iz>
 80016b0:	4603      	mov	r3, r0
 80016b2:	81bb      	strh	r3, [r7, #12]
	x2=round(current_coordinate[0]);	//手先座標系から機械座標系への変換
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe ff66 	bl	8000588 <__aeabi_f2d>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	ec43 2b10 	vmov	d0, r2, r3
 80016c4:	f00a fc30 	bl	800bf28 <round>
 80016c8:	ec53 2b10 	vmov	r2, r3, d0
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff fa62 	bl	8000b98 <__aeabi_d2iz>
 80016d4:	4603      	mov	r3, r0
 80016d6:	817b      	strh	r3, [r7, #10]
	y2=round(current_coordinate[1]);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe ff54 	bl	8000588 <__aeabi_f2d>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	ec43 2b10 	vmov	d0, r2, r3
 80016e8:	f00a fc1e 	bl	800bf28 <round>
 80016ec:	ec53 2b10 	vmov	r2, r3, d0
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fa50 	bl	8000b98 <__aeabi_d2iz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	813b      	strh	r3, [r7, #8]
	TxData[0]=0xAA;
 80016fc:	4b21      	ldr	r3, [pc, #132]	; (8001784 <sent_position+0x1a0>)
 80016fe:	22aa      	movs	r2, #170	; 0xaa
 8001700:	701a      	strb	r2, [r3, #0]
	TxData[1]=x1&0xFF;
 8001702:	89fb      	ldrh	r3, [r7, #14]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <sent_position+0x1a0>)
 8001708:	705a      	strb	r2, [r3, #1]
	TxData[2]=(x1>>8)&0xFF;
 800170a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800170e:	121b      	asrs	r3, r3, #8
 8001710:	b21b      	sxth	r3, r3
 8001712:	b2da      	uxtb	r2, r3
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <sent_position+0x1a0>)
 8001716:	709a      	strb	r2, [r3, #2]
	TxData[3]=y1&0xFF;
 8001718:	89bb      	ldrh	r3, [r7, #12]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <sent_position+0x1a0>)
 800171e:	70da      	strb	r2, [r3, #3]
	TxData[4]=(y1>>8)&0xFF;
 8001720:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001724:	121b      	asrs	r3, r3, #8
 8001726:	b21b      	sxth	r3, r3
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <sent_position+0x1a0>)
 800172c:	711a      	strb	r2, [r3, #4]
	TxData[5]=x2&0xFF;
 800172e:	897b      	ldrh	r3, [r7, #10]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <sent_position+0x1a0>)
 8001734:	715a      	strb	r2, [r3, #5]
	TxData[6]=(x2>>8)&0xFF;
 8001736:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800173a:	121b      	asrs	r3, r3, #8
 800173c:	b21b      	sxth	r3, r3
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4b10      	ldr	r3, [pc, #64]	; (8001784 <sent_position+0x1a0>)
 8001742:	719a      	strb	r2, [r3, #6]
	TxData[7]=y2&0xFF;
 8001744:	893b      	ldrh	r3, [r7, #8]
 8001746:	b2da      	uxtb	r2, r3
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <sent_position+0x1a0>)
 800174a:	71da      	strb	r2, [r3, #7]
	TxData[8]=(y2>>8)&0xFF;
 800174c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001750:	121b      	asrs	r3, r3, #8
 8001752:	b21b      	sxth	r3, r3
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <sent_position+0x1a0>)
 8001758:	721a      	strb	r2, [r3, #8]
	TxData[19]=0xAA;
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <sent_position+0x1a0>)
 800175c:	22aa      	movs	r2, #170	; 0xaa
 800175e:	74da      	strb	r2, [r3, #19]
	HAL_UART_Transmit(&huart2,TxData,sizeof(TxData),100);
 8001760:	2364      	movs	r3, #100	; 0x64
 8001762:	2214      	movs	r2, #20
 8001764:	4907      	ldr	r1, [pc, #28]	; (8001784 <sent_position+0x1a0>)
 8001766:	4808      	ldr	r0, [pc, #32]	; (8001788 <sent_position+0x1a4>)
 8001768:	f006 f86e 	bl	8007848 <HAL_UART_Transmit>

	RMDZero();	//RMDを正面に向ける
 800176c:	f7ff fec4 	bl	80014f8 <RMDZero>
}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bdb0      	pop	{r4, r5, r7, pc}
 8001778:	20000434 	.word	0x20000434
 800177c:	20000438 	.word	0x20000438
 8001780:	20000000 	.word	0x20000000
 8001784:	20000358 	.word	0x20000358
 8001788:	200002b8 	.word	0x200002b8
 800178c:	00000000 	.word	0x00000000

08001790 <BLDC_MotorRotate>:

void BLDC_MotorRotate(){
 8001790:	b580      	push	{r7, lr}
 8001792:	b094      	sub	sp, #80	; 0x50
 8001794:	af00      	add	r7, sp, #0
	float count_rad=0.05;
 8001796:	4bba      	ldr	r3, [pc, #744]	; (8001a80 <BLDC_MotorRotate+0x2f0>)
 8001798:	623b      	str	r3, [r7, #32]
	float set_Kp=40.0;
 800179a:	4bba      	ldr	r3, [pc, #744]	; (8001a84 <BLDC_MotorRotate+0x2f4>)
 800179c:	61fb      	str	r3, [r7, #28]
	float setMax_kp=200.0;
 800179e:	4bba      	ldr	r3, [pc, #744]	; (8001a88 <BLDC_MotorRotate+0x2f8>)
 80017a0:	61bb      	str	r3, [r7, #24]
	uint8_t count_end=0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint32_t canid_select_far;
	uint32_t canid_select_near;
	float far_dis_dir=0;
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	643b      	str	r3, [r7, #64]	; 0x40
	float near_dis_dir=0;
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	float running_pos[2];
	float far_dis;
	float near_dis;
	float i=0.0;
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	633b      	str	r3, [r7, #48]	; 0x30
	float m2_startpos;
	float m1_target_pos;
	float m2_target_pos;
	float far_getpos;
	float near_getpos;
	canid=0x01;
 80017ba:	4bb4      	ldr	r3, [pc, #720]	; (8001a8c <BLDC_MotorRotate+0x2fc>)
 80017bc:	2201      	movs	r2, #1
 80017be:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 3.0, 0.0);	//現在の場所の所得
 80017c0:	ed9f 2ab3 	vldr	s4, [pc, #716]	; 8001a90 <BLDC_MotorRotate+0x300>
 80017c4:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 80017c8:	ed9f 1ab1 	vldr	s2, [pc, #708]	; 8001a90 <BLDC_MotorRotate+0x300>
 80017cc:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8001a90 <BLDC_MotorRotate+0x300>
 80017d0:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8001a90 <BLDC_MotorRotate+0x300>
 80017d4:	f7ff fc52 	bl	800107c <pack_cmd>
	BLDC_CANTx();
 80017d8:	f7ff fd42 	bl	8001260 <BLDC_CANTx>
	unpack_reply();
 80017dc:	f7ff fd98 	bl	8001310 <unpack_reply>
	m1_startpos=p_getdata;
 80017e0:	4bac      	ldr	r3, [pc, #688]	; (8001a94 <BLDC_MotorRotate+0x304>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	617b      	str	r3, [r7, #20]
	printf("m1_startpos=%lf\r\n",p_getdata);
 80017e6:	4bab      	ldr	r3, [pc, #684]	; (8001a94 <BLDC_MotorRotate+0x304>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fecc 	bl	8000588 <__aeabi_f2d>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	48a8      	ldr	r0, [pc, #672]	; (8001a98 <BLDC_MotorRotate+0x308>)
 80017f6:	f008 f93b 	bl	8009a70 <iprintf>
	m1_target_pos=-t_position[0];
 80017fa:	4ba8      	ldr	r3, [pc, #672]	; (8001a9c <BLDC_MotorRotate+0x30c>)
 80017fc:	edd3 7a00 	vldr	s15, [r3]
 8001800:	eef1 7a67 	vneg.f32	s15, s15
 8001804:	edc7 7a04 	vstr	s15, [r7, #16]
	running_pos[0]=fabsf(m1_target_pos-m1_startpos);	//目標地点ー現在の地点＝移動距離
 8001808:	ed97 7a04 	vldr	s14, [r7, #16]
 800180c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001810:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001814:	eef0 7ae7 	vabs.f32	s15, s15
 8001818:	edc7 7a00 	vstr	s15, [r7]
	printf("running_posm1=%lf\r\n",running_pos[0]);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe feb2 	bl	8000588 <__aeabi_f2d>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	489d      	ldr	r0, [pc, #628]	; (8001aa0 <BLDC_MotorRotate+0x310>)
 800182a:	f008 f921 	bl	8009a70 <iprintf>
	canid=0x02;
 800182e:	4b97      	ldr	r3, [pc, #604]	; (8001a8c <BLDC_MotorRotate+0x2fc>)
 8001830:	2202      	movs	r2, #2
 8001832:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 4.0, 0.0);	//現在の場所の所得
 8001834:	ed9f 2a96 	vldr	s4, [pc, #600]	; 8001a90 <BLDC_MotorRotate+0x300>
 8001838:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 800183c:	ed9f 1a94 	vldr	s2, [pc, #592]	; 8001a90 <BLDC_MotorRotate+0x300>
 8001840:	eddf 0a93 	vldr	s1, [pc, #588]	; 8001a90 <BLDC_MotorRotate+0x300>
 8001844:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8001a90 <BLDC_MotorRotate+0x300>
 8001848:	f7ff fc18 	bl	800107c <pack_cmd>
	BLDC_CANTx();
 800184c:	f7ff fd08 	bl	8001260 <BLDC_CANTx>
	unpack_reply();
 8001850:	f7ff fd5e 	bl	8001310 <unpack_reply>
	m2_target_pos=(-t_position[1]+M_PI);
 8001854:	4b91      	ldr	r3, [pc, #580]	; (8001a9c <BLDC_MotorRotate+0x30c>)
 8001856:	edd3 7a01 	vldr	s15, [r3, #4]
 800185a:	eef1 7a67 	vneg.f32	s15, s15
 800185e:	ee17 3a90 	vmov	r3, s15
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe90 	bl	8000588 <__aeabi_f2d>
 8001868:	a383      	add	r3, pc, #524	; (adr r3, 8001a78 <BLDC_MotorRotate+0x2e8>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	f7fe fd2d 	bl	80002cc <__adddf3>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff f9b5 	bl	8000be8 <__aeabi_d2f>
 800187e:	4603      	mov	r3, r0
 8001880:	60fb      	str	r3, [r7, #12]
	m2_startpos=p_getdata;
 8001882:	4b84      	ldr	r3, [pc, #528]	; (8001a94 <BLDC_MotorRotate+0x304>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	60bb      	str	r3, [r7, #8]
	printf("m2_startpos=%lf\r\n",p_getdata);
 8001888:	4b82      	ldr	r3, [pc, #520]	; (8001a94 <BLDC_MotorRotate+0x304>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe7b 	bl	8000588 <__aeabi_f2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4883      	ldr	r0, [pc, #524]	; (8001aa4 <BLDC_MotorRotate+0x314>)
 8001898:	f008 f8ea 	bl	8009a70 <iprintf>
	running_pos[1]=fabsf(m2_target_pos-m2_startpos);
 800189c:	ed97 7a03 	vldr	s14, [r7, #12]
 80018a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80018a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a8:	eef0 7ae7 	vabs.f32	s15, s15
 80018ac:	edc7 7a01 	vstr	s15, [r7, #4]
	printf("running_posm2=%lf\r\n",running_pos[1]);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fe68 	bl	8000588 <__aeabi_f2d>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	487a      	ldr	r0, [pc, #488]	; (8001aa8 <BLDC_MotorRotate+0x318>)
 80018be:	f008 f8d7 	bl	8009a70 <iprintf>

	if(running_pos[0]>running_pos[1]){
 80018c2:	ed97 7a00 	vldr	s14, [r7]
 80018c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80018ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d2:	dd2c      	ble.n	800192e <BLDC_MotorRotate+0x19e>
		far_dis=running_pos[0];
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	63bb      	str	r3, [r7, #56]	; 0x38
		near_dis=running_pos[1];
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	637b      	str	r3, [r7, #52]	; 0x34
		canid_select_far=0x01;
 80018dc:	2301      	movs	r3, #1
 80018de:	64bb      	str	r3, [r7, #72]	; 0x48
		canid_select_near=0x02;
 80018e0:	2302      	movs	r3, #2
 80018e2:	647b      	str	r3, [r7, #68]	; 0x44
		far_getpos=m1_startpos;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		near_getpos=m2_startpos;
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
		far_dis_dir=((m1_target_pos-m1_startpos)>=0)?1:-1;
 80018ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80018f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80018f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001900:	db02      	blt.n	8001908 <BLDC_MotorRotate+0x178>
 8001902:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001906:	e000      	b.n	800190a <BLDC_MotorRotate+0x17a>
 8001908:	4b68      	ldr	r3, [pc, #416]	; (8001aac <BLDC_MotorRotate+0x31c>)
 800190a:	643b      	str	r3, [r7, #64]	; 0x40
		near_dis_dir=((m2_target_pos-(m2_startpos))>=0)?1:-1;
 800190c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001910:	edd7 7a02 	vldr	s15, [r7, #8]
 8001914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001918:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800191c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001920:	db02      	blt.n	8001928 <BLDC_MotorRotate+0x198>
 8001922:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001926:	e000      	b.n	800192a <BLDC_MotorRotate+0x19a>
 8001928:	4b60      	ldr	r3, [pc, #384]	; (8001aac <BLDC_MotorRotate+0x31c>)
 800192a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800192c:	e02b      	b.n	8001986 <BLDC_MotorRotate+0x1f6>

	}else{
		far_dis=running_pos[1];
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	63bb      	str	r3, [r7, #56]	; 0x38
		near_dis=running_pos[0];
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	637b      	str	r3, [r7, #52]	; 0x34
		canid_select_far=0x02;
 8001936:	2302      	movs	r3, #2
 8001938:	64bb      	str	r3, [r7, #72]	; 0x48
		canid_select_near=0x01;
 800193a:	2301      	movs	r3, #1
 800193c:	647b      	str	r3, [r7, #68]	; 0x44
		far_getpos=m2_startpos;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
		near_getpos=m1_startpos;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
		far_dis_dir=((m2_target_pos-m2_startpos)>=0)?1:-1;
 8001946:	ed97 7a03 	vldr	s14, [r7, #12]
 800194a:	edd7 7a02 	vldr	s15, [r7, #8]
 800194e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001952:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195a:	db02      	blt.n	8001962 <BLDC_MotorRotate+0x1d2>
 800195c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001960:	e000      	b.n	8001964 <BLDC_MotorRotate+0x1d4>
 8001962:	4b52      	ldr	r3, [pc, #328]	; (8001aac <BLDC_MotorRotate+0x31c>)
 8001964:	643b      	str	r3, [r7, #64]	; 0x40
		near_dis_dir=((m1_target_pos-m1_startpos)>=0)?1:-1;
 8001966:	ed97 7a04 	vldr	s14, [r7, #16]
 800196a:	edd7 7a05 	vldr	s15, [r7, #20]
 800196e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001972:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197a:	db02      	blt.n	8001982 <BLDC_MotorRotate+0x1f2>
 800197c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001980:	e000      	b.n	8001984 <BLDC_MotorRotate+0x1f4>
 8001982:	4b4a      	ldr	r3, [pc, #296]	; (8001aac <BLDC_MotorRotate+0x31c>)
 8001984:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (far_dis>count_rad){
 8001986:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800198a:	edd7 7a08 	vldr	s15, [r7, #32]
 800198e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001996:	dd6b      	ble.n	8001a70 <BLDC_MotorRotate+0x2e0>
		while(!count_end&&!motion_stop_flag){
 8001998:	e062      	b.n	8001a60 <BLDC_MotorRotate+0x2d0>
			i+=(far_dis_dir*count_rad);
 800199a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800199e:	edd7 7a08 	vldr	s15, [r7, #32]
 80019a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80019aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ae:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			if(fabsf(i)<far_dis){
 80019b2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019b6:	eef0 7ae7 	vabs.f32	s15, s15
 80019ba:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80019be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	dd48      	ble.n	8001a5a <BLDC_MotorRotate+0x2ca>
				canid=canid_select_far;
 80019c8:	4a30      	ldr	r2, [pc, #192]	; (8001a8c <BLDC_MotorRotate+0x2fc>)
 80019ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019cc:	6013      	str	r3, [r2, #0]
				pack_cmd(far_getpos+i, 0.0, set_Kp, 2.0, 0.0);	//現在の場所の所得
 80019ce:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80019d2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019da:	ed9f 2a2d 	vldr	s4, [pc, #180]	; 8001a90 <BLDC_MotorRotate+0x300>
 80019de:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 80019e2:	ed97 1a07 	vldr	s2, [r7, #28]
 80019e6:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8001a90 <BLDC_MotorRotate+0x300>
 80019ea:	eeb0 0a67 	vmov.f32	s0, s15
 80019ee:	f7ff fb45 	bl	800107c <pack_cmd>
				BLDC_CANTx();
 80019f2:	f7ff fc35 	bl	8001260 <BLDC_CANTx>
				unpack_reply();
 80019f6:	f7ff fc8b 	bl	8001310 <unpack_reply>
				HAL_Delay(20);
 80019fa:	2014      	movs	r0, #20
 80019fc:	f002 fe6c 	bl	80046d8 <HAL_Delay>
				canid=canid_select_near;
 8001a00:	4a22      	ldr	r2, [pc, #136]	; (8001a8c <BLDC_MotorRotate+0x2fc>)
 8001a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a04:	6013      	str	r3, [r2, #0]
				pack_cmd(near_getpos+fabsf(i)*(near_dis/far_dis)*near_dis_dir, 0.0, set_Kp, 2.0, 0.0);	//現在の場所の所得
 8001a06:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a0a:	eeb0 7ae7 	vabs.f32	s14, s15
 8001a0e:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8001a12:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001a16:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a1e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001a22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a26:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a2e:	ed9f 2a18 	vldr	s4, [pc, #96]	; 8001a90 <BLDC_MotorRotate+0x300>
 8001a32:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8001a36:	ed97 1a07 	vldr	s2, [r7, #28]
 8001a3a:	eddf 0a15 	vldr	s1, [pc, #84]	; 8001a90 <BLDC_MotorRotate+0x300>
 8001a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a42:	f7ff fb1b 	bl	800107c <pack_cmd>
				BLDC_CANTx();
 8001a46:	f7ff fc0b 	bl	8001260 <BLDC_CANTx>
				unpack_reply();
 8001a4a:	f7ff fc61 	bl	8001310 <unpack_reply>
				sent_position();
 8001a4e:	f7ff fdc9 	bl	80015e4 <sent_position>
				HAL_Delay(20);
 8001a52:	2014      	movs	r0, #20
 8001a54:	f002 fe40 	bl	80046d8 <HAL_Delay>
 8001a58:	e002      	b.n	8001a60 <BLDC_MotorRotate+0x2d0>
			}
			else{
				count_end=1;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		while(!count_end&&!motion_stop_flag){
 8001a60:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d103      	bne.n	8001a70 <BLDC_MotorRotate+0x2e0>
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <BLDC_MotorRotate+0x320>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d094      	beq.n	800199a <BLDC_MotorRotate+0x20a>
			}
		}
	}
	for(int i=1;i<=50;i++){
 8001a70:	2301      	movs	r3, #1
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
 8001a74:	e082      	b.n	8001b7c <BLDC_MotorRotate+0x3ec>
 8001a76:	bf00      	nop
 8001a78:	54442d18 	.word	0x54442d18
 8001a7c:	400921fb 	.word	0x400921fb
 8001a80:	3d4ccccd 	.word	0x3d4ccccd
 8001a84:	42200000 	.word	0x42200000
 8001a88:	43480000 	.word	0x43480000
 8001a8c:	20000424 	.word	0x20000424
 8001a90:	00000000 	.word	0x00000000
 8001a94:	20000430 	.word	0x20000430
 8001a98:	0800dbf0 	.word	0x0800dbf0
 8001a9c:	2000043c 	.word	0x2000043c
 8001aa0:	0800dc04 	.word	0x0800dc04
 8001aa4:	0800dc18 	.word	0x0800dc18
 8001aa8:	0800dc2c 	.word	0x0800dc2c
 8001aac:	bf800000 	.word	0xbf800000
 8001ab0:	2000042d 	.word	0x2000042d
		if(set_Kp+i*10<=setMax_kp&&!motion_stop_flag){
 8001ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ace:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ad2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ada:	db4a      	blt.n	8001b72 <BLDC_MotorRotate+0x3e2>
 8001adc:	4b2d      	ldr	r3, [pc, #180]	; (8001b94 <BLDC_MotorRotate+0x404>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d146      	bne.n	8001b72 <BLDC_MotorRotate+0x3e2>
			canid=0x01;
 8001ae4:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <BLDC_MotorRotate+0x408>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]
			pack_cmd(m1_target_pos, 0.0, set_Kp+i*10, 3.0, 0.0);	//現在の場所の所得
 8001aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001afc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b04:	ed9f 2a25 	vldr	s4, [pc, #148]	; 8001b9c <BLDC_MotorRotate+0x40c>
 8001b08:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8001b0c:	eeb0 1a67 	vmov.f32	s2, s15
 8001b10:	eddf 0a22 	vldr	s1, [pc, #136]	; 8001b9c <BLDC_MotorRotate+0x40c>
 8001b14:	ed97 0a04 	vldr	s0, [r7, #16]
 8001b18:	f7ff fab0 	bl	800107c <pack_cmd>
			BLDC_CANTx();
 8001b1c:	f7ff fba0 	bl	8001260 <BLDC_CANTx>
			unpack_reply();
 8001b20:	f7ff fbf6 	bl	8001310 <unpack_reply>
			HAL_Delay(20);
 8001b24:	2014      	movs	r0, #20
 8001b26:	f002 fdd7 	bl	80046d8 <HAL_Delay>
			canid=0x02;
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <BLDC_MotorRotate+0x408>)
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	601a      	str	r2, [r3, #0]
			pack_cmd(m2_target_pos, 0.0, set_Kp+i*10, 3.0, 0.0);	//現在の場所の所得
 8001b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	ee07 3a90 	vmov	s15, r3
 8001b3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b42:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4a:	ed9f 2a14 	vldr	s4, [pc, #80]	; 8001b9c <BLDC_MotorRotate+0x40c>
 8001b4e:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8001b52:	eeb0 1a67 	vmov.f32	s2, s15
 8001b56:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001b9c <BLDC_MotorRotate+0x40c>
 8001b5a:	ed97 0a03 	vldr	s0, [r7, #12]
 8001b5e:	f7ff fa8d 	bl	800107c <pack_cmd>
			BLDC_CANTx();
 8001b62:	f7ff fb7d 	bl	8001260 <BLDC_CANTx>
			unpack_reply();
 8001b66:	f7ff fbd3 	bl	8001310 <unpack_reply>
			HAL_Delay(20);
 8001b6a:	2014      	movs	r0, #20
 8001b6c:	f002 fdb4 	bl	80046d8 <HAL_Delay>
 8001b70:	e001      	b.n	8001b76 <BLDC_MotorRotate+0x3e6>
		}else{
			i=50;
 8001b72:	2332      	movs	r3, #50	; 0x32
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=1;i<=50;i++){
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	3301      	adds	r3, #1
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	2b32      	cmp	r3, #50	; 0x32
 8001b80:	dd98      	ble.n	8001ab4 <BLDC_MotorRotate+0x324>
		}
	}
	sent_position();
 8001b82:	f7ff fd2f 	bl	80015e4 <sent_position>
	motion_stop_flag=0;
 8001b86:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <BLDC_MotorRotate+0x404>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	3750      	adds	r7, #80	; 0x50
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	2000042d 	.word	0x2000042d
 8001b98:	20000424 	.word	0x20000424
 8001b9c:	00000000 	.word	0x00000000

08001ba0 <BLDC_M1Rotate>:
void BLDC_M1Rotate(){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08c      	sub	sp, #48	; 0x30
 8001ba4:	af00      	add	r7, sp, #0
	float m1_startpos;
	float m1_target_pos;
	float i=0.0;
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
	float m1_dis;
	float set_Kp=40.0;
 8001bac:	4b81      	ldr	r3, [pc, #516]	; (8001db4 <BLDC_M1Rotate+0x214>)
 8001bae:	623b      	str	r3, [r7, #32]
	float setMax_kp=200.0;
 8001bb0:	4b81      	ldr	r3, [pc, #516]	; (8001db8 <BLDC_M1Rotate+0x218>)
 8001bb2:	61fb      	str	r3, [r7, #28]
	float count_rad=0.05;
 8001bb4:	4b81      	ldr	r3, [pc, #516]	; (8001dbc <BLDC_M1Rotate+0x21c>)
 8001bb6:	61bb      	str	r3, [r7, #24]
	int m1_dir;
	int count=10;
 8001bb8:	230a      	movs	r3, #10
 8001bba:	617b      	str	r3, [r7, #20]
	uint8_t count_end=0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	canid=0x02;
 8001bc2:	4b7f      	ldr	r3, [pc, #508]	; (8001dc0 <BLDC_M1Rotate+0x220>)
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 4.0, 0.0);	//現在の場所の所得
 8001bc8:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 8001dc4 <BLDC_M1Rotate+0x224>
 8001bcc:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8001bd0:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 8001dc4 <BLDC_M1Rotate+0x224>
 8001bd4:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8001dc4 <BLDC_M1Rotate+0x224>
 8001bd8:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8001dc4 <BLDC_M1Rotate+0x224>
 8001bdc:	f7ff fa4e 	bl	800107c <pack_cmd>
	BLDC_CANTx();
 8001be0:	f7ff fb3e 	bl	8001260 <BLDC_CANTx>
	unpack_reply();
 8001be4:	f7ff fb94 	bl	8001310 <unpack_reply>
	pack_cmd(p_getdata, 0.0, 200.0, 4.0, 0.0);	//現在の場所の所得
 8001be8:	4b77      	ldr	r3, [pc, #476]	; (8001dc8 <BLDC_M1Rotate+0x228>)
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	ed9f 2a75 	vldr	s4, [pc, #468]	; 8001dc4 <BLDC_M1Rotate+0x224>
 8001bf2:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8001bf6:	ed9f 1a75 	vldr	s2, [pc, #468]	; 8001dcc <BLDC_M1Rotate+0x22c>
 8001bfa:	eddf 0a72 	vldr	s1, [pc, #456]	; 8001dc4 <BLDC_M1Rotate+0x224>
 8001bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8001c02:	f7ff fa3b 	bl	800107c <pack_cmd>
	BLDC_CANTx();
 8001c06:	f7ff fb2b 	bl	8001260 <BLDC_CANTx>
	unpack_reply();
 8001c0a:	f7ff fb81 	bl	8001310 <unpack_reply>
	canid=0x01;
 8001c0e:	4b6c      	ldr	r3, [pc, #432]	; (8001dc0 <BLDC_M1Rotate+0x220>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 4.0, 0.0);	//現在の場所の所得
 8001c14:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 8001dc4 <BLDC_M1Rotate+0x224>
 8001c18:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8001c1c:	ed9f 1a69 	vldr	s2, [pc, #420]	; 8001dc4 <BLDC_M1Rotate+0x224>
 8001c20:	eddf 0a68 	vldr	s1, [pc, #416]	; 8001dc4 <BLDC_M1Rotate+0x224>
 8001c24:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8001dc4 <BLDC_M1Rotate+0x224>
 8001c28:	f7ff fa28 	bl	800107c <pack_cmd>
	BLDC_CANTx();
 8001c2c:	f7ff fb18 	bl	8001260 <BLDC_CANTx>
	unpack_reply();
 8001c30:	f7ff fb6e 	bl	8001310 <unpack_reply>

	m1_startpos=p_getdata;
 8001c34:	4b64      	ldr	r3, [pc, #400]	; (8001dc8 <BLDC_M1Rotate+0x228>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	613b      	str	r3, [r7, #16]
	m1_target_pos=-t_position[0];
 8001c3a:	4b65      	ldr	r3, [pc, #404]	; (8001dd0 <BLDC_M1Rotate+0x230>)
 8001c3c:	edd3 7a00 	vldr	s15, [r3]
 8001c40:	eef1 7a67 	vneg.f32	s15, s15
 8001c44:	edc7 7a03 	vstr	s15, [r7, #12]
	m1_dis=fabsf(m1_target_pos-m1_startpos);	//目標地点ー現在の地点＝移動距離
 8001c48:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c54:	eef0 7ae7 	vabs.f32	s15, s15
 8001c58:	edc7 7a02 	vstr	s15, [r7, #8]
	m1_dir=((m1_target_pos-m1_startpos)>=0)?1:-1;
 8001c5c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c60:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c70:	db01      	blt.n	8001c76 <BLDC_M1Rotate+0xd6>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e001      	b.n	8001c7a <BLDC_M1Rotate+0xda>
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c7a:	607b      	str	r3, [r7, #4]
	i=count_rad;
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(count_rad<m1_dis){
 8001c80:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c84:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c90:	d542      	bpl.n	8001d18 <BLDC_M1Rotate+0x178>
		while(!count_end&&!motion_stop_flag){
 8001c92:	e039      	b.n	8001d08 <BLDC_M1Rotate+0x168>
			i+=(m1_dir*count_rad);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	ee07 3a90 	vmov	s15, r3
 8001c9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			if(fabsf(i)<m1_dis){
 8001cb2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001cb6:	eef0 7ae7 	vabs.f32	s15, s15
 8001cba:	ed97 7a02 	vldr	s14, [r7, #8]
 8001cbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc6:	dd1c      	ble.n	8001d02 <BLDC_M1Rotate+0x162>
				canid=0x01;
 8001cc8:	4b3d      	ldr	r3, [pc, #244]	; (8001dc0 <BLDC_M1Rotate+0x220>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
				pack_cmd(m1_startpos+i, 0.0, set_Kp, 2.0, 0.0);	//現在の場所の所得
 8001cce:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cd2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cda:	ed9f 2a3a 	vldr	s4, [pc, #232]	; 8001dc4 <BLDC_M1Rotate+0x224>
 8001cde:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8001ce2:	ed97 1a08 	vldr	s2, [r7, #32]
 8001ce6:	eddf 0a37 	vldr	s1, [pc, #220]	; 8001dc4 <BLDC_M1Rotate+0x224>
 8001cea:	eeb0 0a67 	vmov.f32	s0, s15
 8001cee:	f7ff f9c5 	bl	800107c <pack_cmd>
				BLDC_CANTx();
 8001cf2:	f7ff fab5 	bl	8001260 <BLDC_CANTx>
				sent_position();
 8001cf6:	f7ff fc75 	bl	80015e4 <sent_position>
				HAL_Delay(40);
 8001cfa:	2028      	movs	r0, #40	; 0x28
 8001cfc:	f002 fcec 	bl	80046d8 <HAL_Delay>
 8001d00:	e002      	b.n	8001d08 <BLDC_M1Rotate+0x168>
			}else{
				count_end=1;
 8001d02:	2301      	movs	r3, #1
 8001d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		while(!count_end&&!motion_stop_flag){
 8001d08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d103      	bne.n	8001d18 <BLDC_M1Rotate+0x178>
 8001d10:	4b30      	ldr	r3, [pc, #192]	; (8001dd4 <BLDC_M1Rotate+0x234>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0bd      	beq.n	8001c94 <BLDC_M1Rotate+0xf4>
			}
		}
	}
	for(int i=1;i<=50;i++){
 8001d18:	2301      	movs	r3, #1
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1c:	e03e      	b.n	8001d9c <BLDC_M1Rotate+0x1fc>
			if(set_Kp+i*10<=setMax_kp&&!motion_stop_flag){
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	ee07 3a90 	vmov	s15, r3
 8001d2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d30:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d38:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d44:	db25      	blt.n	8001d92 <BLDC_M1Rotate+0x1f2>
 8001d46:	4b23      	ldr	r3, [pc, #140]	; (8001dd4 <BLDC_M1Rotate+0x234>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d121      	bne.n	8001d92 <BLDC_M1Rotate+0x1f2>
				canid=0x01;
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <BLDC_M1Rotate+0x220>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	601a      	str	r2, [r3, #0]
				pack_cmd(m1_target_pos, 0.0, set_Kp+i*10, 3.0, 0.0);	//現在の場所の所得
 8001d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d66:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d6e:	ed9f 2a15 	vldr	s4, [pc, #84]	; 8001dc4 <BLDC_M1Rotate+0x224>
 8001d72:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8001d76:	eeb0 1a67 	vmov.f32	s2, s15
 8001d7a:	eddf 0a12 	vldr	s1, [pc, #72]	; 8001dc4 <BLDC_M1Rotate+0x224>
 8001d7e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001d82:	f7ff f97b 	bl	800107c <pack_cmd>
				BLDC_CANTx();
 8001d86:	f7ff fa6b 	bl	8001260 <BLDC_CANTx>
				HAL_Delay(20);
 8001d8a:	2014      	movs	r0, #20
 8001d8c:	f002 fca4 	bl	80046d8 <HAL_Delay>
 8001d90:	e001      	b.n	8001d96 <BLDC_M1Rotate+0x1f6>
			}else{
				i=50;
 8001d92:	2332      	movs	r3, #50	; 0x32
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=1;i<=50;i++){
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	3301      	adds	r3, #1
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	2b32      	cmp	r3, #50	; 0x32
 8001da0:	ddbd      	ble.n	8001d1e <BLDC_M1Rotate+0x17e>
			}
		}
	sent_position();
 8001da2:	f7ff fc1f 	bl	80015e4 <sent_position>
	motion_stop_flag=0;
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <BLDC_M1Rotate+0x234>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
}
 8001dac:	bf00      	nop
 8001dae:	3730      	adds	r7, #48	; 0x30
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	42200000 	.word	0x42200000
 8001db8:	43480000 	.word	0x43480000
 8001dbc:	3d4ccccd 	.word	0x3d4ccccd
 8001dc0:	20000424 	.word	0x20000424
 8001dc4:	00000000 	.word	0x00000000
 8001dc8:	20000430 	.word	0x20000430
 8001dcc:	43480000 	.word	0x43480000
 8001dd0:	2000043c 	.word	0x2000043c
 8001dd4:	2000042d 	.word	0x2000042d

08001dd8 <BLDC_M2Rotate>:
void BLDC_M2Rotate(){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	; 0x28
 8001ddc:	af00      	add	r7, sp, #0
	float m2_startpos;
	float m2_target_pos;
	float i=0.0;
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
	float m2_dis;
	float set_Kp=40.0;
 8001de4:	4b8e      	ldr	r3, [pc, #568]	; (8002020 <BLDC_M2Rotate+0x248>)
 8001de6:	61bb      	str	r3, [r7, #24]
	float setMax_kp=200.0;
 8001de8:	4b8e      	ldr	r3, [pc, #568]	; (8002024 <BLDC_M2Rotate+0x24c>)
 8001dea:	617b      	str	r3, [r7, #20]
	float count_rad=0.05;
 8001dec:	4b8e      	ldr	r3, [pc, #568]	; (8002028 <BLDC_M2Rotate+0x250>)
 8001dee:	613b      	str	r3, [r7, #16]
	int m2_dir;
	uint8_t count_end=0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	canid=0x01;
 8001df6:	4b8d      	ldr	r3, [pc, #564]	; (800202c <BLDC_M2Rotate+0x254>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 4.0, 0.0);	//現在の場所の所得
 8001dfc:	ed9f 2a8c 	vldr	s4, [pc, #560]	; 8002030 <BLDC_M2Rotate+0x258>
 8001e00:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8001e04:	ed9f 1a8a 	vldr	s2, [pc, #552]	; 8002030 <BLDC_M2Rotate+0x258>
 8001e08:	eddf 0a89 	vldr	s1, [pc, #548]	; 8002030 <BLDC_M2Rotate+0x258>
 8001e0c:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8002030 <BLDC_M2Rotate+0x258>
 8001e10:	f7ff f934 	bl	800107c <pack_cmd>
	BLDC_CANTx();
 8001e14:	f7ff fa24 	bl	8001260 <BLDC_CANTx>
	unpack_reply();
 8001e18:	f7ff fa7a 	bl	8001310 <unpack_reply>
	pack_cmd(p_getdata, 0.0, 200.0, 4.0, 0.0);	//現在の場所の所得
 8001e1c:	4b85      	ldr	r3, [pc, #532]	; (8002034 <BLDC_M2Rotate+0x25c>)
 8001e1e:	edd3 7a00 	vldr	s15, [r3]
 8001e22:	ed9f 2a83 	vldr	s4, [pc, #524]	; 8002030 <BLDC_M2Rotate+0x258>
 8001e26:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8001e2a:	ed9f 1a83 	vldr	s2, [pc, #524]	; 8002038 <BLDC_M2Rotate+0x260>
 8001e2e:	eddf 0a80 	vldr	s1, [pc, #512]	; 8002030 <BLDC_M2Rotate+0x258>
 8001e32:	eeb0 0a67 	vmov.f32	s0, s15
 8001e36:	f7ff f921 	bl	800107c <pack_cmd>
	BLDC_CANTx();
 8001e3a:	f7ff fa11 	bl	8001260 <BLDC_CANTx>
	unpack_reply();
 8001e3e:	f7ff fa67 	bl	8001310 <unpack_reply>
	canid=0x02;
 8001e42:	4b7a      	ldr	r3, [pc, #488]	; (800202c <BLDC_M2Rotate+0x254>)
 8001e44:	2202      	movs	r2, #2
 8001e46:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 4.0, 0.0);	//現在の場所の所得
 8001e48:	ed9f 2a79 	vldr	s4, [pc, #484]	; 8002030 <BLDC_M2Rotate+0x258>
 8001e4c:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8001e50:	ed9f 1a77 	vldr	s2, [pc, #476]	; 8002030 <BLDC_M2Rotate+0x258>
 8001e54:	eddf 0a76 	vldr	s1, [pc, #472]	; 8002030 <BLDC_M2Rotate+0x258>
 8001e58:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8002030 <BLDC_M2Rotate+0x258>
 8001e5c:	f7ff f90e 	bl	800107c <pack_cmd>
	BLDC_CANTx();
 8001e60:	f7ff f9fe 	bl	8001260 <BLDC_CANTx>
	unpack_reply();
 8001e64:	f7ff fa54 	bl	8001310 <unpack_reply>
	m2_startpos=p_getdata;
 8001e68:	4b72      	ldr	r3, [pc, #456]	; (8002034 <BLDC_M2Rotate+0x25c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60fb      	str	r3, [r7, #12]
	m2_target_pos=(-t_position[1]+M_PI);
 8001e6e:	4b73      	ldr	r3, [pc, #460]	; (800203c <BLDC_M2Rotate+0x264>)
 8001e70:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e74:	eef1 7a67 	vneg.f32	s15, s15
 8001e78:	ee17 3a90 	vmov	r3, s15
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb83 	bl	8000588 <__aeabi_f2d>
 8001e82:	a365      	add	r3, pc, #404	; (adr r3, 8002018 <BLDC_M2Rotate+0x240>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	f7fe fa20 	bl	80002cc <__adddf3>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	f7fe fea8 	bl	8000be8 <__aeabi_d2f>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	60bb      	str	r3, [r7, #8]
	m2_dis=fabsf((m2_target_pos-m2_startpos));
 8001e9c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ea0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ea8:	eef0 7ae7 	vabs.f32	s15, s15
 8001eac:	edc7 7a01 	vstr	s15, [r7, #4]
	m2_dir=((m2_target_pos-m2_startpos)>=0)?1:-1;
 8001eb0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001eb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ebc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec4:	db01      	blt.n	8001eca <BLDC_M2Rotate+0xf2>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e001      	b.n	8001ece <BLDC_M2Rotate+0xf6>
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ece:	603b      	str	r3, [r7, #0]

	i=count_rad;
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
	if(count_rad<m2_dis){
 8001ed4:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ed8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001edc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee4:	d546      	bpl.n	8001f74 <BLDC_M2Rotate+0x19c>
		while(!count_end&&!motion_stop_flag){
 8001ee6:	e03d      	b.n	8001f64 <BLDC_M2Rotate+0x18c>
			i+=(m2_dir*count_rad);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	ee07 3a90 	vmov	s15, r3
 8001eee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ef2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f02:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			if(fabsf(i)<m2_dis){
 8001f06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f0a:	eef0 7ae7 	vabs.f32	s15, s15
 8001f0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1a:	dd20      	ble.n	8001f5e <BLDC_M2Rotate+0x186>
				canid=0x02;
 8001f1c:	4b43      	ldr	r3, [pc, #268]	; (800202c <BLDC_M2Rotate+0x254>)
 8001f1e:	2202      	movs	r2, #2
 8001f20:	601a      	str	r2, [r3, #0]
				pack_cmd(m2_startpos+i, 0.0, set_Kp, 2.0, 0.0);	//現在の場所の所得
 8001f22:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f26:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f2e:	ed9f 2a40 	vldr	s4, [pc, #256]	; 8002030 <BLDC_M2Rotate+0x258>
 8001f32:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8001f36:	ed97 1a06 	vldr	s2, [r7, #24]
 8001f3a:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8002030 <BLDC_M2Rotate+0x258>
 8001f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f42:	f7ff f89b 	bl	800107c <pack_cmd>
				BLDC_CANTx();
 8001f46:	f7ff f98b 	bl	8001260 <BLDC_CANTx>
				p_getdata_s2=p_getdata;
 8001f4a:	4b3a      	ldr	r3, [pc, #232]	; (8002034 <BLDC_M2Rotate+0x25c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a3c      	ldr	r2, [pc, #240]	; (8002040 <BLDC_M2Rotate+0x268>)
 8001f50:	6013      	str	r3, [r2, #0]
				sent_position();
 8001f52:	f7ff fb47 	bl	80015e4 <sent_position>
				HAL_Delay(40);
 8001f56:	2028      	movs	r0, #40	; 0x28
 8001f58:	f002 fbbe 	bl	80046d8 <HAL_Delay>
 8001f5c:	e002      	b.n	8001f64 <BLDC_M2Rotate+0x18c>
			}else{
				count_end=1;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		while(!count_end&&!motion_stop_flag){
 8001f64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d103      	bne.n	8001f74 <BLDC_M2Rotate+0x19c>
 8001f6c:	4b35      	ldr	r3, [pc, #212]	; (8002044 <BLDC_M2Rotate+0x26c>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0b9      	beq.n	8001ee8 <BLDC_M2Rotate+0x110>
			}
		}
	}

	for(int i=1;i<=50;i++){
 8001f74:	2301      	movs	r3, #1
 8001f76:	61fb      	str	r3, [r7, #28]
 8001f78:	e03e      	b.n	8001ff8 <BLDC_M2Rotate+0x220>
			if(set_Kp+i*10<=setMax_kp&&!motion_stop_flag){
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f94:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa0:	db25      	blt.n	8001fee <BLDC_M2Rotate+0x216>
 8001fa2:	4b28      	ldr	r3, [pc, #160]	; (8002044 <BLDC_M2Rotate+0x26c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d121      	bne.n	8001fee <BLDC_M2Rotate+0x216>
				canid=0x02;
 8001faa:	4b20      	ldr	r3, [pc, #128]	; (800202c <BLDC_M2Rotate+0x254>)
 8001fac:	2202      	movs	r2, #2
 8001fae:	601a      	str	r2, [r3, #0]
				pack_cmd(m2_target_pos, 0.0, set_Kp+i*10, 3.0, 0.0);	//現在の場所の所得
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	ee07 3a90 	vmov	s15, r3
 8001fbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fca:	ed9f 2a19 	vldr	s4, [pc, #100]	; 8002030 <BLDC_M2Rotate+0x258>
 8001fce:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8001fd2:	eeb0 1a67 	vmov.f32	s2, s15
 8001fd6:	eddf 0a16 	vldr	s1, [pc, #88]	; 8002030 <BLDC_M2Rotate+0x258>
 8001fda:	ed97 0a02 	vldr	s0, [r7, #8]
 8001fde:	f7ff f84d 	bl	800107c <pack_cmd>
				BLDC_CANTx();
 8001fe2:	f7ff f93d 	bl	8001260 <BLDC_CANTx>
				HAL_Delay(20);
 8001fe6:	2014      	movs	r0, #20
 8001fe8:	f002 fb76 	bl	80046d8 <HAL_Delay>
 8001fec:	e001      	b.n	8001ff2 <BLDC_M2Rotate+0x21a>
			}else{
				i=50;
 8001fee:	2332      	movs	r3, #50	; 0x32
 8001ff0:	61fb      	str	r3, [r7, #28]
	for(int i=1;i<=50;i++){
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	2b32      	cmp	r3, #50	; 0x32
 8001ffc:	ddbd      	ble.n	8001f7a <BLDC_M2Rotate+0x1a2>
			}
		}
	sent_position();
 8001ffe:	f7ff faf1 	bl	80015e4 <sent_position>
	count_end=0;
 8002002:	2300      	movs	r3, #0
 8002004:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	motion_stop_flag=0;
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <BLDC_M2Rotate+0x26c>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
}
 800200e:	bf00      	nop
 8002010:	3728      	adds	r7, #40	; 0x28
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	54442d18 	.word	0x54442d18
 800201c:	400921fb 	.word	0x400921fb
 8002020:	42200000 	.word	0x42200000
 8002024:	43480000 	.word	0x43480000
 8002028:	3d4ccccd 	.word	0x3d4ccccd
 800202c:	20000424 	.word	0x20000424
 8002030:	00000000 	.word	0x00000000
 8002034:	20000430 	.word	0x20000430
 8002038:	43480000 	.word	0x43480000
 800203c:	2000043c 	.word	0x2000043c
 8002040:	20000438 	.word	0x20000438
 8002044:	2000042d 	.word	0x2000042d

08002048 <tmc2209_readWriteArray>:
		selectmode_flag=1;
	}
}

void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	4603      	mov	r3, r0
 8002056:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8002058:	480e      	ldr	r0, [pc, #56]	; (8002094 <tmc2209_readWriteArray+0x4c>)
 800205a:	f006 f807 	bl	800806c <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, data, writeLength,3000);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	b29a      	uxth	r2, r3
 8002062:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	480a      	ldr	r0, [pc, #40]	; (8002094 <tmc2209_readWriteArray+0x4c>)
 800206a:	f005 fbed 	bl	8007848 <HAL_UART_Transmit>

	if(readLength > 0){
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <tmc2209_readWriteArray+0x42>
		HAL_HalfDuplex_EnableReceiver(&huart1);
 8002074:	4807      	ldr	r0, [pc, #28]	; (8002094 <tmc2209_readWriteArray+0x4c>)
 8002076:	f006 f82d 	bl	80080d4 <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart1, data, readLength, 3000);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	b29a      	uxth	r2, r3
 800207e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002082:	68b9      	ldr	r1, [r7, #8]
 8002084:	4803      	ldr	r0, [pc, #12]	; (8002094 <tmc2209_readWriteArray+0x4c>)
 8002086:	f005 fc71 	bl	800796c <HAL_UART_Receive>
	}
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000274 	.word	0x20000274

08002098 <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 80020a2:	2201      	movs	r2, #1
 80020a4:	6839      	ldr	r1, [r7, #0]
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f006 fdba 	bl	8008c20 <tmc_CRC8>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <reset>:

static uint8_t reset()
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
	//StepDir_init(STEPDIR_PRECISION);
	//StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);

	return tmc2209_reset(&TMC2209);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <reset+0x10>)
 80020be:	f006 ffe7 	bl	8009090 <tmc2209_reset>
 80020c2:	4603      	mov	r3, r0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000444 	.word	0x20000444

080020cc <restore>:

static uint8_t restore()
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <restore+0x10>)
 80020d2:	f007 f817 	bl	8009104 <tmc2209_restore>
 80020d6:	4603      	mov	r3, r0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000444 	.word	0x20000444

080020e0 <TMC2209_INIT>:


void TMC2209_INIT()
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 80020e6:	2201      	movs	r2, #1
 80020e8:	2101      	movs	r1, #1
 80020ea:	2007      	movs	r0, #7
 80020ec:	f006 fce0 	bl	8008ab0 <tmc_fillCRC8Table>

	TMC2209_config.reset = reset;
 80020f0:	4b09      	ldr	r3, [pc, #36]	; (8002118 <TMC2209_INIT+0x38>)
 80020f2:	4a0a      	ldr	r2, [pc, #40]	; (800211c <TMC2209_INIT+0x3c>)
 80020f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config.restore = restore;
 80020f8:	4b07      	ldr	r3, [pc, #28]	; (8002118 <TMC2209_INIT+0x38>)
 80020fa:	4a09      	ldr	r2, [pc, #36]	; (8002120 <TMC2209_INIT+0x40>)
 80020fc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <TMC2209_INIT+0x44>)
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <TMC2209_INIT+0x38>)
 8002106:	2200      	movs	r2, #0
 8002108:	2100      	movs	r1, #0
 800210a:	4807      	ldr	r0, [pc, #28]	; (8002128 <TMC2209_INIT+0x48>)
 800210c:	f006 fedc 	bl	8008ec8 <tmc2209_init>


	//restore();
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	200006cc 	.word	0x200006cc
 800211c:	080020b9 	.word	0x080020b9
 8002120:	080020cd 	.word	0x080020cd
 8002124:	0800dcc8 	.word	0x0800dcc8
 8002128:	20000444 	.word	0x20000444

0800212c <Step0>:
	UNUSED(motor);

	return &TMC2209;
}

void Step0(){                                       //step pin
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	//pull+

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8002130:	2200      	movs	r2, #0
 8002132:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002136:	4805      	ldr	r0, [pc, #20]	; (800214c <Step0+0x20>)
 8002138:	f003 fd18 	bl	8005b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800213c:	2201      	movs	r2, #1
 800213e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002142:	4802      	ldr	r0, [pc, #8]	; (800214c <Step0+0x20>)
 8002144:	f003 fd12 	bl	8005b6c <HAL_GPIO_WritePin>
	/*
	 * pull-
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
	 */
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40020400 	.word	0x40020400

08002150 <Dir0>:

void Dir0(int dir){
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, dir); //Dir0関数にdirピンを指定して格納
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002162:	4803      	ldr	r0, [pc, #12]	; (8002170 <Dir0+0x20>)
 8002164:	f003 fd02 	bl	8005b6c <HAL_GPIO_WritePin>
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40020400 	.word	0x40020400

08002174 <resetStepper>:
	si->stepPosition = 0;
	si->movementDone = 0;
}


void resetStepper(volatile stepperInfo* si){    //resetStepper関数に引数をstepperInfo構造隊にポイント型変数siとして与える
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	si->c0 = si->acceleration;      //変数*siがメンバc0にアクセス.した値に変数*siがメンバaccelerationにアクセス.した値を代入する
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	edd3 7a00 	vldr	s15, [r3]
 8002182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002186:	ee17 2a90 	vmov	r2, s15
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	615a      	str	r2, [r3, #20]
	si->d = si->c0;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	ee07 3a90 	vmov	s15, r3
 8002196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	si->di = si->d;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80021a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021aa:	ee17 2a90 	vmov	r2, s15
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	649a      	str	r2, [r3, #72]	; 0x48
	si->stepCount = 0;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	64da      	str	r2, [r3, #76]	; 0x4c
	si->n = 0;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	641a      	str	r2, [r3, #64]	; 0x40
	si->rampUpStepCount = 0;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	63da      	str	r2, [r3, #60]	; 0x3c
	si->movementDone = 0;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <prepareMovement>:

volatile uint8_t remainingSteppersFlag = 0; //remainingSteppersFlagをuint8_t型で定義し、初期化

void prepareMovement(int steps){
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	printf("prepareMovement_IN\n\r");
 80021e0:	4821      	ldr	r0, [pc, #132]	; (8002268 <prepareMovement+0x90>)
 80021e2:	f007 fc45 	bl	8009a70 <iprintf>
	if(steps == 0){
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d039      	beq.n	8002260 <prepareMovement+0x88>
		return;
	}
	volatile stepperInfo* si = &steppers[0];
 80021ec:	4b1f      	ldr	r3, [pc, #124]	; (800226c <prepareMovement+0x94>)
 80021ee:	60fb      	str	r3, [r7, #12]
	if(si->dir_inv){
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d011      	beq.n	800221c <prepareMovement+0x44>
		si->dirFunc( steps < 0 ? 0 : 1);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	43d2      	mvns	r2, r2
 8002200:	0fd2      	lsrs	r2, r2, #31
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	4610      	mov	r0, r2
 8002206:	4798      	blx	r3
		si->dir = steps > 0 ? -1:1;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	dd02      	ble.n	8002214 <prepareMovement+0x3c>
 800220e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002212:	e000      	b.n	8002216 <prepareMovement+0x3e>
 8002214:	2201      	movs	r2, #1
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	61da      	str	r2, [r3, #28]
 800221a:	e00e      	b.n	800223a <prepareMovement+0x62>
	}else{
		si->dirFunc( steps < 0 ? 1 : 0);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	0fd2      	lsrs	r2, r2, #31
 8002224:	4610      	mov	r0, r2
 8002226:	4798      	blx	r3
		si->dir = steps > 0 ? 1:-1;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	dd01      	ble.n	8002232 <prepareMovement+0x5a>
 800222e:	2201      	movs	r2, #1
 8002230:	e001      	b.n	8002236 <prepareMovement+0x5e>
 8002232:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	61da      	str	r2, [r3, #28]
	}
		si->totalSteps = abs(steps);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	bfb8      	it	lt
 8002240:	425b      	neglt	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	635a      	str	r2, [r3, #52]	; 0x34
		resetStepper(si);
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f7ff ff93 	bl	8002174 <resetStepper>
		remainingSteppersFlag |= (1 << 0);
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <prepareMovement+0x98>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <prepareMovement+0x98>)
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	e000      	b.n	8002262 <prepareMovement+0x8a>
		return;
 8002260:	bf00      	nop

}
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	0800dc40 	.word	0x0800dc40
 800226c:	200008e0 	.word	0x200008e0
 8002270:	20000934 	.word	0x20000934

08002274 <prepareAbsoluteMovement>:

void prepareAbsoluteMovement(int absolute_steps){   //prepareAbsoluteMovementで与えられたステップ数だけモータを回す(main文から）
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	printf("prepareAbsoluteMovement_IN\n\r");
 800227c:	4819      	ldr	r0, [pc, #100]	; (80022e4 <prepareAbsoluteMovement+0x70>)
 800227e:	f007 fbf7 	bl	8009a70 <iprintf>
	volatile stepperInfo* si = &steppers[0];	//steppers[0]のアドレスをstepperInfo* si に代入
 8002282:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <prepareAbsoluteMovement+0x74>)
 8002284:	60fb      	str	r3, [r7, #12]
	int steps = absolute_steps - si->stepPosition;	//目標値からstepPositionを引いた値（stepposition=毎ステップカウントされるdirの値)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	60bb      	str	r3, [r7, #8]
	if(steps == 0){
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d021      	beq.n	80022da <prepareAbsoluteMovement+0x66>
					return;
				}
	si->dirFunc( steps < 0 ? 1 : 0);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	0fd2      	lsrs	r2, r2, #31
 800229e:	4610      	mov	r0, r2
 80022a0:	4798      	blx	r3
	si->dir = steps > 0 ? 1:-1;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	dd01      	ble.n	80022ac <prepareAbsoluteMovement+0x38>
 80022a8:	2201      	movs	r2, #1
 80022aa:	e001      	b.n	80022b0 <prepareAbsoluteMovement+0x3c>
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	61da      	str	r2, [r3, #28]
	//printf("prepareAbsoluteMovement\r\n");
	si->totalSteps = abs(steps);	//stepsの値をアブソリュートでtotalstepsに格納
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	bfb8      	it	lt
 80022ba:	425b      	neglt	r3, r3
 80022bc:	461a      	mov	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	635a      	str	r2, [r3, #52]	; 0x34

	resetStepper(si);
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f7ff ff56 	bl	8002174 <resetStepper>
	remainingSteppersFlag |= (1 << 0);
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <prepareAbsoluteMovement+0x78>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <prepareAbsoluteMovement+0x78>)
 80022d6:	701a      	strb	r2, [r3, #0]
 80022d8:	e000      	b.n	80022dc <prepareAbsoluteMovement+0x68>
					return;
 80022da:	bf00      	nop
}
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	0800dc58 	.word	0x0800dc58
 80022e8:	200008e0 	.word	0x200008e0
 80022ec:	20000934 	.word	0x20000934

080022f0 <setNextInterruptInterval>:
			t->checkcount=0;
		}
}
volatile uint8_t nextStepperFlag = 0;

void setNextInterruptInterval(){
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
	unsigned int mind = 999999;
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <setNextInterruptInterval+0x7c>)
 80022f8:	607b      	str	r3, [r7, #4]
//	currentcheck();
		if( ((1 << 0)& remainingSteppersFlag) && steppers[0].di < mind ){
 80022fa:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <setNextInterruptInterval+0x80>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <setNextInterruptInterval+0x2a>
 800230a:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <setNextInterruptInterval+0x84>)
 800230c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	429a      	cmp	r2, r3
 8002312:	d902      	bls.n	800231a <setNextInterruptInterval+0x2a>
			mind = steppers[0].di;
 8002314:	4b17      	ldr	r3, [pc, #92]	; (8002374 <setNextInterruptInterval+0x84>)
 8002316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002318:	607b      	str	r3, [r7, #4]

		}
		nextStepperFlag = 0;
 800231a:	4b17      	ldr	r3, [pc, #92]	; (8002378 <setNextInterruptInterval+0x88>)
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]

			if( (1 << 0) && steppers[0].di == mind ){
 8002320:	4b14      	ldr	r3, [pc, #80]	; (8002374 <setNextInterruptInterval+0x84>)
 8002322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	429a      	cmp	r2, r3
 8002328:	d107      	bne.n	800233a <setNextInterruptInterval+0x4a>
				nextStepperFlag |= (1 << 0);
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <setNextInterruptInterval+0x88>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <setNextInterruptInterval+0x88>)
 8002338:	701a      	strb	r2, [r3, #0]
			}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);		//mindにコンペアを設定
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <setNextInterruptInterval+0x8c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	635a      	str	r2, [r3, #52]	; 0x34
			//printf("mind:%d \r\n",mind);

	if (remainingSteppersFlag == 0){
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <setNextInterruptInterval+0x80>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d104      	bne.n	8002356 <setNextInterruptInterval+0x66>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);    //65500→コンペアマッチさせない
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <setNextInterruptInterval+0x8c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8002354:	635a      	str	r2, [r3, #52]	; 0x34
	}

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <setNextInterruptInterval+0x8c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 800235e:	bf00      	nop

}
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	000f423f 	.word	0x000f423f
 8002370:	20000934 	.word	0x20000934
 8002374:	200008e0 	.word	0x200008e0
 8002378:	20000935 	.word	0x20000935
 800237c:	2000022c 	.word	0x2000022c

08002380 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){      //指定したコンペアを超えた時発火
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	//HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);

	if(htim == &htim3){
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a6e      	ldr	r2, [pc, #440]	; (8002544 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	f040 80d5 	bne.w	800253c <HAL_TIM_OC_DelayElapsedCallback+0x1bc>
	unsigned int tmpCtr = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);	//指定されたタイマーチャンネルのコンペアを所得
 8002392:	4b6c      	ldr	r3, [pc, #432]	; (8002544 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002398:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);			//コンペアを65500にセット
 800239a:	4b6a      	ldr	r3, [pc, #424]	; (8002544 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80023a2:	635a      	str	r2, [r3, #52]	; 0x34

	if( homing_flag & (1 << 0)){
 80023a4:	4b68      	ldr	r3, [pc, #416]	; (8002548 <HAL_TIM_OC_DelayElapsedCallback+0x1c8>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00d      	beq.n	80023cc <HAL_TIM_OC_DelayElapsedCallback+0x4c>
				if(zhome_endstop_state & (1 << 0)){
 80023b0:	4b66      	ldr	r3, [pc, #408]	; (800254c <HAL_TIM_OC_DelayElapsedCallback+0x1cc>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d007      	beq.n	80023cc <HAL_TIM_OC_DelayElapsedCallback+0x4c>
					remainingSteppersFlag &= ~(1 << 0);
 80023bc:	4b64      	ldr	r3, [pc, #400]	; (8002550 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f023 0301 	bic.w	r3, r3, #1
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b61      	ldr	r3, [pc, #388]	; (8002550 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 80023ca:	701a      	strb	r2, [r3, #0]
				}
			}
	if ( ! (nextStepperFlag & (1 << 0)) ){				//nextStepperFlagが真でない(0なら)
 80023cc:	4b61      	ldr	r3, [pc, #388]	; (8002554 <HAL_TIM_OC_DelayElapsedCallback+0x1d4>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d105      	bne.n	80023e6 <HAL_TIM_OC_DelayElapsedCallback+0x66>
			steppers[0].di -= tmpCtr;           //tmpCtrの値からsteppers[i].di引いた値を新しくsteppers[i].diに代入
 80023da:	4b5f      	ldr	r3, [pc, #380]	; (8002558 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80023dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	4a5d      	ldr	r2, [pc, #372]	; (8002558 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80023e4:	6493      	str	r3, [r2, #72]	; 0x48
		}
		//printf("steppers:%ld \r\n",steppers[0].di);

		volatile stepperInfo* s = &steppers[0];
 80023e6:	4b5c      	ldr	r3, [pc, #368]	; (8002558 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80023e8:	60bb      	str	r3, [r7, #8]

		if( (s->stepCount) < (s->totalSteps)&& !(current_stall)  ){		//1周ごとにカウントしたstepCountがabs(steps)より小さかったら==動作が終了するまで
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d224      	bcs.n	8002440 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
 80023f6:	4b59      	ldr	r3, [pc, #356]	; (800255c <HAL_TIM_OC_DelayElapsedCallback+0x1dc>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d120      	bne.n	8002440 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
			s->stepFunc();
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	4798      	blx	r3
			s->stepCount++;							//カウントし続ける
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	64da      	str	r2, [r3, #76]	; 0x4c
			s->stepPosition += s->dir;		//dir(+もしくはー(dirの向き）を加算してstepPositionに格納
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	69da      	ldr	r2, [r3, #28]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	441a      	add	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	619a      	str	r2, [r3, #24]
			if ( (s->stepCount) >= (s->totalSteps) ){	//stepCountがtotalStepsを超えたとき
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002424:	429a      	cmp	r2, r3
 8002426:	d30b      	bcc.n	8002440 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
				s->movementDone = 1;	//movementDoneを1にする
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				remainingSteppersFlag &= ~(1 << 0);
 8002430:	4b47      	ldr	r3, [pc, #284]	; (8002550 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f023 0301 	bic.w	r3, r3, #1
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b44      	ldr	r3, [pc, #272]	; (8002550 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 800243e:	701a      	strb	r2, [r3, #0]
			}

		}

		if (s->rampUpStepCount == 0){
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002444:	2b00      	cmp	r3, #0
 8002446:	d142      	bne.n	80024ce <HAL_TIM_OC_DelayElapsedCallback+0x14e>
			s->n++;									//sにnを代入して、nをプラス1する
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
			s->d = s->d - (2*s->d) / (4*s->n +1);	//加減速遅延時間
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800245e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	3301      	adds	r3, #1
 800246a:	ee07 3a90 	vmov	s15, r3
 800246e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002472:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002476:	ee77 7a67 	vsub.f32	s15, s14, s15
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			if (s->d <= s->minStepInterval ){		//加減速遅延時間がminStepIntervalより短いなら（定数で指定）
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	ee07 3a90 	vmov	s15, r3
 800248e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002492:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249a:	d80c      	bhi.n	80024b6 <HAL_TIM_OC_DelayElapsedCallback+0x136>
				s->d = s->minStepInterval;			//minStepIntervalを加減速遅延時間にする
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	ee07 3a90 	vmov	s15, r3
 80024a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
				s->rampUpStepCount = s->stepCount;	//rampUpStepCountはstepCountとする
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	63da      	str	r2, [r3, #60]	; 0x3c
			}
			if (s->stepCount >= (s->totalSteps / 2) ){  //目標値から現在のステップを引いた値の1/2よりstepCountが大きくなったとき
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024be:	085b      	lsrs	r3, r3, #1
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d32c      	bcc.n	800251e <HAL_TIM_OC_DelayElapsedCallback+0x19e>
				s->rampUpStepCount = s->stepCount;		//rampUpStepCountはstepCountとする
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80024cc:	e027      	b.n	800251e <HAL_TIM_OC_DelayElapsedCallback+0x19e>
			}
		} else if ( s->stepCount >= s->totalSteps - s->rampUpStepCount) {	//目標値から現在のステップを引いた値からrampUpStepCountを引いた値がstepCountより小さいなら
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024da:	1acb      	subs	r3, r1, r3
 80024dc:	429a      	cmp	r2, r3
 80024de:	d31e      	bcc.n	800251e <HAL_TIM_OC_DelayElapsedCallback+0x19e>
			s->d = (s->d * (4 * s->n + 1)) / (4 * s->n + 1 -2);				//減速の時のステップ
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	3301      	adds	r3, #1
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	3b01      	subs	r3, #1
 8002502:	ee07 3a90 	vmov	s15, r3
 8002506:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800250a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			s->n--;		//sにnを代入し、nから1を引く
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	1e5a      	subs	r2, r3, #1
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40
		}
		s->di = s->d;	//計算結果sをstepperInfoのメンバdに代入したものをメンバdiに代入
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002528:	ee17 2a90 	vmov	r2, s15
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	649a      	str	r2, [r3, #72]	; 0x48
//		printf("stepPosition:%d \r\n",s->stepPosition);
		setNextInterruptInterval();
 8002530:	f7ff fede 	bl	80022f0 <setNextInterruptInterval>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2200      	movs	r2, #0
 800253a:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	2000022c 	.word	0x2000022c
 8002548:	20000931 	.word	0x20000931
 800254c:	20000930 	.word	0x20000930
 8002550:	20000934 	.word	0x20000934
 8002554:	20000935 	.word	0x20000935
 8002558:	200008e0 	.word	0x200008e0
 800255c:	20000932 	.word	0x20000932

08002560 <stallguard_back>:
	if( ! HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)){	//割り込みピンが真でない(1でない=0なら)
		zhome_endstop_state |= 1;					//zhome_endstop_stateに左辺か右辺が1なら1を代入
	}
}

void stallguard_back(){
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
	prepareMovement(steppers[0].stall_off);	//stall_off
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <stallguard_back+0x18>)
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fe35 	bl	80021d8 <prepareMovement>
	current_stall=0;
 800256e:	4b03      	ldr	r3, [pc, #12]	; (800257c <stallguard_back+0x1c>)
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
	return;
 8002574:	bf00      	nop
}
 8002576:	bd80      	pop	{r7, pc}
 8002578:	200008e0 	.word	0x200008e0
 800257c:	20000932 	.word	0x20000932

08002580 <runAndWait>:
	HAL_UART_Transmit_IT(&huart2,TxData,sizeof(TxData));

	return;
}

void runAndWait(){
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
	setNextInterruptInterval();
 8002584:	f7ff feb4 	bl	80022f0 <setNextInterruptInterval>
	while(remainingSteppersFlag && !(current_stall));
 8002588:	bf00      	nop
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <runAndWait+0x38>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <runAndWait+0x1c>
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <runAndWait+0x3c>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f6      	beq.n	800258a <runAndWait+0xa>
	if(current_stall==1){
 800259c:	4b07      	ldr	r3, [pc, #28]	; (80025bc <runAndWait+0x3c>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <runAndWait+0x28>
		stallguard_back();
 80025a4:	f7ff ffdc 	bl	8002560 <stallguard_back>
	}
	HAL_Delay(100);
 80025a8:	2064      	movs	r0, #100	; 0x64
 80025aa:	f002 f895 	bl	80046d8 <HAL_Delay>
	end_flag=1;
 80025ae:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <runAndWait+0x40>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	701a      	strb	r2, [r3, #0]
	//printf("posi%d\r\n",re->totalSteps);
}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000934 	.word	0x20000934
 80025bc:	20000932 	.word	0x20000932
 80025c0:	20000933 	.word	0x20000933

080025c4 <TMCsetup>:
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
	HAL_Delay(100);
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_SHAFT_SHIFT, TMC2209_SHAFT_MASK);	//保持電流
}

void TMCsetup(){
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b090      	sub	sp, #64	; 0x40
 80025c8:	af00      	add	r7, sp, #0
	int32_t mstep_value = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t toff_value = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t microstep_value = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t IRUN_value = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t IHOLD_value = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t IHOLDDELAY_value= 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t stallgard_setup_value=0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t TCOOLTHRS_value=0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	623b      	str	r3, [r7, #32]
	int32_t SEMAX_value=0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
	int32_t TBL_value = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
	int32_t stealthChop_value = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
	int32_t autoscale_value = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
	int32_t PWMAuto_value = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
	int32_t PWMAuto_scale = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
	int32_t value = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]


	IRUN_value = 22
 8002606:	2316      	movs	r3, #22
 8002608:	633b      	str	r3, [r7, #48]	; 0x30
			;
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, IRUN_value);	//実行電流
 800260a:	2110      	movs	r1, #16
 800260c:	48d1      	ldr	r0, [pc, #836]	; (8002954 <TMCsetup+0x390>)
 800260e:	f006 fbf8 	bl	8008e02 <tmc2209_readInt>
 8002612:	4603      	mov	r3, r0
 8002614:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8002620:	4313      	orrs	r3, r2
 8002622:	461a      	mov	r2, r3
 8002624:	2110      	movs	r1, #16
 8002626:	48cb      	ldr	r0, [pc, #812]	; (8002954 <TMCsetup+0x390>)
 8002628:	f006 fb9b 	bl	8008d62 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800262c:	f002 f848 	bl	80046c0 <HAL_GetTick>
 8002630:	4603      	mov	r3, r0
 8002632:	4619      	mov	r1, r3
 8002634:	48c7      	ldr	r0, [pc, #796]	; (8002954 <TMCsetup+0x390>)
 8002636:	f006 fd1a 	bl	800906e <tmc2209_periodicJob>
	HAL_Delay(100);
 800263a:	2064      	movs	r0, #100	; 0x64
 800263c:	f002 f84c 	bl	80046d8 <HAL_Delay>
	IRUN_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 8002640:	2110      	movs	r1, #16
 8002642:	48c4      	ldr	r0, [pc, #784]	; (8002954 <TMCsetup+0x390>)
 8002644:	f006 fbdd 	bl	8008e02 <tmc2209_readInt>
 8002648:	4603      	mov	r3, r0
 800264a:	121b      	asrs	r3, r3, #8
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	633b      	str	r3, [r7, #48]	; 0x30

	IHOLD_value= 16;																						//モーター待機時の電流の設定
 8002652:	2310      	movs	r3, #16
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
	TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, IHOLD_value);
 8002656:	2110      	movs	r1, #16
 8002658:	48be      	ldr	r0, [pc, #760]	; (8002954 <TMCsetup+0x390>)
 800265a:	f006 fbd2 	bl	8008e02 <tmc2209_readInt>
 800265e:	4603      	mov	r3, r0
 8002660:	f023 021f 	bic.w	r2, r3, #31
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	4313      	orrs	r3, r2
 800266c:	461a      	mov	r2, r3
 800266e:	2110      	movs	r1, #16
 8002670:	48b8      	ldr	r0, [pc, #736]	; (8002954 <TMCsetup+0x390>)
 8002672:	f006 fb76 	bl	8008d62 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8002676:	f002 f823 	bl	80046c0 <HAL_GetTick>
 800267a:	4603      	mov	r3, r0
 800267c:	4619      	mov	r1, r3
 800267e:	48b5      	ldr	r0, [pc, #724]	; (8002954 <TMCsetup+0x390>)
 8002680:	f006 fcf5 	bl	800906e <tmc2209_periodicJob>
	HAL_Delay(100);
 8002684:	2064      	movs	r0, #100	; 0x64
 8002686:	f002 f827 	bl	80046d8 <HAL_Delay>
	IHOLD_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);	//保持電流
 800268a:	2110      	movs	r1, #16
 800268c:	48b1      	ldr	r0, [pc, #708]	; (8002954 <TMCsetup+0x390>)
 800268e:	f006 fbb8 	bl	8008e02 <tmc2209_readInt>
 8002692:	4603      	mov	r3, r0
 8002694:	f003 031f 	and.w	r3, r3, #31
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c

	value=0;
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK,TMC2209_PDN_DISABLE_SHIFT);
 800269e:	2100      	movs	r1, #0
 80026a0:	48ac      	ldr	r0, [pc, #688]	; (8002954 <TMCsetup+0x390>)
 80026a2:	f006 fbae 	bl	8008e02 <tmc2209_readInt>
 80026a6:	4603      	mov	r3, r0
 80026a8:	119b      	asrs	r3, r3, #6
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	607b      	str	r3, [r7, #4]
	value = 1;
 80026b0:	2301      	movs	r3, #1
 80026b2:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK, TMC2209_PDN_DISABLE_SHIFT, value);
 80026b4:	2100      	movs	r1, #0
 80026b6:	48a7      	ldr	r0, [pc, #668]	; (8002954 <TMCsetup+0x390>)
 80026b8:	f006 fba3 	bl	8008e02 <tmc2209_readInt>
 80026bc:	4603      	mov	r3, r0
 80026be:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	019b      	lsls	r3, r3, #6
 80026c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ca:	4313      	orrs	r3, r2
 80026cc:	461a      	mov	r2, r3
 80026ce:	2100      	movs	r1, #0
 80026d0:	48a0      	ldr	r0, [pc, #640]	; (8002954 <TMCsetup+0x390>)
 80026d2:	f006 fb46 	bl	8008d62 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80026d6:	f001 fff3 	bl	80046c0 <HAL_GetTick>
 80026da:	4603      	mov	r3, r0
 80026dc:	4619      	mov	r1, r3
 80026de:	489d      	ldr	r0, [pc, #628]	; (8002954 <TMCsetup+0x390>)
 80026e0:	f006 fcc5 	bl	800906e <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK, TMC2209_PDN_DISABLE_SHIFT);
 80026e4:	2100      	movs	r1, #0
 80026e6:	489b      	ldr	r0, [pc, #620]	; (8002954 <TMCsetup+0x390>)
 80026e8:	f006 fb8b 	bl	8008e02 <tmc2209_readInt>
 80026ec:	4603      	mov	r3, r0
 80026ee:	119b      	asrs	r3, r3, #6
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	607b      	str	r3, [r7, #4]

	TCOOLTHRS_value=1000;
 80026f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026fa:	623b      	str	r3, [r7, #32]
	tmc2209_writeInt(&TMC2209, TMC2209_TCOOLTHRS, TCOOLTHRS_value);
 80026fc:	6a3a      	ldr	r2, [r7, #32]
 80026fe:	2114      	movs	r1, #20
 8002700:	4894      	ldr	r0, [pc, #592]	; (8002954 <TMCsetup+0x390>)
 8002702:	f006 fb2e 	bl	8008d62 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8002706:	f001 ffdb 	bl	80046c0 <HAL_GetTick>
 800270a:	4603      	mov	r3, r0
 800270c:	4619      	mov	r1, r3
 800270e:	4891      	ldr	r0, [pc, #580]	; (8002954 <TMCsetup+0x390>)
 8002710:	f006 fcad 	bl	800906e <tmc2209_periodicJob>

	value=0;
 8002714:	2300      	movs	r3, #0
 8002716:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK,TMC2209_EN_SPREADCYCLE_SHIFT);
 8002718:	2100      	movs	r1, #0
 800271a:	488e      	ldr	r0, [pc, #568]	; (8002954 <TMCsetup+0x390>)
 800271c:	f006 fb71 	bl	8008e02 <tmc2209_readInt>
 8002720:	4603      	mov	r3, r0
 8002722:	109b      	asrs	r3, r3, #2
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	607b      	str	r3, [r7, #4]
	value = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK, TMC2209_EN_SPREADCYCLE_SHIFT ,value);
 800272e:	2100      	movs	r1, #0
 8002730:	4888      	ldr	r0, [pc, #544]	; (8002954 <TMCsetup+0x390>)
 8002732:	f006 fb66 	bl	8008e02 <tmc2209_readInt>
 8002736:	4603      	mov	r3, r0
 8002738:	f023 0204 	bic.w	r2, r3, #4
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	4313      	orrs	r3, r2
 8002746:	461a      	mov	r2, r3
 8002748:	2100      	movs	r1, #0
 800274a:	4882      	ldr	r0, [pc, #520]	; (8002954 <TMCsetup+0x390>)
 800274c:	f006 fb09 	bl	8008d62 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8002750:	f001 ffb6 	bl	80046c0 <HAL_GetTick>
 8002754:	4603      	mov	r3, r0
 8002756:	4619      	mov	r1, r3
 8002758:	487e      	ldr	r0, [pc, #504]	; (8002954 <TMCsetup+0x390>)
 800275a:	f006 fc88 	bl	800906e <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK,TMC2209_EN_SPREADCYCLE_SHIFT);
 800275e:	2100      	movs	r1, #0
 8002760:	487c      	ldr	r0, [pc, #496]	; (8002954 <TMCsetup+0x390>)
 8002762:	f006 fb4e 	bl	8008e02 <tmc2209_readInt>
 8002766:	4603      	mov	r3, r0
 8002768:	109b      	asrs	r3, r3, #2
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	607b      	str	r3, [r7, #4]

//	value=10;
//	tmc2209_writeInt(&TMC2209, TMC2209_TPWMTHRS, value);
//	tmc2209_periodicJob(&TMC2209, HAL_GetTick());

	value=0;
 8002770:	2300      	movs	r3, #0
 8002772:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK,TMC2209_INTERNAL_RSENSE_SHIFT);
 8002774:	2100      	movs	r1, #0
 8002776:	4877      	ldr	r0, [pc, #476]	; (8002954 <TMCsetup+0x390>)
 8002778:	f006 fb43 	bl	8008e02 <tmc2209_readInt>
 800277c:	4603      	mov	r3, r0
 800277e:	105b      	asrs	r3, r3, #1
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	607b      	str	r3, [r7, #4]
	value = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK, TMC2209_INTERNAL_RSENSE_SHIFT, value);
 800278a:	2100      	movs	r1, #0
 800278c:	4871      	ldr	r0, [pc, #452]	; (8002954 <TMCsetup+0x390>)
 800278e:	f006 fb38 	bl	8008e02 <tmc2209_readInt>
 8002792:	4603      	mov	r3, r0
 8002794:	f023 0202 	bic.w	r2, r3, #2
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	4313      	orrs	r3, r2
 80027a2:	461a      	mov	r2, r3
 80027a4:	2100      	movs	r1, #0
 80027a6:	486b      	ldr	r0, [pc, #428]	; (8002954 <TMCsetup+0x390>)
 80027a8:	f006 fadb 	bl	8008d62 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80027ac:	f001 ff88 	bl	80046c0 <HAL_GetTick>
 80027b0:	4603      	mov	r3, r0
 80027b2:	4619      	mov	r1, r3
 80027b4:	4867      	ldr	r0, [pc, #412]	; (8002954 <TMCsetup+0x390>)
 80027b6:	f006 fc5a 	bl	800906e <tmc2209_periodicJob>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK, TMC2209_INTERNAL_RSENSE_SHIFT);
 80027ba:	2100      	movs	r1, #0
 80027bc:	4865      	ldr	r0, [pc, #404]	; (8002954 <TMCsetup+0x390>)
 80027be:	f006 fb20 	bl	8008e02 <tmc2209_readInt>
 80027c2:	4603      	mov	r3, r0
 80027c4:	105b      	asrs	r3, r3, #1
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	607b      	str	r3, [r7, #4]

	value=0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_FREQ_MASK, TMC2209_PWM_FREQ_SHIFT);
 80027d0:	2170      	movs	r1, #112	; 0x70
 80027d2:	4860      	ldr	r0, [pc, #384]	; (8002954 <TMCsetup+0x390>)
 80027d4:	f006 fb15 	bl	8008e02 <tmc2209_readInt>
 80027d8:	4603      	mov	r3, r0
 80027da:	141b      	asrs	r3, r3, #16
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	607b      	str	r3, [r7, #4]
	value=1;
 80027e2:	2301      	movs	r3, #1
 80027e4:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_FREQ_MASK, TMC2209_PWM_FREQ_SHIFT, value);
 80027e6:	2170      	movs	r1, #112	; 0x70
 80027e8:	485a      	ldr	r0, [pc, #360]	; (8002954 <TMCsetup+0x390>)
 80027ea:	f006 fb0a 	bl	8008e02 <tmc2209_readInt>
 80027ee:	4603      	mov	r3, r0
 80027f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	041b      	lsls	r3, r3, #16
 80027f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027fc:	4313      	orrs	r3, r2
 80027fe:	461a      	mov	r2, r3
 8002800:	2170      	movs	r1, #112	; 0x70
 8002802:	4854      	ldr	r0, [pc, #336]	; (8002954 <TMCsetup+0x390>)
 8002804:	f006 faad 	bl	8008d62 <tmc2209_writeInt>
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_FREQ_MASK, TMC2209_PWM_FREQ_SHIFT);
 8002808:	2170      	movs	r1, #112	; 0x70
 800280a:	4852      	ldr	r0, [pc, #328]	; (8002954 <TMCsetup+0x390>)
 800280c:	f006 faf9 	bl	8008e02 <tmc2209_readInt>
 8002810:	4603      	mov	r3, r0
 8002812:	141b      	asrs	r3, r3, #16
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	607b      	str	r3, [r7, #4]

	value=0;
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209,TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT);
 800281e:	2142      	movs	r1, #66	; 0x42
 8002820:	484c      	ldr	r0, [pc, #304]	; (8002954 <TMCsetup+0x390>)
 8002822:	f006 faee 	bl	8008e02 <tmc2209_readInt>
 8002826:	4603      	mov	r3, r0
 8002828:	13db      	asrs	r3, r3, #15
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	607b      	str	r3, [r7, #4]

	value=0;
 8002830:	2300      	movs	r3, #0
 8002832:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_DRVSTATUS, TMC2209_CS_ACTUAL_MASK, TMC2209_CS_ACTUAL_SHIFT);
 8002834:	216f      	movs	r1, #111	; 0x6f
 8002836:	4847      	ldr	r0, [pc, #284]	; (8002954 <TMCsetup+0x390>)
 8002838:	f006 fae3 	bl	8008e02 <tmc2209_readInt>
 800283c:	4603      	mov	r3, r0
 800283e:	141b      	asrs	r3, r3, #16
 8002840:	f003 031f 	and.w	r3, r3, #31
 8002844:	607b      	str	r3, [r7, #4]

	mstep_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK,TMC2209_MSTEP_REG_SELECT_SHIFT);	//uartでのmicrostepの有効化
 8002846:	2100      	movs	r1, #0
 8002848:	4842      	ldr	r0, [pc, #264]	; (8002954 <TMCsetup+0x390>)
 800284a:	f006 fada 	bl	8008e02 <tmc2209_readInt>
 800284e:	4603      	mov	r3, r0
 8002850:	11db      	asrs	r3, r3, #7
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	63fb      	str	r3, [r7, #60]	; 0x3c
	mstep_value = 1;
 8002858:	2301      	movs	r3, #1
 800285a:	63fb      	str	r3, [r7, #60]	; 0x3c
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT,mstep_value);
 800285c:	2100      	movs	r1, #0
 800285e:	483d      	ldr	r0, [pc, #244]	; (8002954 <TMCsetup+0x390>)
 8002860:	f006 facf 	bl	8008e02 <tmc2209_readInt>
 8002864:	4603      	mov	r3, r0
 8002866:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800286a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800286c:	01db      	lsls	r3, r3, #7
 800286e:	b2db      	uxtb	r3, r3
 8002870:	4313      	orrs	r3, r2
 8002872:	461a      	mov	r2, r3
 8002874:	2100      	movs	r1, #0
 8002876:	4837      	ldr	r0, [pc, #220]	; (8002954 <TMCsetup+0x390>)
 8002878:	f006 fa73 	bl	8008d62 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800287c:	f001 ff20 	bl	80046c0 <HAL_GetTick>
 8002880:	4603      	mov	r3, r0
 8002882:	4619      	mov	r1, r3
 8002884:	4833      	ldr	r0, [pc, #204]	; (8002954 <TMCsetup+0x390>)
 8002886:	f006 fbf2 	bl	800906e <tmc2209_periodicJob>
	mstep_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT);
 800288a:	2100      	movs	r1, #0
 800288c:	4831      	ldr	r0, [pc, #196]	; (8002954 <TMCsetup+0x390>)
 800288e:	f006 fab8 	bl	8008e02 <tmc2209_readInt>
 8002892:	4603      	mov	r3, r0
 8002894:	11db      	asrs	r3, r3, #7
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	63fb      	str	r3, [r7, #60]	; 0x3c

	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);	//保持トルクの設定
 800289c:	216c      	movs	r1, #108	; 0x6c
 800289e:	482d      	ldr	r0, [pc, #180]	; (8002954 <TMCsetup+0x390>)
 80028a0:	f006 faaf 	bl	8008e02 <tmc2209_readInt>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	63bb      	str	r3, [r7, #56]	; 0x38
	toff_value = 3;
 80028ac:	2303      	movs	r3, #3
 80028ae:	63bb      	str	r3, [r7, #56]	; 0x38
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT,toff_value);
 80028b0:	216c      	movs	r1, #108	; 0x6c
 80028b2:	4828      	ldr	r0, [pc, #160]	; (8002954 <TMCsetup+0x390>)
 80028b4:	f006 faa5 	bl	8008e02 <tmc2209_readInt>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f023 020f 	bic.w	r2, r3, #15
 80028be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	4313      	orrs	r3, r2
 80028c6:	461a      	mov	r2, r3
 80028c8:	216c      	movs	r1, #108	; 0x6c
 80028ca:	4822      	ldr	r0, [pc, #136]	; (8002954 <TMCsetup+0x390>)
 80028cc:	f006 fa49 	bl	8008d62 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80028d0:	f001 fef6 	bl	80046c0 <HAL_GetTick>
 80028d4:	4603      	mov	r3, r0
 80028d6:	4619      	mov	r1, r3
 80028d8:	481e      	ldr	r0, [pc, #120]	; (8002954 <TMCsetup+0x390>)
 80028da:	f006 fbc8 	bl	800906e <tmc2209_periodicJob>
	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 80028de:	216c      	movs	r1, #108	; 0x6c
 80028e0:	481c      	ldr	r0, [pc, #112]	; (8002954 <TMCsetup+0x390>)
 80028e2:	f006 fa8e 	bl	8008e02 <tmc2209_readInt>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	63bb      	str	r3, [r7, #56]	; 0x38

	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);	//microstepの設定
 80028ee:	216c      	movs	r1, #108	; 0x6c
 80028f0:	4818      	ldr	r0, [pc, #96]	; (8002954 <TMCsetup+0x390>)
 80028f2:	f006 fa86 	bl	8008e02 <tmc2209_readInt>
 80028f6:	4603      	mov	r3, r0
 80028f8:	161b      	asrs	r3, r3, #24
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002902:	fa42 f303 	asr.w	r3, r2, r3
 8002906:	637b      	str	r3, [r7, #52]	; 0x34
	microstep_value = 4;
 8002908:	2304      	movs	r3, #4
 800290a:	637b      	str	r3, [r7, #52]	; 0x34
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT,microstep_value);
 800290c:	216c      	movs	r1, #108	; 0x6c
 800290e:	4811      	ldr	r0, [pc, #68]	; (8002954 <TMCsetup+0x390>)
 8002910:	f006 fa77 	bl	8008e02 <tmc2209_readInt>
 8002914:	4603      	mov	r3, r0
 8002916:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800291a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291c:	061b      	lsls	r3, r3, #24
 800291e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002922:	4313      	orrs	r3, r2
 8002924:	461a      	mov	r2, r3
 8002926:	216c      	movs	r1, #108	; 0x6c
 8002928:	480a      	ldr	r0, [pc, #40]	; (8002954 <TMCsetup+0x390>)
 800292a:	f006 fa1a 	bl	8008d62 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800292e:	f001 fec7 	bl	80046c0 <HAL_GetTick>
 8002932:	4603      	mov	r3, r0
 8002934:	4619      	mov	r1, r3
 8002936:	4807      	ldr	r0, [pc, #28]	; (8002954 <TMCsetup+0x390>)
 8002938:	f006 fb99 	bl	800906e <tmc2209_periodicJob>
	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);
 800293c:	216c      	movs	r1, #108	; 0x6c
 800293e:	4805      	ldr	r0, [pc, #20]	; (8002954 <TMCsetup+0x390>)
 8002940:	f006 fa5f 	bl	8008e02 <tmc2209_readInt>
 8002944:	4603      	mov	r3, r0
 8002946:	161b      	asrs	r3, r3, #24
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002950:	e002      	b.n	8002958 <TMCsetup+0x394>
 8002952:	bf00      	nop
 8002954:	20000444 	.word	0x20000444
 8002958:	fa42 f303 	asr.w	r3, r2, r3
 800295c:	637b      	str	r3, [r7, #52]	; 0x34

	IHOLDDELAY_value=4;
 800295e:	2304      	movs	r3, #4
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT, IHOLDDELAY_value);
 8002962:	2110      	movs	r1, #16
 8002964:	4882      	ldr	r0, [pc, #520]	; (8002b70 <TMCsetup+0x5ac>)
 8002966:	f006 fa4c 	bl	8008e02 <tmc2209_readInt>
 800296a:	4603      	mov	r3, r0
 800296c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002972:	041b      	lsls	r3, r3, #16
 8002974:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002978:	4313      	orrs	r3, r2
 800297a:	461a      	mov	r2, r3
 800297c:	2110      	movs	r1, #16
 800297e:	487c      	ldr	r0, [pc, #496]	; (8002b70 <TMCsetup+0x5ac>)
 8002980:	f006 f9ef 	bl	8008d62 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8002984:	f001 fe9c 	bl	80046c0 <HAL_GetTick>
 8002988:	4603      	mov	r3, r0
 800298a:	4619      	mov	r1, r3
 800298c:	4878      	ldr	r0, [pc, #480]	; (8002b70 <TMCsetup+0x5ac>)
 800298e:	f006 fb6e 	bl	800906e <tmc2209_periodicJob>
	IHOLDDELAY_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT);
 8002992:	2110      	movs	r1, #16
 8002994:	4876      	ldr	r0, [pc, #472]	; (8002b70 <TMCsetup+0x5ac>)
 8002996:	f006 fa34 	bl	8008e02 <tmc2209_readInt>
 800299a:	4603      	mov	r3, r0
 800299c:	141b      	asrs	r3, r3, #16
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28

	stallgard_setup_value=100;											//SG_RESULTと比較して、
 80029a4:	2364      	movs	r3, #100	; 0x64
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
	tmc2209_writeInt(&TMC2209, TMC2209_SGTHRS, stallgard_setup_value);
 80029a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029aa:	2140      	movs	r1, #64	; 0x40
 80029ac:	4870      	ldr	r0, [pc, #448]	; (8002b70 <TMCsetup+0x5ac>)
 80029ae:	f006 f9d8 	bl	8008d62 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80029b2:	f001 fe85 	bl	80046c0 <HAL_GetTick>
 80029b6:	4603      	mov	r3, r0
 80029b8:	4619      	mov	r1, r3
 80029ba:	486d      	ldr	r0, [pc, #436]	; (8002b70 <TMCsetup+0x5ac>)
 80029bc:	f006 fb57 	bl	800906e <tmc2209_periodicJob>
	stallgard_setup_value = tmc2209_readInt(&TMC2209, TMC2209_SGTHRS);
 80029c0:	2140      	movs	r1, #64	; 0x40
 80029c2:	486b      	ldr	r0, [pc, #428]	; (8002b70 <TMCsetup+0x5ac>)
 80029c4:	f006 fa1d 	bl	8008e02 <tmc2209_readInt>
 80029c8:	6278      	str	r0, [r7, #36]	; 0x24

	stealthChop_value = 100;
 80029ca:	2364      	movs	r3, #100	; 0x64
 80029cc:	617b      	str	r3, [r7, #20]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT, stealthChop_value);
 80029ce:	2170      	movs	r1, #112	; 0x70
 80029d0:	4867      	ldr	r0, [pc, #412]	; (8002b70 <TMCsetup+0x5ac>)
 80029d2:	f006 fa16 	bl	8008e02 <tmc2209_readInt>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	021b      	lsls	r3, r3, #8
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	4313      	orrs	r3, r2
 80029e4:	461a      	mov	r2, r3
 80029e6:	2170      	movs	r1, #112	; 0x70
 80029e8:	4861      	ldr	r0, [pc, #388]	; (8002b70 <TMCsetup+0x5ac>)
 80029ea:	f006 f9ba 	bl	8008d62 <tmc2209_writeInt>
	stealthChop_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT);
 80029ee:	2170      	movs	r1, #112	; 0x70
 80029f0:	485f      	ldr	r0, [pc, #380]	; (8002b70 <TMCsetup+0x5ac>)
 80029f2:	f006 fa06 	bl	8008e02 <tmc2209_readInt>
 80029f6:	4603      	mov	r3, r0
 80029f8:	121b      	asrs	r3, r3, #8
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	617b      	str	r3, [r7, #20]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80029fe:	f001 fe5f 	bl	80046c0 <HAL_GetTick>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4619      	mov	r1, r3
 8002a06:	485a      	ldr	r0, [pc, #360]	; (8002b70 <TMCsetup+0x5ac>)
 8002a08:	f006 fb31 	bl	800906e <tmc2209_periodicJob>


	value=5;
 8002a0c:	2305      	movs	r3, #5
 8002a0e:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEMIN_MASK, TMC2209_SEMIN_SHIFT, value);
 8002a10:	2142      	movs	r1, #66	; 0x42
 8002a12:	4857      	ldr	r0, [pc, #348]	; (8002b70 <TMCsetup+0x5ac>)
 8002a14:	f006 f9f5 	bl	8008e02 <tmc2209_readInt>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f023 020f 	bic.w	r2, r3, #15
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f003 030f 	and.w	r3, r3, #15
 8002a24:	4313      	orrs	r3, r2
 8002a26:	461a      	mov	r2, r3
 8002a28:	2142      	movs	r1, #66	; 0x42
 8002a2a:	4851      	ldr	r0, [pc, #324]	; (8002b70 <TMCsetup+0x5ac>)
 8002a2c:	f006 f999 	bl	8008d62 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8002a30:	f001 fe46 	bl	80046c0 <HAL_GetTick>
 8002a34:	4603      	mov	r3, r0
 8002a36:	4619      	mov	r1, r3
 8002a38:	484d      	ldr	r0, [pc, #308]	; (8002b70 <TMCsetup+0x5ac>)
 8002a3a:	f006 fb18 	bl	800906e <tmc2209_periodicJob>

	SEMAX_value = 2;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	61fb      	str	r3, [r7, #28]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEMAX_MASK, TMC2209_SEMAX_SHIFT, SEMAX_value);
 8002a42:	2142      	movs	r1, #66	; 0x42
 8002a44:	484a      	ldr	r0, [pc, #296]	; (8002b70 <TMCsetup+0x5ac>)
 8002a46:	f006 f9dc 	bl	8008e02 <tmc2209_readInt>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	2142      	movs	r1, #66	; 0x42
 8002a5e:	4844      	ldr	r0, [pc, #272]	; (8002b70 <TMCsetup+0x5ac>)
 8002a60:	f006 f97f 	bl	8008d62 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8002a64:	f001 fe2c 	bl	80046c0 <HAL_GetTick>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4840      	ldr	r0, [pc, #256]	; (8002b70 <TMCsetup+0x5ac>)
 8002a6e:	f006 fafe 	bl	800906e <tmc2209_periodicJob>

	TBL_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT);
 8002a72:	216c      	movs	r1, #108	; 0x6c
 8002a74:	483e      	ldr	r0, [pc, #248]	; (8002b70 <TMCsetup+0x5ac>)
 8002a76:	f006 f9c4 	bl	8008e02 <tmc2209_readInt>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	13db      	asrs	r3, r3, #15
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	61bb      	str	r3, [r7, #24]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8002a84:	f001 fe1c 	bl	80046c0 <HAL_GetTick>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4838      	ldr	r0, [pc, #224]	; (8002b70 <TMCsetup+0x5ac>)
 8002a8e:	f006 faee 	bl	800906e <tmc2209_periodicJob>
	TBL_value = 1;
 8002a92:	2301      	movs	r3, #1
 8002a94:	61bb      	str	r3, [r7, #24]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT, TBL_value);
 8002a96:	216c      	movs	r1, #108	; 0x6c
 8002a98:	4835      	ldr	r0, [pc, #212]	; (8002b70 <TMCsetup+0x5ac>)
 8002a9a:	f006 f9b2 	bl	8008e02 <tmc2209_readInt>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	f423 32c0 	bic.w	r2, r3, #98304	; 0x18000
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	03db      	lsls	r3, r3, #15
 8002aa8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002aac:	4313      	orrs	r3, r2
 8002aae:	461a      	mov	r2, r3
 8002ab0:	216c      	movs	r1, #108	; 0x6c
 8002ab2:	482f      	ldr	r0, [pc, #188]	; (8002b70 <TMCsetup+0x5ac>)
 8002ab4:	f006 f955 	bl	8008d62 <tmc2209_writeInt>
	TBL_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT);
 8002ab8:	216c      	movs	r1, #108	; 0x6c
 8002aba:	482d      	ldr	r0, [pc, #180]	; (8002b70 <TMCsetup+0x5ac>)
 8002abc:	f006 f9a1 	bl	8008e02 <tmc2209_readInt>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	13db      	asrs	r3, r3, #15
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	61bb      	str	r3, [r7, #24]

	stealthChop_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT);
 8002aca:	2170      	movs	r1, #112	; 0x70
 8002acc:	4828      	ldr	r0, [pc, #160]	; (8002b70 <TMCsetup+0x5ac>)
 8002ace:	f006 f998 	bl	8008e02 <tmc2209_readInt>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	121b      	asrs	r3, r3, #8
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	617b      	str	r3, [r7, #20]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8002ada:	f001 fdf1 	bl	80046c0 <HAL_GetTick>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4823      	ldr	r0, [pc, #140]	; (8002b70 <TMCsetup+0x5ac>)
 8002ae4:	f006 fac3 	bl	800906e <tmc2209_periodicJob>

	autoscale_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_AUTOSCALE_MASK, TMC2209_PWM_AUTOSCALE_SHIFT);
 8002ae8:	2170      	movs	r1, #112	; 0x70
 8002aea:	4821      	ldr	r0, [pc, #132]	; (8002b70 <TMCsetup+0x5ac>)
 8002aec:	f006 f989 	bl	8008e02 <tmc2209_readInt>
 8002af0:	4603      	mov	r3, r0
 8002af2:	149b      	asrs	r3, r3, #18
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	613b      	str	r3, [r7, #16]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8002afa:	f001 fde1 	bl	80046c0 <HAL_GetTick>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4619      	mov	r1, r3
 8002b02:	481b      	ldr	r0, [pc, #108]	; (8002b70 <TMCsetup+0x5ac>)
 8002b04:	f006 fab3 	bl	800906e <tmc2209_periodicJob>

	PWMAuto_value = tmc2209_readInt(&TMC2209,TMC2209_PWM_AUTO);
 8002b08:	2172      	movs	r1, #114	; 0x72
 8002b0a:	4819      	ldr	r0, [pc, #100]	; (8002b70 <TMCsetup+0x5ac>)
 8002b0c:	f006 f979 	bl	8008e02 <tmc2209_readInt>
 8002b10:	60f8      	str	r0, [r7, #12]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8002b12:	f001 fdd5 	bl	80046c0 <HAL_GetTick>
 8002b16:	4603      	mov	r3, r0
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4815      	ldr	r0, [pc, #84]	; (8002b70 <TMCsetup+0x5ac>)
 8002b1c:	f006 faa7 	bl	800906e <tmc2209_periodicJob>

	PWMAuto_scale = tmc2209_readInt(&TMC2209,TMC2209_PWMSCALE);
 8002b20:	2171      	movs	r1, #113	; 0x71
 8002b22:	4813      	ldr	r0, [pc, #76]	; (8002b70 <TMCsetup+0x5ac>)
 8002b24:	f006 f96d 	bl	8008e02 <tmc2209_readInt>
 8002b28:	60b8      	str	r0, [r7, #8]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8002b2a:	f001 fdc9 	bl	80046c0 <HAL_GetTick>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	4619      	mov	r1, r3
 8002b32:	480f      	ldr	r0, [pc, #60]	; (8002b70 <TMCsetup+0x5ac>)
 8002b34:	f006 fa9b 	bl	800906e <tmc2209_periodicJob>

	value = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, 0x07, TMC2209_FCLKTRIM_MASK, TMC2209_FCLKTRIM_SHIFT);
 8002b3c:	2107      	movs	r1, #7
 8002b3e:	480c      	ldr	r0, [pc, #48]	; (8002b70 <TMCsetup+0x5ac>)
 8002b40:	f006 f95f 	bl	8008e02 <tmc2209_readInt>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f003 031f 	and.w	r3, r3, #31
 8002b4a:	607b      	str	r3, [r7, #4]

	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8002b4c:	f001 fdb8 	bl	80046c0 <HAL_GetTick>
 8002b50:	4603      	mov	r3, r0
 8002b52:	4619      	mov	r1, r3
 8002b54:	4806      	ldr	r0, [pc, #24]	; (8002b70 <TMCsetup+0x5ac>)
 8002b56:	f006 fa8a 	bl	800906e <tmc2209_periodicJob>
	printf("TMCsetup_OK\r\n");
 8002b5a:	4806      	ldr	r0, [pc, #24]	; (8002b74 <TMCsetup+0x5b0>)
 8002b5c:	f007 f80e 	bl	8009b7c <puts>

	end_flag=1;
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <TMCsetup+0x5b4>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	701a      	strb	r2, [r3, #0]

}
 8002b66:	bf00      	nop
 8002b68:	3740      	adds	r7, #64	; 0x40
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000444 	.word	0x20000444
 8002b74:	0800dc78 	.word	0x0800dc78
 8002b78:	20000933 	.word	0x20000933
 8002b7c:	00000000 	.word	0x00000000

08002b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	ed2d 8b02 	vpush	{d8}
 8002b86:	b0b2      	sub	sp, #200	; 0xc8
 8002b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8002b8a:	4bc3      	ldr	r3, [pc, #780]	; (8002e98 <main+0x318>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2100      	movs	r1, #0
 8002b92:	4618      	mov	r0, r3
 8002b94:	f006 fffa 	bl	8009b8c <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b98:	f001 fd2c 	bl	80045f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b9c:	f000 fcf4 	bl	8003588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ba0:	f000 fe5e 	bl	8003860 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002ba4:	f000 fe32 	bl	800380c <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8002ba8:	f000 fd5a 	bl	8003660 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8002bac:	f000 fe04 	bl	80037b8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002bb0:	f000 fd8e 	bl	80036d0 <MX_TIM3_Init>
//	  home_position_state=1;
//
//  }else{
//	  home_position_state=0;
//  }
 TMC2209_INIT();
 8002bb4:	f7ff fa94 	bl	80020e0 <TMC2209_INIT>
 //rxbufを受信したらフラグを
 HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8002bb8:	2100      	movs	r1, #0
 8002bba:	48b8      	ldr	r0, [pc, #736]	; (8002e9c <main+0x31c>)
 8002bbc:	f003 fe98 	bl	80068f0 <HAL_TIM_OC_Start_IT>
 steppers[0].dirFunc = Dir0;
 8002bc0:	4bb7      	ldr	r3, [pc, #732]	; (8002ea0 <main+0x320>)
 8002bc2:	4ab8      	ldr	r2, [pc, #736]	; (8002ea4 <main+0x324>)
 8002bc4:	609a      	str	r2, [r3, #8]
 steppers[0].stepFunc = Step0;
 8002bc6:	4bb6      	ldr	r3, [pc, #728]	; (8002ea0 <main+0x320>)
 8002bc8:	4ab7      	ldr	r2, [pc, #732]	; (8002ea8 <main+0x328>)
 8002bca:	60da      	str	r2, [r3, #12]
 steppers[0].acceleration = 1000;
 8002bcc:	4bb4      	ldr	r3, [pc, #720]	; (8002ea0 <main+0x320>)
 8002bce:	4ab7      	ldr	r2, [pc, #732]	; (8002eac <main+0x32c>)
 8002bd0:	601a      	str	r2, [r3, #0]
 steppers[0].minStepInterval = 100;
 8002bd2:	4bb3      	ldr	r3, [pc, #716]	; (8002ea0 <main+0x320>)
 8002bd4:	2264      	movs	r2, #100	; 0x64
 8002bd6:	605a      	str	r2, [r3, #4]
 steppers[0].homing = 0;
 8002bd8:	4bb1      	ldr	r3, [pc, #708]	; (8002ea0 <main+0x320>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	741a      	strb	r2, [r3, #16]
 steppers[0].dir_inv = 1;
 8002bde:	4bb0      	ldr	r3, [pc, #704]	; (8002ea0 <main+0x320>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	621a      	str	r2, [r3, #32]
 steppers[0].seeking_vel = 100;
 8002be4:	4bae      	ldr	r3, [pc, #696]	; (8002ea0 <main+0x320>)
 8002be6:	2264      	movs	r2, #100	; 0x64
 8002be8:	62da      	str	r2, [r3, #44]	; 0x2c
 steppers[0].homing_vel = 200;
 8002bea:	4bad      	ldr	r3, [pc, #692]	; (8002ea0 <main+0x320>)
 8002bec:	22c8      	movs	r2, #200	; 0xc8
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
 steppers[0].pull_off = 500;
 8002bf0:	4bab      	ldr	r3, [pc, #684]	; (8002ea0 <main+0x320>)
 8002bf2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24
 steppers[0].stall_off=10000;
 8002bf8:	4ba9      	ldr	r3, [pc, #676]	; (8002ea0 <main+0x320>)
 8002bfa:	f242 7210 	movw	r2, #10000	; 0x2710
 8002bfe:	629a      	str	r2, [r3, #40]	; 0x28
 get_uart_flag=0;
 8002c00:	4bab      	ldr	r3, [pc, #684]	; (8002eb0 <main+0x330>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	701a      	strb	r2, [r3, #0]

 sFilterConfig.FilterBank = 0;
 8002c06:	4bab      	ldr	r3, [pc, #684]	; (8002eb4 <main+0x334>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	615a      	str	r2, [r3, #20]
 sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002c0c:	4ba9      	ldr	r3, [pc, #676]	; (8002eb4 <main+0x334>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	619a      	str	r2, [r3, #24]
 sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002c12:	4ba8      	ldr	r3, [pc, #672]	; (8002eb4 <main+0x334>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	61da      	str	r2, [r3, #28]
 sFilterConfig.FilterIdHigh = 0x0000;
 8002c18:	4ba6      	ldr	r3, [pc, #664]	; (8002eb4 <main+0x334>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
 sFilterConfig.FilterIdLow = 0x0000;
 8002c1e:	4ba5      	ldr	r3, [pc, #660]	; (8002eb4 <main+0x334>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	605a      	str	r2, [r3, #4]
 sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002c24:	4ba3      	ldr	r3, [pc, #652]	; (8002eb4 <main+0x334>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
 sFilterConfig.FilterMaskIdLow = 0x0000;
 8002c2a:	4ba2      	ldr	r3, [pc, #648]	; (8002eb4 <main+0x334>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	60da      	str	r2, [r3, #12]
 sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002c30:	4ba0      	ldr	r3, [pc, #640]	; (8002eb4 <main+0x334>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	611a      	str	r2, [r3, #16]
 //	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;
 sFilterConfig.FilterActivation=ENABLE;
 8002c36:	4b9f      	ldr	r3, [pc, #636]	; (8002eb4 <main+0x334>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	621a      	str	r2, [r3, #32]
 sFilterConfig.SlaveStartFilterBank=14;
 8002c3c:	4b9d      	ldr	r3, [pc, #628]	; (8002eb4 <main+0x334>)
 8002c3e:	220e      	movs	r2, #14
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24

 if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 8002c42:	499c      	ldr	r1, [pc, #624]	; (8002eb4 <main+0x334>)
 8002c44:	489c      	ldr	r0, [pc, #624]	; (8002eb8 <main+0x338>)
 8002c46:	f001 fe67 	bl	8004918 <HAL_CAN_ConfigFilter>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <main+0xd4>
 {
 	Error_Handler();
 8002c50:	f001 f99e 	bl	8003f90 <Error_Handler>
 }
 if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 8002c54:	4898      	ldr	r0, [pc, #608]	; (8002eb8 <main+0x338>)
 8002c56:	f001 ff3f 	bl	8004ad8 <HAL_CAN_Start>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <main+0xe4>
 {
 	Error_Handler();
 8002c60:	f001 f996 	bl	8003f90 <Error_Handler>
 }

 if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8002c64:	2103      	movs	r1, #3
 8002c66:	4894      	ldr	r0, [pc, #592]	; (8002eb8 <main+0x338>)
 8002c68:	f002 f9e5 	bl	8005036 <HAL_CAN_ActivateNotification>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <main+0xf6>
 {
 	Error_Handler();
 8002c72:	f001 f98d 	bl	8003f90 <Error_Handler>
 }
 printf("CAN_OK\r\n");
 8002c76:	4891      	ldr	r0, [pc, #580]	; (8002ebc <main+0x33c>)
 8002c78:	f006 ff80 	bl	8009b7c <puts>
uint8_t judgment[10];
uint8_t modeflag=0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
float rad_data[2];
float machine_coordinate_data[2];
float tip_coordinate_data[2];
float machine_origin_rad[10];
float machine_origin_coordinate[10];
int sent_step=0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
int next_step;
int16_t next_RMDpos;
int execution_step;
int execution_RMDpos;
machine_origin_coordinate[0]=0.0;
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]
machine_origin_coordinate[1]=300.0;
 8002c8e:	4b8c      	ldr	r3, [pc, #560]	; (8002ec0 <main+0x340>)
 8002c90:	60bb      	str	r3, [r7, #8]
BLDC_IK(machine_origin_coordinate[0],machine_origin_coordinate[1],&rad_data[0],&rad_data[1]);
 8002c92:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c96:	ed97 7a02 	vldr	s14, [r7, #8]
 8002c9a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c9e:	1d1a      	adds	r2, r3, #4
 8002ca0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	eef0 0a47 	vmov.f32	s1, s14
 8002cac:	eeb0 0a67 	vmov.f32	s0, s15
 8002cb0:	f000 ff52 	bl	8003b58 <BLDC_IK>
machine_origin_rad[0]=rad_data[0];
 8002cb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
machine_origin_rad[1]=rad_data[1];
 8002cb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cba:	633b      	str	r3, [r7, #48]	; 0x30
//TMCsetup();
printf("Init_OK\r\n");
 8002cbc:	4881      	ldr	r0, [pc, #516]	; (8002ec4 <main+0x344>)
 8002cbe:	f006 ff5d 	bl	8009b7c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_uart_flag=0;
 8002cc2:	4b7b      	ldr	r3, [pc, #492]	; (8002eb0 <main+0x330>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]
	  home_position_state=0;
 8002cc8:	4b7f      	ldr	r3, [pc, #508]	; (8002ec8 <main+0x348>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2, (uint8_t *)RxData, buffersize);
 8002cce:	4b7f      	ldr	r3, [pc, #508]	; (8002ecc <main+0x34c>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	497e      	ldr	r1, [pc, #504]	; (8002ed0 <main+0x350>)
 8002cd8:	487e      	ldr	r0, [pc, #504]	; (8002ed4 <main+0x354>)
 8002cda:	f004 fee9 	bl	8007ab0 <HAL_UART_Receive_IT>
//	  HAL_UART_Transmit(&huart2, (uint8_t *)RxData, buffersize,300);
	  //受信するまで待つ
	  while(!get_uart_flag){}
 8002cde:	bf00      	nop
 8002ce0:	4b73      	ldr	r3, [pc, #460]	; (8002eb0 <main+0x330>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0fb      	beq.n	8002ce0 <main+0x160>
	  get_can_flag=1;//canデータ受信用のフラグを0に
 8002ce8:	4b7b      	ldr	r3, [pc, #492]	; (8002ed8 <main+0x358>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	701a      	strb	r2, [r3, #0]
//		  machine_coordinate_data[1]=(float)transmit_receive_data[3];	//y2をfloatにする
//		  BLDC_IK(machine_coordinate_data[0],machine_coordinate_data[1],&rad_data[0],&rad_data[1]);
//		  transmit_receive_data[5]=transmit_receive_data[5]*10;
//		  transmit_receive_data[6]=transmit_receive_data[6]*10;
//	  }
	  mode_select= RxData[0];
 8002cee:	4b78      	ldr	r3, [pc, #480]	; (8002ed0 <main+0x350>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
	  if(home_position_state==1){	//初期位置モード
 8002cf6:	4b74      	ldr	r3, [pc, #464]	; (8002ec8 <main+0x348>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d116      	bne.n	8002d2c <main+0x1ac>
		  switch(mode_select){
 8002cfe:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10e      	bne.n	8002d24 <main+0x1a4>
		  case 0:
			  canid=0x01;
 8002d06:	4b75      	ldr	r3, [pc, #468]	; (8002edc <main+0x35c>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
			  EnterMotorMode();
 8002d0c:	f7fe f93e 	bl	8000f8c <EnterMotorMode>
			  BLDC_CANTx();
 8002d10:	f7fe faa6 	bl	8001260 <BLDC_CANTx>
			  canid=0x02;
 8002d14:	4b71      	ldr	r3, [pc, #452]	; (8002edc <main+0x35c>)
 8002d16:	2202      	movs	r2, #2
 8002d18:	601a      	str	r2, [r3, #0]
			  EnterMotorMode();
 8002d1a:	f7fe f937 	bl	8000f8c <EnterMotorMode>
			  BLDC_CANTx();
 8002d1e:	f7fe fa9f 	bl	8001260 <BLDC_CANTx>
			  break;
 8002d22:	e3b1      	b.n	8003488 <main+0x908>
//				  machine_origin_rad[0]=rad_data[0];
//				  machine_origin_rad[1]=rad_data[1];
//			  }
//			  break;
		  default:
			  get_can_flag=1;
 8002d24:	4b6c      	ldr	r3, [pc, #432]	; (8002ed8 <main+0x358>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
			  break;
 8002d2a:	e3ad      	b.n	8003488 <main+0x908>
		  }
	  }
	  else if(home_position_state==0){
 8002d2c:	4b66      	ldr	r3, [pc, #408]	; (8002ec8 <main+0x348>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f040 83a6 	bne.w	8003482 <main+0x902>

		  switch(mode_select){
 8002d36:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8002d3a:	3b31      	subs	r3, #49	; 0x31
 8002d3c:	2b42      	cmp	r3, #66	; 0x42
 8002d3e:	f200 839c 	bhi.w	800347a <main+0x8fa>
 8002d42:	a201      	add	r2, pc, #4	; (adr r2, 8002d48 <main+0x1c8>)
 8002d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d48:	08002e55 	.word	0x08002e55
 8002d4c:	08002e79 	.word	0x08002e79
 8002d50:	08002ee5 	.word	0x08002ee5
 8002d54:	08002f01 	.word	0x08002f01
 8002d58:	08002f2b 	.word	0x08002f2b
 8002d5c:	08002f3f 	.word	0x08002f3f
 8002d60:	08002f55 	.word	0x08002f55
 8002d64:	08002f9b 	.word	0x08002f9b
 8002d68:	08003123 	.word	0x08003123
 8002d6c:	0800347b 	.word	0x0800347b
 8002d70:	0800347b 	.word	0x0800347b
 8002d74:	0800347b 	.word	0x0800347b
 8002d78:	0800347b 	.word	0x0800347b
 8002d7c:	0800347b 	.word	0x0800347b
 8002d80:	0800347b 	.word	0x0800347b
 8002d84:	0800347b 	.word	0x0800347b
 8002d88:	0800347b 	.word	0x0800347b
 8002d8c:	0800347b 	.word	0x0800347b
 8002d90:	0800347b 	.word	0x0800347b
 8002d94:	0800347b 	.word	0x0800347b
 8002d98:	0800347b 	.word	0x0800347b
 8002d9c:	0800347b 	.word	0x0800347b
 8002da0:	0800347b 	.word	0x0800347b
 8002da4:	0800347b 	.word	0x0800347b
 8002da8:	0800347b 	.word	0x0800347b
 8002dac:	0800347b 	.word	0x0800347b
 8002db0:	0800347b 	.word	0x0800347b
 8002db4:	0800347b 	.word	0x0800347b
 8002db8:	0800347b 	.word	0x0800347b
 8002dbc:	0800347b 	.word	0x0800347b
 8002dc0:	0800347b 	.word	0x0800347b
 8002dc4:	0800347b 	.word	0x0800347b
 8002dc8:	0800347b 	.word	0x0800347b
 8002dcc:	0800347b 	.word	0x0800347b
 8002dd0:	0800347b 	.word	0x0800347b
 8002dd4:	0800347b 	.word	0x0800347b
 8002dd8:	0800347b 	.word	0x0800347b
 8002ddc:	0800347b 	.word	0x0800347b
 8002de0:	0800347b 	.word	0x0800347b
 8002de4:	0800347b 	.word	0x0800347b
 8002de8:	0800347b 	.word	0x0800347b
 8002dec:	0800347b 	.word	0x0800347b
 8002df0:	0800347b 	.word	0x0800347b
 8002df4:	0800347b 	.word	0x0800347b
 8002df8:	0800347b 	.word	0x0800347b
 8002dfc:	0800347b 	.word	0x0800347b
 8002e00:	0800347b 	.word	0x0800347b
 8002e04:	0800347b 	.word	0x0800347b
 8002e08:	080031bd 	.word	0x080031bd
 8002e0c:	08003249 	.word	0x08003249
 8002e10:	080033f5 	.word	0x080033f5
 8002e14:	08003435 	.word	0x08003435
 8002e18:	0800347b 	.word	0x0800347b
 8002e1c:	0800347b 	.word	0x0800347b
 8002e20:	0800347b 	.word	0x0800347b
 8002e24:	0800347b 	.word	0x0800347b
 8002e28:	0800347b 	.word	0x0800347b
 8002e2c:	0800347b 	.word	0x0800347b
 8002e30:	0800347b 	.word	0x0800347b
 8002e34:	0800347b 	.word	0x0800347b
 8002e38:	0800347b 	.word	0x0800347b
 8002e3c:	0800347b 	.word	0x0800347b
 8002e40:	0800347b 	.word	0x0800347b
 8002e44:	0800347b 	.word	0x0800347b
 8002e48:	0800347b 	.word	0x0800347b
 8002e4c:	0800347b 	.word	0x0800347b
 8002e50:	0800346f 	.word	0x0800346f
		  printf("command_mode\r\n");
		  case '1':	//モーターON
			  canid=0x01;
 8002e54:	4b21      	ldr	r3, [pc, #132]	; (8002edc <main+0x35c>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
			  EnterMotorMode();
 8002e5a:	f7fe f897 	bl	8000f8c <EnterMotorMode>
			  BLDC_CANTx();
 8002e5e:	f7fe f9ff 	bl	8001260 <BLDC_CANTx>
			  canid=0x02;
 8002e62:	4b1e      	ldr	r3, [pc, #120]	; (8002edc <main+0x35c>)
 8002e64:	2202      	movs	r2, #2
 8002e66:	601a      	str	r2, [r3, #0]
			  EnterMotorMode();
 8002e68:	f7fe f890 	bl	8000f8c <EnterMotorMode>
			  BLDC_CANTx();
 8002e6c:	f7fe f9f8 	bl	8001260 <BLDC_CANTx>
			  printf("Enter motor\r\n");
 8002e70:	481b      	ldr	r0, [pc, #108]	; (8002ee0 <main+0x360>)
 8002e72:	f006 fe83 	bl	8009b7c <puts>

			  break;
 8002e76:	e307      	b.n	8003488 <main+0x908>
		  case '2':	//モーターOFF
			  canid=0x01;
 8002e78:	4b18      	ldr	r3, [pc, #96]	; (8002edc <main+0x35c>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
			  ExitMotorMode();
 8002e7e:	f7fe f8c1 	bl	8001004 <ExitMotorMode>
			  BLDC_CANTx();
 8002e82:	f7fe f9ed 	bl	8001260 <BLDC_CANTx>
			  canid=0x02;
 8002e86:	4b15      	ldr	r3, [pc, #84]	; (8002edc <main+0x35c>)
 8002e88:	2202      	movs	r2, #2
 8002e8a:	601a      	str	r2, [r3, #0]
			  ExitMotorMode();
 8002e8c:	f7fe f8ba 	bl	8001004 <ExitMotorMode>
			  BLDC_CANTx();
 8002e90:	f7fe f9e6 	bl	8001260 <BLDC_CANTx>
			  break;
 8002e94:	e2f8      	b.n	8003488 <main+0x908>
 8002e96:	bf00      	nop
 8002e98:	20000018 	.word	0x20000018
 8002e9c:	2000022c 	.word	0x2000022c
 8002ea0:	200008e0 	.word	0x200008e0
 8002ea4:	08002151 	.word	0x08002151
 8002ea8:	0800212d 	.word	0x0800212d
 8002eac:	447a0000 	.word	0x447a0000
 8002eb0:	20000429 	.word	0x20000429
 8002eb4:	200002fc 	.word	0x200002fc
 8002eb8:	20000204 	.word	0x20000204
 8002ebc:	0800dc88 	.word	0x0800dc88
 8002ec0:	43960000 	.word	0x43960000
 8002ec4:	0800dc90 	.word	0x0800dc90
 8002ec8:	20000428 	.word	0x20000428
 8002ecc:	20000008 	.word	0x20000008
 8002ed0:	2000036c 	.word	0x2000036c
 8002ed4:	200002b8 	.word	0x200002b8
 8002ed8:	2000042a 	.word	0x2000042a
 8002edc:	20000424 	.word	0x20000424
 8002ee0:	0800dc9c 	.word	0x0800dc9c
		  case '3':	//動作モード
			  if(selectmode_flag==0){
 8002ee4:	4baa      	ldr	r3, [pc, #680]	; (8003190 <main+0x610>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f040 82cc 	bne.w	8003486 <main+0x906>
				  t_position[0] = rad_data[0];
 8002eee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ef0:	4aa8      	ldr	r2, [pc, #672]	; (8003194 <main+0x614>)
 8002ef2:	6013      	str	r3, [r2, #0]
				  t_position[1] = rad_data[1];
 8002ef4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ef6:	4aa7      	ldr	r2, [pc, #668]	; (8003194 <main+0x614>)
 8002ef8:	6053      	str	r3, [r2, #4]
				  BLDC_MotorRotate();
 8002efa:	f7fe fc49 	bl	8001790 <BLDC_MotorRotate>
//				  sent_step=(int)transmit_receive_data[4];
//				  sent_step=(sent_step/10)*3200;
//				  prepareAbsoluteMovement(sent_step);
//				  runAndWait();
			  }
			  break;
 8002efe:	e2c2      	b.n	8003486 <main+0x906>
		  case '4':
			  t_position[0] = 0;
 8002f00:	4ba4      	ldr	r3, [pc, #656]	; (8003194 <main+0x614>)
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
			  t_position[1] = 0;
 8002f08:	4ba2      	ldr	r3, [pc, #648]	; (8003194 <main+0x614>)
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	605a      	str	r2, [r3, #4]
			  BLDC_M2Rotate();
 8002f10:	f7fe ff62 	bl	8001dd8 <BLDC_M2Rotate>
			  BLDC_M1Rotate();
 8002f14:	f7fe fe44 	bl	8001ba0 <BLDC_M1Rotate>
			  t_position[0] = machine_origin_rad[0];	//スタンバイ状態
 8002f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1a:	4a9e      	ldr	r2, [pc, #632]	; (8003194 <main+0x614>)
 8002f1c:	6013      	str	r3, [r2, #0]
			  t_position[1] = machine_origin_rad[1];
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	4a9c      	ldr	r2, [pc, #624]	; (8003194 <main+0x614>)
 8002f22:	6053      	str	r3, [r2, #4]
			  BLDC_MotorRotate();
 8002f24:	f7fe fc34 	bl	8001790 <BLDC_MotorRotate>
			  break;
 8002f28:	e2ae      	b.n	8003488 <main+0x908>
		  case '5':	//初期状態へ戻る
			  t_position[0] = 0;
 8002f2a:	4b9a      	ldr	r3, [pc, #616]	; (8003194 <main+0x614>)
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
			  t_position[1] = M_PI;
 8002f32:	4b98      	ldr	r3, [pc, #608]	; (8003194 <main+0x614>)
 8002f34:	4a98      	ldr	r2, [pc, #608]	; (8003198 <main+0x618>)
 8002f36:	605a      	str	r2, [r3, #4]
			  BLDC_MotorRotate();
 8002f38:	f7fe fc2a 	bl	8001790 <BLDC_MotorRotate>
			  break;
 8002f3c:	e2a4      	b.n	8003488 <main+0x908>
		  case '6':	//腕伸ばした状態
			  t_position[0] = 0;
 8002f3e:	4b95      	ldr	r3, [pc, #596]	; (8003194 <main+0x614>)
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
			  t_position[1] = 0;
 8002f46:	4b93      	ldr	r3, [pc, #588]	; (8003194 <main+0x614>)
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	605a      	str	r2, [r3, #4]
			  BLDC_MotorRotate();
 8002f4e:	f7fe fc1f 	bl	8001790 <BLDC_MotorRotate>
			  break;
 8002f52:	e299      	b.n	8003488 <main+0x908>
		  case '7':	//ティーチングモード開始
			  canid=0x01;
 8002f54:	4b91      	ldr	r3, [pc, #580]	; (800319c <main+0x61c>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 1.0, 0.0);
 8002f5a:	ed9f 2a91 	vldr	s4, [pc, #580]	; 80031a0 <main+0x620>
 8002f5e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8002f62:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 80031a0 <main+0x620>
 8002f66:	eddf 0a8e 	vldr	s1, [pc, #568]	; 80031a0 <main+0x620>
 8002f6a:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 80031a0 <main+0x620>
 8002f6e:	f7fe f885 	bl	800107c <pack_cmd>
			  BLDC_CANTx();
 8002f72:	f7fe f975 	bl	8001260 <BLDC_CANTx>
			  canid=0x02;
 8002f76:	4b89      	ldr	r3, [pc, #548]	; (800319c <main+0x61c>)
 8002f78:	2202      	movs	r2, #2
 8002f7a:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 1.0, 0.0);
 8002f7c:	ed9f 2a88 	vldr	s4, [pc, #544]	; 80031a0 <main+0x620>
 8002f80:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8002f84:	ed9f 1a86 	vldr	s2, [pc, #536]	; 80031a0 <main+0x620>
 8002f88:	eddf 0a85 	vldr	s1, [pc, #532]	; 80031a0 <main+0x620>
 8002f8c:	ed9f 0a84 	vldr	s0, [pc, #528]	; 80031a0 <main+0x620>
 8002f90:	f7fe f874 	bl	800107c <pack_cmd>
			  BLDC_CANTx();
 8002f94:	f7fe f964 	bl	8001260 <BLDC_CANTx>
			  break;
 8002f98:	e276      	b.n	8003488 <main+0x908>
		  case '8':	//ティーチング決定
			  canid=0x01;
 8002f9a:	4b80      	ldr	r3, [pc, #512]	; (800319c <main+0x61c>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 2.0, 0.0);
 8002fa0:	ed9f 2a7f 	vldr	s4, [pc, #508]	; 80031a0 <main+0x620>
 8002fa4:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8002fa8:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 80031a0 <main+0x620>
 8002fac:	eddf 0a7c 	vldr	s1, [pc, #496]	; 80031a0 <main+0x620>
 8002fb0:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 80031a0 <main+0x620>
 8002fb4:	f7fe f862 	bl	800107c <pack_cmd>
			  BLDC_CANTx();
 8002fb8:	f7fe f952 	bl	8001260 <BLDC_CANTx>
			  unpack_reply();
 8002fbc:	f7fe f9a8 	bl	8001310 <unpack_reply>
			  pack_cmd(p_getdata, 0.0, 100.0, 3.0, 0.0);
 8002fc0:	4b78      	ldr	r3, [pc, #480]	; (80031a4 <main+0x624>)
 8002fc2:	edd3 7a00 	vldr	s15, [r3]
 8002fc6:	ed9f 2a76 	vldr	s4, [pc, #472]	; 80031a0 <main+0x620>
 8002fca:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8002fce:	ed9f 1a76 	vldr	s2, [pc, #472]	; 80031a8 <main+0x628>
 8002fd2:	eddf 0a73 	vldr	s1, [pc, #460]	; 80031a0 <main+0x620>
 8002fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8002fda:	f7fe f84f 	bl	800107c <pack_cmd>
			  BLDC_CANTx();
 8002fde:	f7fe f93f 	bl	8001260 <BLDC_CANTx>
			  unpack_reply();
 8002fe2:	f7fe f995 	bl	8001310 <unpack_reply>
			  rad_data[0]=p_getdata;
 8002fe6:	4b6f      	ldr	r3, [pc, #444]	; (80031a4 <main+0x624>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	667b      	str	r3, [r7, #100]	; 0x64
			  canid=0x02;
 8002fec:	4b6b      	ldr	r3, [pc, #428]	; (800319c <main+0x61c>)
 8002fee:	2202      	movs	r2, #2
 8002ff0:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 2.0, 0.0);
 8002ff2:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 80031a0 <main+0x620>
 8002ff6:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8002ffa:	ed9f 1a69 	vldr	s2, [pc, #420]	; 80031a0 <main+0x620>
 8002ffe:	eddf 0a68 	vldr	s1, [pc, #416]	; 80031a0 <main+0x620>
 8003002:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80031a0 <main+0x620>
 8003006:	f7fe f839 	bl	800107c <pack_cmd>
			  BLDC_CANTx();
 800300a:	f7fe f929 	bl	8001260 <BLDC_CANTx>
			  unpack_reply();
 800300e:	f7fe f97f 	bl	8001310 <unpack_reply>
			  pack_cmd(p_getdata, 0.0, 100.0, 3.0, 0.0);
 8003012:	4b64      	ldr	r3, [pc, #400]	; (80031a4 <main+0x624>)
 8003014:	edd3 7a00 	vldr	s15, [r3]
 8003018:	ed9f 2a61 	vldr	s4, [pc, #388]	; 80031a0 <main+0x620>
 800301c:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8003020:	ed9f 1a61 	vldr	s2, [pc, #388]	; 80031a8 <main+0x628>
 8003024:	eddf 0a5e 	vldr	s1, [pc, #376]	; 80031a0 <main+0x620>
 8003028:	eeb0 0a67 	vmov.f32	s0, s15
 800302c:	f7fe f826 	bl	800107c <pack_cmd>
			  BLDC_CANTx();
 8003030:	f7fe f916 	bl	8001260 <BLDC_CANTx>
			  unpack_reply();
 8003034:	f7fe f96c 	bl	8001310 <unpack_reply>
			  rad_data[1]=p_getdata;
 8003038:	4b5a      	ldr	r3, [pc, #360]	; (80031a4 <main+0x624>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	66bb      	str	r3, [r7, #104]	; 0x68
			  BLDC_FK(-rad_data[0],-(rad_data[1]+M_PI),&machine_coordinate_data[0],&machine_coordinate_data[1]);
 800303e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003042:	eeb1 8a67 	vneg.f32	s16, s15
 8003046:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd fa9d 	bl	8000588 <__aeabi_f2d>
 800304e:	a34e      	add	r3, pc, #312	; (adr r3, 8003188 <main+0x608>)
 8003050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003054:	f7fd f93a 	bl	80002cc <__adddf3>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	f7fd fdc2 	bl	8000be8 <__aeabi_d2f>
 8003064:	4603      	mov	r3, r0
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eef1 7a67 	vneg.f32	s15, s15
 800306e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003072:	1d1a      	adds	r2, r3, #4
 8003074:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003078:	4611      	mov	r1, r2
 800307a:	4618      	mov	r0, r3
 800307c:	eef0 0a67 	vmov.f32	s1, s15
 8003080:	eeb0 0a48 	vmov.f32	s0, s16
 8003084:	f000 fcbe 	bl	8003a04 <BLDC_FK>
			  sent_data[0]=round(machine_coordinate_data[0]);	//手先座標系から機械座標系への変換
 8003088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd fa7c 	bl	8000588 <__aeabi_f2d>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	ec43 2b10 	vmov	d0, r2, r3
 8003098:	f008 ff46 	bl	800bf28 <round>
 800309c:	ec53 2b10 	vmov	r2, r3, d0
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	f7fd fd78 	bl	8000b98 <__aeabi_d2iz>
 80030a8:	4603      	mov	r3, r0
 80030aa:	b21b      	sxth	r3, r3
 80030ac:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
			  sent_data[1]=round(machine_coordinate_data[1]);
 80030b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd fa68 	bl	8000588 <__aeabi_f2d>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	ec43 2b10 	vmov	d0, r2, r3
 80030c0:	f008 ff32 	bl	800bf28 <round>
 80030c4:	ec53 2b10 	vmov	r2, r3, d0
 80030c8:	4610      	mov	r0, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	f7fd fd64 	bl	8000b98 <__aeabi_d2iz>
 80030d0:	4603      	mov	r3, r0
 80030d2:	b21b      	sxth	r3, r3
 80030d4:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
			  TxData[0]=0xAA;
 80030d8:	4b34      	ldr	r3, [pc, #208]	; (80031ac <main+0x62c>)
 80030da:	22aa      	movs	r2, #170	; 0xaa
 80030dc:	701a      	strb	r2, [r3, #0]
			  TxData[5]=sent_data[0]&0xFF;
 80030de:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	4b31      	ldr	r3, [pc, #196]	; (80031ac <main+0x62c>)
 80030e6:	715a      	strb	r2, [r3, #5]
			  TxData[6]=(sent_data[0]>>8)&0xFF;
 80030e8:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 80030ec:	121b      	asrs	r3, r3, #8
 80030ee:	b21b      	sxth	r3, r3
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	4b2e      	ldr	r3, [pc, #184]	; (80031ac <main+0x62c>)
 80030f4:	719a      	strb	r2, [r3, #6]
			  TxData[7]=sent_data[1]&0xFF;
 80030f6:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	4b2b      	ldr	r3, [pc, #172]	; (80031ac <main+0x62c>)
 80030fe:	71da      	strb	r2, [r3, #7]
			  TxData[8]=(sent_data[1]>>8)&0xFF;
 8003100:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8003104:	121b      	asrs	r3, r3, #8
 8003106:	b21b      	sxth	r3, r3
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4b28      	ldr	r3, [pc, #160]	; (80031ac <main+0x62c>)
 800310c:	721a      	strb	r2, [r3, #8]
			  TxData[19]=0xAA;
 800310e:	4b27      	ldr	r3, [pc, #156]	; (80031ac <main+0x62c>)
 8003110:	22aa      	movs	r2, #170	; 0xaa
 8003112:	74da      	strb	r2, [r3, #19]
			  HAL_UART_Transmit(&huart2,TxData,sizeof(TxData),100);
 8003114:	2364      	movs	r3, #100	; 0x64
 8003116:	2214      	movs	r2, #20
 8003118:	4924      	ldr	r1, [pc, #144]	; (80031ac <main+0x62c>)
 800311a:	4825      	ldr	r0, [pc, #148]	; (80031b0 <main+0x630>)
 800311c:	f004 fb94 	bl	8007848 <HAL_UART_Transmit>
			  break;
 8003120:	e1b2      	b.n	8003488 <main+0x908>
		  case '9':
			  can_data[0] = 0xA4;
 8003122:	4b24      	ldr	r3, [pc, #144]	; (80031b4 <main+0x634>)
 8003124:	22a4      	movs	r2, #164	; 0xa4
 8003126:	701a      	strb	r2, [r3, #0]
			  can_data[2] = 0x2C;	//speed low
 8003128:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <main+0x634>)
 800312a:	222c      	movs	r2, #44	; 0x2c
 800312c:	709a      	strb	r2, [r3, #2]
			  can_data[3] = 0x01;	//speed high
 800312e:	4b21      	ldr	r3, [pc, #132]	; (80031b4 <main+0x634>)
 8003130:	2201      	movs	r2, #1
 8003132:	70da      	strb	r2, [r3, #3]
			  can_data[4] =(transmit_receive_data[5]&0xFF);	//poslow
 8003134:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8003138:	b2da      	uxtb	r2, r3
 800313a:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <main+0x634>)
 800313c:	711a      	strb	r2, [r3, #4]
			  can_data[5] =(transmit_receive_data[5]>>8)&0xFF;
 800313e:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8003142:	121b      	asrs	r3, r3, #8
 8003144:	b21b      	sxth	r3, r3
 8003146:	b2da      	uxtb	r2, r3
 8003148:	4b1a      	ldr	r3, [pc, #104]	; (80031b4 <main+0x634>)
 800314a:	715a      	strb	r2, [r3, #5]
			  RMDTx();
 800314c:	f7fe f97c 	bl	8001448 <RMDTx>
			  sent_step=(int)transmit_receive_data[4];
 8003150:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 8003154:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			  sent_step=(sent_step/10)*3200;
 8003158:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800315c:	4a16      	ldr	r2, [pc, #88]	; (80031b8 <main+0x638>)
 800315e:	fb82 1203 	smull	r1, r2, r2, r3
 8003162:	1092      	asrs	r2, r2, #2
 8003164:	17db      	asrs	r3, r3, #31
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 800316c:	fb02 f303 	mul.w	r3, r2, r3
 8003170:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

			  prepareAbsoluteMovement(sent_step);
 8003174:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8003178:	f7ff f87c 	bl	8002274 <prepareAbsoluteMovement>
			  runAndWait();
 800317c:	f7ff fa00 	bl	8002580 <runAndWait>
			  break;
 8003180:	e182      	b.n	8003488 <main+0x908>
 8003182:	bf00      	nop
 8003184:	f3af 8000 	nop.w
 8003188:	54442d18 	.word	0x54442d18
 800318c:	400921fb 	.word	0x400921fb
 8003190:	2000042c 	.word	0x2000042c
 8003194:	2000043c 	.word	0x2000043c
 8003198:	40490fdb 	.word	0x40490fdb
 800319c:	20000424 	.word	0x20000424
 80031a0:	00000000 	.word	0x00000000
 80031a4:	20000430 	.word	0x20000430
 80031a8:	42c80000 	.word	0x42c80000
 80031ac:	20000358 	.word	0x20000358
 80031b0:	200002b8 	.word	0x200002b8
 80031b4:	20000380 	.word	0x20000380
 80031b8:	66666667 	.word	0x66666667
		  case 'a':
			  next_RMDpos+=3600;
 80031bc:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80031c0:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2

			  RMDTx_can_data[0] = 0xA4;
 80031ca:	4bc1      	ldr	r3, [pc, #772]	; (80034d0 <main+0x950>)
 80031cc:	22a4      	movs	r2, #164	; 0xa4
 80031ce:	701a      	strb	r2, [r3, #0]
			  RMDTx_can_data[1] = 0x00;
 80031d0:	4bbf      	ldr	r3, [pc, #764]	; (80034d0 <main+0x950>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	705a      	strb	r2, [r3, #1]
			  RMDTx_can_data[2] = 0x2C;	//speed low
 80031d6:	4bbe      	ldr	r3, [pc, #760]	; (80034d0 <main+0x950>)
 80031d8:	222c      	movs	r2, #44	; 0x2c
 80031da:	709a      	strb	r2, [r3, #2]
			  RMDTx_can_data[3] = 0x01;	//speed high
 80031dc:	4bbc      	ldr	r3, [pc, #752]	; (80034d0 <main+0x950>)
 80031de:	2201      	movs	r2, #1
 80031e0:	70da      	strb	r2, [r3, #3]
			  RMDTx_can_data[4] =next_RMDpos&0xFF;	//poslow
 80031e2:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	4bb9      	ldr	r3, [pc, #740]	; (80034d0 <main+0x950>)
 80031ea:	711a      	strb	r2, [r3, #4]
			  RMDTx_can_data[5] =next_RMDpos>>8;
 80031ec:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 80031f0:	121b      	asrs	r3, r3, #8
 80031f2:	b21b      	sxth	r3, r3
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	4bb6      	ldr	r3, [pc, #728]	; (80034d0 <main+0x950>)
 80031f8:	715a      	strb	r2, [r3, #5]
			  RMDTx_can_data[6] = 0x00;
 80031fa:	4bb5      	ldr	r3, [pc, #724]	; (80034d0 <main+0x950>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	719a      	strb	r2, [r3, #6]
			  RMDTx_can_data[7] = 0x00;
 8003200:	4bb3      	ldr	r3, [pc, #716]	; (80034d0 <main+0x950>)
 8003202:	2200      	movs	r2, #0
 8003204:	71da      	strb	r2, [r3, #7]
			  RMDTx();
 8003206:	f7fe f91f 	bl	8001448 <RMDTx>
			  sent_step+=10;
 800320a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800320e:	330a      	adds	r3, #10
 8003210:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			  execution_step=(sent_step/10)*3200;
 8003214:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003218:	4aae      	ldr	r2, [pc, #696]	; (80034d4 <main+0x954>)
 800321a:	fb82 1203 	smull	r1, r2, r2, r3
 800321e:	1092      	asrs	r2, r2, #2
 8003220:	17db      	asrs	r3, r3, #31
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8003228:	fb02 f303 	mul.w	r3, r2, r3
 800322c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			  printf("sent_step=%d\r\n",execution_step);
 8003230:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8003234:	48a8      	ldr	r0, [pc, #672]	; (80034d8 <main+0x958>)
 8003236:	f006 fc1b 	bl	8009a70 <iprintf>
			  prepareAbsoluteMovement(execution_step);
 800323a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800323e:	f7ff f819 	bl	8002274 <prepareAbsoluteMovement>
			  runAndWait();
 8003242:	f7ff f99d 	bl	8002580 <runAndWait>
			  break;
 8003246:	e11f      	b.n	8003488 <main+0x908>
		  case 'b':
			  canid=0x01;
 8003248:	4ba4      	ldr	r3, [pc, #656]	; (80034dc <main+0x95c>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 3.0, 0.0);
 800324e:	ed9f 2aa4 	vldr	s4, [pc, #656]	; 80034e0 <main+0x960>
 8003252:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8003256:	ed9f 1aa2 	vldr	s2, [pc, #648]	; 80034e0 <main+0x960>
 800325a:	eddf 0aa1 	vldr	s1, [pc, #644]	; 80034e0 <main+0x960>
 800325e:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 80034e0 <main+0x960>
 8003262:	f7fd ff0b 	bl	800107c <pack_cmd>
			  BLDC_CANTx();
 8003266:	f7fd fffb 	bl	8001260 <BLDC_CANTx>
			  unpack_reply();
 800326a:	f7fe f851 	bl	8001310 <unpack_reply>
			  rad_data[0]=p_getdata;
 800326e:	4b9d      	ldr	r3, [pc, #628]	; (80034e4 <main+0x964>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	667b      	str	r3, [r7, #100]	; 0x64
			  canid=0x02;
 8003274:	4b99      	ldr	r3, [pc, #612]	; (80034dc <main+0x95c>)
 8003276:	2202      	movs	r2, #2
 8003278:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 3.0, 0.0);
 800327a:	ed9f 2a99 	vldr	s4, [pc, #612]	; 80034e0 <main+0x960>
 800327e:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8003282:	ed9f 1a97 	vldr	s2, [pc, #604]	; 80034e0 <main+0x960>
 8003286:	eddf 0a96 	vldr	s1, [pc, #600]	; 80034e0 <main+0x960>
 800328a:	ed9f 0a95 	vldr	s0, [pc, #596]	; 80034e0 <main+0x960>
 800328e:	f7fd fef5 	bl	800107c <pack_cmd>
			  BLDC_CANTx();
 8003292:	f7fd ffe5 	bl	8001260 <BLDC_CANTx>
			  unpack_reply();
 8003296:	f7fe f83b 	bl	8001310 <unpack_reply>
			  rad_data[1]=p_getdata;
 800329a:	4b92      	ldr	r3, [pc, #584]	; (80034e4 <main+0x964>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	66bb      	str	r3, [r7, #104]	; 0x68

			  canid=0x01;
 80032a0:	4b8e      	ldr	r3, [pc, #568]	; (80034dc <main+0x95c>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
			  pack_cmd(rad_data[0]+0.1, 0.0, 50.0, 2.0, 0.0);
 80032a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fd f96d 	bl	8000588 <__aeabi_f2d>
 80032ae:	a386      	add	r3, pc, #536	; (adr r3, 80034c8 <main+0x948>)
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f7fd f80a 	bl	80002cc <__adddf3>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4610      	mov	r0, r2
 80032be:	4619      	mov	r1, r3
 80032c0:	f7fd fc92 	bl	8000be8 <__aeabi_d2f>
 80032c4:	4603      	mov	r3, r0
 80032c6:	ed9f 2a86 	vldr	s4, [pc, #536]	; 80034e0 <main+0x960>
 80032ca:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 80032ce:	ed9f 1a86 	vldr	s2, [pc, #536]	; 80034e8 <main+0x968>
 80032d2:	eddf 0a83 	vldr	s1, [pc, #524]	; 80034e0 <main+0x960>
 80032d6:	ee00 3a10 	vmov	s0, r3
 80032da:	f7fd fecf 	bl	800107c <pack_cmd>
			  BLDC_CANTx();
 80032de:	f7fd ffbf 	bl	8001260 <BLDC_CANTx>
			  unpack_reply();
 80032e2:	f7fe f815 	bl	8001310 <unpack_reply>
			  rad_data[0]=p_getdata;
 80032e6:	4b7f      	ldr	r3, [pc, #508]	; (80034e4 <main+0x964>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	667b      	str	r3, [r7, #100]	; 0x64
			  canid=0x02;
 80032ec:	4b7b      	ldr	r3, [pc, #492]	; (80034dc <main+0x95c>)
 80032ee:	2202      	movs	r2, #2
 80032f0:	601a      	str	r2, [r3, #0]
			  pack_cmd(rad_data[1]+0.1, 0.0, 50.0, 2.0, 0.0);
 80032f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd f947 	bl	8000588 <__aeabi_f2d>
 80032fa:	a373      	add	r3, pc, #460	; (adr r3, 80034c8 <main+0x948>)
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	f7fc ffe4 	bl	80002cc <__adddf3>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4610      	mov	r0, r2
 800330a:	4619      	mov	r1, r3
 800330c:	f7fd fc6c 	bl	8000be8 <__aeabi_d2f>
 8003310:	4603      	mov	r3, r0
 8003312:	ed9f 2a73 	vldr	s4, [pc, #460]	; 80034e0 <main+0x960>
 8003316:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 800331a:	ed9f 1a73 	vldr	s2, [pc, #460]	; 80034e8 <main+0x968>
 800331e:	eddf 0a70 	vldr	s1, [pc, #448]	; 80034e0 <main+0x960>
 8003322:	ee00 3a10 	vmov	s0, r3
 8003326:	f7fd fea9 	bl	800107c <pack_cmd>
			  BLDC_CANTx();
 800332a:	f7fd ff99 	bl	8001260 <BLDC_CANTx>
			  unpack_reply();
 800332e:	f7fd ffef 	bl	8001310 <unpack_reply>
			  rad_data[1]=p_getdata;
 8003332:	4b6c      	ldr	r3, [pc, #432]	; (80034e4 <main+0x964>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	66bb      	str	r3, [r7, #104]	; 0x68

			  BLDC_FK(rad_data[0],rad_data[1],&machine_coordinate_data[0],&machine_coordinate_data[1]);
 8003338:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800333c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8003340:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003344:	1d1a      	adds	r2, r3, #4
 8003346:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	eef0 0a47 	vmov.f32	s1, s14
 8003352:	eeb0 0a67 	vmov.f32	s0, s15
 8003356:	f000 fb55 	bl	8003a04 <BLDC_FK>
			  sent_data[0]=round(machine_coordinate_data[0]);	//手先座標系から機械座標系への変換
 800335a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd f913 	bl	8000588 <__aeabi_f2d>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	ec43 2b10 	vmov	d0, r2, r3
 800336a:	f008 fddd 	bl	800bf28 <round>
 800336e:	ec53 2b10 	vmov	r2, r3, d0
 8003372:	4610      	mov	r0, r2
 8003374:	4619      	mov	r1, r3
 8003376:	f7fd fc0f 	bl	8000b98 <__aeabi_d2iz>
 800337a:	4603      	mov	r3, r0
 800337c:	b21b      	sxth	r3, r3
 800337e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
			  sent_data[1]=round(machine_coordinate_data[1]);
 8003382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd f8ff 	bl	8000588 <__aeabi_f2d>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	ec43 2b10 	vmov	d0, r2, r3
 8003392:	f008 fdc9 	bl	800bf28 <round>
 8003396:	ec53 2b10 	vmov	r2, r3, d0
 800339a:	4610      	mov	r0, r2
 800339c:	4619      	mov	r1, r3
 800339e:	f7fd fbfb 	bl	8000b98 <__aeabi_d2iz>
 80033a2:	4603      	mov	r3, r0
 80033a4:	b21b      	sxth	r3, r3
 80033a6:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
			  TxData[0]=0xAA;
 80033aa:	4b50      	ldr	r3, [pc, #320]	; (80034ec <main+0x96c>)
 80033ac:	22aa      	movs	r2, #170	; 0xaa
 80033ae:	701a      	strb	r2, [r3, #0]
			  TxData[5]=sent_data[0]&0xFF;
 80033b0:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	4b4d      	ldr	r3, [pc, #308]	; (80034ec <main+0x96c>)
 80033b8:	715a      	strb	r2, [r3, #5]
			  TxData[6]=(sent_data[0]>>8)&0xFF;
 80033ba:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 80033be:	121b      	asrs	r3, r3, #8
 80033c0:	b21b      	sxth	r3, r3
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	4b49      	ldr	r3, [pc, #292]	; (80034ec <main+0x96c>)
 80033c6:	719a      	strb	r2, [r3, #6]
			  TxData[7]=sent_data[1]&0xFF;
 80033c8:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	4b47      	ldr	r3, [pc, #284]	; (80034ec <main+0x96c>)
 80033d0:	71da      	strb	r2, [r3, #7]
			  TxData[8]=(sent_data[1]>>8)&0xFF;
 80033d2:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 80033d6:	121b      	asrs	r3, r3, #8
 80033d8:	b21b      	sxth	r3, r3
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	4b43      	ldr	r3, [pc, #268]	; (80034ec <main+0x96c>)
 80033de:	721a      	strb	r2, [r3, #8]
			  TxData[19]=0xAA;
 80033e0:	4b42      	ldr	r3, [pc, #264]	; (80034ec <main+0x96c>)
 80033e2:	22aa      	movs	r2, #170	; 0xaa
 80033e4:	74da      	strb	r2, [r3, #19]
			  HAL_UART_Transmit(&huart2,TxData,sizeof(TxData),100);
 80033e6:	2364      	movs	r3, #100	; 0x64
 80033e8:	2214      	movs	r2, #20
 80033ea:	4940      	ldr	r1, [pc, #256]	; (80034ec <main+0x96c>)
 80033ec:	4840      	ldr	r0, [pc, #256]	; (80034f0 <main+0x970>)
 80033ee:	f004 fa2b 	bl	8007848 <HAL_UART_Transmit>

			  break;
 80033f2:	e049      	b.n	8003488 <main+0x908>
		  case 'c':
			  sent_step=10;
 80033f4:	230a      	movs	r3, #10
 80033f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			  sent_step=(sent_step/10)*3200;
 80033fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033fe:	4a35      	ldr	r2, [pc, #212]	; (80034d4 <main+0x954>)
 8003400:	fb82 1203 	smull	r1, r2, r2, r3
 8003404:	1092      	asrs	r2, r2, #2
 8003406:	17db      	asrs	r3, r3, #31
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 800340e:	fb02 f303 	mul.w	r3, r2, r3
 8003412:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			  printf("sent_step=%d\r\n",sent_step);
 8003416:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800341a:	482f      	ldr	r0, [pc, #188]	; (80034d8 <main+0x958>)
 800341c:	f006 fb28 	bl	8009a70 <iprintf>
			  prepareAbsoluteMovement(sent_step);
 8003420:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8003424:	f7fe ff26 	bl	8002274 <prepareAbsoluteMovement>
			  runAndWait();
 8003428:	f7ff f8aa 	bl	8002580 <runAndWait>
			  HAL_Delay(100);
 800342c:	2064      	movs	r0, #100	; 0x64
 800342e:	f001 f953 	bl	80046d8 <HAL_Delay>
			  break;
 8003432:	e029      	b.n	8003488 <main+0x908>
		  case 'd':
			  sent_step=0;
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			  sent_step=(sent_step/10)*3200;
 800343a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800343e:	4a25      	ldr	r2, [pc, #148]	; (80034d4 <main+0x954>)
 8003440:	fb82 1203 	smull	r1, r2, r2, r3
 8003444:	1092      	asrs	r2, r2, #2
 8003446:	17db      	asrs	r3, r3, #31
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			  printf("sent_step=%d\r\n",sent_step);
 8003456:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800345a:	481f      	ldr	r0, [pc, #124]	; (80034d8 <main+0x958>)
 800345c:	f006 fb08 	bl	8009a70 <iprintf>
			  prepareAbsoluteMovement(sent_step);
 8003460:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8003464:	f7fe ff06 	bl	8002274 <prepareAbsoluteMovement>
			  runAndWait();
 8003468:	f7ff f88a 	bl	8002580 <runAndWait>
			  break;
 800346c:	e00c      	b.n	8003488 <main+0x908>
		  case 's':
			  printf("TMCsetup\r\n");
 800346e:	4821      	ldr	r0, [pc, #132]	; (80034f4 <main+0x974>)
 8003470:	f006 fb84 	bl	8009b7c <puts>

			  TMCsetup();
 8003474:	f7ff f8a6 	bl	80025c4 <TMCsetup>
			  break;
 8003478:	e006      	b.n	8003488 <main+0x908>
		  default:
				  get_can_flag=1;
 800347a:	4b1f      	ldr	r3, [pc, #124]	; (80034f8 <main+0x978>)
 800347c:	2201      	movs	r2, #1
 800347e:	701a      	strb	r2, [r3, #0]
				  break;
 8003480:	e002      	b.n	8003488 <main+0x908>
			  }

		  }
 8003482:	bf00      	nop
 8003484:	e000      	b.n	8003488 <main+0x908>
			  break;
 8003486:	bf00      	nop
	  home_position_state=0;
 8003488:	4b1c      	ldr	r3, [pc, #112]	; (80034fc <main+0x97c>)
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]

	  get_uart_flag=0;
 800348e:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <main+0x980>)
 8003490:	2200      	movs	r2, #0
 8003492:	701a      	strb	r2, [r3, #0]
	  while(!get_can_flag){}
 8003494:	bf00      	nop
 8003496:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <main+0x978>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0fb      	beq.n	8003496 <main+0x916>
	  mode_select=RxData[1];	//モード変更
 800349e:	4b19      	ldr	r3, [pc, #100]	; (8003504 <main+0x984>)
 80034a0:	785b      	ldrb	r3, [r3, #1]
 80034a2:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
	  TxData[0]=0xAA;
 80034a6:	4b11      	ldr	r3, [pc, #68]	; (80034ec <main+0x96c>)
 80034a8:	22aa      	movs	r2, #170	; 0xaa
 80034aa:	701a      	strb	r2, [r3, #0]
	  TxData[1]=mode_select;
 80034ac:	4a0f      	ldr	r2, [pc, #60]	; (80034ec <main+0x96c>)
 80034ae:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80034b2:	7053      	strb	r3, [r2, #1]
	  TxData[buffersize-1]=0xAA;
 80034b4:	4b14      	ldr	r3, [pc, #80]	; (8003508 <main+0x988>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	3b01      	subs	r3, #1
 80034ba:	4a0c      	ldr	r2, [pc, #48]	; (80034ec <main+0x96c>)
 80034bc:	21aa      	movs	r1, #170	; 0xaa
 80034be:	54d1      	strb	r1, [r2, r3]
	  for(int i=2;i<buffersize-1;i++){
 80034c0:	2302      	movs	r3, #2
 80034c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80034c6:	e02c      	b.n	8003522 <main+0x9a2>
 80034c8:	9999999a 	.word	0x9999999a
 80034cc:	3fb99999 	.word	0x3fb99999
 80034d0:	200003d0 	.word	0x200003d0
 80034d4:	66666667 	.word	0x66666667
 80034d8:	0800dcac 	.word	0x0800dcac
 80034dc:	20000424 	.word	0x20000424
 80034e0:	00000000 	.word	0x00000000
 80034e4:	20000430 	.word	0x20000430
 80034e8:	42480000 	.word	0x42480000
 80034ec:	20000358 	.word	0x20000358
 80034f0:	200002b8 	.word	0x200002b8
 80034f4:	0800dcbc 	.word	0x0800dcbc
 80034f8:	2000042a 	.word	0x2000042a
 80034fc:	20000428 	.word	0x20000428
 8003500:	20000429 	.word	0x20000429
 8003504:	2000036c 	.word	0x2000036c
 8003508:	20000008 	.word	0x20000008
		  TxData[i]=0xFF;
 800350c:	4a1a      	ldr	r2, [pc, #104]	; (8003578 <main+0x9f8>)
 800350e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003512:	4413      	add	r3, r2
 8003514:	22ff      	movs	r2, #255	; 0xff
 8003516:	701a      	strb	r2, [r3, #0]
	  for(int i=2;i<buffersize-1;i++){
 8003518:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800351c:	3301      	adds	r3, #1
 800351e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003522:	4b16      	ldr	r3, [pc, #88]	; (800357c <main+0x9fc>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	3b01      	subs	r3, #1
 8003528:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800352c:	429a      	cmp	r2, r3
 800352e:	dbed      	blt.n	800350c <main+0x98c>
	  }
	  HAL_UART_Transmit(&huart2,TxData,sizeof(TxData),100);
 8003530:	2364      	movs	r3, #100	; 0x64
 8003532:	2214      	movs	r2, #20
 8003534:	4910      	ldr	r1, [pc, #64]	; (8003578 <main+0x9f8>)
 8003536:	4812      	ldr	r0, [pc, #72]	; (8003580 <main+0xa00>)
 8003538:	f004 f986 	bl	8007848 <HAL_UART_Transmit>
	  for(int i=0;i<buffersize;i++){
 800353c:	2300      	movs	r3, #0
 800353e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003542:	e010      	b.n	8003566 <main+0x9e6>
		  RxData[i]=0;
 8003544:	4a0f      	ldr	r2, [pc, #60]	; (8003584 <main+0xa04>)
 8003546:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800354a:	4413      	add	r3, r2
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
		  TxData[i]=0;
 8003550:	4a09      	ldr	r2, [pc, #36]	; (8003578 <main+0x9f8>)
 8003552:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003556:	4413      	add	r3, r2
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<buffersize;i++){
 800355c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003560:	3301      	adds	r3, #1
 8003562:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <main+0x9fc>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003570:	4293      	cmp	r3, r2
 8003572:	dbe7      	blt.n	8003544 <main+0x9c4>
	  get_uart_flag=0;
 8003574:	f7ff bba5 	b.w	8002cc2 <main+0x142>
 8003578:	20000358 	.word	0x20000358
 800357c:	20000008 	.word	0x20000008
 8003580:	200002b8 	.word	0x200002b8
 8003584:	2000036c 	.word	0x2000036c

08003588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b094      	sub	sp, #80	; 0x50
 800358c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800358e:	f107 031c 	add.w	r3, r7, #28
 8003592:	2234      	movs	r2, #52	; 0x34
 8003594:	2100      	movs	r1, #0
 8003596:	4618      	mov	r0, r3
 8003598:	f005 fdf8 	bl	800918c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800359c:	f107 0308 	add.w	r3, r7, #8
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ac:	2300      	movs	r3, #0
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	4b29      	ldr	r3, [pc, #164]	; (8003658 <SystemClock_Config+0xd0>)
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	4a28      	ldr	r2, [pc, #160]	; (8003658 <SystemClock_Config+0xd0>)
 80035b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ba:	6413      	str	r3, [r2, #64]	; 0x40
 80035bc:	4b26      	ldr	r3, [pc, #152]	; (8003658 <SystemClock_Config+0xd0>)
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035c8:	2300      	movs	r3, #0
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	4b23      	ldr	r3, [pc, #140]	; (800365c <SystemClock_Config+0xd4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a22      	ldr	r2, [pc, #136]	; (800365c <SystemClock_Config+0xd4>)
 80035d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	4b20      	ldr	r3, [pc, #128]	; (800365c <SystemClock_Config+0xd4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035e0:	603b      	str	r3, [r7, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80035e4:	2302      	movs	r3, #2
 80035e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035e8:	2301      	movs	r3, #1
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035ec:	2310      	movs	r3, #16
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035f0:	2302      	movs	r3, #2
 80035f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80035f4:	2300      	movs	r3, #0
 80035f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80035f8:	2308      	movs	r3, #8
 80035fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 80035fc:	23a0      	movs	r3, #160	; 0xa0
 80035fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003600:	2302      	movs	r3, #2
 8003602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003604:	2302      	movs	r3, #2
 8003606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003608:	2302      	movs	r3, #2
 800360a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800360c:	f107 031c 	add.w	r3, r7, #28
 8003610:	4618      	mov	r0, r3
 8003612:	f002 fe27 	bl	8006264 <HAL_RCC_OscConfig>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800361c:	f000 fcb8 	bl	8003f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003620:	230f      	movs	r3, #15
 8003622:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003624:	2302      	movs	r3, #2
 8003626:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003628:	2300      	movs	r3, #0
 800362a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800362c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003636:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003638:	f107 0308 	add.w	r3, r7, #8
 800363c:	2105      	movs	r1, #5
 800363e:	4618      	mov	r0, r3
 8003640:	f002 fac6 	bl	8005bd0 <HAL_RCC_ClockConfig>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800364a:	f000 fca1 	bl	8003f90 <Error_Handler>
  }
}
 800364e:	bf00      	nop
 8003650:	3750      	adds	r7, #80	; 0x50
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40023800 	.word	0x40023800
 800365c:	40007000 	.word	0x40007000

08003660 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003664:	4b18      	ldr	r3, [pc, #96]	; (80036c8 <MX_CAN1_Init+0x68>)
 8003666:	4a19      	ldr	r2, [pc, #100]	; (80036cc <MX_CAN1_Init+0x6c>)
 8003668:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800366a:	4b17      	ldr	r3, [pc, #92]	; (80036c8 <MX_CAN1_Init+0x68>)
 800366c:	2204      	movs	r2, #4
 800366e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003670:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <MX_CAN1_Init+0x68>)
 8003672:	2200      	movs	r2, #0
 8003674:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8003676:	4b14      	ldr	r3, [pc, #80]	; (80036c8 <MX_CAN1_Init+0x68>)
 8003678:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800367c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800367e:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <MX_CAN1_Init+0x68>)
 8003680:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8003684:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003686:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <MX_CAN1_Init+0x68>)
 8003688:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800368c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800368e:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <MX_CAN1_Init+0x68>)
 8003690:	2200      	movs	r2, #0
 8003692:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003694:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <MX_CAN1_Init+0x68>)
 8003696:	2200      	movs	r2, #0
 8003698:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800369a:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <MX_CAN1_Init+0x68>)
 800369c:	2200      	movs	r2, #0
 800369e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80036a0:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <MX_CAN1_Init+0x68>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80036a6:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <MX_CAN1_Init+0x68>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80036ac:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <MX_CAN1_Init+0x68>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80036b2:	4805      	ldr	r0, [pc, #20]	; (80036c8 <MX_CAN1_Init+0x68>)
 80036b4:	f001 f834 	bl	8004720 <HAL_CAN_Init>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80036be:	f000 fc67 	bl	8003f90 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80036c2:	bf00      	nop
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20000204 	.word	0x20000204
 80036cc:	40006400 	.word	0x40006400

080036d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08e      	sub	sp, #56	; 0x38
 80036d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	605a      	str	r2, [r3, #4]
 80036e0:	609a      	str	r2, [r3, #8]
 80036e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036e4:	f107 0320 	add.w	r3, r7, #32
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036ee:	1d3b      	adds	r3, r7, #4
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	60da      	str	r2, [r3, #12]
 80036fa:	611a      	str	r2, [r3, #16]
 80036fc:	615a      	str	r2, [r3, #20]
 80036fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003700:	4b2b      	ldr	r3, [pc, #172]	; (80037b0 <MX_TIM3_Init+0xe0>)
 8003702:	4a2c      	ldr	r2, [pc, #176]	; (80037b4 <MX_TIM3_Init+0xe4>)
 8003704:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 8003706:	4b2a      	ldr	r3, [pc, #168]	; (80037b0 <MX_TIM3_Init+0xe0>)
 8003708:	229f      	movs	r2, #159	; 0x9f
 800370a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800370c:	4b28      	ldr	r3, [pc, #160]	; (80037b0 <MX_TIM3_Init+0xe0>)
 800370e:	2200      	movs	r2, #0
 8003710:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003712:	4b27      	ldr	r3, [pc, #156]	; (80037b0 <MX_TIM3_Init+0xe0>)
 8003714:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003718:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800371a:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <MX_TIM3_Init+0xe0>)
 800371c:	2200      	movs	r2, #0
 800371e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003720:	4b23      	ldr	r3, [pc, #140]	; (80037b0 <MX_TIM3_Init+0xe0>)
 8003722:	2200      	movs	r2, #0
 8003724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003726:	4822      	ldr	r0, [pc, #136]	; (80037b0 <MX_TIM3_Init+0xe0>)
 8003728:	f003 f83a 	bl	80067a0 <HAL_TIM_Base_Init>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003732:	f000 fc2d 	bl	8003f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800373a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800373c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003740:	4619      	mov	r1, r3
 8003742:	481b      	ldr	r0, [pc, #108]	; (80037b0 <MX_TIM3_Init+0xe0>)
 8003744:	f003 fb4e 	bl	8006de4 <HAL_TIM_ConfigClockSource>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800374e:	f000 fc1f 	bl	8003f90 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8003752:	4817      	ldr	r0, [pc, #92]	; (80037b0 <MX_TIM3_Init+0xe0>)
 8003754:	f003 f873 	bl	800683e <HAL_TIM_OC_Init>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800375e:	f000 fc17 	bl	8003f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003762:	2300      	movs	r3, #0
 8003764:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003766:	2300      	movs	r3, #0
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800376a:	f107 0320 	add.w	r3, r7, #32
 800376e:	4619      	mov	r1, r3
 8003770:	480f      	ldr	r0, [pc, #60]	; (80037b0 <MX_TIM3_Init+0xe0>)
 8003772:	f003 ff37 	bl	80075e4 <HAL_TIMEx_MasterConfigSynchronization>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800377c:	f000 fc08 	bl	8003f90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003780:	2300      	movs	r3, #0
 8003782:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003790:	1d3b      	adds	r3, r7, #4
 8003792:	2200      	movs	r2, #0
 8003794:	4619      	mov	r1, r3
 8003796:	4806      	ldr	r0, [pc, #24]	; (80037b0 <MX_TIM3_Init+0xe0>)
 8003798:	f003 fac8 	bl	8006d2c <HAL_TIM_OC_ConfigChannel>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80037a2:	f000 fbf5 	bl	8003f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037a6:	bf00      	nop
 80037a8:	3738      	adds	r7, #56	; 0x38
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	2000022c 	.word	0x2000022c
 80037b4:	40000400 	.word	0x40000400

080037b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037bc:	4b10      	ldr	r3, [pc, #64]	; (8003800 <MX_USART1_UART_Init+0x48>)
 80037be:	4a11      	ldr	r2, [pc, #68]	; (8003804 <MX_USART1_UART_Init+0x4c>)
 80037c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 80037c2:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <MX_USART1_UART_Init+0x48>)
 80037c4:	4a10      	ldr	r2, [pc, #64]	; (8003808 <MX_USART1_UART_Init+0x50>)
 80037c6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037c8:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <MX_USART1_UART_Init+0x48>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037ce:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <MX_USART1_UART_Init+0x48>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037d4:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <MX_USART1_UART_Init+0x48>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <MX_USART1_UART_Init+0x48>)
 80037dc:	220c      	movs	r2, #12
 80037de:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037e0:	4b07      	ldr	r3, [pc, #28]	; (8003800 <MX_USART1_UART_Init+0x48>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037e6:	4b06      	ldr	r3, [pc, #24]	; (8003800 <MX_USART1_UART_Init+0x48>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80037ec:	4804      	ldr	r0, [pc, #16]	; (8003800 <MX_USART1_UART_Init+0x48>)
 80037ee:	f003 ffd6 	bl	800779e <HAL_HalfDuplex_Init>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 80037f8:	f000 fbca 	bl	8003f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80037fc:	bf00      	nop
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	20000274 	.word	0x20000274
 8003804:	40011000 	.word	0x40011000
 8003808:	0007a120 	.word	0x0007a120

0800380c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003810:	4b11      	ldr	r3, [pc, #68]	; (8003858 <MX_USART2_UART_Init+0x4c>)
 8003812:	4a12      	ldr	r2, [pc, #72]	; (800385c <MX_USART2_UART_Init+0x50>)
 8003814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003816:	4b10      	ldr	r3, [pc, #64]	; (8003858 <MX_USART2_UART_Init+0x4c>)
 8003818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800381c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800381e:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <MX_USART2_UART_Init+0x4c>)
 8003820:	2200      	movs	r2, #0
 8003822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003824:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <MX_USART2_UART_Init+0x4c>)
 8003826:	2200      	movs	r2, #0
 8003828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800382a:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <MX_USART2_UART_Init+0x4c>)
 800382c:	2200      	movs	r2, #0
 800382e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <MX_USART2_UART_Init+0x4c>)
 8003832:	220c      	movs	r2, #12
 8003834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003836:	4b08      	ldr	r3, [pc, #32]	; (8003858 <MX_USART2_UART_Init+0x4c>)
 8003838:	2200      	movs	r2, #0
 800383a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <MX_USART2_UART_Init+0x4c>)
 800383e:	2200      	movs	r2, #0
 8003840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003842:	4805      	ldr	r0, [pc, #20]	; (8003858 <MX_USART2_UART_Init+0x4c>)
 8003844:	f003 ff5e 	bl	8007704 <HAL_UART_Init>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800384e:	f000 fb9f 	bl	8003f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	200002b8 	.word	0x200002b8
 800385c:	40004400 	.word	0x40004400

08003860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	; 0x28
 8003864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003866:	f107 0314 	add.w	r3, r7, #20
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	609a      	str	r2, [r3, #8]
 8003872:	60da      	str	r2, [r3, #12]
 8003874:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	4b5e      	ldr	r3, [pc, #376]	; (80039f4 <MX_GPIO_Init+0x194>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	4a5d      	ldr	r2, [pc, #372]	; (80039f4 <MX_GPIO_Init+0x194>)
 8003880:	f043 0304 	orr.w	r3, r3, #4
 8003884:	6313      	str	r3, [r2, #48]	; 0x30
 8003886:	4b5b      	ldr	r3, [pc, #364]	; (80039f4 <MX_GPIO_Init+0x194>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	4b57      	ldr	r3, [pc, #348]	; (80039f4 <MX_GPIO_Init+0x194>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	4a56      	ldr	r2, [pc, #344]	; (80039f4 <MX_GPIO_Init+0x194>)
 800389c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038a0:	6313      	str	r3, [r2, #48]	; 0x30
 80038a2:	4b54      	ldr	r3, [pc, #336]	; (80039f4 <MX_GPIO_Init+0x194>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	4b50      	ldr	r3, [pc, #320]	; (80039f4 <MX_GPIO_Init+0x194>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	4a4f      	ldr	r2, [pc, #316]	; (80039f4 <MX_GPIO_Init+0x194>)
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	6313      	str	r3, [r2, #48]	; 0x30
 80038be:	4b4d      	ldr	r3, [pc, #308]	; (80039f4 <MX_GPIO_Init+0x194>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	607b      	str	r3, [r7, #4]
 80038ce:	4b49      	ldr	r3, [pc, #292]	; (80039f4 <MX_GPIO_Init+0x194>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	4a48      	ldr	r2, [pc, #288]	; (80039f4 <MX_GPIO_Init+0x194>)
 80038d4:	f043 0302 	orr.w	r3, r3, #2
 80038d8:	6313      	str	r3, [r2, #48]	; 0x30
 80038da:	4b46      	ldr	r3, [pc, #280]	; (80039f4 <MX_GPIO_Init+0x194>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	607b      	str	r3, [r7, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80038e6:	2200      	movs	r2, #0
 80038e8:	2120      	movs	r1, #32
 80038ea:	4843      	ldr	r0, [pc, #268]	; (80039f8 <MX_GPIO_Init+0x198>)
 80038ec:	f002 f93e 	bl	8005b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80038f0:	2200      	movs	r2, #0
 80038f2:	f44f 7144 	mov.w	r1, #784	; 0x310
 80038f6:	4841      	ldr	r0, [pc, #260]	; (80039fc <MX_GPIO_Init+0x19c>)
 80038f8:	f002 f938 	bl	8005b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80038fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003902:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003908:	2300      	movs	r3, #0
 800390a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	4619      	mov	r1, r3
 8003912:	483b      	ldr	r0, [pc, #236]	; (8003a00 <MX_GPIO_Init+0x1a0>)
 8003914:	f001 ff7e 	bl	8005814 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003918:	2320      	movs	r3, #32
 800391a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800391c:	2301      	movs	r3, #1
 800391e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003920:	2300      	movs	r3, #0
 8003922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003924:	2300      	movs	r3, #0
 8003926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003928:	f107 0314 	add.w	r3, r7, #20
 800392c:	4619      	mov	r1, r3
 800392e:	4832      	ldr	r0, [pc, #200]	; (80039f8 <MX_GPIO_Init+0x198>)
 8003930:	f001 ff70 	bl	8005814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 8003934:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8003938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800393a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800393e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003940:	2300      	movs	r3, #0
 8003942:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003944:	f107 0314 	add.w	r3, r7, #20
 8003948:	4619      	mov	r1, r3
 800394a:	482b      	ldr	r0, [pc, #172]	; (80039f8 <MX_GPIO_Init+0x198>)
 800394c:	f001 ff62 	bl	8005814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003956:	2302      	movs	r3, #2
 8003958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800395e:	2303      	movs	r3, #3
 8003960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003962:	2309      	movs	r3, #9
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003966:	f107 0314 	add.w	r3, r7, #20
 800396a:	4619      	mov	r1, r3
 800396c:	4823      	ldr	r0, [pc, #140]	; (80039fc <MX_GPIO_Init+0x19c>)
 800396e:	f001 ff51 	bl	8005814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003978:	2302      	movs	r3, #2
 800397a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800397c:	2301      	movs	r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003980:	2303      	movs	r3, #3
 8003982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003984:	2309      	movs	r3, #9
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003988:	f107 0314 	add.w	r3, r7, #20
 800398c:	4619      	mov	r1, r3
 800398e:	481b      	ldr	r0, [pc, #108]	; (80039fc <MX_GPIO_Init+0x19c>)
 8003990:	f001 ff40 	bl	8005814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9;
 8003994:	f44f 7344 	mov.w	r3, #784	; 0x310
 8003998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800399a:	2301      	movs	r3, #1
 800399c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039a2:	2300      	movs	r3, #0
 80039a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a6:	f107 0314 	add.w	r3, r7, #20
 80039aa:	4619      	mov	r1, r3
 80039ac:	4813      	ldr	r0, [pc, #76]	; (80039fc <MX_GPIO_Init+0x19c>)
 80039ae:	f001 ff31 	bl	8005814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80039b2:	2360      	movs	r3, #96	; 0x60
 80039b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80039b6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80039ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039c0:	f107 0314 	add.w	r3, r7, #20
 80039c4:	4619      	mov	r1, r3
 80039c6:	480d      	ldr	r0, [pc, #52]	; (80039fc <MX_GPIO_Init+0x19c>)
 80039c8:	f001 ff24 	bl	8005814 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80039cc:	2200      	movs	r2, #0
 80039ce:	2101      	movs	r1, #1
 80039d0:	2017      	movs	r0, #23
 80039d2:	f001 fe56 	bl	8005682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80039d6:	2017      	movs	r0, #23
 80039d8:	f001 fe6f 	bl	80056ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80039dc:	2200      	movs	r2, #0
 80039de:	2101      	movs	r1, #1
 80039e0:	2028      	movs	r0, #40	; 0x28
 80039e2:	f001 fe4e 	bl	8005682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80039e6:	2028      	movs	r0, #40	; 0x28
 80039e8:	f001 fe67 	bl	80056ba <HAL_NVIC_EnableIRQ>

}
 80039ec:	bf00      	nop
 80039ee:	3728      	adds	r7, #40	; 0x28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40020000 	.word	0x40020000
 80039fc:	40020400 	.word	0x40020400
 8003a00:	40020800 	.word	0x40020800

08003a04 <BLDC_FK>:

/* USER CODE BEGIN 4 */
void BLDC_FK(float s1,float s2,float* xp,float* yp){
 8003a04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a08:	b086      	sub	sp, #24
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	ed87 0a03 	vstr	s0, [r7, #12]
 8003a10:	edc7 0a02 	vstr	s1, [r7, #8]
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	6039      	str	r1, [r7, #0]
	float x=0.0;
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
	float y=0.0;
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	613b      	str	r3, [r7, #16]
	x=l1*cos(s1)+l2*cos(s1+s2);
 8003a24:	4b4a      	ldr	r3, [pc, #296]	; (8003b50 <BLDC_FK+0x14c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fc fdad 	bl	8000588 <__aeabi_f2d>
 8003a2e:	4604      	mov	r4, r0
 8003a30:	460d      	mov	r5, r1
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f7fc fda8 	bl	8000588 <__aeabi_f2d>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	ec43 2b10 	vmov	d0, r2, r3
 8003a40:	f008 fa1e 	bl	800be80 <cos>
 8003a44:	ec53 2b10 	vmov	r2, r3, d0
 8003a48:	4620      	mov	r0, r4
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	f7fc fdf4 	bl	8000638 <__aeabi_dmul>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4690      	mov	r8, r2
 8003a56:	4699      	mov	r9, r3
 8003a58:	4b3e      	ldr	r3, [pc, #248]	; (8003b54 <BLDC_FK+0x150>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fc fd93 	bl	8000588 <__aeabi_f2d>
 8003a62:	4604      	mov	r4, r0
 8003a64:	460d      	mov	r5, r1
 8003a66:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a72:	ee17 0a90 	vmov	r0, s15
 8003a76:	f7fc fd87 	bl	8000588 <__aeabi_f2d>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	ec43 2b10 	vmov	d0, r2, r3
 8003a82:	f008 f9fd 	bl	800be80 <cos>
 8003a86:	ec53 2b10 	vmov	r2, r3, d0
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	f7fc fdd3 	bl	8000638 <__aeabi_dmul>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4640      	mov	r0, r8
 8003a98:	4649      	mov	r1, r9
 8003a9a:	f7fc fc17 	bl	80002cc <__adddf3>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	f7fd f89f 	bl	8000be8 <__aeabi_d2f>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	617b      	str	r3, [r7, #20]
	y=l1*sin(s1)+l2*sin(s1+s2);
 8003aae:	4b28      	ldr	r3, [pc, #160]	; (8003b50 <BLDC_FK+0x14c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fc fd68 	bl	8000588 <__aeabi_f2d>
 8003ab8:	4604      	mov	r4, r0
 8003aba:	460d      	mov	r5, r1
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f7fc fd63 	bl	8000588 <__aeabi_f2d>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	ec43 2b10 	vmov	d0, r2, r3
 8003aca:	f008 fa75 	bl	800bfb8 <sin>
 8003ace:	ec53 2b10 	vmov	r2, r3, d0
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	f7fc fdaf 	bl	8000638 <__aeabi_dmul>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4690      	mov	r8, r2
 8003ae0:	4699      	mov	r9, r3
 8003ae2:	4b1c      	ldr	r3, [pc, #112]	; (8003b54 <BLDC_FK+0x150>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fc fd4e 	bl	8000588 <__aeabi_f2d>
 8003aec:	4604      	mov	r4, r0
 8003aee:	460d      	mov	r5, r1
 8003af0:	ed97 7a03 	vldr	s14, [r7, #12]
 8003af4:	edd7 7a02 	vldr	s15, [r7, #8]
 8003af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003afc:	ee17 0a90 	vmov	r0, s15
 8003b00:	f7fc fd42 	bl	8000588 <__aeabi_f2d>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	ec43 2b10 	vmov	d0, r2, r3
 8003b0c:	f008 fa54 	bl	800bfb8 <sin>
 8003b10:	ec53 2b10 	vmov	r2, r3, d0
 8003b14:	4620      	mov	r0, r4
 8003b16:	4629      	mov	r1, r5
 8003b18:	f7fc fd8e 	bl	8000638 <__aeabi_dmul>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4640      	mov	r0, r8
 8003b22:	4649      	mov	r1, r9
 8003b24:	f7fc fbd2 	bl	80002cc <__adddf3>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	4619      	mov	r1, r3
 8003b30:	f7fd f85a 	bl	8000be8 <__aeabi_d2f>
 8003b34:	4603      	mov	r3, r0
 8003b36:	613b      	str	r3, [r7, #16]
	*xp=x;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	601a      	str	r2, [r3, #0]
	*yp=y;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	601a      	str	r2, [r3, #0]
}
 8003b44:	bf00      	nop
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000000 	.word	0x20000000
 8003b54:	20000004 	.word	0x20000004

08003b58 <BLDC_IK>:
void BLDC_IK(float x,float y,float* s1p,float* s2p){
 8003b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b5c:	ed2d 8b02 	vpush	{d8}
 8003b60:	b086      	sub	sp, #24
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	ed87 0a03 	vstr	s0, [r7, #12]
 8003b68:	edc7 0a02 	vstr	s1, [r7, #8]
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]
	float s1=0.0;
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
	float s2=0.0;
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	613b      	str	r3, [r7, #16]
	s2=-acos((x*x+y*y-l1*l1-l2*l2)/(2*l1*l2));
 8003b7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b80:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003b84:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b88:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003b8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b90:	4b8e      	ldr	r3, [pc, #568]	; (8003dcc <BLDC_IK+0x274>)
 8003b92:	edd3 6a00 	vldr	s13, [r3]
 8003b96:	4b8d      	ldr	r3, [pc, #564]	; (8003dcc <BLDC_IK+0x274>)
 8003b98:	edd3 7a00 	vldr	s15, [r3]
 8003b9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ba0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ba4:	4b8a      	ldr	r3, [pc, #552]	; (8003dd0 <BLDC_IK+0x278>)
 8003ba6:	edd3 6a00 	vldr	s13, [r3]
 8003baa:	4b89      	ldr	r3, [pc, #548]	; (8003dd0 <BLDC_IK+0x278>)
 8003bac:	edd3 7a00 	vldr	s15, [r3]
 8003bb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003bb8:	4b84      	ldr	r3, [pc, #528]	; (8003dcc <BLDC_IK+0x274>)
 8003bba:	edd3 7a00 	vldr	s15, [r3]
 8003bbe:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003bc2:	4b83      	ldr	r3, [pc, #524]	; (8003dd0 <BLDC_IK+0x278>)
 8003bc4:	edd3 7a00 	vldr	s15, [r3]
 8003bc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bcc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003bd0:	ee16 0a90 	vmov	r0, s13
 8003bd4:	f7fc fcd8 	bl	8000588 <__aeabi_f2d>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	ec43 2b10 	vmov	d0, r2, r3
 8003be0:	f008 fa42 	bl	800c068 <acos>
 8003be4:	ec53 2b10 	vmov	r2, r3, d0
 8003be8:	4610      	mov	r0, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	f7fc fffc 	bl	8000be8 <__aeabi_d2f>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef1 7a67 	vneg.f32	s15, s15
 8003bfa:	edc7 7a04 	vstr	s15, [r7, #16]
	s1=atan2((-l2*sin(s2)*x+(l1+l2*cos(s2))*y),((l1+l2*cos(s2))*x+l2*sin(s2)*y));
 8003bfe:	4b74      	ldr	r3, [pc, #464]	; (8003dd0 <BLDC_IK+0x278>)
 8003c00:	edd3 7a00 	vldr	s15, [r3]
 8003c04:	eef1 7a67 	vneg.f32	s15, s15
 8003c08:	ee17 3a90 	vmov	r3, s15
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fc fcbb 	bl	8000588 <__aeabi_f2d>
 8003c12:	4604      	mov	r4, r0
 8003c14:	460d      	mov	r5, r1
 8003c16:	6938      	ldr	r0, [r7, #16]
 8003c18:	f7fc fcb6 	bl	8000588 <__aeabi_f2d>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	ec43 2b10 	vmov	d0, r2, r3
 8003c24:	f008 f9c8 	bl	800bfb8 <sin>
 8003c28:	ec53 2b10 	vmov	r2, r3, d0
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	4629      	mov	r1, r5
 8003c30:	f7fc fd02 	bl	8000638 <__aeabi_dmul>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4614      	mov	r4, r2
 8003c3a:	461d      	mov	r5, r3
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f7fc fca3 	bl	8000588 <__aeabi_f2d>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4620      	mov	r0, r4
 8003c48:	4629      	mov	r1, r5
 8003c4a:	f7fc fcf5 	bl	8000638 <__aeabi_dmul>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4692      	mov	sl, r2
 8003c54:	469b      	mov	fp, r3
 8003c56:	4b5d      	ldr	r3, [pc, #372]	; (8003dcc <BLDC_IK+0x274>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fc fc94 	bl	8000588 <__aeabi_f2d>
 8003c60:	4604      	mov	r4, r0
 8003c62:	460d      	mov	r5, r1
 8003c64:	4b5a      	ldr	r3, [pc, #360]	; (8003dd0 <BLDC_IK+0x278>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fc fc8d 	bl	8000588 <__aeabi_f2d>
 8003c6e:	4680      	mov	r8, r0
 8003c70:	4689      	mov	r9, r1
 8003c72:	6938      	ldr	r0, [r7, #16]
 8003c74:	f7fc fc88 	bl	8000588 <__aeabi_f2d>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	ec43 2b10 	vmov	d0, r2, r3
 8003c80:	f008 f8fe 	bl	800be80 <cos>
 8003c84:	ec53 2b10 	vmov	r2, r3, d0
 8003c88:	4640      	mov	r0, r8
 8003c8a:	4649      	mov	r1, r9
 8003c8c:	f7fc fcd4 	bl	8000638 <__aeabi_dmul>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4620      	mov	r0, r4
 8003c96:	4629      	mov	r1, r5
 8003c98:	f7fc fb18 	bl	80002cc <__adddf3>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4614      	mov	r4, r2
 8003ca2:	461d      	mov	r5, r3
 8003ca4:	68b8      	ldr	r0, [r7, #8]
 8003ca6:	f7fc fc6f 	bl	8000588 <__aeabi_f2d>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4620      	mov	r0, r4
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	f7fc fcc1 	bl	8000638 <__aeabi_dmul>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4650      	mov	r0, sl
 8003cbc:	4659      	mov	r1, fp
 8003cbe:	f7fc fb05 	bl	80002cc <__adddf3>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	ec43 2b18 	vmov	d8, r2, r3
 8003cca:	4b40      	ldr	r3, [pc, #256]	; (8003dcc <BLDC_IK+0x274>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fc fc5a 	bl	8000588 <__aeabi_f2d>
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	460d      	mov	r5, r1
 8003cd8:	4b3d      	ldr	r3, [pc, #244]	; (8003dd0 <BLDC_IK+0x278>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fc fc53 	bl	8000588 <__aeabi_f2d>
 8003ce2:	4680      	mov	r8, r0
 8003ce4:	4689      	mov	r9, r1
 8003ce6:	6938      	ldr	r0, [r7, #16]
 8003ce8:	f7fc fc4e 	bl	8000588 <__aeabi_f2d>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	ec43 2b10 	vmov	d0, r2, r3
 8003cf4:	f008 f8c4 	bl	800be80 <cos>
 8003cf8:	ec53 2b10 	vmov	r2, r3, d0
 8003cfc:	4640      	mov	r0, r8
 8003cfe:	4649      	mov	r1, r9
 8003d00:	f7fc fc9a 	bl	8000638 <__aeabi_dmul>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4620      	mov	r0, r4
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	f7fc fade 	bl	80002cc <__adddf3>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4614      	mov	r4, r2
 8003d16:	461d      	mov	r5, r3
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f7fc fc35 	bl	8000588 <__aeabi_f2d>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4620      	mov	r0, r4
 8003d24:	4629      	mov	r1, r5
 8003d26:	f7fc fc87 	bl	8000638 <__aeabi_dmul>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4690      	mov	r8, r2
 8003d30:	4699      	mov	r9, r3
 8003d32:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <BLDC_IK+0x278>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fc fc26 	bl	8000588 <__aeabi_f2d>
 8003d3c:	4604      	mov	r4, r0
 8003d3e:	460d      	mov	r5, r1
 8003d40:	6938      	ldr	r0, [r7, #16]
 8003d42:	f7fc fc21 	bl	8000588 <__aeabi_f2d>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	ec43 2b10 	vmov	d0, r2, r3
 8003d4e:	f008 f933 	bl	800bfb8 <sin>
 8003d52:	ec53 2b10 	vmov	r2, r3, d0
 8003d56:	4620      	mov	r0, r4
 8003d58:	4629      	mov	r1, r5
 8003d5a:	f7fc fc6d 	bl	8000638 <__aeabi_dmul>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4614      	mov	r4, r2
 8003d64:	461d      	mov	r5, r3
 8003d66:	68b8      	ldr	r0, [r7, #8]
 8003d68:	f7fc fc0e 	bl	8000588 <__aeabi_f2d>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4620      	mov	r0, r4
 8003d72:	4629      	mov	r1, r5
 8003d74:	f7fc fc60 	bl	8000638 <__aeabi_dmul>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4640      	mov	r0, r8
 8003d7e:	4649      	mov	r1, r9
 8003d80:	f7fc faa4 	bl	80002cc <__adddf3>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	ec43 2b17 	vmov	d7, r2, r3
 8003d8c:	eeb0 1a47 	vmov.f32	s2, s14
 8003d90:	eef0 1a67 	vmov.f32	s3, s15
 8003d94:	eeb0 0a48 	vmov.f32	s0, s16
 8003d98:	eef0 0a68 	vmov.f32	s1, s17
 8003d9c:	f008 f998 	bl	800c0d0 <atan2>
 8003da0:	ec53 2b10 	vmov	r2, r3, d0
 8003da4:	4610      	mov	r0, r2
 8003da6:	4619      	mov	r1, r3
 8003da8:	f7fc ff1e 	bl	8000be8 <__aeabi_d2f>
 8003dac:	4603      	mov	r3, r0
 8003dae:	617b      	str	r3, [r7, #20]
	*s1p=s1;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	601a      	str	r2, [r3, #0]
	*s2p=s2;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	601a      	str	r2, [r3, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	ecbd 8b02 	vpop	{d8}
 8003dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000000 	.word	0x20000000
 8003dd0:	20000004 	.word	0x20000004

08003dd4 <_write>:
int _write(int file, char *ptr, int len)	//printfに必要
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	230a      	movs	r3, #10
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	4803      	ldr	r0, [pc, #12]	; (8003df8 <_write+0x24>)
 8003dea:	f003 fd2d 	bl	8007848 <HAL_UART_Transmit>
  return len;
 8003dee:	687b      	ldr	r3, [r7, #4]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	200002b8 	.word	0x200002b8

08003dfc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*UartHandle)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	get_uart_flag=1;
 8003e04:	4b07      	ldr	r3, [pc, #28]	; (8003e24 <HAL_UART_RxCpltCallback+0x28>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	701a      	strb	r2, [r3, #0]
//	HAL_UART_Transmit(&huart2, (uint8_t *)RxData, buffersize,10);
	HAL_UART_Receive_IT(&huart2, (uint8_t *)RxData, buffersize);
 8003e0a:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <HAL_UART_RxCpltCallback+0x2c>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	4906      	ldr	r1, [pc, #24]	; (8003e2c <HAL_UART_RxCpltCallback+0x30>)
 8003e14:	4806      	ldr	r0, [pc, #24]	; (8003e30 <HAL_UART_RxCpltCallback+0x34>)
 8003e16:	f003 fe4b 	bl	8007ab0 <HAL_UART_Receive_IT>
//	command_judgment();
//	if(RxData[1]==0x63&&selectmode_flag==1){
//		motion_stop_flag=1;
//	}

}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000429 	.word	0x20000429
 8003e28:	20000008 	.word	0x20000008
 8003e2c:	2000036c 	.word	0x2000036c
 8003e30:	200002b8 	.word	0x200002b8

08003e34 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
	  nextcan_flag=1;
 8003e3c:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	701a      	strb	r2, [r3, #0]
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	2000042b 	.word	0x2000042b

08003e54 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003e54:	b5b0      	push	{r4, r5, r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
	//バッファー設けてどのcanidから送られて来たのかを判定
	get_can_flag=1;
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8003e5e:	2201      	movs	r2, #1
 8003e60:	701a      	strb	r2, [r3, #0]
	nextcan_flag=1;
 8003e62:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	701a      	strb	r2, [r3, #0]
//	printf("RxCan\r\n");
	HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0, &RxHeader, Rx_can_data);
 8003e68:	4b1a      	ldr	r3, [pc, #104]	; (8003ed4 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8003e6a:	4a1b      	ldr	r2, [pc, #108]	; (8003ed8 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	481b      	ldr	r0, [pc, #108]	; (8003edc <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8003e70:	f000 ffcf 	bl	8004e12 <HAL_CAN_GetRxMessage>
//	printf("StdId:%ld\r\n",RxHeader.StdId);
//	printf("Rx_can_data[0]:%d\r\n",Rx_can_data[0]);

	if(Rx_can_data[0]==0x01){
 8003e74:	4b17      	ldr	r3, [pc, #92]	; (8003ed4 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d108      	bne.n	8003e8e <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
//		printf("m1can_get\r\n");
		memcpy(m1Rx_can_data,Rx_can_data,sizeof(Rx_can_data));
 8003e7c:	4a18      	ldr	r2, [pc, #96]	; (8003ee0 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8003e7e:	4b15      	ldr	r3, [pc, #84]	; (8003ed4 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8003e80:	4614      	mov	r4, r2
 8003e82:	461d      	mov	r5, r3
 8003e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	6023      	str	r3, [r4, #0]
		memcpy(m2Rx_can_data,Rx_can_data,sizeof(Rx_can_data));
	}else if(RxHeader.StdId==0x141){
//		printf("RMDcan_get\r\n");
		memcpy(RMDRx_can_data,Rx_can_data,sizeof(Rx_can_data));
	}
}
 8003e8c:	e01a      	b.n	8003ec4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
	}else if(Rx_can_data[0]==0x02){
 8003e8e:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d108      	bne.n	8003ea8 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		memcpy(m2Rx_can_data,Rx_can_data,sizeof(Rx_can_data));
 8003e96:	4a13      	ldr	r2, [pc, #76]	; (8003ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8003e98:	4b0e      	ldr	r3, [pc, #56]	; (8003ed4 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8003e9a:	4614      	mov	r4, r2
 8003e9c:	461d      	mov	r5, r3
 8003e9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ea0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ea2:	682b      	ldr	r3, [r5, #0]
 8003ea4:	6023      	str	r3, [r4, #0]
}
 8003ea6:	e00d      	b.n	8003ec4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
	}else if(RxHeader.StdId==0x141){
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f240 1241 	movw	r2, #321	; 0x141
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d107      	bne.n	8003ec4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
		memcpy(RMDRx_can_data,Rx_can_data,sizeof(Rx_can_data));
 8003eb4:	4a0c      	ldr	r2, [pc, #48]	; (8003ee8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8003eb6:	4b07      	ldr	r3, [pc, #28]	; (8003ed4 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8003eb8:	4614      	mov	r4, r2
 8003eba:	461d      	mov	r5, r3
 8003ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	6023      	str	r3, [r4, #0]
}
 8003ec4:	bf00      	nop
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bdb0      	pop	{r4, r5, r7, pc}
 8003ecc:	2000042a 	.word	0x2000042a
 8003ed0:	2000042b 	.word	0x2000042b
 8003ed4:	20000394 	.word	0x20000394
 8003ed8:	2000033c 	.word	0x2000033c
 8003edc:	20000204 	.word	0x20000204
 8003ee0:	200003e4 	.word	0x200003e4
 8003ee4:	200003f8 	.word	0x200003f8
 8003ee8:	2000040c 	.word	0x2000040c

08003eec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	80fb      	strh	r3, [r7, #6]
	//Arm home position
	if(GPIO_Pin == GPIO_PIN_10 ){
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efc:	d11d      	bne.n	8003f3a <HAL_GPIO_EXTI_Callback+0x4e>
		if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){	//end stop ONの時フラグを立てる
 8003efe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f02:	481f      	ldr	r0, [pc, #124]	; (8003f80 <HAL_GPIO_EXTI_Callback+0x94>)
 8003f04:	f001 fe1a 	bl	8005b3c <HAL_GPIO_ReadPin>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <HAL_GPIO_EXTI_Callback+0x30>
			home_position_state |= 1;
 8003f0e:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <HAL_GPIO_EXTI_Callback+0x98>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <HAL_GPIO_EXTI_Callback+0x98>)
 8003f1a:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 8003f1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f20:	4817      	ldr	r0, [pc, #92]	; (8003f80 <HAL_GPIO_EXTI_Callback+0x94>)
 8003f22:	f001 fe0b 	bl	8005b3c <HAL_GPIO_ReadPin>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d006      	beq.n	8003f3a <HAL_GPIO_EXTI_Callback+0x4e>
			home_position_state &= ~1;
 8003f2c:	4b15      	ldr	r3, [pc, #84]	; (8003f84 <HAL_GPIO_EXTI_Callback+0x98>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <HAL_GPIO_EXTI_Callback+0x98>)
 8003f38:	701a      	strb	r2, [r3, #0]
		}
	}
	//stepper 0 end stop sensor
	if(GPIO_Pin == GPIO_PIN_6 ){
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	2b40      	cmp	r3, #64	; 0x40
 8003f3e:	d11b      	bne.n	8003f78 <HAL_GPIO_EXTI_Callback+0x8c>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 8003f40:	2140      	movs	r1, #64	; 0x40
 8003f42:	4811      	ldr	r0, [pc, #68]	; (8003f88 <HAL_GPIO_EXTI_Callback+0x9c>)
 8003f44:	f001 fdfa 	bl	8005b3c <HAL_GPIO_ReadPin>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <HAL_GPIO_EXTI_Callback+0x70>
			zhome_endstop_state |= 1;
 8003f4e:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <HAL_GPIO_EXTI_Callback+0xa0>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	f043 0301 	orr.w	r3, r3, #1
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <HAL_GPIO_EXTI_Callback+0xa0>)
 8003f5a:	701a      	strb	r2, [r3, #0]
				}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 8003f5c:	2140      	movs	r1, #64	; 0x40
 8003f5e:	480a      	ldr	r0, [pc, #40]	; (8003f88 <HAL_GPIO_EXTI_Callback+0x9c>)
 8003f60:	f001 fdec 	bl	8005b3c <HAL_GPIO_ReadPin>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d006      	beq.n	8003f78 <HAL_GPIO_EXTI_Callback+0x8c>
			zhome_endstop_state &= ~1;
 8003f6a:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <HAL_GPIO_EXTI_Callback+0xa0>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <HAL_GPIO_EXTI_Callback+0xa0>)
 8003f76:	701a      	strb	r2, [r3, #0]
//		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
//			current_stall = 1;
////			stallguard_error();
//		}
//	}
}
 8003f78:	bf00      	nop
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40020000 	.word	0x40020000
 8003f84:	20000428 	.word	0x20000428
 8003f88:	40020400 	.word	0x40020400
 8003f8c:	20000930 	.word	0x20000930

08003f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f94:	b672      	cpsid	i
}
 8003f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f98:	e7fe      	b.n	8003f98 <Error_Handler+0x8>

08003f9a <fmaxf>:
#include "math_ops.h"


float fmaxf(float x, float y){
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	ed87 0a01 	vstr	s0, [r7, #4]
 8003fa4:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8003fa8:	ed97 7a01 	vldr	s14, [r7, #4]
 8003fac:	edd7 7a00 	vldr	s15, [r7]
 8003fb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb8:	dd01      	ble.n	8003fbe <fmaxf+0x24>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	e000      	b.n	8003fc0 <fmaxf+0x26>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	ee07 3a90 	vmov	s15, r3
    }
 8003fc4:	eeb0 0a67 	vmov.f32	s0, s15
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <fminf>:

float fminf(float x, float y){
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	ed87 0a01 	vstr	s0, [r7, #4]
 8003fdc:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8003fe0:	ed97 7a01 	vldr	s14, [r7, #4]
 8003fe4:	edd7 7a00 	vldr	s15, [r7]
 8003fe8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff0:	d501      	bpl.n	8003ff6 <fminf+0x24>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	e000      	b.n	8003ff8 <fminf+0x26>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	ee07 3a90 	vmov	s15, r3
    }
 8003ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <float_to_uint>:
        *y = *y * limit/norm;
        }
    }


int float_to_uint(float x, float x_min, float x_max, int bits){
 800400a:	b480      	push	{r7}
 800400c:	b087      	sub	sp, #28
 800400e:	af00      	add	r7, sp, #0
 8004010:	ed87 0a03 	vstr	s0, [r7, #12]
 8004014:	edc7 0a02 	vstr	s1, [r7, #8]
 8004018:	ed87 1a01 	vstr	s2, [r7, #4]
 800401c:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 800401e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004022:	edd7 7a02 	vldr	s15, [r7, #8]
 8004026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800402a:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8004032:	ed97 7a03 	vldr	s14, [r7, #12]
 8004036:	edd7 7a04 	vldr	s15, [r7, #16]
 800403a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800403e:	2201      	movs	r2, #1
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	ee07 3a90 	vmov	s15, r3
 800404c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004050:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004054:	ed97 7a05 	vldr	s14, [r7, #20]
 8004058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800405c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004060:	ee17 3a90 	vmov	r3, s15
    }
 8004064:	4618      	mov	r0, r3
 8004066:	371c      	adds	r7, #28
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <uint_to_float>:


float uint_to_float(int x_int, float x_min, float x_max, int bits){
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	ed87 0a02 	vstr	s0, [r7, #8]
 800407c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8004082:	ed97 7a01 	vldr	s14, [r7, #4]
 8004086:	edd7 7a02 	vldr	s15, [r7, #8]
 800408a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800408e:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	ee07 3a90 	vmov	s15, r3
 800409c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80040a4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80040a8:	2201      	movs	r2, #1
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	ee07 3a90 	vmov	s15, r3
 80040b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040be:	edd7 7a04 	vldr	s15, [r7, #16]
 80040c2:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 80040c6:	eeb0 0a67 	vmov.f32	s0, s15
 80040ca:	371c      	adds	r7, #28
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	607b      	str	r3, [r7, #4]
 80040de:	4b10      	ldr	r3, [pc, #64]	; (8004120 <HAL_MspInit+0x4c>)
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	4a0f      	ldr	r2, [pc, #60]	; (8004120 <HAL_MspInit+0x4c>)
 80040e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040e8:	6453      	str	r3, [r2, #68]	; 0x44
 80040ea:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <HAL_MspInit+0x4c>)
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f2:	607b      	str	r3, [r7, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	603b      	str	r3, [r7, #0]
 80040fa:	4b09      	ldr	r3, [pc, #36]	; (8004120 <HAL_MspInit+0x4c>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	4a08      	ldr	r2, [pc, #32]	; (8004120 <HAL_MspInit+0x4c>)
 8004100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004104:	6413      	str	r3, [r2, #64]	; 0x40
 8004106:	4b06      	ldr	r3, [pc, #24]	; (8004120 <HAL_MspInit+0x4c>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40023800 	.word	0x40023800

08004124 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08a      	sub	sp, #40	; 0x28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800412c:	f107 0314 	add.w	r3, r7, #20
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	605a      	str	r2, [r3, #4]
 8004136:	609a      	str	r2, [r3, #8]
 8004138:	60da      	str	r2, [r3, #12]
 800413a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a2a      	ldr	r2, [pc, #168]	; (80041ec <HAL_CAN_MspInit+0xc8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d14d      	bne.n	80041e2 <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004146:	2300      	movs	r3, #0
 8004148:	613b      	str	r3, [r7, #16]
 800414a:	4b29      	ldr	r3, [pc, #164]	; (80041f0 <HAL_CAN_MspInit+0xcc>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	4a28      	ldr	r2, [pc, #160]	; (80041f0 <HAL_CAN_MspInit+0xcc>)
 8004150:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004154:	6413      	str	r3, [r2, #64]	; 0x40
 8004156:	4b26      	ldr	r3, [pc, #152]	; (80041f0 <HAL_CAN_MspInit+0xcc>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415e:	613b      	str	r3, [r7, #16]
 8004160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <HAL_CAN_MspInit+0xcc>)
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	4a21      	ldr	r2, [pc, #132]	; (80041f0 <HAL_CAN_MspInit+0xcc>)
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	6313      	str	r3, [r2, #48]	; 0x30
 8004172:	4b1f      	ldr	r3, [pc, #124]	; (80041f0 <HAL_CAN_MspInit+0xcc>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800417e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004184:	2302      	movs	r3, #2
 8004186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004188:	2300      	movs	r3, #0
 800418a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800418c:	2303      	movs	r3, #3
 800418e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004190:	2309      	movs	r3, #9
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004194:	f107 0314 	add.w	r3, r7, #20
 8004198:	4619      	mov	r1, r3
 800419a:	4816      	ldr	r0, [pc, #88]	; (80041f4 <HAL_CAN_MspInit+0xd0>)
 800419c:	f001 fb3a 	bl	8005814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80041a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a6:	2302      	movs	r3, #2
 80041a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041aa:	2301      	movs	r3, #1
 80041ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ae:	2303      	movs	r3, #3
 80041b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80041b2:	2309      	movs	r3, #9
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b6:	f107 0314 	add.w	r3, r7, #20
 80041ba:	4619      	mov	r1, r3
 80041bc:	480d      	ldr	r0, [pc, #52]	; (80041f4 <HAL_CAN_MspInit+0xd0>)
 80041be:	f001 fb29 	bl	8005814 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80041c2:	2200      	movs	r2, #0
 80041c4:	2100      	movs	r1, #0
 80041c6:	2013      	movs	r0, #19
 80041c8:	f001 fa5b 	bl	8005682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80041cc:	2013      	movs	r0, #19
 80041ce:	f001 fa74 	bl	80056ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80041d2:	2200      	movs	r2, #0
 80041d4:	2100      	movs	r1, #0
 80041d6:	2014      	movs	r0, #20
 80041d8:	f001 fa53 	bl	8005682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80041dc:	2014      	movs	r0, #20
 80041de:	f001 fa6c 	bl	80056ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80041e2:	bf00      	nop
 80041e4:	3728      	adds	r7, #40	; 0x28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40006400 	.word	0x40006400
 80041f0:	40023800 	.word	0x40023800
 80041f4:	40020000 	.word	0x40020000

080041f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a0e      	ldr	r2, [pc, #56]	; (8004240 <HAL_TIM_Base_MspInit+0x48>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d115      	bne.n	8004236 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	4b0d      	ldr	r3, [pc, #52]	; (8004244 <HAL_TIM_Base_MspInit+0x4c>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	4a0c      	ldr	r2, [pc, #48]	; (8004244 <HAL_TIM_Base_MspInit+0x4c>)
 8004214:	f043 0302 	orr.w	r3, r3, #2
 8004218:	6413      	str	r3, [r2, #64]	; 0x40
 800421a:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <HAL_TIM_Base_MspInit+0x4c>)
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8004226:	2200      	movs	r2, #0
 8004228:	2102      	movs	r1, #2
 800422a:	201d      	movs	r0, #29
 800422c:	f001 fa29 	bl	8005682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004230:	201d      	movs	r0, #29
 8004232:	f001 fa42 	bl	80056ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004236:	bf00      	nop
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40000400 	.word	0x40000400
 8004244:	40023800 	.word	0x40023800

08004248 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08c      	sub	sp, #48	; 0x30
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004250:	f107 031c 	add.w	r3, r7, #28
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	605a      	str	r2, [r3, #4]
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	60da      	str	r2, [r3, #12]
 800425e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a36      	ldr	r2, [pc, #216]	; (8004340 <HAL_UART_MspInit+0xf8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d12d      	bne.n	80042c6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	4b35      	ldr	r3, [pc, #212]	; (8004344 <HAL_UART_MspInit+0xfc>)
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	4a34      	ldr	r2, [pc, #208]	; (8004344 <HAL_UART_MspInit+0xfc>)
 8004274:	f043 0310 	orr.w	r3, r3, #16
 8004278:	6453      	str	r3, [r2, #68]	; 0x44
 800427a:	4b32      	ldr	r3, [pc, #200]	; (8004344 <HAL_UART_MspInit+0xfc>)
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	61bb      	str	r3, [r7, #24]
 8004284:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	4b2e      	ldr	r3, [pc, #184]	; (8004344 <HAL_UART_MspInit+0xfc>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	4a2d      	ldr	r2, [pc, #180]	; (8004344 <HAL_UART_MspInit+0xfc>)
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	6313      	str	r3, [r2, #48]	; 0x30
 8004296:	4b2b      	ldr	r3, [pc, #172]	; (8004344 <HAL_UART_MspInit+0xfc>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80042a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042a8:	2312      	movs	r3, #18
 80042aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042b0:	2303      	movs	r3, #3
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042b4:	2307      	movs	r3, #7
 80042b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b8:	f107 031c 	add.w	r3, r7, #28
 80042bc:	4619      	mov	r1, r3
 80042be:	4822      	ldr	r0, [pc, #136]	; (8004348 <HAL_UART_MspInit+0x100>)
 80042c0:	f001 faa8 	bl	8005814 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80042c4:	e038      	b.n	8004338 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a20      	ldr	r2, [pc, #128]	; (800434c <HAL_UART_MspInit+0x104>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d133      	bne.n	8004338 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80042d0:	2300      	movs	r3, #0
 80042d2:	613b      	str	r3, [r7, #16]
 80042d4:	4b1b      	ldr	r3, [pc, #108]	; (8004344 <HAL_UART_MspInit+0xfc>)
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	4a1a      	ldr	r2, [pc, #104]	; (8004344 <HAL_UART_MspInit+0xfc>)
 80042da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042de:	6413      	str	r3, [r2, #64]	; 0x40
 80042e0:	4b18      	ldr	r3, [pc, #96]	; (8004344 <HAL_UART_MspInit+0xfc>)
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	4b14      	ldr	r3, [pc, #80]	; (8004344 <HAL_UART_MspInit+0xfc>)
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	4a13      	ldr	r2, [pc, #76]	; (8004344 <HAL_UART_MspInit+0xfc>)
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	6313      	str	r3, [r2, #48]	; 0x30
 80042fc:	4b11      	ldr	r3, [pc, #68]	; (8004344 <HAL_UART_MspInit+0xfc>)
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004308:	230c      	movs	r3, #12
 800430a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430c:	2302      	movs	r3, #2
 800430e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004310:	2300      	movs	r3, #0
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004314:	2303      	movs	r3, #3
 8004316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004318:	2307      	movs	r3, #7
 800431a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800431c:	f107 031c 	add.w	r3, r7, #28
 8004320:	4619      	mov	r1, r3
 8004322:	4809      	ldr	r0, [pc, #36]	; (8004348 <HAL_UART_MspInit+0x100>)
 8004324:	f001 fa76 	bl	8005814 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004328:	2200      	movs	r2, #0
 800432a:	2100      	movs	r1, #0
 800432c:	2026      	movs	r0, #38	; 0x26
 800432e:	f001 f9a8 	bl	8005682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004332:	2026      	movs	r0, #38	; 0x26
 8004334:	f001 f9c1 	bl	80056ba <HAL_NVIC_EnableIRQ>
}
 8004338:	bf00      	nop
 800433a:	3730      	adds	r7, #48	; 0x30
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40011000 	.word	0x40011000
 8004344:	40023800 	.word	0x40023800
 8004348:	40020000 	.word	0x40020000
 800434c:	40004400 	.word	0x40004400

08004350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004354:	e7fe      	b.n	8004354 <NMI_Handler+0x4>

08004356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004356:	b480      	push	{r7}
 8004358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800435a:	e7fe      	b.n	800435a <HardFault_Handler+0x4>

0800435c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004360:	e7fe      	b.n	8004360 <MemManage_Handler+0x4>

08004362 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004362:	b480      	push	{r7}
 8004364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004366:	e7fe      	b.n	8004366 <BusFault_Handler+0x4>

08004368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800436c:	e7fe      	b.n	800436c <UsageFault_Handler+0x4>

0800436e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800436e:	b480      	push	{r7}
 8004370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004372:	bf00      	nop
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004380:	bf00      	nop
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800438a:	b480      	push	{r7}
 800438c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800438e:	bf00      	nop
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800439c:	f000 f97c 	bl	8004698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043a0:	bf00      	nop
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80043a8:	4802      	ldr	r0, [pc, #8]	; (80043b4 <CAN1_TX_IRQHandler+0x10>)
 80043aa:	f000 fe6a 	bl	8005082 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80043ae:	bf00      	nop
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20000204 	.word	0x20000204

080043b8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80043bc:	4802      	ldr	r0, [pc, #8]	; (80043c8 <CAN1_RX0_IRQHandler+0x10>)
 80043be:	f000 fe60 	bl	8005082 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80043c2:	bf00      	nop
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20000204 	.word	0x20000204

080043cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80043d0:	2020      	movs	r0, #32
 80043d2:	f001 fbe5 	bl	8005ba0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80043d6:	2040      	movs	r0, #64	; 0x40
 80043d8:	f001 fbe2 	bl	8005ba0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80043dc:	2080      	movs	r0, #128	; 0x80
 80043de:	f001 fbdf 	bl	8005ba0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80043e2:	bf00      	nop
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80043ec:	4802      	ldr	r0, [pc, #8]	; (80043f8 <TIM3_IRQHandler+0x10>)
 80043ee:	f002 fb95 	bl	8006b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80043f2:	bf00      	nop
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	2000022c 	.word	0x2000022c

080043fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004400:	4802      	ldr	r0, [pc, #8]	; (800440c <USART2_IRQHandler+0x10>)
 8004402:	f003 fb85 	bl	8007b10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004406:	bf00      	nop
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	200002b8 	.word	0x200002b8

08004410 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004414:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004418:	f001 fbc2 	bl	8005ba0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800441c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004420:	f001 fbbe 	bl	8005ba0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004424:	bf00      	nop
 8004426:	bd80      	pop	{r7, pc}

08004428 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
	return 1;
 800442c:	2301      	movs	r3, #1
}
 800442e:	4618      	mov	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <_kill>:

int _kill(int pid, int sig)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004442:	f004 fe79 	bl	8009138 <__errno>
 8004446:	4603      	mov	r3, r0
 8004448:	2216      	movs	r2, #22
 800444a:	601a      	str	r2, [r3, #0]
	return -1;
 800444c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <_exit>:

void _exit (int status)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004460:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff ffe7 	bl	8004438 <_kill>
	while (1) {}		/* Make sure we hang here */
 800446a:	e7fe      	b.n	800446a <_exit+0x12>

0800446c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	e00a      	b.n	8004494 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800447e:	f3af 8000 	nop.w
 8004482:	4601      	mov	r1, r0
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	60ba      	str	r2, [r7, #8]
 800448a:	b2ca      	uxtb	r2, r1
 800448c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	3301      	adds	r3, #1
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	429a      	cmp	r2, r3
 800449a:	dbf0      	blt.n	800447e <_read+0x12>
	}

return len;
 800449c:	687b      	ldr	r3, [r7, #4]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3718      	adds	r7, #24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
	return -1;
 80044ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044ce:	605a      	str	r2, [r3, #4]
	return 0;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <_isatty>:

int _isatty(int file)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
	return 1;
 80044e6:	2301      	movs	r3, #1
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
	return 0;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
	...

08004510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004518:	4a14      	ldr	r2, [pc, #80]	; (800456c <_sbrk+0x5c>)
 800451a:	4b15      	ldr	r3, [pc, #84]	; (8004570 <_sbrk+0x60>)
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004524:	4b13      	ldr	r3, [pc, #76]	; (8004574 <_sbrk+0x64>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d102      	bne.n	8004532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800452c:	4b11      	ldr	r3, [pc, #68]	; (8004574 <_sbrk+0x64>)
 800452e:	4a12      	ldr	r2, [pc, #72]	; (8004578 <_sbrk+0x68>)
 8004530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004532:	4b10      	ldr	r3, [pc, #64]	; (8004574 <_sbrk+0x64>)
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4413      	add	r3, r2
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	429a      	cmp	r2, r3
 800453e:	d207      	bcs.n	8004550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004540:	f004 fdfa 	bl	8009138 <__errno>
 8004544:	4603      	mov	r3, r0
 8004546:	220c      	movs	r2, #12
 8004548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800454a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800454e:	e009      	b.n	8004564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004550:	4b08      	ldr	r3, [pc, #32]	; (8004574 <_sbrk+0x64>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004556:	4b07      	ldr	r3, [pc, #28]	; (8004574 <_sbrk+0x64>)
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	4a05      	ldr	r2, [pc, #20]	; (8004574 <_sbrk+0x64>)
 8004560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004562:	68fb      	ldr	r3, [r7, #12]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20020000 	.word	0x20020000
 8004570:	00000400 	.word	0x00000400
 8004574:	20000938 	.word	0x20000938
 8004578:	20000b58 	.word	0x20000b58

0800457c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004580:	4b06      	ldr	r3, [pc, #24]	; (800459c <SystemInit+0x20>)
 8004582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004586:	4a05      	ldr	r2, [pc, #20]	; (800459c <SystemInit+0x20>)
 8004588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800458c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004590:	bf00      	nop
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	e000ed00 	.word	0xe000ed00

080045a0 <Reset_Handler>:
 80045a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045d8 <LoopFillZerobss+0x12>
 80045a4:	480d      	ldr	r0, [pc, #52]	; (80045dc <LoopFillZerobss+0x16>)
 80045a6:	490e      	ldr	r1, [pc, #56]	; (80045e0 <LoopFillZerobss+0x1a>)
 80045a8:	4a0e      	ldr	r2, [pc, #56]	; (80045e4 <LoopFillZerobss+0x1e>)
 80045aa:	2300      	movs	r3, #0
 80045ac:	e002      	b.n	80045b4 <LoopCopyDataInit>

080045ae <CopyDataInit>:
 80045ae:	58d4      	ldr	r4, [r2, r3]
 80045b0:	50c4      	str	r4, [r0, r3]
 80045b2:	3304      	adds	r3, #4

080045b4 <LoopCopyDataInit>:
 80045b4:	18c4      	adds	r4, r0, r3
 80045b6:	428c      	cmp	r4, r1
 80045b8:	d3f9      	bcc.n	80045ae <CopyDataInit>
 80045ba:	4a0b      	ldr	r2, [pc, #44]	; (80045e8 <LoopFillZerobss+0x22>)
 80045bc:	4c0b      	ldr	r4, [pc, #44]	; (80045ec <LoopFillZerobss+0x26>)
 80045be:	2300      	movs	r3, #0
 80045c0:	e001      	b.n	80045c6 <LoopFillZerobss>

080045c2 <FillZerobss>:
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	3204      	adds	r2, #4

080045c6 <LoopFillZerobss>:
 80045c6:	42a2      	cmp	r2, r4
 80045c8:	d3fb      	bcc.n	80045c2 <FillZerobss>
 80045ca:	f7ff ffd7 	bl	800457c <SystemInit>
 80045ce:	f004 fdb9 	bl	8009144 <__libc_init_array>
 80045d2:	f7fe fad5 	bl	8002b80 <main>
 80045d6:	4770      	bx	lr
 80045d8:	20020000 	.word	0x20020000
 80045dc:	20000000 	.word	0x20000000
 80045e0:	200001e8 	.word	0x200001e8
 80045e4:	0800e598 	.word	0x0800e598
 80045e8:	200001e8 	.word	0x200001e8
 80045ec:	20000b54 	.word	0x20000b54

080045f0 <ADC_IRQHandler>:
 80045f0:	e7fe      	b.n	80045f0 <ADC_IRQHandler>
	...

080045f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045f8:	4b0e      	ldr	r3, [pc, #56]	; (8004634 <HAL_Init+0x40>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a0d      	ldr	r2, [pc, #52]	; (8004634 <HAL_Init+0x40>)
 80045fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004602:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004604:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_Init+0x40>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a0a      	ldr	r2, [pc, #40]	; (8004634 <HAL_Init+0x40>)
 800460a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800460e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004610:	4b08      	ldr	r3, [pc, #32]	; (8004634 <HAL_Init+0x40>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a07      	ldr	r2, [pc, #28]	; (8004634 <HAL_Init+0x40>)
 8004616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800461a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800461c:	2003      	movs	r0, #3
 800461e:	f001 f825 	bl	800566c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004622:	2000      	movs	r0, #0
 8004624:	f000 f808 	bl	8004638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004628:	f7ff fd54 	bl	80040d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40023c00 	.word	0x40023c00

08004638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004640:	4b12      	ldr	r3, [pc, #72]	; (800468c <HAL_InitTick+0x54>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	4b12      	ldr	r3, [pc, #72]	; (8004690 <HAL_InitTick+0x58>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	4619      	mov	r1, r3
 800464a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800464e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004652:	fbb2 f3f3 	udiv	r3, r2, r3
 8004656:	4618      	mov	r0, r3
 8004658:	f001 f83d 	bl	80056d6 <HAL_SYSTICK_Config>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e00e      	b.n	8004684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b0f      	cmp	r3, #15
 800466a:	d80a      	bhi.n	8004682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800466c:	2200      	movs	r2, #0
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004674:	f001 f805 	bl	8005682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004678:	4a06      	ldr	r2, [pc, #24]	; (8004694 <HAL_InitTick+0x5c>)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	e000      	b.n	8004684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
}
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	2000000c 	.word	0x2000000c
 8004690:	20000014 	.word	0x20000014
 8004694:	20000010 	.word	0x20000010

08004698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <HAL_IncTick+0x20>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <HAL_IncTick+0x24>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4413      	add	r3, r2
 80046a8:	4a04      	ldr	r2, [pc, #16]	; (80046bc <HAL_IncTick+0x24>)
 80046aa:	6013      	str	r3, [r2, #0]
}
 80046ac:	bf00      	nop
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	20000014 	.word	0x20000014
 80046bc:	2000093c 	.word	0x2000093c

080046c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  return uwTick;
 80046c4:	4b03      	ldr	r3, [pc, #12]	; (80046d4 <HAL_GetTick+0x14>)
 80046c6:	681b      	ldr	r3, [r3, #0]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	2000093c 	.word	0x2000093c

080046d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046e0:	f7ff ffee 	bl	80046c0 <HAL_GetTick>
 80046e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046f0:	d005      	beq.n	80046fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046f2:	4b0a      	ldr	r3, [pc, #40]	; (800471c <HAL_Delay+0x44>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046fe:	bf00      	nop
 8004700:	f7ff ffde 	bl	80046c0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	429a      	cmp	r2, r3
 800470e:	d8f7      	bhi.n	8004700 <HAL_Delay+0x28>
  {
  }
}
 8004710:	bf00      	nop
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000014 	.word	0x20000014

08004720 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e0ed      	b.n	800490e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d102      	bne.n	8004744 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff fcf0 	bl	8004124 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004754:	f7ff ffb4 	bl	80046c0 <HAL_GetTick>
 8004758:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800475a:	e012      	b.n	8004782 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800475c:	f7ff ffb0 	bl	80046c0 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b0a      	cmp	r3, #10
 8004768:	d90b      	bls.n	8004782 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2205      	movs	r2, #5
 800477a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e0c5      	b.n	800490e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0e5      	beq.n	800475c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0202 	bic.w	r2, r2, #2
 800479e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047a0:	f7ff ff8e 	bl	80046c0 <HAL_GetTick>
 80047a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80047a6:	e012      	b.n	80047ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80047a8:	f7ff ff8a 	bl	80046c0 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b0a      	cmp	r3, #10
 80047b4:	d90b      	bls.n	80047ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2205      	movs	r2, #5
 80047c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e09f      	b.n	800490e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e5      	bne.n	80047a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	7e1b      	ldrb	r3, [r3, #24]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d108      	bne.n	80047f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	e007      	b.n	8004806 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004804:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	7e5b      	ldrb	r3, [r3, #25]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d108      	bne.n	8004820 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	e007      	b.n	8004830 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800482e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	7e9b      	ldrb	r3, [r3, #26]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d108      	bne.n	800484a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0220 	orr.w	r2, r2, #32
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	e007      	b.n	800485a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0220 	bic.w	r2, r2, #32
 8004858:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	7edb      	ldrb	r3, [r3, #27]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d108      	bne.n	8004874 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0210 	bic.w	r2, r2, #16
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	e007      	b.n	8004884 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0210 	orr.w	r2, r2, #16
 8004882:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	7f1b      	ldrb	r3, [r3, #28]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d108      	bne.n	800489e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0208 	orr.w	r2, r2, #8
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	e007      	b.n	80048ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0208 	bic.w	r2, r2, #8
 80048ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	7f5b      	ldrb	r3, [r3, #29]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d108      	bne.n	80048c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f042 0204 	orr.w	r2, r2, #4
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e007      	b.n	80048d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0204 	bic.w	r2, r2, #4
 80048d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	ea42 0103 	orr.w	r1, r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	1e5a      	subs	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800492e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004930:	7cfb      	ldrb	r3, [r7, #19]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d003      	beq.n	800493e <HAL_CAN_ConfigFilter+0x26>
 8004936:	7cfb      	ldrb	r3, [r7, #19]
 8004938:	2b02      	cmp	r3, #2
 800493a:	f040 80be 	bne.w	8004aba <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800493e:	4b65      	ldr	r3, [pc, #404]	; (8004ad4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004940:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004948:	f043 0201 	orr.w	r2, r3, #1
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004958:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	021b      	lsls	r3, r3, #8
 800496e:	431a      	orrs	r2, r3
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	f003 031f 	and.w	r3, r3, #31
 800497e:	2201      	movs	r2, #1
 8004980:	fa02 f303 	lsl.w	r3, r2, r3
 8004984:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	43db      	mvns	r3, r3
 8004990:	401a      	ands	r2, r3
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d123      	bne.n	80049e8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	43db      	mvns	r3, r3
 80049aa:	401a      	ands	r2, r3
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80049c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	3248      	adds	r2, #72	; 0x48
 80049c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80049dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80049de:	6979      	ldr	r1, [r7, #20]
 80049e0:	3348      	adds	r3, #72	; 0x48
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	440b      	add	r3, r1
 80049e6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d122      	bne.n	8004a36 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004a10:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	3248      	adds	r2, #72	; 0x48
 8004a16:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a2a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a2c:	6979      	ldr	r1, [r7, #20]
 8004a2e:	3348      	adds	r3, #72	; 0x48
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	440b      	add	r3, r1
 8004a34:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	43db      	mvns	r3, r3
 8004a48:	401a      	ands	r2, r3
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004a50:	e007      	b.n	8004a62 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	43db      	mvns	r3, r3
 8004a74:	401a      	ands	r2, r3
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004a7c:	e007      	b.n	8004a8e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d107      	bne.n	8004aa6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004aac:	f023 0201 	bic.w	r2, r3, #1
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e006      	b.n	8004ac8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
  }
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	371c      	adds	r7, #28
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	40006400 	.word	0x40006400

08004ad8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d12e      	bne.n	8004b4a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0201 	bic.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b04:	f7ff fddc 	bl	80046c0 <HAL_GetTick>
 8004b08:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004b0a:	e012      	b.n	8004b32 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b0c:	f7ff fdd8 	bl	80046c0 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b0a      	cmp	r3, #10
 8004b18:	d90b      	bls.n	8004b32 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2205      	movs	r2, #5
 8004b2a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e012      	b.n	8004b58 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1e5      	bne.n	8004b0c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	e006      	b.n	8004b58 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
  }
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d133      	bne.n	8004bdc <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b84:	f7ff fd9c 	bl	80046c0 <HAL_GetTick>
 8004b88:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b8a:	e012      	b.n	8004bb2 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b8c:	f7ff fd98 	bl	80046c0 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b0a      	cmp	r3, #10
 8004b98:	d90b      	bls.n	8004bb2 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2205      	movs	r2, #5
 8004baa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e01b      	b.n	8004bea <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0e5      	beq.n	8004b8c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0202 	bic.w	r2, r2, #2
 8004bce:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	e006      	b.n	8004bea <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
  }
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b089      	sub	sp, #36	; 0x24
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	607a      	str	r2, [r7, #4]
 8004bfe:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c06:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004c10:	7ffb      	ldrb	r3, [r7, #31]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d003      	beq.n	8004c1e <HAL_CAN_AddTxMessage+0x2c>
 8004c16:	7ffb      	ldrb	r3, [r7, #31]
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	f040 80b8 	bne.w	8004d8e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10a      	bne.n	8004c3e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d105      	bne.n	8004c3e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 80a0 	beq.w	8004d7e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	0e1b      	lsrs	r3, r3, #24
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d907      	bls.n	8004c5e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e09e      	b.n	8004d9c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004c5e:	2201      	movs	r2, #1
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	409a      	lsls	r2, r3
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10d      	bne.n	8004c8c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004c7a:	68f9      	ldr	r1, [r7, #12]
 8004c7c:	6809      	ldr	r1, [r1, #0]
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	3318      	adds	r3, #24
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	440b      	add	r3, r1
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	e00f      	b.n	8004cac <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004c96:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004c9c:	68f9      	ldr	r1, [r7, #12]
 8004c9e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004ca0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	3318      	adds	r3, #24
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	440b      	add	r3, r1
 8004caa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6819      	ldr	r1, [r3, #0]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	3318      	adds	r3, #24
 8004cb8:	011b      	lsls	r3, r3, #4
 8004cba:	440b      	add	r3, r1
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	7d1b      	ldrb	r3, [r3, #20]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d111      	bne.n	8004cec <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	3318      	adds	r3, #24
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	4413      	add	r3, r2
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	6811      	ldr	r1, [r2, #0]
 8004cdc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	3318      	adds	r3, #24
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	440b      	add	r3, r1
 8004ce8:	3304      	adds	r3, #4
 8004cea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3307      	adds	r3, #7
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	061a      	lsls	r2, r3, #24
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3306      	adds	r3, #6
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	041b      	lsls	r3, r3, #16
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3305      	adds	r3, #5
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	021b      	lsls	r3, r3, #8
 8004d06:	4313      	orrs	r3, r2
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	3204      	adds	r2, #4
 8004d0c:	7812      	ldrb	r2, [r2, #0]
 8004d0e:	4610      	mov	r0, r2
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	6811      	ldr	r1, [r2, #0]
 8004d14:	ea43 0200 	orr.w	r2, r3, r0
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	440b      	add	r3, r1
 8004d1e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004d22:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3303      	adds	r3, #3
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	061a      	lsls	r2, r3, #24
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3302      	adds	r3, #2
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	041b      	lsls	r3, r3, #16
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	021b      	lsls	r3, r3, #8
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	7812      	ldrb	r2, [r2, #0]
 8004d44:	4610      	mov	r0, r2
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	6811      	ldr	r1, [r2, #0]
 8004d4a:	ea43 0200 	orr.w	r2, r3, r0
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	440b      	add	r3, r1
 8004d54:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004d58:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	3318      	adds	r3, #24
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	4413      	add	r3, r2
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	6811      	ldr	r1, [r2, #0]
 8004d6c:	f043 0201 	orr.w	r2, r3, #1
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	3318      	adds	r3, #24
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	440b      	add	r3, r1
 8004d78:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e00e      	b.n	8004d9c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e006      	b.n	8004d9c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
  }
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3724      	adds	r7, #36	; 0x24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dba:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8004dbc:	7afb      	ldrb	r3, [r7, #11]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d002      	beq.n	8004dc8 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004dc2:	7afb      	ldrb	r3, [r7, #11]
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d11d      	bne.n	8004e04 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3301      	adds	r3, #1
 8004dee:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3301      	adds	r3, #1
 8004e02:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004e04:	68fb      	ldr	r3, [r7, #12]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004e12:	b480      	push	{r7}
 8004e14:	b087      	sub	sp, #28
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	607a      	str	r2, [r7, #4]
 8004e1e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e26:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004e28:	7dfb      	ldrb	r3, [r7, #23]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d003      	beq.n	8004e36 <HAL_CAN_GetRxMessage+0x24>
 8004e2e:	7dfb      	ldrb	r3, [r7, #23]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	f040 80f3 	bne.w	800501c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10e      	bne.n	8004e5a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d116      	bne.n	8004e78 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e0e7      	b.n	800502a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d107      	bne.n	8004e78 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0d8      	b.n	800502a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	331b      	adds	r3, #27
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	4413      	add	r3, r2
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0204 	and.w	r2, r3, #4
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10c      	bne.n	8004eb0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	331b      	adds	r3, #27
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	4413      	add	r3, r2
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	0d5b      	lsrs	r3, r3, #21
 8004ea6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	e00b      	b.n	8004ec8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	331b      	adds	r3, #27
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	4413      	add	r3, r2
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	08db      	lsrs	r3, r3, #3
 8004ec0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	331b      	adds	r3, #27
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	4413      	add	r3, r2
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0202 	and.w	r2, r3, #2
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	331b      	adds	r3, #27
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	4413      	add	r3, r2
 8004eea:	3304      	adds	r3, #4
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 020f 	and.w	r2, r3, #15
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	331b      	adds	r3, #27
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	4413      	add	r3, r2
 8004f02:	3304      	adds	r3, #4
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	0a1b      	lsrs	r3, r3, #8
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	331b      	adds	r3, #27
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	4413      	add	r3, r2
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	0c1b      	lsrs	r3, r3, #16
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	0a1a      	lsrs	r2, r3, #8
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	3301      	adds	r3, #1
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	0c1a      	lsrs	r2, r3, #16
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	3302      	adds	r3, #2
 8004f6c:	b2d2      	uxtb	r2, r2
 8004f6e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	0e1a      	lsrs	r2, r3, #24
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	3303      	adds	r3, #3
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	0a1a      	lsrs	r2, r3, #8
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	3305      	adds	r3, #5
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	0c1a      	lsrs	r2, r3, #16
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	3306      	adds	r3, #6
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	0e1a      	lsrs	r2, r3, #24
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	3307      	adds	r3, #7
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d108      	bne.n	8005008 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0220 	orr.w	r2, r2, #32
 8005004:	60da      	str	r2, [r3, #12]
 8005006:	e007      	b.n	8005018 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691a      	ldr	r2, [r3, #16]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0220 	orr.w	r2, r2, #32
 8005016:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	e006      	b.n	800502a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
  }
}
 800502a:	4618      	mov	r0, r3
 800502c:	371c      	adds	r7, #28
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005036:	b480      	push	{r7}
 8005038:	b085      	sub	sp, #20
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005046:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005048:	7bfb      	ldrb	r3, [r7, #15]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d002      	beq.n	8005054 <HAL_CAN_ActivateNotification+0x1e>
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d109      	bne.n	8005068 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6959      	ldr	r1, [r3, #20]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005064:	2300      	movs	r3, #0
 8005066:	e006      	b.n	8005076 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
  }
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b08a      	sub	sp, #40	; 0x28
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800508a:	2300      	movs	r3, #0
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d07c      	beq.n	80051c2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d023      	beq.n	800511a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2201      	movs	r2, #1
 80050d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7fe fea5 	bl	8003e34 <HAL_CAN_TxMailbox0CompleteCallback>
 80050ea:	e016      	b.n	800511a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	f003 0304 	and.w	r3, r3, #4
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d004      	beq.n	8005100 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
 80050fe:	e00c      	b.n	800511a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d004      	beq.n	8005114 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
 8005112:	e002      	b.n	800511a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f97f 	bl	8005418 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005120:	2b00      	cmp	r3, #0
 8005122:	d024      	beq.n	800516e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f44f 7280 	mov.w	r2, #256	; 0x100
 800512c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f959 	bl	80053f0 <HAL_CAN_TxMailbox1CompleteCallback>
 800513e:	e016      	b.n	800516e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005146:	2b00      	cmp	r3, #0
 8005148:	d004      	beq.n	8005154 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
 8005152:	e00c      	b.n	800516e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800515a:	2b00      	cmp	r3, #0
 800515c:	d004      	beq.n	8005168 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
 8005166:	e002      	b.n	800516e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f95f 	bl	800542c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d024      	beq.n	80051c2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005180:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f939 	bl	8005404 <HAL_CAN_TxMailbox2CompleteCallback>
 8005192:	e016      	b.n	80051c2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d004      	beq.n	80051a8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
 80051a6:	e00c      	b.n	80051c2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d004      	beq.n	80051bc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ba:	e002      	b.n	80051c2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f93f 	bl	8005440 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00c      	beq.n	80051e6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f003 0310 	and.w	r3, r3, #16
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d007      	beq.n	80051e6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2210      	movs	r2, #16
 80051e4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00b      	beq.n	8005208 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d006      	beq.n	8005208 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2208      	movs	r2, #8
 8005200:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f926 	bl	8005454 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d009      	beq.n	8005226 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7fe fe17 	bl	8003e54 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00c      	beq.n	800524a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f003 0310 	and.w	r3, r3, #16
 8005236:	2b00      	cmp	r3, #0
 8005238:	d007      	beq.n	800524a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005240:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2210      	movs	r2, #16
 8005248:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	f003 0320 	and.w	r3, r3, #32
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00b      	beq.n	800526c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d006      	beq.n	800526c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2208      	movs	r2, #8
 8005264:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f908 	bl	800547c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	f003 0310 	and.w	r3, r3, #16
 8005272:	2b00      	cmp	r3, #0
 8005274:	d009      	beq.n	800528a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f8ef 	bl	8005468 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00b      	beq.n	80052ac <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f003 0310 	and.w	r3, r3, #16
 800529a:	2b00      	cmp	r3, #0
 800529c:	d006      	beq.n	80052ac <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2210      	movs	r2, #16
 80052a4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f8f2 	bl	8005490 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00b      	beq.n	80052ce <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d006      	beq.n	80052ce <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2208      	movs	r2, #8
 80052c6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f8eb 	bl	80054a4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d07b      	beq.n	80053d0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d072      	beq.n	80053c8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d008      	beq.n	80052fe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	f043 0301 	orr.w	r3, r3, #1
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	f043 0302 	orr.w	r3, r3, #2
 8005318:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	f043 0304 	orr.w	r3, r3, #4
 8005334:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800533c:	2b00      	cmp	r3, #0
 800533e:	d043      	beq.n	80053c8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005346:	2b00      	cmp	r3, #0
 8005348:	d03e      	beq.n	80053c8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005350:	2b60      	cmp	r3, #96	; 0x60
 8005352:	d02b      	beq.n	80053ac <HAL_CAN_IRQHandler+0x32a>
 8005354:	2b60      	cmp	r3, #96	; 0x60
 8005356:	d82e      	bhi.n	80053b6 <HAL_CAN_IRQHandler+0x334>
 8005358:	2b50      	cmp	r3, #80	; 0x50
 800535a:	d022      	beq.n	80053a2 <HAL_CAN_IRQHandler+0x320>
 800535c:	2b50      	cmp	r3, #80	; 0x50
 800535e:	d82a      	bhi.n	80053b6 <HAL_CAN_IRQHandler+0x334>
 8005360:	2b40      	cmp	r3, #64	; 0x40
 8005362:	d019      	beq.n	8005398 <HAL_CAN_IRQHandler+0x316>
 8005364:	2b40      	cmp	r3, #64	; 0x40
 8005366:	d826      	bhi.n	80053b6 <HAL_CAN_IRQHandler+0x334>
 8005368:	2b30      	cmp	r3, #48	; 0x30
 800536a:	d010      	beq.n	800538e <HAL_CAN_IRQHandler+0x30c>
 800536c:	2b30      	cmp	r3, #48	; 0x30
 800536e:	d822      	bhi.n	80053b6 <HAL_CAN_IRQHandler+0x334>
 8005370:	2b10      	cmp	r3, #16
 8005372:	d002      	beq.n	800537a <HAL_CAN_IRQHandler+0x2f8>
 8005374:	2b20      	cmp	r3, #32
 8005376:	d005      	beq.n	8005384 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005378:	e01d      	b.n	80053b6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	f043 0308 	orr.w	r3, r3, #8
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005382:	e019      	b.n	80053b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	f043 0310 	orr.w	r3, r3, #16
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800538c:	e014      	b.n	80053b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	f043 0320 	orr.w	r3, r3, #32
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005396:	e00f      	b.n	80053b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80053a0:	e00a      	b.n	80053b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80053aa:	e005      	b.n	80053b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80053b4:	e000      	b.n	80053b8 <HAL_CAN_IRQHandler+0x336>
            break;
 80053b6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80053c6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2204      	movs	r2, #4
 80053ce:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d008      	beq.n	80053e8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f868 	bl	80054b8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80053e8:	bf00      	nop
 80053ea:	3728      	adds	r7, #40	; 0x28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054dc:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <__NVIC_SetPriorityGrouping+0x44>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80054e8:	4013      	ands	r3, r2
 80054ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80054f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054fe:	4a04      	ldr	r2, [pc, #16]	; (8005510 <__NVIC_SetPriorityGrouping+0x44>)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	60d3      	str	r3, [r2, #12]
}
 8005504:	bf00      	nop
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	e000ed00 	.word	0xe000ed00

08005514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005518:	4b04      	ldr	r3, [pc, #16]	; (800552c <__NVIC_GetPriorityGrouping+0x18>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	0a1b      	lsrs	r3, r3, #8
 800551e:	f003 0307 	and.w	r3, r3, #7
}
 8005522:	4618      	mov	r0, r3
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	e000ed00 	.word	0xe000ed00

08005530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800553a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800553e:	2b00      	cmp	r3, #0
 8005540:	db0b      	blt.n	800555a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	f003 021f 	and.w	r2, r3, #31
 8005548:	4907      	ldr	r1, [pc, #28]	; (8005568 <__NVIC_EnableIRQ+0x38>)
 800554a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	2001      	movs	r0, #1
 8005552:	fa00 f202 	lsl.w	r2, r0, r2
 8005556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	e000e100 	.word	0xe000e100

0800556c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	4603      	mov	r3, r0
 8005574:	6039      	str	r1, [r7, #0]
 8005576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557c:	2b00      	cmp	r3, #0
 800557e:	db0a      	blt.n	8005596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	b2da      	uxtb	r2, r3
 8005584:	490c      	ldr	r1, [pc, #48]	; (80055b8 <__NVIC_SetPriority+0x4c>)
 8005586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558a:	0112      	lsls	r2, r2, #4
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	440b      	add	r3, r1
 8005590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005594:	e00a      	b.n	80055ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	b2da      	uxtb	r2, r3
 800559a:	4908      	ldr	r1, [pc, #32]	; (80055bc <__NVIC_SetPriority+0x50>)
 800559c:	79fb      	ldrb	r3, [r7, #7]
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	3b04      	subs	r3, #4
 80055a4:	0112      	lsls	r2, r2, #4
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	440b      	add	r3, r1
 80055aa:	761a      	strb	r2, [r3, #24]
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	e000e100 	.word	0xe000e100
 80055bc:	e000ed00 	.word	0xe000ed00

080055c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b089      	sub	sp, #36	; 0x24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	f1c3 0307 	rsb	r3, r3, #7
 80055da:	2b04      	cmp	r3, #4
 80055dc:	bf28      	it	cs
 80055de:	2304      	movcs	r3, #4
 80055e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	3304      	adds	r3, #4
 80055e6:	2b06      	cmp	r3, #6
 80055e8:	d902      	bls.n	80055f0 <NVIC_EncodePriority+0x30>
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	3b03      	subs	r3, #3
 80055ee:	e000      	b.n	80055f2 <NVIC_EncodePriority+0x32>
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	43da      	mvns	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	401a      	ands	r2, r3
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005608:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	fa01 f303 	lsl.w	r3, r1, r3
 8005612:	43d9      	mvns	r1, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005618:	4313      	orrs	r3, r2
         );
}
 800561a:	4618      	mov	r0, r3
 800561c:	3724      	adds	r7, #36	; 0x24
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
	...

08005628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3b01      	subs	r3, #1
 8005634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005638:	d301      	bcc.n	800563e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800563a:	2301      	movs	r3, #1
 800563c:	e00f      	b.n	800565e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800563e:	4a0a      	ldr	r2, [pc, #40]	; (8005668 <SysTick_Config+0x40>)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3b01      	subs	r3, #1
 8005644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005646:	210f      	movs	r1, #15
 8005648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800564c:	f7ff ff8e 	bl	800556c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005650:	4b05      	ldr	r3, [pc, #20]	; (8005668 <SysTick_Config+0x40>)
 8005652:	2200      	movs	r2, #0
 8005654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005656:	4b04      	ldr	r3, [pc, #16]	; (8005668 <SysTick_Config+0x40>)
 8005658:	2207      	movs	r2, #7
 800565a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	e000e010 	.word	0xe000e010

0800566c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff ff29 	bl	80054cc <__NVIC_SetPriorityGrouping>
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005682:	b580      	push	{r7, lr}
 8005684:	b086      	sub	sp, #24
 8005686:	af00      	add	r7, sp, #0
 8005688:	4603      	mov	r3, r0
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	607a      	str	r2, [r7, #4]
 800568e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005690:	2300      	movs	r3, #0
 8005692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005694:	f7ff ff3e 	bl	8005514 <__NVIC_GetPriorityGrouping>
 8005698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	6978      	ldr	r0, [r7, #20]
 80056a0:	f7ff ff8e 	bl	80055c0 <NVIC_EncodePriority>
 80056a4:	4602      	mov	r2, r0
 80056a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056aa:	4611      	mov	r1, r2
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7ff ff5d 	bl	800556c <__NVIC_SetPriority>
}
 80056b2:	bf00      	nop
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b082      	sub	sp, #8
 80056be:	af00      	add	r7, sp, #0
 80056c0:	4603      	mov	r3, r0
 80056c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff ff31 	bl	8005530 <__NVIC_EnableIRQ>
}
 80056ce:	bf00      	nop
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b082      	sub	sp, #8
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7ff ffa2 	bl	8005628 <SysTick_Config>
 80056e4:	4603      	mov	r3, r0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b084      	sub	sp, #16
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80056fc:	f7fe ffe0 	bl	80046c0 <HAL_GetTick>
 8005700:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d008      	beq.n	8005720 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2280      	movs	r2, #128	; 0x80
 8005712:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e052      	b.n	80057c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0216 	bic.w	r2, r2, #22
 800572e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695a      	ldr	r2, [r3, #20]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800573e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	2b00      	cmp	r3, #0
 8005746:	d103      	bne.n	8005750 <HAL_DMA_Abort+0x62>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800574c:	2b00      	cmp	r3, #0
 800574e:	d007      	beq.n	8005760 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0208 	bic.w	r2, r2, #8
 800575e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0201 	bic.w	r2, r2, #1
 800576e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005770:	e013      	b.n	800579a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005772:	f7fe ffa5 	bl	80046c0 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b05      	cmp	r3, #5
 800577e:	d90c      	bls.n	800579a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2203      	movs	r2, #3
 800578a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e015      	b.n	80057c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e4      	bne.n	8005772 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ac:	223f      	movs	r2, #63	; 0x3f
 80057ae:	409a      	lsls	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d004      	beq.n	80057ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2280      	movs	r2, #128	; 0x80
 80057e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e00c      	b.n	8005806 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2205      	movs	r2, #5
 80057f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0201 	bic.w	r2, r2, #1
 8005802:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
	...

08005814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005814:	b480      	push	{r7}
 8005816:	b089      	sub	sp, #36	; 0x24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800581e:	2300      	movs	r3, #0
 8005820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005822:	2300      	movs	r3, #0
 8005824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005826:	2300      	movs	r3, #0
 8005828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800582a:	2300      	movs	r3, #0
 800582c:	61fb      	str	r3, [r7, #28]
 800582e:	e165      	b.n	8005afc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005830:	2201      	movs	r2, #1
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4013      	ands	r3, r2
 8005842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	429a      	cmp	r2, r3
 800584a:	f040 8154 	bne.w	8005af6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	2b01      	cmp	r3, #1
 8005858:	d005      	beq.n	8005866 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005862:	2b02      	cmp	r3, #2
 8005864:	d130      	bne.n	80058c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	2203      	movs	r2, #3
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	43db      	mvns	r3, r3
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	4013      	ands	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	fa02 f303 	lsl.w	r3, r2, r3
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	4313      	orrs	r3, r2
 800588e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800589c:	2201      	movs	r2, #1
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	fa02 f303 	lsl.w	r3, r2, r3
 80058a4:	43db      	mvns	r3, r3
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	4013      	ands	r3, r2
 80058aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	091b      	lsrs	r3, r3, #4
 80058b2:	f003 0201 	and.w	r2, r3, #1
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	fa02 f303 	lsl.w	r3, r2, r3
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	4313      	orrs	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f003 0303 	and.w	r3, r3, #3
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d017      	beq.n	8005904 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	2203      	movs	r2, #3
 80058e0:	fa02 f303 	lsl.w	r3, r2, r3
 80058e4:	43db      	mvns	r3, r3
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	4013      	ands	r3, r2
 80058ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	fa02 f303 	lsl.w	r3, r2, r3
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f003 0303 	and.w	r3, r3, #3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d123      	bne.n	8005958 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	08da      	lsrs	r2, r3, #3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3208      	adds	r2, #8
 8005918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800591c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	220f      	movs	r2, #15
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	43db      	mvns	r3, r3
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	4013      	ands	r3, r2
 8005932:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	691a      	ldr	r2, [r3, #16]
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	f003 0307 	and.w	r3, r3, #7
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	fa02 f303 	lsl.w	r3, r2, r3
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	4313      	orrs	r3, r2
 8005948:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	08da      	lsrs	r2, r3, #3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	3208      	adds	r2, #8
 8005952:	69b9      	ldr	r1, [r7, #24]
 8005954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	2203      	movs	r2, #3
 8005964:	fa02 f303 	lsl.w	r3, r2, r3
 8005968:	43db      	mvns	r3, r3
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	4013      	ands	r3, r2
 800596e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f003 0203 	and.w	r2, r3, #3
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	fa02 f303 	lsl.w	r3, r2, r3
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	4313      	orrs	r3, r2
 8005984:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 80ae 	beq.w	8005af6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	4b5d      	ldr	r3, [pc, #372]	; (8005b14 <HAL_GPIO_Init+0x300>)
 80059a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a2:	4a5c      	ldr	r2, [pc, #368]	; (8005b14 <HAL_GPIO_Init+0x300>)
 80059a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059a8:	6453      	str	r3, [r2, #68]	; 0x44
 80059aa:	4b5a      	ldr	r3, [pc, #360]	; (8005b14 <HAL_GPIO_Init+0x300>)
 80059ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059b6:	4a58      	ldr	r2, [pc, #352]	; (8005b18 <HAL_GPIO_Init+0x304>)
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	089b      	lsrs	r3, r3, #2
 80059bc:	3302      	adds	r3, #2
 80059be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	220f      	movs	r2, #15
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	43db      	mvns	r3, r3
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4013      	ands	r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a4f      	ldr	r2, [pc, #316]	; (8005b1c <HAL_GPIO_Init+0x308>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d025      	beq.n	8005a2e <HAL_GPIO_Init+0x21a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a4e      	ldr	r2, [pc, #312]	; (8005b20 <HAL_GPIO_Init+0x30c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01f      	beq.n	8005a2a <HAL_GPIO_Init+0x216>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a4d      	ldr	r2, [pc, #308]	; (8005b24 <HAL_GPIO_Init+0x310>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d019      	beq.n	8005a26 <HAL_GPIO_Init+0x212>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a4c      	ldr	r2, [pc, #304]	; (8005b28 <HAL_GPIO_Init+0x314>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d013      	beq.n	8005a22 <HAL_GPIO_Init+0x20e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a4b      	ldr	r2, [pc, #300]	; (8005b2c <HAL_GPIO_Init+0x318>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00d      	beq.n	8005a1e <HAL_GPIO_Init+0x20a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a4a      	ldr	r2, [pc, #296]	; (8005b30 <HAL_GPIO_Init+0x31c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d007      	beq.n	8005a1a <HAL_GPIO_Init+0x206>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a49      	ldr	r2, [pc, #292]	; (8005b34 <HAL_GPIO_Init+0x320>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d101      	bne.n	8005a16 <HAL_GPIO_Init+0x202>
 8005a12:	2306      	movs	r3, #6
 8005a14:	e00c      	b.n	8005a30 <HAL_GPIO_Init+0x21c>
 8005a16:	2307      	movs	r3, #7
 8005a18:	e00a      	b.n	8005a30 <HAL_GPIO_Init+0x21c>
 8005a1a:	2305      	movs	r3, #5
 8005a1c:	e008      	b.n	8005a30 <HAL_GPIO_Init+0x21c>
 8005a1e:	2304      	movs	r3, #4
 8005a20:	e006      	b.n	8005a30 <HAL_GPIO_Init+0x21c>
 8005a22:	2303      	movs	r3, #3
 8005a24:	e004      	b.n	8005a30 <HAL_GPIO_Init+0x21c>
 8005a26:	2302      	movs	r3, #2
 8005a28:	e002      	b.n	8005a30 <HAL_GPIO_Init+0x21c>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <HAL_GPIO_Init+0x21c>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	69fa      	ldr	r2, [r7, #28]
 8005a32:	f002 0203 	and.w	r2, r2, #3
 8005a36:	0092      	lsls	r2, r2, #2
 8005a38:	4093      	lsls	r3, r2
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a40:	4935      	ldr	r1, [pc, #212]	; (8005b18 <HAL_GPIO_Init+0x304>)
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	089b      	lsrs	r3, r3, #2
 8005a46:	3302      	adds	r3, #2
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a4e:	4b3a      	ldr	r3, [pc, #232]	; (8005b38 <HAL_GPIO_Init+0x324>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	43db      	mvns	r3, r3
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a72:	4a31      	ldr	r2, [pc, #196]	; (8005b38 <HAL_GPIO_Init+0x324>)
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a78:	4b2f      	ldr	r3, [pc, #188]	; (8005b38 <HAL_GPIO_Init+0x324>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	43db      	mvns	r3, r3
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	4013      	ands	r3, r2
 8005a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a9c:	4a26      	ldr	r2, [pc, #152]	; (8005b38 <HAL_GPIO_Init+0x324>)
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005aa2:	4b25      	ldr	r3, [pc, #148]	; (8005b38 <HAL_GPIO_Init+0x324>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	43db      	mvns	r3, r3
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	4013      	ands	r3, r2
 8005ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ac6:	4a1c      	ldr	r2, [pc, #112]	; (8005b38 <HAL_GPIO_Init+0x324>)
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005acc:	4b1a      	ldr	r3, [pc, #104]	; (8005b38 <HAL_GPIO_Init+0x324>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	43db      	mvns	r3, r3
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005af0:	4a11      	ldr	r2, [pc, #68]	; (8005b38 <HAL_GPIO_Init+0x324>)
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	3301      	adds	r3, #1
 8005afa:	61fb      	str	r3, [r7, #28]
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	2b0f      	cmp	r3, #15
 8005b00:	f67f ae96 	bls.w	8005830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b04:	bf00      	nop
 8005b06:	bf00      	nop
 8005b08:	3724      	adds	r7, #36	; 0x24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	40023800 	.word	0x40023800
 8005b18:	40013800 	.word	0x40013800
 8005b1c:	40020000 	.word	0x40020000
 8005b20:	40020400 	.word	0x40020400
 8005b24:	40020800 	.word	0x40020800
 8005b28:	40020c00 	.word	0x40020c00
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	40021400 	.word	0x40021400
 8005b34:	40021800 	.word	0x40021800
 8005b38:	40013c00 	.word	0x40013c00

08005b3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691a      	ldr	r2, [r3, #16]
 8005b4c:	887b      	ldrh	r3, [r7, #2]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b54:	2301      	movs	r3, #1
 8005b56:	73fb      	strb	r3, [r7, #15]
 8005b58:	e001      	b.n	8005b5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	807b      	strh	r3, [r7, #2]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b7c:	787b      	ldrb	r3, [r7, #1]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b82:	887a      	ldrh	r2, [r7, #2]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b88:	e003      	b.n	8005b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b8a:	887b      	ldrh	r3, [r7, #2]
 8005b8c:	041a      	lsls	r2, r3, #16
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	619a      	str	r2, [r3, #24]
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
	...

08005ba0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005baa:	4b08      	ldr	r3, [pc, #32]	; (8005bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bac:	695a      	ldr	r2, [r3, #20]
 8005bae:	88fb      	ldrh	r3, [r7, #6]
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d006      	beq.n	8005bc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005bb6:	4a05      	ldr	r2, [pc, #20]	; (8005bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bb8:	88fb      	ldrh	r3, [r7, #6]
 8005bba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005bbc:	88fb      	ldrh	r3, [r7, #6]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe f994 	bl	8003eec <HAL_GPIO_EXTI_Callback>
  }
}
 8005bc4:	bf00      	nop
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	40013c00 	.word	0x40013c00

08005bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e0cc      	b.n	8005d7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005be4:	4b68      	ldr	r3, [pc, #416]	; (8005d88 <HAL_RCC_ClockConfig+0x1b8>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d90c      	bls.n	8005c0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bf2:	4b65      	ldr	r3, [pc, #404]	; (8005d88 <HAL_RCC_ClockConfig+0x1b8>)
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bfa:	4b63      	ldr	r3, [pc, #396]	; (8005d88 <HAL_RCC_ClockConfig+0x1b8>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 030f 	and.w	r3, r3, #15
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d001      	beq.n	8005c0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e0b8      	b.n	8005d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d020      	beq.n	8005c5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d005      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c24:	4b59      	ldr	r3, [pc, #356]	; (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	4a58      	ldr	r2, [pc, #352]	; (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d005      	beq.n	8005c48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c3c:	4b53      	ldr	r3, [pc, #332]	; (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	4a52      	ldr	r2, [pc, #328]	; (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c48:	4b50      	ldr	r3, [pc, #320]	; (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	494d      	ldr	r1, [pc, #308]	; (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d044      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d107      	bne.n	8005c7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c6e:	4b47      	ldr	r3, [pc, #284]	; (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d119      	bne.n	8005cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e07f      	b.n	8005d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d003      	beq.n	8005c8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d107      	bne.n	8005c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c8e:	4b3f      	ldr	r3, [pc, #252]	; (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d109      	bne.n	8005cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e06f      	b.n	8005d7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c9e:	4b3b      	ldr	r3, [pc, #236]	; (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e067      	b.n	8005d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cae:	4b37      	ldr	r3, [pc, #220]	; (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f023 0203 	bic.w	r2, r3, #3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	4934      	ldr	r1, [pc, #208]	; (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cc0:	f7fe fcfe 	bl	80046c0 <HAL_GetTick>
 8005cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cc6:	e00a      	b.n	8005cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cc8:	f7fe fcfa 	bl	80046c0 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e04f      	b.n	8005d7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cde:	4b2b      	ldr	r3, [pc, #172]	; (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 020c 	and.w	r2, r3, #12
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d1eb      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cf0:	4b25      	ldr	r3, [pc, #148]	; (8005d88 <HAL_RCC_ClockConfig+0x1b8>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 030f 	and.w	r3, r3, #15
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d20c      	bcs.n	8005d18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cfe:	4b22      	ldr	r3, [pc, #136]	; (8005d88 <HAL_RCC_ClockConfig+0x1b8>)
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d06:	4b20      	ldr	r3, [pc, #128]	; (8005d88 <HAL_RCC_ClockConfig+0x1b8>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d001      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e032      	b.n	8005d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d008      	beq.n	8005d36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d24:	4b19      	ldr	r3, [pc, #100]	; (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	4916      	ldr	r1, [pc, #88]	; (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d009      	beq.n	8005d56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d42:	4b12      	ldr	r3, [pc, #72]	; (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	490e      	ldr	r1, [pc, #56]	; (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d56:	f000 f855 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	091b      	lsrs	r3, r3, #4
 8005d62:	f003 030f 	and.w	r3, r3, #15
 8005d66:	490a      	ldr	r1, [pc, #40]	; (8005d90 <HAL_RCC_ClockConfig+0x1c0>)
 8005d68:	5ccb      	ldrb	r3, [r1, r3]
 8005d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d6e:	4a09      	ldr	r2, [pc, #36]	; (8005d94 <HAL_RCC_ClockConfig+0x1c4>)
 8005d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d72:	4b09      	ldr	r3, [pc, #36]	; (8005d98 <HAL_RCC_ClockConfig+0x1c8>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fe fc5e 	bl	8004638 <HAL_InitTick>

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	40023c00 	.word	0x40023c00
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	0800dec8 	.word	0x0800dec8
 8005d94:	2000000c 	.word	0x2000000c
 8005d98:	20000010 	.word	0x20000010

08005d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005da0:	4b03      	ldr	r3, [pc, #12]	; (8005db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005da2:	681b      	ldr	r3, [r3, #0]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	2000000c 	.word	0x2000000c

08005db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005db8:	f7ff fff0 	bl	8005d9c <HAL_RCC_GetHCLKFreq>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	4b05      	ldr	r3, [pc, #20]	; (8005dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	0a9b      	lsrs	r3, r3, #10
 8005dc4:	f003 0307 	and.w	r3, r3, #7
 8005dc8:	4903      	ldr	r1, [pc, #12]	; (8005dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dca:	5ccb      	ldrb	r3, [r1, r3]
 8005dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	40023800 	.word	0x40023800
 8005dd8:	0800ded8 	.word	0x0800ded8

08005ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005de0:	f7ff ffdc 	bl	8005d9c <HAL_RCC_GetHCLKFreq>
 8005de4:	4602      	mov	r2, r0
 8005de6:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	0b5b      	lsrs	r3, r3, #13
 8005dec:	f003 0307 	and.w	r3, r3, #7
 8005df0:	4903      	ldr	r1, [pc, #12]	; (8005e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005df2:	5ccb      	ldrb	r3, [r1, r3]
 8005df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	40023800 	.word	0x40023800
 8005e00:	0800ded8 	.word	0x0800ded8

08005e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e08:	b0ae      	sub	sp, #184	; 0xb8
 8005e0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e2a:	4bcb      	ldr	r3, [pc, #812]	; (8006158 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 030c 	and.w	r3, r3, #12
 8005e32:	2b0c      	cmp	r3, #12
 8005e34:	f200 8206 	bhi.w	8006244 <HAL_RCC_GetSysClockFreq+0x440>
 8005e38:	a201      	add	r2, pc, #4	; (adr r2, 8005e40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3e:	bf00      	nop
 8005e40:	08005e75 	.word	0x08005e75
 8005e44:	08006245 	.word	0x08006245
 8005e48:	08006245 	.word	0x08006245
 8005e4c:	08006245 	.word	0x08006245
 8005e50:	08005e7d 	.word	0x08005e7d
 8005e54:	08006245 	.word	0x08006245
 8005e58:	08006245 	.word	0x08006245
 8005e5c:	08006245 	.word	0x08006245
 8005e60:	08005e85 	.word	0x08005e85
 8005e64:	08006245 	.word	0x08006245
 8005e68:	08006245 	.word	0x08006245
 8005e6c:	08006245 	.word	0x08006245
 8005e70:	08006075 	.word	0x08006075
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e74:	4bb9      	ldr	r3, [pc, #740]	; (800615c <HAL_RCC_GetSysClockFreq+0x358>)
 8005e76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005e7a:	e1e7      	b.n	800624c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e7c:	4bb8      	ldr	r3, [pc, #736]	; (8006160 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005e82:	e1e3      	b.n	800624c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e84:	4bb4      	ldr	r3, [pc, #720]	; (8006158 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e90:	4bb1      	ldr	r3, [pc, #708]	; (8006158 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d071      	beq.n	8005f80 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e9c:	4bae      	ldr	r3, [pc, #696]	; (8006158 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	099b      	lsrs	r3, r3, #6
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ea8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005eac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ebe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ec2:	4622      	mov	r2, r4
 8005ec4:	462b      	mov	r3, r5
 8005ec6:	f04f 0000 	mov.w	r0, #0
 8005eca:	f04f 0100 	mov.w	r1, #0
 8005ece:	0159      	lsls	r1, r3, #5
 8005ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ed4:	0150      	lsls	r0, r2, #5
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	4621      	mov	r1, r4
 8005edc:	1a51      	subs	r1, r2, r1
 8005ede:	6439      	str	r1, [r7, #64]	; 0x40
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	eb63 0301 	sbc.w	r3, r3, r1
 8005ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	f04f 0300 	mov.w	r3, #0
 8005ef0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005ef4:	4649      	mov	r1, r9
 8005ef6:	018b      	lsls	r3, r1, #6
 8005ef8:	4641      	mov	r1, r8
 8005efa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005efe:	4641      	mov	r1, r8
 8005f00:	018a      	lsls	r2, r1, #6
 8005f02:	4641      	mov	r1, r8
 8005f04:	1a51      	subs	r1, r2, r1
 8005f06:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f08:	4649      	mov	r1, r9
 8005f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8005f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f10:	f04f 0200 	mov.w	r2, #0
 8005f14:	f04f 0300 	mov.w	r3, #0
 8005f18:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005f1c:	4649      	mov	r1, r9
 8005f1e:	00cb      	lsls	r3, r1, #3
 8005f20:	4641      	mov	r1, r8
 8005f22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f26:	4641      	mov	r1, r8
 8005f28:	00ca      	lsls	r2, r1, #3
 8005f2a:	4610      	mov	r0, r2
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	4603      	mov	r3, r0
 8005f30:	4622      	mov	r2, r4
 8005f32:	189b      	adds	r3, r3, r2
 8005f34:	633b      	str	r3, [r7, #48]	; 0x30
 8005f36:	462b      	mov	r3, r5
 8005f38:	460a      	mov	r2, r1
 8005f3a:	eb42 0303 	adc.w	r3, r2, r3
 8005f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	f04f 0300 	mov.w	r3, #0
 8005f48:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	024b      	lsls	r3, r1, #9
 8005f50:	4621      	mov	r1, r4
 8005f52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f56:	4621      	mov	r1, r4
 8005f58:	024a      	lsls	r2, r1, #9
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005f70:	f7fa fe8a 	bl	8000c88 <__aeabi_uldivmod>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4613      	mov	r3, r2
 8005f7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f7e:	e067      	b.n	8006050 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f80:	4b75      	ldr	r3, [pc, #468]	; (8006158 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	099b      	lsrs	r3, r3, #6
 8005f86:	2200      	movs	r2, #0
 8005f88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f8c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005f90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f98:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f9e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005fa2:	4622      	mov	r2, r4
 8005fa4:	462b      	mov	r3, r5
 8005fa6:	f04f 0000 	mov.w	r0, #0
 8005faa:	f04f 0100 	mov.w	r1, #0
 8005fae:	0159      	lsls	r1, r3, #5
 8005fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fb4:	0150      	lsls	r0, r2, #5
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4621      	mov	r1, r4
 8005fbc:	1a51      	subs	r1, r2, r1
 8005fbe:	62b9      	str	r1, [r7, #40]	; 0x28
 8005fc0:	4629      	mov	r1, r5
 8005fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8005fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fc8:	f04f 0200 	mov.w	r2, #0
 8005fcc:	f04f 0300 	mov.w	r3, #0
 8005fd0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005fd4:	4649      	mov	r1, r9
 8005fd6:	018b      	lsls	r3, r1, #6
 8005fd8:	4641      	mov	r1, r8
 8005fda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fde:	4641      	mov	r1, r8
 8005fe0:	018a      	lsls	r2, r1, #6
 8005fe2:	4641      	mov	r1, r8
 8005fe4:	ebb2 0a01 	subs.w	sl, r2, r1
 8005fe8:	4649      	mov	r1, r9
 8005fea:	eb63 0b01 	sbc.w	fp, r3, r1
 8005fee:	f04f 0200 	mov.w	r2, #0
 8005ff2:	f04f 0300 	mov.w	r3, #0
 8005ff6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ffa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ffe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006002:	4692      	mov	sl, r2
 8006004:	469b      	mov	fp, r3
 8006006:	4623      	mov	r3, r4
 8006008:	eb1a 0303 	adds.w	r3, sl, r3
 800600c:	623b      	str	r3, [r7, #32]
 800600e:	462b      	mov	r3, r5
 8006010:	eb4b 0303 	adc.w	r3, fp, r3
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
 8006016:	f04f 0200 	mov.w	r2, #0
 800601a:	f04f 0300 	mov.w	r3, #0
 800601e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006022:	4629      	mov	r1, r5
 8006024:	028b      	lsls	r3, r1, #10
 8006026:	4621      	mov	r1, r4
 8006028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800602c:	4621      	mov	r1, r4
 800602e:	028a      	lsls	r2, r1, #10
 8006030:	4610      	mov	r0, r2
 8006032:	4619      	mov	r1, r3
 8006034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006038:	2200      	movs	r2, #0
 800603a:	673b      	str	r3, [r7, #112]	; 0x70
 800603c:	677a      	str	r2, [r7, #116]	; 0x74
 800603e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006042:	f7fa fe21 	bl	8000c88 <__aeabi_uldivmod>
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	4613      	mov	r3, r2
 800604c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006050:	4b41      	ldr	r3, [pc, #260]	; (8006158 <HAL_RCC_GetSysClockFreq+0x354>)
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	0c1b      	lsrs	r3, r3, #16
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	3301      	adds	r3, #1
 800605c:	005b      	lsls	r3, r3, #1
 800605e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006062:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006066:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800606a:	fbb2 f3f3 	udiv	r3, r2, r3
 800606e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006072:	e0eb      	b.n	800624c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006074:	4b38      	ldr	r3, [pc, #224]	; (8006158 <HAL_RCC_GetSysClockFreq+0x354>)
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800607c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006080:	4b35      	ldr	r3, [pc, #212]	; (8006158 <HAL_RCC_GetSysClockFreq+0x354>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d06b      	beq.n	8006164 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800608c:	4b32      	ldr	r3, [pc, #200]	; (8006158 <HAL_RCC_GetSysClockFreq+0x354>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	099b      	lsrs	r3, r3, #6
 8006092:	2200      	movs	r2, #0
 8006094:	66bb      	str	r3, [r7, #104]	; 0x68
 8006096:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006098:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800609a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609e:	663b      	str	r3, [r7, #96]	; 0x60
 80060a0:	2300      	movs	r3, #0
 80060a2:	667b      	str	r3, [r7, #100]	; 0x64
 80060a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80060a8:	4622      	mov	r2, r4
 80060aa:	462b      	mov	r3, r5
 80060ac:	f04f 0000 	mov.w	r0, #0
 80060b0:	f04f 0100 	mov.w	r1, #0
 80060b4:	0159      	lsls	r1, r3, #5
 80060b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060ba:	0150      	lsls	r0, r2, #5
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4621      	mov	r1, r4
 80060c2:	1a51      	subs	r1, r2, r1
 80060c4:	61b9      	str	r1, [r7, #24]
 80060c6:	4629      	mov	r1, r5
 80060c8:	eb63 0301 	sbc.w	r3, r3, r1
 80060cc:	61fb      	str	r3, [r7, #28]
 80060ce:	f04f 0200 	mov.w	r2, #0
 80060d2:	f04f 0300 	mov.w	r3, #0
 80060d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80060da:	4659      	mov	r1, fp
 80060dc:	018b      	lsls	r3, r1, #6
 80060de:	4651      	mov	r1, sl
 80060e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060e4:	4651      	mov	r1, sl
 80060e6:	018a      	lsls	r2, r1, #6
 80060e8:	4651      	mov	r1, sl
 80060ea:	ebb2 0801 	subs.w	r8, r2, r1
 80060ee:	4659      	mov	r1, fp
 80060f0:	eb63 0901 	sbc.w	r9, r3, r1
 80060f4:	f04f 0200 	mov.w	r2, #0
 80060f8:	f04f 0300 	mov.w	r3, #0
 80060fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006100:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006104:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006108:	4690      	mov	r8, r2
 800610a:	4699      	mov	r9, r3
 800610c:	4623      	mov	r3, r4
 800610e:	eb18 0303 	adds.w	r3, r8, r3
 8006112:	613b      	str	r3, [r7, #16]
 8006114:	462b      	mov	r3, r5
 8006116:	eb49 0303 	adc.w	r3, r9, r3
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006128:	4629      	mov	r1, r5
 800612a:	024b      	lsls	r3, r1, #9
 800612c:	4621      	mov	r1, r4
 800612e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006132:	4621      	mov	r1, r4
 8006134:	024a      	lsls	r2, r1, #9
 8006136:	4610      	mov	r0, r2
 8006138:	4619      	mov	r1, r3
 800613a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800613e:	2200      	movs	r2, #0
 8006140:	65bb      	str	r3, [r7, #88]	; 0x58
 8006142:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006144:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006148:	f7fa fd9e 	bl	8000c88 <__aeabi_uldivmod>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4613      	mov	r3, r2
 8006152:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006156:	e065      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0x420>
 8006158:	40023800 	.word	0x40023800
 800615c:	00f42400 	.word	0x00f42400
 8006160:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006164:	4b3d      	ldr	r3, [pc, #244]	; (800625c <HAL_RCC_GetSysClockFreq+0x458>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	099b      	lsrs	r3, r3, #6
 800616a:	2200      	movs	r2, #0
 800616c:	4618      	mov	r0, r3
 800616e:	4611      	mov	r1, r2
 8006170:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006174:	653b      	str	r3, [r7, #80]	; 0x50
 8006176:	2300      	movs	r3, #0
 8006178:	657b      	str	r3, [r7, #84]	; 0x54
 800617a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800617e:	4642      	mov	r2, r8
 8006180:	464b      	mov	r3, r9
 8006182:	f04f 0000 	mov.w	r0, #0
 8006186:	f04f 0100 	mov.w	r1, #0
 800618a:	0159      	lsls	r1, r3, #5
 800618c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006190:	0150      	lsls	r0, r2, #5
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	4641      	mov	r1, r8
 8006198:	1a51      	subs	r1, r2, r1
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	4649      	mov	r1, r9
 800619e:	eb63 0301 	sbc.w	r3, r3, r1
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	f04f 0200 	mov.w	r2, #0
 80061a8:	f04f 0300 	mov.w	r3, #0
 80061ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80061b0:	4659      	mov	r1, fp
 80061b2:	018b      	lsls	r3, r1, #6
 80061b4:	4651      	mov	r1, sl
 80061b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061ba:	4651      	mov	r1, sl
 80061bc:	018a      	lsls	r2, r1, #6
 80061be:	4651      	mov	r1, sl
 80061c0:	1a54      	subs	r4, r2, r1
 80061c2:	4659      	mov	r1, fp
 80061c4:	eb63 0501 	sbc.w	r5, r3, r1
 80061c8:	f04f 0200 	mov.w	r2, #0
 80061cc:	f04f 0300 	mov.w	r3, #0
 80061d0:	00eb      	lsls	r3, r5, #3
 80061d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061d6:	00e2      	lsls	r2, r4, #3
 80061d8:	4614      	mov	r4, r2
 80061da:	461d      	mov	r5, r3
 80061dc:	4643      	mov	r3, r8
 80061de:	18e3      	adds	r3, r4, r3
 80061e0:	603b      	str	r3, [r7, #0]
 80061e2:	464b      	mov	r3, r9
 80061e4:	eb45 0303 	adc.w	r3, r5, r3
 80061e8:	607b      	str	r3, [r7, #4]
 80061ea:	f04f 0200 	mov.w	r2, #0
 80061ee:	f04f 0300 	mov.w	r3, #0
 80061f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061f6:	4629      	mov	r1, r5
 80061f8:	028b      	lsls	r3, r1, #10
 80061fa:	4621      	mov	r1, r4
 80061fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006200:	4621      	mov	r1, r4
 8006202:	028a      	lsls	r2, r1, #10
 8006204:	4610      	mov	r0, r2
 8006206:	4619      	mov	r1, r3
 8006208:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800620c:	2200      	movs	r2, #0
 800620e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006210:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006212:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006216:	f7fa fd37 	bl	8000c88 <__aeabi_uldivmod>
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	4613      	mov	r3, r2
 8006220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006224:	4b0d      	ldr	r3, [pc, #52]	; (800625c <HAL_RCC_GetSysClockFreq+0x458>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	0f1b      	lsrs	r3, r3, #28
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006232:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006236:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800623a:	fbb2 f3f3 	udiv	r3, r2, r3
 800623e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006242:	e003      	b.n	800624c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006244:	4b06      	ldr	r3, [pc, #24]	; (8006260 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006246:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800624a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800624c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006250:	4618      	mov	r0, r3
 8006252:	37b8      	adds	r7, #184	; 0xb8
 8006254:	46bd      	mov	sp, r7
 8006256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800625a:	bf00      	nop
 800625c:	40023800 	.word	0x40023800
 8006260:	00f42400 	.word	0x00f42400

08006264 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e28d      	b.n	8006792 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 8083 	beq.w	800638a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006284:	4b94      	ldr	r3, [pc, #592]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f003 030c 	and.w	r3, r3, #12
 800628c:	2b04      	cmp	r3, #4
 800628e:	d019      	beq.n	80062c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006290:	4b91      	ldr	r3, [pc, #580]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006298:	2b08      	cmp	r3, #8
 800629a:	d106      	bne.n	80062aa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800629c:	4b8e      	ldr	r3, [pc, #568]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062a8:	d00c      	beq.n	80062c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062aa:	4b8b      	ldr	r3, [pc, #556]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80062b2:	2b0c      	cmp	r3, #12
 80062b4:	d112      	bne.n	80062dc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062b6:	4b88      	ldr	r3, [pc, #544]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062c2:	d10b      	bne.n	80062dc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062c4:	4b84      	ldr	r3, [pc, #528]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d05b      	beq.n	8006388 <HAL_RCC_OscConfig+0x124>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d157      	bne.n	8006388 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e25a      	b.n	8006792 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e4:	d106      	bne.n	80062f4 <HAL_RCC_OscConfig+0x90>
 80062e6:	4b7c      	ldr	r3, [pc, #496]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a7b      	ldr	r2, [pc, #492]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 80062ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	e01d      	b.n	8006330 <HAL_RCC_OscConfig+0xcc>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062fc:	d10c      	bne.n	8006318 <HAL_RCC_OscConfig+0xb4>
 80062fe:	4b76      	ldr	r3, [pc, #472]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a75      	ldr	r2, [pc, #468]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 8006304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	4b73      	ldr	r3, [pc, #460]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a72      	ldr	r2, [pc, #456]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 8006310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	e00b      	b.n	8006330 <HAL_RCC_OscConfig+0xcc>
 8006318:	4b6f      	ldr	r3, [pc, #444]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a6e      	ldr	r2, [pc, #440]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 800631e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	4b6c      	ldr	r3, [pc, #432]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a6b      	ldr	r2, [pc, #428]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 800632a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800632e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d013      	beq.n	8006360 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006338:	f7fe f9c2 	bl	80046c0 <HAL_GetTick>
 800633c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800633e:	e008      	b.n	8006352 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006340:	f7fe f9be 	bl	80046c0 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b64      	cmp	r3, #100	; 0x64
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e21f      	b.n	8006792 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006352:	4b61      	ldr	r3, [pc, #388]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0f0      	beq.n	8006340 <HAL_RCC_OscConfig+0xdc>
 800635e:	e014      	b.n	800638a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006360:	f7fe f9ae 	bl	80046c0 <HAL_GetTick>
 8006364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006366:	e008      	b.n	800637a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006368:	f7fe f9aa 	bl	80046c0 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b64      	cmp	r3, #100	; 0x64
 8006374:	d901      	bls.n	800637a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e20b      	b.n	8006792 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800637a:	4b57      	ldr	r3, [pc, #348]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1f0      	bne.n	8006368 <HAL_RCC_OscConfig+0x104>
 8006386:	e000      	b.n	800638a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d06f      	beq.n	8006476 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006396:	4b50      	ldr	r3, [pc, #320]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f003 030c 	and.w	r3, r3, #12
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d017      	beq.n	80063d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80063a2:	4b4d      	ldr	r3, [pc, #308]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80063aa:	2b08      	cmp	r3, #8
 80063ac:	d105      	bne.n	80063ba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80063ae:	4b4a      	ldr	r3, [pc, #296]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00b      	beq.n	80063d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ba:	4b47      	ldr	r3, [pc, #284]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80063c2:	2b0c      	cmp	r3, #12
 80063c4:	d11c      	bne.n	8006400 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063c6:	4b44      	ldr	r3, [pc, #272]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d116      	bne.n	8006400 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063d2:	4b41      	ldr	r3, [pc, #260]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d005      	beq.n	80063ea <HAL_RCC_OscConfig+0x186>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d001      	beq.n	80063ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e1d3      	b.n	8006792 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ea:	4b3b      	ldr	r3, [pc, #236]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	00db      	lsls	r3, r3, #3
 80063f8:	4937      	ldr	r1, [pc, #220]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063fe:	e03a      	b.n	8006476 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d020      	beq.n	800644a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006408:	4b34      	ldr	r3, [pc, #208]	; (80064dc <HAL_RCC_OscConfig+0x278>)
 800640a:	2201      	movs	r2, #1
 800640c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640e:	f7fe f957 	bl	80046c0 <HAL_GetTick>
 8006412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006414:	e008      	b.n	8006428 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006416:	f7fe f953 	bl	80046c0 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d901      	bls.n	8006428 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e1b4      	b.n	8006792 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006428:	4b2b      	ldr	r3, [pc, #172]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d0f0      	beq.n	8006416 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006434:	4b28      	ldr	r3, [pc, #160]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	4925      	ldr	r1, [pc, #148]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 8006444:	4313      	orrs	r3, r2
 8006446:	600b      	str	r3, [r1, #0]
 8006448:	e015      	b.n	8006476 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800644a:	4b24      	ldr	r3, [pc, #144]	; (80064dc <HAL_RCC_OscConfig+0x278>)
 800644c:	2200      	movs	r2, #0
 800644e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006450:	f7fe f936 	bl	80046c0 <HAL_GetTick>
 8006454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006456:	e008      	b.n	800646a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006458:	f7fe f932 	bl	80046c0 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e193      	b.n	8006792 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800646a:	4b1b      	ldr	r3, [pc, #108]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1f0      	bne.n	8006458 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0308 	and.w	r3, r3, #8
 800647e:	2b00      	cmp	r3, #0
 8006480:	d036      	beq.n	80064f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d016      	beq.n	80064b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800648a:	4b15      	ldr	r3, [pc, #84]	; (80064e0 <HAL_RCC_OscConfig+0x27c>)
 800648c:	2201      	movs	r2, #1
 800648e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006490:	f7fe f916 	bl	80046c0 <HAL_GetTick>
 8006494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006496:	e008      	b.n	80064aa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006498:	f7fe f912 	bl	80046c0 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e173      	b.n	8006792 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064aa:	4b0b      	ldr	r3, [pc, #44]	; (80064d8 <HAL_RCC_OscConfig+0x274>)
 80064ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d0f0      	beq.n	8006498 <HAL_RCC_OscConfig+0x234>
 80064b6:	e01b      	b.n	80064f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064b8:	4b09      	ldr	r3, [pc, #36]	; (80064e0 <HAL_RCC_OscConfig+0x27c>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064be:	f7fe f8ff 	bl	80046c0 <HAL_GetTick>
 80064c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064c4:	e00e      	b.n	80064e4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064c6:	f7fe f8fb 	bl	80046c0 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d907      	bls.n	80064e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e15c      	b.n	8006792 <HAL_RCC_OscConfig+0x52e>
 80064d8:	40023800 	.word	0x40023800
 80064dc:	42470000 	.word	0x42470000
 80064e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064e4:	4b8a      	ldr	r3, [pc, #552]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 80064e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1ea      	bne.n	80064c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 8097 	beq.w	800662c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064fe:	2300      	movs	r3, #0
 8006500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006502:	4b83      	ldr	r3, [pc, #524]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10f      	bne.n	800652e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800650e:	2300      	movs	r3, #0
 8006510:	60bb      	str	r3, [r7, #8]
 8006512:	4b7f      	ldr	r3, [pc, #508]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	4a7e      	ldr	r2, [pc, #504]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 8006518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800651c:	6413      	str	r3, [r2, #64]	; 0x40
 800651e:	4b7c      	ldr	r3, [pc, #496]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006526:	60bb      	str	r3, [r7, #8]
 8006528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800652a:	2301      	movs	r3, #1
 800652c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800652e:	4b79      	ldr	r3, [pc, #484]	; (8006714 <HAL_RCC_OscConfig+0x4b0>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006536:	2b00      	cmp	r3, #0
 8006538:	d118      	bne.n	800656c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800653a:	4b76      	ldr	r3, [pc, #472]	; (8006714 <HAL_RCC_OscConfig+0x4b0>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a75      	ldr	r2, [pc, #468]	; (8006714 <HAL_RCC_OscConfig+0x4b0>)
 8006540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006546:	f7fe f8bb 	bl	80046c0 <HAL_GetTick>
 800654a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800654c:	e008      	b.n	8006560 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800654e:	f7fe f8b7 	bl	80046c0 <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	2b02      	cmp	r3, #2
 800655a:	d901      	bls.n	8006560 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e118      	b.n	8006792 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006560:	4b6c      	ldr	r3, [pc, #432]	; (8006714 <HAL_RCC_OscConfig+0x4b0>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0f0      	beq.n	800654e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d106      	bne.n	8006582 <HAL_RCC_OscConfig+0x31e>
 8006574:	4b66      	ldr	r3, [pc, #408]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 8006576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006578:	4a65      	ldr	r2, [pc, #404]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 800657a:	f043 0301 	orr.w	r3, r3, #1
 800657e:	6713      	str	r3, [r2, #112]	; 0x70
 8006580:	e01c      	b.n	80065bc <HAL_RCC_OscConfig+0x358>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	2b05      	cmp	r3, #5
 8006588:	d10c      	bne.n	80065a4 <HAL_RCC_OscConfig+0x340>
 800658a:	4b61      	ldr	r3, [pc, #388]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 800658c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658e:	4a60      	ldr	r2, [pc, #384]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 8006590:	f043 0304 	orr.w	r3, r3, #4
 8006594:	6713      	str	r3, [r2, #112]	; 0x70
 8006596:	4b5e      	ldr	r3, [pc, #376]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 8006598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659a:	4a5d      	ldr	r2, [pc, #372]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 800659c:	f043 0301 	orr.w	r3, r3, #1
 80065a0:	6713      	str	r3, [r2, #112]	; 0x70
 80065a2:	e00b      	b.n	80065bc <HAL_RCC_OscConfig+0x358>
 80065a4:	4b5a      	ldr	r3, [pc, #360]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 80065a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a8:	4a59      	ldr	r2, [pc, #356]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 80065aa:	f023 0301 	bic.w	r3, r3, #1
 80065ae:	6713      	str	r3, [r2, #112]	; 0x70
 80065b0:	4b57      	ldr	r3, [pc, #348]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 80065b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b4:	4a56      	ldr	r2, [pc, #344]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 80065b6:	f023 0304 	bic.w	r3, r3, #4
 80065ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d015      	beq.n	80065f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065c4:	f7fe f87c 	bl	80046c0 <HAL_GetTick>
 80065c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ca:	e00a      	b.n	80065e2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065cc:	f7fe f878 	bl	80046c0 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065da:	4293      	cmp	r3, r2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e0d7      	b.n	8006792 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065e2:	4b4b      	ldr	r3, [pc, #300]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 80065e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0ee      	beq.n	80065cc <HAL_RCC_OscConfig+0x368>
 80065ee:	e014      	b.n	800661a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f0:	f7fe f866 	bl	80046c0 <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065f6:	e00a      	b.n	800660e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065f8:	f7fe f862 	bl	80046c0 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	f241 3288 	movw	r2, #5000	; 0x1388
 8006606:	4293      	cmp	r3, r2
 8006608:	d901      	bls.n	800660e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e0c1      	b.n	8006792 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800660e:	4b40      	ldr	r3, [pc, #256]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 8006610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1ee      	bne.n	80065f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800661a:	7dfb      	ldrb	r3, [r7, #23]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d105      	bne.n	800662c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006620:	4b3b      	ldr	r3, [pc, #236]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 8006622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006624:	4a3a      	ldr	r2, [pc, #232]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 8006626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800662a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 80ad 	beq.w	8006790 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006636:	4b36      	ldr	r3, [pc, #216]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f003 030c 	and.w	r3, r3, #12
 800663e:	2b08      	cmp	r3, #8
 8006640:	d060      	beq.n	8006704 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	2b02      	cmp	r3, #2
 8006648:	d145      	bne.n	80066d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800664a:	4b33      	ldr	r3, [pc, #204]	; (8006718 <HAL_RCC_OscConfig+0x4b4>)
 800664c:	2200      	movs	r2, #0
 800664e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006650:	f7fe f836 	bl	80046c0 <HAL_GetTick>
 8006654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006656:	e008      	b.n	800666a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006658:	f7fe f832 	bl	80046c0 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e093      	b.n	8006792 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800666a:	4b29      	ldr	r3, [pc, #164]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1f0      	bne.n	8006658 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69da      	ldr	r2, [r3, #28]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	431a      	orrs	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	019b      	lsls	r3, r3, #6
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668c:	085b      	lsrs	r3, r3, #1
 800668e:	3b01      	subs	r3, #1
 8006690:	041b      	lsls	r3, r3, #16
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	061b      	lsls	r3, r3, #24
 800669a:	431a      	orrs	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a0:	071b      	lsls	r3, r3, #28
 80066a2:	491b      	ldr	r1, [pc, #108]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066a8:	4b1b      	ldr	r3, [pc, #108]	; (8006718 <HAL_RCC_OscConfig+0x4b4>)
 80066aa:	2201      	movs	r2, #1
 80066ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ae:	f7fe f807 	bl	80046c0 <HAL_GetTick>
 80066b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066b4:	e008      	b.n	80066c8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066b6:	f7fe f803 	bl	80046c0 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d901      	bls.n	80066c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e064      	b.n	8006792 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066c8:	4b11      	ldr	r3, [pc, #68]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d0f0      	beq.n	80066b6 <HAL_RCC_OscConfig+0x452>
 80066d4:	e05c      	b.n	8006790 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066d6:	4b10      	ldr	r3, [pc, #64]	; (8006718 <HAL_RCC_OscConfig+0x4b4>)
 80066d8:	2200      	movs	r2, #0
 80066da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066dc:	f7fd fff0 	bl	80046c0 <HAL_GetTick>
 80066e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066e2:	e008      	b.n	80066f6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066e4:	f7fd ffec 	bl	80046c0 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d901      	bls.n	80066f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e04d      	b.n	8006792 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066f6:	4b06      	ldr	r3, [pc, #24]	; (8006710 <HAL_RCC_OscConfig+0x4ac>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1f0      	bne.n	80066e4 <HAL_RCC_OscConfig+0x480>
 8006702:	e045      	b.n	8006790 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d107      	bne.n	800671c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e040      	b.n	8006792 <HAL_RCC_OscConfig+0x52e>
 8006710:	40023800 	.word	0x40023800
 8006714:	40007000 	.word	0x40007000
 8006718:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800671c:	4b1f      	ldr	r3, [pc, #124]	; (800679c <HAL_RCC_OscConfig+0x538>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d030      	beq.n	800678c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006734:	429a      	cmp	r2, r3
 8006736:	d129      	bne.n	800678c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006742:	429a      	cmp	r2, r3
 8006744:	d122      	bne.n	800678c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800674c:	4013      	ands	r3, r2
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006752:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006754:	4293      	cmp	r3, r2
 8006756:	d119      	bne.n	800678c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006762:	085b      	lsrs	r3, r3, #1
 8006764:	3b01      	subs	r3, #1
 8006766:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006768:	429a      	cmp	r2, r3
 800676a:	d10f      	bne.n	800678c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006776:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006778:	429a      	cmp	r2, r3
 800677a:	d107      	bne.n	800678c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006788:	429a      	cmp	r2, r3
 800678a:	d001      	beq.n	8006790 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e000      	b.n	8006792 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	40023800 	.word	0x40023800

080067a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e041      	b.n	8006836 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d106      	bne.n	80067cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7fd fd16 	bl	80041f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2202      	movs	r2, #2
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3304      	adds	r3, #4
 80067dc:	4619      	mov	r1, r3
 80067de:	4610      	mov	r0, r2
 80067e0:	f000 fbf0 	bl	8006fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b082      	sub	sp, #8
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e041      	b.n	80068d4 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	d106      	bne.n	800686a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f839 	bl	80068dc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2202      	movs	r2, #2
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	3304      	adds	r3, #4
 800687a:	4619      	mov	r1, r3
 800687c:	4610      	mov	r0, r2
 800687e:	f000 fba1 	bl	8006fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d109      	bne.n	8006918 <HAL_TIM_OC_Start_IT+0x28>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b01      	cmp	r3, #1
 800690e:	bf14      	ite	ne
 8006910:	2301      	movne	r3, #1
 8006912:	2300      	moveq	r3, #0
 8006914:	b2db      	uxtb	r3, r3
 8006916:	e022      	b.n	800695e <HAL_TIM_OC_Start_IT+0x6e>
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	2b04      	cmp	r3, #4
 800691c:	d109      	bne.n	8006932 <HAL_TIM_OC_Start_IT+0x42>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b01      	cmp	r3, #1
 8006928:	bf14      	ite	ne
 800692a:	2301      	movne	r3, #1
 800692c:	2300      	moveq	r3, #0
 800692e:	b2db      	uxtb	r3, r3
 8006930:	e015      	b.n	800695e <HAL_TIM_OC_Start_IT+0x6e>
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b08      	cmp	r3, #8
 8006936:	d109      	bne.n	800694c <HAL_TIM_OC_Start_IT+0x5c>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b01      	cmp	r3, #1
 8006942:	bf14      	ite	ne
 8006944:	2301      	movne	r3, #1
 8006946:	2300      	moveq	r3, #0
 8006948:	b2db      	uxtb	r3, r3
 800694a:	e008      	b.n	800695e <HAL_TIM_OC_Start_IT+0x6e>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b01      	cmp	r3, #1
 8006956:	bf14      	ite	ne
 8006958:	2301      	movne	r3, #1
 800695a:	2300      	moveq	r3, #0
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e0c7      	b.n	8006af6 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d104      	bne.n	8006976 <HAL_TIM_OC_Start_IT+0x86>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006974:	e013      	b.n	800699e <HAL_TIM_OC_Start_IT+0xae>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b04      	cmp	r3, #4
 800697a:	d104      	bne.n	8006986 <HAL_TIM_OC_Start_IT+0x96>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006984:	e00b      	b.n	800699e <HAL_TIM_OC_Start_IT+0xae>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b08      	cmp	r3, #8
 800698a:	d104      	bne.n	8006996 <HAL_TIM_OC_Start_IT+0xa6>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006994:	e003      	b.n	800699e <HAL_TIM_OC_Start_IT+0xae>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2202      	movs	r2, #2
 800699a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b0c      	cmp	r3, #12
 80069a2:	d841      	bhi.n	8006a28 <HAL_TIM_OC_Start_IT+0x138>
 80069a4:	a201      	add	r2, pc, #4	; (adr r2, 80069ac <HAL_TIM_OC_Start_IT+0xbc>)
 80069a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069aa:	bf00      	nop
 80069ac:	080069e1 	.word	0x080069e1
 80069b0:	08006a29 	.word	0x08006a29
 80069b4:	08006a29 	.word	0x08006a29
 80069b8:	08006a29 	.word	0x08006a29
 80069bc:	080069f3 	.word	0x080069f3
 80069c0:	08006a29 	.word	0x08006a29
 80069c4:	08006a29 	.word	0x08006a29
 80069c8:	08006a29 	.word	0x08006a29
 80069cc:	08006a05 	.word	0x08006a05
 80069d0:	08006a29 	.word	0x08006a29
 80069d4:	08006a29 	.word	0x08006a29
 80069d8:	08006a29 	.word	0x08006a29
 80069dc:	08006a17 	.word	0x08006a17
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f042 0202 	orr.w	r2, r2, #2
 80069ee:	60da      	str	r2, [r3, #12]
      break;
 80069f0:	e01d      	b.n	8006a2e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f042 0204 	orr.w	r2, r2, #4
 8006a00:	60da      	str	r2, [r3, #12]
      break;
 8006a02:	e014      	b.n	8006a2e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f042 0208 	orr.w	r2, r2, #8
 8006a12:	60da      	str	r2, [r3, #12]
      break;
 8006a14:	e00b      	b.n	8006a2e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68da      	ldr	r2, [r3, #12]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f042 0210 	orr.w	r2, r2, #16
 8006a24:	60da      	str	r2, [r3, #12]
      break;
 8006a26:	e002      	b.n	8006a2e <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d15f      	bne.n	8006af4 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 fdab 	bl	8007598 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a2e      	ldr	r2, [pc, #184]	; (8006b00 <HAL_TIM_OC_Start_IT+0x210>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d004      	beq.n	8006a56 <HAL_TIM_OC_Start_IT+0x166>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a2c      	ldr	r2, [pc, #176]	; (8006b04 <HAL_TIM_OC_Start_IT+0x214>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d101      	bne.n	8006a5a <HAL_TIM_OC_Start_IT+0x16a>
 8006a56:	2301      	movs	r3, #1
 8006a58:	e000      	b.n	8006a5c <HAL_TIM_OC_Start_IT+0x16c>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d007      	beq.n	8006a70 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a6e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a22      	ldr	r2, [pc, #136]	; (8006b00 <HAL_TIM_OC_Start_IT+0x210>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d022      	beq.n	8006ac0 <HAL_TIM_OC_Start_IT+0x1d0>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a82:	d01d      	beq.n	8006ac0 <HAL_TIM_OC_Start_IT+0x1d0>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1f      	ldr	r2, [pc, #124]	; (8006b08 <HAL_TIM_OC_Start_IT+0x218>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d018      	beq.n	8006ac0 <HAL_TIM_OC_Start_IT+0x1d0>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a1e      	ldr	r2, [pc, #120]	; (8006b0c <HAL_TIM_OC_Start_IT+0x21c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d013      	beq.n	8006ac0 <HAL_TIM_OC_Start_IT+0x1d0>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1c      	ldr	r2, [pc, #112]	; (8006b10 <HAL_TIM_OC_Start_IT+0x220>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00e      	beq.n	8006ac0 <HAL_TIM_OC_Start_IT+0x1d0>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a17      	ldr	r2, [pc, #92]	; (8006b04 <HAL_TIM_OC_Start_IT+0x214>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d009      	beq.n	8006ac0 <HAL_TIM_OC_Start_IT+0x1d0>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a18      	ldr	r2, [pc, #96]	; (8006b14 <HAL_TIM_OC_Start_IT+0x224>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d004      	beq.n	8006ac0 <HAL_TIM_OC_Start_IT+0x1d0>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a17      	ldr	r2, [pc, #92]	; (8006b18 <HAL_TIM_OC_Start_IT+0x228>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d111      	bne.n	8006ae4 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f003 0307 	and.w	r3, r3, #7
 8006aca:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2b06      	cmp	r3, #6
 8006ad0:	d010      	beq.n	8006af4 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f042 0201 	orr.w	r2, r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae2:	e007      	b.n	8006af4 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f042 0201 	orr.w	r2, r2, #1
 8006af2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	40010000 	.word	0x40010000
 8006b04:	40010400 	.word	0x40010400
 8006b08:	40000400 	.word	0x40000400
 8006b0c:	40000800 	.word	0x40000800
 8006b10:	40000c00 	.word	0x40000c00
 8006b14:	40014000 	.word	0x40014000
 8006b18:	40001800 	.word	0x40001800

08006b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d122      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d11b      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f06f 0202 	mvn.w	r2, #2
 8006b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	f003 0303 	and.w	r3, r3, #3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fa11 	bl	8006f86 <HAL_TIM_IC_CaptureCallback>
 8006b64:	e005      	b.n	8006b72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fb fc0a 	bl	8002380 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fa14 	bl	8006f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0304 	and.w	r3, r3, #4
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d122      	bne.n	8006bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	d11b      	bne.n	8006bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f06f 0204 	mvn.w	r2, #4
 8006b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f9e7 	bl	8006f86 <HAL_TIM_IC_CaptureCallback>
 8006bb8:	e005      	b.n	8006bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7fb fbe0 	bl	8002380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f9ea 	bl	8006f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	f003 0308 	and.w	r3, r3, #8
 8006bd6:	2b08      	cmp	r3, #8
 8006bd8:	d122      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f003 0308 	and.w	r3, r3, #8
 8006be4:	2b08      	cmp	r3, #8
 8006be6:	d11b      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f06f 0208 	mvn.w	r2, #8
 8006bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2204      	movs	r2, #4
 8006bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	f003 0303 	and.w	r3, r3, #3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f9bd 	bl	8006f86 <HAL_TIM_IC_CaptureCallback>
 8006c0c:	e005      	b.n	8006c1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7fb fbb6 	bl	8002380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f9c0 	bl	8006f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	f003 0310 	and.w	r3, r3, #16
 8006c2a:	2b10      	cmp	r3, #16
 8006c2c:	d122      	bne.n	8006c74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f003 0310 	and.w	r3, r3, #16
 8006c38:	2b10      	cmp	r3, #16
 8006c3a:	d11b      	bne.n	8006c74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f06f 0210 	mvn.w	r2, #16
 8006c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2208      	movs	r2, #8
 8006c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f993 	bl	8006f86 <HAL_TIM_IC_CaptureCallback>
 8006c60:	e005      	b.n	8006c6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7fb fb8c 	bl	8002380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f996 	bl	8006f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d10e      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d107      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f06f 0201 	mvn.w	r2, #1
 8006c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f969 	bl	8006f72 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006caa:	2b80      	cmp	r3, #128	; 0x80
 8006cac:	d10e      	bne.n	8006ccc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb8:	2b80      	cmp	r3, #128	; 0x80
 8006cba:	d107      	bne.n	8006ccc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fd12 	bl	80076f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd6:	2b40      	cmp	r3, #64	; 0x40
 8006cd8:	d10e      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce4:	2b40      	cmp	r3, #64	; 0x40
 8006ce6:	d107      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f95b 	bl	8006fae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	f003 0320 	and.w	r3, r3, #32
 8006d02:	2b20      	cmp	r3, #32
 8006d04:	d10e      	bne.n	8006d24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f003 0320 	and.w	r3, r3, #32
 8006d10:	2b20      	cmp	r3, #32
 8006d12:	d107      	bne.n	8006d24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f06f 0220 	mvn.w	r2, #32
 8006d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fcdc 	bl	80076dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d24:	bf00      	nop
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d101      	bne.n	8006d4a <HAL_TIM_OC_ConfigChannel+0x1e>
 8006d46:	2302      	movs	r3, #2
 8006d48:	e048      	b.n	8006ddc <HAL_TIM_OC_ConfigChannel+0xb0>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b0c      	cmp	r3, #12
 8006d56:	d839      	bhi.n	8006dcc <HAL_TIM_OC_ConfigChannel+0xa0>
 8006d58:	a201      	add	r2, pc, #4	; (adr r2, 8006d60 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5e:	bf00      	nop
 8006d60:	08006d95 	.word	0x08006d95
 8006d64:	08006dcd 	.word	0x08006dcd
 8006d68:	08006dcd 	.word	0x08006dcd
 8006d6c:	08006dcd 	.word	0x08006dcd
 8006d70:	08006da3 	.word	0x08006da3
 8006d74:	08006dcd 	.word	0x08006dcd
 8006d78:	08006dcd 	.word	0x08006dcd
 8006d7c:	08006dcd 	.word	0x08006dcd
 8006d80:	08006db1 	.word	0x08006db1
 8006d84:	08006dcd 	.word	0x08006dcd
 8006d88:	08006dcd 	.word	0x08006dcd
 8006d8c:	08006dcd 	.word	0x08006dcd
 8006d90:	08006dbf 	.word	0x08006dbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68b9      	ldr	r1, [r7, #8]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 f9b2 	bl	8007104 <TIM_OC1_SetConfig>
      break;
 8006da0:	e017      	b.n	8006dd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68b9      	ldr	r1, [r7, #8]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f000 fa1b 	bl	80071e4 <TIM_OC2_SetConfig>
      break;
 8006dae:	e010      	b.n	8006dd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68b9      	ldr	r1, [r7, #8]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 fa8a 	bl	80072d0 <TIM_OC3_SetConfig>
      break;
 8006dbc:	e009      	b.n	8006dd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68b9      	ldr	r1, [r7, #8]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 faf7 	bl	80073b8 <TIM_OC4_SetConfig>
      break;
 8006dca:	e002      	b.n	8006dd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	75fb      	strb	r3, [r7, #23]
      break;
 8006dd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3718      	adds	r7, #24
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d101      	bne.n	8006e00 <HAL_TIM_ConfigClockSource+0x1c>
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	e0b4      	b.n	8006f6a <HAL_TIM_ConfigClockSource+0x186>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e38:	d03e      	beq.n	8006eb8 <HAL_TIM_ConfigClockSource+0xd4>
 8006e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e3e:	f200 8087 	bhi.w	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e46:	f000 8086 	beq.w	8006f56 <HAL_TIM_ConfigClockSource+0x172>
 8006e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e4e:	d87f      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e50:	2b70      	cmp	r3, #112	; 0x70
 8006e52:	d01a      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0xa6>
 8006e54:	2b70      	cmp	r3, #112	; 0x70
 8006e56:	d87b      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e58:	2b60      	cmp	r3, #96	; 0x60
 8006e5a:	d050      	beq.n	8006efe <HAL_TIM_ConfigClockSource+0x11a>
 8006e5c:	2b60      	cmp	r3, #96	; 0x60
 8006e5e:	d877      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e60:	2b50      	cmp	r3, #80	; 0x50
 8006e62:	d03c      	beq.n	8006ede <HAL_TIM_ConfigClockSource+0xfa>
 8006e64:	2b50      	cmp	r3, #80	; 0x50
 8006e66:	d873      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e68:	2b40      	cmp	r3, #64	; 0x40
 8006e6a:	d058      	beq.n	8006f1e <HAL_TIM_ConfigClockSource+0x13a>
 8006e6c:	2b40      	cmp	r3, #64	; 0x40
 8006e6e:	d86f      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e70:	2b30      	cmp	r3, #48	; 0x30
 8006e72:	d064      	beq.n	8006f3e <HAL_TIM_ConfigClockSource+0x15a>
 8006e74:	2b30      	cmp	r3, #48	; 0x30
 8006e76:	d86b      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e78:	2b20      	cmp	r3, #32
 8006e7a:	d060      	beq.n	8006f3e <HAL_TIM_ConfigClockSource+0x15a>
 8006e7c:	2b20      	cmp	r3, #32
 8006e7e:	d867      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d05c      	beq.n	8006f3e <HAL_TIM_ConfigClockSource+0x15a>
 8006e84:	2b10      	cmp	r3, #16
 8006e86:	d05a      	beq.n	8006f3e <HAL_TIM_ConfigClockSource+0x15a>
 8006e88:	e062      	b.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6818      	ldr	r0, [r3, #0]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	6899      	ldr	r1, [r3, #8]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	f000 fb5d 	bl	8007558 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006eac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	609a      	str	r2, [r3, #8]
      break;
 8006eb6:	e04f      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6818      	ldr	r0, [r3, #0]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	6899      	ldr	r1, [r3, #8]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f000 fb46 	bl	8007558 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689a      	ldr	r2, [r3, #8]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006eda:	609a      	str	r2, [r3, #8]
      break;
 8006edc:	e03c      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6818      	ldr	r0, [r3, #0]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	6859      	ldr	r1, [r3, #4]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	461a      	mov	r2, r3
 8006eec:	f000 faba 	bl	8007464 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2150      	movs	r1, #80	; 0x50
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 fb13 	bl	8007522 <TIM_ITRx_SetConfig>
      break;
 8006efc:	e02c      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6818      	ldr	r0, [r3, #0]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	6859      	ldr	r1, [r3, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f000 fad9 	bl	80074c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2160      	movs	r1, #96	; 0x60
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 fb03 	bl	8007522 <TIM_ITRx_SetConfig>
      break;
 8006f1c:	e01c      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	6859      	ldr	r1, [r3, #4]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f000 fa9a 	bl	8007464 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2140      	movs	r1, #64	; 0x40
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 faf3 	bl	8007522 <TIM_ITRx_SetConfig>
      break;
 8006f3c:	e00c      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4619      	mov	r1, r3
 8006f48:	4610      	mov	r0, r2
 8006f4a:	f000 faea 	bl	8007522 <TIM_ITRx_SetConfig>
      break;
 8006f4e:	e003      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	73fb      	strb	r3, [r7, #15]
      break;
 8006f54:	e000      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b083      	sub	sp, #12
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f7a:	bf00      	nop
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b083      	sub	sp, #12
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f8e:	bf00      	nop
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b083      	sub	sp, #12
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fa2:	bf00      	nop
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b083      	sub	sp, #12
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fb6:	bf00      	nop
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
	...

08006fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a40      	ldr	r2, [pc, #256]	; (80070d8 <TIM_Base_SetConfig+0x114>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d013      	beq.n	8007004 <TIM_Base_SetConfig+0x40>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe2:	d00f      	beq.n	8007004 <TIM_Base_SetConfig+0x40>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a3d      	ldr	r2, [pc, #244]	; (80070dc <TIM_Base_SetConfig+0x118>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d00b      	beq.n	8007004 <TIM_Base_SetConfig+0x40>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a3c      	ldr	r2, [pc, #240]	; (80070e0 <TIM_Base_SetConfig+0x11c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d007      	beq.n	8007004 <TIM_Base_SetConfig+0x40>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a3b      	ldr	r2, [pc, #236]	; (80070e4 <TIM_Base_SetConfig+0x120>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d003      	beq.n	8007004 <TIM_Base_SetConfig+0x40>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a3a      	ldr	r2, [pc, #232]	; (80070e8 <TIM_Base_SetConfig+0x124>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d108      	bne.n	8007016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	4313      	orrs	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a2f      	ldr	r2, [pc, #188]	; (80070d8 <TIM_Base_SetConfig+0x114>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d02b      	beq.n	8007076 <TIM_Base_SetConfig+0xb2>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007024:	d027      	beq.n	8007076 <TIM_Base_SetConfig+0xb2>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a2c      	ldr	r2, [pc, #176]	; (80070dc <TIM_Base_SetConfig+0x118>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d023      	beq.n	8007076 <TIM_Base_SetConfig+0xb2>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a2b      	ldr	r2, [pc, #172]	; (80070e0 <TIM_Base_SetConfig+0x11c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d01f      	beq.n	8007076 <TIM_Base_SetConfig+0xb2>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a2a      	ldr	r2, [pc, #168]	; (80070e4 <TIM_Base_SetConfig+0x120>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d01b      	beq.n	8007076 <TIM_Base_SetConfig+0xb2>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a29      	ldr	r2, [pc, #164]	; (80070e8 <TIM_Base_SetConfig+0x124>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d017      	beq.n	8007076 <TIM_Base_SetConfig+0xb2>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a28      	ldr	r2, [pc, #160]	; (80070ec <TIM_Base_SetConfig+0x128>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d013      	beq.n	8007076 <TIM_Base_SetConfig+0xb2>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a27      	ldr	r2, [pc, #156]	; (80070f0 <TIM_Base_SetConfig+0x12c>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d00f      	beq.n	8007076 <TIM_Base_SetConfig+0xb2>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a26      	ldr	r2, [pc, #152]	; (80070f4 <TIM_Base_SetConfig+0x130>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d00b      	beq.n	8007076 <TIM_Base_SetConfig+0xb2>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a25      	ldr	r2, [pc, #148]	; (80070f8 <TIM_Base_SetConfig+0x134>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d007      	beq.n	8007076 <TIM_Base_SetConfig+0xb2>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a24      	ldr	r2, [pc, #144]	; (80070fc <TIM_Base_SetConfig+0x138>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d003      	beq.n	8007076 <TIM_Base_SetConfig+0xb2>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a23      	ldr	r2, [pc, #140]	; (8007100 <TIM_Base_SetConfig+0x13c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d108      	bne.n	8007088 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800707c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	4313      	orrs	r3, r2
 8007086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	4313      	orrs	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a0a      	ldr	r2, [pc, #40]	; (80070d8 <TIM_Base_SetConfig+0x114>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d003      	beq.n	80070bc <TIM_Base_SetConfig+0xf8>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a0c      	ldr	r2, [pc, #48]	; (80070e8 <TIM_Base_SetConfig+0x124>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d103      	bne.n	80070c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	691a      	ldr	r2, [r3, #16]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	615a      	str	r2, [r3, #20]
}
 80070ca:	bf00      	nop
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	40010000 	.word	0x40010000
 80070dc:	40000400 	.word	0x40000400
 80070e0:	40000800 	.word	0x40000800
 80070e4:	40000c00 	.word	0x40000c00
 80070e8:	40010400 	.word	0x40010400
 80070ec:	40014000 	.word	0x40014000
 80070f0:	40014400 	.word	0x40014400
 80070f4:	40014800 	.word	0x40014800
 80070f8:	40001800 	.word	0x40001800
 80070fc:	40001c00 	.word	0x40001c00
 8007100:	40002000 	.word	0x40002000

08007104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	f023 0201 	bic.w	r2, r3, #1
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0303 	bic.w	r3, r3, #3
 800713a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4313      	orrs	r3, r2
 8007144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f023 0302 	bic.w	r3, r3, #2
 800714c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	4313      	orrs	r3, r2
 8007156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a20      	ldr	r2, [pc, #128]	; (80071dc <TIM_OC1_SetConfig+0xd8>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d003      	beq.n	8007168 <TIM_OC1_SetConfig+0x64>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a1f      	ldr	r2, [pc, #124]	; (80071e0 <TIM_OC1_SetConfig+0xdc>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d10c      	bne.n	8007182 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	f023 0308 	bic.w	r3, r3, #8
 800716e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	4313      	orrs	r3, r2
 8007178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f023 0304 	bic.w	r3, r3, #4
 8007180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a15      	ldr	r2, [pc, #84]	; (80071dc <TIM_OC1_SetConfig+0xd8>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d003      	beq.n	8007192 <TIM_OC1_SetConfig+0x8e>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a14      	ldr	r2, [pc, #80]	; (80071e0 <TIM_OC1_SetConfig+0xdc>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d111      	bne.n	80071b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	685a      	ldr	r2, [r3, #4]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	621a      	str	r2, [r3, #32]
}
 80071d0:	bf00      	nop
 80071d2:	371c      	adds	r7, #28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	40010000 	.word	0x40010000
 80071e0:	40010400 	.word	0x40010400

080071e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	f023 0210 	bic.w	r2, r3, #16
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800721a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	021b      	lsls	r3, r3, #8
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	4313      	orrs	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f023 0320 	bic.w	r3, r3, #32
 800722e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	011b      	lsls	r3, r3, #4
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	4313      	orrs	r3, r2
 800723a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a22      	ldr	r2, [pc, #136]	; (80072c8 <TIM_OC2_SetConfig+0xe4>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d003      	beq.n	800724c <TIM_OC2_SetConfig+0x68>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a21      	ldr	r2, [pc, #132]	; (80072cc <TIM_OC2_SetConfig+0xe8>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d10d      	bne.n	8007268 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	011b      	lsls	r3, r3, #4
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	4313      	orrs	r3, r2
 800725e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007266:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a17      	ldr	r2, [pc, #92]	; (80072c8 <TIM_OC2_SetConfig+0xe4>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d003      	beq.n	8007278 <TIM_OC2_SetConfig+0x94>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a16      	ldr	r2, [pc, #88]	; (80072cc <TIM_OC2_SetConfig+0xe8>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d113      	bne.n	80072a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800727e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007286:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	4313      	orrs	r3, r2
 8007292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	4313      	orrs	r3, r2
 800729e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	621a      	str	r2, [r3, #32]
}
 80072ba:	bf00      	nop
 80072bc:	371c      	adds	r7, #28
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	40010000 	.word	0x40010000
 80072cc:	40010400 	.word	0x40010400

080072d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f023 0303 	bic.w	r3, r3, #3
 8007306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	4313      	orrs	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	021b      	lsls	r3, r3, #8
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	4313      	orrs	r3, r2
 8007324:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a21      	ldr	r2, [pc, #132]	; (80073b0 <TIM_OC3_SetConfig+0xe0>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d003      	beq.n	8007336 <TIM_OC3_SetConfig+0x66>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a20      	ldr	r2, [pc, #128]	; (80073b4 <TIM_OC3_SetConfig+0xe4>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d10d      	bne.n	8007352 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800733c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	021b      	lsls	r3, r3, #8
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	4313      	orrs	r3, r2
 8007348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007350:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a16      	ldr	r2, [pc, #88]	; (80073b0 <TIM_OC3_SetConfig+0xe0>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d003      	beq.n	8007362 <TIM_OC3_SetConfig+0x92>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a15      	ldr	r2, [pc, #84]	; (80073b4 <TIM_OC3_SetConfig+0xe4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d113      	bne.n	800738a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	011b      	lsls	r3, r3, #4
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	4313      	orrs	r3, r2
 800737c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	011b      	lsls	r3, r3, #4
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	4313      	orrs	r3, r2
 8007388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	621a      	str	r2, [r3, #32]
}
 80073a4:	bf00      	nop
 80073a6:	371c      	adds	r7, #28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	40010000 	.word	0x40010000
 80073b4:	40010400 	.word	0x40010400

080073b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	021b      	lsls	r3, r3, #8
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	031b      	lsls	r3, r3, #12
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	4313      	orrs	r3, r2
 800740e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a12      	ldr	r2, [pc, #72]	; (800745c <TIM_OC4_SetConfig+0xa4>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d003      	beq.n	8007420 <TIM_OC4_SetConfig+0x68>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a11      	ldr	r2, [pc, #68]	; (8007460 <TIM_OC4_SetConfig+0xa8>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d109      	bne.n	8007434 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007426:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	019b      	lsls	r3, r3, #6
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	4313      	orrs	r3, r2
 8007432:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	621a      	str	r2, [r3, #32]
}
 800744e:	bf00      	nop
 8007450:	371c      	adds	r7, #28
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	40010000 	.word	0x40010000
 8007460:	40010400 	.word	0x40010400

08007464 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007464:	b480      	push	{r7}
 8007466:	b087      	sub	sp, #28
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	f023 0201 	bic.w	r2, r3, #1
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800748e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	011b      	lsls	r3, r3, #4
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	4313      	orrs	r3, r2
 8007498:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f023 030a 	bic.w	r3, r3, #10
 80074a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	621a      	str	r2, [r3, #32]
}
 80074b6:	bf00      	nop
 80074b8:	371c      	adds	r7, #28
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b087      	sub	sp, #28
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	f023 0210 	bic.w	r2, r3, #16
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6a1b      	ldr	r3, [r3, #32]
 80074e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	031b      	lsls	r3, r3, #12
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	011b      	lsls	r3, r3, #4
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	4313      	orrs	r3, r2
 8007508:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	621a      	str	r2, [r3, #32]
}
 8007516:	bf00      	nop
 8007518:	371c      	adds	r7, #28
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007522:	b480      	push	{r7}
 8007524:	b085      	sub	sp, #20
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007538:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4313      	orrs	r3, r2
 8007540:	f043 0307 	orr.w	r3, r3, #7
 8007544:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	609a      	str	r2, [r3, #8]
}
 800754c:	bf00      	nop
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
 8007564:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007572:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	021a      	lsls	r2, r3, #8
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	431a      	orrs	r2, r3
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	4313      	orrs	r3, r2
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	4313      	orrs	r3, r2
 8007584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	609a      	str	r2, [r3, #8]
}
 800758c:	bf00      	nop
 800758e:	371c      	adds	r7, #28
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f003 031f 	and.w	r3, r3, #31
 80075aa:	2201      	movs	r2, #1
 80075ac:	fa02 f303 	lsl.w	r3, r2, r3
 80075b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6a1a      	ldr	r2, [r3, #32]
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	43db      	mvns	r3, r3
 80075ba:	401a      	ands	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6a1a      	ldr	r2, [r3, #32]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	f003 031f 	and.w	r3, r3, #31
 80075ca:	6879      	ldr	r1, [r7, #4]
 80075cc:	fa01 f303 	lsl.w	r3, r1, r3
 80075d0:	431a      	orrs	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	621a      	str	r2, [r3, #32]
}
 80075d6:	bf00      	nop
 80075d8:	371c      	adds	r7, #28
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
	...

080075e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d101      	bne.n	80075fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075f8:	2302      	movs	r3, #2
 80075fa:	e05a      	b.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2202      	movs	r2, #2
 8007608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	4313      	orrs	r3, r2
 800762c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a21      	ldr	r2, [pc, #132]	; (80076c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d022      	beq.n	8007686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007648:	d01d      	beq.n	8007686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a1d      	ldr	r2, [pc, #116]	; (80076c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d018      	beq.n	8007686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a1b      	ldr	r2, [pc, #108]	; (80076c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d013      	beq.n	8007686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a1a      	ldr	r2, [pc, #104]	; (80076cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d00e      	beq.n	8007686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a18      	ldr	r2, [pc, #96]	; (80076d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d009      	beq.n	8007686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a17      	ldr	r2, [pc, #92]	; (80076d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d004      	beq.n	8007686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a15      	ldr	r2, [pc, #84]	; (80076d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d10c      	bne.n	80076a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800768c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	4313      	orrs	r3, r2
 8007696:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	40010000 	.word	0x40010000
 80076c4:	40000400 	.word	0x40000400
 80076c8:	40000800 	.word	0x40000800
 80076cc:	40000c00 	.word	0x40000c00
 80076d0:	40010400 	.word	0x40010400
 80076d4:	40014000 	.word	0x40014000
 80076d8:	40001800 	.word	0x40001800

080076dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e03f      	b.n	8007796 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d106      	bne.n	8007730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7fc fd8c 	bl	8004248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2224      	movs	r2, #36	; 0x24
 8007734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68da      	ldr	r2, [r3, #12]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 ff3d 	bl	80085c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	691a      	ldr	r2, [r3, #16]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800775c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	695a      	ldr	r2, [r3, #20]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800776c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68da      	ldr	r2, [r3, #12]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800777c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2220      	movs	r2, #32
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2220      	movs	r2, #32
 8007790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b082      	sub	sp, #8
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e047      	b.n	8007840 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d106      	bne.n	80077ca <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f7fc fd3f 	bl	8004248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2224      	movs	r2, #36	; 0x24
 80077ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68da      	ldr	r2, [r3, #12]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077e0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fef0 	bl	80085c8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691a      	ldr	r2, [r3, #16]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	695a      	ldr	r2, [r3, #20]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8007806:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	695a      	ldr	r2, [r3, #20]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f042 0208 	orr.w	r2, r2, #8
 8007816:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68da      	ldr	r2, [r3, #12]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007826:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2220      	movs	r2, #32
 8007832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2220      	movs	r2, #32
 800783a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b08a      	sub	sp, #40	; 0x28
 800784c:	af02      	add	r7, sp, #8
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	603b      	str	r3, [r7, #0]
 8007854:	4613      	mov	r3, r2
 8007856:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b20      	cmp	r3, #32
 8007866:	d17c      	bne.n	8007962 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d002      	beq.n	8007874 <HAL_UART_Transmit+0x2c>
 800786e:	88fb      	ldrh	r3, [r7, #6]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d101      	bne.n	8007878 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e075      	b.n	8007964 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800787e:	2b01      	cmp	r3, #1
 8007880:	d101      	bne.n	8007886 <HAL_UART_Transmit+0x3e>
 8007882:	2302      	movs	r3, #2
 8007884:	e06e      	b.n	8007964 <HAL_UART_Transmit+0x11c>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2221      	movs	r2, #33	; 0x21
 8007898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800789c:	f7fc ff10 	bl	80046c0 <HAL_GetTick>
 80078a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	88fa      	ldrh	r2, [r7, #6]
 80078a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	88fa      	ldrh	r2, [r7, #6]
 80078ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078b6:	d108      	bne.n	80078ca <HAL_UART_Transmit+0x82>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d104      	bne.n	80078ca <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80078c0:	2300      	movs	r3, #0
 80078c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	61bb      	str	r3, [r7, #24]
 80078c8:	e003      	b.n	80078d2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078ce:	2300      	movs	r3, #0
 80078d0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80078da:	e02a      	b.n	8007932 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	2200      	movs	r2, #0
 80078e4:	2180      	movs	r1, #128	; 0x80
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 fc28 	bl	800813c <UART_WaitOnFlagUntilTimeout>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e036      	b.n	8007964 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10b      	bne.n	8007914 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	881b      	ldrh	r3, [r3, #0]
 8007900:	461a      	mov	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800790a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	3302      	adds	r3, #2
 8007910:	61bb      	str	r3, [r7, #24]
 8007912:	e007      	b.n	8007924 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	781a      	ldrb	r2, [r3, #0]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	3301      	adds	r3, #1
 8007922:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007928:	b29b      	uxth	r3, r3
 800792a:	3b01      	subs	r3, #1
 800792c:	b29a      	uxth	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007936:	b29b      	uxth	r3, r3
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1cf      	bne.n	80078dc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	2200      	movs	r2, #0
 8007944:	2140      	movs	r1, #64	; 0x40
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 fbf8 	bl	800813c <UART_WaitOnFlagUntilTimeout>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e006      	b.n	8007964 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2220      	movs	r2, #32
 800795a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	e000      	b.n	8007964 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007962:	2302      	movs	r3, #2
  }
}
 8007964:	4618      	mov	r0, r3
 8007966:	3720      	adds	r7, #32
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b08a      	sub	sp, #40	; 0x28
 8007970:	af02      	add	r7, sp, #8
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	603b      	str	r3, [r7, #0]
 8007978:	4613      	mov	r3, r2
 800797a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b20      	cmp	r3, #32
 800798a:	f040 808c 	bne.w	8007aa6 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <HAL_UART_Receive+0x2e>
 8007994:	88fb      	ldrh	r3, [r7, #6]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e084      	b.n	8007aa8 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d101      	bne.n	80079ac <HAL_UART_Receive+0x40>
 80079a8:	2302      	movs	r3, #2
 80079aa:	e07d      	b.n	8007aa8 <HAL_UART_Receive+0x13c>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2222      	movs	r2, #34	; 0x22
 80079be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079c8:	f7fc fe7a 	bl	80046c0 <HAL_GetTick>
 80079cc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	88fa      	ldrh	r2, [r7, #6]
 80079d2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	88fa      	ldrh	r2, [r7, #6]
 80079d8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e2:	d108      	bne.n	80079f6 <HAL_UART_Receive+0x8a>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d104      	bne.n	80079f6 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80079ec:	2300      	movs	r3, #0
 80079ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	61bb      	str	r3, [r7, #24]
 80079f4:	e003      	b.n	80079fe <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079fa:	2300      	movs	r3, #0
 80079fc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007a06:	e043      	b.n	8007a90 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	2120      	movs	r1, #32
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 fb92 	bl	800813c <UART_WaitOnFlagUntilTimeout>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e042      	b.n	8007aa8 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10c      	bne.n	8007a42 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	3302      	adds	r3, #2
 8007a3e:	61bb      	str	r3, [r7, #24]
 8007a40:	e01f      	b.n	8007a82 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a4a:	d007      	beq.n	8007a5c <HAL_UART_Receive+0xf0>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d10a      	bne.n	8007a6a <HAL_UART_Receive+0xfe>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d106      	bne.n	8007a6a <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	701a      	strb	r2, [r3, #0]
 8007a68:	e008      	b.n	8007a7c <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1b6      	bne.n	8007a08 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2220      	movs	r2, #32
 8007a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	e000      	b.n	8007aa8 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007aa6:	2302      	movs	r3, #2
  }
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3720      	adds	r7, #32
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	4613      	mov	r3, r2
 8007abc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b20      	cmp	r3, #32
 8007ac8:	d11d      	bne.n	8007b06 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <HAL_UART_Receive_IT+0x26>
 8007ad0:	88fb      	ldrh	r3, [r7, #6]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d101      	bne.n	8007ada <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e016      	b.n	8007b08 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d101      	bne.n	8007ae8 <HAL_UART_Receive_IT+0x38>
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	e00f      	b.n	8007b08 <HAL_UART_Receive_IT+0x58>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007af6:	88fb      	ldrh	r3, [r7, #6]
 8007af8:	461a      	mov	r2, r3
 8007afa:	68b9      	ldr	r1, [r7, #8]
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 fb8b 	bl	8008218 <UART_Start_Receive_IT>
 8007b02:	4603      	mov	r3, r0
 8007b04:	e000      	b.n	8007b08 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007b06:	2302      	movs	r3, #2
  }
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b0ba      	sub	sp, #232	; 0xe8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b46:	f003 030f 	and.w	r3, r3, #15
 8007b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007b4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10f      	bne.n	8007b76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d009      	beq.n	8007b76 <HAL_UART_IRQHandler+0x66>
 8007b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b66:	f003 0320 	and.w	r3, r3, #32
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d003      	beq.n	8007b76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fc6f 	bl	8008452 <UART_Receive_IT>
      return;
 8007b74:	e256      	b.n	8008024 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 80de 	beq.w	8007d3c <HAL_UART_IRQHandler+0x22c>
 8007b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d106      	bne.n	8007b9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 80d1 	beq.w	8007d3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00b      	beq.n	8007bbe <HAL_UART_IRQHandler+0xae>
 8007ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d005      	beq.n	8007bbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb6:	f043 0201 	orr.w	r2, r3, #1
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bc2:	f003 0304 	and.w	r3, r3, #4
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00b      	beq.n	8007be2 <HAL_UART_IRQHandler+0xd2>
 8007bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d005      	beq.n	8007be2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bda:	f043 0202 	orr.w	r2, r3, #2
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00b      	beq.n	8007c06 <HAL_UART_IRQHandler+0xf6>
 8007bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfe:	f043 0204 	orr.w	r2, r3, #4
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0a:	f003 0308 	and.w	r3, r3, #8
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d011      	beq.n	8007c36 <HAL_UART_IRQHandler+0x126>
 8007c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c16:	f003 0320 	and.w	r3, r3, #32
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d105      	bne.n	8007c2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d005      	beq.n	8007c36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2e:	f043 0208 	orr.w	r2, r3, #8
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f000 81ed 	beq.w	800801a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c44:	f003 0320 	and.w	r3, r3, #32
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d008      	beq.n	8007c5e <HAL_UART_IRQHandler+0x14e>
 8007c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c50:	f003 0320 	and.w	r3, r3, #32
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d002      	beq.n	8007c5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fbfa 	bl	8008452 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c68:	2b40      	cmp	r3, #64	; 0x40
 8007c6a:	bf0c      	ite	eq
 8007c6c:	2301      	moveq	r3, #1
 8007c6e:	2300      	movne	r3, #0
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7a:	f003 0308 	and.w	r3, r3, #8
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d103      	bne.n	8007c8a <HAL_UART_IRQHandler+0x17a>
 8007c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d04f      	beq.n	8007d2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fb02 	bl	8008294 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c9a:	2b40      	cmp	r3, #64	; 0x40
 8007c9c:	d141      	bne.n	8007d22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3314      	adds	r3, #20
 8007ca4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cac:	e853 3f00 	ldrex	r3, [r3]
 8007cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3314      	adds	r3, #20
 8007cc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007cca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007cd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007cda:	e841 2300 	strex	r3, r2, [r1]
 8007cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007ce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1d9      	bne.n	8007c9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d013      	beq.n	8007d1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	4a7d      	ldr	r2, [pc, #500]	; (8007eec <HAL_UART_IRQHandler+0x3dc>)
 8007cf8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fd fd65 	bl	80057ce <HAL_DMA_Abort_IT>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d016      	beq.n	8007d38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d14:	4610      	mov	r0, r2
 8007d16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d18:	e00e      	b.n	8007d38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f990 	bl	8008040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d20:	e00a      	b.n	8007d38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f98c 	bl	8008040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d28:	e006      	b.n	8007d38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f988 	bl	8008040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007d36:	e170      	b.n	800801a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d38:	bf00      	nop
    return;
 8007d3a:	e16e      	b.n	800801a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	f040 814a 	bne.w	8007fda <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d4a:	f003 0310 	and.w	r3, r3, #16
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 8143 	beq.w	8007fda <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d58:	f003 0310 	and.w	r3, r3, #16
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f000 813c 	beq.w	8007fda <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d62:	2300      	movs	r3, #0
 8007d64:	60bb      	str	r3, [r7, #8]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	60bb      	str	r3, [r7, #8]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	60bb      	str	r3, [r7, #8]
 8007d76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d82:	2b40      	cmp	r3, #64	; 0x40
 8007d84:	f040 80b4 	bne.w	8007ef0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 8140 	beq.w	800801e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007da2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007da6:	429a      	cmp	r2, r3
 8007da8:	f080 8139 	bcs.w	800801e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007db2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dbe:	f000 8088 	beq.w	8007ed2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	330c      	adds	r3, #12
 8007dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dd0:	e853 3f00 	ldrex	r3, [r3]
 8007dd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007de0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	330c      	adds	r3, #12
 8007dea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007dee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007df2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007dfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007dfe:	e841 2300 	strex	r3, r2, [r1]
 8007e02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1d9      	bne.n	8007dc2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3314      	adds	r3, #20
 8007e14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e18:	e853 3f00 	ldrex	r3, [r3]
 8007e1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e20:	f023 0301 	bic.w	r3, r3, #1
 8007e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3314      	adds	r3, #20
 8007e2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e3e:	e841 2300 	strex	r3, r2, [r1]
 8007e42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1e1      	bne.n	8007e0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3314      	adds	r3, #20
 8007e50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e54:	e853 3f00 	ldrex	r3, [r3]
 8007e58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	3314      	adds	r3, #20
 8007e6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e76:	e841 2300 	strex	r3, r2, [r1]
 8007e7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1e3      	bne.n	8007e4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2220      	movs	r2, #32
 8007e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	330c      	adds	r3, #12
 8007e96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e9a:	e853 3f00 	ldrex	r3, [r3]
 8007e9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ea2:	f023 0310 	bic.w	r3, r3, #16
 8007ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	330c      	adds	r3, #12
 8007eb0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007eb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8007eb6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007eba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ebc:	e841 2300 	strex	r3, r2, [r1]
 8007ec0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1e3      	bne.n	8007e90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7fd fc0e 	bl	80056ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f8b6 	bl	8008054 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ee8:	e099      	b.n	800801e <HAL_UART_IRQHandler+0x50e>
 8007eea:	bf00      	nop
 8007eec:	0800835b 	.word	0x0800835b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 808b 	beq.w	8008022 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007f0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 8086 	beq.w	8008022 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	330c      	adds	r3, #12
 8007f1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	330c      	adds	r3, #12
 8007f36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007f3a:	647a      	str	r2, [r7, #68]	; 0x44
 8007f3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f42:	e841 2300 	strex	r3, r2, [r1]
 8007f46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1e3      	bne.n	8007f16 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	3314      	adds	r3, #20
 8007f54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	623b      	str	r3, [r7, #32]
   return(result);
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	f023 0301 	bic.w	r3, r3, #1
 8007f64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	3314      	adds	r3, #20
 8007f6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f72:	633a      	str	r2, [r7, #48]	; 0x30
 8007f74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f7a:	e841 2300 	strex	r3, r2, [r1]
 8007f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e3      	bne.n	8007f4e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	330c      	adds	r3, #12
 8007f9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	e853 3f00 	ldrex	r3, [r3]
 8007fa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f023 0310 	bic.w	r3, r3, #16
 8007faa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	330c      	adds	r3, #12
 8007fb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007fb8:	61fa      	str	r2, [r7, #28]
 8007fba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbc:	69b9      	ldr	r1, [r7, #24]
 8007fbe:	69fa      	ldr	r2, [r7, #28]
 8007fc0:	e841 2300 	strex	r3, r2, [r1]
 8007fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1e3      	bne.n	8007f94 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f83e 	bl	8008054 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007fd8:	e023      	b.n	8008022 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d009      	beq.n	8007ffa <HAL_UART_IRQHandler+0x4ea>
 8007fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f9c5 	bl	8008382 <UART_Transmit_IT>
    return;
 8007ff8:	e014      	b.n	8008024 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00e      	beq.n	8008024 <HAL_UART_IRQHandler+0x514>
 8008006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800800a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800e:	2b00      	cmp	r3, #0
 8008010:	d008      	beq.n	8008024 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fa05 	bl	8008422 <UART_EndTransmit_IT>
    return;
 8008018:	e004      	b.n	8008024 <HAL_UART_IRQHandler+0x514>
    return;
 800801a:	bf00      	nop
 800801c:	e002      	b.n	8008024 <HAL_UART_IRQHandler+0x514>
      return;
 800801e:	bf00      	nop
 8008020:	e000      	b.n	8008024 <HAL_UART_IRQHandler+0x514>
      return;
 8008022:	bf00      	nop
  }
}
 8008024:	37e8      	adds	r7, #232	; 0xe8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop

0800802c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	460b      	mov	r3, r1
 800805e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8008074:	2300      	movs	r3, #0
 8008076:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800807e:	2b01      	cmp	r3, #1
 8008080:	d101      	bne.n	8008086 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8008082:	2302      	movs	r3, #2
 8008084:	e020      	b.n	80080c8 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2224      	movs	r2, #36	; 0x24
 8008092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f023 030c 	bic.w	r3, r3, #12
 80080a4:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f043 0308 	orr.w	r3, r3, #8
 80080ac:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2220      	movs	r2, #32
 80080ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80080dc:	2300      	movs	r3, #0
 80080de:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d101      	bne.n	80080ee <HAL_HalfDuplex_EnableReceiver+0x1a>
 80080ea:	2302      	movs	r3, #2
 80080ec:	e020      	b.n	8008130 <HAL_HalfDuplex_EnableReceiver+0x5c>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2224      	movs	r2, #36	; 0x24
 80080fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f023 030c 	bic.w	r3, r3, #12
 800810c:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f043 0304 	orr.w	r3, r3, #4
 8008114:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2220      	movs	r2, #32
 8008122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b090      	sub	sp, #64	; 0x40
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	603b      	str	r3, [r7, #0]
 8008148:	4613      	mov	r3, r2
 800814a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800814c:	e050      	b.n	80081f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800814e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008154:	d04c      	beq.n	80081f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008158:	2b00      	cmp	r3, #0
 800815a:	d007      	beq.n	800816c <UART_WaitOnFlagUntilTimeout+0x30>
 800815c:	f7fc fab0 	bl	80046c0 <HAL_GetTick>
 8008160:	4602      	mov	r2, r0
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008168:	429a      	cmp	r2, r3
 800816a:	d241      	bcs.n	80081f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	330c      	adds	r3, #12
 8008172:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008176:	e853 3f00 	ldrex	r3, [r3]
 800817a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	330c      	adds	r3, #12
 800818a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800818c:	637a      	str	r2, [r7, #52]	; 0x34
 800818e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008190:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008194:	e841 2300 	strex	r3, r2, [r1]
 8008198:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800819a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1e5      	bne.n	800816c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3314      	adds	r3, #20
 80081a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	e853 3f00 	ldrex	r3, [r3]
 80081ae:	613b      	str	r3, [r7, #16]
   return(result);
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	f023 0301 	bic.w	r3, r3, #1
 80081b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3314      	adds	r3, #20
 80081be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081c0:	623a      	str	r2, [r7, #32]
 80081c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c4:	69f9      	ldr	r1, [r7, #28]
 80081c6:	6a3a      	ldr	r2, [r7, #32]
 80081c8:	e841 2300 	strex	r3, r2, [r1]
 80081cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1e5      	bne.n	80081a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2220      	movs	r2, #32
 80081d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2220      	movs	r2, #32
 80081e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e00f      	b.n	8008210 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	4013      	ands	r3, r2
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	bf0c      	ite	eq
 8008200:	2301      	moveq	r3, #1
 8008202:	2300      	movne	r3, #0
 8008204:	b2db      	uxtb	r3, r3
 8008206:	461a      	mov	r2, r3
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	429a      	cmp	r2, r3
 800820c:	d09f      	beq.n	800814e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3740      	adds	r7, #64	; 0x40
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	4613      	mov	r3, r2
 8008224:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	88fa      	ldrh	r2, [r7, #6]
 8008230:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	88fa      	ldrh	r2, [r7, #6]
 8008236:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2222      	movs	r2, #34	; 0x22
 8008242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d007      	beq.n	8008266 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68da      	ldr	r2, [r3, #12]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008264:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	695a      	ldr	r2, [r3, #20]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f042 0201 	orr.w	r2, r2, #1
 8008274:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68da      	ldr	r2, [r3, #12]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f042 0220 	orr.w	r2, r2, #32
 8008284:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008294:	b480      	push	{r7}
 8008296:	b095      	sub	sp, #84	; 0x54
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	330c      	adds	r3, #12
 80082a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a6:	e853 3f00 	ldrex	r3, [r3]
 80082aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	330c      	adds	r3, #12
 80082ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082bc:	643a      	str	r2, [r7, #64]	; 0x40
 80082be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082c4:	e841 2300 	strex	r3, r2, [r1]
 80082c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1e5      	bne.n	800829c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	3314      	adds	r3, #20
 80082d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	6a3b      	ldr	r3, [r7, #32]
 80082da:	e853 3f00 	ldrex	r3, [r3]
 80082de:	61fb      	str	r3, [r7, #28]
   return(result);
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	f023 0301 	bic.w	r3, r3, #1
 80082e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3314      	adds	r3, #20
 80082ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082f8:	e841 2300 	strex	r3, r2, [r1]
 80082fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e5      	bne.n	80082d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008308:	2b01      	cmp	r3, #1
 800830a:	d119      	bne.n	8008340 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	330c      	adds	r3, #12
 8008312:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	e853 3f00 	ldrex	r3, [r3]
 800831a:	60bb      	str	r3, [r7, #8]
   return(result);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	f023 0310 	bic.w	r3, r3, #16
 8008322:	647b      	str	r3, [r7, #68]	; 0x44
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	330c      	adds	r3, #12
 800832a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800832c:	61ba      	str	r2, [r7, #24]
 800832e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008330:	6979      	ldr	r1, [r7, #20]
 8008332:	69ba      	ldr	r2, [r7, #24]
 8008334:	e841 2300 	strex	r3, r2, [r1]
 8008338:	613b      	str	r3, [r7, #16]
   return(result);
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1e5      	bne.n	800830c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2220      	movs	r2, #32
 8008344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800834e:	bf00      	nop
 8008350:	3754      	adds	r7, #84	; 0x54
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008366:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f7ff fe63 	bl	8008040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800837a:	bf00      	nop
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008382:	b480      	push	{r7}
 8008384:	b085      	sub	sp, #20
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008390:	b2db      	uxtb	r3, r3
 8008392:	2b21      	cmp	r3, #33	; 0x21
 8008394:	d13e      	bne.n	8008414 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800839e:	d114      	bne.n	80083ca <UART_Transmit_IT+0x48>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d110      	bne.n	80083ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a1b      	ldr	r3, [r3, #32]
 80083ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	881b      	ldrh	r3, [r3, #0]
 80083b2:	461a      	mov	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	1c9a      	adds	r2, r3, #2
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	621a      	str	r2, [r3, #32]
 80083c8:	e008      	b.n	80083dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	1c59      	adds	r1, r3, #1
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	6211      	str	r1, [r2, #32]
 80083d4:	781a      	ldrb	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	3b01      	subs	r3, #1
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	4619      	mov	r1, r3
 80083ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10f      	bne.n	8008410 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68da      	ldr	r2, [r3, #12]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68da      	ldr	r2, [r3, #12]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800840e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	e000      	b.n	8008416 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008414:	2302      	movs	r3, #2
  }
}
 8008416:	4618      	mov	r0, r3
 8008418:	3714      	adds	r7, #20
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b082      	sub	sp, #8
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68da      	ldr	r2, [r3, #12]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008438:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2220      	movs	r2, #32
 800843e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff fdf2 	bl	800802c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b08c      	sub	sp, #48	; 0x30
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b22      	cmp	r3, #34	; 0x22
 8008464:	f040 80ab 	bne.w	80085be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008470:	d117      	bne.n	80084a2 <UART_Receive_IT+0x50>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d113      	bne.n	80084a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800847a:	2300      	movs	r3, #0
 800847c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008482:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	b29b      	uxth	r3, r3
 800848c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008490:	b29a      	uxth	r2, r3
 8008492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008494:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849a:	1c9a      	adds	r2, r3, #2
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	629a      	str	r2, [r3, #40]	; 0x28
 80084a0:	e026      	b.n	80084f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80084a8:	2300      	movs	r3, #0
 80084aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b4:	d007      	beq.n	80084c6 <UART_Receive_IT+0x74>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10a      	bne.n	80084d4 <UART_Receive_IT+0x82>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d106      	bne.n	80084d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d0:	701a      	strb	r2, [r3, #0]
 80084d2:	e008      	b.n	80084e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ea:	1c5a      	adds	r2, r3, #1
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	3b01      	subs	r3, #1
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	4619      	mov	r1, r3
 80084fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008500:	2b00      	cmp	r3, #0
 8008502:	d15a      	bne.n	80085ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68da      	ldr	r2, [r3, #12]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f022 0220 	bic.w	r2, r2, #32
 8008512:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68da      	ldr	r2, [r3, #12]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008522:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	695a      	ldr	r2, [r3, #20]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f022 0201 	bic.w	r2, r2, #1
 8008532:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2220      	movs	r2, #32
 8008538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008540:	2b01      	cmp	r3, #1
 8008542:	d135      	bne.n	80085b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	330c      	adds	r3, #12
 8008550:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	e853 3f00 	ldrex	r3, [r3]
 8008558:	613b      	str	r3, [r7, #16]
   return(result);
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	f023 0310 	bic.w	r3, r3, #16
 8008560:	627b      	str	r3, [r7, #36]	; 0x24
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	330c      	adds	r3, #12
 8008568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800856a:	623a      	str	r2, [r7, #32]
 800856c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856e:	69f9      	ldr	r1, [r7, #28]
 8008570:	6a3a      	ldr	r2, [r7, #32]
 8008572:	e841 2300 	strex	r3, r2, [r1]
 8008576:	61bb      	str	r3, [r7, #24]
   return(result);
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1e5      	bne.n	800854a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0310 	and.w	r3, r3, #16
 8008588:	2b10      	cmp	r3, #16
 800858a:	d10a      	bne.n	80085a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800858c:	2300      	movs	r3, #0
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	60fb      	str	r3, [r7, #12]
 80085a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7ff fd53 	bl	8008054 <HAL_UARTEx_RxEventCallback>
 80085ae:	e002      	b.n	80085b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f7fb fc23 	bl	8003dfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	e002      	b.n	80085c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	e000      	b.n	80085c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80085be:	2302      	movs	r3, #2
  }
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3730      	adds	r7, #48	; 0x30
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085cc:	b0c0      	sub	sp, #256	; 0x100
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80085e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085e4:	68d9      	ldr	r1, [r3, #12]
 80085e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	ea40 0301 	orr.w	r3, r0, r1
 80085f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80085f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085f6:	689a      	ldr	r2, [r3, #8]
 80085f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	431a      	orrs	r2, r3
 8008600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	431a      	orrs	r2, r3
 8008608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	4313      	orrs	r3, r2
 8008610:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008620:	f021 010c 	bic.w	r1, r1, #12
 8008624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800862e:	430b      	orrs	r3, r1
 8008630:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800863e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008642:	6999      	ldr	r1, [r3, #24]
 8008644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	ea40 0301 	orr.w	r3, r0, r1
 800864e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	4b8f      	ldr	r3, [pc, #572]	; (8008894 <UART_SetConfig+0x2cc>)
 8008658:	429a      	cmp	r2, r3
 800865a:	d005      	beq.n	8008668 <UART_SetConfig+0xa0>
 800865c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	4b8d      	ldr	r3, [pc, #564]	; (8008898 <UART_SetConfig+0x2d0>)
 8008664:	429a      	cmp	r2, r3
 8008666:	d104      	bne.n	8008672 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008668:	f7fd fbb8 	bl	8005ddc <HAL_RCC_GetPCLK2Freq>
 800866c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008670:	e003      	b.n	800867a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008672:	f7fd fb9f 	bl	8005db4 <HAL_RCC_GetPCLK1Freq>
 8008676:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800867a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800867e:	69db      	ldr	r3, [r3, #28]
 8008680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008684:	f040 810c 	bne.w	80088a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800868c:	2200      	movs	r2, #0
 800868e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008692:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008696:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800869a:	4622      	mov	r2, r4
 800869c:	462b      	mov	r3, r5
 800869e:	1891      	adds	r1, r2, r2
 80086a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80086a2:	415b      	adcs	r3, r3
 80086a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80086aa:	4621      	mov	r1, r4
 80086ac:	eb12 0801 	adds.w	r8, r2, r1
 80086b0:	4629      	mov	r1, r5
 80086b2:	eb43 0901 	adc.w	r9, r3, r1
 80086b6:	f04f 0200 	mov.w	r2, #0
 80086ba:	f04f 0300 	mov.w	r3, #0
 80086be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80086c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80086c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80086ca:	4690      	mov	r8, r2
 80086cc:	4699      	mov	r9, r3
 80086ce:	4623      	mov	r3, r4
 80086d0:	eb18 0303 	adds.w	r3, r8, r3
 80086d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80086d8:	462b      	mov	r3, r5
 80086da:	eb49 0303 	adc.w	r3, r9, r3
 80086de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80086e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80086ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80086f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80086f6:	460b      	mov	r3, r1
 80086f8:	18db      	adds	r3, r3, r3
 80086fa:	653b      	str	r3, [r7, #80]	; 0x50
 80086fc:	4613      	mov	r3, r2
 80086fe:	eb42 0303 	adc.w	r3, r2, r3
 8008702:	657b      	str	r3, [r7, #84]	; 0x54
 8008704:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008708:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800870c:	f7f8 fabc 	bl	8000c88 <__aeabi_uldivmod>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	4b61      	ldr	r3, [pc, #388]	; (800889c <UART_SetConfig+0x2d4>)
 8008716:	fba3 2302 	umull	r2, r3, r3, r2
 800871a:	095b      	lsrs	r3, r3, #5
 800871c:	011c      	lsls	r4, r3, #4
 800871e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008722:	2200      	movs	r2, #0
 8008724:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008728:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800872c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008730:	4642      	mov	r2, r8
 8008732:	464b      	mov	r3, r9
 8008734:	1891      	adds	r1, r2, r2
 8008736:	64b9      	str	r1, [r7, #72]	; 0x48
 8008738:	415b      	adcs	r3, r3
 800873a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800873c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008740:	4641      	mov	r1, r8
 8008742:	eb12 0a01 	adds.w	sl, r2, r1
 8008746:	4649      	mov	r1, r9
 8008748:	eb43 0b01 	adc.w	fp, r3, r1
 800874c:	f04f 0200 	mov.w	r2, #0
 8008750:	f04f 0300 	mov.w	r3, #0
 8008754:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008758:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800875c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008760:	4692      	mov	sl, r2
 8008762:	469b      	mov	fp, r3
 8008764:	4643      	mov	r3, r8
 8008766:	eb1a 0303 	adds.w	r3, sl, r3
 800876a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800876e:	464b      	mov	r3, r9
 8008770:	eb4b 0303 	adc.w	r3, fp, r3
 8008774:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008784:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008788:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800878c:	460b      	mov	r3, r1
 800878e:	18db      	adds	r3, r3, r3
 8008790:	643b      	str	r3, [r7, #64]	; 0x40
 8008792:	4613      	mov	r3, r2
 8008794:	eb42 0303 	adc.w	r3, r2, r3
 8008798:	647b      	str	r3, [r7, #68]	; 0x44
 800879a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800879e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80087a2:	f7f8 fa71 	bl	8000c88 <__aeabi_uldivmod>
 80087a6:	4602      	mov	r2, r0
 80087a8:	460b      	mov	r3, r1
 80087aa:	4611      	mov	r1, r2
 80087ac:	4b3b      	ldr	r3, [pc, #236]	; (800889c <UART_SetConfig+0x2d4>)
 80087ae:	fba3 2301 	umull	r2, r3, r3, r1
 80087b2:	095b      	lsrs	r3, r3, #5
 80087b4:	2264      	movs	r2, #100	; 0x64
 80087b6:	fb02 f303 	mul.w	r3, r2, r3
 80087ba:	1acb      	subs	r3, r1, r3
 80087bc:	00db      	lsls	r3, r3, #3
 80087be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80087c2:	4b36      	ldr	r3, [pc, #216]	; (800889c <UART_SetConfig+0x2d4>)
 80087c4:	fba3 2302 	umull	r2, r3, r3, r2
 80087c8:	095b      	lsrs	r3, r3, #5
 80087ca:	005b      	lsls	r3, r3, #1
 80087cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80087d0:	441c      	add	r4, r3
 80087d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087d6:	2200      	movs	r2, #0
 80087d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80087e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80087e4:	4642      	mov	r2, r8
 80087e6:	464b      	mov	r3, r9
 80087e8:	1891      	adds	r1, r2, r2
 80087ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80087ec:	415b      	adcs	r3, r3
 80087ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80087f4:	4641      	mov	r1, r8
 80087f6:	1851      	adds	r1, r2, r1
 80087f8:	6339      	str	r1, [r7, #48]	; 0x30
 80087fa:	4649      	mov	r1, r9
 80087fc:	414b      	adcs	r3, r1
 80087fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008800:	f04f 0200 	mov.w	r2, #0
 8008804:	f04f 0300 	mov.w	r3, #0
 8008808:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800880c:	4659      	mov	r1, fp
 800880e:	00cb      	lsls	r3, r1, #3
 8008810:	4651      	mov	r1, sl
 8008812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008816:	4651      	mov	r1, sl
 8008818:	00ca      	lsls	r2, r1, #3
 800881a:	4610      	mov	r0, r2
 800881c:	4619      	mov	r1, r3
 800881e:	4603      	mov	r3, r0
 8008820:	4642      	mov	r2, r8
 8008822:	189b      	adds	r3, r3, r2
 8008824:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008828:	464b      	mov	r3, r9
 800882a:	460a      	mov	r2, r1
 800882c:	eb42 0303 	adc.w	r3, r2, r3
 8008830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008840:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008844:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008848:	460b      	mov	r3, r1
 800884a:	18db      	adds	r3, r3, r3
 800884c:	62bb      	str	r3, [r7, #40]	; 0x28
 800884e:	4613      	mov	r3, r2
 8008850:	eb42 0303 	adc.w	r3, r2, r3
 8008854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008856:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800885a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800885e:	f7f8 fa13 	bl	8000c88 <__aeabi_uldivmod>
 8008862:	4602      	mov	r2, r0
 8008864:	460b      	mov	r3, r1
 8008866:	4b0d      	ldr	r3, [pc, #52]	; (800889c <UART_SetConfig+0x2d4>)
 8008868:	fba3 1302 	umull	r1, r3, r3, r2
 800886c:	095b      	lsrs	r3, r3, #5
 800886e:	2164      	movs	r1, #100	; 0x64
 8008870:	fb01 f303 	mul.w	r3, r1, r3
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	3332      	adds	r3, #50	; 0x32
 800887a:	4a08      	ldr	r2, [pc, #32]	; (800889c <UART_SetConfig+0x2d4>)
 800887c:	fba2 2303 	umull	r2, r3, r2, r3
 8008880:	095b      	lsrs	r3, r3, #5
 8008882:	f003 0207 	and.w	r2, r3, #7
 8008886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4422      	add	r2, r4
 800888e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008890:	e105      	b.n	8008a9e <UART_SetConfig+0x4d6>
 8008892:	bf00      	nop
 8008894:	40011000 	.word	0x40011000
 8008898:	40011400 	.word	0x40011400
 800889c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80088a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088a4:	2200      	movs	r2, #0
 80088a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80088aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80088ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80088b2:	4642      	mov	r2, r8
 80088b4:	464b      	mov	r3, r9
 80088b6:	1891      	adds	r1, r2, r2
 80088b8:	6239      	str	r1, [r7, #32]
 80088ba:	415b      	adcs	r3, r3
 80088bc:	627b      	str	r3, [r7, #36]	; 0x24
 80088be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80088c2:	4641      	mov	r1, r8
 80088c4:	1854      	adds	r4, r2, r1
 80088c6:	4649      	mov	r1, r9
 80088c8:	eb43 0501 	adc.w	r5, r3, r1
 80088cc:	f04f 0200 	mov.w	r2, #0
 80088d0:	f04f 0300 	mov.w	r3, #0
 80088d4:	00eb      	lsls	r3, r5, #3
 80088d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80088da:	00e2      	lsls	r2, r4, #3
 80088dc:	4614      	mov	r4, r2
 80088de:	461d      	mov	r5, r3
 80088e0:	4643      	mov	r3, r8
 80088e2:	18e3      	adds	r3, r4, r3
 80088e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80088e8:	464b      	mov	r3, r9
 80088ea:	eb45 0303 	adc.w	r3, r5, r3
 80088ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80088fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008902:	f04f 0200 	mov.w	r2, #0
 8008906:	f04f 0300 	mov.w	r3, #0
 800890a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800890e:	4629      	mov	r1, r5
 8008910:	008b      	lsls	r3, r1, #2
 8008912:	4621      	mov	r1, r4
 8008914:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008918:	4621      	mov	r1, r4
 800891a:	008a      	lsls	r2, r1, #2
 800891c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008920:	f7f8 f9b2 	bl	8000c88 <__aeabi_uldivmod>
 8008924:	4602      	mov	r2, r0
 8008926:	460b      	mov	r3, r1
 8008928:	4b60      	ldr	r3, [pc, #384]	; (8008aac <UART_SetConfig+0x4e4>)
 800892a:	fba3 2302 	umull	r2, r3, r3, r2
 800892e:	095b      	lsrs	r3, r3, #5
 8008930:	011c      	lsls	r4, r3, #4
 8008932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008936:	2200      	movs	r2, #0
 8008938:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800893c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008940:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008944:	4642      	mov	r2, r8
 8008946:	464b      	mov	r3, r9
 8008948:	1891      	adds	r1, r2, r2
 800894a:	61b9      	str	r1, [r7, #24]
 800894c:	415b      	adcs	r3, r3
 800894e:	61fb      	str	r3, [r7, #28]
 8008950:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008954:	4641      	mov	r1, r8
 8008956:	1851      	adds	r1, r2, r1
 8008958:	6139      	str	r1, [r7, #16]
 800895a:	4649      	mov	r1, r9
 800895c:	414b      	adcs	r3, r1
 800895e:	617b      	str	r3, [r7, #20]
 8008960:	f04f 0200 	mov.w	r2, #0
 8008964:	f04f 0300 	mov.w	r3, #0
 8008968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800896c:	4659      	mov	r1, fp
 800896e:	00cb      	lsls	r3, r1, #3
 8008970:	4651      	mov	r1, sl
 8008972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008976:	4651      	mov	r1, sl
 8008978:	00ca      	lsls	r2, r1, #3
 800897a:	4610      	mov	r0, r2
 800897c:	4619      	mov	r1, r3
 800897e:	4603      	mov	r3, r0
 8008980:	4642      	mov	r2, r8
 8008982:	189b      	adds	r3, r3, r2
 8008984:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008988:	464b      	mov	r3, r9
 800898a:	460a      	mov	r2, r1
 800898c:	eb42 0303 	adc.w	r3, r2, r3
 8008990:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	67bb      	str	r3, [r7, #120]	; 0x78
 800899e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80089a0:	f04f 0200 	mov.w	r2, #0
 80089a4:	f04f 0300 	mov.w	r3, #0
 80089a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80089ac:	4649      	mov	r1, r9
 80089ae:	008b      	lsls	r3, r1, #2
 80089b0:	4641      	mov	r1, r8
 80089b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089b6:	4641      	mov	r1, r8
 80089b8:	008a      	lsls	r2, r1, #2
 80089ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80089be:	f7f8 f963 	bl	8000c88 <__aeabi_uldivmod>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4b39      	ldr	r3, [pc, #228]	; (8008aac <UART_SetConfig+0x4e4>)
 80089c8:	fba3 1302 	umull	r1, r3, r3, r2
 80089cc:	095b      	lsrs	r3, r3, #5
 80089ce:	2164      	movs	r1, #100	; 0x64
 80089d0:	fb01 f303 	mul.w	r3, r1, r3
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	011b      	lsls	r3, r3, #4
 80089d8:	3332      	adds	r3, #50	; 0x32
 80089da:	4a34      	ldr	r2, [pc, #208]	; (8008aac <UART_SetConfig+0x4e4>)
 80089dc:	fba2 2303 	umull	r2, r3, r2, r3
 80089e0:	095b      	lsrs	r3, r3, #5
 80089e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089e6:	441c      	add	r4, r3
 80089e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089ec:	2200      	movs	r2, #0
 80089ee:	673b      	str	r3, [r7, #112]	; 0x70
 80089f0:	677a      	str	r2, [r7, #116]	; 0x74
 80089f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80089f6:	4642      	mov	r2, r8
 80089f8:	464b      	mov	r3, r9
 80089fa:	1891      	adds	r1, r2, r2
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	415b      	adcs	r3, r3
 8008a00:	60fb      	str	r3, [r7, #12]
 8008a02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a06:	4641      	mov	r1, r8
 8008a08:	1851      	adds	r1, r2, r1
 8008a0a:	6039      	str	r1, [r7, #0]
 8008a0c:	4649      	mov	r1, r9
 8008a0e:	414b      	adcs	r3, r1
 8008a10:	607b      	str	r3, [r7, #4]
 8008a12:	f04f 0200 	mov.w	r2, #0
 8008a16:	f04f 0300 	mov.w	r3, #0
 8008a1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008a1e:	4659      	mov	r1, fp
 8008a20:	00cb      	lsls	r3, r1, #3
 8008a22:	4651      	mov	r1, sl
 8008a24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a28:	4651      	mov	r1, sl
 8008a2a:	00ca      	lsls	r2, r1, #3
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	4619      	mov	r1, r3
 8008a30:	4603      	mov	r3, r0
 8008a32:	4642      	mov	r2, r8
 8008a34:	189b      	adds	r3, r3, r2
 8008a36:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a38:	464b      	mov	r3, r9
 8008a3a:	460a      	mov	r2, r1
 8008a3c:	eb42 0303 	adc.w	r3, r2, r3
 8008a40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	663b      	str	r3, [r7, #96]	; 0x60
 8008a4c:	667a      	str	r2, [r7, #100]	; 0x64
 8008a4e:	f04f 0200 	mov.w	r2, #0
 8008a52:	f04f 0300 	mov.w	r3, #0
 8008a56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008a5a:	4649      	mov	r1, r9
 8008a5c:	008b      	lsls	r3, r1, #2
 8008a5e:	4641      	mov	r1, r8
 8008a60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a64:	4641      	mov	r1, r8
 8008a66:	008a      	lsls	r2, r1, #2
 8008a68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008a6c:	f7f8 f90c 	bl	8000c88 <__aeabi_uldivmod>
 8008a70:	4602      	mov	r2, r0
 8008a72:	460b      	mov	r3, r1
 8008a74:	4b0d      	ldr	r3, [pc, #52]	; (8008aac <UART_SetConfig+0x4e4>)
 8008a76:	fba3 1302 	umull	r1, r3, r3, r2
 8008a7a:	095b      	lsrs	r3, r3, #5
 8008a7c:	2164      	movs	r1, #100	; 0x64
 8008a7e:	fb01 f303 	mul.w	r3, r1, r3
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	011b      	lsls	r3, r3, #4
 8008a86:	3332      	adds	r3, #50	; 0x32
 8008a88:	4a08      	ldr	r2, [pc, #32]	; (8008aac <UART_SetConfig+0x4e4>)
 8008a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a8e:	095b      	lsrs	r3, r3, #5
 8008a90:	f003 020f 	and.w	r2, r3, #15
 8008a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4422      	add	r2, r4
 8008a9c:	609a      	str	r2, [r3, #8]
}
 8008a9e:	bf00      	nop
 8008aa0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008aaa:	bf00      	nop
 8008aac:	51eb851f 	.word	0x51eb851f

08008ab0 <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b088      	sub	sp, #32
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	71fb      	strb	r3, [r7, #7]
 8008aba:	460b      	mov	r3, r1
 8008abc:	71bb      	strb	r3, [r7, #6]
 8008abe:	4613      	mov	r3, r2
 8008ac0:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8008ac2:	797b      	ldrb	r3, [r7, #5]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d901      	bls.n	8008acc <tmc_fillCRC8Table+0x1c>
		return 0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	e09e      	b.n	8008c0a <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 8008acc:	797a      	ldrb	r2, [r7, #5]
 8008ace:	4951      	ldr	r1, [pc, #324]	; (8008c14 <tmc_fillCRC8Table+0x164>)
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	01db      	lsls	r3, r3, #7
 8008ad4:	4413      	add	r3, r2
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	440b      	add	r3, r1
 8008ada:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008ade:	79fa      	ldrb	r2, [r7, #7]
 8008ae0:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 8008ae2:	797a      	ldrb	r2, [r7, #5]
 8008ae4:	494b      	ldr	r1, [pc, #300]	; (8008c14 <tmc_fillCRC8Table+0x164>)
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	01db      	lsls	r3, r3, #7
 8008aea:	4413      	add	r3, r2
 8008aec:	005b      	lsls	r3, r3, #1
 8008aee:	440b      	add	r3, r1
 8008af0:	f203 1301 	addw	r3, r3, #257	; 0x101
 8008af4:	79ba      	ldrb	r2, [r7, #6]
 8008af6:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 8008af8:	797a      	ldrb	r2, [r7, #5]
 8008afa:	4613      	mov	r3, r2
 8008afc:	01db      	lsls	r3, r3, #7
 8008afe:	4413      	add	r3, r2
 8008b00:	005b      	lsls	r3, r3, #1
 8008b02:	4a44      	ldr	r2, [pc, #272]	; (8008c14 <tmc_fillCRC8Table+0x164>)
 8008b04:	4413      	add	r3, r2
 8008b06:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 8008b08:	79fb      	ldrb	r3, [r7, #7]
 8008b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b0e:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8008b10:	4b41      	ldr	r3, [pc, #260]	; (8008c18 <tmc_fillCRC8Table+0x168>)
 8008b12:	617b      	str	r3, [r7, #20]
 8008b14:	e074      	b.n	8008c00 <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 8008b16:	79bb      	ldrb	r3, [r7, #6]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d004      	beq.n	8008b26 <tmc_fillCRC8Table+0x76>
 8008b1c:	6978      	ldr	r0, [r7, #20]
 8008b1e:	f000 f8f7 	bl	8008d10 <flipBitsInBytes>
 8008b22:	4603      	mov	r3, r0
 8008b24:	e000      	b.n	8008b28 <tmc_fillCRC8Table+0x78>
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	613b      	str	r3, [r7, #16]
 8008b2e:	e035      	b.n	8008b9c <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	0fdb      	lsrs	r3, r3, #31
 8008b34:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d001      	beq.n	8008b4a <tmc_fillCRC8Table+0x9a>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	e000      	b.n	8008b4c <tmc_fillCRC8Table+0x9c>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	69fa      	ldr	r2, [r7, #28]
 8008b4e:	4053      	eors	r3, r2
 8008b50:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d002      	beq.n	8008b62 <tmc_fillCRC8Table+0xb2>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	021b      	lsls	r3, r3, #8
 8008b60:	e000      	b.n	8008b64 <tmc_fillCRC8Table+0xb4>
 8008b62:	2300      	movs	r3, #0
 8008b64:	69fa      	ldr	r2, [r7, #28]
 8008b66:	4053      	eors	r3, r2
 8008b68:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d002      	beq.n	8008b7a <tmc_fillCRC8Table+0xca>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	041b      	lsls	r3, r3, #16
 8008b78:	e000      	b.n	8008b7c <tmc_fillCRC8Table+0xcc>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	69fa      	ldr	r2, [r7, #28]
 8008b7e:	4053      	eors	r3, r2
 8008b80:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 8008b82:	7afb      	ldrb	r3, [r7, #11]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <tmc_fillCRC8Table+0xde>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	061b      	lsls	r3, r3, #24
 8008b8c:	e000      	b.n	8008b90 <tmc_fillCRC8Table+0xe0>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	69fa      	ldr	r2, [r7, #28]
 8008b92:	4053      	eors	r3, r2
 8008b94:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	613b      	str	r3, [r7, #16]
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	2b07      	cmp	r3, #7
 8008ba0:	ddc6      	ble.n	8008b30 <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 8008ba2:	79bb      	ldrb	r3, [r7, #6]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d004      	beq.n	8008bb2 <tmc_fillCRC8Table+0x102>
 8008ba8:	69f8      	ldr	r0, [r7, #28]
 8008baa:	f000 f8b1 	bl	8008d10 <flipBitsInBytes>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	e000      	b.n	8008bb4 <tmc_fillCRC8Table+0x104>
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	1c5a      	adds	r2, r3, #1
 8008bba:	61ba      	str	r2, [r7, #24]
 8008bbc:	69fa      	ldr	r2, [r7, #28]
 8008bbe:	b2d2      	uxtb	r2, r2
 8008bc0:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	0a1b      	lsrs	r3, r3, #8
 8008bc6:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	1c5a      	adds	r2, r3, #1
 8008bcc:	61ba      	str	r2, [r7, #24]
 8008bce:	69fa      	ldr	r2, [r7, #28]
 8008bd0:	b2d2      	uxtb	r2, r2
 8008bd2:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	0a1b      	lsrs	r3, r3, #8
 8008bd8:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	1c5a      	adds	r2, r3, #1
 8008bde:	61ba      	str	r2, [r7, #24]
 8008be0:	69fa      	ldr	r2, [r7, #28]
 8008be2:	b2d2      	uxtb	r2, r2
 8008be4:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	0a1b      	lsrs	r3, r3, #8
 8008bea:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	1c5a      	adds	r2, r3, #1
 8008bf0:	61ba      	str	r2, [r7, #24]
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	b2d2      	uxtb	r2, r2
 8008bf6:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 8008bfe:	617b      	str	r3, [r7, #20]
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	4a06      	ldr	r2, [pc, #24]	; (8008c1c <tmc_fillCRC8Table+0x16c>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d186      	bne.n	8008b16 <tmc_fillCRC8Table+0x66>
	}

	return 1;
 8008c08:	2301      	movs	r3, #1
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3720      	adds	r7, #32
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	20000940 	.word	0x20000940
 8008c18:	03020100 	.word	0x03020100
 8008c1c:	04030200 	.word	0x04030200

08008c20 <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8008c32:	79fb      	ldrb	r3, [r7, #7]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d901      	bls.n	8008c3c <tmc_CRC8+0x1c>
		return 0;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	e02c      	b.n	8008c96 <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 8008c3c:	79fa      	ldrb	r2, [r7, #7]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	01db      	lsls	r3, r3, #7
 8008c42:	4413      	add	r3, r2
 8008c44:	005b      	lsls	r3, r3, #1
 8008c46:	4a16      	ldr	r2, [pc, #88]	; (8008ca0 <tmc_CRC8+0x80>)
 8008c48:	4413      	add	r3, r2
 8008c4a:	613b      	str	r3, [r7, #16]

	while(bytes--)
 8008c4c:	e00b      	b.n	8008c66 <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	1c5a      	adds	r2, r3, #1
 8008c52:	60fa      	str	r2, [r7, #12]
 8008c54:	781a      	ldrb	r2, [r3, #0]
 8008c56:	7dfb      	ldrb	r3, [r7, #23]
 8008c58:	4053      	eors	r3, r2
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	4413      	add	r3, r2
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	1e5a      	subs	r2, r3, #1
 8008c6a:	60ba      	str	r2, [r7, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1ee      	bne.n	8008c4e <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 8008c70:	79fa      	ldrb	r2, [r7, #7]
 8008c72:	490b      	ldr	r1, [pc, #44]	; (8008ca0 <tmc_CRC8+0x80>)
 8008c74:	4613      	mov	r3, r2
 8008c76:	01db      	lsls	r3, r3, #7
 8008c78:	4413      	add	r3, r2
 8008c7a:	005b      	lsls	r3, r3, #1
 8008c7c:	440b      	add	r3, r1
 8008c7e:	f203 1301 	addw	r3, r3, #257	; 0x101
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d005      	beq.n	8008c94 <tmc_CRC8+0x74>
 8008c88:	7dfb      	ldrb	r3, [r7, #23]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f000 f80a 	bl	8008ca4 <flipByte>
 8008c90:	4603      	mov	r3, r0
 8008c92:	e000      	b.n	8008c96 <tmc_CRC8+0x76>
 8008c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3718      	adds	r7, #24
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	20000940 	.word	0x20000940

08008ca4 <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	4603      	mov	r3, r0
 8008cac:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 8008cae:	79fb      	ldrb	r3, [r7, #7]
 8008cb0:	085b      	lsrs	r3, r3, #1
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	b25b      	sxtb	r3, r3
 8008cb6:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8008cba:	b25a      	sxtb	r2, r3
 8008cbc:	79fb      	ldrb	r3, [r7, #7]
 8008cbe:	005b      	lsls	r3, r3, #1
 8008cc0:	b25b      	sxtb	r3, r3
 8008cc2:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8008cc6:	b25b      	sxtb	r3, r3
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	b25b      	sxtb	r3, r3
 8008ccc:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 8008cce:	79fb      	ldrb	r3, [r7, #7]
 8008cd0:	089b      	lsrs	r3, r3, #2
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	b25b      	sxtb	r3, r3
 8008cd6:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8008cda:	b25a      	sxtb	r2, r3
 8008cdc:	79fb      	ldrb	r3, [r7, #7]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	b25b      	sxtb	r3, r3
 8008ce2:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8008ce6:	b25b      	sxtb	r3, r3
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	b25b      	sxtb	r3, r3
 8008cec:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 8008cee:	79fb      	ldrb	r3, [r7, #7]
 8008cf0:	091b      	lsrs	r3, r3, #4
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	b25a      	sxtb	r2, r3
 8008cf6:	79fb      	ldrb	r3, [r7, #7]
 8008cf8:	011b      	lsls	r3, r3, #4
 8008cfa:	b25b      	sxtb	r3, r3
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	b25b      	sxtb	r3, r3
 8008d00:	71fb      	strb	r3, [r7, #7]

	return value;
 8008d02:	79fb      	ldrb	r3, [r7, #7]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	085b      	lsrs	r3, r3, #1
 8008d1c:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	005b      	lsls	r3, r3, #1
 8008d24:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	089b      	lsrs	r3, r3, #2
 8008d30:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	091b      	lsrs	r3, r3, #4
 8008d44:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	011b      	lsls	r3, r3, #4
 8008d4c:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8008d50:	4313      	orrs	r3, r2
 8008d52:	607b      	str	r3, [r7, #4]

	return value;
 8008d54:	687b      	ldr	r3, [r7, #4]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	370c      	adds	r7, #12
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b086      	sub	sp, #24
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	60f8      	str	r0, [r7, #12]
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	607a      	str	r2, [r7, #4]
 8008d6e:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];

	data[0] = 0x05;
 8008d70:	2305      	movs	r3, #5
 8008d72:	743b      	strb	r3, [r7, #16]
	data[1] = tmc2209->slaveAddress;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8008d7a:	747b      	strb	r3, [r7, #17]
	data[2] = address | TMC_WRITE_BIT;
 8008d7c:	7afb      	ldrb	r3, [r7, #11]
 8008d7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	74bb      	strb	r3, [r7, #18]
	data[3] = (value >> 24) & 0xFF;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	0e1b      	lsrs	r3, r3, #24
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	74fb      	strb	r3, [r7, #19]
	data[4] = (value >> 16) & 0xFF;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	141b      	asrs	r3, r3, #16
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	753b      	strb	r3, [r7, #20]
	data[5] = (value >> 8 ) & 0xFF;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	121b      	asrs	r3, r3, #8
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	757b      	strb	r3, [r7, #21]
	data[6] = (value      ) & 0xFF;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	75bb      	strb	r3, [r7, #22]
	data[7] = tmc2209_CRC8(data, 7);
 8008da4:	f107 0310 	add.w	r3, r7, #16
 8008da8:	2107      	movs	r1, #7
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7f9 f974 	bl	8002098 <tmc2209_CRC8>
 8008db0:	4603      	mov	r3, r0
 8008db2:	75fb      	strb	r3, [r7, #23]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8008dbc:	f107 0110 	add.w	r1, r7, #16
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	2208      	movs	r2, #8
 8008dc4:	f7f9 f940 	bl	8002048 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
 8008dc8:	7afb      	ldrb	r3, [r7, #11]
 8008dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dce:	72fb      	strb	r3, [r7, #11]
	tmc2209->config->shadowRegister[address] = value;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	7afb      	ldrb	r3, [r7, #11]
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4413      	add	r3, r2
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	605a      	str	r2, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
 8008dde:	7afb      	ldrb	r3, [r7, #11]
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	4413      	add	r3, r2
 8008de4:	f893 2204 	ldrb.w	r2, [r3, #516]	; 0x204
 8008de8:	7afb      	ldrb	r3, [r7, #11]
 8008dea:	f042 0208 	orr.w	r2, r2, #8
 8008dee:	b2d1      	uxtb	r1, r2
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	4413      	add	r3, r2
 8008df4:	460a      	mov	r2, r1
 8008df6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 8008dfa:	bf00      	nop
 8008dfc:	3718      	adds	r7, #24
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 8008e02:	b590      	push	{r4, r7, lr}
 8008e04:	b085      	sub	sp, #20
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60bb      	str	r3, [r7, #8]
 8008e12:	2300      	movs	r3, #0
 8008e14:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 8008e16:	78fb      	ldrb	r3, [r7, #3]
 8008e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e1c:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 8008e1e:	78fb      	ldrb	r3, [r7, #3]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	4413      	add	r3, r2
 8008e24:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d106      	bne.n	8008e3e <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	78fb      	ldrb	r3, [r7, #3]
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	4413      	add	r3, r2
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	e03f      	b.n	8008ebe <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 8008e3e:	2305      	movs	r3, #5
 8008e40:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8008e48:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 8008e4a:	78fb      	ldrb	r3, [r7, #3]
 8008e4c:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 8008e4e:	f107 0308 	add.w	r3, r7, #8
 8008e52:	2103      	movs	r1, #3
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7f9 f91f 	bl	8002098 <tmc2209_CRC8>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8008e66:	f107 0108 	add.w	r1, r7, #8
 8008e6a:	2308      	movs	r3, #8
 8008e6c:	2204      	movs	r2, #4
 8008e6e:	f7f9 f8eb 	bl	8002048 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 8008e72:	7a3b      	ldrb	r3, [r7, #8]
 8008e74:	2b05      	cmp	r3, #5
 8008e76:	d001      	beq.n	8008e7c <tmc2209_readInt+0x7a>
		return 0;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	e020      	b.n	8008ebe <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 8008e7c:	7a7b      	ldrb	r3, [r7, #9]
 8008e7e:	2bff      	cmp	r3, #255	; 0xff
 8008e80:	d001      	beq.n	8008e86 <tmc2209_readInt+0x84>
		return 0;
 8008e82:	2300      	movs	r3, #0
 8008e84:	e01b      	b.n	8008ebe <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 8008e86:	7abb      	ldrb	r3, [r7, #10]
 8008e88:	78fa      	ldrb	r2, [r7, #3]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d001      	beq.n	8008e92 <tmc2209_readInt+0x90>
		return 0;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	e015      	b.n	8008ebe <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 8008e92:	7bfc      	ldrb	r4, [r7, #15]
 8008e94:	f107 0308 	add.w	r3, r7, #8
 8008e98:	2107      	movs	r1, #7
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7f9 f8fc 	bl	8002098 <tmc2209_CRC8>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	429c      	cmp	r4, r3
 8008ea4:	d001      	beq.n	8008eaa <tmc2209_readInt+0xa8>
		return 0;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	e009      	b.n	8008ebe <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 8008eaa:	7afb      	ldrb	r3, [r7, #11]
 8008eac:	061a      	lsls	r2, r3, #24
 8008eae:	7b3b      	ldrb	r3, [r7, #12]
 8008eb0:	041b      	lsls	r3, r3, #16
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	7b7a      	ldrb	r2, [r7, #13]
 8008eb6:	0212      	lsls	r2, r2, #8
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	7bba      	ldrb	r2, [r7, #14]
 8008ebc:	4313      	orrs	r3, r2
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd90      	pop	{r4, r7, pc}
	...

08008ec8 <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b087      	sub	sp, #28
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	607b      	str	r3, [r7, #4]
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	72fb      	strb	r3, [r7, #11]
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	7aba      	ldrb	r2, [r7, #10]
 8008ede:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	7afa      	ldrb	r2, [r7, #11]
 8008ef8:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2200      	movs	r2, #0
 8008f02:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	617b      	str	r3, [r7, #20]
 8008f10:	e017      	b.n	8008f42 <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 8008f12:	4a11      	ldr	r2, [pc, #68]	; (8008f58 <tmc2209_init+0x90>)
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	4413      	add	r3, r2
 8008f18:	7819      	ldrb	r1, [r3, #0]
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008f24:	460a      	mov	r2, r1
 8008f26:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	6a3a      	ldr	r2, [r7, #32]
 8008f2e:	4413      	add	r3, r2
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	68f9      	ldr	r1, [r7, #12]
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	440b      	add	r3, r1
 8008f3a:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	617b      	str	r3, [r7, #20]
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	2b7f      	cmp	r3, #127	; 0x7f
 8008f46:	d9e4      	bls.n	8008f12 <tmc2209_init+0x4a>
	}
}
 8008f48:	bf00      	nop
 8008f4a:	bf00      	nop
 8008f4c:	371c      	adds	r7, #28
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	0800dee0 	.word	0x0800dee0

08008f5c <writeConfiguration>:

static void writeConfiguration(TMC2209TypeDef *tmc2209)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = &tmc2209->config->configIndex;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	60bb      	str	r3, [r7, #8]
	const int32_t *settings;

	if(tmc2209->config->state == CONFIG_RESTORE)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d131      	bne.n	8008fda <writeConfiguration+0x7e>
	{
		settings = tmc2209->config->shadowRegister;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3304      	adds	r3, #4
 8008f7c:	60fb      	str	r3, [r7, #12]
		// Find the next restorable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8008f7e:	e005      	b.n	8008f8c <writeConfiguration+0x30>
		{
			(*ptr)++;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	3301      	adds	r3, #1
 8008f86:	b2da      	uxtb	r2, r3
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	b25b      	sxtb	r3, r3
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	db3b      	blt.n	800900e <writeConfiguration+0xb2>
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8008fa4:	f003 0302 	and.w	r3, r3, #2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d0e9      	beq.n	8008f80 <writeConfiguration+0x24>
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8008fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d025      	beq.n	800900e <writeConfiguration+0xb2>
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4413      	add	r3, r2
 8008fcc:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8008fd0:	f003 0308 	and.w	r3, r3, #8
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d0d3      	beq.n	8008f80 <writeConfiguration+0x24>
 8008fd8:	e019      	b.n	800900e <writeConfiguration+0xb2>
		}
	}
	else
	{
		settings = tmc2209->registerResetState;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	3304      	adds	r3, #4
 8008fde:	60fb      	str	r3, [r7, #12]
		// Find the next resettable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8008fe0:	e005      	b.n	8008fee <writeConfiguration+0x92>
		{
			(*ptr)++;
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	b2da      	uxtb	r2, r3
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	b25b      	sxtb	r3, r3
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	db0a      	blt.n	800900e <writeConfiguration+0xb2>
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4413      	add	r3, r2
 8009002:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8009006:	f003 0342 	and.w	r3, r3, #66	; 0x42
 800900a:	2b02      	cmp	r3, #2
 800900c:	d1e9      	bne.n	8008fe2 <writeConfiguration+0x86>
		}
	}

	if(*ptr < TMC2209_REGISTER_COUNT)
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	b25b      	sxtb	r3, r3
 8009014:	2b00      	cmp	r3, #0
 8009016:	db12      	blt.n	800903e <writeConfiguration+0xe2>
	{
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	7819      	ldrb	r1, [r3, #0]
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	4413      	add	r3, r2
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	461a      	mov	r2, r3
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f7ff fe99 	bl	8008d62 <tmc2209_writeInt>
		(*ptr)++;
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	3301      	adds	r3, #1
 8009036:	b2da      	uxtb	r2, r3
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	701a      	strb	r2, [r3, #0]
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
		}

		tmc2209->config->state = CONFIG_READY;
	}
}
 800903c:	e013      	b.n	8009066 <writeConfiguration+0x10a>
		if(tmc2209->config->callback)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009046:	2b00      	cmp	r3, #0
 8009048:	d009      	beq.n	800905e <writeConfiguration+0x102>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	6812      	ldr	r2, [r2, #0]
 8009056:	7812      	ldrb	r2, [r2, #0]
 8009058:	4611      	mov	r1, r2
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2200      	movs	r2, #0
 8009064:	701a      	strb	r2, [r3, #0]
}
 8009066:	bf00      	nop
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <tmc2209_periodicJob>:

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b082      	sub	sp, #8
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
 8009076:	6039      	str	r1, [r7, #0]
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d003      	beq.n	800908a <tmc2209_periodicJob+0x1c>
	{
		writeConfiguration(tmc2209);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f7ff ff6a 	bl	8008f5c <writeConfiguration>
		return;
 8009088:	bf00      	nop
	}
}
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <tmc2209_reset+0x16>
		return false;
 80090a2:	2300      	movs	r3, #0
 80090a4:	e028      	b.n	80090f8 <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80090a6:	2300      	movs	r3, #0
 80090a8:	60fb      	str	r3, [r7, #12]
 80090aa:	e019      	b.n	80090e0 <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	4413      	add	r3, r2
 80090b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	f023 0308 	bic.w	r3, r3, #8
 80090bc:	b2d9      	uxtb	r1, r3
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4413      	add	r3, r2
 80090c4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80090c8:	460a      	mov	r2, r1
 80090ca:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	4413      	add	r3, r2
 80090d6:	2200      	movs	r2, #0
 80090d8:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3301      	adds	r3, #1
 80090de:	60fb      	str	r3, [r7, #12]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2b7f      	cmp	r3, #127	; 0x7f
 80090e4:	d9e2      	bls.n	80090ac <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2201      	movs	r2, #1
 80090ec:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2200      	movs	r2, #0
 80090f4:	705a      	strb	r2, [r3, #1]

	return true;
 80090f6:	2301      	movs	r3, #1
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3714      	adds	r7, #20
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d001      	beq.n	800911a <tmc2209_restore+0x16>
		return false;
 8009116:	2300      	movs	r3, #0
 8009118:	e008      	b.n	800912c <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2202      	movs	r2, #2
 8009120:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2200      	movs	r2, #0
 8009128:	705a      	strb	r2, [r3, #1]

	return true;
 800912a:	2301      	movs	r3, #1
}
 800912c:	4618      	mov	r0, r3
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <__errno>:
 8009138:	4b01      	ldr	r3, [pc, #4]	; (8009140 <__errno+0x8>)
 800913a:	6818      	ldr	r0, [r3, #0]
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	20000018 	.word	0x20000018

08009144 <__libc_init_array>:
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	4d0d      	ldr	r5, [pc, #52]	; (800917c <__libc_init_array+0x38>)
 8009148:	4c0d      	ldr	r4, [pc, #52]	; (8009180 <__libc_init_array+0x3c>)
 800914a:	1b64      	subs	r4, r4, r5
 800914c:	10a4      	asrs	r4, r4, #2
 800914e:	2600      	movs	r6, #0
 8009150:	42a6      	cmp	r6, r4
 8009152:	d109      	bne.n	8009168 <__libc_init_array+0x24>
 8009154:	4d0b      	ldr	r5, [pc, #44]	; (8009184 <__libc_init_array+0x40>)
 8009156:	4c0c      	ldr	r4, [pc, #48]	; (8009188 <__libc_init_array+0x44>)
 8009158:	f004 fd3c 	bl	800dbd4 <_init>
 800915c:	1b64      	subs	r4, r4, r5
 800915e:	10a4      	asrs	r4, r4, #2
 8009160:	2600      	movs	r6, #0
 8009162:	42a6      	cmp	r6, r4
 8009164:	d105      	bne.n	8009172 <__libc_init_array+0x2e>
 8009166:	bd70      	pop	{r4, r5, r6, pc}
 8009168:	f855 3b04 	ldr.w	r3, [r5], #4
 800916c:	4798      	blx	r3
 800916e:	3601      	adds	r6, #1
 8009170:	e7ee      	b.n	8009150 <__libc_init_array+0xc>
 8009172:	f855 3b04 	ldr.w	r3, [r5], #4
 8009176:	4798      	blx	r3
 8009178:	3601      	adds	r6, #1
 800917a:	e7f2      	b.n	8009162 <__libc_init_array+0x1e>
 800917c:	0800e590 	.word	0x0800e590
 8009180:	0800e590 	.word	0x0800e590
 8009184:	0800e590 	.word	0x0800e590
 8009188:	0800e594 	.word	0x0800e594

0800918c <memset>:
 800918c:	4402      	add	r2, r0
 800918e:	4603      	mov	r3, r0
 8009190:	4293      	cmp	r3, r2
 8009192:	d100      	bne.n	8009196 <memset+0xa>
 8009194:	4770      	bx	lr
 8009196:	f803 1b01 	strb.w	r1, [r3], #1
 800919a:	e7f9      	b.n	8009190 <memset+0x4>

0800919c <__cvt>:
 800919c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091a0:	ec55 4b10 	vmov	r4, r5, d0
 80091a4:	2d00      	cmp	r5, #0
 80091a6:	460e      	mov	r6, r1
 80091a8:	4619      	mov	r1, r3
 80091aa:	462b      	mov	r3, r5
 80091ac:	bfbb      	ittet	lt
 80091ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80091b2:	461d      	movlt	r5, r3
 80091b4:	2300      	movge	r3, #0
 80091b6:	232d      	movlt	r3, #45	; 0x2d
 80091b8:	700b      	strb	r3, [r1, #0]
 80091ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80091c0:	4691      	mov	r9, r2
 80091c2:	f023 0820 	bic.w	r8, r3, #32
 80091c6:	bfbc      	itt	lt
 80091c8:	4622      	movlt	r2, r4
 80091ca:	4614      	movlt	r4, r2
 80091cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80091d0:	d005      	beq.n	80091de <__cvt+0x42>
 80091d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80091d6:	d100      	bne.n	80091da <__cvt+0x3e>
 80091d8:	3601      	adds	r6, #1
 80091da:	2102      	movs	r1, #2
 80091dc:	e000      	b.n	80091e0 <__cvt+0x44>
 80091de:	2103      	movs	r1, #3
 80091e0:	ab03      	add	r3, sp, #12
 80091e2:	9301      	str	r3, [sp, #4]
 80091e4:	ab02      	add	r3, sp, #8
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	ec45 4b10 	vmov	d0, r4, r5
 80091ec:	4653      	mov	r3, sl
 80091ee:	4632      	mov	r2, r6
 80091f0:	f000 fee6 	bl	8009fc0 <_dtoa_r>
 80091f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80091f8:	4607      	mov	r7, r0
 80091fa:	d102      	bne.n	8009202 <__cvt+0x66>
 80091fc:	f019 0f01 	tst.w	r9, #1
 8009200:	d022      	beq.n	8009248 <__cvt+0xac>
 8009202:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009206:	eb07 0906 	add.w	r9, r7, r6
 800920a:	d110      	bne.n	800922e <__cvt+0x92>
 800920c:	783b      	ldrb	r3, [r7, #0]
 800920e:	2b30      	cmp	r3, #48	; 0x30
 8009210:	d10a      	bne.n	8009228 <__cvt+0x8c>
 8009212:	2200      	movs	r2, #0
 8009214:	2300      	movs	r3, #0
 8009216:	4620      	mov	r0, r4
 8009218:	4629      	mov	r1, r5
 800921a:	f7f7 fc75 	bl	8000b08 <__aeabi_dcmpeq>
 800921e:	b918      	cbnz	r0, 8009228 <__cvt+0x8c>
 8009220:	f1c6 0601 	rsb	r6, r6, #1
 8009224:	f8ca 6000 	str.w	r6, [sl]
 8009228:	f8da 3000 	ldr.w	r3, [sl]
 800922c:	4499      	add	r9, r3
 800922e:	2200      	movs	r2, #0
 8009230:	2300      	movs	r3, #0
 8009232:	4620      	mov	r0, r4
 8009234:	4629      	mov	r1, r5
 8009236:	f7f7 fc67 	bl	8000b08 <__aeabi_dcmpeq>
 800923a:	b108      	cbz	r0, 8009240 <__cvt+0xa4>
 800923c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009240:	2230      	movs	r2, #48	; 0x30
 8009242:	9b03      	ldr	r3, [sp, #12]
 8009244:	454b      	cmp	r3, r9
 8009246:	d307      	bcc.n	8009258 <__cvt+0xbc>
 8009248:	9b03      	ldr	r3, [sp, #12]
 800924a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800924c:	1bdb      	subs	r3, r3, r7
 800924e:	4638      	mov	r0, r7
 8009250:	6013      	str	r3, [r2, #0]
 8009252:	b004      	add	sp, #16
 8009254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009258:	1c59      	adds	r1, r3, #1
 800925a:	9103      	str	r1, [sp, #12]
 800925c:	701a      	strb	r2, [r3, #0]
 800925e:	e7f0      	b.n	8009242 <__cvt+0xa6>

08009260 <__exponent>:
 8009260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009262:	4603      	mov	r3, r0
 8009264:	2900      	cmp	r1, #0
 8009266:	bfb8      	it	lt
 8009268:	4249      	neglt	r1, r1
 800926a:	f803 2b02 	strb.w	r2, [r3], #2
 800926e:	bfb4      	ite	lt
 8009270:	222d      	movlt	r2, #45	; 0x2d
 8009272:	222b      	movge	r2, #43	; 0x2b
 8009274:	2909      	cmp	r1, #9
 8009276:	7042      	strb	r2, [r0, #1]
 8009278:	dd2a      	ble.n	80092d0 <__exponent+0x70>
 800927a:	f10d 0407 	add.w	r4, sp, #7
 800927e:	46a4      	mov	ip, r4
 8009280:	270a      	movs	r7, #10
 8009282:	46a6      	mov	lr, r4
 8009284:	460a      	mov	r2, r1
 8009286:	fb91 f6f7 	sdiv	r6, r1, r7
 800928a:	fb07 1516 	mls	r5, r7, r6, r1
 800928e:	3530      	adds	r5, #48	; 0x30
 8009290:	2a63      	cmp	r2, #99	; 0x63
 8009292:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009296:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800929a:	4631      	mov	r1, r6
 800929c:	dcf1      	bgt.n	8009282 <__exponent+0x22>
 800929e:	3130      	adds	r1, #48	; 0x30
 80092a0:	f1ae 0502 	sub.w	r5, lr, #2
 80092a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80092a8:	1c44      	adds	r4, r0, #1
 80092aa:	4629      	mov	r1, r5
 80092ac:	4561      	cmp	r1, ip
 80092ae:	d30a      	bcc.n	80092c6 <__exponent+0x66>
 80092b0:	f10d 0209 	add.w	r2, sp, #9
 80092b4:	eba2 020e 	sub.w	r2, r2, lr
 80092b8:	4565      	cmp	r5, ip
 80092ba:	bf88      	it	hi
 80092bc:	2200      	movhi	r2, #0
 80092be:	4413      	add	r3, r2
 80092c0:	1a18      	subs	r0, r3, r0
 80092c2:	b003      	add	sp, #12
 80092c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80092ce:	e7ed      	b.n	80092ac <__exponent+0x4c>
 80092d0:	2330      	movs	r3, #48	; 0x30
 80092d2:	3130      	adds	r1, #48	; 0x30
 80092d4:	7083      	strb	r3, [r0, #2]
 80092d6:	70c1      	strb	r1, [r0, #3]
 80092d8:	1d03      	adds	r3, r0, #4
 80092da:	e7f1      	b.n	80092c0 <__exponent+0x60>

080092dc <_printf_float>:
 80092dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e0:	ed2d 8b02 	vpush	{d8}
 80092e4:	b08d      	sub	sp, #52	; 0x34
 80092e6:	460c      	mov	r4, r1
 80092e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80092ec:	4616      	mov	r6, r2
 80092ee:	461f      	mov	r7, r3
 80092f0:	4605      	mov	r5, r0
 80092f2:	f001 fe0b 	bl	800af0c <_localeconv_r>
 80092f6:	f8d0 a000 	ldr.w	sl, [r0]
 80092fa:	4650      	mov	r0, sl
 80092fc:	f7f6 ff88 	bl	8000210 <strlen>
 8009300:	2300      	movs	r3, #0
 8009302:	930a      	str	r3, [sp, #40]	; 0x28
 8009304:	6823      	ldr	r3, [r4, #0]
 8009306:	9305      	str	r3, [sp, #20]
 8009308:	f8d8 3000 	ldr.w	r3, [r8]
 800930c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009310:	3307      	adds	r3, #7
 8009312:	f023 0307 	bic.w	r3, r3, #7
 8009316:	f103 0208 	add.w	r2, r3, #8
 800931a:	f8c8 2000 	str.w	r2, [r8]
 800931e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009322:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009326:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800932a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800932e:	9307      	str	r3, [sp, #28]
 8009330:	f8cd 8018 	str.w	r8, [sp, #24]
 8009334:	ee08 0a10 	vmov	s16, r0
 8009338:	4b9f      	ldr	r3, [pc, #636]	; (80095b8 <_printf_float+0x2dc>)
 800933a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800933e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009342:	f7f7 fc13 	bl	8000b6c <__aeabi_dcmpun>
 8009346:	bb88      	cbnz	r0, 80093ac <_printf_float+0xd0>
 8009348:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800934c:	4b9a      	ldr	r3, [pc, #616]	; (80095b8 <_printf_float+0x2dc>)
 800934e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009352:	f7f7 fbed 	bl	8000b30 <__aeabi_dcmple>
 8009356:	bb48      	cbnz	r0, 80093ac <_printf_float+0xd0>
 8009358:	2200      	movs	r2, #0
 800935a:	2300      	movs	r3, #0
 800935c:	4640      	mov	r0, r8
 800935e:	4649      	mov	r1, r9
 8009360:	f7f7 fbdc 	bl	8000b1c <__aeabi_dcmplt>
 8009364:	b110      	cbz	r0, 800936c <_printf_float+0x90>
 8009366:	232d      	movs	r3, #45	; 0x2d
 8009368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800936c:	4b93      	ldr	r3, [pc, #588]	; (80095bc <_printf_float+0x2e0>)
 800936e:	4894      	ldr	r0, [pc, #592]	; (80095c0 <_printf_float+0x2e4>)
 8009370:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009374:	bf94      	ite	ls
 8009376:	4698      	movls	r8, r3
 8009378:	4680      	movhi	r8, r0
 800937a:	2303      	movs	r3, #3
 800937c:	6123      	str	r3, [r4, #16]
 800937e:	9b05      	ldr	r3, [sp, #20]
 8009380:	f023 0204 	bic.w	r2, r3, #4
 8009384:	6022      	str	r2, [r4, #0]
 8009386:	f04f 0900 	mov.w	r9, #0
 800938a:	9700      	str	r7, [sp, #0]
 800938c:	4633      	mov	r3, r6
 800938e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009390:	4621      	mov	r1, r4
 8009392:	4628      	mov	r0, r5
 8009394:	f000 f9d8 	bl	8009748 <_printf_common>
 8009398:	3001      	adds	r0, #1
 800939a:	f040 8090 	bne.w	80094be <_printf_float+0x1e2>
 800939e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093a2:	b00d      	add	sp, #52	; 0x34
 80093a4:	ecbd 8b02 	vpop	{d8}
 80093a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ac:	4642      	mov	r2, r8
 80093ae:	464b      	mov	r3, r9
 80093b0:	4640      	mov	r0, r8
 80093b2:	4649      	mov	r1, r9
 80093b4:	f7f7 fbda 	bl	8000b6c <__aeabi_dcmpun>
 80093b8:	b140      	cbz	r0, 80093cc <_printf_float+0xf0>
 80093ba:	464b      	mov	r3, r9
 80093bc:	2b00      	cmp	r3, #0
 80093be:	bfbc      	itt	lt
 80093c0:	232d      	movlt	r3, #45	; 0x2d
 80093c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80093c6:	487f      	ldr	r0, [pc, #508]	; (80095c4 <_printf_float+0x2e8>)
 80093c8:	4b7f      	ldr	r3, [pc, #508]	; (80095c8 <_printf_float+0x2ec>)
 80093ca:	e7d1      	b.n	8009370 <_printf_float+0x94>
 80093cc:	6863      	ldr	r3, [r4, #4]
 80093ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80093d2:	9206      	str	r2, [sp, #24]
 80093d4:	1c5a      	adds	r2, r3, #1
 80093d6:	d13f      	bne.n	8009458 <_printf_float+0x17c>
 80093d8:	2306      	movs	r3, #6
 80093da:	6063      	str	r3, [r4, #4]
 80093dc:	9b05      	ldr	r3, [sp, #20]
 80093de:	6861      	ldr	r1, [r4, #4]
 80093e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80093e4:	2300      	movs	r3, #0
 80093e6:	9303      	str	r3, [sp, #12]
 80093e8:	ab0a      	add	r3, sp, #40	; 0x28
 80093ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80093ee:	ab09      	add	r3, sp, #36	; 0x24
 80093f0:	ec49 8b10 	vmov	d0, r8, r9
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	6022      	str	r2, [r4, #0]
 80093f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80093fc:	4628      	mov	r0, r5
 80093fe:	f7ff fecd 	bl	800919c <__cvt>
 8009402:	9b06      	ldr	r3, [sp, #24]
 8009404:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009406:	2b47      	cmp	r3, #71	; 0x47
 8009408:	4680      	mov	r8, r0
 800940a:	d108      	bne.n	800941e <_printf_float+0x142>
 800940c:	1cc8      	adds	r0, r1, #3
 800940e:	db02      	blt.n	8009416 <_printf_float+0x13a>
 8009410:	6863      	ldr	r3, [r4, #4]
 8009412:	4299      	cmp	r1, r3
 8009414:	dd41      	ble.n	800949a <_printf_float+0x1be>
 8009416:	f1ab 0b02 	sub.w	fp, fp, #2
 800941a:	fa5f fb8b 	uxtb.w	fp, fp
 800941e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009422:	d820      	bhi.n	8009466 <_printf_float+0x18a>
 8009424:	3901      	subs	r1, #1
 8009426:	465a      	mov	r2, fp
 8009428:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800942c:	9109      	str	r1, [sp, #36]	; 0x24
 800942e:	f7ff ff17 	bl	8009260 <__exponent>
 8009432:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009434:	1813      	adds	r3, r2, r0
 8009436:	2a01      	cmp	r2, #1
 8009438:	4681      	mov	r9, r0
 800943a:	6123      	str	r3, [r4, #16]
 800943c:	dc02      	bgt.n	8009444 <_printf_float+0x168>
 800943e:	6822      	ldr	r2, [r4, #0]
 8009440:	07d2      	lsls	r2, r2, #31
 8009442:	d501      	bpl.n	8009448 <_printf_float+0x16c>
 8009444:	3301      	adds	r3, #1
 8009446:	6123      	str	r3, [r4, #16]
 8009448:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800944c:	2b00      	cmp	r3, #0
 800944e:	d09c      	beq.n	800938a <_printf_float+0xae>
 8009450:	232d      	movs	r3, #45	; 0x2d
 8009452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009456:	e798      	b.n	800938a <_printf_float+0xae>
 8009458:	9a06      	ldr	r2, [sp, #24]
 800945a:	2a47      	cmp	r2, #71	; 0x47
 800945c:	d1be      	bne.n	80093dc <_printf_float+0x100>
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1bc      	bne.n	80093dc <_printf_float+0x100>
 8009462:	2301      	movs	r3, #1
 8009464:	e7b9      	b.n	80093da <_printf_float+0xfe>
 8009466:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800946a:	d118      	bne.n	800949e <_printf_float+0x1c2>
 800946c:	2900      	cmp	r1, #0
 800946e:	6863      	ldr	r3, [r4, #4]
 8009470:	dd0b      	ble.n	800948a <_printf_float+0x1ae>
 8009472:	6121      	str	r1, [r4, #16]
 8009474:	b913      	cbnz	r3, 800947c <_printf_float+0x1a0>
 8009476:	6822      	ldr	r2, [r4, #0]
 8009478:	07d0      	lsls	r0, r2, #31
 800947a:	d502      	bpl.n	8009482 <_printf_float+0x1a6>
 800947c:	3301      	adds	r3, #1
 800947e:	440b      	add	r3, r1
 8009480:	6123      	str	r3, [r4, #16]
 8009482:	65a1      	str	r1, [r4, #88]	; 0x58
 8009484:	f04f 0900 	mov.w	r9, #0
 8009488:	e7de      	b.n	8009448 <_printf_float+0x16c>
 800948a:	b913      	cbnz	r3, 8009492 <_printf_float+0x1b6>
 800948c:	6822      	ldr	r2, [r4, #0]
 800948e:	07d2      	lsls	r2, r2, #31
 8009490:	d501      	bpl.n	8009496 <_printf_float+0x1ba>
 8009492:	3302      	adds	r3, #2
 8009494:	e7f4      	b.n	8009480 <_printf_float+0x1a4>
 8009496:	2301      	movs	r3, #1
 8009498:	e7f2      	b.n	8009480 <_printf_float+0x1a4>
 800949a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800949e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094a0:	4299      	cmp	r1, r3
 80094a2:	db05      	blt.n	80094b0 <_printf_float+0x1d4>
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	6121      	str	r1, [r4, #16]
 80094a8:	07d8      	lsls	r0, r3, #31
 80094aa:	d5ea      	bpl.n	8009482 <_printf_float+0x1a6>
 80094ac:	1c4b      	adds	r3, r1, #1
 80094ae:	e7e7      	b.n	8009480 <_printf_float+0x1a4>
 80094b0:	2900      	cmp	r1, #0
 80094b2:	bfd4      	ite	le
 80094b4:	f1c1 0202 	rsble	r2, r1, #2
 80094b8:	2201      	movgt	r2, #1
 80094ba:	4413      	add	r3, r2
 80094bc:	e7e0      	b.n	8009480 <_printf_float+0x1a4>
 80094be:	6823      	ldr	r3, [r4, #0]
 80094c0:	055a      	lsls	r2, r3, #21
 80094c2:	d407      	bmi.n	80094d4 <_printf_float+0x1f8>
 80094c4:	6923      	ldr	r3, [r4, #16]
 80094c6:	4642      	mov	r2, r8
 80094c8:	4631      	mov	r1, r6
 80094ca:	4628      	mov	r0, r5
 80094cc:	47b8      	blx	r7
 80094ce:	3001      	adds	r0, #1
 80094d0:	d12c      	bne.n	800952c <_printf_float+0x250>
 80094d2:	e764      	b.n	800939e <_printf_float+0xc2>
 80094d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80094d8:	f240 80e0 	bls.w	800969c <_printf_float+0x3c0>
 80094dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094e0:	2200      	movs	r2, #0
 80094e2:	2300      	movs	r3, #0
 80094e4:	f7f7 fb10 	bl	8000b08 <__aeabi_dcmpeq>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d034      	beq.n	8009556 <_printf_float+0x27a>
 80094ec:	4a37      	ldr	r2, [pc, #220]	; (80095cc <_printf_float+0x2f0>)
 80094ee:	2301      	movs	r3, #1
 80094f0:	4631      	mov	r1, r6
 80094f2:	4628      	mov	r0, r5
 80094f4:	47b8      	blx	r7
 80094f6:	3001      	adds	r0, #1
 80094f8:	f43f af51 	beq.w	800939e <_printf_float+0xc2>
 80094fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009500:	429a      	cmp	r2, r3
 8009502:	db02      	blt.n	800950a <_printf_float+0x22e>
 8009504:	6823      	ldr	r3, [r4, #0]
 8009506:	07d8      	lsls	r0, r3, #31
 8009508:	d510      	bpl.n	800952c <_printf_float+0x250>
 800950a:	ee18 3a10 	vmov	r3, s16
 800950e:	4652      	mov	r2, sl
 8009510:	4631      	mov	r1, r6
 8009512:	4628      	mov	r0, r5
 8009514:	47b8      	blx	r7
 8009516:	3001      	adds	r0, #1
 8009518:	f43f af41 	beq.w	800939e <_printf_float+0xc2>
 800951c:	f04f 0800 	mov.w	r8, #0
 8009520:	f104 091a 	add.w	r9, r4, #26
 8009524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009526:	3b01      	subs	r3, #1
 8009528:	4543      	cmp	r3, r8
 800952a:	dc09      	bgt.n	8009540 <_printf_float+0x264>
 800952c:	6823      	ldr	r3, [r4, #0]
 800952e:	079b      	lsls	r3, r3, #30
 8009530:	f100 8105 	bmi.w	800973e <_printf_float+0x462>
 8009534:	68e0      	ldr	r0, [r4, #12]
 8009536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009538:	4298      	cmp	r0, r3
 800953a:	bfb8      	it	lt
 800953c:	4618      	movlt	r0, r3
 800953e:	e730      	b.n	80093a2 <_printf_float+0xc6>
 8009540:	2301      	movs	r3, #1
 8009542:	464a      	mov	r2, r9
 8009544:	4631      	mov	r1, r6
 8009546:	4628      	mov	r0, r5
 8009548:	47b8      	blx	r7
 800954a:	3001      	adds	r0, #1
 800954c:	f43f af27 	beq.w	800939e <_printf_float+0xc2>
 8009550:	f108 0801 	add.w	r8, r8, #1
 8009554:	e7e6      	b.n	8009524 <_printf_float+0x248>
 8009556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009558:	2b00      	cmp	r3, #0
 800955a:	dc39      	bgt.n	80095d0 <_printf_float+0x2f4>
 800955c:	4a1b      	ldr	r2, [pc, #108]	; (80095cc <_printf_float+0x2f0>)
 800955e:	2301      	movs	r3, #1
 8009560:	4631      	mov	r1, r6
 8009562:	4628      	mov	r0, r5
 8009564:	47b8      	blx	r7
 8009566:	3001      	adds	r0, #1
 8009568:	f43f af19 	beq.w	800939e <_printf_float+0xc2>
 800956c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009570:	4313      	orrs	r3, r2
 8009572:	d102      	bne.n	800957a <_printf_float+0x29e>
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	07d9      	lsls	r1, r3, #31
 8009578:	d5d8      	bpl.n	800952c <_printf_float+0x250>
 800957a:	ee18 3a10 	vmov	r3, s16
 800957e:	4652      	mov	r2, sl
 8009580:	4631      	mov	r1, r6
 8009582:	4628      	mov	r0, r5
 8009584:	47b8      	blx	r7
 8009586:	3001      	adds	r0, #1
 8009588:	f43f af09 	beq.w	800939e <_printf_float+0xc2>
 800958c:	f04f 0900 	mov.w	r9, #0
 8009590:	f104 0a1a 	add.w	sl, r4, #26
 8009594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009596:	425b      	negs	r3, r3
 8009598:	454b      	cmp	r3, r9
 800959a:	dc01      	bgt.n	80095a0 <_printf_float+0x2c4>
 800959c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800959e:	e792      	b.n	80094c6 <_printf_float+0x1ea>
 80095a0:	2301      	movs	r3, #1
 80095a2:	4652      	mov	r2, sl
 80095a4:	4631      	mov	r1, r6
 80095a6:	4628      	mov	r0, r5
 80095a8:	47b8      	blx	r7
 80095aa:	3001      	adds	r0, #1
 80095ac:	f43f aef7 	beq.w	800939e <_printf_float+0xc2>
 80095b0:	f109 0901 	add.w	r9, r9, #1
 80095b4:	e7ee      	b.n	8009594 <_printf_float+0x2b8>
 80095b6:	bf00      	nop
 80095b8:	7fefffff 	.word	0x7fefffff
 80095bc:	0800df64 	.word	0x0800df64
 80095c0:	0800df68 	.word	0x0800df68
 80095c4:	0800df70 	.word	0x0800df70
 80095c8:	0800df6c 	.word	0x0800df6c
 80095cc:	0800df74 	.word	0x0800df74
 80095d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80095d4:	429a      	cmp	r2, r3
 80095d6:	bfa8      	it	ge
 80095d8:	461a      	movge	r2, r3
 80095da:	2a00      	cmp	r2, #0
 80095dc:	4691      	mov	r9, r2
 80095de:	dc37      	bgt.n	8009650 <_printf_float+0x374>
 80095e0:	f04f 0b00 	mov.w	fp, #0
 80095e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095e8:	f104 021a 	add.w	r2, r4, #26
 80095ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80095ee:	9305      	str	r3, [sp, #20]
 80095f0:	eba3 0309 	sub.w	r3, r3, r9
 80095f4:	455b      	cmp	r3, fp
 80095f6:	dc33      	bgt.n	8009660 <_printf_float+0x384>
 80095f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095fc:	429a      	cmp	r2, r3
 80095fe:	db3b      	blt.n	8009678 <_printf_float+0x39c>
 8009600:	6823      	ldr	r3, [r4, #0]
 8009602:	07da      	lsls	r2, r3, #31
 8009604:	d438      	bmi.n	8009678 <_printf_float+0x39c>
 8009606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009608:	9a05      	ldr	r2, [sp, #20]
 800960a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800960c:	1a9a      	subs	r2, r3, r2
 800960e:	eba3 0901 	sub.w	r9, r3, r1
 8009612:	4591      	cmp	r9, r2
 8009614:	bfa8      	it	ge
 8009616:	4691      	movge	r9, r2
 8009618:	f1b9 0f00 	cmp.w	r9, #0
 800961c:	dc35      	bgt.n	800968a <_printf_float+0x3ae>
 800961e:	f04f 0800 	mov.w	r8, #0
 8009622:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009626:	f104 0a1a 	add.w	sl, r4, #26
 800962a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800962e:	1a9b      	subs	r3, r3, r2
 8009630:	eba3 0309 	sub.w	r3, r3, r9
 8009634:	4543      	cmp	r3, r8
 8009636:	f77f af79 	ble.w	800952c <_printf_float+0x250>
 800963a:	2301      	movs	r3, #1
 800963c:	4652      	mov	r2, sl
 800963e:	4631      	mov	r1, r6
 8009640:	4628      	mov	r0, r5
 8009642:	47b8      	blx	r7
 8009644:	3001      	adds	r0, #1
 8009646:	f43f aeaa 	beq.w	800939e <_printf_float+0xc2>
 800964a:	f108 0801 	add.w	r8, r8, #1
 800964e:	e7ec      	b.n	800962a <_printf_float+0x34e>
 8009650:	4613      	mov	r3, r2
 8009652:	4631      	mov	r1, r6
 8009654:	4642      	mov	r2, r8
 8009656:	4628      	mov	r0, r5
 8009658:	47b8      	blx	r7
 800965a:	3001      	adds	r0, #1
 800965c:	d1c0      	bne.n	80095e0 <_printf_float+0x304>
 800965e:	e69e      	b.n	800939e <_printf_float+0xc2>
 8009660:	2301      	movs	r3, #1
 8009662:	4631      	mov	r1, r6
 8009664:	4628      	mov	r0, r5
 8009666:	9205      	str	r2, [sp, #20]
 8009668:	47b8      	blx	r7
 800966a:	3001      	adds	r0, #1
 800966c:	f43f ae97 	beq.w	800939e <_printf_float+0xc2>
 8009670:	9a05      	ldr	r2, [sp, #20]
 8009672:	f10b 0b01 	add.w	fp, fp, #1
 8009676:	e7b9      	b.n	80095ec <_printf_float+0x310>
 8009678:	ee18 3a10 	vmov	r3, s16
 800967c:	4652      	mov	r2, sl
 800967e:	4631      	mov	r1, r6
 8009680:	4628      	mov	r0, r5
 8009682:	47b8      	blx	r7
 8009684:	3001      	adds	r0, #1
 8009686:	d1be      	bne.n	8009606 <_printf_float+0x32a>
 8009688:	e689      	b.n	800939e <_printf_float+0xc2>
 800968a:	9a05      	ldr	r2, [sp, #20]
 800968c:	464b      	mov	r3, r9
 800968e:	4442      	add	r2, r8
 8009690:	4631      	mov	r1, r6
 8009692:	4628      	mov	r0, r5
 8009694:	47b8      	blx	r7
 8009696:	3001      	adds	r0, #1
 8009698:	d1c1      	bne.n	800961e <_printf_float+0x342>
 800969a:	e680      	b.n	800939e <_printf_float+0xc2>
 800969c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800969e:	2a01      	cmp	r2, #1
 80096a0:	dc01      	bgt.n	80096a6 <_printf_float+0x3ca>
 80096a2:	07db      	lsls	r3, r3, #31
 80096a4:	d538      	bpl.n	8009718 <_printf_float+0x43c>
 80096a6:	2301      	movs	r3, #1
 80096a8:	4642      	mov	r2, r8
 80096aa:	4631      	mov	r1, r6
 80096ac:	4628      	mov	r0, r5
 80096ae:	47b8      	blx	r7
 80096b0:	3001      	adds	r0, #1
 80096b2:	f43f ae74 	beq.w	800939e <_printf_float+0xc2>
 80096b6:	ee18 3a10 	vmov	r3, s16
 80096ba:	4652      	mov	r2, sl
 80096bc:	4631      	mov	r1, r6
 80096be:	4628      	mov	r0, r5
 80096c0:	47b8      	blx	r7
 80096c2:	3001      	adds	r0, #1
 80096c4:	f43f ae6b 	beq.w	800939e <_printf_float+0xc2>
 80096c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80096cc:	2200      	movs	r2, #0
 80096ce:	2300      	movs	r3, #0
 80096d0:	f7f7 fa1a 	bl	8000b08 <__aeabi_dcmpeq>
 80096d4:	b9d8      	cbnz	r0, 800970e <_printf_float+0x432>
 80096d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096d8:	f108 0201 	add.w	r2, r8, #1
 80096dc:	3b01      	subs	r3, #1
 80096de:	4631      	mov	r1, r6
 80096e0:	4628      	mov	r0, r5
 80096e2:	47b8      	blx	r7
 80096e4:	3001      	adds	r0, #1
 80096e6:	d10e      	bne.n	8009706 <_printf_float+0x42a>
 80096e8:	e659      	b.n	800939e <_printf_float+0xc2>
 80096ea:	2301      	movs	r3, #1
 80096ec:	4652      	mov	r2, sl
 80096ee:	4631      	mov	r1, r6
 80096f0:	4628      	mov	r0, r5
 80096f2:	47b8      	blx	r7
 80096f4:	3001      	adds	r0, #1
 80096f6:	f43f ae52 	beq.w	800939e <_printf_float+0xc2>
 80096fa:	f108 0801 	add.w	r8, r8, #1
 80096fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009700:	3b01      	subs	r3, #1
 8009702:	4543      	cmp	r3, r8
 8009704:	dcf1      	bgt.n	80096ea <_printf_float+0x40e>
 8009706:	464b      	mov	r3, r9
 8009708:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800970c:	e6dc      	b.n	80094c8 <_printf_float+0x1ec>
 800970e:	f04f 0800 	mov.w	r8, #0
 8009712:	f104 0a1a 	add.w	sl, r4, #26
 8009716:	e7f2      	b.n	80096fe <_printf_float+0x422>
 8009718:	2301      	movs	r3, #1
 800971a:	4642      	mov	r2, r8
 800971c:	e7df      	b.n	80096de <_printf_float+0x402>
 800971e:	2301      	movs	r3, #1
 8009720:	464a      	mov	r2, r9
 8009722:	4631      	mov	r1, r6
 8009724:	4628      	mov	r0, r5
 8009726:	47b8      	blx	r7
 8009728:	3001      	adds	r0, #1
 800972a:	f43f ae38 	beq.w	800939e <_printf_float+0xc2>
 800972e:	f108 0801 	add.w	r8, r8, #1
 8009732:	68e3      	ldr	r3, [r4, #12]
 8009734:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009736:	1a5b      	subs	r3, r3, r1
 8009738:	4543      	cmp	r3, r8
 800973a:	dcf0      	bgt.n	800971e <_printf_float+0x442>
 800973c:	e6fa      	b.n	8009534 <_printf_float+0x258>
 800973e:	f04f 0800 	mov.w	r8, #0
 8009742:	f104 0919 	add.w	r9, r4, #25
 8009746:	e7f4      	b.n	8009732 <_printf_float+0x456>

08009748 <_printf_common>:
 8009748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800974c:	4616      	mov	r6, r2
 800974e:	4699      	mov	r9, r3
 8009750:	688a      	ldr	r2, [r1, #8]
 8009752:	690b      	ldr	r3, [r1, #16]
 8009754:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009758:	4293      	cmp	r3, r2
 800975a:	bfb8      	it	lt
 800975c:	4613      	movlt	r3, r2
 800975e:	6033      	str	r3, [r6, #0]
 8009760:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009764:	4607      	mov	r7, r0
 8009766:	460c      	mov	r4, r1
 8009768:	b10a      	cbz	r2, 800976e <_printf_common+0x26>
 800976a:	3301      	adds	r3, #1
 800976c:	6033      	str	r3, [r6, #0]
 800976e:	6823      	ldr	r3, [r4, #0]
 8009770:	0699      	lsls	r1, r3, #26
 8009772:	bf42      	ittt	mi
 8009774:	6833      	ldrmi	r3, [r6, #0]
 8009776:	3302      	addmi	r3, #2
 8009778:	6033      	strmi	r3, [r6, #0]
 800977a:	6825      	ldr	r5, [r4, #0]
 800977c:	f015 0506 	ands.w	r5, r5, #6
 8009780:	d106      	bne.n	8009790 <_printf_common+0x48>
 8009782:	f104 0a19 	add.w	sl, r4, #25
 8009786:	68e3      	ldr	r3, [r4, #12]
 8009788:	6832      	ldr	r2, [r6, #0]
 800978a:	1a9b      	subs	r3, r3, r2
 800978c:	42ab      	cmp	r3, r5
 800978e:	dc26      	bgt.n	80097de <_printf_common+0x96>
 8009790:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009794:	1e13      	subs	r3, r2, #0
 8009796:	6822      	ldr	r2, [r4, #0]
 8009798:	bf18      	it	ne
 800979a:	2301      	movne	r3, #1
 800979c:	0692      	lsls	r2, r2, #26
 800979e:	d42b      	bmi.n	80097f8 <_printf_common+0xb0>
 80097a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097a4:	4649      	mov	r1, r9
 80097a6:	4638      	mov	r0, r7
 80097a8:	47c0      	blx	r8
 80097aa:	3001      	adds	r0, #1
 80097ac:	d01e      	beq.n	80097ec <_printf_common+0xa4>
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	68e5      	ldr	r5, [r4, #12]
 80097b2:	6832      	ldr	r2, [r6, #0]
 80097b4:	f003 0306 	and.w	r3, r3, #6
 80097b8:	2b04      	cmp	r3, #4
 80097ba:	bf08      	it	eq
 80097bc:	1aad      	subeq	r5, r5, r2
 80097be:	68a3      	ldr	r3, [r4, #8]
 80097c0:	6922      	ldr	r2, [r4, #16]
 80097c2:	bf0c      	ite	eq
 80097c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097c8:	2500      	movne	r5, #0
 80097ca:	4293      	cmp	r3, r2
 80097cc:	bfc4      	itt	gt
 80097ce:	1a9b      	subgt	r3, r3, r2
 80097d0:	18ed      	addgt	r5, r5, r3
 80097d2:	2600      	movs	r6, #0
 80097d4:	341a      	adds	r4, #26
 80097d6:	42b5      	cmp	r5, r6
 80097d8:	d11a      	bne.n	8009810 <_printf_common+0xc8>
 80097da:	2000      	movs	r0, #0
 80097dc:	e008      	b.n	80097f0 <_printf_common+0xa8>
 80097de:	2301      	movs	r3, #1
 80097e0:	4652      	mov	r2, sl
 80097e2:	4649      	mov	r1, r9
 80097e4:	4638      	mov	r0, r7
 80097e6:	47c0      	blx	r8
 80097e8:	3001      	adds	r0, #1
 80097ea:	d103      	bne.n	80097f4 <_printf_common+0xac>
 80097ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097f4:	3501      	adds	r5, #1
 80097f6:	e7c6      	b.n	8009786 <_printf_common+0x3e>
 80097f8:	18e1      	adds	r1, r4, r3
 80097fa:	1c5a      	adds	r2, r3, #1
 80097fc:	2030      	movs	r0, #48	; 0x30
 80097fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009802:	4422      	add	r2, r4
 8009804:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009808:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800980c:	3302      	adds	r3, #2
 800980e:	e7c7      	b.n	80097a0 <_printf_common+0x58>
 8009810:	2301      	movs	r3, #1
 8009812:	4622      	mov	r2, r4
 8009814:	4649      	mov	r1, r9
 8009816:	4638      	mov	r0, r7
 8009818:	47c0      	blx	r8
 800981a:	3001      	adds	r0, #1
 800981c:	d0e6      	beq.n	80097ec <_printf_common+0xa4>
 800981e:	3601      	adds	r6, #1
 8009820:	e7d9      	b.n	80097d6 <_printf_common+0x8e>
	...

08009824 <_printf_i>:
 8009824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009828:	7e0f      	ldrb	r7, [r1, #24]
 800982a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800982c:	2f78      	cmp	r7, #120	; 0x78
 800982e:	4691      	mov	r9, r2
 8009830:	4680      	mov	r8, r0
 8009832:	460c      	mov	r4, r1
 8009834:	469a      	mov	sl, r3
 8009836:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800983a:	d807      	bhi.n	800984c <_printf_i+0x28>
 800983c:	2f62      	cmp	r7, #98	; 0x62
 800983e:	d80a      	bhi.n	8009856 <_printf_i+0x32>
 8009840:	2f00      	cmp	r7, #0
 8009842:	f000 80d8 	beq.w	80099f6 <_printf_i+0x1d2>
 8009846:	2f58      	cmp	r7, #88	; 0x58
 8009848:	f000 80a3 	beq.w	8009992 <_printf_i+0x16e>
 800984c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009850:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009854:	e03a      	b.n	80098cc <_printf_i+0xa8>
 8009856:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800985a:	2b15      	cmp	r3, #21
 800985c:	d8f6      	bhi.n	800984c <_printf_i+0x28>
 800985e:	a101      	add	r1, pc, #4	; (adr r1, 8009864 <_printf_i+0x40>)
 8009860:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009864:	080098bd 	.word	0x080098bd
 8009868:	080098d1 	.word	0x080098d1
 800986c:	0800984d 	.word	0x0800984d
 8009870:	0800984d 	.word	0x0800984d
 8009874:	0800984d 	.word	0x0800984d
 8009878:	0800984d 	.word	0x0800984d
 800987c:	080098d1 	.word	0x080098d1
 8009880:	0800984d 	.word	0x0800984d
 8009884:	0800984d 	.word	0x0800984d
 8009888:	0800984d 	.word	0x0800984d
 800988c:	0800984d 	.word	0x0800984d
 8009890:	080099dd 	.word	0x080099dd
 8009894:	08009901 	.word	0x08009901
 8009898:	080099bf 	.word	0x080099bf
 800989c:	0800984d 	.word	0x0800984d
 80098a0:	0800984d 	.word	0x0800984d
 80098a4:	080099ff 	.word	0x080099ff
 80098a8:	0800984d 	.word	0x0800984d
 80098ac:	08009901 	.word	0x08009901
 80098b0:	0800984d 	.word	0x0800984d
 80098b4:	0800984d 	.word	0x0800984d
 80098b8:	080099c7 	.word	0x080099c7
 80098bc:	682b      	ldr	r3, [r5, #0]
 80098be:	1d1a      	adds	r2, r3, #4
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	602a      	str	r2, [r5, #0]
 80098c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098cc:	2301      	movs	r3, #1
 80098ce:	e0a3      	b.n	8009a18 <_printf_i+0x1f4>
 80098d0:	6820      	ldr	r0, [r4, #0]
 80098d2:	6829      	ldr	r1, [r5, #0]
 80098d4:	0606      	lsls	r6, r0, #24
 80098d6:	f101 0304 	add.w	r3, r1, #4
 80098da:	d50a      	bpl.n	80098f2 <_printf_i+0xce>
 80098dc:	680e      	ldr	r6, [r1, #0]
 80098de:	602b      	str	r3, [r5, #0]
 80098e0:	2e00      	cmp	r6, #0
 80098e2:	da03      	bge.n	80098ec <_printf_i+0xc8>
 80098e4:	232d      	movs	r3, #45	; 0x2d
 80098e6:	4276      	negs	r6, r6
 80098e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098ec:	485e      	ldr	r0, [pc, #376]	; (8009a68 <_printf_i+0x244>)
 80098ee:	230a      	movs	r3, #10
 80098f0:	e019      	b.n	8009926 <_printf_i+0x102>
 80098f2:	680e      	ldr	r6, [r1, #0]
 80098f4:	602b      	str	r3, [r5, #0]
 80098f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80098fa:	bf18      	it	ne
 80098fc:	b236      	sxthne	r6, r6
 80098fe:	e7ef      	b.n	80098e0 <_printf_i+0xbc>
 8009900:	682b      	ldr	r3, [r5, #0]
 8009902:	6820      	ldr	r0, [r4, #0]
 8009904:	1d19      	adds	r1, r3, #4
 8009906:	6029      	str	r1, [r5, #0]
 8009908:	0601      	lsls	r1, r0, #24
 800990a:	d501      	bpl.n	8009910 <_printf_i+0xec>
 800990c:	681e      	ldr	r6, [r3, #0]
 800990e:	e002      	b.n	8009916 <_printf_i+0xf2>
 8009910:	0646      	lsls	r6, r0, #25
 8009912:	d5fb      	bpl.n	800990c <_printf_i+0xe8>
 8009914:	881e      	ldrh	r6, [r3, #0]
 8009916:	4854      	ldr	r0, [pc, #336]	; (8009a68 <_printf_i+0x244>)
 8009918:	2f6f      	cmp	r7, #111	; 0x6f
 800991a:	bf0c      	ite	eq
 800991c:	2308      	moveq	r3, #8
 800991e:	230a      	movne	r3, #10
 8009920:	2100      	movs	r1, #0
 8009922:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009926:	6865      	ldr	r5, [r4, #4]
 8009928:	60a5      	str	r5, [r4, #8]
 800992a:	2d00      	cmp	r5, #0
 800992c:	bfa2      	ittt	ge
 800992e:	6821      	ldrge	r1, [r4, #0]
 8009930:	f021 0104 	bicge.w	r1, r1, #4
 8009934:	6021      	strge	r1, [r4, #0]
 8009936:	b90e      	cbnz	r6, 800993c <_printf_i+0x118>
 8009938:	2d00      	cmp	r5, #0
 800993a:	d04d      	beq.n	80099d8 <_printf_i+0x1b4>
 800993c:	4615      	mov	r5, r2
 800993e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009942:	fb03 6711 	mls	r7, r3, r1, r6
 8009946:	5dc7      	ldrb	r7, [r0, r7]
 8009948:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800994c:	4637      	mov	r7, r6
 800994e:	42bb      	cmp	r3, r7
 8009950:	460e      	mov	r6, r1
 8009952:	d9f4      	bls.n	800993e <_printf_i+0x11a>
 8009954:	2b08      	cmp	r3, #8
 8009956:	d10b      	bne.n	8009970 <_printf_i+0x14c>
 8009958:	6823      	ldr	r3, [r4, #0]
 800995a:	07de      	lsls	r6, r3, #31
 800995c:	d508      	bpl.n	8009970 <_printf_i+0x14c>
 800995e:	6923      	ldr	r3, [r4, #16]
 8009960:	6861      	ldr	r1, [r4, #4]
 8009962:	4299      	cmp	r1, r3
 8009964:	bfde      	ittt	le
 8009966:	2330      	movle	r3, #48	; 0x30
 8009968:	f805 3c01 	strble.w	r3, [r5, #-1]
 800996c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009970:	1b52      	subs	r2, r2, r5
 8009972:	6122      	str	r2, [r4, #16]
 8009974:	f8cd a000 	str.w	sl, [sp]
 8009978:	464b      	mov	r3, r9
 800997a:	aa03      	add	r2, sp, #12
 800997c:	4621      	mov	r1, r4
 800997e:	4640      	mov	r0, r8
 8009980:	f7ff fee2 	bl	8009748 <_printf_common>
 8009984:	3001      	adds	r0, #1
 8009986:	d14c      	bne.n	8009a22 <_printf_i+0x1fe>
 8009988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800998c:	b004      	add	sp, #16
 800998e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009992:	4835      	ldr	r0, [pc, #212]	; (8009a68 <_printf_i+0x244>)
 8009994:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009998:	6829      	ldr	r1, [r5, #0]
 800999a:	6823      	ldr	r3, [r4, #0]
 800999c:	f851 6b04 	ldr.w	r6, [r1], #4
 80099a0:	6029      	str	r1, [r5, #0]
 80099a2:	061d      	lsls	r5, r3, #24
 80099a4:	d514      	bpl.n	80099d0 <_printf_i+0x1ac>
 80099a6:	07df      	lsls	r7, r3, #31
 80099a8:	bf44      	itt	mi
 80099aa:	f043 0320 	orrmi.w	r3, r3, #32
 80099ae:	6023      	strmi	r3, [r4, #0]
 80099b0:	b91e      	cbnz	r6, 80099ba <_printf_i+0x196>
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	f023 0320 	bic.w	r3, r3, #32
 80099b8:	6023      	str	r3, [r4, #0]
 80099ba:	2310      	movs	r3, #16
 80099bc:	e7b0      	b.n	8009920 <_printf_i+0xfc>
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	f043 0320 	orr.w	r3, r3, #32
 80099c4:	6023      	str	r3, [r4, #0]
 80099c6:	2378      	movs	r3, #120	; 0x78
 80099c8:	4828      	ldr	r0, [pc, #160]	; (8009a6c <_printf_i+0x248>)
 80099ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099ce:	e7e3      	b.n	8009998 <_printf_i+0x174>
 80099d0:	0659      	lsls	r1, r3, #25
 80099d2:	bf48      	it	mi
 80099d4:	b2b6      	uxthmi	r6, r6
 80099d6:	e7e6      	b.n	80099a6 <_printf_i+0x182>
 80099d8:	4615      	mov	r5, r2
 80099da:	e7bb      	b.n	8009954 <_printf_i+0x130>
 80099dc:	682b      	ldr	r3, [r5, #0]
 80099de:	6826      	ldr	r6, [r4, #0]
 80099e0:	6961      	ldr	r1, [r4, #20]
 80099e2:	1d18      	adds	r0, r3, #4
 80099e4:	6028      	str	r0, [r5, #0]
 80099e6:	0635      	lsls	r5, r6, #24
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	d501      	bpl.n	80099f0 <_printf_i+0x1cc>
 80099ec:	6019      	str	r1, [r3, #0]
 80099ee:	e002      	b.n	80099f6 <_printf_i+0x1d2>
 80099f0:	0670      	lsls	r0, r6, #25
 80099f2:	d5fb      	bpl.n	80099ec <_printf_i+0x1c8>
 80099f4:	8019      	strh	r1, [r3, #0]
 80099f6:	2300      	movs	r3, #0
 80099f8:	6123      	str	r3, [r4, #16]
 80099fa:	4615      	mov	r5, r2
 80099fc:	e7ba      	b.n	8009974 <_printf_i+0x150>
 80099fe:	682b      	ldr	r3, [r5, #0]
 8009a00:	1d1a      	adds	r2, r3, #4
 8009a02:	602a      	str	r2, [r5, #0]
 8009a04:	681d      	ldr	r5, [r3, #0]
 8009a06:	6862      	ldr	r2, [r4, #4]
 8009a08:	2100      	movs	r1, #0
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	f7f6 fc08 	bl	8000220 <memchr>
 8009a10:	b108      	cbz	r0, 8009a16 <_printf_i+0x1f2>
 8009a12:	1b40      	subs	r0, r0, r5
 8009a14:	6060      	str	r0, [r4, #4]
 8009a16:	6863      	ldr	r3, [r4, #4]
 8009a18:	6123      	str	r3, [r4, #16]
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a20:	e7a8      	b.n	8009974 <_printf_i+0x150>
 8009a22:	6923      	ldr	r3, [r4, #16]
 8009a24:	462a      	mov	r2, r5
 8009a26:	4649      	mov	r1, r9
 8009a28:	4640      	mov	r0, r8
 8009a2a:	47d0      	blx	sl
 8009a2c:	3001      	adds	r0, #1
 8009a2e:	d0ab      	beq.n	8009988 <_printf_i+0x164>
 8009a30:	6823      	ldr	r3, [r4, #0]
 8009a32:	079b      	lsls	r3, r3, #30
 8009a34:	d413      	bmi.n	8009a5e <_printf_i+0x23a>
 8009a36:	68e0      	ldr	r0, [r4, #12]
 8009a38:	9b03      	ldr	r3, [sp, #12]
 8009a3a:	4298      	cmp	r0, r3
 8009a3c:	bfb8      	it	lt
 8009a3e:	4618      	movlt	r0, r3
 8009a40:	e7a4      	b.n	800998c <_printf_i+0x168>
 8009a42:	2301      	movs	r3, #1
 8009a44:	4632      	mov	r2, r6
 8009a46:	4649      	mov	r1, r9
 8009a48:	4640      	mov	r0, r8
 8009a4a:	47d0      	blx	sl
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	d09b      	beq.n	8009988 <_printf_i+0x164>
 8009a50:	3501      	adds	r5, #1
 8009a52:	68e3      	ldr	r3, [r4, #12]
 8009a54:	9903      	ldr	r1, [sp, #12]
 8009a56:	1a5b      	subs	r3, r3, r1
 8009a58:	42ab      	cmp	r3, r5
 8009a5a:	dcf2      	bgt.n	8009a42 <_printf_i+0x21e>
 8009a5c:	e7eb      	b.n	8009a36 <_printf_i+0x212>
 8009a5e:	2500      	movs	r5, #0
 8009a60:	f104 0619 	add.w	r6, r4, #25
 8009a64:	e7f5      	b.n	8009a52 <_printf_i+0x22e>
 8009a66:	bf00      	nop
 8009a68:	0800df76 	.word	0x0800df76
 8009a6c:	0800df87 	.word	0x0800df87

08009a70 <iprintf>:
 8009a70:	b40f      	push	{r0, r1, r2, r3}
 8009a72:	4b0a      	ldr	r3, [pc, #40]	; (8009a9c <iprintf+0x2c>)
 8009a74:	b513      	push	{r0, r1, r4, lr}
 8009a76:	681c      	ldr	r4, [r3, #0]
 8009a78:	b124      	cbz	r4, 8009a84 <iprintf+0x14>
 8009a7a:	69a3      	ldr	r3, [r4, #24]
 8009a7c:	b913      	cbnz	r3, 8009a84 <iprintf+0x14>
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f001 f9a6 	bl	800add0 <__sinit>
 8009a84:	ab05      	add	r3, sp, #20
 8009a86:	9a04      	ldr	r2, [sp, #16]
 8009a88:	68a1      	ldr	r1, [r4, #8]
 8009a8a:	9301      	str	r3, [sp, #4]
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f001 ff63 	bl	800b958 <_vfiprintf_r>
 8009a92:	b002      	add	sp, #8
 8009a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a98:	b004      	add	sp, #16
 8009a9a:	4770      	bx	lr
 8009a9c:	20000018 	.word	0x20000018

08009aa0 <_puts_r>:
 8009aa0:	b570      	push	{r4, r5, r6, lr}
 8009aa2:	460e      	mov	r6, r1
 8009aa4:	4605      	mov	r5, r0
 8009aa6:	b118      	cbz	r0, 8009ab0 <_puts_r+0x10>
 8009aa8:	6983      	ldr	r3, [r0, #24]
 8009aaa:	b90b      	cbnz	r3, 8009ab0 <_puts_r+0x10>
 8009aac:	f001 f990 	bl	800add0 <__sinit>
 8009ab0:	69ab      	ldr	r3, [r5, #24]
 8009ab2:	68ac      	ldr	r4, [r5, #8]
 8009ab4:	b913      	cbnz	r3, 8009abc <_puts_r+0x1c>
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	f001 f98a 	bl	800add0 <__sinit>
 8009abc:	4b2c      	ldr	r3, [pc, #176]	; (8009b70 <_puts_r+0xd0>)
 8009abe:	429c      	cmp	r4, r3
 8009ac0:	d120      	bne.n	8009b04 <_puts_r+0x64>
 8009ac2:	686c      	ldr	r4, [r5, #4]
 8009ac4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ac6:	07db      	lsls	r3, r3, #31
 8009ac8:	d405      	bmi.n	8009ad6 <_puts_r+0x36>
 8009aca:	89a3      	ldrh	r3, [r4, #12]
 8009acc:	0598      	lsls	r0, r3, #22
 8009ace:	d402      	bmi.n	8009ad6 <_puts_r+0x36>
 8009ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ad2:	f001 fa20 	bl	800af16 <__retarget_lock_acquire_recursive>
 8009ad6:	89a3      	ldrh	r3, [r4, #12]
 8009ad8:	0719      	lsls	r1, r3, #28
 8009ada:	d51d      	bpl.n	8009b18 <_puts_r+0x78>
 8009adc:	6923      	ldr	r3, [r4, #16]
 8009ade:	b1db      	cbz	r3, 8009b18 <_puts_r+0x78>
 8009ae0:	3e01      	subs	r6, #1
 8009ae2:	68a3      	ldr	r3, [r4, #8]
 8009ae4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	60a3      	str	r3, [r4, #8]
 8009aec:	bb39      	cbnz	r1, 8009b3e <_puts_r+0x9e>
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	da38      	bge.n	8009b64 <_puts_r+0xc4>
 8009af2:	4622      	mov	r2, r4
 8009af4:	210a      	movs	r1, #10
 8009af6:	4628      	mov	r0, r5
 8009af8:	f000 f916 	bl	8009d28 <__swbuf_r>
 8009afc:	3001      	adds	r0, #1
 8009afe:	d011      	beq.n	8009b24 <_puts_r+0x84>
 8009b00:	250a      	movs	r5, #10
 8009b02:	e011      	b.n	8009b28 <_puts_r+0x88>
 8009b04:	4b1b      	ldr	r3, [pc, #108]	; (8009b74 <_puts_r+0xd4>)
 8009b06:	429c      	cmp	r4, r3
 8009b08:	d101      	bne.n	8009b0e <_puts_r+0x6e>
 8009b0a:	68ac      	ldr	r4, [r5, #8]
 8009b0c:	e7da      	b.n	8009ac4 <_puts_r+0x24>
 8009b0e:	4b1a      	ldr	r3, [pc, #104]	; (8009b78 <_puts_r+0xd8>)
 8009b10:	429c      	cmp	r4, r3
 8009b12:	bf08      	it	eq
 8009b14:	68ec      	ldreq	r4, [r5, #12]
 8009b16:	e7d5      	b.n	8009ac4 <_puts_r+0x24>
 8009b18:	4621      	mov	r1, r4
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	f000 f956 	bl	8009dcc <__swsetup_r>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d0dd      	beq.n	8009ae0 <_puts_r+0x40>
 8009b24:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009b28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b2a:	07da      	lsls	r2, r3, #31
 8009b2c:	d405      	bmi.n	8009b3a <_puts_r+0x9a>
 8009b2e:	89a3      	ldrh	r3, [r4, #12]
 8009b30:	059b      	lsls	r3, r3, #22
 8009b32:	d402      	bmi.n	8009b3a <_puts_r+0x9a>
 8009b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b36:	f001 f9ef 	bl	800af18 <__retarget_lock_release_recursive>
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	bd70      	pop	{r4, r5, r6, pc}
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	da04      	bge.n	8009b4c <_puts_r+0xac>
 8009b42:	69a2      	ldr	r2, [r4, #24]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	dc06      	bgt.n	8009b56 <_puts_r+0xb6>
 8009b48:	290a      	cmp	r1, #10
 8009b4a:	d004      	beq.n	8009b56 <_puts_r+0xb6>
 8009b4c:	6823      	ldr	r3, [r4, #0]
 8009b4e:	1c5a      	adds	r2, r3, #1
 8009b50:	6022      	str	r2, [r4, #0]
 8009b52:	7019      	strb	r1, [r3, #0]
 8009b54:	e7c5      	b.n	8009ae2 <_puts_r+0x42>
 8009b56:	4622      	mov	r2, r4
 8009b58:	4628      	mov	r0, r5
 8009b5a:	f000 f8e5 	bl	8009d28 <__swbuf_r>
 8009b5e:	3001      	adds	r0, #1
 8009b60:	d1bf      	bne.n	8009ae2 <_puts_r+0x42>
 8009b62:	e7df      	b.n	8009b24 <_puts_r+0x84>
 8009b64:	6823      	ldr	r3, [r4, #0]
 8009b66:	250a      	movs	r5, #10
 8009b68:	1c5a      	adds	r2, r3, #1
 8009b6a:	6022      	str	r2, [r4, #0]
 8009b6c:	701d      	strb	r5, [r3, #0]
 8009b6e:	e7db      	b.n	8009b28 <_puts_r+0x88>
 8009b70:	0800e048 	.word	0x0800e048
 8009b74:	0800e068 	.word	0x0800e068
 8009b78:	0800e028 	.word	0x0800e028

08009b7c <puts>:
 8009b7c:	4b02      	ldr	r3, [pc, #8]	; (8009b88 <puts+0xc>)
 8009b7e:	4601      	mov	r1, r0
 8009b80:	6818      	ldr	r0, [r3, #0]
 8009b82:	f7ff bf8d 	b.w	8009aa0 <_puts_r>
 8009b86:	bf00      	nop
 8009b88:	20000018 	.word	0x20000018

08009b8c <setbuf>:
 8009b8c:	2900      	cmp	r1, #0
 8009b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b92:	bf0c      	ite	eq
 8009b94:	2202      	moveq	r2, #2
 8009b96:	2200      	movne	r2, #0
 8009b98:	f000 b800 	b.w	8009b9c <setvbuf>

08009b9c <setvbuf>:
 8009b9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ba0:	461d      	mov	r5, r3
 8009ba2:	4b5d      	ldr	r3, [pc, #372]	; (8009d18 <setvbuf+0x17c>)
 8009ba4:	681f      	ldr	r7, [r3, #0]
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	460e      	mov	r6, r1
 8009baa:	4690      	mov	r8, r2
 8009bac:	b127      	cbz	r7, 8009bb8 <setvbuf+0x1c>
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	b913      	cbnz	r3, 8009bb8 <setvbuf+0x1c>
 8009bb2:	4638      	mov	r0, r7
 8009bb4:	f001 f90c 	bl	800add0 <__sinit>
 8009bb8:	4b58      	ldr	r3, [pc, #352]	; (8009d1c <setvbuf+0x180>)
 8009bba:	429c      	cmp	r4, r3
 8009bbc:	d167      	bne.n	8009c8e <setvbuf+0xf2>
 8009bbe:	687c      	ldr	r4, [r7, #4]
 8009bc0:	f1b8 0f02 	cmp.w	r8, #2
 8009bc4:	d006      	beq.n	8009bd4 <setvbuf+0x38>
 8009bc6:	f1b8 0f01 	cmp.w	r8, #1
 8009bca:	f200 809f 	bhi.w	8009d0c <setvbuf+0x170>
 8009bce:	2d00      	cmp	r5, #0
 8009bd0:	f2c0 809c 	blt.w	8009d0c <setvbuf+0x170>
 8009bd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bd6:	07db      	lsls	r3, r3, #31
 8009bd8:	d405      	bmi.n	8009be6 <setvbuf+0x4a>
 8009bda:	89a3      	ldrh	r3, [r4, #12]
 8009bdc:	0598      	lsls	r0, r3, #22
 8009bde:	d402      	bmi.n	8009be6 <setvbuf+0x4a>
 8009be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009be2:	f001 f998 	bl	800af16 <__retarget_lock_acquire_recursive>
 8009be6:	4621      	mov	r1, r4
 8009be8:	4638      	mov	r0, r7
 8009bea:	f001 f85d 	bl	800aca8 <_fflush_r>
 8009bee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bf0:	b141      	cbz	r1, 8009c04 <setvbuf+0x68>
 8009bf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bf6:	4299      	cmp	r1, r3
 8009bf8:	d002      	beq.n	8009c00 <setvbuf+0x64>
 8009bfa:	4638      	mov	r0, r7
 8009bfc:	f001 fda2 	bl	800b744 <_free_r>
 8009c00:	2300      	movs	r3, #0
 8009c02:	6363      	str	r3, [r4, #52]	; 0x34
 8009c04:	2300      	movs	r3, #0
 8009c06:	61a3      	str	r3, [r4, #24]
 8009c08:	6063      	str	r3, [r4, #4]
 8009c0a:	89a3      	ldrh	r3, [r4, #12]
 8009c0c:	0619      	lsls	r1, r3, #24
 8009c0e:	d503      	bpl.n	8009c18 <setvbuf+0x7c>
 8009c10:	6921      	ldr	r1, [r4, #16]
 8009c12:	4638      	mov	r0, r7
 8009c14:	f001 fd96 	bl	800b744 <_free_r>
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8009c1e:	f023 0303 	bic.w	r3, r3, #3
 8009c22:	f1b8 0f02 	cmp.w	r8, #2
 8009c26:	81a3      	strh	r3, [r4, #12]
 8009c28:	d06c      	beq.n	8009d04 <setvbuf+0x168>
 8009c2a:	ab01      	add	r3, sp, #4
 8009c2c:	466a      	mov	r2, sp
 8009c2e:	4621      	mov	r1, r4
 8009c30:	4638      	mov	r0, r7
 8009c32:	f001 f972 	bl	800af1a <__swhatbuf_r>
 8009c36:	89a3      	ldrh	r3, [r4, #12]
 8009c38:	4318      	orrs	r0, r3
 8009c3a:	81a0      	strh	r0, [r4, #12]
 8009c3c:	2d00      	cmp	r5, #0
 8009c3e:	d130      	bne.n	8009ca2 <setvbuf+0x106>
 8009c40:	9d00      	ldr	r5, [sp, #0]
 8009c42:	4628      	mov	r0, r5
 8009c44:	f001 f9ce 	bl	800afe4 <malloc>
 8009c48:	4606      	mov	r6, r0
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	d155      	bne.n	8009cfa <setvbuf+0x15e>
 8009c4e:	f8dd 9000 	ldr.w	r9, [sp]
 8009c52:	45a9      	cmp	r9, r5
 8009c54:	d14a      	bne.n	8009cec <setvbuf+0x150>
 8009c56:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	60a2      	str	r2, [r4, #8]
 8009c5e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8009c62:	6022      	str	r2, [r4, #0]
 8009c64:	6122      	str	r2, [r4, #16]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c6c:	6162      	str	r2, [r4, #20]
 8009c6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c70:	f043 0302 	orr.w	r3, r3, #2
 8009c74:	07d2      	lsls	r2, r2, #31
 8009c76:	81a3      	strh	r3, [r4, #12]
 8009c78:	d405      	bmi.n	8009c86 <setvbuf+0xea>
 8009c7a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009c7e:	d102      	bne.n	8009c86 <setvbuf+0xea>
 8009c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c82:	f001 f949 	bl	800af18 <__retarget_lock_release_recursive>
 8009c86:	4628      	mov	r0, r5
 8009c88:	b003      	add	sp, #12
 8009c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c8e:	4b24      	ldr	r3, [pc, #144]	; (8009d20 <setvbuf+0x184>)
 8009c90:	429c      	cmp	r4, r3
 8009c92:	d101      	bne.n	8009c98 <setvbuf+0xfc>
 8009c94:	68bc      	ldr	r4, [r7, #8]
 8009c96:	e793      	b.n	8009bc0 <setvbuf+0x24>
 8009c98:	4b22      	ldr	r3, [pc, #136]	; (8009d24 <setvbuf+0x188>)
 8009c9a:	429c      	cmp	r4, r3
 8009c9c:	bf08      	it	eq
 8009c9e:	68fc      	ldreq	r4, [r7, #12]
 8009ca0:	e78e      	b.n	8009bc0 <setvbuf+0x24>
 8009ca2:	2e00      	cmp	r6, #0
 8009ca4:	d0cd      	beq.n	8009c42 <setvbuf+0xa6>
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	b913      	cbnz	r3, 8009cb0 <setvbuf+0x114>
 8009caa:	4638      	mov	r0, r7
 8009cac:	f001 f890 	bl	800add0 <__sinit>
 8009cb0:	f1b8 0f01 	cmp.w	r8, #1
 8009cb4:	bf08      	it	eq
 8009cb6:	89a3      	ldrheq	r3, [r4, #12]
 8009cb8:	6026      	str	r6, [r4, #0]
 8009cba:	bf04      	itt	eq
 8009cbc:	f043 0301 	orreq.w	r3, r3, #1
 8009cc0:	81a3      	strheq	r3, [r4, #12]
 8009cc2:	89a2      	ldrh	r2, [r4, #12]
 8009cc4:	f012 0308 	ands.w	r3, r2, #8
 8009cc8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009ccc:	d01c      	beq.n	8009d08 <setvbuf+0x16c>
 8009cce:	07d3      	lsls	r3, r2, #31
 8009cd0:	bf41      	itttt	mi
 8009cd2:	2300      	movmi	r3, #0
 8009cd4:	426d      	negmi	r5, r5
 8009cd6:	60a3      	strmi	r3, [r4, #8]
 8009cd8:	61a5      	strmi	r5, [r4, #24]
 8009cda:	bf58      	it	pl
 8009cdc:	60a5      	strpl	r5, [r4, #8]
 8009cde:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8009ce0:	f015 0501 	ands.w	r5, r5, #1
 8009ce4:	d115      	bne.n	8009d12 <setvbuf+0x176>
 8009ce6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8009cea:	e7c8      	b.n	8009c7e <setvbuf+0xe2>
 8009cec:	4648      	mov	r0, r9
 8009cee:	f001 f979 	bl	800afe4 <malloc>
 8009cf2:	4606      	mov	r6, r0
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	d0ae      	beq.n	8009c56 <setvbuf+0xba>
 8009cf8:	464d      	mov	r5, r9
 8009cfa:	89a3      	ldrh	r3, [r4, #12]
 8009cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d00:	81a3      	strh	r3, [r4, #12]
 8009d02:	e7d0      	b.n	8009ca6 <setvbuf+0x10a>
 8009d04:	2500      	movs	r5, #0
 8009d06:	e7a8      	b.n	8009c5a <setvbuf+0xbe>
 8009d08:	60a3      	str	r3, [r4, #8]
 8009d0a:	e7e8      	b.n	8009cde <setvbuf+0x142>
 8009d0c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009d10:	e7b9      	b.n	8009c86 <setvbuf+0xea>
 8009d12:	2500      	movs	r5, #0
 8009d14:	e7b7      	b.n	8009c86 <setvbuf+0xea>
 8009d16:	bf00      	nop
 8009d18:	20000018 	.word	0x20000018
 8009d1c:	0800e048 	.word	0x0800e048
 8009d20:	0800e068 	.word	0x0800e068
 8009d24:	0800e028 	.word	0x0800e028

08009d28 <__swbuf_r>:
 8009d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2a:	460e      	mov	r6, r1
 8009d2c:	4614      	mov	r4, r2
 8009d2e:	4605      	mov	r5, r0
 8009d30:	b118      	cbz	r0, 8009d3a <__swbuf_r+0x12>
 8009d32:	6983      	ldr	r3, [r0, #24]
 8009d34:	b90b      	cbnz	r3, 8009d3a <__swbuf_r+0x12>
 8009d36:	f001 f84b 	bl	800add0 <__sinit>
 8009d3a:	4b21      	ldr	r3, [pc, #132]	; (8009dc0 <__swbuf_r+0x98>)
 8009d3c:	429c      	cmp	r4, r3
 8009d3e:	d12b      	bne.n	8009d98 <__swbuf_r+0x70>
 8009d40:	686c      	ldr	r4, [r5, #4]
 8009d42:	69a3      	ldr	r3, [r4, #24]
 8009d44:	60a3      	str	r3, [r4, #8]
 8009d46:	89a3      	ldrh	r3, [r4, #12]
 8009d48:	071a      	lsls	r2, r3, #28
 8009d4a:	d52f      	bpl.n	8009dac <__swbuf_r+0x84>
 8009d4c:	6923      	ldr	r3, [r4, #16]
 8009d4e:	b36b      	cbz	r3, 8009dac <__swbuf_r+0x84>
 8009d50:	6923      	ldr	r3, [r4, #16]
 8009d52:	6820      	ldr	r0, [r4, #0]
 8009d54:	1ac0      	subs	r0, r0, r3
 8009d56:	6963      	ldr	r3, [r4, #20]
 8009d58:	b2f6      	uxtb	r6, r6
 8009d5a:	4283      	cmp	r3, r0
 8009d5c:	4637      	mov	r7, r6
 8009d5e:	dc04      	bgt.n	8009d6a <__swbuf_r+0x42>
 8009d60:	4621      	mov	r1, r4
 8009d62:	4628      	mov	r0, r5
 8009d64:	f000 ffa0 	bl	800aca8 <_fflush_r>
 8009d68:	bb30      	cbnz	r0, 8009db8 <__swbuf_r+0x90>
 8009d6a:	68a3      	ldr	r3, [r4, #8]
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	60a3      	str	r3, [r4, #8]
 8009d70:	6823      	ldr	r3, [r4, #0]
 8009d72:	1c5a      	adds	r2, r3, #1
 8009d74:	6022      	str	r2, [r4, #0]
 8009d76:	701e      	strb	r6, [r3, #0]
 8009d78:	6963      	ldr	r3, [r4, #20]
 8009d7a:	3001      	adds	r0, #1
 8009d7c:	4283      	cmp	r3, r0
 8009d7e:	d004      	beq.n	8009d8a <__swbuf_r+0x62>
 8009d80:	89a3      	ldrh	r3, [r4, #12]
 8009d82:	07db      	lsls	r3, r3, #31
 8009d84:	d506      	bpl.n	8009d94 <__swbuf_r+0x6c>
 8009d86:	2e0a      	cmp	r6, #10
 8009d88:	d104      	bne.n	8009d94 <__swbuf_r+0x6c>
 8009d8a:	4621      	mov	r1, r4
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	f000 ff8b 	bl	800aca8 <_fflush_r>
 8009d92:	b988      	cbnz	r0, 8009db8 <__swbuf_r+0x90>
 8009d94:	4638      	mov	r0, r7
 8009d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d98:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <__swbuf_r+0x9c>)
 8009d9a:	429c      	cmp	r4, r3
 8009d9c:	d101      	bne.n	8009da2 <__swbuf_r+0x7a>
 8009d9e:	68ac      	ldr	r4, [r5, #8]
 8009da0:	e7cf      	b.n	8009d42 <__swbuf_r+0x1a>
 8009da2:	4b09      	ldr	r3, [pc, #36]	; (8009dc8 <__swbuf_r+0xa0>)
 8009da4:	429c      	cmp	r4, r3
 8009da6:	bf08      	it	eq
 8009da8:	68ec      	ldreq	r4, [r5, #12]
 8009daa:	e7ca      	b.n	8009d42 <__swbuf_r+0x1a>
 8009dac:	4621      	mov	r1, r4
 8009dae:	4628      	mov	r0, r5
 8009db0:	f000 f80c 	bl	8009dcc <__swsetup_r>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	d0cb      	beq.n	8009d50 <__swbuf_r+0x28>
 8009db8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009dbc:	e7ea      	b.n	8009d94 <__swbuf_r+0x6c>
 8009dbe:	bf00      	nop
 8009dc0:	0800e048 	.word	0x0800e048
 8009dc4:	0800e068 	.word	0x0800e068
 8009dc8:	0800e028 	.word	0x0800e028

08009dcc <__swsetup_r>:
 8009dcc:	4b32      	ldr	r3, [pc, #200]	; (8009e98 <__swsetup_r+0xcc>)
 8009dce:	b570      	push	{r4, r5, r6, lr}
 8009dd0:	681d      	ldr	r5, [r3, #0]
 8009dd2:	4606      	mov	r6, r0
 8009dd4:	460c      	mov	r4, r1
 8009dd6:	b125      	cbz	r5, 8009de2 <__swsetup_r+0x16>
 8009dd8:	69ab      	ldr	r3, [r5, #24]
 8009dda:	b913      	cbnz	r3, 8009de2 <__swsetup_r+0x16>
 8009ddc:	4628      	mov	r0, r5
 8009dde:	f000 fff7 	bl	800add0 <__sinit>
 8009de2:	4b2e      	ldr	r3, [pc, #184]	; (8009e9c <__swsetup_r+0xd0>)
 8009de4:	429c      	cmp	r4, r3
 8009de6:	d10f      	bne.n	8009e08 <__swsetup_r+0x3c>
 8009de8:	686c      	ldr	r4, [r5, #4]
 8009dea:	89a3      	ldrh	r3, [r4, #12]
 8009dec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009df0:	0719      	lsls	r1, r3, #28
 8009df2:	d42c      	bmi.n	8009e4e <__swsetup_r+0x82>
 8009df4:	06dd      	lsls	r5, r3, #27
 8009df6:	d411      	bmi.n	8009e1c <__swsetup_r+0x50>
 8009df8:	2309      	movs	r3, #9
 8009dfa:	6033      	str	r3, [r6, #0]
 8009dfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e00:	81a3      	strh	r3, [r4, #12]
 8009e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e06:	e03e      	b.n	8009e86 <__swsetup_r+0xba>
 8009e08:	4b25      	ldr	r3, [pc, #148]	; (8009ea0 <__swsetup_r+0xd4>)
 8009e0a:	429c      	cmp	r4, r3
 8009e0c:	d101      	bne.n	8009e12 <__swsetup_r+0x46>
 8009e0e:	68ac      	ldr	r4, [r5, #8]
 8009e10:	e7eb      	b.n	8009dea <__swsetup_r+0x1e>
 8009e12:	4b24      	ldr	r3, [pc, #144]	; (8009ea4 <__swsetup_r+0xd8>)
 8009e14:	429c      	cmp	r4, r3
 8009e16:	bf08      	it	eq
 8009e18:	68ec      	ldreq	r4, [r5, #12]
 8009e1a:	e7e6      	b.n	8009dea <__swsetup_r+0x1e>
 8009e1c:	0758      	lsls	r0, r3, #29
 8009e1e:	d512      	bpl.n	8009e46 <__swsetup_r+0x7a>
 8009e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e22:	b141      	cbz	r1, 8009e36 <__swsetup_r+0x6a>
 8009e24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e28:	4299      	cmp	r1, r3
 8009e2a:	d002      	beq.n	8009e32 <__swsetup_r+0x66>
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	f001 fc89 	bl	800b744 <_free_r>
 8009e32:	2300      	movs	r3, #0
 8009e34:	6363      	str	r3, [r4, #52]	; 0x34
 8009e36:	89a3      	ldrh	r3, [r4, #12]
 8009e38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e3c:	81a3      	strh	r3, [r4, #12]
 8009e3e:	2300      	movs	r3, #0
 8009e40:	6063      	str	r3, [r4, #4]
 8009e42:	6923      	ldr	r3, [r4, #16]
 8009e44:	6023      	str	r3, [r4, #0]
 8009e46:	89a3      	ldrh	r3, [r4, #12]
 8009e48:	f043 0308 	orr.w	r3, r3, #8
 8009e4c:	81a3      	strh	r3, [r4, #12]
 8009e4e:	6923      	ldr	r3, [r4, #16]
 8009e50:	b94b      	cbnz	r3, 8009e66 <__swsetup_r+0x9a>
 8009e52:	89a3      	ldrh	r3, [r4, #12]
 8009e54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e5c:	d003      	beq.n	8009e66 <__swsetup_r+0x9a>
 8009e5e:	4621      	mov	r1, r4
 8009e60:	4630      	mov	r0, r6
 8009e62:	f001 f87f 	bl	800af64 <__smakebuf_r>
 8009e66:	89a0      	ldrh	r0, [r4, #12]
 8009e68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e6c:	f010 0301 	ands.w	r3, r0, #1
 8009e70:	d00a      	beq.n	8009e88 <__swsetup_r+0xbc>
 8009e72:	2300      	movs	r3, #0
 8009e74:	60a3      	str	r3, [r4, #8]
 8009e76:	6963      	ldr	r3, [r4, #20]
 8009e78:	425b      	negs	r3, r3
 8009e7a:	61a3      	str	r3, [r4, #24]
 8009e7c:	6923      	ldr	r3, [r4, #16]
 8009e7e:	b943      	cbnz	r3, 8009e92 <__swsetup_r+0xc6>
 8009e80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e84:	d1ba      	bne.n	8009dfc <__swsetup_r+0x30>
 8009e86:	bd70      	pop	{r4, r5, r6, pc}
 8009e88:	0781      	lsls	r1, r0, #30
 8009e8a:	bf58      	it	pl
 8009e8c:	6963      	ldrpl	r3, [r4, #20]
 8009e8e:	60a3      	str	r3, [r4, #8]
 8009e90:	e7f4      	b.n	8009e7c <__swsetup_r+0xb0>
 8009e92:	2000      	movs	r0, #0
 8009e94:	e7f7      	b.n	8009e86 <__swsetup_r+0xba>
 8009e96:	bf00      	nop
 8009e98:	20000018 	.word	0x20000018
 8009e9c:	0800e048 	.word	0x0800e048
 8009ea0:	0800e068 	.word	0x0800e068
 8009ea4:	0800e028 	.word	0x0800e028

08009ea8 <quorem>:
 8009ea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eac:	6903      	ldr	r3, [r0, #16]
 8009eae:	690c      	ldr	r4, [r1, #16]
 8009eb0:	42a3      	cmp	r3, r4
 8009eb2:	4607      	mov	r7, r0
 8009eb4:	f2c0 8081 	blt.w	8009fba <quorem+0x112>
 8009eb8:	3c01      	subs	r4, #1
 8009eba:	f101 0814 	add.w	r8, r1, #20
 8009ebe:	f100 0514 	add.w	r5, r0, #20
 8009ec2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ec6:	9301      	str	r3, [sp, #4]
 8009ec8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ecc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ed8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009edc:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ee0:	d331      	bcc.n	8009f46 <quorem+0x9e>
 8009ee2:	f04f 0e00 	mov.w	lr, #0
 8009ee6:	4640      	mov	r0, r8
 8009ee8:	46ac      	mov	ip, r5
 8009eea:	46f2      	mov	sl, lr
 8009eec:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ef0:	b293      	uxth	r3, r2
 8009ef2:	fb06 e303 	mla	r3, r6, r3, lr
 8009ef6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	ebaa 0303 	sub.w	r3, sl, r3
 8009f00:	f8dc a000 	ldr.w	sl, [ip]
 8009f04:	0c12      	lsrs	r2, r2, #16
 8009f06:	fa13 f38a 	uxtah	r3, r3, sl
 8009f0a:	fb06 e202 	mla	r2, r6, r2, lr
 8009f0e:	9300      	str	r3, [sp, #0]
 8009f10:	9b00      	ldr	r3, [sp, #0]
 8009f12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f16:	b292      	uxth	r2, r2
 8009f18:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009f1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f20:	f8bd 3000 	ldrh.w	r3, [sp]
 8009f24:	4581      	cmp	r9, r0
 8009f26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f2a:	f84c 3b04 	str.w	r3, [ip], #4
 8009f2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f32:	d2db      	bcs.n	8009eec <quorem+0x44>
 8009f34:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f38:	b92b      	cbnz	r3, 8009f46 <quorem+0x9e>
 8009f3a:	9b01      	ldr	r3, [sp, #4]
 8009f3c:	3b04      	subs	r3, #4
 8009f3e:	429d      	cmp	r5, r3
 8009f40:	461a      	mov	r2, r3
 8009f42:	d32e      	bcc.n	8009fa2 <quorem+0xfa>
 8009f44:	613c      	str	r4, [r7, #16]
 8009f46:	4638      	mov	r0, r7
 8009f48:	f001 fae4 	bl	800b514 <__mcmp>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	db24      	blt.n	8009f9a <quorem+0xf2>
 8009f50:	3601      	adds	r6, #1
 8009f52:	4628      	mov	r0, r5
 8009f54:	f04f 0c00 	mov.w	ip, #0
 8009f58:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f5c:	f8d0 e000 	ldr.w	lr, [r0]
 8009f60:	b293      	uxth	r3, r2
 8009f62:	ebac 0303 	sub.w	r3, ip, r3
 8009f66:	0c12      	lsrs	r2, r2, #16
 8009f68:	fa13 f38e 	uxtah	r3, r3, lr
 8009f6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f7a:	45c1      	cmp	r9, r8
 8009f7c:	f840 3b04 	str.w	r3, [r0], #4
 8009f80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f84:	d2e8      	bcs.n	8009f58 <quorem+0xb0>
 8009f86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f8e:	b922      	cbnz	r2, 8009f9a <quorem+0xf2>
 8009f90:	3b04      	subs	r3, #4
 8009f92:	429d      	cmp	r5, r3
 8009f94:	461a      	mov	r2, r3
 8009f96:	d30a      	bcc.n	8009fae <quorem+0x106>
 8009f98:	613c      	str	r4, [r7, #16]
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	b003      	add	sp, #12
 8009f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa2:	6812      	ldr	r2, [r2, #0]
 8009fa4:	3b04      	subs	r3, #4
 8009fa6:	2a00      	cmp	r2, #0
 8009fa8:	d1cc      	bne.n	8009f44 <quorem+0x9c>
 8009faa:	3c01      	subs	r4, #1
 8009fac:	e7c7      	b.n	8009f3e <quorem+0x96>
 8009fae:	6812      	ldr	r2, [r2, #0]
 8009fb0:	3b04      	subs	r3, #4
 8009fb2:	2a00      	cmp	r2, #0
 8009fb4:	d1f0      	bne.n	8009f98 <quorem+0xf0>
 8009fb6:	3c01      	subs	r4, #1
 8009fb8:	e7eb      	b.n	8009f92 <quorem+0xea>
 8009fba:	2000      	movs	r0, #0
 8009fbc:	e7ee      	b.n	8009f9c <quorem+0xf4>
	...

08009fc0 <_dtoa_r>:
 8009fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc4:	ed2d 8b04 	vpush	{d8-d9}
 8009fc8:	ec57 6b10 	vmov	r6, r7, d0
 8009fcc:	b093      	sub	sp, #76	; 0x4c
 8009fce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009fd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009fd4:	9106      	str	r1, [sp, #24]
 8009fd6:	ee10 aa10 	vmov	sl, s0
 8009fda:	4604      	mov	r4, r0
 8009fdc:	9209      	str	r2, [sp, #36]	; 0x24
 8009fde:	930c      	str	r3, [sp, #48]	; 0x30
 8009fe0:	46bb      	mov	fp, r7
 8009fe2:	b975      	cbnz	r5, 800a002 <_dtoa_r+0x42>
 8009fe4:	2010      	movs	r0, #16
 8009fe6:	f000 fffd 	bl	800afe4 <malloc>
 8009fea:	4602      	mov	r2, r0
 8009fec:	6260      	str	r0, [r4, #36]	; 0x24
 8009fee:	b920      	cbnz	r0, 8009ffa <_dtoa_r+0x3a>
 8009ff0:	4ba7      	ldr	r3, [pc, #668]	; (800a290 <_dtoa_r+0x2d0>)
 8009ff2:	21ea      	movs	r1, #234	; 0xea
 8009ff4:	48a7      	ldr	r0, [pc, #668]	; (800a294 <_dtoa_r+0x2d4>)
 8009ff6:	f001 fe45 	bl	800bc84 <__assert_func>
 8009ffa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ffe:	6005      	str	r5, [r0, #0]
 800a000:	60c5      	str	r5, [r0, #12]
 800a002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a004:	6819      	ldr	r1, [r3, #0]
 800a006:	b151      	cbz	r1, 800a01e <_dtoa_r+0x5e>
 800a008:	685a      	ldr	r2, [r3, #4]
 800a00a:	604a      	str	r2, [r1, #4]
 800a00c:	2301      	movs	r3, #1
 800a00e:	4093      	lsls	r3, r2
 800a010:	608b      	str	r3, [r1, #8]
 800a012:	4620      	mov	r0, r4
 800a014:	f001 f83c 	bl	800b090 <_Bfree>
 800a018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a01a:	2200      	movs	r2, #0
 800a01c:	601a      	str	r2, [r3, #0]
 800a01e:	1e3b      	subs	r3, r7, #0
 800a020:	bfaa      	itet	ge
 800a022:	2300      	movge	r3, #0
 800a024:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a028:	f8c8 3000 	strge.w	r3, [r8]
 800a02c:	4b9a      	ldr	r3, [pc, #616]	; (800a298 <_dtoa_r+0x2d8>)
 800a02e:	bfbc      	itt	lt
 800a030:	2201      	movlt	r2, #1
 800a032:	f8c8 2000 	strlt.w	r2, [r8]
 800a036:	ea33 030b 	bics.w	r3, r3, fp
 800a03a:	d11b      	bne.n	800a074 <_dtoa_r+0xb4>
 800a03c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a03e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a042:	6013      	str	r3, [r2, #0]
 800a044:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a048:	4333      	orrs	r3, r6
 800a04a:	f000 8592 	beq.w	800ab72 <_dtoa_r+0xbb2>
 800a04e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a050:	b963      	cbnz	r3, 800a06c <_dtoa_r+0xac>
 800a052:	4b92      	ldr	r3, [pc, #584]	; (800a29c <_dtoa_r+0x2dc>)
 800a054:	e022      	b.n	800a09c <_dtoa_r+0xdc>
 800a056:	4b92      	ldr	r3, [pc, #584]	; (800a2a0 <_dtoa_r+0x2e0>)
 800a058:	9301      	str	r3, [sp, #4]
 800a05a:	3308      	adds	r3, #8
 800a05c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a05e:	6013      	str	r3, [r2, #0]
 800a060:	9801      	ldr	r0, [sp, #4]
 800a062:	b013      	add	sp, #76	; 0x4c
 800a064:	ecbd 8b04 	vpop	{d8-d9}
 800a068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a06c:	4b8b      	ldr	r3, [pc, #556]	; (800a29c <_dtoa_r+0x2dc>)
 800a06e:	9301      	str	r3, [sp, #4]
 800a070:	3303      	adds	r3, #3
 800a072:	e7f3      	b.n	800a05c <_dtoa_r+0x9c>
 800a074:	2200      	movs	r2, #0
 800a076:	2300      	movs	r3, #0
 800a078:	4650      	mov	r0, sl
 800a07a:	4659      	mov	r1, fp
 800a07c:	f7f6 fd44 	bl	8000b08 <__aeabi_dcmpeq>
 800a080:	ec4b ab19 	vmov	d9, sl, fp
 800a084:	4680      	mov	r8, r0
 800a086:	b158      	cbz	r0, 800a0a0 <_dtoa_r+0xe0>
 800a088:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a08a:	2301      	movs	r3, #1
 800a08c:	6013      	str	r3, [r2, #0]
 800a08e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a090:	2b00      	cmp	r3, #0
 800a092:	f000 856b 	beq.w	800ab6c <_dtoa_r+0xbac>
 800a096:	4883      	ldr	r0, [pc, #524]	; (800a2a4 <_dtoa_r+0x2e4>)
 800a098:	6018      	str	r0, [r3, #0]
 800a09a:	1e43      	subs	r3, r0, #1
 800a09c:	9301      	str	r3, [sp, #4]
 800a09e:	e7df      	b.n	800a060 <_dtoa_r+0xa0>
 800a0a0:	ec4b ab10 	vmov	d0, sl, fp
 800a0a4:	aa10      	add	r2, sp, #64	; 0x40
 800a0a6:	a911      	add	r1, sp, #68	; 0x44
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f001 fad9 	bl	800b660 <__d2b>
 800a0ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a0b2:	ee08 0a10 	vmov	s16, r0
 800a0b6:	2d00      	cmp	r5, #0
 800a0b8:	f000 8084 	beq.w	800a1c4 <_dtoa_r+0x204>
 800a0bc:	ee19 3a90 	vmov	r3, s19
 800a0c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a0c8:	4656      	mov	r6, sl
 800a0ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a0ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a0d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a0d6:	4b74      	ldr	r3, [pc, #464]	; (800a2a8 <_dtoa_r+0x2e8>)
 800a0d8:	2200      	movs	r2, #0
 800a0da:	4630      	mov	r0, r6
 800a0dc:	4639      	mov	r1, r7
 800a0de:	f7f6 f8f3 	bl	80002c8 <__aeabi_dsub>
 800a0e2:	a365      	add	r3, pc, #404	; (adr r3, 800a278 <_dtoa_r+0x2b8>)
 800a0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e8:	f7f6 faa6 	bl	8000638 <__aeabi_dmul>
 800a0ec:	a364      	add	r3, pc, #400	; (adr r3, 800a280 <_dtoa_r+0x2c0>)
 800a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f2:	f7f6 f8eb 	bl	80002cc <__adddf3>
 800a0f6:	4606      	mov	r6, r0
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	460f      	mov	r7, r1
 800a0fc:	f7f6 fa32 	bl	8000564 <__aeabi_i2d>
 800a100:	a361      	add	r3, pc, #388	; (adr r3, 800a288 <_dtoa_r+0x2c8>)
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	f7f6 fa97 	bl	8000638 <__aeabi_dmul>
 800a10a:	4602      	mov	r2, r0
 800a10c:	460b      	mov	r3, r1
 800a10e:	4630      	mov	r0, r6
 800a110:	4639      	mov	r1, r7
 800a112:	f7f6 f8db 	bl	80002cc <__adddf3>
 800a116:	4606      	mov	r6, r0
 800a118:	460f      	mov	r7, r1
 800a11a:	f7f6 fd3d 	bl	8000b98 <__aeabi_d2iz>
 800a11e:	2200      	movs	r2, #0
 800a120:	9000      	str	r0, [sp, #0]
 800a122:	2300      	movs	r3, #0
 800a124:	4630      	mov	r0, r6
 800a126:	4639      	mov	r1, r7
 800a128:	f7f6 fcf8 	bl	8000b1c <__aeabi_dcmplt>
 800a12c:	b150      	cbz	r0, 800a144 <_dtoa_r+0x184>
 800a12e:	9800      	ldr	r0, [sp, #0]
 800a130:	f7f6 fa18 	bl	8000564 <__aeabi_i2d>
 800a134:	4632      	mov	r2, r6
 800a136:	463b      	mov	r3, r7
 800a138:	f7f6 fce6 	bl	8000b08 <__aeabi_dcmpeq>
 800a13c:	b910      	cbnz	r0, 800a144 <_dtoa_r+0x184>
 800a13e:	9b00      	ldr	r3, [sp, #0]
 800a140:	3b01      	subs	r3, #1
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	9b00      	ldr	r3, [sp, #0]
 800a146:	2b16      	cmp	r3, #22
 800a148:	d85a      	bhi.n	800a200 <_dtoa_r+0x240>
 800a14a:	9a00      	ldr	r2, [sp, #0]
 800a14c:	4b57      	ldr	r3, [pc, #348]	; (800a2ac <_dtoa_r+0x2ec>)
 800a14e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a156:	ec51 0b19 	vmov	r0, r1, d9
 800a15a:	f7f6 fcdf 	bl	8000b1c <__aeabi_dcmplt>
 800a15e:	2800      	cmp	r0, #0
 800a160:	d050      	beq.n	800a204 <_dtoa_r+0x244>
 800a162:	9b00      	ldr	r3, [sp, #0]
 800a164:	3b01      	subs	r3, #1
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	2300      	movs	r3, #0
 800a16a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a16c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a16e:	1b5d      	subs	r5, r3, r5
 800a170:	1e6b      	subs	r3, r5, #1
 800a172:	9305      	str	r3, [sp, #20]
 800a174:	bf45      	ittet	mi
 800a176:	f1c5 0301 	rsbmi	r3, r5, #1
 800a17a:	9304      	strmi	r3, [sp, #16]
 800a17c:	2300      	movpl	r3, #0
 800a17e:	2300      	movmi	r3, #0
 800a180:	bf4c      	ite	mi
 800a182:	9305      	strmi	r3, [sp, #20]
 800a184:	9304      	strpl	r3, [sp, #16]
 800a186:	9b00      	ldr	r3, [sp, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	db3d      	blt.n	800a208 <_dtoa_r+0x248>
 800a18c:	9b05      	ldr	r3, [sp, #20]
 800a18e:	9a00      	ldr	r2, [sp, #0]
 800a190:	920a      	str	r2, [sp, #40]	; 0x28
 800a192:	4413      	add	r3, r2
 800a194:	9305      	str	r3, [sp, #20]
 800a196:	2300      	movs	r3, #0
 800a198:	9307      	str	r3, [sp, #28]
 800a19a:	9b06      	ldr	r3, [sp, #24]
 800a19c:	2b09      	cmp	r3, #9
 800a19e:	f200 8089 	bhi.w	800a2b4 <_dtoa_r+0x2f4>
 800a1a2:	2b05      	cmp	r3, #5
 800a1a4:	bfc4      	itt	gt
 800a1a6:	3b04      	subgt	r3, #4
 800a1a8:	9306      	strgt	r3, [sp, #24]
 800a1aa:	9b06      	ldr	r3, [sp, #24]
 800a1ac:	f1a3 0302 	sub.w	r3, r3, #2
 800a1b0:	bfcc      	ite	gt
 800a1b2:	2500      	movgt	r5, #0
 800a1b4:	2501      	movle	r5, #1
 800a1b6:	2b03      	cmp	r3, #3
 800a1b8:	f200 8087 	bhi.w	800a2ca <_dtoa_r+0x30a>
 800a1bc:	e8df f003 	tbb	[pc, r3]
 800a1c0:	59383a2d 	.word	0x59383a2d
 800a1c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a1c8:	441d      	add	r5, r3
 800a1ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a1ce:	2b20      	cmp	r3, #32
 800a1d0:	bfc1      	itttt	gt
 800a1d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a1d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a1da:	fa0b f303 	lslgt.w	r3, fp, r3
 800a1de:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a1e2:	bfda      	itte	le
 800a1e4:	f1c3 0320 	rsble	r3, r3, #32
 800a1e8:	fa06 f003 	lslle.w	r0, r6, r3
 800a1ec:	4318      	orrgt	r0, r3
 800a1ee:	f7f6 f9a9 	bl	8000544 <__aeabi_ui2d>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a1fa:	3d01      	subs	r5, #1
 800a1fc:	930e      	str	r3, [sp, #56]	; 0x38
 800a1fe:	e76a      	b.n	800a0d6 <_dtoa_r+0x116>
 800a200:	2301      	movs	r3, #1
 800a202:	e7b2      	b.n	800a16a <_dtoa_r+0x1aa>
 800a204:	900b      	str	r0, [sp, #44]	; 0x2c
 800a206:	e7b1      	b.n	800a16c <_dtoa_r+0x1ac>
 800a208:	9b04      	ldr	r3, [sp, #16]
 800a20a:	9a00      	ldr	r2, [sp, #0]
 800a20c:	1a9b      	subs	r3, r3, r2
 800a20e:	9304      	str	r3, [sp, #16]
 800a210:	4253      	negs	r3, r2
 800a212:	9307      	str	r3, [sp, #28]
 800a214:	2300      	movs	r3, #0
 800a216:	930a      	str	r3, [sp, #40]	; 0x28
 800a218:	e7bf      	b.n	800a19a <_dtoa_r+0x1da>
 800a21a:	2300      	movs	r3, #0
 800a21c:	9308      	str	r3, [sp, #32]
 800a21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a220:	2b00      	cmp	r3, #0
 800a222:	dc55      	bgt.n	800a2d0 <_dtoa_r+0x310>
 800a224:	2301      	movs	r3, #1
 800a226:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a22a:	461a      	mov	r2, r3
 800a22c:	9209      	str	r2, [sp, #36]	; 0x24
 800a22e:	e00c      	b.n	800a24a <_dtoa_r+0x28a>
 800a230:	2301      	movs	r3, #1
 800a232:	e7f3      	b.n	800a21c <_dtoa_r+0x25c>
 800a234:	2300      	movs	r3, #0
 800a236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a238:	9308      	str	r3, [sp, #32]
 800a23a:	9b00      	ldr	r3, [sp, #0]
 800a23c:	4413      	add	r3, r2
 800a23e:	9302      	str	r3, [sp, #8]
 800a240:	3301      	adds	r3, #1
 800a242:	2b01      	cmp	r3, #1
 800a244:	9303      	str	r3, [sp, #12]
 800a246:	bfb8      	it	lt
 800a248:	2301      	movlt	r3, #1
 800a24a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a24c:	2200      	movs	r2, #0
 800a24e:	6042      	str	r2, [r0, #4]
 800a250:	2204      	movs	r2, #4
 800a252:	f102 0614 	add.w	r6, r2, #20
 800a256:	429e      	cmp	r6, r3
 800a258:	6841      	ldr	r1, [r0, #4]
 800a25a:	d93d      	bls.n	800a2d8 <_dtoa_r+0x318>
 800a25c:	4620      	mov	r0, r4
 800a25e:	f000 fed7 	bl	800b010 <_Balloc>
 800a262:	9001      	str	r0, [sp, #4]
 800a264:	2800      	cmp	r0, #0
 800a266:	d13b      	bne.n	800a2e0 <_dtoa_r+0x320>
 800a268:	4b11      	ldr	r3, [pc, #68]	; (800a2b0 <_dtoa_r+0x2f0>)
 800a26a:	4602      	mov	r2, r0
 800a26c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a270:	e6c0      	b.n	8009ff4 <_dtoa_r+0x34>
 800a272:	2301      	movs	r3, #1
 800a274:	e7df      	b.n	800a236 <_dtoa_r+0x276>
 800a276:	bf00      	nop
 800a278:	636f4361 	.word	0x636f4361
 800a27c:	3fd287a7 	.word	0x3fd287a7
 800a280:	8b60c8b3 	.word	0x8b60c8b3
 800a284:	3fc68a28 	.word	0x3fc68a28
 800a288:	509f79fb 	.word	0x509f79fb
 800a28c:	3fd34413 	.word	0x3fd34413
 800a290:	0800dfa5 	.word	0x0800dfa5
 800a294:	0800dfbc 	.word	0x0800dfbc
 800a298:	7ff00000 	.word	0x7ff00000
 800a29c:	0800dfa1 	.word	0x0800dfa1
 800a2a0:	0800df98 	.word	0x0800df98
 800a2a4:	0800df75 	.word	0x0800df75
 800a2a8:	3ff80000 	.word	0x3ff80000
 800a2ac:	0800e110 	.word	0x0800e110
 800a2b0:	0800e017 	.word	0x0800e017
 800a2b4:	2501      	movs	r5, #1
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	9306      	str	r3, [sp, #24]
 800a2ba:	9508      	str	r5, [sp, #32]
 800a2bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	2312      	movs	r3, #18
 800a2c8:	e7b0      	b.n	800a22c <_dtoa_r+0x26c>
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	9308      	str	r3, [sp, #32]
 800a2ce:	e7f5      	b.n	800a2bc <_dtoa_r+0x2fc>
 800a2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a2d6:	e7b8      	b.n	800a24a <_dtoa_r+0x28a>
 800a2d8:	3101      	adds	r1, #1
 800a2da:	6041      	str	r1, [r0, #4]
 800a2dc:	0052      	lsls	r2, r2, #1
 800a2de:	e7b8      	b.n	800a252 <_dtoa_r+0x292>
 800a2e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2e2:	9a01      	ldr	r2, [sp, #4]
 800a2e4:	601a      	str	r2, [r3, #0]
 800a2e6:	9b03      	ldr	r3, [sp, #12]
 800a2e8:	2b0e      	cmp	r3, #14
 800a2ea:	f200 809d 	bhi.w	800a428 <_dtoa_r+0x468>
 800a2ee:	2d00      	cmp	r5, #0
 800a2f0:	f000 809a 	beq.w	800a428 <_dtoa_r+0x468>
 800a2f4:	9b00      	ldr	r3, [sp, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	dd32      	ble.n	800a360 <_dtoa_r+0x3a0>
 800a2fa:	4ab7      	ldr	r2, [pc, #732]	; (800a5d8 <_dtoa_r+0x618>)
 800a2fc:	f003 030f 	and.w	r3, r3, #15
 800a300:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a304:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a308:	9b00      	ldr	r3, [sp, #0]
 800a30a:	05d8      	lsls	r0, r3, #23
 800a30c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a310:	d516      	bpl.n	800a340 <_dtoa_r+0x380>
 800a312:	4bb2      	ldr	r3, [pc, #712]	; (800a5dc <_dtoa_r+0x61c>)
 800a314:	ec51 0b19 	vmov	r0, r1, d9
 800a318:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a31c:	f7f6 fab6 	bl	800088c <__aeabi_ddiv>
 800a320:	f007 070f 	and.w	r7, r7, #15
 800a324:	4682      	mov	sl, r0
 800a326:	468b      	mov	fp, r1
 800a328:	2503      	movs	r5, #3
 800a32a:	4eac      	ldr	r6, [pc, #688]	; (800a5dc <_dtoa_r+0x61c>)
 800a32c:	b957      	cbnz	r7, 800a344 <_dtoa_r+0x384>
 800a32e:	4642      	mov	r2, r8
 800a330:	464b      	mov	r3, r9
 800a332:	4650      	mov	r0, sl
 800a334:	4659      	mov	r1, fp
 800a336:	f7f6 faa9 	bl	800088c <__aeabi_ddiv>
 800a33a:	4682      	mov	sl, r0
 800a33c:	468b      	mov	fp, r1
 800a33e:	e028      	b.n	800a392 <_dtoa_r+0x3d2>
 800a340:	2502      	movs	r5, #2
 800a342:	e7f2      	b.n	800a32a <_dtoa_r+0x36a>
 800a344:	07f9      	lsls	r1, r7, #31
 800a346:	d508      	bpl.n	800a35a <_dtoa_r+0x39a>
 800a348:	4640      	mov	r0, r8
 800a34a:	4649      	mov	r1, r9
 800a34c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a350:	f7f6 f972 	bl	8000638 <__aeabi_dmul>
 800a354:	3501      	adds	r5, #1
 800a356:	4680      	mov	r8, r0
 800a358:	4689      	mov	r9, r1
 800a35a:	107f      	asrs	r7, r7, #1
 800a35c:	3608      	adds	r6, #8
 800a35e:	e7e5      	b.n	800a32c <_dtoa_r+0x36c>
 800a360:	f000 809b 	beq.w	800a49a <_dtoa_r+0x4da>
 800a364:	9b00      	ldr	r3, [sp, #0]
 800a366:	4f9d      	ldr	r7, [pc, #628]	; (800a5dc <_dtoa_r+0x61c>)
 800a368:	425e      	negs	r6, r3
 800a36a:	4b9b      	ldr	r3, [pc, #620]	; (800a5d8 <_dtoa_r+0x618>)
 800a36c:	f006 020f 	and.w	r2, r6, #15
 800a370:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a378:	ec51 0b19 	vmov	r0, r1, d9
 800a37c:	f7f6 f95c 	bl	8000638 <__aeabi_dmul>
 800a380:	1136      	asrs	r6, r6, #4
 800a382:	4682      	mov	sl, r0
 800a384:	468b      	mov	fp, r1
 800a386:	2300      	movs	r3, #0
 800a388:	2502      	movs	r5, #2
 800a38a:	2e00      	cmp	r6, #0
 800a38c:	d17a      	bne.n	800a484 <_dtoa_r+0x4c4>
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d1d3      	bne.n	800a33a <_dtoa_r+0x37a>
 800a392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a394:	2b00      	cmp	r3, #0
 800a396:	f000 8082 	beq.w	800a49e <_dtoa_r+0x4de>
 800a39a:	4b91      	ldr	r3, [pc, #580]	; (800a5e0 <_dtoa_r+0x620>)
 800a39c:	2200      	movs	r2, #0
 800a39e:	4650      	mov	r0, sl
 800a3a0:	4659      	mov	r1, fp
 800a3a2:	f7f6 fbbb 	bl	8000b1c <__aeabi_dcmplt>
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d079      	beq.n	800a49e <_dtoa_r+0x4de>
 800a3aa:	9b03      	ldr	r3, [sp, #12]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d076      	beq.n	800a49e <_dtoa_r+0x4de>
 800a3b0:	9b02      	ldr	r3, [sp, #8]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	dd36      	ble.n	800a424 <_dtoa_r+0x464>
 800a3b6:	9b00      	ldr	r3, [sp, #0]
 800a3b8:	4650      	mov	r0, sl
 800a3ba:	4659      	mov	r1, fp
 800a3bc:	1e5f      	subs	r7, r3, #1
 800a3be:	2200      	movs	r2, #0
 800a3c0:	4b88      	ldr	r3, [pc, #544]	; (800a5e4 <_dtoa_r+0x624>)
 800a3c2:	f7f6 f939 	bl	8000638 <__aeabi_dmul>
 800a3c6:	9e02      	ldr	r6, [sp, #8]
 800a3c8:	4682      	mov	sl, r0
 800a3ca:	468b      	mov	fp, r1
 800a3cc:	3501      	adds	r5, #1
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	f7f6 f8c8 	bl	8000564 <__aeabi_i2d>
 800a3d4:	4652      	mov	r2, sl
 800a3d6:	465b      	mov	r3, fp
 800a3d8:	f7f6 f92e 	bl	8000638 <__aeabi_dmul>
 800a3dc:	4b82      	ldr	r3, [pc, #520]	; (800a5e8 <_dtoa_r+0x628>)
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f7f5 ff74 	bl	80002cc <__adddf3>
 800a3e4:	46d0      	mov	r8, sl
 800a3e6:	46d9      	mov	r9, fp
 800a3e8:	4682      	mov	sl, r0
 800a3ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a3ee:	2e00      	cmp	r6, #0
 800a3f0:	d158      	bne.n	800a4a4 <_dtoa_r+0x4e4>
 800a3f2:	4b7e      	ldr	r3, [pc, #504]	; (800a5ec <_dtoa_r+0x62c>)
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	4640      	mov	r0, r8
 800a3f8:	4649      	mov	r1, r9
 800a3fa:	f7f5 ff65 	bl	80002c8 <__aeabi_dsub>
 800a3fe:	4652      	mov	r2, sl
 800a400:	465b      	mov	r3, fp
 800a402:	4680      	mov	r8, r0
 800a404:	4689      	mov	r9, r1
 800a406:	f7f6 fba7 	bl	8000b58 <__aeabi_dcmpgt>
 800a40a:	2800      	cmp	r0, #0
 800a40c:	f040 8295 	bne.w	800a93a <_dtoa_r+0x97a>
 800a410:	4652      	mov	r2, sl
 800a412:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a416:	4640      	mov	r0, r8
 800a418:	4649      	mov	r1, r9
 800a41a:	f7f6 fb7f 	bl	8000b1c <__aeabi_dcmplt>
 800a41e:	2800      	cmp	r0, #0
 800a420:	f040 8289 	bne.w	800a936 <_dtoa_r+0x976>
 800a424:	ec5b ab19 	vmov	sl, fp, d9
 800a428:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f2c0 8148 	blt.w	800a6c0 <_dtoa_r+0x700>
 800a430:	9a00      	ldr	r2, [sp, #0]
 800a432:	2a0e      	cmp	r2, #14
 800a434:	f300 8144 	bgt.w	800a6c0 <_dtoa_r+0x700>
 800a438:	4b67      	ldr	r3, [pc, #412]	; (800a5d8 <_dtoa_r+0x618>)
 800a43a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a43e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a444:	2b00      	cmp	r3, #0
 800a446:	f280 80d5 	bge.w	800a5f4 <_dtoa_r+0x634>
 800a44a:	9b03      	ldr	r3, [sp, #12]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f300 80d1 	bgt.w	800a5f4 <_dtoa_r+0x634>
 800a452:	f040 826f 	bne.w	800a934 <_dtoa_r+0x974>
 800a456:	4b65      	ldr	r3, [pc, #404]	; (800a5ec <_dtoa_r+0x62c>)
 800a458:	2200      	movs	r2, #0
 800a45a:	4640      	mov	r0, r8
 800a45c:	4649      	mov	r1, r9
 800a45e:	f7f6 f8eb 	bl	8000638 <__aeabi_dmul>
 800a462:	4652      	mov	r2, sl
 800a464:	465b      	mov	r3, fp
 800a466:	f7f6 fb6d 	bl	8000b44 <__aeabi_dcmpge>
 800a46a:	9e03      	ldr	r6, [sp, #12]
 800a46c:	4637      	mov	r7, r6
 800a46e:	2800      	cmp	r0, #0
 800a470:	f040 8245 	bne.w	800a8fe <_dtoa_r+0x93e>
 800a474:	9d01      	ldr	r5, [sp, #4]
 800a476:	2331      	movs	r3, #49	; 0x31
 800a478:	f805 3b01 	strb.w	r3, [r5], #1
 800a47c:	9b00      	ldr	r3, [sp, #0]
 800a47e:	3301      	adds	r3, #1
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	e240      	b.n	800a906 <_dtoa_r+0x946>
 800a484:	07f2      	lsls	r2, r6, #31
 800a486:	d505      	bpl.n	800a494 <_dtoa_r+0x4d4>
 800a488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a48c:	f7f6 f8d4 	bl	8000638 <__aeabi_dmul>
 800a490:	3501      	adds	r5, #1
 800a492:	2301      	movs	r3, #1
 800a494:	1076      	asrs	r6, r6, #1
 800a496:	3708      	adds	r7, #8
 800a498:	e777      	b.n	800a38a <_dtoa_r+0x3ca>
 800a49a:	2502      	movs	r5, #2
 800a49c:	e779      	b.n	800a392 <_dtoa_r+0x3d2>
 800a49e:	9f00      	ldr	r7, [sp, #0]
 800a4a0:	9e03      	ldr	r6, [sp, #12]
 800a4a2:	e794      	b.n	800a3ce <_dtoa_r+0x40e>
 800a4a4:	9901      	ldr	r1, [sp, #4]
 800a4a6:	4b4c      	ldr	r3, [pc, #304]	; (800a5d8 <_dtoa_r+0x618>)
 800a4a8:	4431      	add	r1, r6
 800a4aa:	910d      	str	r1, [sp, #52]	; 0x34
 800a4ac:	9908      	ldr	r1, [sp, #32]
 800a4ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a4b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a4b6:	2900      	cmp	r1, #0
 800a4b8:	d043      	beq.n	800a542 <_dtoa_r+0x582>
 800a4ba:	494d      	ldr	r1, [pc, #308]	; (800a5f0 <_dtoa_r+0x630>)
 800a4bc:	2000      	movs	r0, #0
 800a4be:	f7f6 f9e5 	bl	800088c <__aeabi_ddiv>
 800a4c2:	4652      	mov	r2, sl
 800a4c4:	465b      	mov	r3, fp
 800a4c6:	f7f5 feff 	bl	80002c8 <__aeabi_dsub>
 800a4ca:	9d01      	ldr	r5, [sp, #4]
 800a4cc:	4682      	mov	sl, r0
 800a4ce:	468b      	mov	fp, r1
 800a4d0:	4649      	mov	r1, r9
 800a4d2:	4640      	mov	r0, r8
 800a4d4:	f7f6 fb60 	bl	8000b98 <__aeabi_d2iz>
 800a4d8:	4606      	mov	r6, r0
 800a4da:	f7f6 f843 	bl	8000564 <__aeabi_i2d>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	4640      	mov	r0, r8
 800a4e4:	4649      	mov	r1, r9
 800a4e6:	f7f5 feef 	bl	80002c8 <__aeabi_dsub>
 800a4ea:	3630      	adds	r6, #48	; 0x30
 800a4ec:	f805 6b01 	strb.w	r6, [r5], #1
 800a4f0:	4652      	mov	r2, sl
 800a4f2:	465b      	mov	r3, fp
 800a4f4:	4680      	mov	r8, r0
 800a4f6:	4689      	mov	r9, r1
 800a4f8:	f7f6 fb10 	bl	8000b1c <__aeabi_dcmplt>
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d163      	bne.n	800a5c8 <_dtoa_r+0x608>
 800a500:	4642      	mov	r2, r8
 800a502:	464b      	mov	r3, r9
 800a504:	4936      	ldr	r1, [pc, #216]	; (800a5e0 <_dtoa_r+0x620>)
 800a506:	2000      	movs	r0, #0
 800a508:	f7f5 fede 	bl	80002c8 <__aeabi_dsub>
 800a50c:	4652      	mov	r2, sl
 800a50e:	465b      	mov	r3, fp
 800a510:	f7f6 fb04 	bl	8000b1c <__aeabi_dcmplt>
 800a514:	2800      	cmp	r0, #0
 800a516:	f040 80b5 	bne.w	800a684 <_dtoa_r+0x6c4>
 800a51a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a51c:	429d      	cmp	r5, r3
 800a51e:	d081      	beq.n	800a424 <_dtoa_r+0x464>
 800a520:	4b30      	ldr	r3, [pc, #192]	; (800a5e4 <_dtoa_r+0x624>)
 800a522:	2200      	movs	r2, #0
 800a524:	4650      	mov	r0, sl
 800a526:	4659      	mov	r1, fp
 800a528:	f7f6 f886 	bl	8000638 <__aeabi_dmul>
 800a52c:	4b2d      	ldr	r3, [pc, #180]	; (800a5e4 <_dtoa_r+0x624>)
 800a52e:	4682      	mov	sl, r0
 800a530:	468b      	mov	fp, r1
 800a532:	4640      	mov	r0, r8
 800a534:	4649      	mov	r1, r9
 800a536:	2200      	movs	r2, #0
 800a538:	f7f6 f87e 	bl	8000638 <__aeabi_dmul>
 800a53c:	4680      	mov	r8, r0
 800a53e:	4689      	mov	r9, r1
 800a540:	e7c6      	b.n	800a4d0 <_dtoa_r+0x510>
 800a542:	4650      	mov	r0, sl
 800a544:	4659      	mov	r1, fp
 800a546:	f7f6 f877 	bl	8000638 <__aeabi_dmul>
 800a54a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a54c:	9d01      	ldr	r5, [sp, #4]
 800a54e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a550:	4682      	mov	sl, r0
 800a552:	468b      	mov	fp, r1
 800a554:	4649      	mov	r1, r9
 800a556:	4640      	mov	r0, r8
 800a558:	f7f6 fb1e 	bl	8000b98 <__aeabi_d2iz>
 800a55c:	4606      	mov	r6, r0
 800a55e:	f7f6 f801 	bl	8000564 <__aeabi_i2d>
 800a562:	3630      	adds	r6, #48	; 0x30
 800a564:	4602      	mov	r2, r0
 800a566:	460b      	mov	r3, r1
 800a568:	4640      	mov	r0, r8
 800a56a:	4649      	mov	r1, r9
 800a56c:	f7f5 feac 	bl	80002c8 <__aeabi_dsub>
 800a570:	f805 6b01 	strb.w	r6, [r5], #1
 800a574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a576:	429d      	cmp	r5, r3
 800a578:	4680      	mov	r8, r0
 800a57a:	4689      	mov	r9, r1
 800a57c:	f04f 0200 	mov.w	r2, #0
 800a580:	d124      	bne.n	800a5cc <_dtoa_r+0x60c>
 800a582:	4b1b      	ldr	r3, [pc, #108]	; (800a5f0 <_dtoa_r+0x630>)
 800a584:	4650      	mov	r0, sl
 800a586:	4659      	mov	r1, fp
 800a588:	f7f5 fea0 	bl	80002cc <__adddf3>
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	4640      	mov	r0, r8
 800a592:	4649      	mov	r1, r9
 800a594:	f7f6 fae0 	bl	8000b58 <__aeabi_dcmpgt>
 800a598:	2800      	cmp	r0, #0
 800a59a:	d173      	bne.n	800a684 <_dtoa_r+0x6c4>
 800a59c:	4652      	mov	r2, sl
 800a59e:	465b      	mov	r3, fp
 800a5a0:	4913      	ldr	r1, [pc, #76]	; (800a5f0 <_dtoa_r+0x630>)
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	f7f5 fe90 	bl	80002c8 <__aeabi_dsub>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4640      	mov	r0, r8
 800a5ae:	4649      	mov	r1, r9
 800a5b0:	f7f6 fab4 	bl	8000b1c <__aeabi_dcmplt>
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	f43f af35 	beq.w	800a424 <_dtoa_r+0x464>
 800a5ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a5bc:	1e6b      	subs	r3, r5, #1
 800a5be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a5c4:	2b30      	cmp	r3, #48	; 0x30
 800a5c6:	d0f8      	beq.n	800a5ba <_dtoa_r+0x5fa>
 800a5c8:	9700      	str	r7, [sp, #0]
 800a5ca:	e049      	b.n	800a660 <_dtoa_r+0x6a0>
 800a5cc:	4b05      	ldr	r3, [pc, #20]	; (800a5e4 <_dtoa_r+0x624>)
 800a5ce:	f7f6 f833 	bl	8000638 <__aeabi_dmul>
 800a5d2:	4680      	mov	r8, r0
 800a5d4:	4689      	mov	r9, r1
 800a5d6:	e7bd      	b.n	800a554 <_dtoa_r+0x594>
 800a5d8:	0800e110 	.word	0x0800e110
 800a5dc:	0800e0e8 	.word	0x0800e0e8
 800a5e0:	3ff00000 	.word	0x3ff00000
 800a5e4:	40240000 	.word	0x40240000
 800a5e8:	401c0000 	.word	0x401c0000
 800a5ec:	40140000 	.word	0x40140000
 800a5f0:	3fe00000 	.word	0x3fe00000
 800a5f4:	9d01      	ldr	r5, [sp, #4]
 800a5f6:	4656      	mov	r6, sl
 800a5f8:	465f      	mov	r7, fp
 800a5fa:	4642      	mov	r2, r8
 800a5fc:	464b      	mov	r3, r9
 800a5fe:	4630      	mov	r0, r6
 800a600:	4639      	mov	r1, r7
 800a602:	f7f6 f943 	bl	800088c <__aeabi_ddiv>
 800a606:	f7f6 fac7 	bl	8000b98 <__aeabi_d2iz>
 800a60a:	4682      	mov	sl, r0
 800a60c:	f7f5 ffaa 	bl	8000564 <__aeabi_i2d>
 800a610:	4642      	mov	r2, r8
 800a612:	464b      	mov	r3, r9
 800a614:	f7f6 f810 	bl	8000638 <__aeabi_dmul>
 800a618:	4602      	mov	r2, r0
 800a61a:	460b      	mov	r3, r1
 800a61c:	4630      	mov	r0, r6
 800a61e:	4639      	mov	r1, r7
 800a620:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a624:	f7f5 fe50 	bl	80002c8 <__aeabi_dsub>
 800a628:	f805 6b01 	strb.w	r6, [r5], #1
 800a62c:	9e01      	ldr	r6, [sp, #4]
 800a62e:	9f03      	ldr	r7, [sp, #12]
 800a630:	1bae      	subs	r6, r5, r6
 800a632:	42b7      	cmp	r7, r6
 800a634:	4602      	mov	r2, r0
 800a636:	460b      	mov	r3, r1
 800a638:	d135      	bne.n	800a6a6 <_dtoa_r+0x6e6>
 800a63a:	f7f5 fe47 	bl	80002cc <__adddf3>
 800a63e:	4642      	mov	r2, r8
 800a640:	464b      	mov	r3, r9
 800a642:	4606      	mov	r6, r0
 800a644:	460f      	mov	r7, r1
 800a646:	f7f6 fa87 	bl	8000b58 <__aeabi_dcmpgt>
 800a64a:	b9d0      	cbnz	r0, 800a682 <_dtoa_r+0x6c2>
 800a64c:	4642      	mov	r2, r8
 800a64e:	464b      	mov	r3, r9
 800a650:	4630      	mov	r0, r6
 800a652:	4639      	mov	r1, r7
 800a654:	f7f6 fa58 	bl	8000b08 <__aeabi_dcmpeq>
 800a658:	b110      	cbz	r0, 800a660 <_dtoa_r+0x6a0>
 800a65a:	f01a 0f01 	tst.w	sl, #1
 800a65e:	d110      	bne.n	800a682 <_dtoa_r+0x6c2>
 800a660:	4620      	mov	r0, r4
 800a662:	ee18 1a10 	vmov	r1, s16
 800a666:	f000 fd13 	bl	800b090 <_Bfree>
 800a66a:	2300      	movs	r3, #0
 800a66c:	9800      	ldr	r0, [sp, #0]
 800a66e:	702b      	strb	r3, [r5, #0]
 800a670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a672:	3001      	adds	r0, #1
 800a674:	6018      	str	r0, [r3, #0]
 800a676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f43f acf1 	beq.w	800a060 <_dtoa_r+0xa0>
 800a67e:	601d      	str	r5, [r3, #0]
 800a680:	e4ee      	b.n	800a060 <_dtoa_r+0xa0>
 800a682:	9f00      	ldr	r7, [sp, #0]
 800a684:	462b      	mov	r3, r5
 800a686:	461d      	mov	r5, r3
 800a688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a68c:	2a39      	cmp	r2, #57	; 0x39
 800a68e:	d106      	bne.n	800a69e <_dtoa_r+0x6de>
 800a690:	9a01      	ldr	r2, [sp, #4]
 800a692:	429a      	cmp	r2, r3
 800a694:	d1f7      	bne.n	800a686 <_dtoa_r+0x6c6>
 800a696:	9901      	ldr	r1, [sp, #4]
 800a698:	2230      	movs	r2, #48	; 0x30
 800a69a:	3701      	adds	r7, #1
 800a69c:	700a      	strb	r2, [r1, #0]
 800a69e:	781a      	ldrb	r2, [r3, #0]
 800a6a0:	3201      	adds	r2, #1
 800a6a2:	701a      	strb	r2, [r3, #0]
 800a6a4:	e790      	b.n	800a5c8 <_dtoa_r+0x608>
 800a6a6:	4ba6      	ldr	r3, [pc, #664]	; (800a940 <_dtoa_r+0x980>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f7f5 ffc5 	bl	8000638 <__aeabi_dmul>
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	4606      	mov	r6, r0
 800a6b4:	460f      	mov	r7, r1
 800a6b6:	f7f6 fa27 	bl	8000b08 <__aeabi_dcmpeq>
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	d09d      	beq.n	800a5fa <_dtoa_r+0x63a>
 800a6be:	e7cf      	b.n	800a660 <_dtoa_r+0x6a0>
 800a6c0:	9a08      	ldr	r2, [sp, #32]
 800a6c2:	2a00      	cmp	r2, #0
 800a6c4:	f000 80d7 	beq.w	800a876 <_dtoa_r+0x8b6>
 800a6c8:	9a06      	ldr	r2, [sp, #24]
 800a6ca:	2a01      	cmp	r2, #1
 800a6cc:	f300 80ba 	bgt.w	800a844 <_dtoa_r+0x884>
 800a6d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6d2:	2a00      	cmp	r2, #0
 800a6d4:	f000 80b2 	beq.w	800a83c <_dtoa_r+0x87c>
 800a6d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6dc:	9e07      	ldr	r6, [sp, #28]
 800a6de:	9d04      	ldr	r5, [sp, #16]
 800a6e0:	9a04      	ldr	r2, [sp, #16]
 800a6e2:	441a      	add	r2, r3
 800a6e4:	9204      	str	r2, [sp, #16]
 800a6e6:	9a05      	ldr	r2, [sp, #20]
 800a6e8:	2101      	movs	r1, #1
 800a6ea:	441a      	add	r2, r3
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	9205      	str	r2, [sp, #20]
 800a6f0:	f000 fd86 	bl	800b200 <__i2b>
 800a6f4:	4607      	mov	r7, r0
 800a6f6:	2d00      	cmp	r5, #0
 800a6f8:	dd0c      	ble.n	800a714 <_dtoa_r+0x754>
 800a6fa:	9b05      	ldr	r3, [sp, #20]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	dd09      	ble.n	800a714 <_dtoa_r+0x754>
 800a700:	42ab      	cmp	r3, r5
 800a702:	9a04      	ldr	r2, [sp, #16]
 800a704:	bfa8      	it	ge
 800a706:	462b      	movge	r3, r5
 800a708:	1ad2      	subs	r2, r2, r3
 800a70a:	9204      	str	r2, [sp, #16]
 800a70c:	9a05      	ldr	r2, [sp, #20]
 800a70e:	1aed      	subs	r5, r5, r3
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	9305      	str	r3, [sp, #20]
 800a714:	9b07      	ldr	r3, [sp, #28]
 800a716:	b31b      	cbz	r3, 800a760 <_dtoa_r+0x7a0>
 800a718:	9b08      	ldr	r3, [sp, #32]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	f000 80af 	beq.w	800a87e <_dtoa_r+0x8be>
 800a720:	2e00      	cmp	r6, #0
 800a722:	dd13      	ble.n	800a74c <_dtoa_r+0x78c>
 800a724:	4639      	mov	r1, r7
 800a726:	4632      	mov	r2, r6
 800a728:	4620      	mov	r0, r4
 800a72a:	f000 fe29 	bl	800b380 <__pow5mult>
 800a72e:	ee18 2a10 	vmov	r2, s16
 800a732:	4601      	mov	r1, r0
 800a734:	4607      	mov	r7, r0
 800a736:	4620      	mov	r0, r4
 800a738:	f000 fd78 	bl	800b22c <__multiply>
 800a73c:	ee18 1a10 	vmov	r1, s16
 800a740:	4680      	mov	r8, r0
 800a742:	4620      	mov	r0, r4
 800a744:	f000 fca4 	bl	800b090 <_Bfree>
 800a748:	ee08 8a10 	vmov	s16, r8
 800a74c:	9b07      	ldr	r3, [sp, #28]
 800a74e:	1b9a      	subs	r2, r3, r6
 800a750:	d006      	beq.n	800a760 <_dtoa_r+0x7a0>
 800a752:	ee18 1a10 	vmov	r1, s16
 800a756:	4620      	mov	r0, r4
 800a758:	f000 fe12 	bl	800b380 <__pow5mult>
 800a75c:	ee08 0a10 	vmov	s16, r0
 800a760:	2101      	movs	r1, #1
 800a762:	4620      	mov	r0, r4
 800a764:	f000 fd4c 	bl	800b200 <__i2b>
 800a768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	4606      	mov	r6, r0
 800a76e:	f340 8088 	ble.w	800a882 <_dtoa_r+0x8c2>
 800a772:	461a      	mov	r2, r3
 800a774:	4601      	mov	r1, r0
 800a776:	4620      	mov	r0, r4
 800a778:	f000 fe02 	bl	800b380 <__pow5mult>
 800a77c:	9b06      	ldr	r3, [sp, #24]
 800a77e:	2b01      	cmp	r3, #1
 800a780:	4606      	mov	r6, r0
 800a782:	f340 8081 	ble.w	800a888 <_dtoa_r+0x8c8>
 800a786:	f04f 0800 	mov.w	r8, #0
 800a78a:	6933      	ldr	r3, [r6, #16]
 800a78c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a790:	6918      	ldr	r0, [r3, #16]
 800a792:	f000 fce5 	bl	800b160 <__hi0bits>
 800a796:	f1c0 0020 	rsb	r0, r0, #32
 800a79a:	9b05      	ldr	r3, [sp, #20]
 800a79c:	4418      	add	r0, r3
 800a79e:	f010 001f 	ands.w	r0, r0, #31
 800a7a2:	f000 8092 	beq.w	800a8ca <_dtoa_r+0x90a>
 800a7a6:	f1c0 0320 	rsb	r3, r0, #32
 800a7aa:	2b04      	cmp	r3, #4
 800a7ac:	f340 808a 	ble.w	800a8c4 <_dtoa_r+0x904>
 800a7b0:	f1c0 001c 	rsb	r0, r0, #28
 800a7b4:	9b04      	ldr	r3, [sp, #16]
 800a7b6:	4403      	add	r3, r0
 800a7b8:	9304      	str	r3, [sp, #16]
 800a7ba:	9b05      	ldr	r3, [sp, #20]
 800a7bc:	4403      	add	r3, r0
 800a7be:	4405      	add	r5, r0
 800a7c0:	9305      	str	r3, [sp, #20]
 800a7c2:	9b04      	ldr	r3, [sp, #16]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	dd07      	ble.n	800a7d8 <_dtoa_r+0x818>
 800a7c8:	ee18 1a10 	vmov	r1, s16
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f000 fe30 	bl	800b434 <__lshift>
 800a7d4:	ee08 0a10 	vmov	s16, r0
 800a7d8:	9b05      	ldr	r3, [sp, #20]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	dd05      	ble.n	800a7ea <_dtoa_r+0x82a>
 800a7de:	4631      	mov	r1, r6
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f000 fe26 	bl	800b434 <__lshift>
 800a7e8:	4606      	mov	r6, r0
 800a7ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d06e      	beq.n	800a8ce <_dtoa_r+0x90e>
 800a7f0:	ee18 0a10 	vmov	r0, s16
 800a7f4:	4631      	mov	r1, r6
 800a7f6:	f000 fe8d 	bl	800b514 <__mcmp>
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	da67      	bge.n	800a8ce <_dtoa_r+0x90e>
 800a7fe:	9b00      	ldr	r3, [sp, #0]
 800a800:	3b01      	subs	r3, #1
 800a802:	ee18 1a10 	vmov	r1, s16
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	220a      	movs	r2, #10
 800a80a:	2300      	movs	r3, #0
 800a80c:	4620      	mov	r0, r4
 800a80e:	f000 fc61 	bl	800b0d4 <__multadd>
 800a812:	9b08      	ldr	r3, [sp, #32]
 800a814:	ee08 0a10 	vmov	s16, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f000 81b1 	beq.w	800ab80 <_dtoa_r+0xbc0>
 800a81e:	2300      	movs	r3, #0
 800a820:	4639      	mov	r1, r7
 800a822:	220a      	movs	r2, #10
 800a824:	4620      	mov	r0, r4
 800a826:	f000 fc55 	bl	800b0d4 <__multadd>
 800a82a:	9b02      	ldr	r3, [sp, #8]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	4607      	mov	r7, r0
 800a830:	f300 808e 	bgt.w	800a950 <_dtoa_r+0x990>
 800a834:	9b06      	ldr	r3, [sp, #24]
 800a836:	2b02      	cmp	r3, #2
 800a838:	dc51      	bgt.n	800a8de <_dtoa_r+0x91e>
 800a83a:	e089      	b.n	800a950 <_dtoa_r+0x990>
 800a83c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a83e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a842:	e74b      	b.n	800a6dc <_dtoa_r+0x71c>
 800a844:	9b03      	ldr	r3, [sp, #12]
 800a846:	1e5e      	subs	r6, r3, #1
 800a848:	9b07      	ldr	r3, [sp, #28]
 800a84a:	42b3      	cmp	r3, r6
 800a84c:	bfbf      	itttt	lt
 800a84e:	9b07      	ldrlt	r3, [sp, #28]
 800a850:	9607      	strlt	r6, [sp, #28]
 800a852:	1af2      	sublt	r2, r6, r3
 800a854:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a856:	bfb6      	itet	lt
 800a858:	189b      	addlt	r3, r3, r2
 800a85a:	1b9e      	subge	r6, r3, r6
 800a85c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a85e:	9b03      	ldr	r3, [sp, #12]
 800a860:	bfb8      	it	lt
 800a862:	2600      	movlt	r6, #0
 800a864:	2b00      	cmp	r3, #0
 800a866:	bfb7      	itett	lt
 800a868:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a86c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a870:	1a9d      	sublt	r5, r3, r2
 800a872:	2300      	movlt	r3, #0
 800a874:	e734      	b.n	800a6e0 <_dtoa_r+0x720>
 800a876:	9e07      	ldr	r6, [sp, #28]
 800a878:	9d04      	ldr	r5, [sp, #16]
 800a87a:	9f08      	ldr	r7, [sp, #32]
 800a87c:	e73b      	b.n	800a6f6 <_dtoa_r+0x736>
 800a87e:	9a07      	ldr	r2, [sp, #28]
 800a880:	e767      	b.n	800a752 <_dtoa_r+0x792>
 800a882:	9b06      	ldr	r3, [sp, #24]
 800a884:	2b01      	cmp	r3, #1
 800a886:	dc18      	bgt.n	800a8ba <_dtoa_r+0x8fa>
 800a888:	f1ba 0f00 	cmp.w	sl, #0
 800a88c:	d115      	bne.n	800a8ba <_dtoa_r+0x8fa>
 800a88e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a892:	b993      	cbnz	r3, 800a8ba <_dtoa_r+0x8fa>
 800a894:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a898:	0d1b      	lsrs	r3, r3, #20
 800a89a:	051b      	lsls	r3, r3, #20
 800a89c:	b183      	cbz	r3, 800a8c0 <_dtoa_r+0x900>
 800a89e:	9b04      	ldr	r3, [sp, #16]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	9304      	str	r3, [sp, #16]
 800a8a4:	9b05      	ldr	r3, [sp, #20]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	9305      	str	r3, [sp, #20]
 800a8aa:	f04f 0801 	mov.w	r8, #1
 800a8ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f47f af6a 	bne.w	800a78a <_dtoa_r+0x7ca>
 800a8b6:	2001      	movs	r0, #1
 800a8b8:	e76f      	b.n	800a79a <_dtoa_r+0x7da>
 800a8ba:	f04f 0800 	mov.w	r8, #0
 800a8be:	e7f6      	b.n	800a8ae <_dtoa_r+0x8ee>
 800a8c0:	4698      	mov	r8, r3
 800a8c2:	e7f4      	b.n	800a8ae <_dtoa_r+0x8ee>
 800a8c4:	f43f af7d 	beq.w	800a7c2 <_dtoa_r+0x802>
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	301c      	adds	r0, #28
 800a8cc:	e772      	b.n	800a7b4 <_dtoa_r+0x7f4>
 800a8ce:	9b03      	ldr	r3, [sp, #12]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	dc37      	bgt.n	800a944 <_dtoa_r+0x984>
 800a8d4:	9b06      	ldr	r3, [sp, #24]
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	dd34      	ble.n	800a944 <_dtoa_r+0x984>
 800a8da:	9b03      	ldr	r3, [sp, #12]
 800a8dc:	9302      	str	r3, [sp, #8]
 800a8de:	9b02      	ldr	r3, [sp, #8]
 800a8e0:	b96b      	cbnz	r3, 800a8fe <_dtoa_r+0x93e>
 800a8e2:	4631      	mov	r1, r6
 800a8e4:	2205      	movs	r2, #5
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	f000 fbf4 	bl	800b0d4 <__multadd>
 800a8ec:	4601      	mov	r1, r0
 800a8ee:	4606      	mov	r6, r0
 800a8f0:	ee18 0a10 	vmov	r0, s16
 800a8f4:	f000 fe0e 	bl	800b514 <__mcmp>
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	f73f adbb 	bgt.w	800a474 <_dtoa_r+0x4b4>
 800a8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a900:	9d01      	ldr	r5, [sp, #4]
 800a902:	43db      	mvns	r3, r3
 800a904:	9300      	str	r3, [sp, #0]
 800a906:	f04f 0800 	mov.w	r8, #0
 800a90a:	4631      	mov	r1, r6
 800a90c:	4620      	mov	r0, r4
 800a90e:	f000 fbbf 	bl	800b090 <_Bfree>
 800a912:	2f00      	cmp	r7, #0
 800a914:	f43f aea4 	beq.w	800a660 <_dtoa_r+0x6a0>
 800a918:	f1b8 0f00 	cmp.w	r8, #0
 800a91c:	d005      	beq.n	800a92a <_dtoa_r+0x96a>
 800a91e:	45b8      	cmp	r8, r7
 800a920:	d003      	beq.n	800a92a <_dtoa_r+0x96a>
 800a922:	4641      	mov	r1, r8
 800a924:	4620      	mov	r0, r4
 800a926:	f000 fbb3 	bl	800b090 <_Bfree>
 800a92a:	4639      	mov	r1, r7
 800a92c:	4620      	mov	r0, r4
 800a92e:	f000 fbaf 	bl	800b090 <_Bfree>
 800a932:	e695      	b.n	800a660 <_dtoa_r+0x6a0>
 800a934:	2600      	movs	r6, #0
 800a936:	4637      	mov	r7, r6
 800a938:	e7e1      	b.n	800a8fe <_dtoa_r+0x93e>
 800a93a:	9700      	str	r7, [sp, #0]
 800a93c:	4637      	mov	r7, r6
 800a93e:	e599      	b.n	800a474 <_dtoa_r+0x4b4>
 800a940:	40240000 	.word	0x40240000
 800a944:	9b08      	ldr	r3, [sp, #32]
 800a946:	2b00      	cmp	r3, #0
 800a948:	f000 80ca 	beq.w	800aae0 <_dtoa_r+0xb20>
 800a94c:	9b03      	ldr	r3, [sp, #12]
 800a94e:	9302      	str	r3, [sp, #8]
 800a950:	2d00      	cmp	r5, #0
 800a952:	dd05      	ble.n	800a960 <_dtoa_r+0x9a0>
 800a954:	4639      	mov	r1, r7
 800a956:	462a      	mov	r2, r5
 800a958:	4620      	mov	r0, r4
 800a95a:	f000 fd6b 	bl	800b434 <__lshift>
 800a95e:	4607      	mov	r7, r0
 800a960:	f1b8 0f00 	cmp.w	r8, #0
 800a964:	d05b      	beq.n	800aa1e <_dtoa_r+0xa5e>
 800a966:	6879      	ldr	r1, [r7, #4]
 800a968:	4620      	mov	r0, r4
 800a96a:	f000 fb51 	bl	800b010 <_Balloc>
 800a96e:	4605      	mov	r5, r0
 800a970:	b928      	cbnz	r0, 800a97e <_dtoa_r+0x9be>
 800a972:	4b87      	ldr	r3, [pc, #540]	; (800ab90 <_dtoa_r+0xbd0>)
 800a974:	4602      	mov	r2, r0
 800a976:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a97a:	f7ff bb3b 	b.w	8009ff4 <_dtoa_r+0x34>
 800a97e:	693a      	ldr	r2, [r7, #16]
 800a980:	3202      	adds	r2, #2
 800a982:	0092      	lsls	r2, r2, #2
 800a984:	f107 010c 	add.w	r1, r7, #12
 800a988:	300c      	adds	r0, #12
 800a98a:	f000 fb33 	bl	800aff4 <memcpy>
 800a98e:	2201      	movs	r2, #1
 800a990:	4629      	mov	r1, r5
 800a992:	4620      	mov	r0, r4
 800a994:	f000 fd4e 	bl	800b434 <__lshift>
 800a998:	9b01      	ldr	r3, [sp, #4]
 800a99a:	f103 0901 	add.w	r9, r3, #1
 800a99e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	9305      	str	r3, [sp, #20]
 800a9a6:	f00a 0301 	and.w	r3, sl, #1
 800a9aa:	46b8      	mov	r8, r7
 800a9ac:	9304      	str	r3, [sp, #16]
 800a9ae:	4607      	mov	r7, r0
 800a9b0:	4631      	mov	r1, r6
 800a9b2:	ee18 0a10 	vmov	r0, s16
 800a9b6:	f7ff fa77 	bl	8009ea8 <quorem>
 800a9ba:	4641      	mov	r1, r8
 800a9bc:	9002      	str	r0, [sp, #8]
 800a9be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a9c2:	ee18 0a10 	vmov	r0, s16
 800a9c6:	f000 fda5 	bl	800b514 <__mcmp>
 800a9ca:	463a      	mov	r2, r7
 800a9cc:	9003      	str	r0, [sp, #12]
 800a9ce:	4631      	mov	r1, r6
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f000 fdbb 	bl	800b54c <__mdiff>
 800a9d6:	68c2      	ldr	r2, [r0, #12]
 800a9d8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800a9dc:	4605      	mov	r5, r0
 800a9de:	bb02      	cbnz	r2, 800aa22 <_dtoa_r+0xa62>
 800a9e0:	4601      	mov	r1, r0
 800a9e2:	ee18 0a10 	vmov	r0, s16
 800a9e6:	f000 fd95 	bl	800b514 <__mcmp>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	9207      	str	r2, [sp, #28]
 800a9f2:	f000 fb4d 	bl	800b090 <_Bfree>
 800a9f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a9fa:	ea43 0102 	orr.w	r1, r3, r2
 800a9fe:	9b04      	ldr	r3, [sp, #16]
 800aa00:	430b      	orrs	r3, r1
 800aa02:	464d      	mov	r5, r9
 800aa04:	d10f      	bne.n	800aa26 <_dtoa_r+0xa66>
 800aa06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa0a:	d02a      	beq.n	800aa62 <_dtoa_r+0xaa2>
 800aa0c:	9b03      	ldr	r3, [sp, #12]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	dd02      	ble.n	800aa18 <_dtoa_r+0xa58>
 800aa12:	9b02      	ldr	r3, [sp, #8]
 800aa14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800aa18:	f88b a000 	strb.w	sl, [fp]
 800aa1c:	e775      	b.n	800a90a <_dtoa_r+0x94a>
 800aa1e:	4638      	mov	r0, r7
 800aa20:	e7ba      	b.n	800a998 <_dtoa_r+0x9d8>
 800aa22:	2201      	movs	r2, #1
 800aa24:	e7e2      	b.n	800a9ec <_dtoa_r+0xa2c>
 800aa26:	9b03      	ldr	r3, [sp, #12]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	db04      	blt.n	800aa36 <_dtoa_r+0xa76>
 800aa2c:	9906      	ldr	r1, [sp, #24]
 800aa2e:	430b      	orrs	r3, r1
 800aa30:	9904      	ldr	r1, [sp, #16]
 800aa32:	430b      	orrs	r3, r1
 800aa34:	d122      	bne.n	800aa7c <_dtoa_r+0xabc>
 800aa36:	2a00      	cmp	r2, #0
 800aa38:	ddee      	ble.n	800aa18 <_dtoa_r+0xa58>
 800aa3a:	ee18 1a10 	vmov	r1, s16
 800aa3e:	2201      	movs	r2, #1
 800aa40:	4620      	mov	r0, r4
 800aa42:	f000 fcf7 	bl	800b434 <__lshift>
 800aa46:	4631      	mov	r1, r6
 800aa48:	ee08 0a10 	vmov	s16, r0
 800aa4c:	f000 fd62 	bl	800b514 <__mcmp>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	dc03      	bgt.n	800aa5c <_dtoa_r+0xa9c>
 800aa54:	d1e0      	bne.n	800aa18 <_dtoa_r+0xa58>
 800aa56:	f01a 0f01 	tst.w	sl, #1
 800aa5a:	d0dd      	beq.n	800aa18 <_dtoa_r+0xa58>
 800aa5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa60:	d1d7      	bne.n	800aa12 <_dtoa_r+0xa52>
 800aa62:	2339      	movs	r3, #57	; 0x39
 800aa64:	f88b 3000 	strb.w	r3, [fp]
 800aa68:	462b      	mov	r3, r5
 800aa6a:	461d      	mov	r5, r3
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa72:	2a39      	cmp	r2, #57	; 0x39
 800aa74:	d071      	beq.n	800ab5a <_dtoa_r+0xb9a>
 800aa76:	3201      	adds	r2, #1
 800aa78:	701a      	strb	r2, [r3, #0]
 800aa7a:	e746      	b.n	800a90a <_dtoa_r+0x94a>
 800aa7c:	2a00      	cmp	r2, #0
 800aa7e:	dd07      	ble.n	800aa90 <_dtoa_r+0xad0>
 800aa80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa84:	d0ed      	beq.n	800aa62 <_dtoa_r+0xaa2>
 800aa86:	f10a 0301 	add.w	r3, sl, #1
 800aa8a:	f88b 3000 	strb.w	r3, [fp]
 800aa8e:	e73c      	b.n	800a90a <_dtoa_r+0x94a>
 800aa90:	9b05      	ldr	r3, [sp, #20]
 800aa92:	f809 ac01 	strb.w	sl, [r9, #-1]
 800aa96:	4599      	cmp	r9, r3
 800aa98:	d047      	beq.n	800ab2a <_dtoa_r+0xb6a>
 800aa9a:	ee18 1a10 	vmov	r1, s16
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	220a      	movs	r2, #10
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f000 fb16 	bl	800b0d4 <__multadd>
 800aaa8:	45b8      	cmp	r8, r7
 800aaaa:	ee08 0a10 	vmov	s16, r0
 800aaae:	f04f 0300 	mov.w	r3, #0
 800aab2:	f04f 020a 	mov.w	r2, #10
 800aab6:	4641      	mov	r1, r8
 800aab8:	4620      	mov	r0, r4
 800aaba:	d106      	bne.n	800aaca <_dtoa_r+0xb0a>
 800aabc:	f000 fb0a 	bl	800b0d4 <__multadd>
 800aac0:	4680      	mov	r8, r0
 800aac2:	4607      	mov	r7, r0
 800aac4:	f109 0901 	add.w	r9, r9, #1
 800aac8:	e772      	b.n	800a9b0 <_dtoa_r+0x9f0>
 800aaca:	f000 fb03 	bl	800b0d4 <__multadd>
 800aace:	4639      	mov	r1, r7
 800aad0:	4680      	mov	r8, r0
 800aad2:	2300      	movs	r3, #0
 800aad4:	220a      	movs	r2, #10
 800aad6:	4620      	mov	r0, r4
 800aad8:	f000 fafc 	bl	800b0d4 <__multadd>
 800aadc:	4607      	mov	r7, r0
 800aade:	e7f1      	b.n	800aac4 <_dtoa_r+0xb04>
 800aae0:	9b03      	ldr	r3, [sp, #12]
 800aae2:	9302      	str	r3, [sp, #8]
 800aae4:	9d01      	ldr	r5, [sp, #4]
 800aae6:	ee18 0a10 	vmov	r0, s16
 800aaea:	4631      	mov	r1, r6
 800aaec:	f7ff f9dc 	bl	8009ea8 <quorem>
 800aaf0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aaf4:	9b01      	ldr	r3, [sp, #4]
 800aaf6:	f805 ab01 	strb.w	sl, [r5], #1
 800aafa:	1aea      	subs	r2, r5, r3
 800aafc:	9b02      	ldr	r3, [sp, #8]
 800aafe:	4293      	cmp	r3, r2
 800ab00:	dd09      	ble.n	800ab16 <_dtoa_r+0xb56>
 800ab02:	ee18 1a10 	vmov	r1, s16
 800ab06:	2300      	movs	r3, #0
 800ab08:	220a      	movs	r2, #10
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f000 fae2 	bl	800b0d4 <__multadd>
 800ab10:	ee08 0a10 	vmov	s16, r0
 800ab14:	e7e7      	b.n	800aae6 <_dtoa_r+0xb26>
 800ab16:	9b02      	ldr	r3, [sp, #8]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	bfc8      	it	gt
 800ab1c:	461d      	movgt	r5, r3
 800ab1e:	9b01      	ldr	r3, [sp, #4]
 800ab20:	bfd8      	it	le
 800ab22:	2501      	movle	r5, #1
 800ab24:	441d      	add	r5, r3
 800ab26:	f04f 0800 	mov.w	r8, #0
 800ab2a:	ee18 1a10 	vmov	r1, s16
 800ab2e:	2201      	movs	r2, #1
 800ab30:	4620      	mov	r0, r4
 800ab32:	f000 fc7f 	bl	800b434 <__lshift>
 800ab36:	4631      	mov	r1, r6
 800ab38:	ee08 0a10 	vmov	s16, r0
 800ab3c:	f000 fcea 	bl	800b514 <__mcmp>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	dc91      	bgt.n	800aa68 <_dtoa_r+0xaa8>
 800ab44:	d102      	bne.n	800ab4c <_dtoa_r+0xb8c>
 800ab46:	f01a 0f01 	tst.w	sl, #1
 800ab4a:	d18d      	bne.n	800aa68 <_dtoa_r+0xaa8>
 800ab4c:	462b      	mov	r3, r5
 800ab4e:	461d      	mov	r5, r3
 800ab50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab54:	2a30      	cmp	r2, #48	; 0x30
 800ab56:	d0fa      	beq.n	800ab4e <_dtoa_r+0xb8e>
 800ab58:	e6d7      	b.n	800a90a <_dtoa_r+0x94a>
 800ab5a:	9a01      	ldr	r2, [sp, #4]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d184      	bne.n	800aa6a <_dtoa_r+0xaaa>
 800ab60:	9b00      	ldr	r3, [sp, #0]
 800ab62:	3301      	adds	r3, #1
 800ab64:	9300      	str	r3, [sp, #0]
 800ab66:	2331      	movs	r3, #49	; 0x31
 800ab68:	7013      	strb	r3, [r2, #0]
 800ab6a:	e6ce      	b.n	800a90a <_dtoa_r+0x94a>
 800ab6c:	4b09      	ldr	r3, [pc, #36]	; (800ab94 <_dtoa_r+0xbd4>)
 800ab6e:	f7ff ba95 	b.w	800a09c <_dtoa_r+0xdc>
 800ab72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f47f aa6e 	bne.w	800a056 <_dtoa_r+0x96>
 800ab7a:	4b07      	ldr	r3, [pc, #28]	; (800ab98 <_dtoa_r+0xbd8>)
 800ab7c:	f7ff ba8e 	b.w	800a09c <_dtoa_r+0xdc>
 800ab80:	9b02      	ldr	r3, [sp, #8]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	dcae      	bgt.n	800aae4 <_dtoa_r+0xb24>
 800ab86:	9b06      	ldr	r3, [sp, #24]
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	f73f aea8 	bgt.w	800a8de <_dtoa_r+0x91e>
 800ab8e:	e7a9      	b.n	800aae4 <_dtoa_r+0xb24>
 800ab90:	0800e017 	.word	0x0800e017
 800ab94:	0800df74 	.word	0x0800df74
 800ab98:	0800df98 	.word	0x0800df98

0800ab9c <__sflush_r>:
 800ab9c:	898a      	ldrh	r2, [r1, #12]
 800ab9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba2:	4605      	mov	r5, r0
 800aba4:	0710      	lsls	r0, r2, #28
 800aba6:	460c      	mov	r4, r1
 800aba8:	d458      	bmi.n	800ac5c <__sflush_r+0xc0>
 800abaa:	684b      	ldr	r3, [r1, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	dc05      	bgt.n	800abbc <__sflush_r+0x20>
 800abb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	dc02      	bgt.n	800abbc <__sflush_r+0x20>
 800abb6:	2000      	movs	r0, #0
 800abb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abbe:	2e00      	cmp	r6, #0
 800abc0:	d0f9      	beq.n	800abb6 <__sflush_r+0x1a>
 800abc2:	2300      	movs	r3, #0
 800abc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abc8:	682f      	ldr	r7, [r5, #0]
 800abca:	602b      	str	r3, [r5, #0]
 800abcc:	d032      	beq.n	800ac34 <__sflush_r+0x98>
 800abce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abd0:	89a3      	ldrh	r3, [r4, #12]
 800abd2:	075a      	lsls	r2, r3, #29
 800abd4:	d505      	bpl.n	800abe2 <__sflush_r+0x46>
 800abd6:	6863      	ldr	r3, [r4, #4]
 800abd8:	1ac0      	subs	r0, r0, r3
 800abda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abdc:	b10b      	cbz	r3, 800abe2 <__sflush_r+0x46>
 800abde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abe0:	1ac0      	subs	r0, r0, r3
 800abe2:	2300      	movs	r3, #0
 800abe4:	4602      	mov	r2, r0
 800abe6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abe8:	6a21      	ldr	r1, [r4, #32]
 800abea:	4628      	mov	r0, r5
 800abec:	47b0      	blx	r6
 800abee:	1c43      	adds	r3, r0, #1
 800abf0:	89a3      	ldrh	r3, [r4, #12]
 800abf2:	d106      	bne.n	800ac02 <__sflush_r+0x66>
 800abf4:	6829      	ldr	r1, [r5, #0]
 800abf6:	291d      	cmp	r1, #29
 800abf8:	d82c      	bhi.n	800ac54 <__sflush_r+0xb8>
 800abfa:	4a2a      	ldr	r2, [pc, #168]	; (800aca4 <__sflush_r+0x108>)
 800abfc:	40ca      	lsrs	r2, r1
 800abfe:	07d6      	lsls	r6, r2, #31
 800ac00:	d528      	bpl.n	800ac54 <__sflush_r+0xb8>
 800ac02:	2200      	movs	r2, #0
 800ac04:	6062      	str	r2, [r4, #4]
 800ac06:	04d9      	lsls	r1, r3, #19
 800ac08:	6922      	ldr	r2, [r4, #16]
 800ac0a:	6022      	str	r2, [r4, #0]
 800ac0c:	d504      	bpl.n	800ac18 <__sflush_r+0x7c>
 800ac0e:	1c42      	adds	r2, r0, #1
 800ac10:	d101      	bne.n	800ac16 <__sflush_r+0x7a>
 800ac12:	682b      	ldr	r3, [r5, #0]
 800ac14:	b903      	cbnz	r3, 800ac18 <__sflush_r+0x7c>
 800ac16:	6560      	str	r0, [r4, #84]	; 0x54
 800ac18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac1a:	602f      	str	r7, [r5, #0]
 800ac1c:	2900      	cmp	r1, #0
 800ac1e:	d0ca      	beq.n	800abb6 <__sflush_r+0x1a>
 800ac20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac24:	4299      	cmp	r1, r3
 800ac26:	d002      	beq.n	800ac2e <__sflush_r+0x92>
 800ac28:	4628      	mov	r0, r5
 800ac2a:	f000 fd8b 	bl	800b744 <_free_r>
 800ac2e:	2000      	movs	r0, #0
 800ac30:	6360      	str	r0, [r4, #52]	; 0x34
 800ac32:	e7c1      	b.n	800abb8 <__sflush_r+0x1c>
 800ac34:	6a21      	ldr	r1, [r4, #32]
 800ac36:	2301      	movs	r3, #1
 800ac38:	4628      	mov	r0, r5
 800ac3a:	47b0      	blx	r6
 800ac3c:	1c41      	adds	r1, r0, #1
 800ac3e:	d1c7      	bne.n	800abd0 <__sflush_r+0x34>
 800ac40:	682b      	ldr	r3, [r5, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d0c4      	beq.n	800abd0 <__sflush_r+0x34>
 800ac46:	2b1d      	cmp	r3, #29
 800ac48:	d001      	beq.n	800ac4e <__sflush_r+0xb2>
 800ac4a:	2b16      	cmp	r3, #22
 800ac4c:	d101      	bne.n	800ac52 <__sflush_r+0xb6>
 800ac4e:	602f      	str	r7, [r5, #0]
 800ac50:	e7b1      	b.n	800abb6 <__sflush_r+0x1a>
 800ac52:	89a3      	ldrh	r3, [r4, #12]
 800ac54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac58:	81a3      	strh	r3, [r4, #12]
 800ac5a:	e7ad      	b.n	800abb8 <__sflush_r+0x1c>
 800ac5c:	690f      	ldr	r7, [r1, #16]
 800ac5e:	2f00      	cmp	r7, #0
 800ac60:	d0a9      	beq.n	800abb6 <__sflush_r+0x1a>
 800ac62:	0793      	lsls	r3, r2, #30
 800ac64:	680e      	ldr	r6, [r1, #0]
 800ac66:	bf08      	it	eq
 800ac68:	694b      	ldreq	r3, [r1, #20]
 800ac6a:	600f      	str	r7, [r1, #0]
 800ac6c:	bf18      	it	ne
 800ac6e:	2300      	movne	r3, #0
 800ac70:	eba6 0807 	sub.w	r8, r6, r7
 800ac74:	608b      	str	r3, [r1, #8]
 800ac76:	f1b8 0f00 	cmp.w	r8, #0
 800ac7a:	dd9c      	ble.n	800abb6 <__sflush_r+0x1a>
 800ac7c:	6a21      	ldr	r1, [r4, #32]
 800ac7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac80:	4643      	mov	r3, r8
 800ac82:	463a      	mov	r2, r7
 800ac84:	4628      	mov	r0, r5
 800ac86:	47b0      	blx	r6
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	dc06      	bgt.n	800ac9a <__sflush_r+0xfe>
 800ac8c:	89a3      	ldrh	r3, [r4, #12]
 800ac8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac92:	81a3      	strh	r3, [r4, #12]
 800ac94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac98:	e78e      	b.n	800abb8 <__sflush_r+0x1c>
 800ac9a:	4407      	add	r7, r0
 800ac9c:	eba8 0800 	sub.w	r8, r8, r0
 800aca0:	e7e9      	b.n	800ac76 <__sflush_r+0xda>
 800aca2:	bf00      	nop
 800aca4:	20400001 	.word	0x20400001

0800aca8 <_fflush_r>:
 800aca8:	b538      	push	{r3, r4, r5, lr}
 800acaa:	690b      	ldr	r3, [r1, #16]
 800acac:	4605      	mov	r5, r0
 800acae:	460c      	mov	r4, r1
 800acb0:	b913      	cbnz	r3, 800acb8 <_fflush_r+0x10>
 800acb2:	2500      	movs	r5, #0
 800acb4:	4628      	mov	r0, r5
 800acb6:	bd38      	pop	{r3, r4, r5, pc}
 800acb8:	b118      	cbz	r0, 800acc2 <_fflush_r+0x1a>
 800acba:	6983      	ldr	r3, [r0, #24]
 800acbc:	b90b      	cbnz	r3, 800acc2 <_fflush_r+0x1a>
 800acbe:	f000 f887 	bl	800add0 <__sinit>
 800acc2:	4b14      	ldr	r3, [pc, #80]	; (800ad14 <_fflush_r+0x6c>)
 800acc4:	429c      	cmp	r4, r3
 800acc6:	d11b      	bne.n	800ad00 <_fflush_r+0x58>
 800acc8:	686c      	ldr	r4, [r5, #4]
 800acca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d0ef      	beq.n	800acb2 <_fflush_r+0xa>
 800acd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acd4:	07d0      	lsls	r0, r2, #31
 800acd6:	d404      	bmi.n	800ace2 <_fflush_r+0x3a>
 800acd8:	0599      	lsls	r1, r3, #22
 800acda:	d402      	bmi.n	800ace2 <_fflush_r+0x3a>
 800acdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acde:	f000 f91a 	bl	800af16 <__retarget_lock_acquire_recursive>
 800ace2:	4628      	mov	r0, r5
 800ace4:	4621      	mov	r1, r4
 800ace6:	f7ff ff59 	bl	800ab9c <__sflush_r>
 800acea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acec:	07da      	lsls	r2, r3, #31
 800acee:	4605      	mov	r5, r0
 800acf0:	d4e0      	bmi.n	800acb4 <_fflush_r+0xc>
 800acf2:	89a3      	ldrh	r3, [r4, #12]
 800acf4:	059b      	lsls	r3, r3, #22
 800acf6:	d4dd      	bmi.n	800acb4 <_fflush_r+0xc>
 800acf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acfa:	f000 f90d 	bl	800af18 <__retarget_lock_release_recursive>
 800acfe:	e7d9      	b.n	800acb4 <_fflush_r+0xc>
 800ad00:	4b05      	ldr	r3, [pc, #20]	; (800ad18 <_fflush_r+0x70>)
 800ad02:	429c      	cmp	r4, r3
 800ad04:	d101      	bne.n	800ad0a <_fflush_r+0x62>
 800ad06:	68ac      	ldr	r4, [r5, #8]
 800ad08:	e7df      	b.n	800acca <_fflush_r+0x22>
 800ad0a:	4b04      	ldr	r3, [pc, #16]	; (800ad1c <_fflush_r+0x74>)
 800ad0c:	429c      	cmp	r4, r3
 800ad0e:	bf08      	it	eq
 800ad10:	68ec      	ldreq	r4, [r5, #12]
 800ad12:	e7da      	b.n	800acca <_fflush_r+0x22>
 800ad14:	0800e048 	.word	0x0800e048
 800ad18:	0800e068 	.word	0x0800e068
 800ad1c:	0800e028 	.word	0x0800e028

0800ad20 <std>:
 800ad20:	2300      	movs	r3, #0
 800ad22:	b510      	push	{r4, lr}
 800ad24:	4604      	mov	r4, r0
 800ad26:	e9c0 3300 	strd	r3, r3, [r0]
 800ad2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad2e:	6083      	str	r3, [r0, #8]
 800ad30:	8181      	strh	r1, [r0, #12]
 800ad32:	6643      	str	r3, [r0, #100]	; 0x64
 800ad34:	81c2      	strh	r2, [r0, #14]
 800ad36:	6183      	str	r3, [r0, #24]
 800ad38:	4619      	mov	r1, r3
 800ad3a:	2208      	movs	r2, #8
 800ad3c:	305c      	adds	r0, #92	; 0x5c
 800ad3e:	f7fe fa25 	bl	800918c <memset>
 800ad42:	4b05      	ldr	r3, [pc, #20]	; (800ad58 <std+0x38>)
 800ad44:	6263      	str	r3, [r4, #36]	; 0x24
 800ad46:	4b05      	ldr	r3, [pc, #20]	; (800ad5c <std+0x3c>)
 800ad48:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad4a:	4b05      	ldr	r3, [pc, #20]	; (800ad60 <std+0x40>)
 800ad4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad4e:	4b05      	ldr	r3, [pc, #20]	; (800ad64 <std+0x44>)
 800ad50:	6224      	str	r4, [r4, #32]
 800ad52:	6323      	str	r3, [r4, #48]	; 0x30
 800ad54:	bd10      	pop	{r4, pc}
 800ad56:	bf00      	nop
 800ad58:	0800bbd9 	.word	0x0800bbd9
 800ad5c:	0800bbfb 	.word	0x0800bbfb
 800ad60:	0800bc33 	.word	0x0800bc33
 800ad64:	0800bc57 	.word	0x0800bc57

0800ad68 <_cleanup_r>:
 800ad68:	4901      	ldr	r1, [pc, #4]	; (800ad70 <_cleanup_r+0x8>)
 800ad6a:	f000 b8af 	b.w	800aecc <_fwalk_reent>
 800ad6e:	bf00      	nop
 800ad70:	0800aca9 	.word	0x0800aca9

0800ad74 <__sfmoreglue>:
 800ad74:	b570      	push	{r4, r5, r6, lr}
 800ad76:	2268      	movs	r2, #104	; 0x68
 800ad78:	1e4d      	subs	r5, r1, #1
 800ad7a:	4355      	muls	r5, r2
 800ad7c:	460e      	mov	r6, r1
 800ad7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad82:	f000 fd4b 	bl	800b81c <_malloc_r>
 800ad86:	4604      	mov	r4, r0
 800ad88:	b140      	cbz	r0, 800ad9c <__sfmoreglue+0x28>
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	e9c0 1600 	strd	r1, r6, [r0]
 800ad90:	300c      	adds	r0, #12
 800ad92:	60a0      	str	r0, [r4, #8]
 800ad94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad98:	f7fe f9f8 	bl	800918c <memset>
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	bd70      	pop	{r4, r5, r6, pc}

0800ada0 <__sfp_lock_acquire>:
 800ada0:	4801      	ldr	r0, [pc, #4]	; (800ada8 <__sfp_lock_acquire+0x8>)
 800ada2:	f000 b8b8 	b.w	800af16 <__retarget_lock_acquire_recursive>
 800ada6:	bf00      	nop
 800ada8:	20000b45 	.word	0x20000b45

0800adac <__sfp_lock_release>:
 800adac:	4801      	ldr	r0, [pc, #4]	; (800adb4 <__sfp_lock_release+0x8>)
 800adae:	f000 b8b3 	b.w	800af18 <__retarget_lock_release_recursive>
 800adb2:	bf00      	nop
 800adb4:	20000b45 	.word	0x20000b45

0800adb8 <__sinit_lock_acquire>:
 800adb8:	4801      	ldr	r0, [pc, #4]	; (800adc0 <__sinit_lock_acquire+0x8>)
 800adba:	f000 b8ac 	b.w	800af16 <__retarget_lock_acquire_recursive>
 800adbe:	bf00      	nop
 800adc0:	20000b46 	.word	0x20000b46

0800adc4 <__sinit_lock_release>:
 800adc4:	4801      	ldr	r0, [pc, #4]	; (800adcc <__sinit_lock_release+0x8>)
 800adc6:	f000 b8a7 	b.w	800af18 <__retarget_lock_release_recursive>
 800adca:	bf00      	nop
 800adcc:	20000b46 	.word	0x20000b46

0800add0 <__sinit>:
 800add0:	b510      	push	{r4, lr}
 800add2:	4604      	mov	r4, r0
 800add4:	f7ff fff0 	bl	800adb8 <__sinit_lock_acquire>
 800add8:	69a3      	ldr	r3, [r4, #24]
 800adda:	b11b      	cbz	r3, 800ade4 <__sinit+0x14>
 800addc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ade0:	f7ff bff0 	b.w	800adc4 <__sinit_lock_release>
 800ade4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ade8:	6523      	str	r3, [r4, #80]	; 0x50
 800adea:	4b13      	ldr	r3, [pc, #76]	; (800ae38 <__sinit+0x68>)
 800adec:	4a13      	ldr	r2, [pc, #76]	; (800ae3c <__sinit+0x6c>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	62a2      	str	r2, [r4, #40]	; 0x28
 800adf2:	42a3      	cmp	r3, r4
 800adf4:	bf04      	itt	eq
 800adf6:	2301      	moveq	r3, #1
 800adf8:	61a3      	streq	r3, [r4, #24]
 800adfa:	4620      	mov	r0, r4
 800adfc:	f000 f820 	bl	800ae40 <__sfp>
 800ae00:	6060      	str	r0, [r4, #4]
 800ae02:	4620      	mov	r0, r4
 800ae04:	f000 f81c 	bl	800ae40 <__sfp>
 800ae08:	60a0      	str	r0, [r4, #8]
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f000 f818 	bl	800ae40 <__sfp>
 800ae10:	2200      	movs	r2, #0
 800ae12:	60e0      	str	r0, [r4, #12]
 800ae14:	2104      	movs	r1, #4
 800ae16:	6860      	ldr	r0, [r4, #4]
 800ae18:	f7ff ff82 	bl	800ad20 <std>
 800ae1c:	68a0      	ldr	r0, [r4, #8]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	2109      	movs	r1, #9
 800ae22:	f7ff ff7d 	bl	800ad20 <std>
 800ae26:	68e0      	ldr	r0, [r4, #12]
 800ae28:	2202      	movs	r2, #2
 800ae2a:	2112      	movs	r1, #18
 800ae2c:	f7ff ff78 	bl	800ad20 <std>
 800ae30:	2301      	movs	r3, #1
 800ae32:	61a3      	str	r3, [r4, #24]
 800ae34:	e7d2      	b.n	800addc <__sinit+0xc>
 800ae36:	bf00      	nop
 800ae38:	0800df60 	.word	0x0800df60
 800ae3c:	0800ad69 	.word	0x0800ad69

0800ae40 <__sfp>:
 800ae40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae42:	4607      	mov	r7, r0
 800ae44:	f7ff ffac 	bl	800ada0 <__sfp_lock_acquire>
 800ae48:	4b1e      	ldr	r3, [pc, #120]	; (800aec4 <__sfp+0x84>)
 800ae4a:	681e      	ldr	r6, [r3, #0]
 800ae4c:	69b3      	ldr	r3, [r6, #24]
 800ae4e:	b913      	cbnz	r3, 800ae56 <__sfp+0x16>
 800ae50:	4630      	mov	r0, r6
 800ae52:	f7ff ffbd 	bl	800add0 <__sinit>
 800ae56:	3648      	adds	r6, #72	; 0x48
 800ae58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	d503      	bpl.n	800ae68 <__sfp+0x28>
 800ae60:	6833      	ldr	r3, [r6, #0]
 800ae62:	b30b      	cbz	r3, 800aea8 <__sfp+0x68>
 800ae64:	6836      	ldr	r6, [r6, #0]
 800ae66:	e7f7      	b.n	800ae58 <__sfp+0x18>
 800ae68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae6c:	b9d5      	cbnz	r5, 800aea4 <__sfp+0x64>
 800ae6e:	4b16      	ldr	r3, [pc, #88]	; (800aec8 <__sfp+0x88>)
 800ae70:	60e3      	str	r3, [r4, #12]
 800ae72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae76:	6665      	str	r5, [r4, #100]	; 0x64
 800ae78:	f000 f84c 	bl	800af14 <__retarget_lock_init_recursive>
 800ae7c:	f7ff ff96 	bl	800adac <__sfp_lock_release>
 800ae80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae88:	6025      	str	r5, [r4, #0]
 800ae8a:	61a5      	str	r5, [r4, #24]
 800ae8c:	2208      	movs	r2, #8
 800ae8e:	4629      	mov	r1, r5
 800ae90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae94:	f7fe f97a 	bl	800918c <memset>
 800ae98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aea0:	4620      	mov	r0, r4
 800aea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aea4:	3468      	adds	r4, #104	; 0x68
 800aea6:	e7d9      	b.n	800ae5c <__sfp+0x1c>
 800aea8:	2104      	movs	r1, #4
 800aeaa:	4638      	mov	r0, r7
 800aeac:	f7ff ff62 	bl	800ad74 <__sfmoreglue>
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	6030      	str	r0, [r6, #0]
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	d1d5      	bne.n	800ae64 <__sfp+0x24>
 800aeb8:	f7ff ff78 	bl	800adac <__sfp_lock_release>
 800aebc:	230c      	movs	r3, #12
 800aebe:	603b      	str	r3, [r7, #0]
 800aec0:	e7ee      	b.n	800aea0 <__sfp+0x60>
 800aec2:	bf00      	nop
 800aec4:	0800df60 	.word	0x0800df60
 800aec8:	ffff0001 	.word	0xffff0001

0800aecc <_fwalk_reent>:
 800aecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aed0:	4606      	mov	r6, r0
 800aed2:	4688      	mov	r8, r1
 800aed4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aed8:	2700      	movs	r7, #0
 800aeda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aede:	f1b9 0901 	subs.w	r9, r9, #1
 800aee2:	d505      	bpl.n	800aef0 <_fwalk_reent+0x24>
 800aee4:	6824      	ldr	r4, [r4, #0]
 800aee6:	2c00      	cmp	r4, #0
 800aee8:	d1f7      	bne.n	800aeda <_fwalk_reent+0xe>
 800aeea:	4638      	mov	r0, r7
 800aeec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aef0:	89ab      	ldrh	r3, [r5, #12]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d907      	bls.n	800af06 <_fwalk_reent+0x3a>
 800aef6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aefa:	3301      	adds	r3, #1
 800aefc:	d003      	beq.n	800af06 <_fwalk_reent+0x3a>
 800aefe:	4629      	mov	r1, r5
 800af00:	4630      	mov	r0, r6
 800af02:	47c0      	blx	r8
 800af04:	4307      	orrs	r7, r0
 800af06:	3568      	adds	r5, #104	; 0x68
 800af08:	e7e9      	b.n	800aede <_fwalk_reent+0x12>
	...

0800af0c <_localeconv_r>:
 800af0c:	4800      	ldr	r0, [pc, #0]	; (800af10 <_localeconv_r+0x4>)
 800af0e:	4770      	bx	lr
 800af10:	2000016c 	.word	0x2000016c

0800af14 <__retarget_lock_init_recursive>:
 800af14:	4770      	bx	lr

0800af16 <__retarget_lock_acquire_recursive>:
 800af16:	4770      	bx	lr

0800af18 <__retarget_lock_release_recursive>:
 800af18:	4770      	bx	lr

0800af1a <__swhatbuf_r>:
 800af1a:	b570      	push	{r4, r5, r6, lr}
 800af1c:	460e      	mov	r6, r1
 800af1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af22:	2900      	cmp	r1, #0
 800af24:	b096      	sub	sp, #88	; 0x58
 800af26:	4614      	mov	r4, r2
 800af28:	461d      	mov	r5, r3
 800af2a:	da08      	bge.n	800af3e <__swhatbuf_r+0x24>
 800af2c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800af30:	2200      	movs	r2, #0
 800af32:	602a      	str	r2, [r5, #0]
 800af34:	061a      	lsls	r2, r3, #24
 800af36:	d410      	bmi.n	800af5a <__swhatbuf_r+0x40>
 800af38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af3c:	e00e      	b.n	800af5c <__swhatbuf_r+0x42>
 800af3e:	466a      	mov	r2, sp
 800af40:	f000 fee0 	bl	800bd04 <_fstat_r>
 800af44:	2800      	cmp	r0, #0
 800af46:	dbf1      	blt.n	800af2c <__swhatbuf_r+0x12>
 800af48:	9a01      	ldr	r2, [sp, #4]
 800af4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af52:	425a      	negs	r2, r3
 800af54:	415a      	adcs	r2, r3
 800af56:	602a      	str	r2, [r5, #0]
 800af58:	e7ee      	b.n	800af38 <__swhatbuf_r+0x1e>
 800af5a:	2340      	movs	r3, #64	; 0x40
 800af5c:	2000      	movs	r0, #0
 800af5e:	6023      	str	r3, [r4, #0]
 800af60:	b016      	add	sp, #88	; 0x58
 800af62:	bd70      	pop	{r4, r5, r6, pc}

0800af64 <__smakebuf_r>:
 800af64:	898b      	ldrh	r3, [r1, #12]
 800af66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af68:	079d      	lsls	r5, r3, #30
 800af6a:	4606      	mov	r6, r0
 800af6c:	460c      	mov	r4, r1
 800af6e:	d507      	bpl.n	800af80 <__smakebuf_r+0x1c>
 800af70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af74:	6023      	str	r3, [r4, #0]
 800af76:	6123      	str	r3, [r4, #16]
 800af78:	2301      	movs	r3, #1
 800af7a:	6163      	str	r3, [r4, #20]
 800af7c:	b002      	add	sp, #8
 800af7e:	bd70      	pop	{r4, r5, r6, pc}
 800af80:	ab01      	add	r3, sp, #4
 800af82:	466a      	mov	r2, sp
 800af84:	f7ff ffc9 	bl	800af1a <__swhatbuf_r>
 800af88:	9900      	ldr	r1, [sp, #0]
 800af8a:	4605      	mov	r5, r0
 800af8c:	4630      	mov	r0, r6
 800af8e:	f000 fc45 	bl	800b81c <_malloc_r>
 800af92:	b948      	cbnz	r0, 800afa8 <__smakebuf_r+0x44>
 800af94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af98:	059a      	lsls	r2, r3, #22
 800af9a:	d4ef      	bmi.n	800af7c <__smakebuf_r+0x18>
 800af9c:	f023 0303 	bic.w	r3, r3, #3
 800afa0:	f043 0302 	orr.w	r3, r3, #2
 800afa4:	81a3      	strh	r3, [r4, #12]
 800afa6:	e7e3      	b.n	800af70 <__smakebuf_r+0xc>
 800afa8:	4b0d      	ldr	r3, [pc, #52]	; (800afe0 <__smakebuf_r+0x7c>)
 800afaa:	62b3      	str	r3, [r6, #40]	; 0x28
 800afac:	89a3      	ldrh	r3, [r4, #12]
 800afae:	6020      	str	r0, [r4, #0]
 800afb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afb4:	81a3      	strh	r3, [r4, #12]
 800afb6:	9b00      	ldr	r3, [sp, #0]
 800afb8:	6163      	str	r3, [r4, #20]
 800afba:	9b01      	ldr	r3, [sp, #4]
 800afbc:	6120      	str	r0, [r4, #16]
 800afbe:	b15b      	cbz	r3, 800afd8 <__smakebuf_r+0x74>
 800afc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afc4:	4630      	mov	r0, r6
 800afc6:	f000 feaf 	bl	800bd28 <_isatty_r>
 800afca:	b128      	cbz	r0, 800afd8 <__smakebuf_r+0x74>
 800afcc:	89a3      	ldrh	r3, [r4, #12]
 800afce:	f023 0303 	bic.w	r3, r3, #3
 800afd2:	f043 0301 	orr.w	r3, r3, #1
 800afd6:	81a3      	strh	r3, [r4, #12]
 800afd8:	89a0      	ldrh	r0, [r4, #12]
 800afda:	4305      	orrs	r5, r0
 800afdc:	81a5      	strh	r5, [r4, #12]
 800afde:	e7cd      	b.n	800af7c <__smakebuf_r+0x18>
 800afe0:	0800ad69 	.word	0x0800ad69

0800afe4 <malloc>:
 800afe4:	4b02      	ldr	r3, [pc, #8]	; (800aff0 <malloc+0xc>)
 800afe6:	4601      	mov	r1, r0
 800afe8:	6818      	ldr	r0, [r3, #0]
 800afea:	f000 bc17 	b.w	800b81c <_malloc_r>
 800afee:	bf00      	nop
 800aff0:	20000018 	.word	0x20000018

0800aff4 <memcpy>:
 800aff4:	440a      	add	r2, r1
 800aff6:	4291      	cmp	r1, r2
 800aff8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800affc:	d100      	bne.n	800b000 <memcpy+0xc>
 800affe:	4770      	bx	lr
 800b000:	b510      	push	{r4, lr}
 800b002:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b00a:	4291      	cmp	r1, r2
 800b00c:	d1f9      	bne.n	800b002 <memcpy+0xe>
 800b00e:	bd10      	pop	{r4, pc}

0800b010 <_Balloc>:
 800b010:	b570      	push	{r4, r5, r6, lr}
 800b012:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b014:	4604      	mov	r4, r0
 800b016:	460d      	mov	r5, r1
 800b018:	b976      	cbnz	r6, 800b038 <_Balloc+0x28>
 800b01a:	2010      	movs	r0, #16
 800b01c:	f7ff ffe2 	bl	800afe4 <malloc>
 800b020:	4602      	mov	r2, r0
 800b022:	6260      	str	r0, [r4, #36]	; 0x24
 800b024:	b920      	cbnz	r0, 800b030 <_Balloc+0x20>
 800b026:	4b18      	ldr	r3, [pc, #96]	; (800b088 <_Balloc+0x78>)
 800b028:	4818      	ldr	r0, [pc, #96]	; (800b08c <_Balloc+0x7c>)
 800b02a:	2166      	movs	r1, #102	; 0x66
 800b02c:	f000 fe2a 	bl	800bc84 <__assert_func>
 800b030:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b034:	6006      	str	r6, [r0, #0]
 800b036:	60c6      	str	r6, [r0, #12]
 800b038:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b03a:	68f3      	ldr	r3, [r6, #12]
 800b03c:	b183      	cbz	r3, 800b060 <_Balloc+0x50>
 800b03e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b046:	b9b8      	cbnz	r0, 800b078 <_Balloc+0x68>
 800b048:	2101      	movs	r1, #1
 800b04a:	fa01 f605 	lsl.w	r6, r1, r5
 800b04e:	1d72      	adds	r2, r6, #5
 800b050:	0092      	lsls	r2, r2, #2
 800b052:	4620      	mov	r0, r4
 800b054:	f000 fb60 	bl	800b718 <_calloc_r>
 800b058:	b160      	cbz	r0, 800b074 <_Balloc+0x64>
 800b05a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b05e:	e00e      	b.n	800b07e <_Balloc+0x6e>
 800b060:	2221      	movs	r2, #33	; 0x21
 800b062:	2104      	movs	r1, #4
 800b064:	4620      	mov	r0, r4
 800b066:	f000 fb57 	bl	800b718 <_calloc_r>
 800b06a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b06c:	60f0      	str	r0, [r6, #12]
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d1e4      	bne.n	800b03e <_Balloc+0x2e>
 800b074:	2000      	movs	r0, #0
 800b076:	bd70      	pop	{r4, r5, r6, pc}
 800b078:	6802      	ldr	r2, [r0, #0]
 800b07a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b07e:	2300      	movs	r3, #0
 800b080:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b084:	e7f7      	b.n	800b076 <_Balloc+0x66>
 800b086:	bf00      	nop
 800b088:	0800dfa5 	.word	0x0800dfa5
 800b08c:	0800e088 	.word	0x0800e088

0800b090 <_Bfree>:
 800b090:	b570      	push	{r4, r5, r6, lr}
 800b092:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b094:	4605      	mov	r5, r0
 800b096:	460c      	mov	r4, r1
 800b098:	b976      	cbnz	r6, 800b0b8 <_Bfree+0x28>
 800b09a:	2010      	movs	r0, #16
 800b09c:	f7ff ffa2 	bl	800afe4 <malloc>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	6268      	str	r0, [r5, #36]	; 0x24
 800b0a4:	b920      	cbnz	r0, 800b0b0 <_Bfree+0x20>
 800b0a6:	4b09      	ldr	r3, [pc, #36]	; (800b0cc <_Bfree+0x3c>)
 800b0a8:	4809      	ldr	r0, [pc, #36]	; (800b0d0 <_Bfree+0x40>)
 800b0aa:	218a      	movs	r1, #138	; 0x8a
 800b0ac:	f000 fdea 	bl	800bc84 <__assert_func>
 800b0b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0b4:	6006      	str	r6, [r0, #0]
 800b0b6:	60c6      	str	r6, [r0, #12]
 800b0b8:	b13c      	cbz	r4, 800b0ca <_Bfree+0x3a>
 800b0ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b0bc:	6862      	ldr	r2, [r4, #4]
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0c4:	6021      	str	r1, [r4, #0]
 800b0c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b0ca:	bd70      	pop	{r4, r5, r6, pc}
 800b0cc:	0800dfa5 	.word	0x0800dfa5
 800b0d0:	0800e088 	.word	0x0800e088

0800b0d4 <__multadd>:
 800b0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d8:	690d      	ldr	r5, [r1, #16]
 800b0da:	4607      	mov	r7, r0
 800b0dc:	460c      	mov	r4, r1
 800b0de:	461e      	mov	r6, r3
 800b0e0:	f101 0c14 	add.w	ip, r1, #20
 800b0e4:	2000      	movs	r0, #0
 800b0e6:	f8dc 3000 	ldr.w	r3, [ip]
 800b0ea:	b299      	uxth	r1, r3
 800b0ec:	fb02 6101 	mla	r1, r2, r1, r6
 800b0f0:	0c1e      	lsrs	r6, r3, #16
 800b0f2:	0c0b      	lsrs	r3, r1, #16
 800b0f4:	fb02 3306 	mla	r3, r2, r6, r3
 800b0f8:	b289      	uxth	r1, r1
 800b0fa:	3001      	adds	r0, #1
 800b0fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b100:	4285      	cmp	r5, r0
 800b102:	f84c 1b04 	str.w	r1, [ip], #4
 800b106:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b10a:	dcec      	bgt.n	800b0e6 <__multadd+0x12>
 800b10c:	b30e      	cbz	r6, 800b152 <__multadd+0x7e>
 800b10e:	68a3      	ldr	r3, [r4, #8]
 800b110:	42ab      	cmp	r3, r5
 800b112:	dc19      	bgt.n	800b148 <__multadd+0x74>
 800b114:	6861      	ldr	r1, [r4, #4]
 800b116:	4638      	mov	r0, r7
 800b118:	3101      	adds	r1, #1
 800b11a:	f7ff ff79 	bl	800b010 <_Balloc>
 800b11e:	4680      	mov	r8, r0
 800b120:	b928      	cbnz	r0, 800b12e <__multadd+0x5a>
 800b122:	4602      	mov	r2, r0
 800b124:	4b0c      	ldr	r3, [pc, #48]	; (800b158 <__multadd+0x84>)
 800b126:	480d      	ldr	r0, [pc, #52]	; (800b15c <__multadd+0x88>)
 800b128:	21b5      	movs	r1, #181	; 0xb5
 800b12a:	f000 fdab 	bl	800bc84 <__assert_func>
 800b12e:	6922      	ldr	r2, [r4, #16]
 800b130:	3202      	adds	r2, #2
 800b132:	f104 010c 	add.w	r1, r4, #12
 800b136:	0092      	lsls	r2, r2, #2
 800b138:	300c      	adds	r0, #12
 800b13a:	f7ff ff5b 	bl	800aff4 <memcpy>
 800b13e:	4621      	mov	r1, r4
 800b140:	4638      	mov	r0, r7
 800b142:	f7ff ffa5 	bl	800b090 <_Bfree>
 800b146:	4644      	mov	r4, r8
 800b148:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b14c:	3501      	adds	r5, #1
 800b14e:	615e      	str	r6, [r3, #20]
 800b150:	6125      	str	r5, [r4, #16]
 800b152:	4620      	mov	r0, r4
 800b154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b158:	0800e017 	.word	0x0800e017
 800b15c:	0800e088 	.word	0x0800e088

0800b160 <__hi0bits>:
 800b160:	0c03      	lsrs	r3, r0, #16
 800b162:	041b      	lsls	r3, r3, #16
 800b164:	b9d3      	cbnz	r3, 800b19c <__hi0bits+0x3c>
 800b166:	0400      	lsls	r0, r0, #16
 800b168:	2310      	movs	r3, #16
 800b16a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b16e:	bf04      	itt	eq
 800b170:	0200      	lsleq	r0, r0, #8
 800b172:	3308      	addeq	r3, #8
 800b174:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b178:	bf04      	itt	eq
 800b17a:	0100      	lsleq	r0, r0, #4
 800b17c:	3304      	addeq	r3, #4
 800b17e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b182:	bf04      	itt	eq
 800b184:	0080      	lsleq	r0, r0, #2
 800b186:	3302      	addeq	r3, #2
 800b188:	2800      	cmp	r0, #0
 800b18a:	db05      	blt.n	800b198 <__hi0bits+0x38>
 800b18c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b190:	f103 0301 	add.w	r3, r3, #1
 800b194:	bf08      	it	eq
 800b196:	2320      	moveq	r3, #32
 800b198:	4618      	mov	r0, r3
 800b19a:	4770      	bx	lr
 800b19c:	2300      	movs	r3, #0
 800b19e:	e7e4      	b.n	800b16a <__hi0bits+0xa>

0800b1a0 <__lo0bits>:
 800b1a0:	6803      	ldr	r3, [r0, #0]
 800b1a2:	f013 0207 	ands.w	r2, r3, #7
 800b1a6:	4601      	mov	r1, r0
 800b1a8:	d00b      	beq.n	800b1c2 <__lo0bits+0x22>
 800b1aa:	07da      	lsls	r2, r3, #31
 800b1ac:	d423      	bmi.n	800b1f6 <__lo0bits+0x56>
 800b1ae:	0798      	lsls	r0, r3, #30
 800b1b0:	bf49      	itett	mi
 800b1b2:	085b      	lsrmi	r3, r3, #1
 800b1b4:	089b      	lsrpl	r3, r3, #2
 800b1b6:	2001      	movmi	r0, #1
 800b1b8:	600b      	strmi	r3, [r1, #0]
 800b1ba:	bf5c      	itt	pl
 800b1bc:	600b      	strpl	r3, [r1, #0]
 800b1be:	2002      	movpl	r0, #2
 800b1c0:	4770      	bx	lr
 800b1c2:	b298      	uxth	r0, r3
 800b1c4:	b9a8      	cbnz	r0, 800b1f2 <__lo0bits+0x52>
 800b1c6:	0c1b      	lsrs	r3, r3, #16
 800b1c8:	2010      	movs	r0, #16
 800b1ca:	b2da      	uxtb	r2, r3
 800b1cc:	b90a      	cbnz	r2, 800b1d2 <__lo0bits+0x32>
 800b1ce:	3008      	adds	r0, #8
 800b1d0:	0a1b      	lsrs	r3, r3, #8
 800b1d2:	071a      	lsls	r2, r3, #28
 800b1d4:	bf04      	itt	eq
 800b1d6:	091b      	lsreq	r3, r3, #4
 800b1d8:	3004      	addeq	r0, #4
 800b1da:	079a      	lsls	r2, r3, #30
 800b1dc:	bf04      	itt	eq
 800b1de:	089b      	lsreq	r3, r3, #2
 800b1e0:	3002      	addeq	r0, #2
 800b1e2:	07da      	lsls	r2, r3, #31
 800b1e4:	d403      	bmi.n	800b1ee <__lo0bits+0x4e>
 800b1e6:	085b      	lsrs	r3, r3, #1
 800b1e8:	f100 0001 	add.w	r0, r0, #1
 800b1ec:	d005      	beq.n	800b1fa <__lo0bits+0x5a>
 800b1ee:	600b      	str	r3, [r1, #0]
 800b1f0:	4770      	bx	lr
 800b1f2:	4610      	mov	r0, r2
 800b1f4:	e7e9      	b.n	800b1ca <__lo0bits+0x2a>
 800b1f6:	2000      	movs	r0, #0
 800b1f8:	4770      	bx	lr
 800b1fa:	2020      	movs	r0, #32
 800b1fc:	4770      	bx	lr
	...

0800b200 <__i2b>:
 800b200:	b510      	push	{r4, lr}
 800b202:	460c      	mov	r4, r1
 800b204:	2101      	movs	r1, #1
 800b206:	f7ff ff03 	bl	800b010 <_Balloc>
 800b20a:	4602      	mov	r2, r0
 800b20c:	b928      	cbnz	r0, 800b21a <__i2b+0x1a>
 800b20e:	4b05      	ldr	r3, [pc, #20]	; (800b224 <__i2b+0x24>)
 800b210:	4805      	ldr	r0, [pc, #20]	; (800b228 <__i2b+0x28>)
 800b212:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b216:	f000 fd35 	bl	800bc84 <__assert_func>
 800b21a:	2301      	movs	r3, #1
 800b21c:	6144      	str	r4, [r0, #20]
 800b21e:	6103      	str	r3, [r0, #16]
 800b220:	bd10      	pop	{r4, pc}
 800b222:	bf00      	nop
 800b224:	0800e017 	.word	0x0800e017
 800b228:	0800e088 	.word	0x0800e088

0800b22c <__multiply>:
 800b22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b230:	4691      	mov	r9, r2
 800b232:	690a      	ldr	r2, [r1, #16]
 800b234:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b238:	429a      	cmp	r2, r3
 800b23a:	bfb8      	it	lt
 800b23c:	460b      	movlt	r3, r1
 800b23e:	460c      	mov	r4, r1
 800b240:	bfbc      	itt	lt
 800b242:	464c      	movlt	r4, r9
 800b244:	4699      	movlt	r9, r3
 800b246:	6927      	ldr	r7, [r4, #16]
 800b248:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b24c:	68a3      	ldr	r3, [r4, #8]
 800b24e:	6861      	ldr	r1, [r4, #4]
 800b250:	eb07 060a 	add.w	r6, r7, sl
 800b254:	42b3      	cmp	r3, r6
 800b256:	b085      	sub	sp, #20
 800b258:	bfb8      	it	lt
 800b25a:	3101      	addlt	r1, #1
 800b25c:	f7ff fed8 	bl	800b010 <_Balloc>
 800b260:	b930      	cbnz	r0, 800b270 <__multiply+0x44>
 800b262:	4602      	mov	r2, r0
 800b264:	4b44      	ldr	r3, [pc, #272]	; (800b378 <__multiply+0x14c>)
 800b266:	4845      	ldr	r0, [pc, #276]	; (800b37c <__multiply+0x150>)
 800b268:	f240 115d 	movw	r1, #349	; 0x15d
 800b26c:	f000 fd0a 	bl	800bc84 <__assert_func>
 800b270:	f100 0514 	add.w	r5, r0, #20
 800b274:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b278:	462b      	mov	r3, r5
 800b27a:	2200      	movs	r2, #0
 800b27c:	4543      	cmp	r3, r8
 800b27e:	d321      	bcc.n	800b2c4 <__multiply+0x98>
 800b280:	f104 0314 	add.w	r3, r4, #20
 800b284:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b288:	f109 0314 	add.w	r3, r9, #20
 800b28c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b290:	9202      	str	r2, [sp, #8]
 800b292:	1b3a      	subs	r2, r7, r4
 800b294:	3a15      	subs	r2, #21
 800b296:	f022 0203 	bic.w	r2, r2, #3
 800b29a:	3204      	adds	r2, #4
 800b29c:	f104 0115 	add.w	r1, r4, #21
 800b2a0:	428f      	cmp	r7, r1
 800b2a2:	bf38      	it	cc
 800b2a4:	2204      	movcc	r2, #4
 800b2a6:	9201      	str	r2, [sp, #4]
 800b2a8:	9a02      	ldr	r2, [sp, #8]
 800b2aa:	9303      	str	r3, [sp, #12]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d80c      	bhi.n	800b2ca <__multiply+0x9e>
 800b2b0:	2e00      	cmp	r6, #0
 800b2b2:	dd03      	ble.n	800b2bc <__multiply+0x90>
 800b2b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d05a      	beq.n	800b372 <__multiply+0x146>
 800b2bc:	6106      	str	r6, [r0, #16]
 800b2be:	b005      	add	sp, #20
 800b2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c4:	f843 2b04 	str.w	r2, [r3], #4
 800b2c8:	e7d8      	b.n	800b27c <__multiply+0x50>
 800b2ca:	f8b3 a000 	ldrh.w	sl, [r3]
 800b2ce:	f1ba 0f00 	cmp.w	sl, #0
 800b2d2:	d024      	beq.n	800b31e <__multiply+0xf2>
 800b2d4:	f104 0e14 	add.w	lr, r4, #20
 800b2d8:	46a9      	mov	r9, r5
 800b2da:	f04f 0c00 	mov.w	ip, #0
 800b2de:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b2e2:	f8d9 1000 	ldr.w	r1, [r9]
 800b2e6:	fa1f fb82 	uxth.w	fp, r2
 800b2ea:	b289      	uxth	r1, r1
 800b2ec:	fb0a 110b 	mla	r1, sl, fp, r1
 800b2f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b2f4:	f8d9 2000 	ldr.w	r2, [r9]
 800b2f8:	4461      	add	r1, ip
 800b2fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b2fe:	fb0a c20b 	mla	r2, sl, fp, ip
 800b302:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b306:	b289      	uxth	r1, r1
 800b308:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b30c:	4577      	cmp	r7, lr
 800b30e:	f849 1b04 	str.w	r1, [r9], #4
 800b312:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b316:	d8e2      	bhi.n	800b2de <__multiply+0xb2>
 800b318:	9a01      	ldr	r2, [sp, #4]
 800b31a:	f845 c002 	str.w	ip, [r5, r2]
 800b31e:	9a03      	ldr	r2, [sp, #12]
 800b320:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b324:	3304      	adds	r3, #4
 800b326:	f1b9 0f00 	cmp.w	r9, #0
 800b32a:	d020      	beq.n	800b36e <__multiply+0x142>
 800b32c:	6829      	ldr	r1, [r5, #0]
 800b32e:	f104 0c14 	add.w	ip, r4, #20
 800b332:	46ae      	mov	lr, r5
 800b334:	f04f 0a00 	mov.w	sl, #0
 800b338:	f8bc b000 	ldrh.w	fp, [ip]
 800b33c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b340:	fb09 220b 	mla	r2, r9, fp, r2
 800b344:	4492      	add	sl, r2
 800b346:	b289      	uxth	r1, r1
 800b348:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b34c:	f84e 1b04 	str.w	r1, [lr], #4
 800b350:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b354:	f8be 1000 	ldrh.w	r1, [lr]
 800b358:	0c12      	lsrs	r2, r2, #16
 800b35a:	fb09 1102 	mla	r1, r9, r2, r1
 800b35e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b362:	4567      	cmp	r7, ip
 800b364:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b368:	d8e6      	bhi.n	800b338 <__multiply+0x10c>
 800b36a:	9a01      	ldr	r2, [sp, #4]
 800b36c:	50a9      	str	r1, [r5, r2]
 800b36e:	3504      	adds	r5, #4
 800b370:	e79a      	b.n	800b2a8 <__multiply+0x7c>
 800b372:	3e01      	subs	r6, #1
 800b374:	e79c      	b.n	800b2b0 <__multiply+0x84>
 800b376:	bf00      	nop
 800b378:	0800e017 	.word	0x0800e017
 800b37c:	0800e088 	.word	0x0800e088

0800b380 <__pow5mult>:
 800b380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b384:	4615      	mov	r5, r2
 800b386:	f012 0203 	ands.w	r2, r2, #3
 800b38a:	4606      	mov	r6, r0
 800b38c:	460f      	mov	r7, r1
 800b38e:	d007      	beq.n	800b3a0 <__pow5mult+0x20>
 800b390:	4c25      	ldr	r4, [pc, #148]	; (800b428 <__pow5mult+0xa8>)
 800b392:	3a01      	subs	r2, #1
 800b394:	2300      	movs	r3, #0
 800b396:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b39a:	f7ff fe9b 	bl	800b0d4 <__multadd>
 800b39e:	4607      	mov	r7, r0
 800b3a0:	10ad      	asrs	r5, r5, #2
 800b3a2:	d03d      	beq.n	800b420 <__pow5mult+0xa0>
 800b3a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b3a6:	b97c      	cbnz	r4, 800b3c8 <__pow5mult+0x48>
 800b3a8:	2010      	movs	r0, #16
 800b3aa:	f7ff fe1b 	bl	800afe4 <malloc>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	6270      	str	r0, [r6, #36]	; 0x24
 800b3b2:	b928      	cbnz	r0, 800b3c0 <__pow5mult+0x40>
 800b3b4:	4b1d      	ldr	r3, [pc, #116]	; (800b42c <__pow5mult+0xac>)
 800b3b6:	481e      	ldr	r0, [pc, #120]	; (800b430 <__pow5mult+0xb0>)
 800b3b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b3bc:	f000 fc62 	bl	800bc84 <__assert_func>
 800b3c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3c4:	6004      	str	r4, [r0, #0]
 800b3c6:	60c4      	str	r4, [r0, #12]
 800b3c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b3cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3d0:	b94c      	cbnz	r4, 800b3e6 <__pow5mult+0x66>
 800b3d2:	f240 2171 	movw	r1, #625	; 0x271
 800b3d6:	4630      	mov	r0, r6
 800b3d8:	f7ff ff12 	bl	800b200 <__i2b>
 800b3dc:	2300      	movs	r3, #0
 800b3de:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	6003      	str	r3, [r0, #0]
 800b3e6:	f04f 0900 	mov.w	r9, #0
 800b3ea:	07eb      	lsls	r3, r5, #31
 800b3ec:	d50a      	bpl.n	800b404 <__pow5mult+0x84>
 800b3ee:	4639      	mov	r1, r7
 800b3f0:	4622      	mov	r2, r4
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	f7ff ff1a 	bl	800b22c <__multiply>
 800b3f8:	4639      	mov	r1, r7
 800b3fa:	4680      	mov	r8, r0
 800b3fc:	4630      	mov	r0, r6
 800b3fe:	f7ff fe47 	bl	800b090 <_Bfree>
 800b402:	4647      	mov	r7, r8
 800b404:	106d      	asrs	r5, r5, #1
 800b406:	d00b      	beq.n	800b420 <__pow5mult+0xa0>
 800b408:	6820      	ldr	r0, [r4, #0]
 800b40a:	b938      	cbnz	r0, 800b41c <__pow5mult+0x9c>
 800b40c:	4622      	mov	r2, r4
 800b40e:	4621      	mov	r1, r4
 800b410:	4630      	mov	r0, r6
 800b412:	f7ff ff0b 	bl	800b22c <__multiply>
 800b416:	6020      	str	r0, [r4, #0]
 800b418:	f8c0 9000 	str.w	r9, [r0]
 800b41c:	4604      	mov	r4, r0
 800b41e:	e7e4      	b.n	800b3ea <__pow5mult+0x6a>
 800b420:	4638      	mov	r0, r7
 800b422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b426:	bf00      	nop
 800b428:	0800e1d8 	.word	0x0800e1d8
 800b42c:	0800dfa5 	.word	0x0800dfa5
 800b430:	0800e088 	.word	0x0800e088

0800b434 <__lshift>:
 800b434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b438:	460c      	mov	r4, r1
 800b43a:	6849      	ldr	r1, [r1, #4]
 800b43c:	6923      	ldr	r3, [r4, #16]
 800b43e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b442:	68a3      	ldr	r3, [r4, #8]
 800b444:	4607      	mov	r7, r0
 800b446:	4691      	mov	r9, r2
 800b448:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b44c:	f108 0601 	add.w	r6, r8, #1
 800b450:	42b3      	cmp	r3, r6
 800b452:	db0b      	blt.n	800b46c <__lshift+0x38>
 800b454:	4638      	mov	r0, r7
 800b456:	f7ff fddb 	bl	800b010 <_Balloc>
 800b45a:	4605      	mov	r5, r0
 800b45c:	b948      	cbnz	r0, 800b472 <__lshift+0x3e>
 800b45e:	4602      	mov	r2, r0
 800b460:	4b2a      	ldr	r3, [pc, #168]	; (800b50c <__lshift+0xd8>)
 800b462:	482b      	ldr	r0, [pc, #172]	; (800b510 <__lshift+0xdc>)
 800b464:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b468:	f000 fc0c 	bl	800bc84 <__assert_func>
 800b46c:	3101      	adds	r1, #1
 800b46e:	005b      	lsls	r3, r3, #1
 800b470:	e7ee      	b.n	800b450 <__lshift+0x1c>
 800b472:	2300      	movs	r3, #0
 800b474:	f100 0114 	add.w	r1, r0, #20
 800b478:	f100 0210 	add.w	r2, r0, #16
 800b47c:	4618      	mov	r0, r3
 800b47e:	4553      	cmp	r3, sl
 800b480:	db37      	blt.n	800b4f2 <__lshift+0xbe>
 800b482:	6920      	ldr	r0, [r4, #16]
 800b484:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b488:	f104 0314 	add.w	r3, r4, #20
 800b48c:	f019 091f 	ands.w	r9, r9, #31
 800b490:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b494:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b498:	d02f      	beq.n	800b4fa <__lshift+0xc6>
 800b49a:	f1c9 0e20 	rsb	lr, r9, #32
 800b49e:	468a      	mov	sl, r1
 800b4a0:	f04f 0c00 	mov.w	ip, #0
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	fa02 f209 	lsl.w	r2, r2, r9
 800b4aa:	ea42 020c 	orr.w	r2, r2, ip
 800b4ae:	f84a 2b04 	str.w	r2, [sl], #4
 800b4b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4b6:	4298      	cmp	r0, r3
 800b4b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b4bc:	d8f2      	bhi.n	800b4a4 <__lshift+0x70>
 800b4be:	1b03      	subs	r3, r0, r4
 800b4c0:	3b15      	subs	r3, #21
 800b4c2:	f023 0303 	bic.w	r3, r3, #3
 800b4c6:	3304      	adds	r3, #4
 800b4c8:	f104 0215 	add.w	r2, r4, #21
 800b4cc:	4290      	cmp	r0, r2
 800b4ce:	bf38      	it	cc
 800b4d0:	2304      	movcc	r3, #4
 800b4d2:	f841 c003 	str.w	ip, [r1, r3]
 800b4d6:	f1bc 0f00 	cmp.w	ip, #0
 800b4da:	d001      	beq.n	800b4e0 <__lshift+0xac>
 800b4dc:	f108 0602 	add.w	r6, r8, #2
 800b4e0:	3e01      	subs	r6, #1
 800b4e2:	4638      	mov	r0, r7
 800b4e4:	612e      	str	r6, [r5, #16]
 800b4e6:	4621      	mov	r1, r4
 800b4e8:	f7ff fdd2 	bl	800b090 <_Bfree>
 800b4ec:	4628      	mov	r0, r5
 800b4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	e7c1      	b.n	800b47e <__lshift+0x4a>
 800b4fa:	3904      	subs	r1, #4
 800b4fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b500:	f841 2f04 	str.w	r2, [r1, #4]!
 800b504:	4298      	cmp	r0, r3
 800b506:	d8f9      	bhi.n	800b4fc <__lshift+0xc8>
 800b508:	e7ea      	b.n	800b4e0 <__lshift+0xac>
 800b50a:	bf00      	nop
 800b50c:	0800e017 	.word	0x0800e017
 800b510:	0800e088 	.word	0x0800e088

0800b514 <__mcmp>:
 800b514:	b530      	push	{r4, r5, lr}
 800b516:	6902      	ldr	r2, [r0, #16]
 800b518:	690c      	ldr	r4, [r1, #16]
 800b51a:	1b12      	subs	r2, r2, r4
 800b51c:	d10e      	bne.n	800b53c <__mcmp+0x28>
 800b51e:	f100 0314 	add.w	r3, r0, #20
 800b522:	3114      	adds	r1, #20
 800b524:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b528:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b52c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b530:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b534:	42a5      	cmp	r5, r4
 800b536:	d003      	beq.n	800b540 <__mcmp+0x2c>
 800b538:	d305      	bcc.n	800b546 <__mcmp+0x32>
 800b53a:	2201      	movs	r2, #1
 800b53c:	4610      	mov	r0, r2
 800b53e:	bd30      	pop	{r4, r5, pc}
 800b540:	4283      	cmp	r3, r0
 800b542:	d3f3      	bcc.n	800b52c <__mcmp+0x18>
 800b544:	e7fa      	b.n	800b53c <__mcmp+0x28>
 800b546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b54a:	e7f7      	b.n	800b53c <__mcmp+0x28>

0800b54c <__mdiff>:
 800b54c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b550:	460c      	mov	r4, r1
 800b552:	4606      	mov	r6, r0
 800b554:	4611      	mov	r1, r2
 800b556:	4620      	mov	r0, r4
 800b558:	4690      	mov	r8, r2
 800b55a:	f7ff ffdb 	bl	800b514 <__mcmp>
 800b55e:	1e05      	subs	r5, r0, #0
 800b560:	d110      	bne.n	800b584 <__mdiff+0x38>
 800b562:	4629      	mov	r1, r5
 800b564:	4630      	mov	r0, r6
 800b566:	f7ff fd53 	bl	800b010 <_Balloc>
 800b56a:	b930      	cbnz	r0, 800b57a <__mdiff+0x2e>
 800b56c:	4b3a      	ldr	r3, [pc, #232]	; (800b658 <__mdiff+0x10c>)
 800b56e:	4602      	mov	r2, r0
 800b570:	f240 2132 	movw	r1, #562	; 0x232
 800b574:	4839      	ldr	r0, [pc, #228]	; (800b65c <__mdiff+0x110>)
 800b576:	f000 fb85 	bl	800bc84 <__assert_func>
 800b57a:	2301      	movs	r3, #1
 800b57c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b584:	bfa4      	itt	ge
 800b586:	4643      	movge	r3, r8
 800b588:	46a0      	movge	r8, r4
 800b58a:	4630      	mov	r0, r6
 800b58c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b590:	bfa6      	itte	ge
 800b592:	461c      	movge	r4, r3
 800b594:	2500      	movge	r5, #0
 800b596:	2501      	movlt	r5, #1
 800b598:	f7ff fd3a 	bl	800b010 <_Balloc>
 800b59c:	b920      	cbnz	r0, 800b5a8 <__mdiff+0x5c>
 800b59e:	4b2e      	ldr	r3, [pc, #184]	; (800b658 <__mdiff+0x10c>)
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b5a6:	e7e5      	b.n	800b574 <__mdiff+0x28>
 800b5a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b5ac:	6926      	ldr	r6, [r4, #16]
 800b5ae:	60c5      	str	r5, [r0, #12]
 800b5b0:	f104 0914 	add.w	r9, r4, #20
 800b5b4:	f108 0514 	add.w	r5, r8, #20
 800b5b8:	f100 0e14 	add.w	lr, r0, #20
 800b5bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b5c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b5c4:	f108 0210 	add.w	r2, r8, #16
 800b5c8:	46f2      	mov	sl, lr
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b5d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b5d4:	fa1f f883 	uxth.w	r8, r3
 800b5d8:	fa11 f18b 	uxtah	r1, r1, fp
 800b5dc:	0c1b      	lsrs	r3, r3, #16
 800b5de:	eba1 0808 	sub.w	r8, r1, r8
 800b5e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b5e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b5ea:	fa1f f888 	uxth.w	r8, r8
 800b5ee:	1419      	asrs	r1, r3, #16
 800b5f0:	454e      	cmp	r6, r9
 800b5f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b5f6:	f84a 3b04 	str.w	r3, [sl], #4
 800b5fa:	d8e7      	bhi.n	800b5cc <__mdiff+0x80>
 800b5fc:	1b33      	subs	r3, r6, r4
 800b5fe:	3b15      	subs	r3, #21
 800b600:	f023 0303 	bic.w	r3, r3, #3
 800b604:	3304      	adds	r3, #4
 800b606:	3415      	adds	r4, #21
 800b608:	42a6      	cmp	r6, r4
 800b60a:	bf38      	it	cc
 800b60c:	2304      	movcc	r3, #4
 800b60e:	441d      	add	r5, r3
 800b610:	4473      	add	r3, lr
 800b612:	469e      	mov	lr, r3
 800b614:	462e      	mov	r6, r5
 800b616:	4566      	cmp	r6, ip
 800b618:	d30e      	bcc.n	800b638 <__mdiff+0xec>
 800b61a:	f10c 0203 	add.w	r2, ip, #3
 800b61e:	1b52      	subs	r2, r2, r5
 800b620:	f022 0203 	bic.w	r2, r2, #3
 800b624:	3d03      	subs	r5, #3
 800b626:	45ac      	cmp	ip, r5
 800b628:	bf38      	it	cc
 800b62a:	2200      	movcc	r2, #0
 800b62c:	441a      	add	r2, r3
 800b62e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b632:	b17b      	cbz	r3, 800b654 <__mdiff+0x108>
 800b634:	6107      	str	r7, [r0, #16]
 800b636:	e7a3      	b.n	800b580 <__mdiff+0x34>
 800b638:	f856 8b04 	ldr.w	r8, [r6], #4
 800b63c:	fa11 f288 	uxtah	r2, r1, r8
 800b640:	1414      	asrs	r4, r2, #16
 800b642:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b646:	b292      	uxth	r2, r2
 800b648:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b64c:	f84e 2b04 	str.w	r2, [lr], #4
 800b650:	1421      	asrs	r1, r4, #16
 800b652:	e7e0      	b.n	800b616 <__mdiff+0xca>
 800b654:	3f01      	subs	r7, #1
 800b656:	e7ea      	b.n	800b62e <__mdiff+0xe2>
 800b658:	0800e017 	.word	0x0800e017
 800b65c:	0800e088 	.word	0x0800e088

0800b660 <__d2b>:
 800b660:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b664:	4689      	mov	r9, r1
 800b666:	2101      	movs	r1, #1
 800b668:	ec57 6b10 	vmov	r6, r7, d0
 800b66c:	4690      	mov	r8, r2
 800b66e:	f7ff fccf 	bl	800b010 <_Balloc>
 800b672:	4604      	mov	r4, r0
 800b674:	b930      	cbnz	r0, 800b684 <__d2b+0x24>
 800b676:	4602      	mov	r2, r0
 800b678:	4b25      	ldr	r3, [pc, #148]	; (800b710 <__d2b+0xb0>)
 800b67a:	4826      	ldr	r0, [pc, #152]	; (800b714 <__d2b+0xb4>)
 800b67c:	f240 310a 	movw	r1, #778	; 0x30a
 800b680:	f000 fb00 	bl	800bc84 <__assert_func>
 800b684:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b688:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b68c:	bb35      	cbnz	r5, 800b6dc <__d2b+0x7c>
 800b68e:	2e00      	cmp	r6, #0
 800b690:	9301      	str	r3, [sp, #4]
 800b692:	d028      	beq.n	800b6e6 <__d2b+0x86>
 800b694:	4668      	mov	r0, sp
 800b696:	9600      	str	r6, [sp, #0]
 800b698:	f7ff fd82 	bl	800b1a0 <__lo0bits>
 800b69c:	9900      	ldr	r1, [sp, #0]
 800b69e:	b300      	cbz	r0, 800b6e2 <__d2b+0x82>
 800b6a0:	9a01      	ldr	r2, [sp, #4]
 800b6a2:	f1c0 0320 	rsb	r3, r0, #32
 800b6a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b6aa:	430b      	orrs	r3, r1
 800b6ac:	40c2      	lsrs	r2, r0
 800b6ae:	6163      	str	r3, [r4, #20]
 800b6b0:	9201      	str	r2, [sp, #4]
 800b6b2:	9b01      	ldr	r3, [sp, #4]
 800b6b4:	61a3      	str	r3, [r4, #24]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	bf14      	ite	ne
 800b6ba:	2202      	movne	r2, #2
 800b6bc:	2201      	moveq	r2, #1
 800b6be:	6122      	str	r2, [r4, #16]
 800b6c0:	b1d5      	cbz	r5, 800b6f8 <__d2b+0x98>
 800b6c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b6c6:	4405      	add	r5, r0
 800b6c8:	f8c9 5000 	str.w	r5, [r9]
 800b6cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b6d0:	f8c8 0000 	str.w	r0, [r8]
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	b003      	add	sp, #12
 800b6d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6e0:	e7d5      	b.n	800b68e <__d2b+0x2e>
 800b6e2:	6161      	str	r1, [r4, #20]
 800b6e4:	e7e5      	b.n	800b6b2 <__d2b+0x52>
 800b6e6:	a801      	add	r0, sp, #4
 800b6e8:	f7ff fd5a 	bl	800b1a0 <__lo0bits>
 800b6ec:	9b01      	ldr	r3, [sp, #4]
 800b6ee:	6163      	str	r3, [r4, #20]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	6122      	str	r2, [r4, #16]
 800b6f4:	3020      	adds	r0, #32
 800b6f6:	e7e3      	b.n	800b6c0 <__d2b+0x60>
 800b6f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b700:	f8c9 0000 	str.w	r0, [r9]
 800b704:	6918      	ldr	r0, [r3, #16]
 800b706:	f7ff fd2b 	bl	800b160 <__hi0bits>
 800b70a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b70e:	e7df      	b.n	800b6d0 <__d2b+0x70>
 800b710:	0800e017 	.word	0x0800e017
 800b714:	0800e088 	.word	0x0800e088

0800b718 <_calloc_r>:
 800b718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b71a:	fba1 2402 	umull	r2, r4, r1, r2
 800b71e:	b94c      	cbnz	r4, 800b734 <_calloc_r+0x1c>
 800b720:	4611      	mov	r1, r2
 800b722:	9201      	str	r2, [sp, #4]
 800b724:	f000 f87a 	bl	800b81c <_malloc_r>
 800b728:	9a01      	ldr	r2, [sp, #4]
 800b72a:	4605      	mov	r5, r0
 800b72c:	b930      	cbnz	r0, 800b73c <_calloc_r+0x24>
 800b72e:	4628      	mov	r0, r5
 800b730:	b003      	add	sp, #12
 800b732:	bd30      	pop	{r4, r5, pc}
 800b734:	220c      	movs	r2, #12
 800b736:	6002      	str	r2, [r0, #0]
 800b738:	2500      	movs	r5, #0
 800b73a:	e7f8      	b.n	800b72e <_calloc_r+0x16>
 800b73c:	4621      	mov	r1, r4
 800b73e:	f7fd fd25 	bl	800918c <memset>
 800b742:	e7f4      	b.n	800b72e <_calloc_r+0x16>

0800b744 <_free_r>:
 800b744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b746:	2900      	cmp	r1, #0
 800b748:	d044      	beq.n	800b7d4 <_free_r+0x90>
 800b74a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b74e:	9001      	str	r0, [sp, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	f1a1 0404 	sub.w	r4, r1, #4
 800b756:	bfb8      	it	lt
 800b758:	18e4      	addlt	r4, r4, r3
 800b75a:	f000 fb19 	bl	800bd90 <__malloc_lock>
 800b75e:	4a1e      	ldr	r2, [pc, #120]	; (800b7d8 <_free_r+0x94>)
 800b760:	9801      	ldr	r0, [sp, #4]
 800b762:	6813      	ldr	r3, [r2, #0]
 800b764:	b933      	cbnz	r3, 800b774 <_free_r+0x30>
 800b766:	6063      	str	r3, [r4, #4]
 800b768:	6014      	str	r4, [r2, #0]
 800b76a:	b003      	add	sp, #12
 800b76c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b770:	f000 bb14 	b.w	800bd9c <__malloc_unlock>
 800b774:	42a3      	cmp	r3, r4
 800b776:	d908      	bls.n	800b78a <_free_r+0x46>
 800b778:	6825      	ldr	r5, [r4, #0]
 800b77a:	1961      	adds	r1, r4, r5
 800b77c:	428b      	cmp	r3, r1
 800b77e:	bf01      	itttt	eq
 800b780:	6819      	ldreq	r1, [r3, #0]
 800b782:	685b      	ldreq	r3, [r3, #4]
 800b784:	1949      	addeq	r1, r1, r5
 800b786:	6021      	streq	r1, [r4, #0]
 800b788:	e7ed      	b.n	800b766 <_free_r+0x22>
 800b78a:	461a      	mov	r2, r3
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	b10b      	cbz	r3, 800b794 <_free_r+0x50>
 800b790:	42a3      	cmp	r3, r4
 800b792:	d9fa      	bls.n	800b78a <_free_r+0x46>
 800b794:	6811      	ldr	r1, [r2, #0]
 800b796:	1855      	adds	r5, r2, r1
 800b798:	42a5      	cmp	r5, r4
 800b79a:	d10b      	bne.n	800b7b4 <_free_r+0x70>
 800b79c:	6824      	ldr	r4, [r4, #0]
 800b79e:	4421      	add	r1, r4
 800b7a0:	1854      	adds	r4, r2, r1
 800b7a2:	42a3      	cmp	r3, r4
 800b7a4:	6011      	str	r1, [r2, #0]
 800b7a6:	d1e0      	bne.n	800b76a <_free_r+0x26>
 800b7a8:	681c      	ldr	r4, [r3, #0]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	6053      	str	r3, [r2, #4]
 800b7ae:	4421      	add	r1, r4
 800b7b0:	6011      	str	r1, [r2, #0]
 800b7b2:	e7da      	b.n	800b76a <_free_r+0x26>
 800b7b4:	d902      	bls.n	800b7bc <_free_r+0x78>
 800b7b6:	230c      	movs	r3, #12
 800b7b8:	6003      	str	r3, [r0, #0]
 800b7ba:	e7d6      	b.n	800b76a <_free_r+0x26>
 800b7bc:	6825      	ldr	r5, [r4, #0]
 800b7be:	1961      	adds	r1, r4, r5
 800b7c0:	428b      	cmp	r3, r1
 800b7c2:	bf04      	itt	eq
 800b7c4:	6819      	ldreq	r1, [r3, #0]
 800b7c6:	685b      	ldreq	r3, [r3, #4]
 800b7c8:	6063      	str	r3, [r4, #4]
 800b7ca:	bf04      	itt	eq
 800b7cc:	1949      	addeq	r1, r1, r5
 800b7ce:	6021      	streq	r1, [r4, #0]
 800b7d0:	6054      	str	r4, [r2, #4]
 800b7d2:	e7ca      	b.n	800b76a <_free_r+0x26>
 800b7d4:	b003      	add	sp, #12
 800b7d6:	bd30      	pop	{r4, r5, pc}
 800b7d8:	20000b48 	.word	0x20000b48

0800b7dc <sbrk_aligned>:
 800b7dc:	b570      	push	{r4, r5, r6, lr}
 800b7de:	4e0e      	ldr	r6, [pc, #56]	; (800b818 <sbrk_aligned+0x3c>)
 800b7e0:	460c      	mov	r4, r1
 800b7e2:	6831      	ldr	r1, [r6, #0]
 800b7e4:	4605      	mov	r5, r0
 800b7e6:	b911      	cbnz	r1, 800b7ee <sbrk_aligned+0x12>
 800b7e8:	f000 f9e6 	bl	800bbb8 <_sbrk_r>
 800b7ec:	6030      	str	r0, [r6, #0]
 800b7ee:	4621      	mov	r1, r4
 800b7f0:	4628      	mov	r0, r5
 800b7f2:	f000 f9e1 	bl	800bbb8 <_sbrk_r>
 800b7f6:	1c43      	adds	r3, r0, #1
 800b7f8:	d00a      	beq.n	800b810 <sbrk_aligned+0x34>
 800b7fa:	1cc4      	adds	r4, r0, #3
 800b7fc:	f024 0403 	bic.w	r4, r4, #3
 800b800:	42a0      	cmp	r0, r4
 800b802:	d007      	beq.n	800b814 <sbrk_aligned+0x38>
 800b804:	1a21      	subs	r1, r4, r0
 800b806:	4628      	mov	r0, r5
 800b808:	f000 f9d6 	bl	800bbb8 <_sbrk_r>
 800b80c:	3001      	adds	r0, #1
 800b80e:	d101      	bne.n	800b814 <sbrk_aligned+0x38>
 800b810:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b814:	4620      	mov	r0, r4
 800b816:	bd70      	pop	{r4, r5, r6, pc}
 800b818:	20000b4c 	.word	0x20000b4c

0800b81c <_malloc_r>:
 800b81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b820:	1ccd      	adds	r5, r1, #3
 800b822:	f025 0503 	bic.w	r5, r5, #3
 800b826:	3508      	adds	r5, #8
 800b828:	2d0c      	cmp	r5, #12
 800b82a:	bf38      	it	cc
 800b82c:	250c      	movcc	r5, #12
 800b82e:	2d00      	cmp	r5, #0
 800b830:	4607      	mov	r7, r0
 800b832:	db01      	blt.n	800b838 <_malloc_r+0x1c>
 800b834:	42a9      	cmp	r1, r5
 800b836:	d905      	bls.n	800b844 <_malloc_r+0x28>
 800b838:	230c      	movs	r3, #12
 800b83a:	603b      	str	r3, [r7, #0]
 800b83c:	2600      	movs	r6, #0
 800b83e:	4630      	mov	r0, r6
 800b840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b844:	4e2e      	ldr	r6, [pc, #184]	; (800b900 <_malloc_r+0xe4>)
 800b846:	f000 faa3 	bl	800bd90 <__malloc_lock>
 800b84a:	6833      	ldr	r3, [r6, #0]
 800b84c:	461c      	mov	r4, r3
 800b84e:	bb34      	cbnz	r4, 800b89e <_malloc_r+0x82>
 800b850:	4629      	mov	r1, r5
 800b852:	4638      	mov	r0, r7
 800b854:	f7ff ffc2 	bl	800b7dc <sbrk_aligned>
 800b858:	1c43      	adds	r3, r0, #1
 800b85a:	4604      	mov	r4, r0
 800b85c:	d14d      	bne.n	800b8fa <_malloc_r+0xde>
 800b85e:	6834      	ldr	r4, [r6, #0]
 800b860:	4626      	mov	r6, r4
 800b862:	2e00      	cmp	r6, #0
 800b864:	d140      	bne.n	800b8e8 <_malloc_r+0xcc>
 800b866:	6823      	ldr	r3, [r4, #0]
 800b868:	4631      	mov	r1, r6
 800b86a:	4638      	mov	r0, r7
 800b86c:	eb04 0803 	add.w	r8, r4, r3
 800b870:	f000 f9a2 	bl	800bbb8 <_sbrk_r>
 800b874:	4580      	cmp	r8, r0
 800b876:	d13a      	bne.n	800b8ee <_malloc_r+0xd2>
 800b878:	6821      	ldr	r1, [r4, #0]
 800b87a:	3503      	adds	r5, #3
 800b87c:	1a6d      	subs	r5, r5, r1
 800b87e:	f025 0503 	bic.w	r5, r5, #3
 800b882:	3508      	adds	r5, #8
 800b884:	2d0c      	cmp	r5, #12
 800b886:	bf38      	it	cc
 800b888:	250c      	movcc	r5, #12
 800b88a:	4629      	mov	r1, r5
 800b88c:	4638      	mov	r0, r7
 800b88e:	f7ff ffa5 	bl	800b7dc <sbrk_aligned>
 800b892:	3001      	adds	r0, #1
 800b894:	d02b      	beq.n	800b8ee <_malloc_r+0xd2>
 800b896:	6823      	ldr	r3, [r4, #0]
 800b898:	442b      	add	r3, r5
 800b89a:	6023      	str	r3, [r4, #0]
 800b89c:	e00e      	b.n	800b8bc <_malloc_r+0xa0>
 800b89e:	6822      	ldr	r2, [r4, #0]
 800b8a0:	1b52      	subs	r2, r2, r5
 800b8a2:	d41e      	bmi.n	800b8e2 <_malloc_r+0xc6>
 800b8a4:	2a0b      	cmp	r2, #11
 800b8a6:	d916      	bls.n	800b8d6 <_malloc_r+0xba>
 800b8a8:	1961      	adds	r1, r4, r5
 800b8aa:	42a3      	cmp	r3, r4
 800b8ac:	6025      	str	r5, [r4, #0]
 800b8ae:	bf18      	it	ne
 800b8b0:	6059      	strne	r1, [r3, #4]
 800b8b2:	6863      	ldr	r3, [r4, #4]
 800b8b4:	bf08      	it	eq
 800b8b6:	6031      	streq	r1, [r6, #0]
 800b8b8:	5162      	str	r2, [r4, r5]
 800b8ba:	604b      	str	r3, [r1, #4]
 800b8bc:	4638      	mov	r0, r7
 800b8be:	f104 060b 	add.w	r6, r4, #11
 800b8c2:	f000 fa6b 	bl	800bd9c <__malloc_unlock>
 800b8c6:	f026 0607 	bic.w	r6, r6, #7
 800b8ca:	1d23      	adds	r3, r4, #4
 800b8cc:	1af2      	subs	r2, r6, r3
 800b8ce:	d0b6      	beq.n	800b83e <_malloc_r+0x22>
 800b8d0:	1b9b      	subs	r3, r3, r6
 800b8d2:	50a3      	str	r3, [r4, r2]
 800b8d4:	e7b3      	b.n	800b83e <_malloc_r+0x22>
 800b8d6:	6862      	ldr	r2, [r4, #4]
 800b8d8:	42a3      	cmp	r3, r4
 800b8da:	bf0c      	ite	eq
 800b8dc:	6032      	streq	r2, [r6, #0]
 800b8de:	605a      	strne	r2, [r3, #4]
 800b8e0:	e7ec      	b.n	800b8bc <_malloc_r+0xa0>
 800b8e2:	4623      	mov	r3, r4
 800b8e4:	6864      	ldr	r4, [r4, #4]
 800b8e6:	e7b2      	b.n	800b84e <_malloc_r+0x32>
 800b8e8:	4634      	mov	r4, r6
 800b8ea:	6876      	ldr	r6, [r6, #4]
 800b8ec:	e7b9      	b.n	800b862 <_malloc_r+0x46>
 800b8ee:	230c      	movs	r3, #12
 800b8f0:	603b      	str	r3, [r7, #0]
 800b8f2:	4638      	mov	r0, r7
 800b8f4:	f000 fa52 	bl	800bd9c <__malloc_unlock>
 800b8f8:	e7a1      	b.n	800b83e <_malloc_r+0x22>
 800b8fa:	6025      	str	r5, [r4, #0]
 800b8fc:	e7de      	b.n	800b8bc <_malloc_r+0xa0>
 800b8fe:	bf00      	nop
 800b900:	20000b48 	.word	0x20000b48

0800b904 <__sfputc_r>:
 800b904:	6893      	ldr	r3, [r2, #8]
 800b906:	3b01      	subs	r3, #1
 800b908:	2b00      	cmp	r3, #0
 800b90a:	b410      	push	{r4}
 800b90c:	6093      	str	r3, [r2, #8]
 800b90e:	da08      	bge.n	800b922 <__sfputc_r+0x1e>
 800b910:	6994      	ldr	r4, [r2, #24]
 800b912:	42a3      	cmp	r3, r4
 800b914:	db01      	blt.n	800b91a <__sfputc_r+0x16>
 800b916:	290a      	cmp	r1, #10
 800b918:	d103      	bne.n	800b922 <__sfputc_r+0x1e>
 800b91a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b91e:	f7fe ba03 	b.w	8009d28 <__swbuf_r>
 800b922:	6813      	ldr	r3, [r2, #0]
 800b924:	1c58      	adds	r0, r3, #1
 800b926:	6010      	str	r0, [r2, #0]
 800b928:	7019      	strb	r1, [r3, #0]
 800b92a:	4608      	mov	r0, r1
 800b92c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b930:	4770      	bx	lr

0800b932 <__sfputs_r>:
 800b932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b934:	4606      	mov	r6, r0
 800b936:	460f      	mov	r7, r1
 800b938:	4614      	mov	r4, r2
 800b93a:	18d5      	adds	r5, r2, r3
 800b93c:	42ac      	cmp	r4, r5
 800b93e:	d101      	bne.n	800b944 <__sfputs_r+0x12>
 800b940:	2000      	movs	r0, #0
 800b942:	e007      	b.n	800b954 <__sfputs_r+0x22>
 800b944:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b948:	463a      	mov	r2, r7
 800b94a:	4630      	mov	r0, r6
 800b94c:	f7ff ffda 	bl	800b904 <__sfputc_r>
 800b950:	1c43      	adds	r3, r0, #1
 800b952:	d1f3      	bne.n	800b93c <__sfputs_r+0xa>
 800b954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b958 <_vfiprintf_r>:
 800b958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b95c:	460d      	mov	r5, r1
 800b95e:	b09d      	sub	sp, #116	; 0x74
 800b960:	4614      	mov	r4, r2
 800b962:	4698      	mov	r8, r3
 800b964:	4606      	mov	r6, r0
 800b966:	b118      	cbz	r0, 800b970 <_vfiprintf_r+0x18>
 800b968:	6983      	ldr	r3, [r0, #24]
 800b96a:	b90b      	cbnz	r3, 800b970 <_vfiprintf_r+0x18>
 800b96c:	f7ff fa30 	bl	800add0 <__sinit>
 800b970:	4b89      	ldr	r3, [pc, #548]	; (800bb98 <_vfiprintf_r+0x240>)
 800b972:	429d      	cmp	r5, r3
 800b974:	d11b      	bne.n	800b9ae <_vfiprintf_r+0x56>
 800b976:	6875      	ldr	r5, [r6, #4]
 800b978:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b97a:	07d9      	lsls	r1, r3, #31
 800b97c:	d405      	bmi.n	800b98a <_vfiprintf_r+0x32>
 800b97e:	89ab      	ldrh	r3, [r5, #12]
 800b980:	059a      	lsls	r2, r3, #22
 800b982:	d402      	bmi.n	800b98a <_vfiprintf_r+0x32>
 800b984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b986:	f7ff fac6 	bl	800af16 <__retarget_lock_acquire_recursive>
 800b98a:	89ab      	ldrh	r3, [r5, #12]
 800b98c:	071b      	lsls	r3, r3, #28
 800b98e:	d501      	bpl.n	800b994 <_vfiprintf_r+0x3c>
 800b990:	692b      	ldr	r3, [r5, #16]
 800b992:	b9eb      	cbnz	r3, 800b9d0 <_vfiprintf_r+0x78>
 800b994:	4629      	mov	r1, r5
 800b996:	4630      	mov	r0, r6
 800b998:	f7fe fa18 	bl	8009dcc <__swsetup_r>
 800b99c:	b1c0      	cbz	r0, 800b9d0 <_vfiprintf_r+0x78>
 800b99e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9a0:	07dc      	lsls	r4, r3, #31
 800b9a2:	d50e      	bpl.n	800b9c2 <_vfiprintf_r+0x6a>
 800b9a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9a8:	b01d      	add	sp, #116	; 0x74
 800b9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ae:	4b7b      	ldr	r3, [pc, #492]	; (800bb9c <_vfiprintf_r+0x244>)
 800b9b0:	429d      	cmp	r5, r3
 800b9b2:	d101      	bne.n	800b9b8 <_vfiprintf_r+0x60>
 800b9b4:	68b5      	ldr	r5, [r6, #8]
 800b9b6:	e7df      	b.n	800b978 <_vfiprintf_r+0x20>
 800b9b8:	4b79      	ldr	r3, [pc, #484]	; (800bba0 <_vfiprintf_r+0x248>)
 800b9ba:	429d      	cmp	r5, r3
 800b9bc:	bf08      	it	eq
 800b9be:	68f5      	ldreq	r5, [r6, #12]
 800b9c0:	e7da      	b.n	800b978 <_vfiprintf_r+0x20>
 800b9c2:	89ab      	ldrh	r3, [r5, #12]
 800b9c4:	0598      	lsls	r0, r3, #22
 800b9c6:	d4ed      	bmi.n	800b9a4 <_vfiprintf_r+0x4c>
 800b9c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9ca:	f7ff faa5 	bl	800af18 <__retarget_lock_release_recursive>
 800b9ce:	e7e9      	b.n	800b9a4 <_vfiprintf_r+0x4c>
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	9309      	str	r3, [sp, #36]	; 0x24
 800b9d4:	2320      	movs	r3, #32
 800b9d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9da:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9de:	2330      	movs	r3, #48	; 0x30
 800b9e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bba4 <_vfiprintf_r+0x24c>
 800b9e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9e8:	f04f 0901 	mov.w	r9, #1
 800b9ec:	4623      	mov	r3, r4
 800b9ee:	469a      	mov	sl, r3
 800b9f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9f4:	b10a      	cbz	r2, 800b9fa <_vfiprintf_r+0xa2>
 800b9f6:	2a25      	cmp	r2, #37	; 0x25
 800b9f8:	d1f9      	bne.n	800b9ee <_vfiprintf_r+0x96>
 800b9fa:	ebba 0b04 	subs.w	fp, sl, r4
 800b9fe:	d00b      	beq.n	800ba18 <_vfiprintf_r+0xc0>
 800ba00:	465b      	mov	r3, fp
 800ba02:	4622      	mov	r2, r4
 800ba04:	4629      	mov	r1, r5
 800ba06:	4630      	mov	r0, r6
 800ba08:	f7ff ff93 	bl	800b932 <__sfputs_r>
 800ba0c:	3001      	adds	r0, #1
 800ba0e:	f000 80aa 	beq.w	800bb66 <_vfiprintf_r+0x20e>
 800ba12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba14:	445a      	add	r2, fp
 800ba16:	9209      	str	r2, [sp, #36]	; 0x24
 800ba18:	f89a 3000 	ldrb.w	r3, [sl]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f000 80a2 	beq.w	800bb66 <_vfiprintf_r+0x20e>
 800ba22:	2300      	movs	r3, #0
 800ba24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba2c:	f10a 0a01 	add.w	sl, sl, #1
 800ba30:	9304      	str	r3, [sp, #16]
 800ba32:	9307      	str	r3, [sp, #28]
 800ba34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba38:	931a      	str	r3, [sp, #104]	; 0x68
 800ba3a:	4654      	mov	r4, sl
 800ba3c:	2205      	movs	r2, #5
 800ba3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba42:	4858      	ldr	r0, [pc, #352]	; (800bba4 <_vfiprintf_r+0x24c>)
 800ba44:	f7f4 fbec 	bl	8000220 <memchr>
 800ba48:	9a04      	ldr	r2, [sp, #16]
 800ba4a:	b9d8      	cbnz	r0, 800ba84 <_vfiprintf_r+0x12c>
 800ba4c:	06d1      	lsls	r1, r2, #27
 800ba4e:	bf44      	itt	mi
 800ba50:	2320      	movmi	r3, #32
 800ba52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba56:	0713      	lsls	r3, r2, #28
 800ba58:	bf44      	itt	mi
 800ba5a:	232b      	movmi	r3, #43	; 0x2b
 800ba5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba60:	f89a 3000 	ldrb.w	r3, [sl]
 800ba64:	2b2a      	cmp	r3, #42	; 0x2a
 800ba66:	d015      	beq.n	800ba94 <_vfiprintf_r+0x13c>
 800ba68:	9a07      	ldr	r2, [sp, #28]
 800ba6a:	4654      	mov	r4, sl
 800ba6c:	2000      	movs	r0, #0
 800ba6e:	f04f 0c0a 	mov.w	ip, #10
 800ba72:	4621      	mov	r1, r4
 800ba74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba78:	3b30      	subs	r3, #48	; 0x30
 800ba7a:	2b09      	cmp	r3, #9
 800ba7c:	d94e      	bls.n	800bb1c <_vfiprintf_r+0x1c4>
 800ba7e:	b1b0      	cbz	r0, 800baae <_vfiprintf_r+0x156>
 800ba80:	9207      	str	r2, [sp, #28]
 800ba82:	e014      	b.n	800baae <_vfiprintf_r+0x156>
 800ba84:	eba0 0308 	sub.w	r3, r0, r8
 800ba88:	fa09 f303 	lsl.w	r3, r9, r3
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	9304      	str	r3, [sp, #16]
 800ba90:	46a2      	mov	sl, r4
 800ba92:	e7d2      	b.n	800ba3a <_vfiprintf_r+0xe2>
 800ba94:	9b03      	ldr	r3, [sp, #12]
 800ba96:	1d19      	adds	r1, r3, #4
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	9103      	str	r1, [sp, #12]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	bfbb      	ittet	lt
 800baa0:	425b      	neglt	r3, r3
 800baa2:	f042 0202 	orrlt.w	r2, r2, #2
 800baa6:	9307      	strge	r3, [sp, #28]
 800baa8:	9307      	strlt	r3, [sp, #28]
 800baaa:	bfb8      	it	lt
 800baac:	9204      	strlt	r2, [sp, #16]
 800baae:	7823      	ldrb	r3, [r4, #0]
 800bab0:	2b2e      	cmp	r3, #46	; 0x2e
 800bab2:	d10c      	bne.n	800bace <_vfiprintf_r+0x176>
 800bab4:	7863      	ldrb	r3, [r4, #1]
 800bab6:	2b2a      	cmp	r3, #42	; 0x2a
 800bab8:	d135      	bne.n	800bb26 <_vfiprintf_r+0x1ce>
 800baba:	9b03      	ldr	r3, [sp, #12]
 800babc:	1d1a      	adds	r2, r3, #4
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	9203      	str	r2, [sp, #12]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	bfb8      	it	lt
 800bac6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800baca:	3402      	adds	r4, #2
 800bacc:	9305      	str	r3, [sp, #20]
 800bace:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bbb4 <_vfiprintf_r+0x25c>
 800bad2:	7821      	ldrb	r1, [r4, #0]
 800bad4:	2203      	movs	r2, #3
 800bad6:	4650      	mov	r0, sl
 800bad8:	f7f4 fba2 	bl	8000220 <memchr>
 800badc:	b140      	cbz	r0, 800baf0 <_vfiprintf_r+0x198>
 800bade:	2340      	movs	r3, #64	; 0x40
 800bae0:	eba0 000a 	sub.w	r0, r0, sl
 800bae4:	fa03 f000 	lsl.w	r0, r3, r0
 800bae8:	9b04      	ldr	r3, [sp, #16]
 800baea:	4303      	orrs	r3, r0
 800baec:	3401      	adds	r4, #1
 800baee:	9304      	str	r3, [sp, #16]
 800baf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baf4:	482c      	ldr	r0, [pc, #176]	; (800bba8 <_vfiprintf_r+0x250>)
 800baf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bafa:	2206      	movs	r2, #6
 800bafc:	f7f4 fb90 	bl	8000220 <memchr>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d03f      	beq.n	800bb84 <_vfiprintf_r+0x22c>
 800bb04:	4b29      	ldr	r3, [pc, #164]	; (800bbac <_vfiprintf_r+0x254>)
 800bb06:	bb1b      	cbnz	r3, 800bb50 <_vfiprintf_r+0x1f8>
 800bb08:	9b03      	ldr	r3, [sp, #12]
 800bb0a:	3307      	adds	r3, #7
 800bb0c:	f023 0307 	bic.w	r3, r3, #7
 800bb10:	3308      	adds	r3, #8
 800bb12:	9303      	str	r3, [sp, #12]
 800bb14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb16:	443b      	add	r3, r7
 800bb18:	9309      	str	r3, [sp, #36]	; 0x24
 800bb1a:	e767      	b.n	800b9ec <_vfiprintf_r+0x94>
 800bb1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb20:	460c      	mov	r4, r1
 800bb22:	2001      	movs	r0, #1
 800bb24:	e7a5      	b.n	800ba72 <_vfiprintf_r+0x11a>
 800bb26:	2300      	movs	r3, #0
 800bb28:	3401      	adds	r4, #1
 800bb2a:	9305      	str	r3, [sp, #20]
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	f04f 0c0a 	mov.w	ip, #10
 800bb32:	4620      	mov	r0, r4
 800bb34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb38:	3a30      	subs	r2, #48	; 0x30
 800bb3a:	2a09      	cmp	r2, #9
 800bb3c:	d903      	bls.n	800bb46 <_vfiprintf_r+0x1ee>
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d0c5      	beq.n	800bace <_vfiprintf_r+0x176>
 800bb42:	9105      	str	r1, [sp, #20]
 800bb44:	e7c3      	b.n	800bace <_vfiprintf_r+0x176>
 800bb46:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e7f0      	b.n	800bb32 <_vfiprintf_r+0x1da>
 800bb50:	ab03      	add	r3, sp, #12
 800bb52:	9300      	str	r3, [sp, #0]
 800bb54:	462a      	mov	r2, r5
 800bb56:	4b16      	ldr	r3, [pc, #88]	; (800bbb0 <_vfiprintf_r+0x258>)
 800bb58:	a904      	add	r1, sp, #16
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	f7fd fbbe 	bl	80092dc <_printf_float>
 800bb60:	4607      	mov	r7, r0
 800bb62:	1c78      	adds	r0, r7, #1
 800bb64:	d1d6      	bne.n	800bb14 <_vfiprintf_r+0x1bc>
 800bb66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb68:	07d9      	lsls	r1, r3, #31
 800bb6a:	d405      	bmi.n	800bb78 <_vfiprintf_r+0x220>
 800bb6c:	89ab      	ldrh	r3, [r5, #12]
 800bb6e:	059a      	lsls	r2, r3, #22
 800bb70:	d402      	bmi.n	800bb78 <_vfiprintf_r+0x220>
 800bb72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb74:	f7ff f9d0 	bl	800af18 <__retarget_lock_release_recursive>
 800bb78:	89ab      	ldrh	r3, [r5, #12]
 800bb7a:	065b      	lsls	r3, r3, #25
 800bb7c:	f53f af12 	bmi.w	800b9a4 <_vfiprintf_r+0x4c>
 800bb80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb82:	e711      	b.n	800b9a8 <_vfiprintf_r+0x50>
 800bb84:	ab03      	add	r3, sp, #12
 800bb86:	9300      	str	r3, [sp, #0]
 800bb88:	462a      	mov	r2, r5
 800bb8a:	4b09      	ldr	r3, [pc, #36]	; (800bbb0 <_vfiprintf_r+0x258>)
 800bb8c:	a904      	add	r1, sp, #16
 800bb8e:	4630      	mov	r0, r6
 800bb90:	f7fd fe48 	bl	8009824 <_printf_i>
 800bb94:	e7e4      	b.n	800bb60 <_vfiprintf_r+0x208>
 800bb96:	bf00      	nop
 800bb98:	0800e048 	.word	0x0800e048
 800bb9c:	0800e068 	.word	0x0800e068
 800bba0:	0800e028 	.word	0x0800e028
 800bba4:	0800e1e4 	.word	0x0800e1e4
 800bba8:	0800e1ee 	.word	0x0800e1ee
 800bbac:	080092dd 	.word	0x080092dd
 800bbb0:	0800b933 	.word	0x0800b933
 800bbb4:	0800e1ea 	.word	0x0800e1ea

0800bbb8 <_sbrk_r>:
 800bbb8:	b538      	push	{r3, r4, r5, lr}
 800bbba:	4d06      	ldr	r5, [pc, #24]	; (800bbd4 <_sbrk_r+0x1c>)
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	4604      	mov	r4, r0
 800bbc0:	4608      	mov	r0, r1
 800bbc2:	602b      	str	r3, [r5, #0]
 800bbc4:	f7f8 fca4 	bl	8004510 <_sbrk>
 800bbc8:	1c43      	adds	r3, r0, #1
 800bbca:	d102      	bne.n	800bbd2 <_sbrk_r+0x1a>
 800bbcc:	682b      	ldr	r3, [r5, #0]
 800bbce:	b103      	cbz	r3, 800bbd2 <_sbrk_r+0x1a>
 800bbd0:	6023      	str	r3, [r4, #0]
 800bbd2:	bd38      	pop	{r3, r4, r5, pc}
 800bbd4:	20000b50 	.word	0x20000b50

0800bbd8 <__sread>:
 800bbd8:	b510      	push	{r4, lr}
 800bbda:	460c      	mov	r4, r1
 800bbdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbe0:	f000 f8e2 	bl	800bda8 <_read_r>
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	bfab      	itete	ge
 800bbe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bbea:	89a3      	ldrhlt	r3, [r4, #12]
 800bbec:	181b      	addge	r3, r3, r0
 800bbee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bbf2:	bfac      	ite	ge
 800bbf4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bbf6:	81a3      	strhlt	r3, [r4, #12]
 800bbf8:	bd10      	pop	{r4, pc}

0800bbfa <__swrite>:
 800bbfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbfe:	461f      	mov	r7, r3
 800bc00:	898b      	ldrh	r3, [r1, #12]
 800bc02:	05db      	lsls	r3, r3, #23
 800bc04:	4605      	mov	r5, r0
 800bc06:	460c      	mov	r4, r1
 800bc08:	4616      	mov	r6, r2
 800bc0a:	d505      	bpl.n	800bc18 <__swrite+0x1e>
 800bc0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc10:	2302      	movs	r3, #2
 800bc12:	2200      	movs	r2, #0
 800bc14:	f000 f898 	bl	800bd48 <_lseek_r>
 800bc18:	89a3      	ldrh	r3, [r4, #12]
 800bc1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc22:	81a3      	strh	r3, [r4, #12]
 800bc24:	4632      	mov	r2, r6
 800bc26:	463b      	mov	r3, r7
 800bc28:	4628      	mov	r0, r5
 800bc2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc2e:	f000 b817 	b.w	800bc60 <_write_r>

0800bc32 <__sseek>:
 800bc32:	b510      	push	{r4, lr}
 800bc34:	460c      	mov	r4, r1
 800bc36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc3a:	f000 f885 	bl	800bd48 <_lseek_r>
 800bc3e:	1c43      	adds	r3, r0, #1
 800bc40:	89a3      	ldrh	r3, [r4, #12]
 800bc42:	bf15      	itete	ne
 800bc44:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc4e:	81a3      	strheq	r3, [r4, #12]
 800bc50:	bf18      	it	ne
 800bc52:	81a3      	strhne	r3, [r4, #12]
 800bc54:	bd10      	pop	{r4, pc}

0800bc56 <__sclose>:
 800bc56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc5a:	f000 b831 	b.w	800bcc0 <_close_r>
	...

0800bc60 <_write_r>:
 800bc60:	b538      	push	{r3, r4, r5, lr}
 800bc62:	4d07      	ldr	r5, [pc, #28]	; (800bc80 <_write_r+0x20>)
 800bc64:	4604      	mov	r4, r0
 800bc66:	4608      	mov	r0, r1
 800bc68:	4611      	mov	r1, r2
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	602a      	str	r2, [r5, #0]
 800bc6e:	461a      	mov	r2, r3
 800bc70:	f7f8 f8b0 	bl	8003dd4 <_write>
 800bc74:	1c43      	adds	r3, r0, #1
 800bc76:	d102      	bne.n	800bc7e <_write_r+0x1e>
 800bc78:	682b      	ldr	r3, [r5, #0]
 800bc7a:	b103      	cbz	r3, 800bc7e <_write_r+0x1e>
 800bc7c:	6023      	str	r3, [r4, #0]
 800bc7e:	bd38      	pop	{r3, r4, r5, pc}
 800bc80:	20000b50 	.word	0x20000b50

0800bc84 <__assert_func>:
 800bc84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc86:	4614      	mov	r4, r2
 800bc88:	461a      	mov	r2, r3
 800bc8a:	4b09      	ldr	r3, [pc, #36]	; (800bcb0 <__assert_func+0x2c>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4605      	mov	r5, r0
 800bc90:	68d8      	ldr	r0, [r3, #12]
 800bc92:	b14c      	cbz	r4, 800bca8 <__assert_func+0x24>
 800bc94:	4b07      	ldr	r3, [pc, #28]	; (800bcb4 <__assert_func+0x30>)
 800bc96:	9100      	str	r1, [sp, #0]
 800bc98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc9c:	4906      	ldr	r1, [pc, #24]	; (800bcb8 <__assert_func+0x34>)
 800bc9e:	462b      	mov	r3, r5
 800bca0:	f000 f81e 	bl	800bce0 <fiprintf>
 800bca4:	f000 f89f 	bl	800bde6 <abort>
 800bca8:	4b04      	ldr	r3, [pc, #16]	; (800bcbc <__assert_func+0x38>)
 800bcaa:	461c      	mov	r4, r3
 800bcac:	e7f3      	b.n	800bc96 <__assert_func+0x12>
 800bcae:	bf00      	nop
 800bcb0:	20000018 	.word	0x20000018
 800bcb4:	0800e1f5 	.word	0x0800e1f5
 800bcb8:	0800e202 	.word	0x0800e202
 800bcbc:	0800e230 	.word	0x0800e230

0800bcc0 <_close_r>:
 800bcc0:	b538      	push	{r3, r4, r5, lr}
 800bcc2:	4d06      	ldr	r5, [pc, #24]	; (800bcdc <_close_r+0x1c>)
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	4604      	mov	r4, r0
 800bcc8:	4608      	mov	r0, r1
 800bcca:	602b      	str	r3, [r5, #0]
 800bccc:	f7f8 fbeb 	bl	80044a6 <_close>
 800bcd0:	1c43      	adds	r3, r0, #1
 800bcd2:	d102      	bne.n	800bcda <_close_r+0x1a>
 800bcd4:	682b      	ldr	r3, [r5, #0]
 800bcd6:	b103      	cbz	r3, 800bcda <_close_r+0x1a>
 800bcd8:	6023      	str	r3, [r4, #0]
 800bcda:	bd38      	pop	{r3, r4, r5, pc}
 800bcdc:	20000b50 	.word	0x20000b50

0800bce0 <fiprintf>:
 800bce0:	b40e      	push	{r1, r2, r3}
 800bce2:	b503      	push	{r0, r1, lr}
 800bce4:	4601      	mov	r1, r0
 800bce6:	ab03      	add	r3, sp, #12
 800bce8:	4805      	ldr	r0, [pc, #20]	; (800bd00 <fiprintf+0x20>)
 800bcea:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcee:	6800      	ldr	r0, [r0, #0]
 800bcf0:	9301      	str	r3, [sp, #4]
 800bcf2:	f7ff fe31 	bl	800b958 <_vfiprintf_r>
 800bcf6:	b002      	add	sp, #8
 800bcf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcfc:	b003      	add	sp, #12
 800bcfe:	4770      	bx	lr
 800bd00:	20000018 	.word	0x20000018

0800bd04 <_fstat_r>:
 800bd04:	b538      	push	{r3, r4, r5, lr}
 800bd06:	4d07      	ldr	r5, [pc, #28]	; (800bd24 <_fstat_r+0x20>)
 800bd08:	2300      	movs	r3, #0
 800bd0a:	4604      	mov	r4, r0
 800bd0c:	4608      	mov	r0, r1
 800bd0e:	4611      	mov	r1, r2
 800bd10:	602b      	str	r3, [r5, #0]
 800bd12:	f7f8 fbd4 	bl	80044be <_fstat>
 800bd16:	1c43      	adds	r3, r0, #1
 800bd18:	d102      	bne.n	800bd20 <_fstat_r+0x1c>
 800bd1a:	682b      	ldr	r3, [r5, #0]
 800bd1c:	b103      	cbz	r3, 800bd20 <_fstat_r+0x1c>
 800bd1e:	6023      	str	r3, [r4, #0]
 800bd20:	bd38      	pop	{r3, r4, r5, pc}
 800bd22:	bf00      	nop
 800bd24:	20000b50 	.word	0x20000b50

0800bd28 <_isatty_r>:
 800bd28:	b538      	push	{r3, r4, r5, lr}
 800bd2a:	4d06      	ldr	r5, [pc, #24]	; (800bd44 <_isatty_r+0x1c>)
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	4604      	mov	r4, r0
 800bd30:	4608      	mov	r0, r1
 800bd32:	602b      	str	r3, [r5, #0]
 800bd34:	f7f8 fbd3 	bl	80044de <_isatty>
 800bd38:	1c43      	adds	r3, r0, #1
 800bd3a:	d102      	bne.n	800bd42 <_isatty_r+0x1a>
 800bd3c:	682b      	ldr	r3, [r5, #0]
 800bd3e:	b103      	cbz	r3, 800bd42 <_isatty_r+0x1a>
 800bd40:	6023      	str	r3, [r4, #0]
 800bd42:	bd38      	pop	{r3, r4, r5, pc}
 800bd44:	20000b50 	.word	0x20000b50

0800bd48 <_lseek_r>:
 800bd48:	b538      	push	{r3, r4, r5, lr}
 800bd4a:	4d07      	ldr	r5, [pc, #28]	; (800bd68 <_lseek_r+0x20>)
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	4608      	mov	r0, r1
 800bd50:	4611      	mov	r1, r2
 800bd52:	2200      	movs	r2, #0
 800bd54:	602a      	str	r2, [r5, #0]
 800bd56:	461a      	mov	r2, r3
 800bd58:	f7f8 fbcc 	bl	80044f4 <_lseek>
 800bd5c:	1c43      	adds	r3, r0, #1
 800bd5e:	d102      	bne.n	800bd66 <_lseek_r+0x1e>
 800bd60:	682b      	ldr	r3, [r5, #0]
 800bd62:	b103      	cbz	r3, 800bd66 <_lseek_r+0x1e>
 800bd64:	6023      	str	r3, [r4, #0]
 800bd66:	bd38      	pop	{r3, r4, r5, pc}
 800bd68:	20000b50 	.word	0x20000b50

0800bd6c <__ascii_mbtowc>:
 800bd6c:	b082      	sub	sp, #8
 800bd6e:	b901      	cbnz	r1, 800bd72 <__ascii_mbtowc+0x6>
 800bd70:	a901      	add	r1, sp, #4
 800bd72:	b142      	cbz	r2, 800bd86 <__ascii_mbtowc+0x1a>
 800bd74:	b14b      	cbz	r3, 800bd8a <__ascii_mbtowc+0x1e>
 800bd76:	7813      	ldrb	r3, [r2, #0]
 800bd78:	600b      	str	r3, [r1, #0]
 800bd7a:	7812      	ldrb	r2, [r2, #0]
 800bd7c:	1e10      	subs	r0, r2, #0
 800bd7e:	bf18      	it	ne
 800bd80:	2001      	movne	r0, #1
 800bd82:	b002      	add	sp, #8
 800bd84:	4770      	bx	lr
 800bd86:	4610      	mov	r0, r2
 800bd88:	e7fb      	b.n	800bd82 <__ascii_mbtowc+0x16>
 800bd8a:	f06f 0001 	mvn.w	r0, #1
 800bd8e:	e7f8      	b.n	800bd82 <__ascii_mbtowc+0x16>

0800bd90 <__malloc_lock>:
 800bd90:	4801      	ldr	r0, [pc, #4]	; (800bd98 <__malloc_lock+0x8>)
 800bd92:	f7ff b8c0 	b.w	800af16 <__retarget_lock_acquire_recursive>
 800bd96:	bf00      	nop
 800bd98:	20000b44 	.word	0x20000b44

0800bd9c <__malloc_unlock>:
 800bd9c:	4801      	ldr	r0, [pc, #4]	; (800bda4 <__malloc_unlock+0x8>)
 800bd9e:	f7ff b8bb 	b.w	800af18 <__retarget_lock_release_recursive>
 800bda2:	bf00      	nop
 800bda4:	20000b44 	.word	0x20000b44

0800bda8 <_read_r>:
 800bda8:	b538      	push	{r3, r4, r5, lr}
 800bdaa:	4d07      	ldr	r5, [pc, #28]	; (800bdc8 <_read_r+0x20>)
 800bdac:	4604      	mov	r4, r0
 800bdae:	4608      	mov	r0, r1
 800bdb0:	4611      	mov	r1, r2
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	602a      	str	r2, [r5, #0]
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	f7f8 fb58 	bl	800446c <_read>
 800bdbc:	1c43      	adds	r3, r0, #1
 800bdbe:	d102      	bne.n	800bdc6 <_read_r+0x1e>
 800bdc0:	682b      	ldr	r3, [r5, #0]
 800bdc2:	b103      	cbz	r3, 800bdc6 <_read_r+0x1e>
 800bdc4:	6023      	str	r3, [r4, #0]
 800bdc6:	bd38      	pop	{r3, r4, r5, pc}
 800bdc8:	20000b50 	.word	0x20000b50

0800bdcc <__ascii_wctomb>:
 800bdcc:	b149      	cbz	r1, 800bde2 <__ascii_wctomb+0x16>
 800bdce:	2aff      	cmp	r2, #255	; 0xff
 800bdd0:	bf85      	ittet	hi
 800bdd2:	238a      	movhi	r3, #138	; 0x8a
 800bdd4:	6003      	strhi	r3, [r0, #0]
 800bdd6:	700a      	strbls	r2, [r1, #0]
 800bdd8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bddc:	bf98      	it	ls
 800bdde:	2001      	movls	r0, #1
 800bde0:	4770      	bx	lr
 800bde2:	4608      	mov	r0, r1
 800bde4:	4770      	bx	lr

0800bde6 <abort>:
 800bde6:	b508      	push	{r3, lr}
 800bde8:	2006      	movs	r0, #6
 800bdea:	f000 f82b 	bl	800be44 <raise>
 800bdee:	2001      	movs	r0, #1
 800bdf0:	f7f8 fb32 	bl	8004458 <_exit>

0800bdf4 <_raise_r>:
 800bdf4:	291f      	cmp	r1, #31
 800bdf6:	b538      	push	{r3, r4, r5, lr}
 800bdf8:	4604      	mov	r4, r0
 800bdfa:	460d      	mov	r5, r1
 800bdfc:	d904      	bls.n	800be08 <_raise_r+0x14>
 800bdfe:	2316      	movs	r3, #22
 800be00:	6003      	str	r3, [r0, #0]
 800be02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be06:	bd38      	pop	{r3, r4, r5, pc}
 800be08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be0a:	b112      	cbz	r2, 800be12 <_raise_r+0x1e>
 800be0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be10:	b94b      	cbnz	r3, 800be26 <_raise_r+0x32>
 800be12:	4620      	mov	r0, r4
 800be14:	f000 f830 	bl	800be78 <_getpid_r>
 800be18:	462a      	mov	r2, r5
 800be1a:	4601      	mov	r1, r0
 800be1c:	4620      	mov	r0, r4
 800be1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be22:	f000 b817 	b.w	800be54 <_kill_r>
 800be26:	2b01      	cmp	r3, #1
 800be28:	d00a      	beq.n	800be40 <_raise_r+0x4c>
 800be2a:	1c59      	adds	r1, r3, #1
 800be2c:	d103      	bne.n	800be36 <_raise_r+0x42>
 800be2e:	2316      	movs	r3, #22
 800be30:	6003      	str	r3, [r0, #0]
 800be32:	2001      	movs	r0, #1
 800be34:	e7e7      	b.n	800be06 <_raise_r+0x12>
 800be36:	2400      	movs	r4, #0
 800be38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be3c:	4628      	mov	r0, r5
 800be3e:	4798      	blx	r3
 800be40:	2000      	movs	r0, #0
 800be42:	e7e0      	b.n	800be06 <_raise_r+0x12>

0800be44 <raise>:
 800be44:	4b02      	ldr	r3, [pc, #8]	; (800be50 <raise+0xc>)
 800be46:	4601      	mov	r1, r0
 800be48:	6818      	ldr	r0, [r3, #0]
 800be4a:	f7ff bfd3 	b.w	800bdf4 <_raise_r>
 800be4e:	bf00      	nop
 800be50:	20000018 	.word	0x20000018

0800be54 <_kill_r>:
 800be54:	b538      	push	{r3, r4, r5, lr}
 800be56:	4d07      	ldr	r5, [pc, #28]	; (800be74 <_kill_r+0x20>)
 800be58:	2300      	movs	r3, #0
 800be5a:	4604      	mov	r4, r0
 800be5c:	4608      	mov	r0, r1
 800be5e:	4611      	mov	r1, r2
 800be60:	602b      	str	r3, [r5, #0]
 800be62:	f7f8 fae9 	bl	8004438 <_kill>
 800be66:	1c43      	adds	r3, r0, #1
 800be68:	d102      	bne.n	800be70 <_kill_r+0x1c>
 800be6a:	682b      	ldr	r3, [r5, #0]
 800be6c:	b103      	cbz	r3, 800be70 <_kill_r+0x1c>
 800be6e:	6023      	str	r3, [r4, #0]
 800be70:	bd38      	pop	{r3, r4, r5, pc}
 800be72:	bf00      	nop
 800be74:	20000b50 	.word	0x20000b50

0800be78 <_getpid_r>:
 800be78:	f7f8 bad6 	b.w	8004428 <_getpid>
 800be7c:	0000      	movs	r0, r0
	...

0800be80 <cos>:
 800be80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be82:	ec53 2b10 	vmov	r2, r3, d0
 800be86:	4826      	ldr	r0, [pc, #152]	; (800bf20 <cos+0xa0>)
 800be88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800be8c:	4281      	cmp	r1, r0
 800be8e:	dc06      	bgt.n	800be9e <cos+0x1e>
 800be90:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800bf18 <cos+0x98>
 800be94:	b005      	add	sp, #20
 800be96:	f85d eb04 	ldr.w	lr, [sp], #4
 800be9a:	f000 bf09 	b.w	800ccb0 <__kernel_cos>
 800be9e:	4821      	ldr	r0, [pc, #132]	; (800bf24 <cos+0xa4>)
 800bea0:	4281      	cmp	r1, r0
 800bea2:	dd09      	ble.n	800beb8 <cos+0x38>
 800bea4:	ee10 0a10 	vmov	r0, s0
 800bea8:	4619      	mov	r1, r3
 800beaa:	f7f4 fa0d 	bl	80002c8 <__aeabi_dsub>
 800beae:	ec41 0b10 	vmov	d0, r0, r1
 800beb2:	b005      	add	sp, #20
 800beb4:	f85d fb04 	ldr.w	pc, [sp], #4
 800beb8:	4668      	mov	r0, sp
 800beba:	f000 fc39 	bl	800c730 <__ieee754_rem_pio2>
 800bebe:	f000 0003 	and.w	r0, r0, #3
 800bec2:	2801      	cmp	r0, #1
 800bec4:	d00b      	beq.n	800bede <cos+0x5e>
 800bec6:	2802      	cmp	r0, #2
 800bec8:	d016      	beq.n	800bef8 <cos+0x78>
 800beca:	b9e0      	cbnz	r0, 800bf06 <cos+0x86>
 800becc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bed0:	ed9d 0b00 	vldr	d0, [sp]
 800bed4:	f000 feec 	bl	800ccb0 <__kernel_cos>
 800bed8:	ec51 0b10 	vmov	r0, r1, d0
 800bedc:	e7e7      	b.n	800beae <cos+0x2e>
 800bede:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bee2:	ed9d 0b00 	vldr	d0, [sp]
 800bee6:	f001 fafb 	bl	800d4e0 <__kernel_sin>
 800beea:	ec53 2b10 	vmov	r2, r3, d0
 800beee:	ee10 0a10 	vmov	r0, s0
 800bef2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bef6:	e7da      	b.n	800beae <cos+0x2e>
 800bef8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800befc:	ed9d 0b00 	vldr	d0, [sp]
 800bf00:	f000 fed6 	bl	800ccb0 <__kernel_cos>
 800bf04:	e7f1      	b.n	800beea <cos+0x6a>
 800bf06:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bf0a:	ed9d 0b00 	vldr	d0, [sp]
 800bf0e:	2001      	movs	r0, #1
 800bf10:	f001 fae6 	bl	800d4e0 <__kernel_sin>
 800bf14:	e7e0      	b.n	800bed8 <cos+0x58>
 800bf16:	bf00      	nop
	...
 800bf20:	3fe921fb 	.word	0x3fe921fb
 800bf24:	7fefffff 	.word	0x7fefffff

0800bf28 <round>:
 800bf28:	ec51 0b10 	vmov	r0, r1, d0
 800bf2c:	b570      	push	{r4, r5, r6, lr}
 800bf2e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800bf32:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800bf36:	2c13      	cmp	r4, #19
 800bf38:	ee10 2a10 	vmov	r2, s0
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	dc19      	bgt.n	800bf74 <round+0x4c>
 800bf40:	2c00      	cmp	r4, #0
 800bf42:	da09      	bge.n	800bf58 <round+0x30>
 800bf44:	3401      	adds	r4, #1
 800bf46:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800bf4a:	d103      	bne.n	800bf54 <round+0x2c>
 800bf4c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bf50:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bf54:	2200      	movs	r2, #0
 800bf56:	e028      	b.n	800bfaa <round+0x82>
 800bf58:	4d15      	ldr	r5, [pc, #84]	; (800bfb0 <round+0x88>)
 800bf5a:	4125      	asrs	r5, r4
 800bf5c:	ea01 0605 	and.w	r6, r1, r5
 800bf60:	4332      	orrs	r2, r6
 800bf62:	d00e      	beq.n	800bf82 <round+0x5a>
 800bf64:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bf68:	fa42 f404 	asr.w	r4, r2, r4
 800bf6c:	4423      	add	r3, r4
 800bf6e:	ea23 0305 	bic.w	r3, r3, r5
 800bf72:	e7ef      	b.n	800bf54 <round+0x2c>
 800bf74:	2c33      	cmp	r4, #51	; 0x33
 800bf76:	dd07      	ble.n	800bf88 <round+0x60>
 800bf78:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800bf7c:	d101      	bne.n	800bf82 <round+0x5a>
 800bf7e:	f7f4 f9a5 	bl	80002cc <__adddf3>
 800bf82:	ec41 0b10 	vmov	d0, r0, r1
 800bf86:	bd70      	pop	{r4, r5, r6, pc}
 800bf88:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800bf8c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bf90:	40f5      	lsrs	r5, r6
 800bf92:	4228      	tst	r0, r5
 800bf94:	d0f5      	beq.n	800bf82 <round+0x5a>
 800bf96:	2101      	movs	r1, #1
 800bf98:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800bf9c:	fa01 f404 	lsl.w	r4, r1, r4
 800bfa0:	1912      	adds	r2, r2, r4
 800bfa2:	bf28      	it	cs
 800bfa4:	185b      	addcs	r3, r3, r1
 800bfa6:	ea22 0205 	bic.w	r2, r2, r5
 800bfaa:	4619      	mov	r1, r3
 800bfac:	4610      	mov	r0, r2
 800bfae:	e7e8      	b.n	800bf82 <round+0x5a>
 800bfb0:	000fffff 	.word	0x000fffff
 800bfb4:	00000000 	.word	0x00000000

0800bfb8 <sin>:
 800bfb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bfba:	ec53 2b10 	vmov	r2, r3, d0
 800bfbe:	4828      	ldr	r0, [pc, #160]	; (800c060 <sin+0xa8>)
 800bfc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bfc4:	4281      	cmp	r1, r0
 800bfc6:	dc07      	bgt.n	800bfd8 <sin+0x20>
 800bfc8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800c058 <sin+0xa0>
 800bfcc:	2000      	movs	r0, #0
 800bfce:	b005      	add	sp, #20
 800bfd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfd4:	f001 ba84 	b.w	800d4e0 <__kernel_sin>
 800bfd8:	4822      	ldr	r0, [pc, #136]	; (800c064 <sin+0xac>)
 800bfda:	4281      	cmp	r1, r0
 800bfdc:	dd09      	ble.n	800bff2 <sin+0x3a>
 800bfde:	ee10 0a10 	vmov	r0, s0
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	f7f4 f970 	bl	80002c8 <__aeabi_dsub>
 800bfe8:	ec41 0b10 	vmov	d0, r0, r1
 800bfec:	b005      	add	sp, #20
 800bfee:	f85d fb04 	ldr.w	pc, [sp], #4
 800bff2:	4668      	mov	r0, sp
 800bff4:	f000 fb9c 	bl	800c730 <__ieee754_rem_pio2>
 800bff8:	f000 0003 	and.w	r0, r0, #3
 800bffc:	2801      	cmp	r0, #1
 800bffe:	d00c      	beq.n	800c01a <sin+0x62>
 800c000:	2802      	cmp	r0, #2
 800c002:	d011      	beq.n	800c028 <sin+0x70>
 800c004:	b9f0      	cbnz	r0, 800c044 <sin+0x8c>
 800c006:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c00a:	ed9d 0b00 	vldr	d0, [sp]
 800c00e:	2001      	movs	r0, #1
 800c010:	f001 fa66 	bl	800d4e0 <__kernel_sin>
 800c014:	ec51 0b10 	vmov	r0, r1, d0
 800c018:	e7e6      	b.n	800bfe8 <sin+0x30>
 800c01a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c01e:	ed9d 0b00 	vldr	d0, [sp]
 800c022:	f000 fe45 	bl	800ccb0 <__kernel_cos>
 800c026:	e7f5      	b.n	800c014 <sin+0x5c>
 800c028:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c02c:	ed9d 0b00 	vldr	d0, [sp]
 800c030:	2001      	movs	r0, #1
 800c032:	f001 fa55 	bl	800d4e0 <__kernel_sin>
 800c036:	ec53 2b10 	vmov	r2, r3, d0
 800c03a:	ee10 0a10 	vmov	r0, s0
 800c03e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c042:	e7d1      	b.n	800bfe8 <sin+0x30>
 800c044:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c048:	ed9d 0b00 	vldr	d0, [sp]
 800c04c:	f000 fe30 	bl	800ccb0 <__kernel_cos>
 800c050:	e7f1      	b.n	800c036 <sin+0x7e>
 800c052:	bf00      	nop
 800c054:	f3af 8000 	nop.w
	...
 800c060:	3fe921fb 	.word	0x3fe921fb
 800c064:	7fefffff 	.word	0x7fefffff

0800c068 <acos>:
 800c068:	b538      	push	{r3, r4, r5, lr}
 800c06a:	ed2d 8b02 	vpush	{d8}
 800c06e:	ec55 4b10 	vmov	r4, r5, d0
 800c072:	f000 f831 	bl	800c0d8 <__ieee754_acos>
 800c076:	4622      	mov	r2, r4
 800c078:	462b      	mov	r3, r5
 800c07a:	4620      	mov	r0, r4
 800c07c:	4629      	mov	r1, r5
 800c07e:	eeb0 8a40 	vmov.f32	s16, s0
 800c082:	eef0 8a60 	vmov.f32	s17, s1
 800c086:	f7f4 fd71 	bl	8000b6c <__aeabi_dcmpun>
 800c08a:	b9a8      	cbnz	r0, 800c0b8 <acos+0x50>
 800c08c:	ec45 4b10 	vmov	d0, r4, r5
 800c090:	f001 fc86 	bl	800d9a0 <fabs>
 800c094:	4b0c      	ldr	r3, [pc, #48]	; (800c0c8 <acos+0x60>)
 800c096:	ec51 0b10 	vmov	r0, r1, d0
 800c09a:	2200      	movs	r2, #0
 800c09c:	f7f4 fd5c 	bl	8000b58 <__aeabi_dcmpgt>
 800c0a0:	b150      	cbz	r0, 800c0b8 <acos+0x50>
 800c0a2:	f7fd f849 	bl	8009138 <__errno>
 800c0a6:	ecbd 8b02 	vpop	{d8}
 800c0aa:	2321      	movs	r3, #33	; 0x21
 800c0ac:	6003      	str	r3, [r0, #0]
 800c0ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0b2:	4806      	ldr	r0, [pc, #24]	; (800c0cc <acos+0x64>)
 800c0b4:	f001 bd00 	b.w	800dab8 <nan>
 800c0b8:	eeb0 0a48 	vmov.f32	s0, s16
 800c0bc:	eef0 0a68 	vmov.f32	s1, s17
 800c0c0:	ecbd 8b02 	vpop	{d8}
 800c0c4:	bd38      	pop	{r3, r4, r5, pc}
 800c0c6:	bf00      	nop
 800c0c8:	3ff00000 	.word	0x3ff00000
 800c0cc:	0800e230 	.word	0x0800e230

0800c0d0 <atan2>:
 800c0d0:	f000 ba62 	b.w	800c598 <__ieee754_atan2>
 800c0d4:	0000      	movs	r0, r0
	...

0800c0d8 <__ieee754_acos>:
 800c0d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0dc:	ec55 4b10 	vmov	r4, r5, d0
 800c0e0:	49b7      	ldr	r1, [pc, #732]	; (800c3c0 <__ieee754_acos+0x2e8>)
 800c0e2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c0e6:	428b      	cmp	r3, r1
 800c0e8:	dd1b      	ble.n	800c122 <__ieee754_acos+0x4a>
 800c0ea:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800c0ee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c0f2:	4323      	orrs	r3, r4
 800c0f4:	d106      	bne.n	800c104 <__ieee754_acos+0x2c>
 800c0f6:	2d00      	cmp	r5, #0
 800c0f8:	f300 8211 	bgt.w	800c51e <__ieee754_acos+0x446>
 800c0fc:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800c358 <__ieee754_acos+0x280>
 800c100:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c104:	ee10 2a10 	vmov	r2, s0
 800c108:	462b      	mov	r3, r5
 800c10a:	ee10 0a10 	vmov	r0, s0
 800c10e:	4629      	mov	r1, r5
 800c110:	f7f4 f8da 	bl	80002c8 <__aeabi_dsub>
 800c114:	4602      	mov	r2, r0
 800c116:	460b      	mov	r3, r1
 800c118:	f7f4 fbb8 	bl	800088c <__aeabi_ddiv>
 800c11c:	ec41 0b10 	vmov	d0, r0, r1
 800c120:	e7ee      	b.n	800c100 <__ieee754_acos+0x28>
 800c122:	49a8      	ldr	r1, [pc, #672]	; (800c3c4 <__ieee754_acos+0x2ec>)
 800c124:	428b      	cmp	r3, r1
 800c126:	f300 8087 	bgt.w	800c238 <__ieee754_acos+0x160>
 800c12a:	4aa7      	ldr	r2, [pc, #668]	; (800c3c8 <__ieee754_acos+0x2f0>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	f340 81f9 	ble.w	800c524 <__ieee754_acos+0x44c>
 800c132:	ee10 2a10 	vmov	r2, s0
 800c136:	ee10 0a10 	vmov	r0, s0
 800c13a:	462b      	mov	r3, r5
 800c13c:	4629      	mov	r1, r5
 800c13e:	f7f4 fa7b 	bl	8000638 <__aeabi_dmul>
 800c142:	a387      	add	r3, pc, #540	; (adr r3, 800c360 <__ieee754_acos+0x288>)
 800c144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c148:	4606      	mov	r6, r0
 800c14a:	460f      	mov	r7, r1
 800c14c:	f7f4 fa74 	bl	8000638 <__aeabi_dmul>
 800c150:	a385      	add	r3, pc, #532	; (adr r3, 800c368 <__ieee754_acos+0x290>)
 800c152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c156:	f7f4 f8b9 	bl	80002cc <__adddf3>
 800c15a:	4632      	mov	r2, r6
 800c15c:	463b      	mov	r3, r7
 800c15e:	f7f4 fa6b 	bl	8000638 <__aeabi_dmul>
 800c162:	a383      	add	r3, pc, #524	; (adr r3, 800c370 <__ieee754_acos+0x298>)
 800c164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c168:	f7f4 f8ae 	bl	80002c8 <__aeabi_dsub>
 800c16c:	4632      	mov	r2, r6
 800c16e:	463b      	mov	r3, r7
 800c170:	f7f4 fa62 	bl	8000638 <__aeabi_dmul>
 800c174:	a380      	add	r3, pc, #512	; (adr r3, 800c378 <__ieee754_acos+0x2a0>)
 800c176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17a:	f7f4 f8a7 	bl	80002cc <__adddf3>
 800c17e:	4632      	mov	r2, r6
 800c180:	463b      	mov	r3, r7
 800c182:	f7f4 fa59 	bl	8000638 <__aeabi_dmul>
 800c186:	a37e      	add	r3, pc, #504	; (adr r3, 800c380 <__ieee754_acos+0x2a8>)
 800c188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18c:	f7f4 f89c 	bl	80002c8 <__aeabi_dsub>
 800c190:	4632      	mov	r2, r6
 800c192:	463b      	mov	r3, r7
 800c194:	f7f4 fa50 	bl	8000638 <__aeabi_dmul>
 800c198:	a37b      	add	r3, pc, #492	; (adr r3, 800c388 <__ieee754_acos+0x2b0>)
 800c19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19e:	f7f4 f895 	bl	80002cc <__adddf3>
 800c1a2:	4632      	mov	r2, r6
 800c1a4:	463b      	mov	r3, r7
 800c1a6:	f7f4 fa47 	bl	8000638 <__aeabi_dmul>
 800c1aa:	a379      	add	r3, pc, #484	; (adr r3, 800c390 <__ieee754_acos+0x2b8>)
 800c1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b0:	4680      	mov	r8, r0
 800c1b2:	4689      	mov	r9, r1
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	4639      	mov	r1, r7
 800c1b8:	f7f4 fa3e 	bl	8000638 <__aeabi_dmul>
 800c1bc:	a376      	add	r3, pc, #472	; (adr r3, 800c398 <__ieee754_acos+0x2c0>)
 800c1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c2:	f7f4 f881 	bl	80002c8 <__aeabi_dsub>
 800c1c6:	4632      	mov	r2, r6
 800c1c8:	463b      	mov	r3, r7
 800c1ca:	f7f4 fa35 	bl	8000638 <__aeabi_dmul>
 800c1ce:	a374      	add	r3, pc, #464	; (adr r3, 800c3a0 <__ieee754_acos+0x2c8>)
 800c1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d4:	f7f4 f87a 	bl	80002cc <__adddf3>
 800c1d8:	4632      	mov	r2, r6
 800c1da:	463b      	mov	r3, r7
 800c1dc:	f7f4 fa2c 	bl	8000638 <__aeabi_dmul>
 800c1e0:	a371      	add	r3, pc, #452	; (adr r3, 800c3a8 <__ieee754_acos+0x2d0>)
 800c1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e6:	f7f4 f86f 	bl	80002c8 <__aeabi_dsub>
 800c1ea:	4632      	mov	r2, r6
 800c1ec:	463b      	mov	r3, r7
 800c1ee:	f7f4 fa23 	bl	8000638 <__aeabi_dmul>
 800c1f2:	4b76      	ldr	r3, [pc, #472]	; (800c3cc <__ieee754_acos+0x2f4>)
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	f7f4 f869 	bl	80002cc <__adddf3>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	4640      	mov	r0, r8
 800c200:	4649      	mov	r1, r9
 800c202:	f7f4 fb43 	bl	800088c <__aeabi_ddiv>
 800c206:	4622      	mov	r2, r4
 800c208:	462b      	mov	r3, r5
 800c20a:	f7f4 fa15 	bl	8000638 <__aeabi_dmul>
 800c20e:	4602      	mov	r2, r0
 800c210:	460b      	mov	r3, r1
 800c212:	a167      	add	r1, pc, #412	; (adr r1, 800c3b0 <__ieee754_acos+0x2d8>)
 800c214:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c218:	f7f4 f856 	bl	80002c8 <__aeabi_dsub>
 800c21c:	4602      	mov	r2, r0
 800c21e:	460b      	mov	r3, r1
 800c220:	4620      	mov	r0, r4
 800c222:	4629      	mov	r1, r5
 800c224:	f7f4 f850 	bl	80002c8 <__aeabi_dsub>
 800c228:	4602      	mov	r2, r0
 800c22a:	460b      	mov	r3, r1
 800c22c:	a162      	add	r1, pc, #392	; (adr r1, 800c3b8 <__ieee754_acos+0x2e0>)
 800c22e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c232:	f7f4 f849 	bl	80002c8 <__aeabi_dsub>
 800c236:	e771      	b.n	800c11c <__ieee754_acos+0x44>
 800c238:	2d00      	cmp	r5, #0
 800c23a:	f280 80cb 	bge.w	800c3d4 <__ieee754_acos+0x2fc>
 800c23e:	ee10 0a10 	vmov	r0, s0
 800c242:	4b62      	ldr	r3, [pc, #392]	; (800c3cc <__ieee754_acos+0x2f4>)
 800c244:	2200      	movs	r2, #0
 800c246:	4629      	mov	r1, r5
 800c248:	f7f4 f840 	bl	80002cc <__adddf3>
 800c24c:	4b60      	ldr	r3, [pc, #384]	; (800c3d0 <__ieee754_acos+0x2f8>)
 800c24e:	2200      	movs	r2, #0
 800c250:	f7f4 f9f2 	bl	8000638 <__aeabi_dmul>
 800c254:	a342      	add	r3, pc, #264	; (adr r3, 800c360 <__ieee754_acos+0x288>)
 800c256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25a:	4604      	mov	r4, r0
 800c25c:	460d      	mov	r5, r1
 800c25e:	f7f4 f9eb 	bl	8000638 <__aeabi_dmul>
 800c262:	a341      	add	r3, pc, #260	; (adr r3, 800c368 <__ieee754_acos+0x290>)
 800c264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c268:	f7f4 f830 	bl	80002cc <__adddf3>
 800c26c:	4622      	mov	r2, r4
 800c26e:	462b      	mov	r3, r5
 800c270:	f7f4 f9e2 	bl	8000638 <__aeabi_dmul>
 800c274:	a33e      	add	r3, pc, #248	; (adr r3, 800c370 <__ieee754_acos+0x298>)
 800c276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27a:	f7f4 f825 	bl	80002c8 <__aeabi_dsub>
 800c27e:	4622      	mov	r2, r4
 800c280:	462b      	mov	r3, r5
 800c282:	f7f4 f9d9 	bl	8000638 <__aeabi_dmul>
 800c286:	a33c      	add	r3, pc, #240	; (adr r3, 800c378 <__ieee754_acos+0x2a0>)
 800c288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28c:	f7f4 f81e 	bl	80002cc <__adddf3>
 800c290:	4622      	mov	r2, r4
 800c292:	462b      	mov	r3, r5
 800c294:	f7f4 f9d0 	bl	8000638 <__aeabi_dmul>
 800c298:	a339      	add	r3, pc, #228	; (adr r3, 800c380 <__ieee754_acos+0x2a8>)
 800c29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29e:	f7f4 f813 	bl	80002c8 <__aeabi_dsub>
 800c2a2:	4622      	mov	r2, r4
 800c2a4:	462b      	mov	r3, r5
 800c2a6:	f7f4 f9c7 	bl	8000638 <__aeabi_dmul>
 800c2aa:	a337      	add	r3, pc, #220	; (adr r3, 800c388 <__ieee754_acos+0x2b0>)
 800c2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b0:	f7f4 f80c 	bl	80002cc <__adddf3>
 800c2b4:	4622      	mov	r2, r4
 800c2b6:	462b      	mov	r3, r5
 800c2b8:	f7f4 f9be 	bl	8000638 <__aeabi_dmul>
 800c2bc:	ec45 4b10 	vmov	d0, r4, r5
 800c2c0:	4680      	mov	r8, r0
 800c2c2:	4689      	mov	r9, r1
 800c2c4:	f000 fc40 	bl	800cb48 <__ieee754_sqrt>
 800c2c8:	a331      	add	r3, pc, #196	; (adr r3, 800c390 <__ieee754_acos+0x2b8>)
 800c2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	4629      	mov	r1, r5
 800c2d2:	ec57 6b10 	vmov	r6, r7, d0
 800c2d6:	f7f4 f9af 	bl	8000638 <__aeabi_dmul>
 800c2da:	a32f      	add	r3, pc, #188	; (adr r3, 800c398 <__ieee754_acos+0x2c0>)
 800c2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e0:	f7f3 fff2 	bl	80002c8 <__aeabi_dsub>
 800c2e4:	4622      	mov	r2, r4
 800c2e6:	462b      	mov	r3, r5
 800c2e8:	f7f4 f9a6 	bl	8000638 <__aeabi_dmul>
 800c2ec:	a32c      	add	r3, pc, #176	; (adr r3, 800c3a0 <__ieee754_acos+0x2c8>)
 800c2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f2:	f7f3 ffeb 	bl	80002cc <__adddf3>
 800c2f6:	4622      	mov	r2, r4
 800c2f8:	462b      	mov	r3, r5
 800c2fa:	f7f4 f99d 	bl	8000638 <__aeabi_dmul>
 800c2fe:	a32a      	add	r3, pc, #168	; (adr r3, 800c3a8 <__ieee754_acos+0x2d0>)
 800c300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c304:	f7f3 ffe0 	bl	80002c8 <__aeabi_dsub>
 800c308:	4622      	mov	r2, r4
 800c30a:	462b      	mov	r3, r5
 800c30c:	f7f4 f994 	bl	8000638 <__aeabi_dmul>
 800c310:	4b2e      	ldr	r3, [pc, #184]	; (800c3cc <__ieee754_acos+0x2f4>)
 800c312:	2200      	movs	r2, #0
 800c314:	f7f3 ffda 	bl	80002cc <__adddf3>
 800c318:	4602      	mov	r2, r0
 800c31a:	460b      	mov	r3, r1
 800c31c:	4640      	mov	r0, r8
 800c31e:	4649      	mov	r1, r9
 800c320:	f7f4 fab4 	bl	800088c <__aeabi_ddiv>
 800c324:	4632      	mov	r2, r6
 800c326:	463b      	mov	r3, r7
 800c328:	f7f4 f986 	bl	8000638 <__aeabi_dmul>
 800c32c:	a320      	add	r3, pc, #128	; (adr r3, 800c3b0 <__ieee754_acos+0x2d8>)
 800c32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c332:	f7f3 ffc9 	bl	80002c8 <__aeabi_dsub>
 800c336:	4632      	mov	r2, r6
 800c338:	463b      	mov	r3, r7
 800c33a:	f7f3 ffc7 	bl	80002cc <__adddf3>
 800c33e:	4602      	mov	r2, r0
 800c340:	460b      	mov	r3, r1
 800c342:	f7f3 ffc3 	bl	80002cc <__adddf3>
 800c346:	4602      	mov	r2, r0
 800c348:	460b      	mov	r3, r1
 800c34a:	a103      	add	r1, pc, #12	; (adr r1, 800c358 <__ieee754_acos+0x280>)
 800c34c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c350:	e76f      	b.n	800c232 <__ieee754_acos+0x15a>
 800c352:	bf00      	nop
 800c354:	f3af 8000 	nop.w
 800c358:	54442d18 	.word	0x54442d18
 800c35c:	400921fb 	.word	0x400921fb
 800c360:	0dfdf709 	.word	0x0dfdf709
 800c364:	3f023de1 	.word	0x3f023de1
 800c368:	7501b288 	.word	0x7501b288
 800c36c:	3f49efe0 	.word	0x3f49efe0
 800c370:	b5688f3b 	.word	0xb5688f3b
 800c374:	3fa48228 	.word	0x3fa48228
 800c378:	0e884455 	.word	0x0e884455
 800c37c:	3fc9c155 	.word	0x3fc9c155
 800c380:	03eb6f7d 	.word	0x03eb6f7d
 800c384:	3fd4d612 	.word	0x3fd4d612
 800c388:	55555555 	.word	0x55555555
 800c38c:	3fc55555 	.word	0x3fc55555
 800c390:	b12e9282 	.word	0xb12e9282
 800c394:	3fb3b8c5 	.word	0x3fb3b8c5
 800c398:	1b8d0159 	.word	0x1b8d0159
 800c39c:	3fe6066c 	.word	0x3fe6066c
 800c3a0:	9c598ac8 	.word	0x9c598ac8
 800c3a4:	40002ae5 	.word	0x40002ae5
 800c3a8:	1c8a2d4b 	.word	0x1c8a2d4b
 800c3ac:	40033a27 	.word	0x40033a27
 800c3b0:	33145c07 	.word	0x33145c07
 800c3b4:	3c91a626 	.word	0x3c91a626
 800c3b8:	54442d18 	.word	0x54442d18
 800c3bc:	3ff921fb 	.word	0x3ff921fb
 800c3c0:	3fefffff 	.word	0x3fefffff
 800c3c4:	3fdfffff 	.word	0x3fdfffff
 800c3c8:	3c600000 	.word	0x3c600000
 800c3cc:	3ff00000 	.word	0x3ff00000
 800c3d0:	3fe00000 	.word	0x3fe00000
 800c3d4:	ee10 2a10 	vmov	r2, s0
 800c3d8:	462b      	mov	r3, r5
 800c3da:	496d      	ldr	r1, [pc, #436]	; (800c590 <__ieee754_acos+0x4b8>)
 800c3dc:	2000      	movs	r0, #0
 800c3de:	f7f3 ff73 	bl	80002c8 <__aeabi_dsub>
 800c3e2:	4b6c      	ldr	r3, [pc, #432]	; (800c594 <__ieee754_acos+0x4bc>)
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f7f4 f927 	bl	8000638 <__aeabi_dmul>
 800c3ea:	4604      	mov	r4, r0
 800c3ec:	460d      	mov	r5, r1
 800c3ee:	ec45 4b10 	vmov	d0, r4, r5
 800c3f2:	f000 fba9 	bl	800cb48 <__ieee754_sqrt>
 800c3f6:	a34e      	add	r3, pc, #312	; (adr r3, 800c530 <__ieee754_acos+0x458>)
 800c3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	4629      	mov	r1, r5
 800c400:	ec59 8b10 	vmov	r8, r9, d0
 800c404:	f7f4 f918 	bl	8000638 <__aeabi_dmul>
 800c408:	a34b      	add	r3, pc, #300	; (adr r3, 800c538 <__ieee754_acos+0x460>)
 800c40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40e:	f7f3 ff5d 	bl	80002cc <__adddf3>
 800c412:	4622      	mov	r2, r4
 800c414:	462b      	mov	r3, r5
 800c416:	f7f4 f90f 	bl	8000638 <__aeabi_dmul>
 800c41a:	a349      	add	r3, pc, #292	; (adr r3, 800c540 <__ieee754_acos+0x468>)
 800c41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c420:	f7f3 ff52 	bl	80002c8 <__aeabi_dsub>
 800c424:	4622      	mov	r2, r4
 800c426:	462b      	mov	r3, r5
 800c428:	f7f4 f906 	bl	8000638 <__aeabi_dmul>
 800c42c:	a346      	add	r3, pc, #280	; (adr r3, 800c548 <__ieee754_acos+0x470>)
 800c42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c432:	f7f3 ff4b 	bl	80002cc <__adddf3>
 800c436:	4622      	mov	r2, r4
 800c438:	462b      	mov	r3, r5
 800c43a:	f7f4 f8fd 	bl	8000638 <__aeabi_dmul>
 800c43e:	a344      	add	r3, pc, #272	; (adr r3, 800c550 <__ieee754_acos+0x478>)
 800c440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c444:	f7f3 ff40 	bl	80002c8 <__aeabi_dsub>
 800c448:	4622      	mov	r2, r4
 800c44a:	462b      	mov	r3, r5
 800c44c:	f7f4 f8f4 	bl	8000638 <__aeabi_dmul>
 800c450:	a341      	add	r3, pc, #260	; (adr r3, 800c558 <__ieee754_acos+0x480>)
 800c452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c456:	f7f3 ff39 	bl	80002cc <__adddf3>
 800c45a:	4622      	mov	r2, r4
 800c45c:	462b      	mov	r3, r5
 800c45e:	f7f4 f8eb 	bl	8000638 <__aeabi_dmul>
 800c462:	a33f      	add	r3, pc, #252	; (adr r3, 800c560 <__ieee754_acos+0x488>)
 800c464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c468:	4682      	mov	sl, r0
 800c46a:	468b      	mov	fp, r1
 800c46c:	4620      	mov	r0, r4
 800c46e:	4629      	mov	r1, r5
 800c470:	f7f4 f8e2 	bl	8000638 <__aeabi_dmul>
 800c474:	a33c      	add	r3, pc, #240	; (adr r3, 800c568 <__ieee754_acos+0x490>)
 800c476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47a:	f7f3 ff25 	bl	80002c8 <__aeabi_dsub>
 800c47e:	4622      	mov	r2, r4
 800c480:	462b      	mov	r3, r5
 800c482:	f7f4 f8d9 	bl	8000638 <__aeabi_dmul>
 800c486:	a33a      	add	r3, pc, #232	; (adr r3, 800c570 <__ieee754_acos+0x498>)
 800c488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48c:	f7f3 ff1e 	bl	80002cc <__adddf3>
 800c490:	4622      	mov	r2, r4
 800c492:	462b      	mov	r3, r5
 800c494:	f7f4 f8d0 	bl	8000638 <__aeabi_dmul>
 800c498:	a337      	add	r3, pc, #220	; (adr r3, 800c578 <__ieee754_acos+0x4a0>)
 800c49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49e:	f7f3 ff13 	bl	80002c8 <__aeabi_dsub>
 800c4a2:	4622      	mov	r2, r4
 800c4a4:	462b      	mov	r3, r5
 800c4a6:	f7f4 f8c7 	bl	8000638 <__aeabi_dmul>
 800c4aa:	4b39      	ldr	r3, [pc, #228]	; (800c590 <__ieee754_acos+0x4b8>)
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	f7f3 ff0d 	bl	80002cc <__adddf3>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	4650      	mov	r0, sl
 800c4b8:	4659      	mov	r1, fp
 800c4ba:	f7f4 f9e7 	bl	800088c <__aeabi_ddiv>
 800c4be:	4642      	mov	r2, r8
 800c4c0:	464b      	mov	r3, r9
 800c4c2:	f7f4 f8b9 	bl	8000638 <__aeabi_dmul>
 800c4c6:	2600      	movs	r6, #0
 800c4c8:	4682      	mov	sl, r0
 800c4ca:	468b      	mov	fp, r1
 800c4cc:	4632      	mov	r2, r6
 800c4ce:	464b      	mov	r3, r9
 800c4d0:	4630      	mov	r0, r6
 800c4d2:	4649      	mov	r1, r9
 800c4d4:	f7f4 f8b0 	bl	8000638 <__aeabi_dmul>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	460b      	mov	r3, r1
 800c4dc:	4620      	mov	r0, r4
 800c4de:	4629      	mov	r1, r5
 800c4e0:	f7f3 fef2 	bl	80002c8 <__aeabi_dsub>
 800c4e4:	4632      	mov	r2, r6
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	460d      	mov	r5, r1
 800c4ea:	464b      	mov	r3, r9
 800c4ec:	4640      	mov	r0, r8
 800c4ee:	4649      	mov	r1, r9
 800c4f0:	f7f3 feec 	bl	80002cc <__adddf3>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	4629      	mov	r1, r5
 800c4fc:	f7f4 f9c6 	bl	800088c <__aeabi_ddiv>
 800c500:	4602      	mov	r2, r0
 800c502:	460b      	mov	r3, r1
 800c504:	4650      	mov	r0, sl
 800c506:	4659      	mov	r1, fp
 800c508:	f7f3 fee0 	bl	80002cc <__adddf3>
 800c50c:	4632      	mov	r2, r6
 800c50e:	464b      	mov	r3, r9
 800c510:	f7f3 fedc 	bl	80002cc <__adddf3>
 800c514:	4602      	mov	r2, r0
 800c516:	460b      	mov	r3, r1
 800c518:	f7f3 fed8 	bl	80002cc <__adddf3>
 800c51c:	e5fe      	b.n	800c11c <__ieee754_acos+0x44>
 800c51e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800c580 <__ieee754_acos+0x4a8>
 800c522:	e5ed      	b.n	800c100 <__ieee754_acos+0x28>
 800c524:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800c588 <__ieee754_acos+0x4b0>
 800c528:	e5ea      	b.n	800c100 <__ieee754_acos+0x28>
 800c52a:	bf00      	nop
 800c52c:	f3af 8000 	nop.w
 800c530:	0dfdf709 	.word	0x0dfdf709
 800c534:	3f023de1 	.word	0x3f023de1
 800c538:	7501b288 	.word	0x7501b288
 800c53c:	3f49efe0 	.word	0x3f49efe0
 800c540:	b5688f3b 	.word	0xb5688f3b
 800c544:	3fa48228 	.word	0x3fa48228
 800c548:	0e884455 	.word	0x0e884455
 800c54c:	3fc9c155 	.word	0x3fc9c155
 800c550:	03eb6f7d 	.word	0x03eb6f7d
 800c554:	3fd4d612 	.word	0x3fd4d612
 800c558:	55555555 	.word	0x55555555
 800c55c:	3fc55555 	.word	0x3fc55555
 800c560:	b12e9282 	.word	0xb12e9282
 800c564:	3fb3b8c5 	.word	0x3fb3b8c5
 800c568:	1b8d0159 	.word	0x1b8d0159
 800c56c:	3fe6066c 	.word	0x3fe6066c
 800c570:	9c598ac8 	.word	0x9c598ac8
 800c574:	40002ae5 	.word	0x40002ae5
 800c578:	1c8a2d4b 	.word	0x1c8a2d4b
 800c57c:	40033a27 	.word	0x40033a27
	...
 800c588:	54442d18 	.word	0x54442d18
 800c58c:	3ff921fb 	.word	0x3ff921fb
 800c590:	3ff00000 	.word	0x3ff00000
 800c594:	3fe00000 	.word	0x3fe00000

0800c598 <__ieee754_atan2>:
 800c598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c59c:	ec57 6b11 	vmov	r6, r7, d1
 800c5a0:	4273      	negs	r3, r6
 800c5a2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800c728 <__ieee754_atan2+0x190>
 800c5a6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c5aa:	4333      	orrs	r3, r6
 800c5ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c5b0:	4573      	cmp	r3, lr
 800c5b2:	ec51 0b10 	vmov	r0, r1, d0
 800c5b6:	ee11 8a10 	vmov	r8, s2
 800c5ba:	d80a      	bhi.n	800c5d2 <__ieee754_atan2+0x3a>
 800c5bc:	4244      	negs	r4, r0
 800c5be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c5c2:	4304      	orrs	r4, r0
 800c5c4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c5c8:	4574      	cmp	r4, lr
 800c5ca:	ee10 9a10 	vmov	r9, s0
 800c5ce:	468c      	mov	ip, r1
 800c5d0:	d907      	bls.n	800c5e2 <__ieee754_atan2+0x4a>
 800c5d2:	4632      	mov	r2, r6
 800c5d4:	463b      	mov	r3, r7
 800c5d6:	f7f3 fe79 	bl	80002cc <__adddf3>
 800c5da:	ec41 0b10 	vmov	d0, r0, r1
 800c5de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5e2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c5e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c5ea:	4334      	orrs	r4, r6
 800c5ec:	d103      	bne.n	800c5f6 <__ieee754_atan2+0x5e>
 800c5ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5f2:	f001 b835 	b.w	800d660 <atan>
 800c5f6:	17bc      	asrs	r4, r7, #30
 800c5f8:	f004 0402 	and.w	r4, r4, #2
 800c5fc:	ea53 0909 	orrs.w	r9, r3, r9
 800c600:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c604:	d107      	bne.n	800c616 <__ieee754_atan2+0x7e>
 800c606:	2c02      	cmp	r4, #2
 800c608:	d060      	beq.n	800c6cc <__ieee754_atan2+0x134>
 800c60a:	2c03      	cmp	r4, #3
 800c60c:	d1e5      	bne.n	800c5da <__ieee754_atan2+0x42>
 800c60e:	a142      	add	r1, pc, #264	; (adr r1, 800c718 <__ieee754_atan2+0x180>)
 800c610:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c614:	e7e1      	b.n	800c5da <__ieee754_atan2+0x42>
 800c616:	ea52 0808 	orrs.w	r8, r2, r8
 800c61a:	d106      	bne.n	800c62a <__ieee754_atan2+0x92>
 800c61c:	f1bc 0f00 	cmp.w	ip, #0
 800c620:	da5f      	bge.n	800c6e2 <__ieee754_atan2+0x14a>
 800c622:	a13f      	add	r1, pc, #252	; (adr r1, 800c720 <__ieee754_atan2+0x188>)
 800c624:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c628:	e7d7      	b.n	800c5da <__ieee754_atan2+0x42>
 800c62a:	4572      	cmp	r2, lr
 800c62c:	d10f      	bne.n	800c64e <__ieee754_atan2+0xb6>
 800c62e:	4293      	cmp	r3, r2
 800c630:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c634:	d107      	bne.n	800c646 <__ieee754_atan2+0xae>
 800c636:	2c02      	cmp	r4, #2
 800c638:	d84c      	bhi.n	800c6d4 <__ieee754_atan2+0x13c>
 800c63a:	4b35      	ldr	r3, [pc, #212]	; (800c710 <__ieee754_atan2+0x178>)
 800c63c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c640:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c644:	e7c9      	b.n	800c5da <__ieee754_atan2+0x42>
 800c646:	2c02      	cmp	r4, #2
 800c648:	d848      	bhi.n	800c6dc <__ieee754_atan2+0x144>
 800c64a:	4b32      	ldr	r3, [pc, #200]	; (800c714 <__ieee754_atan2+0x17c>)
 800c64c:	e7f6      	b.n	800c63c <__ieee754_atan2+0xa4>
 800c64e:	4573      	cmp	r3, lr
 800c650:	d0e4      	beq.n	800c61c <__ieee754_atan2+0x84>
 800c652:	1a9b      	subs	r3, r3, r2
 800c654:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c658:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c65c:	da1e      	bge.n	800c69c <__ieee754_atan2+0x104>
 800c65e:	2f00      	cmp	r7, #0
 800c660:	da01      	bge.n	800c666 <__ieee754_atan2+0xce>
 800c662:	323c      	adds	r2, #60	; 0x3c
 800c664:	db1e      	blt.n	800c6a4 <__ieee754_atan2+0x10c>
 800c666:	4632      	mov	r2, r6
 800c668:	463b      	mov	r3, r7
 800c66a:	f7f4 f90f 	bl	800088c <__aeabi_ddiv>
 800c66e:	ec41 0b10 	vmov	d0, r0, r1
 800c672:	f001 f995 	bl	800d9a0 <fabs>
 800c676:	f000 fff3 	bl	800d660 <atan>
 800c67a:	ec51 0b10 	vmov	r0, r1, d0
 800c67e:	2c01      	cmp	r4, #1
 800c680:	d013      	beq.n	800c6aa <__ieee754_atan2+0x112>
 800c682:	2c02      	cmp	r4, #2
 800c684:	d015      	beq.n	800c6b2 <__ieee754_atan2+0x11a>
 800c686:	2c00      	cmp	r4, #0
 800c688:	d0a7      	beq.n	800c5da <__ieee754_atan2+0x42>
 800c68a:	a319      	add	r3, pc, #100	; (adr r3, 800c6f0 <__ieee754_atan2+0x158>)
 800c68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c690:	f7f3 fe1a 	bl	80002c8 <__aeabi_dsub>
 800c694:	a318      	add	r3, pc, #96	; (adr r3, 800c6f8 <__ieee754_atan2+0x160>)
 800c696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69a:	e014      	b.n	800c6c6 <__ieee754_atan2+0x12e>
 800c69c:	a118      	add	r1, pc, #96	; (adr r1, 800c700 <__ieee754_atan2+0x168>)
 800c69e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6a2:	e7ec      	b.n	800c67e <__ieee754_atan2+0xe6>
 800c6a4:	2000      	movs	r0, #0
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	e7e9      	b.n	800c67e <__ieee754_atan2+0xe6>
 800c6aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	e793      	b.n	800c5da <__ieee754_atan2+0x42>
 800c6b2:	a30f      	add	r3, pc, #60	; (adr r3, 800c6f0 <__ieee754_atan2+0x158>)
 800c6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b8:	f7f3 fe06 	bl	80002c8 <__aeabi_dsub>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	460b      	mov	r3, r1
 800c6c0:	a10d      	add	r1, pc, #52	; (adr r1, 800c6f8 <__ieee754_atan2+0x160>)
 800c6c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6c6:	f7f3 fdff 	bl	80002c8 <__aeabi_dsub>
 800c6ca:	e786      	b.n	800c5da <__ieee754_atan2+0x42>
 800c6cc:	a10a      	add	r1, pc, #40	; (adr r1, 800c6f8 <__ieee754_atan2+0x160>)
 800c6ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6d2:	e782      	b.n	800c5da <__ieee754_atan2+0x42>
 800c6d4:	a10c      	add	r1, pc, #48	; (adr r1, 800c708 <__ieee754_atan2+0x170>)
 800c6d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6da:	e77e      	b.n	800c5da <__ieee754_atan2+0x42>
 800c6dc:	2000      	movs	r0, #0
 800c6de:	2100      	movs	r1, #0
 800c6e0:	e77b      	b.n	800c5da <__ieee754_atan2+0x42>
 800c6e2:	a107      	add	r1, pc, #28	; (adr r1, 800c700 <__ieee754_atan2+0x168>)
 800c6e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6e8:	e777      	b.n	800c5da <__ieee754_atan2+0x42>
 800c6ea:	bf00      	nop
 800c6ec:	f3af 8000 	nop.w
 800c6f0:	33145c07 	.word	0x33145c07
 800c6f4:	3ca1a626 	.word	0x3ca1a626
 800c6f8:	54442d18 	.word	0x54442d18
 800c6fc:	400921fb 	.word	0x400921fb
 800c700:	54442d18 	.word	0x54442d18
 800c704:	3ff921fb 	.word	0x3ff921fb
 800c708:	54442d18 	.word	0x54442d18
 800c70c:	3fe921fb 	.word	0x3fe921fb
 800c710:	0800e340 	.word	0x0800e340
 800c714:	0800e358 	.word	0x0800e358
 800c718:	54442d18 	.word	0x54442d18
 800c71c:	c00921fb 	.word	0xc00921fb
 800c720:	54442d18 	.word	0x54442d18
 800c724:	bff921fb 	.word	0xbff921fb
 800c728:	7ff00000 	.word	0x7ff00000
 800c72c:	00000000 	.word	0x00000000

0800c730 <__ieee754_rem_pio2>:
 800c730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c734:	ed2d 8b02 	vpush	{d8}
 800c738:	ec55 4b10 	vmov	r4, r5, d0
 800c73c:	4bca      	ldr	r3, [pc, #808]	; (800ca68 <__ieee754_rem_pio2+0x338>)
 800c73e:	b08b      	sub	sp, #44	; 0x2c
 800c740:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c744:	4598      	cmp	r8, r3
 800c746:	4682      	mov	sl, r0
 800c748:	9502      	str	r5, [sp, #8]
 800c74a:	dc08      	bgt.n	800c75e <__ieee754_rem_pio2+0x2e>
 800c74c:	2200      	movs	r2, #0
 800c74e:	2300      	movs	r3, #0
 800c750:	ed80 0b00 	vstr	d0, [r0]
 800c754:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c758:	f04f 0b00 	mov.w	fp, #0
 800c75c:	e028      	b.n	800c7b0 <__ieee754_rem_pio2+0x80>
 800c75e:	4bc3      	ldr	r3, [pc, #780]	; (800ca6c <__ieee754_rem_pio2+0x33c>)
 800c760:	4598      	cmp	r8, r3
 800c762:	dc78      	bgt.n	800c856 <__ieee754_rem_pio2+0x126>
 800c764:	9b02      	ldr	r3, [sp, #8]
 800c766:	4ec2      	ldr	r6, [pc, #776]	; (800ca70 <__ieee754_rem_pio2+0x340>)
 800c768:	2b00      	cmp	r3, #0
 800c76a:	ee10 0a10 	vmov	r0, s0
 800c76e:	a3b0      	add	r3, pc, #704	; (adr r3, 800ca30 <__ieee754_rem_pio2+0x300>)
 800c770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c774:	4629      	mov	r1, r5
 800c776:	dd39      	ble.n	800c7ec <__ieee754_rem_pio2+0xbc>
 800c778:	f7f3 fda6 	bl	80002c8 <__aeabi_dsub>
 800c77c:	45b0      	cmp	r8, r6
 800c77e:	4604      	mov	r4, r0
 800c780:	460d      	mov	r5, r1
 800c782:	d01b      	beq.n	800c7bc <__ieee754_rem_pio2+0x8c>
 800c784:	a3ac      	add	r3, pc, #688	; (adr r3, 800ca38 <__ieee754_rem_pio2+0x308>)
 800c786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78a:	f7f3 fd9d 	bl	80002c8 <__aeabi_dsub>
 800c78e:	4602      	mov	r2, r0
 800c790:	460b      	mov	r3, r1
 800c792:	e9ca 2300 	strd	r2, r3, [sl]
 800c796:	4620      	mov	r0, r4
 800c798:	4629      	mov	r1, r5
 800c79a:	f7f3 fd95 	bl	80002c8 <__aeabi_dsub>
 800c79e:	a3a6      	add	r3, pc, #664	; (adr r3, 800ca38 <__ieee754_rem_pio2+0x308>)
 800c7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a4:	f7f3 fd90 	bl	80002c8 <__aeabi_dsub>
 800c7a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c7ac:	f04f 0b01 	mov.w	fp, #1
 800c7b0:	4658      	mov	r0, fp
 800c7b2:	b00b      	add	sp, #44	; 0x2c
 800c7b4:	ecbd 8b02 	vpop	{d8}
 800c7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7bc:	a3a0      	add	r3, pc, #640	; (adr r3, 800ca40 <__ieee754_rem_pio2+0x310>)
 800c7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c2:	f7f3 fd81 	bl	80002c8 <__aeabi_dsub>
 800c7c6:	a3a0      	add	r3, pc, #640	; (adr r3, 800ca48 <__ieee754_rem_pio2+0x318>)
 800c7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7cc:	4604      	mov	r4, r0
 800c7ce:	460d      	mov	r5, r1
 800c7d0:	f7f3 fd7a 	bl	80002c8 <__aeabi_dsub>
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	460b      	mov	r3, r1
 800c7d8:	e9ca 2300 	strd	r2, r3, [sl]
 800c7dc:	4620      	mov	r0, r4
 800c7de:	4629      	mov	r1, r5
 800c7e0:	f7f3 fd72 	bl	80002c8 <__aeabi_dsub>
 800c7e4:	a398      	add	r3, pc, #608	; (adr r3, 800ca48 <__ieee754_rem_pio2+0x318>)
 800c7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ea:	e7db      	b.n	800c7a4 <__ieee754_rem_pio2+0x74>
 800c7ec:	f7f3 fd6e 	bl	80002cc <__adddf3>
 800c7f0:	45b0      	cmp	r8, r6
 800c7f2:	4604      	mov	r4, r0
 800c7f4:	460d      	mov	r5, r1
 800c7f6:	d016      	beq.n	800c826 <__ieee754_rem_pio2+0xf6>
 800c7f8:	a38f      	add	r3, pc, #572	; (adr r3, 800ca38 <__ieee754_rem_pio2+0x308>)
 800c7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fe:	f7f3 fd65 	bl	80002cc <__adddf3>
 800c802:	4602      	mov	r2, r0
 800c804:	460b      	mov	r3, r1
 800c806:	e9ca 2300 	strd	r2, r3, [sl]
 800c80a:	4620      	mov	r0, r4
 800c80c:	4629      	mov	r1, r5
 800c80e:	f7f3 fd5b 	bl	80002c8 <__aeabi_dsub>
 800c812:	a389      	add	r3, pc, #548	; (adr r3, 800ca38 <__ieee754_rem_pio2+0x308>)
 800c814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c818:	f7f3 fd58 	bl	80002cc <__adddf3>
 800c81c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800c820:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c824:	e7c4      	b.n	800c7b0 <__ieee754_rem_pio2+0x80>
 800c826:	a386      	add	r3, pc, #536	; (adr r3, 800ca40 <__ieee754_rem_pio2+0x310>)
 800c828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82c:	f7f3 fd4e 	bl	80002cc <__adddf3>
 800c830:	a385      	add	r3, pc, #532	; (adr r3, 800ca48 <__ieee754_rem_pio2+0x318>)
 800c832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c836:	4604      	mov	r4, r0
 800c838:	460d      	mov	r5, r1
 800c83a:	f7f3 fd47 	bl	80002cc <__adddf3>
 800c83e:	4602      	mov	r2, r0
 800c840:	460b      	mov	r3, r1
 800c842:	e9ca 2300 	strd	r2, r3, [sl]
 800c846:	4620      	mov	r0, r4
 800c848:	4629      	mov	r1, r5
 800c84a:	f7f3 fd3d 	bl	80002c8 <__aeabi_dsub>
 800c84e:	a37e      	add	r3, pc, #504	; (adr r3, 800ca48 <__ieee754_rem_pio2+0x318>)
 800c850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c854:	e7e0      	b.n	800c818 <__ieee754_rem_pio2+0xe8>
 800c856:	4b87      	ldr	r3, [pc, #540]	; (800ca74 <__ieee754_rem_pio2+0x344>)
 800c858:	4598      	cmp	r8, r3
 800c85a:	f300 80d9 	bgt.w	800ca10 <__ieee754_rem_pio2+0x2e0>
 800c85e:	f001 f89f 	bl	800d9a0 <fabs>
 800c862:	ec55 4b10 	vmov	r4, r5, d0
 800c866:	ee10 0a10 	vmov	r0, s0
 800c86a:	a379      	add	r3, pc, #484	; (adr r3, 800ca50 <__ieee754_rem_pio2+0x320>)
 800c86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c870:	4629      	mov	r1, r5
 800c872:	f7f3 fee1 	bl	8000638 <__aeabi_dmul>
 800c876:	4b80      	ldr	r3, [pc, #512]	; (800ca78 <__ieee754_rem_pio2+0x348>)
 800c878:	2200      	movs	r2, #0
 800c87a:	f7f3 fd27 	bl	80002cc <__adddf3>
 800c87e:	f7f4 f98b 	bl	8000b98 <__aeabi_d2iz>
 800c882:	4683      	mov	fp, r0
 800c884:	f7f3 fe6e 	bl	8000564 <__aeabi_i2d>
 800c888:	4602      	mov	r2, r0
 800c88a:	460b      	mov	r3, r1
 800c88c:	ec43 2b18 	vmov	d8, r2, r3
 800c890:	a367      	add	r3, pc, #412	; (adr r3, 800ca30 <__ieee754_rem_pio2+0x300>)
 800c892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c896:	f7f3 fecf 	bl	8000638 <__aeabi_dmul>
 800c89a:	4602      	mov	r2, r0
 800c89c:	460b      	mov	r3, r1
 800c89e:	4620      	mov	r0, r4
 800c8a0:	4629      	mov	r1, r5
 800c8a2:	f7f3 fd11 	bl	80002c8 <__aeabi_dsub>
 800c8a6:	a364      	add	r3, pc, #400	; (adr r3, 800ca38 <__ieee754_rem_pio2+0x308>)
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	4606      	mov	r6, r0
 800c8ae:	460f      	mov	r7, r1
 800c8b0:	ec51 0b18 	vmov	r0, r1, d8
 800c8b4:	f7f3 fec0 	bl	8000638 <__aeabi_dmul>
 800c8b8:	f1bb 0f1f 	cmp.w	fp, #31
 800c8bc:	4604      	mov	r4, r0
 800c8be:	460d      	mov	r5, r1
 800c8c0:	dc0d      	bgt.n	800c8de <__ieee754_rem_pio2+0x1ae>
 800c8c2:	4b6e      	ldr	r3, [pc, #440]	; (800ca7c <__ieee754_rem_pio2+0x34c>)
 800c8c4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800c8c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8cc:	4543      	cmp	r3, r8
 800c8ce:	d006      	beq.n	800c8de <__ieee754_rem_pio2+0x1ae>
 800c8d0:	4622      	mov	r2, r4
 800c8d2:	462b      	mov	r3, r5
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	4639      	mov	r1, r7
 800c8d8:	f7f3 fcf6 	bl	80002c8 <__aeabi_dsub>
 800c8dc:	e00f      	b.n	800c8fe <__ieee754_rem_pio2+0x1ce>
 800c8de:	462b      	mov	r3, r5
 800c8e0:	4622      	mov	r2, r4
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	4639      	mov	r1, r7
 800c8e6:	f7f3 fcef 	bl	80002c8 <__aeabi_dsub>
 800c8ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c8ee:	9303      	str	r3, [sp, #12]
 800c8f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c8f4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800c8f8:	f1b8 0f10 	cmp.w	r8, #16
 800c8fc:	dc02      	bgt.n	800c904 <__ieee754_rem_pio2+0x1d4>
 800c8fe:	e9ca 0100 	strd	r0, r1, [sl]
 800c902:	e039      	b.n	800c978 <__ieee754_rem_pio2+0x248>
 800c904:	a34e      	add	r3, pc, #312	; (adr r3, 800ca40 <__ieee754_rem_pio2+0x310>)
 800c906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90a:	ec51 0b18 	vmov	r0, r1, d8
 800c90e:	f7f3 fe93 	bl	8000638 <__aeabi_dmul>
 800c912:	4604      	mov	r4, r0
 800c914:	460d      	mov	r5, r1
 800c916:	4602      	mov	r2, r0
 800c918:	460b      	mov	r3, r1
 800c91a:	4630      	mov	r0, r6
 800c91c:	4639      	mov	r1, r7
 800c91e:	f7f3 fcd3 	bl	80002c8 <__aeabi_dsub>
 800c922:	4602      	mov	r2, r0
 800c924:	460b      	mov	r3, r1
 800c926:	4680      	mov	r8, r0
 800c928:	4689      	mov	r9, r1
 800c92a:	4630      	mov	r0, r6
 800c92c:	4639      	mov	r1, r7
 800c92e:	f7f3 fccb 	bl	80002c8 <__aeabi_dsub>
 800c932:	4622      	mov	r2, r4
 800c934:	462b      	mov	r3, r5
 800c936:	f7f3 fcc7 	bl	80002c8 <__aeabi_dsub>
 800c93a:	a343      	add	r3, pc, #268	; (adr r3, 800ca48 <__ieee754_rem_pio2+0x318>)
 800c93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c940:	4604      	mov	r4, r0
 800c942:	460d      	mov	r5, r1
 800c944:	ec51 0b18 	vmov	r0, r1, d8
 800c948:	f7f3 fe76 	bl	8000638 <__aeabi_dmul>
 800c94c:	4622      	mov	r2, r4
 800c94e:	462b      	mov	r3, r5
 800c950:	f7f3 fcba 	bl	80002c8 <__aeabi_dsub>
 800c954:	4602      	mov	r2, r0
 800c956:	460b      	mov	r3, r1
 800c958:	4604      	mov	r4, r0
 800c95a:	460d      	mov	r5, r1
 800c95c:	4640      	mov	r0, r8
 800c95e:	4649      	mov	r1, r9
 800c960:	f7f3 fcb2 	bl	80002c8 <__aeabi_dsub>
 800c964:	9a03      	ldr	r2, [sp, #12]
 800c966:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c96a:	1ad3      	subs	r3, r2, r3
 800c96c:	2b31      	cmp	r3, #49	; 0x31
 800c96e:	dc24      	bgt.n	800c9ba <__ieee754_rem_pio2+0x28a>
 800c970:	e9ca 0100 	strd	r0, r1, [sl]
 800c974:	4646      	mov	r6, r8
 800c976:	464f      	mov	r7, r9
 800c978:	e9da 8900 	ldrd	r8, r9, [sl]
 800c97c:	4630      	mov	r0, r6
 800c97e:	4642      	mov	r2, r8
 800c980:	464b      	mov	r3, r9
 800c982:	4639      	mov	r1, r7
 800c984:	f7f3 fca0 	bl	80002c8 <__aeabi_dsub>
 800c988:	462b      	mov	r3, r5
 800c98a:	4622      	mov	r2, r4
 800c98c:	f7f3 fc9c 	bl	80002c8 <__aeabi_dsub>
 800c990:	9b02      	ldr	r3, [sp, #8]
 800c992:	2b00      	cmp	r3, #0
 800c994:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c998:	f6bf af0a 	bge.w	800c7b0 <__ieee754_rem_pio2+0x80>
 800c99c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c9a0:	f8ca 3004 	str.w	r3, [sl, #4]
 800c9a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9a8:	f8ca 8000 	str.w	r8, [sl]
 800c9ac:	f8ca 0008 	str.w	r0, [sl, #8]
 800c9b0:	f8ca 300c 	str.w	r3, [sl, #12]
 800c9b4:	f1cb 0b00 	rsb	fp, fp, #0
 800c9b8:	e6fa      	b.n	800c7b0 <__ieee754_rem_pio2+0x80>
 800c9ba:	a327      	add	r3, pc, #156	; (adr r3, 800ca58 <__ieee754_rem_pio2+0x328>)
 800c9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c0:	ec51 0b18 	vmov	r0, r1, d8
 800c9c4:	f7f3 fe38 	bl	8000638 <__aeabi_dmul>
 800c9c8:	4604      	mov	r4, r0
 800c9ca:	460d      	mov	r5, r1
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	4640      	mov	r0, r8
 800c9d2:	4649      	mov	r1, r9
 800c9d4:	f7f3 fc78 	bl	80002c8 <__aeabi_dsub>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	460b      	mov	r3, r1
 800c9dc:	4606      	mov	r6, r0
 800c9de:	460f      	mov	r7, r1
 800c9e0:	4640      	mov	r0, r8
 800c9e2:	4649      	mov	r1, r9
 800c9e4:	f7f3 fc70 	bl	80002c8 <__aeabi_dsub>
 800c9e8:	4622      	mov	r2, r4
 800c9ea:	462b      	mov	r3, r5
 800c9ec:	f7f3 fc6c 	bl	80002c8 <__aeabi_dsub>
 800c9f0:	a31b      	add	r3, pc, #108	; (adr r3, 800ca60 <__ieee754_rem_pio2+0x330>)
 800c9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f6:	4604      	mov	r4, r0
 800c9f8:	460d      	mov	r5, r1
 800c9fa:	ec51 0b18 	vmov	r0, r1, d8
 800c9fe:	f7f3 fe1b 	bl	8000638 <__aeabi_dmul>
 800ca02:	4622      	mov	r2, r4
 800ca04:	462b      	mov	r3, r5
 800ca06:	f7f3 fc5f 	bl	80002c8 <__aeabi_dsub>
 800ca0a:	4604      	mov	r4, r0
 800ca0c:	460d      	mov	r5, r1
 800ca0e:	e75f      	b.n	800c8d0 <__ieee754_rem_pio2+0x1a0>
 800ca10:	4b1b      	ldr	r3, [pc, #108]	; (800ca80 <__ieee754_rem_pio2+0x350>)
 800ca12:	4598      	cmp	r8, r3
 800ca14:	dd36      	ble.n	800ca84 <__ieee754_rem_pio2+0x354>
 800ca16:	ee10 2a10 	vmov	r2, s0
 800ca1a:	462b      	mov	r3, r5
 800ca1c:	4620      	mov	r0, r4
 800ca1e:	4629      	mov	r1, r5
 800ca20:	f7f3 fc52 	bl	80002c8 <__aeabi_dsub>
 800ca24:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ca28:	e9ca 0100 	strd	r0, r1, [sl]
 800ca2c:	e694      	b.n	800c758 <__ieee754_rem_pio2+0x28>
 800ca2e:	bf00      	nop
 800ca30:	54400000 	.word	0x54400000
 800ca34:	3ff921fb 	.word	0x3ff921fb
 800ca38:	1a626331 	.word	0x1a626331
 800ca3c:	3dd0b461 	.word	0x3dd0b461
 800ca40:	1a600000 	.word	0x1a600000
 800ca44:	3dd0b461 	.word	0x3dd0b461
 800ca48:	2e037073 	.word	0x2e037073
 800ca4c:	3ba3198a 	.word	0x3ba3198a
 800ca50:	6dc9c883 	.word	0x6dc9c883
 800ca54:	3fe45f30 	.word	0x3fe45f30
 800ca58:	2e000000 	.word	0x2e000000
 800ca5c:	3ba3198a 	.word	0x3ba3198a
 800ca60:	252049c1 	.word	0x252049c1
 800ca64:	397b839a 	.word	0x397b839a
 800ca68:	3fe921fb 	.word	0x3fe921fb
 800ca6c:	4002d97b 	.word	0x4002d97b
 800ca70:	3ff921fb 	.word	0x3ff921fb
 800ca74:	413921fb 	.word	0x413921fb
 800ca78:	3fe00000 	.word	0x3fe00000
 800ca7c:	0800e370 	.word	0x0800e370
 800ca80:	7fefffff 	.word	0x7fefffff
 800ca84:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ca88:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ca8c:	ee10 0a10 	vmov	r0, s0
 800ca90:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ca94:	ee10 6a10 	vmov	r6, s0
 800ca98:	460f      	mov	r7, r1
 800ca9a:	f7f4 f87d 	bl	8000b98 <__aeabi_d2iz>
 800ca9e:	f7f3 fd61 	bl	8000564 <__aeabi_i2d>
 800caa2:	4602      	mov	r2, r0
 800caa4:	460b      	mov	r3, r1
 800caa6:	4630      	mov	r0, r6
 800caa8:	4639      	mov	r1, r7
 800caaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800caae:	f7f3 fc0b 	bl	80002c8 <__aeabi_dsub>
 800cab2:	4b23      	ldr	r3, [pc, #140]	; (800cb40 <__ieee754_rem_pio2+0x410>)
 800cab4:	2200      	movs	r2, #0
 800cab6:	f7f3 fdbf 	bl	8000638 <__aeabi_dmul>
 800caba:	460f      	mov	r7, r1
 800cabc:	4606      	mov	r6, r0
 800cabe:	f7f4 f86b 	bl	8000b98 <__aeabi_d2iz>
 800cac2:	f7f3 fd4f 	bl	8000564 <__aeabi_i2d>
 800cac6:	4602      	mov	r2, r0
 800cac8:	460b      	mov	r3, r1
 800caca:	4630      	mov	r0, r6
 800cacc:	4639      	mov	r1, r7
 800cace:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cad2:	f7f3 fbf9 	bl	80002c8 <__aeabi_dsub>
 800cad6:	4b1a      	ldr	r3, [pc, #104]	; (800cb40 <__ieee754_rem_pio2+0x410>)
 800cad8:	2200      	movs	r2, #0
 800cada:	f7f3 fdad 	bl	8000638 <__aeabi_dmul>
 800cade:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cae2:	ad04      	add	r5, sp, #16
 800cae4:	f04f 0803 	mov.w	r8, #3
 800cae8:	46a9      	mov	r9, r5
 800caea:	2600      	movs	r6, #0
 800caec:	2700      	movs	r7, #0
 800caee:	4632      	mov	r2, r6
 800caf0:	463b      	mov	r3, r7
 800caf2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800caf6:	46c3      	mov	fp, r8
 800caf8:	3d08      	subs	r5, #8
 800cafa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cafe:	f7f4 f803 	bl	8000b08 <__aeabi_dcmpeq>
 800cb02:	2800      	cmp	r0, #0
 800cb04:	d1f3      	bne.n	800caee <__ieee754_rem_pio2+0x3be>
 800cb06:	4b0f      	ldr	r3, [pc, #60]	; (800cb44 <__ieee754_rem_pio2+0x414>)
 800cb08:	9301      	str	r3, [sp, #4]
 800cb0a:	2302      	movs	r3, #2
 800cb0c:	9300      	str	r3, [sp, #0]
 800cb0e:	4622      	mov	r2, r4
 800cb10:	465b      	mov	r3, fp
 800cb12:	4651      	mov	r1, sl
 800cb14:	4648      	mov	r0, r9
 800cb16:	f000 f993 	bl	800ce40 <__kernel_rem_pio2>
 800cb1a:	9b02      	ldr	r3, [sp, #8]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	4683      	mov	fp, r0
 800cb20:	f6bf ae46 	bge.w	800c7b0 <__ieee754_rem_pio2+0x80>
 800cb24:	e9da 2100 	ldrd	r2, r1, [sl]
 800cb28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb2c:	e9ca 2300 	strd	r2, r3, [sl]
 800cb30:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800cb34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb38:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800cb3c:	e73a      	b.n	800c9b4 <__ieee754_rem_pio2+0x284>
 800cb3e:	bf00      	nop
 800cb40:	41700000 	.word	0x41700000
 800cb44:	0800e3f0 	.word	0x0800e3f0

0800cb48 <__ieee754_sqrt>:
 800cb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb4c:	ec55 4b10 	vmov	r4, r5, d0
 800cb50:	4e55      	ldr	r6, [pc, #340]	; (800cca8 <__ieee754_sqrt+0x160>)
 800cb52:	43ae      	bics	r6, r5
 800cb54:	ee10 0a10 	vmov	r0, s0
 800cb58:	ee10 3a10 	vmov	r3, s0
 800cb5c:	462a      	mov	r2, r5
 800cb5e:	4629      	mov	r1, r5
 800cb60:	d110      	bne.n	800cb84 <__ieee754_sqrt+0x3c>
 800cb62:	ee10 2a10 	vmov	r2, s0
 800cb66:	462b      	mov	r3, r5
 800cb68:	f7f3 fd66 	bl	8000638 <__aeabi_dmul>
 800cb6c:	4602      	mov	r2, r0
 800cb6e:	460b      	mov	r3, r1
 800cb70:	4620      	mov	r0, r4
 800cb72:	4629      	mov	r1, r5
 800cb74:	f7f3 fbaa 	bl	80002cc <__adddf3>
 800cb78:	4604      	mov	r4, r0
 800cb7a:	460d      	mov	r5, r1
 800cb7c:	ec45 4b10 	vmov	d0, r4, r5
 800cb80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb84:	2d00      	cmp	r5, #0
 800cb86:	dc10      	bgt.n	800cbaa <__ieee754_sqrt+0x62>
 800cb88:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cb8c:	4330      	orrs	r0, r6
 800cb8e:	d0f5      	beq.n	800cb7c <__ieee754_sqrt+0x34>
 800cb90:	b15d      	cbz	r5, 800cbaa <__ieee754_sqrt+0x62>
 800cb92:	ee10 2a10 	vmov	r2, s0
 800cb96:	462b      	mov	r3, r5
 800cb98:	ee10 0a10 	vmov	r0, s0
 800cb9c:	f7f3 fb94 	bl	80002c8 <__aeabi_dsub>
 800cba0:	4602      	mov	r2, r0
 800cba2:	460b      	mov	r3, r1
 800cba4:	f7f3 fe72 	bl	800088c <__aeabi_ddiv>
 800cba8:	e7e6      	b.n	800cb78 <__ieee754_sqrt+0x30>
 800cbaa:	1512      	asrs	r2, r2, #20
 800cbac:	d074      	beq.n	800cc98 <__ieee754_sqrt+0x150>
 800cbae:	07d4      	lsls	r4, r2, #31
 800cbb0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cbb4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800cbb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800cbbc:	bf5e      	ittt	pl
 800cbbe:	0fda      	lsrpl	r2, r3, #31
 800cbc0:	005b      	lslpl	r3, r3, #1
 800cbc2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800cbc6:	2400      	movs	r4, #0
 800cbc8:	0fda      	lsrs	r2, r3, #31
 800cbca:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800cbce:	107f      	asrs	r7, r7, #1
 800cbd0:	005b      	lsls	r3, r3, #1
 800cbd2:	2516      	movs	r5, #22
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cbda:	1886      	adds	r6, r0, r2
 800cbdc:	428e      	cmp	r6, r1
 800cbde:	bfde      	ittt	le
 800cbe0:	1b89      	suble	r1, r1, r6
 800cbe2:	18b0      	addle	r0, r6, r2
 800cbe4:	18a4      	addle	r4, r4, r2
 800cbe6:	0049      	lsls	r1, r1, #1
 800cbe8:	3d01      	subs	r5, #1
 800cbea:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800cbee:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800cbf2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cbf6:	d1f0      	bne.n	800cbda <__ieee754_sqrt+0x92>
 800cbf8:	462a      	mov	r2, r5
 800cbfa:	f04f 0e20 	mov.w	lr, #32
 800cbfe:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cc02:	4281      	cmp	r1, r0
 800cc04:	eb06 0c05 	add.w	ip, r6, r5
 800cc08:	dc02      	bgt.n	800cc10 <__ieee754_sqrt+0xc8>
 800cc0a:	d113      	bne.n	800cc34 <__ieee754_sqrt+0xec>
 800cc0c:	459c      	cmp	ip, r3
 800cc0e:	d811      	bhi.n	800cc34 <__ieee754_sqrt+0xec>
 800cc10:	f1bc 0f00 	cmp.w	ip, #0
 800cc14:	eb0c 0506 	add.w	r5, ip, r6
 800cc18:	da43      	bge.n	800cca2 <__ieee754_sqrt+0x15a>
 800cc1a:	2d00      	cmp	r5, #0
 800cc1c:	db41      	blt.n	800cca2 <__ieee754_sqrt+0x15a>
 800cc1e:	f100 0801 	add.w	r8, r0, #1
 800cc22:	1a09      	subs	r1, r1, r0
 800cc24:	459c      	cmp	ip, r3
 800cc26:	bf88      	it	hi
 800cc28:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800cc2c:	eba3 030c 	sub.w	r3, r3, ip
 800cc30:	4432      	add	r2, r6
 800cc32:	4640      	mov	r0, r8
 800cc34:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800cc38:	f1be 0e01 	subs.w	lr, lr, #1
 800cc3c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800cc40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc44:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cc48:	d1db      	bne.n	800cc02 <__ieee754_sqrt+0xba>
 800cc4a:	430b      	orrs	r3, r1
 800cc4c:	d006      	beq.n	800cc5c <__ieee754_sqrt+0x114>
 800cc4e:	1c50      	adds	r0, r2, #1
 800cc50:	bf13      	iteet	ne
 800cc52:	3201      	addne	r2, #1
 800cc54:	3401      	addeq	r4, #1
 800cc56:	4672      	moveq	r2, lr
 800cc58:	f022 0201 	bicne.w	r2, r2, #1
 800cc5c:	1063      	asrs	r3, r4, #1
 800cc5e:	0852      	lsrs	r2, r2, #1
 800cc60:	07e1      	lsls	r1, r4, #31
 800cc62:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cc66:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cc6a:	bf48      	it	mi
 800cc6c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800cc70:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800cc74:	4614      	mov	r4, r2
 800cc76:	e781      	b.n	800cb7c <__ieee754_sqrt+0x34>
 800cc78:	0ad9      	lsrs	r1, r3, #11
 800cc7a:	3815      	subs	r0, #21
 800cc7c:	055b      	lsls	r3, r3, #21
 800cc7e:	2900      	cmp	r1, #0
 800cc80:	d0fa      	beq.n	800cc78 <__ieee754_sqrt+0x130>
 800cc82:	02cd      	lsls	r5, r1, #11
 800cc84:	d50a      	bpl.n	800cc9c <__ieee754_sqrt+0x154>
 800cc86:	f1c2 0420 	rsb	r4, r2, #32
 800cc8a:	fa23 f404 	lsr.w	r4, r3, r4
 800cc8e:	1e55      	subs	r5, r2, #1
 800cc90:	4093      	lsls	r3, r2
 800cc92:	4321      	orrs	r1, r4
 800cc94:	1b42      	subs	r2, r0, r5
 800cc96:	e78a      	b.n	800cbae <__ieee754_sqrt+0x66>
 800cc98:	4610      	mov	r0, r2
 800cc9a:	e7f0      	b.n	800cc7e <__ieee754_sqrt+0x136>
 800cc9c:	0049      	lsls	r1, r1, #1
 800cc9e:	3201      	adds	r2, #1
 800cca0:	e7ef      	b.n	800cc82 <__ieee754_sqrt+0x13a>
 800cca2:	4680      	mov	r8, r0
 800cca4:	e7bd      	b.n	800cc22 <__ieee754_sqrt+0xda>
 800cca6:	bf00      	nop
 800cca8:	7ff00000 	.word	0x7ff00000
 800ccac:	00000000 	.word	0x00000000

0800ccb0 <__kernel_cos>:
 800ccb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb4:	ec57 6b10 	vmov	r6, r7, d0
 800ccb8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ccbc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ccc0:	ed8d 1b00 	vstr	d1, [sp]
 800ccc4:	da07      	bge.n	800ccd6 <__kernel_cos+0x26>
 800ccc6:	ee10 0a10 	vmov	r0, s0
 800ccca:	4639      	mov	r1, r7
 800cccc:	f7f3 ff64 	bl	8000b98 <__aeabi_d2iz>
 800ccd0:	2800      	cmp	r0, #0
 800ccd2:	f000 8088 	beq.w	800cde6 <__kernel_cos+0x136>
 800ccd6:	4632      	mov	r2, r6
 800ccd8:	463b      	mov	r3, r7
 800ccda:	4630      	mov	r0, r6
 800ccdc:	4639      	mov	r1, r7
 800ccde:	f7f3 fcab 	bl	8000638 <__aeabi_dmul>
 800cce2:	4b51      	ldr	r3, [pc, #324]	; (800ce28 <__kernel_cos+0x178>)
 800cce4:	2200      	movs	r2, #0
 800cce6:	4604      	mov	r4, r0
 800cce8:	460d      	mov	r5, r1
 800ccea:	f7f3 fca5 	bl	8000638 <__aeabi_dmul>
 800ccee:	a340      	add	r3, pc, #256	; (adr r3, 800cdf0 <__kernel_cos+0x140>)
 800ccf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf4:	4682      	mov	sl, r0
 800ccf6:	468b      	mov	fp, r1
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	4629      	mov	r1, r5
 800ccfc:	f7f3 fc9c 	bl	8000638 <__aeabi_dmul>
 800cd00:	a33d      	add	r3, pc, #244	; (adr r3, 800cdf8 <__kernel_cos+0x148>)
 800cd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd06:	f7f3 fae1 	bl	80002cc <__adddf3>
 800cd0a:	4622      	mov	r2, r4
 800cd0c:	462b      	mov	r3, r5
 800cd0e:	f7f3 fc93 	bl	8000638 <__aeabi_dmul>
 800cd12:	a33b      	add	r3, pc, #236	; (adr r3, 800ce00 <__kernel_cos+0x150>)
 800cd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd18:	f7f3 fad6 	bl	80002c8 <__aeabi_dsub>
 800cd1c:	4622      	mov	r2, r4
 800cd1e:	462b      	mov	r3, r5
 800cd20:	f7f3 fc8a 	bl	8000638 <__aeabi_dmul>
 800cd24:	a338      	add	r3, pc, #224	; (adr r3, 800ce08 <__kernel_cos+0x158>)
 800cd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd2a:	f7f3 facf 	bl	80002cc <__adddf3>
 800cd2e:	4622      	mov	r2, r4
 800cd30:	462b      	mov	r3, r5
 800cd32:	f7f3 fc81 	bl	8000638 <__aeabi_dmul>
 800cd36:	a336      	add	r3, pc, #216	; (adr r3, 800ce10 <__kernel_cos+0x160>)
 800cd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3c:	f7f3 fac4 	bl	80002c8 <__aeabi_dsub>
 800cd40:	4622      	mov	r2, r4
 800cd42:	462b      	mov	r3, r5
 800cd44:	f7f3 fc78 	bl	8000638 <__aeabi_dmul>
 800cd48:	a333      	add	r3, pc, #204	; (adr r3, 800ce18 <__kernel_cos+0x168>)
 800cd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4e:	f7f3 fabd 	bl	80002cc <__adddf3>
 800cd52:	4622      	mov	r2, r4
 800cd54:	462b      	mov	r3, r5
 800cd56:	f7f3 fc6f 	bl	8000638 <__aeabi_dmul>
 800cd5a:	4622      	mov	r2, r4
 800cd5c:	462b      	mov	r3, r5
 800cd5e:	f7f3 fc6b 	bl	8000638 <__aeabi_dmul>
 800cd62:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd66:	4604      	mov	r4, r0
 800cd68:	460d      	mov	r5, r1
 800cd6a:	4630      	mov	r0, r6
 800cd6c:	4639      	mov	r1, r7
 800cd6e:	f7f3 fc63 	bl	8000638 <__aeabi_dmul>
 800cd72:	460b      	mov	r3, r1
 800cd74:	4602      	mov	r2, r0
 800cd76:	4629      	mov	r1, r5
 800cd78:	4620      	mov	r0, r4
 800cd7a:	f7f3 faa5 	bl	80002c8 <__aeabi_dsub>
 800cd7e:	4b2b      	ldr	r3, [pc, #172]	; (800ce2c <__kernel_cos+0x17c>)
 800cd80:	4598      	cmp	r8, r3
 800cd82:	4606      	mov	r6, r0
 800cd84:	460f      	mov	r7, r1
 800cd86:	dc10      	bgt.n	800cdaa <__kernel_cos+0xfa>
 800cd88:	4602      	mov	r2, r0
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	4650      	mov	r0, sl
 800cd8e:	4659      	mov	r1, fp
 800cd90:	f7f3 fa9a 	bl	80002c8 <__aeabi_dsub>
 800cd94:	460b      	mov	r3, r1
 800cd96:	4926      	ldr	r1, [pc, #152]	; (800ce30 <__kernel_cos+0x180>)
 800cd98:	4602      	mov	r2, r0
 800cd9a:	2000      	movs	r0, #0
 800cd9c:	f7f3 fa94 	bl	80002c8 <__aeabi_dsub>
 800cda0:	ec41 0b10 	vmov	d0, r0, r1
 800cda4:	b003      	add	sp, #12
 800cda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdaa:	4b22      	ldr	r3, [pc, #136]	; (800ce34 <__kernel_cos+0x184>)
 800cdac:	4920      	ldr	r1, [pc, #128]	; (800ce30 <__kernel_cos+0x180>)
 800cdae:	4598      	cmp	r8, r3
 800cdb0:	bfcc      	ite	gt
 800cdb2:	4d21      	ldrgt	r5, [pc, #132]	; (800ce38 <__kernel_cos+0x188>)
 800cdb4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800cdb8:	2400      	movs	r4, #0
 800cdba:	4622      	mov	r2, r4
 800cdbc:	462b      	mov	r3, r5
 800cdbe:	2000      	movs	r0, #0
 800cdc0:	f7f3 fa82 	bl	80002c8 <__aeabi_dsub>
 800cdc4:	4622      	mov	r2, r4
 800cdc6:	4680      	mov	r8, r0
 800cdc8:	4689      	mov	r9, r1
 800cdca:	462b      	mov	r3, r5
 800cdcc:	4650      	mov	r0, sl
 800cdce:	4659      	mov	r1, fp
 800cdd0:	f7f3 fa7a 	bl	80002c8 <__aeabi_dsub>
 800cdd4:	4632      	mov	r2, r6
 800cdd6:	463b      	mov	r3, r7
 800cdd8:	f7f3 fa76 	bl	80002c8 <__aeabi_dsub>
 800cddc:	4602      	mov	r2, r0
 800cdde:	460b      	mov	r3, r1
 800cde0:	4640      	mov	r0, r8
 800cde2:	4649      	mov	r1, r9
 800cde4:	e7da      	b.n	800cd9c <__kernel_cos+0xec>
 800cde6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ce20 <__kernel_cos+0x170>
 800cdea:	e7db      	b.n	800cda4 <__kernel_cos+0xf4>
 800cdec:	f3af 8000 	nop.w
 800cdf0:	be8838d4 	.word	0xbe8838d4
 800cdf4:	bda8fae9 	.word	0xbda8fae9
 800cdf8:	bdb4b1c4 	.word	0xbdb4b1c4
 800cdfc:	3e21ee9e 	.word	0x3e21ee9e
 800ce00:	809c52ad 	.word	0x809c52ad
 800ce04:	3e927e4f 	.word	0x3e927e4f
 800ce08:	19cb1590 	.word	0x19cb1590
 800ce0c:	3efa01a0 	.word	0x3efa01a0
 800ce10:	16c15177 	.word	0x16c15177
 800ce14:	3f56c16c 	.word	0x3f56c16c
 800ce18:	5555554c 	.word	0x5555554c
 800ce1c:	3fa55555 	.word	0x3fa55555
 800ce20:	00000000 	.word	0x00000000
 800ce24:	3ff00000 	.word	0x3ff00000
 800ce28:	3fe00000 	.word	0x3fe00000
 800ce2c:	3fd33332 	.word	0x3fd33332
 800ce30:	3ff00000 	.word	0x3ff00000
 800ce34:	3fe90000 	.word	0x3fe90000
 800ce38:	3fd20000 	.word	0x3fd20000
 800ce3c:	00000000 	.word	0x00000000

0800ce40 <__kernel_rem_pio2>:
 800ce40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce44:	ed2d 8b02 	vpush	{d8}
 800ce48:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ce4c:	f112 0f14 	cmn.w	r2, #20
 800ce50:	9308      	str	r3, [sp, #32]
 800ce52:	9101      	str	r1, [sp, #4]
 800ce54:	4bc4      	ldr	r3, [pc, #784]	; (800d168 <__kernel_rem_pio2+0x328>)
 800ce56:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ce58:	900b      	str	r0, [sp, #44]	; 0x2c
 800ce5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce5e:	9302      	str	r3, [sp, #8]
 800ce60:	9b08      	ldr	r3, [sp, #32]
 800ce62:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ce66:	bfa8      	it	ge
 800ce68:	1ed4      	subge	r4, r2, #3
 800ce6a:	9306      	str	r3, [sp, #24]
 800ce6c:	bfb2      	itee	lt
 800ce6e:	2400      	movlt	r4, #0
 800ce70:	2318      	movge	r3, #24
 800ce72:	fb94 f4f3 	sdivge	r4, r4, r3
 800ce76:	f06f 0317 	mvn.w	r3, #23
 800ce7a:	fb04 3303 	mla	r3, r4, r3, r3
 800ce7e:	eb03 0a02 	add.w	sl, r3, r2
 800ce82:	9b02      	ldr	r3, [sp, #8]
 800ce84:	9a06      	ldr	r2, [sp, #24]
 800ce86:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800d158 <__kernel_rem_pio2+0x318>
 800ce8a:	eb03 0802 	add.w	r8, r3, r2
 800ce8e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ce90:	1aa7      	subs	r7, r4, r2
 800ce92:	ae22      	add	r6, sp, #136	; 0x88
 800ce94:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ce98:	2500      	movs	r5, #0
 800ce9a:	4545      	cmp	r5, r8
 800ce9c:	dd13      	ble.n	800cec6 <__kernel_rem_pio2+0x86>
 800ce9e:	9b08      	ldr	r3, [sp, #32]
 800cea0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800d158 <__kernel_rem_pio2+0x318>
 800cea4:	aa22      	add	r2, sp, #136	; 0x88
 800cea6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ceaa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ceae:	f04f 0800 	mov.w	r8, #0
 800ceb2:	9b02      	ldr	r3, [sp, #8]
 800ceb4:	4598      	cmp	r8, r3
 800ceb6:	dc2f      	bgt.n	800cf18 <__kernel_rem_pio2+0xd8>
 800ceb8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800cebc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800cec0:	462f      	mov	r7, r5
 800cec2:	2600      	movs	r6, #0
 800cec4:	e01b      	b.n	800cefe <__kernel_rem_pio2+0xbe>
 800cec6:	42ef      	cmn	r7, r5
 800cec8:	d407      	bmi.n	800ceda <__kernel_rem_pio2+0x9a>
 800ceca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cece:	f7f3 fb49 	bl	8000564 <__aeabi_i2d>
 800ced2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ced6:	3501      	adds	r5, #1
 800ced8:	e7df      	b.n	800ce9a <__kernel_rem_pio2+0x5a>
 800ceda:	ec51 0b18 	vmov	r0, r1, d8
 800cede:	e7f8      	b.n	800ced2 <__kernel_rem_pio2+0x92>
 800cee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cee4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800cee8:	f7f3 fba6 	bl	8000638 <__aeabi_dmul>
 800ceec:	4602      	mov	r2, r0
 800ceee:	460b      	mov	r3, r1
 800cef0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cef4:	f7f3 f9ea 	bl	80002cc <__adddf3>
 800cef8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cefc:	3601      	adds	r6, #1
 800cefe:	9b06      	ldr	r3, [sp, #24]
 800cf00:	429e      	cmp	r6, r3
 800cf02:	f1a7 0708 	sub.w	r7, r7, #8
 800cf06:	ddeb      	ble.n	800cee0 <__kernel_rem_pio2+0xa0>
 800cf08:	ed9d 7b04 	vldr	d7, [sp, #16]
 800cf0c:	f108 0801 	add.w	r8, r8, #1
 800cf10:	ecab 7b02 	vstmia	fp!, {d7}
 800cf14:	3508      	adds	r5, #8
 800cf16:	e7cc      	b.n	800ceb2 <__kernel_rem_pio2+0x72>
 800cf18:	9b02      	ldr	r3, [sp, #8]
 800cf1a:	aa0e      	add	r2, sp, #56	; 0x38
 800cf1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf20:	930d      	str	r3, [sp, #52]	; 0x34
 800cf22:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800cf24:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cf28:	9c02      	ldr	r4, [sp, #8]
 800cf2a:	930c      	str	r3, [sp, #48]	; 0x30
 800cf2c:	00e3      	lsls	r3, r4, #3
 800cf2e:	930a      	str	r3, [sp, #40]	; 0x28
 800cf30:	ab9a      	add	r3, sp, #616	; 0x268
 800cf32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cf36:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800cf3a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800cf3e:	ab72      	add	r3, sp, #456	; 0x1c8
 800cf40:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800cf44:	46c3      	mov	fp, r8
 800cf46:	46a1      	mov	r9, r4
 800cf48:	f1b9 0f00 	cmp.w	r9, #0
 800cf4c:	f1a5 0508 	sub.w	r5, r5, #8
 800cf50:	dc77      	bgt.n	800d042 <__kernel_rem_pio2+0x202>
 800cf52:	ec47 6b10 	vmov	d0, r6, r7
 800cf56:	4650      	mov	r0, sl
 800cf58:	f000 fdb6 	bl	800dac8 <scalbn>
 800cf5c:	ec57 6b10 	vmov	r6, r7, d0
 800cf60:	2200      	movs	r2, #0
 800cf62:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cf66:	ee10 0a10 	vmov	r0, s0
 800cf6a:	4639      	mov	r1, r7
 800cf6c:	f7f3 fb64 	bl	8000638 <__aeabi_dmul>
 800cf70:	ec41 0b10 	vmov	d0, r0, r1
 800cf74:	f000 fd20 	bl	800d9b8 <floor>
 800cf78:	4b7c      	ldr	r3, [pc, #496]	; (800d16c <__kernel_rem_pio2+0x32c>)
 800cf7a:	ec51 0b10 	vmov	r0, r1, d0
 800cf7e:	2200      	movs	r2, #0
 800cf80:	f7f3 fb5a 	bl	8000638 <__aeabi_dmul>
 800cf84:	4602      	mov	r2, r0
 800cf86:	460b      	mov	r3, r1
 800cf88:	4630      	mov	r0, r6
 800cf8a:	4639      	mov	r1, r7
 800cf8c:	f7f3 f99c 	bl	80002c8 <__aeabi_dsub>
 800cf90:	460f      	mov	r7, r1
 800cf92:	4606      	mov	r6, r0
 800cf94:	f7f3 fe00 	bl	8000b98 <__aeabi_d2iz>
 800cf98:	9004      	str	r0, [sp, #16]
 800cf9a:	f7f3 fae3 	bl	8000564 <__aeabi_i2d>
 800cf9e:	4602      	mov	r2, r0
 800cfa0:	460b      	mov	r3, r1
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	4639      	mov	r1, r7
 800cfa6:	f7f3 f98f 	bl	80002c8 <__aeabi_dsub>
 800cfaa:	f1ba 0f00 	cmp.w	sl, #0
 800cfae:	4606      	mov	r6, r0
 800cfb0:	460f      	mov	r7, r1
 800cfb2:	dd6d      	ble.n	800d090 <__kernel_rem_pio2+0x250>
 800cfb4:	1e62      	subs	r2, r4, #1
 800cfb6:	ab0e      	add	r3, sp, #56	; 0x38
 800cfb8:	9d04      	ldr	r5, [sp, #16]
 800cfba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cfbe:	f1ca 0118 	rsb	r1, sl, #24
 800cfc2:	fa40 f301 	asr.w	r3, r0, r1
 800cfc6:	441d      	add	r5, r3
 800cfc8:	408b      	lsls	r3, r1
 800cfca:	1ac0      	subs	r0, r0, r3
 800cfcc:	ab0e      	add	r3, sp, #56	; 0x38
 800cfce:	9504      	str	r5, [sp, #16]
 800cfd0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800cfd4:	f1ca 0317 	rsb	r3, sl, #23
 800cfd8:	fa40 fb03 	asr.w	fp, r0, r3
 800cfdc:	f1bb 0f00 	cmp.w	fp, #0
 800cfe0:	dd65      	ble.n	800d0ae <__kernel_rem_pio2+0x26e>
 800cfe2:	9b04      	ldr	r3, [sp, #16]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	9304      	str	r3, [sp, #16]
 800cfea:	4615      	mov	r5, r2
 800cfec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cff0:	4294      	cmp	r4, r2
 800cff2:	f300 809c 	bgt.w	800d12e <__kernel_rem_pio2+0x2ee>
 800cff6:	f1ba 0f00 	cmp.w	sl, #0
 800cffa:	dd07      	ble.n	800d00c <__kernel_rem_pio2+0x1cc>
 800cffc:	f1ba 0f01 	cmp.w	sl, #1
 800d000:	f000 80c0 	beq.w	800d184 <__kernel_rem_pio2+0x344>
 800d004:	f1ba 0f02 	cmp.w	sl, #2
 800d008:	f000 80c6 	beq.w	800d198 <__kernel_rem_pio2+0x358>
 800d00c:	f1bb 0f02 	cmp.w	fp, #2
 800d010:	d14d      	bne.n	800d0ae <__kernel_rem_pio2+0x26e>
 800d012:	4632      	mov	r2, r6
 800d014:	463b      	mov	r3, r7
 800d016:	4956      	ldr	r1, [pc, #344]	; (800d170 <__kernel_rem_pio2+0x330>)
 800d018:	2000      	movs	r0, #0
 800d01a:	f7f3 f955 	bl	80002c8 <__aeabi_dsub>
 800d01e:	4606      	mov	r6, r0
 800d020:	460f      	mov	r7, r1
 800d022:	2d00      	cmp	r5, #0
 800d024:	d043      	beq.n	800d0ae <__kernel_rem_pio2+0x26e>
 800d026:	4650      	mov	r0, sl
 800d028:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800d160 <__kernel_rem_pio2+0x320>
 800d02c:	f000 fd4c 	bl	800dac8 <scalbn>
 800d030:	4630      	mov	r0, r6
 800d032:	4639      	mov	r1, r7
 800d034:	ec53 2b10 	vmov	r2, r3, d0
 800d038:	f7f3 f946 	bl	80002c8 <__aeabi_dsub>
 800d03c:	4606      	mov	r6, r0
 800d03e:	460f      	mov	r7, r1
 800d040:	e035      	b.n	800d0ae <__kernel_rem_pio2+0x26e>
 800d042:	4b4c      	ldr	r3, [pc, #304]	; (800d174 <__kernel_rem_pio2+0x334>)
 800d044:	2200      	movs	r2, #0
 800d046:	4630      	mov	r0, r6
 800d048:	4639      	mov	r1, r7
 800d04a:	f7f3 faf5 	bl	8000638 <__aeabi_dmul>
 800d04e:	f7f3 fda3 	bl	8000b98 <__aeabi_d2iz>
 800d052:	f7f3 fa87 	bl	8000564 <__aeabi_i2d>
 800d056:	4602      	mov	r2, r0
 800d058:	460b      	mov	r3, r1
 800d05a:	ec43 2b18 	vmov	d8, r2, r3
 800d05e:	4b46      	ldr	r3, [pc, #280]	; (800d178 <__kernel_rem_pio2+0x338>)
 800d060:	2200      	movs	r2, #0
 800d062:	f7f3 fae9 	bl	8000638 <__aeabi_dmul>
 800d066:	4602      	mov	r2, r0
 800d068:	460b      	mov	r3, r1
 800d06a:	4630      	mov	r0, r6
 800d06c:	4639      	mov	r1, r7
 800d06e:	f7f3 f92b 	bl	80002c8 <__aeabi_dsub>
 800d072:	f7f3 fd91 	bl	8000b98 <__aeabi_d2iz>
 800d076:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d07a:	f84b 0b04 	str.w	r0, [fp], #4
 800d07e:	ec51 0b18 	vmov	r0, r1, d8
 800d082:	f7f3 f923 	bl	80002cc <__adddf3>
 800d086:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d08a:	4606      	mov	r6, r0
 800d08c:	460f      	mov	r7, r1
 800d08e:	e75b      	b.n	800cf48 <__kernel_rem_pio2+0x108>
 800d090:	d106      	bne.n	800d0a0 <__kernel_rem_pio2+0x260>
 800d092:	1e63      	subs	r3, r4, #1
 800d094:	aa0e      	add	r2, sp, #56	; 0x38
 800d096:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d09a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800d09e:	e79d      	b.n	800cfdc <__kernel_rem_pio2+0x19c>
 800d0a0:	4b36      	ldr	r3, [pc, #216]	; (800d17c <__kernel_rem_pio2+0x33c>)
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	f7f3 fd4e 	bl	8000b44 <__aeabi_dcmpge>
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	d13d      	bne.n	800d128 <__kernel_rem_pio2+0x2e8>
 800d0ac:	4683      	mov	fp, r0
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	4630      	mov	r0, r6
 800d0b4:	4639      	mov	r1, r7
 800d0b6:	f7f3 fd27 	bl	8000b08 <__aeabi_dcmpeq>
 800d0ba:	2800      	cmp	r0, #0
 800d0bc:	f000 80c0 	beq.w	800d240 <__kernel_rem_pio2+0x400>
 800d0c0:	1e65      	subs	r5, r4, #1
 800d0c2:	462b      	mov	r3, r5
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	9902      	ldr	r1, [sp, #8]
 800d0c8:	428b      	cmp	r3, r1
 800d0ca:	da6c      	bge.n	800d1a6 <__kernel_rem_pio2+0x366>
 800d0cc:	2a00      	cmp	r2, #0
 800d0ce:	f000 8089 	beq.w	800d1e4 <__kernel_rem_pio2+0x3a4>
 800d0d2:	ab0e      	add	r3, sp, #56	; 0x38
 800d0d4:	f1aa 0a18 	sub.w	sl, sl, #24
 800d0d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	f000 80ad 	beq.w	800d23c <__kernel_rem_pio2+0x3fc>
 800d0e2:	4650      	mov	r0, sl
 800d0e4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800d160 <__kernel_rem_pio2+0x320>
 800d0e8:	f000 fcee 	bl	800dac8 <scalbn>
 800d0ec:	ab9a      	add	r3, sp, #616	; 0x268
 800d0ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d0f2:	ec57 6b10 	vmov	r6, r7, d0
 800d0f6:	00ec      	lsls	r4, r5, #3
 800d0f8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800d0fc:	46aa      	mov	sl, r5
 800d0fe:	f1ba 0f00 	cmp.w	sl, #0
 800d102:	f280 80d6 	bge.w	800d2b2 <__kernel_rem_pio2+0x472>
 800d106:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800d158 <__kernel_rem_pio2+0x318>
 800d10a:	462e      	mov	r6, r5
 800d10c:	2e00      	cmp	r6, #0
 800d10e:	f2c0 8104 	blt.w	800d31a <__kernel_rem_pio2+0x4da>
 800d112:	ab72      	add	r3, sp, #456	; 0x1c8
 800d114:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d118:	f8df a064 	ldr.w	sl, [pc, #100]	; 800d180 <__kernel_rem_pio2+0x340>
 800d11c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800d120:	f04f 0800 	mov.w	r8, #0
 800d124:	1baf      	subs	r7, r5, r6
 800d126:	e0ea      	b.n	800d2fe <__kernel_rem_pio2+0x4be>
 800d128:	f04f 0b02 	mov.w	fp, #2
 800d12c:	e759      	b.n	800cfe2 <__kernel_rem_pio2+0x1a2>
 800d12e:	f8d8 3000 	ldr.w	r3, [r8]
 800d132:	b955      	cbnz	r5, 800d14a <__kernel_rem_pio2+0x30a>
 800d134:	b123      	cbz	r3, 800d140 <__kernel_rem_pio2+0x300>
 800d136:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d13a:	f8c8 3000 	str.w	r3, [r8]
 800d13e:	2301      	movs	r3, #1
 800d140:	3201      	adds	r2, #1
 800d142:	f108 0804 	add.w	r8, r8, #4
 800d146:	461d      	mov	r5, r3
 800d148:	e752      	b.n	800cff0 <__kernel_rem_pio2+0x1b0>
 800d14a:	1acb      	subs	r3, r1, r3
 800d14c:	f8c8 3000 	str.w	r3, [r8]
 800d150:	462b      	mov	r3, r5
 800d152:	e7f5      	b.n	800d140 <__kernel_rem_pio2+0x300>
 800d154:	f3af 8000 	nop.w
	...
 800d164:	3ff00000 	.word	0x3ff00000
 800d168:	0800e538 	.word	0x0800e538
 800d16c:	40200000 	.word	0x40200000
 800d170:	3ff00000 	.word	0x3ff00000
 800d174:	3e700000 	.word	0x3e700000
 800d178:	41700000 	.word	0x41700000
 800d17c:	3fe00000 	.word	0x3fe00000
 800d180:	0800e4f8 	.word	0x0800e4f8
 800d184:	1e62      	subs	r2, r4, #1
 800d186:	ab0e      	add	r3, sp, #56	; 0x38
 800d188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d18c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d190:	a90e      	add	r1, sp, #56	; 0x38
 800d192:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d196:	e739      	b.n	800d00c <__kernel_rem_pio2+0x1cc>
 800d198:	1e62      	subs	r2, r4, #1
 800d19a:	ab0e      	add	r3, sp, #56	; 0x38
 800d19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d1a4:	e7f4      	b.n	800d190 <__kernel_rem_pio2+0x350>
 800d1a6:	a90e      	add	r1, sp, #56	; 0x38
 800d1a8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d1ac:	3b01      	subs	r3, #1
 800d1ae:	430a      	orrs	r2, r1
 800d1b0:	e789      	b.n	800d0c6 <__kernel_rem_pio2+0x286>
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d1b8:	2900      	cmp	r1, #0
 800d1ba:	d0fa      	beq.n	800d1b2 <__kernel_rem_pio2+0x372>
 800d1bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1be:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800d1c2:	446a      	add	r2, sp
 800d1c4:	3a98      	subs	r2, #152	; 0x98
 800d1c6:	920a      	str	r2, [sp, #40]	; 0x28
 800d1c8:	9a08      	ldr	r2, [sp, #32]
 800d1ca:	18e3      	adds	r3, r4, r3
 800d1cc:	18a5      	adds	r5, r4, r2
 800d1ce:	aa22      	add	r2, sp, #136	; 0x88
 800d1d0:	f104 0801 	add.w	r8, r4, #1
 800d1d4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800d1d8:	9304      	str	r3, [sp, #16]
 800d1da:	9b04      	ldr	r3, [sp, #16]
 800d1dc:	4543      	cmp	r3, r8
 800d1de:	da04      	bge.n	800d1ea <__kernel_rem_pio2+0x3aa>
 800d1e0:	461c      	mov	r4, r3
 800d1e2:	e6a3      	b.n	800cf2c <__kernel_rem_pio2+0xec>
 800d1e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	e7e4      	b.n	800d1b4 <__kernel_rem_pio2+0x374>
 800d1ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1ec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d1f0:	f7f3 f9b8 	bl	8000564 <__aeabi_i2d>
 800d1f4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d1f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1fa:	46ab      	mov	fp, r5
 800d1fc:	461c      	mov	r4, r3
 800d1fe:	f04f 0900 	mov.w	r9, #0
 800d202:	2600      	movs	r6, #0
 800d204:	2700      	movs	r7, #0
 800d206:	9b06      	ldr	r3, [sp, #24]
 800d208:	4599      	cmp	r9, r3
 800d20a:	dd06      	ble.n	800d21a <__kernel_rem_pio2+0x3da>
 800d20c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d20e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d212:	f108 0801 	add.w	r8, r8, #1
 800d216:	930a      	str	r3, [sp, #40]	; 0x28
 800d218:	e7df      	b.n	800d1da <__kernel_rem_pio2+0x39a>
 800d21a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d21e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d222:	f7f3 fa09 	bl	8000638 <__aeabi_dmul>
 800d226:	4602      	mov	r2, r0
 800d228:	460b      	mov	r3, r1
 800d22a:	4630      	mov	r0, r6
 800d22c:	4639      	mov	r1, r7
 800d22e:	f7f3 f84d 	bl	80002cc <__adddf3>
 800d232:	f109 0901 	add.w	r9, r9, #1
 800d236:	4606      	mov	r6, r0
 800d238:	460f      	mov	r7, r1
 800d23a:	e7e4      	b.n	800d206 <__kernel_rem_pio2+0x3c6>
 800d23c:	3d01      	subs	r5, #1
 800d23e:	e748      	b.n	800d0d2 <__kernel_rem_pio2+0x292>
 800d240:	ec47 6b10 	vmov	d0, r6, r7
 800d244:	f1ca 0000 	rsb	r0, sl, #0
 800d248:	f000 fc3e 	bl	800dac8 <scalbn>
 800d24c:	ec57 6b10 	vmov	r6, r7, d0
 800d250:	4ba0      	ldr	r3, [pc, #640]	; (800d4d4 <__kernel_rem_pio2+0x694>)
 800d252:	ee10 0a10 	vmov	r0, s0
 800d256:	2200      	movs	r2, #0
 800d258:	4639      	mov	r1, r7
 800d25a:	f7f3 fc73 	bl	8000b44 <__aeabi_dcmpge>
 800d25e:	b1f8      	cbz	r0, 800d2a0 <__kernel_rem_pio2+0x460>
 800d260:	4b9d      	ldr	r3, [pc, #628]	; (800d4d8 <__kernel_rem_pio2+0x698>)
 800d262:	2200      	movs	r2, #0
 800d264:	4630      	mov	r0, r6
 800d266:	4639      	mov	r1, r7
 800d268:	f7f3 f9e6 	bl	8000638 <__aeabi_dmul>
 800d26c:	f7f3 fc94 	bl	8000b98 <__aeabi_d2iz>
 800d270:	4680      	mov	r8, r0
 800d272:	f7f3 f977 	bl	8000564 <__aeabi_i2d>
 800d276:	4b97      	ldr	r3, [pc, #604]	; (800d4d4 <__kernel_rem_pio2+0x694>)
 800d278:	2200      	movs	r2, #0
 800d27a:	f7f3 f9dd 	bl	8000638 <__aeabi_dmul>
 800d27e:	460b      	mov	r3, r1
 800d280:	4602      	mov	r2, r0
 800d282:	4639      	mov	r1, r7
 800d284:	4630      	mov	r0, r6
 800d286:	f7f3 f81f 	bl	80002c8 <__aeabi_dsub>
 800d28a:	f7f3 fc85 	bl	8000b98 <__aeabi_d2iz>
 800d28e:	1c65      	adds	r5, r4, #1
 800d290:	ab0e      	add	r3, sp, #56	; 0x38
 800d292:	f10a 0a18 	add.w	sl, sl, #24
 800d296:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d29a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d29e:	e720      	b.n	800d0e2 <__kernel_rem_pio2+0x2a2>
 800d2a0:	4630      	mov	r0, r6
 800d2a2:	4639      	mov	r1, r7
 800d2a4:	f7f3 fc78 	bl	8000b98 <__aeabi_d2iz>
 800d2a8:	ab0e      	add	r3, sp, #56	; 0x38
 800d2aa:	4625      	mov	r5, r4
 800d2ac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d2b0:	e717      	b.n	800d0e2 <__kernel_rem_pio2+0x2a2>
 800d2b2:	ab0e      	add	r3, sp, #56	; 0x38
 800d2b4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800d2b8:	f7f3 f954 	bl	8000564 <__aeabi_i2d>
 800d2bc:	4632      	mov	r2, r6
 800d2be:	463b      	mov	r3, r7
 800d2c0:	f7f3 f9ba 	bl	8000638 <__aeabi_dmul>
 800d2c4:	4b84      	ldr	r3, [pc, #528]	; (800d4d8 <__kernel_rem_pio2+0x698>)
 800d2c6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	4630      	mov	r0, r6
 800d2ce:	4639      	mov	r1, r7
 800d2d0:	f7f3 f9b2 	bl	8000638 <__aeabi_dmul>
 800d2d4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d2d8:	4606      	mov	r6, r0
 800d2da:	460f      	mov	r7, r1
 800d2dc:	e70f      	b.n	800d0fe <__kernel_rem_pio2+0x2be>
 800d2de:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d2e2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d2e6:	f7f3 f9a7 	bl	8000638 <__aeabi_dmul>
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2f2:	f7f2 ffeb 	bl	80002cc <__adddf3>
 800d2f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d2fa:	f108 0801 	add.w	r8, r8, #1
 800d2fe:	9b02      	ldr	r3, [sp, #8]
 800d300:	4598      	cmp	r8, r3
 800d302:	dc01      	bgt.n	800d308 <__kernel_rem_pio2+0x4c8>
 800d304:	45b8      	cmp	r8, r7
 800d306:	ddea      	ble.n	800d2de <__kernel_rem_pio2+0x49e>
 800d308:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d30c:	ab4a      	add	r3, sp, #296	; 0x128
 800d30e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d312:	ed87 7b00 	vstr	d7, [r7]
 800d316:	3e01      	subs	r6, #1
 800d318:	e6f8      	b.n	800d10c <__kernel_rem_pio2+0x2cc>
 800d31a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d31c:	2b02      	cmp	r3, #2
 800d31e:	dc0b      	bgt.n	800d338 <__kernel_rem_pio2+0x4f8>
 800d320:	2b00      	cmp	r3, #0
 800d322:	dc35      	bgt.n	800d390 <__kernel_rem_pio2+0x550>
 800d324:	d059      	beq.n	800d3da <__kernel_rem_pio2+0x59a>
 800d326:	9b04      	ldr	r3, [sp, #16]
 800d328:	f003 0007 	and.w	r0, r3, #7
 800d32c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800d330:	ecbd 8b02 	vpop	{d8}
 800d334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d338:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d33a:	2b03      	cmp	r3, #3
 800d33c:	d1f3      	bne.n	800d326 <__kernel_rem_pio2+0x4e6>
 800d33e:	ab4a      	add	r3, sp, #296	; 0x128
 800d340:	4423      	add	r3, r4
 800d342:	9306      	str	r3, [sp, #24]
 800d344:	461c      	mov	r4, r3
 800d346:	469a      	mov	sl, r3
 800d348:	9502      	str	r5, [sp, #8]
 800d34a:	9b02      	ldr	r3, [sp, #8]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	f1aa 0a08 	sub.w	sl, sl, #8
 800d352:	dc6b      	bgt.n	800d42c <__kernel_rem_pio2+0x5ec>
 800d354:	46aa      	mov	sl, r5
 800d356:	f1ba 0f01 	cmp.w	sl, #1
 800d35a:	f1a4 0408 	sub.w	r4, r4, #8
 800d35e:	f300 8085 	bgt.w	800d46c <__kernel_rem_pio2+0x62c>
 800d362:	9c06      	ldr	r4, [sp, #24]
 800d364:	2000      	movs	r0, #0
 800d366:	3408      	adds	r4, #8
 800d368:	2100      	movs	r1, #0
 800d36a:	2d01      	cmp	r5, #1
 800d36c:	f300 809d 	bgt.w	800d4aa <__kernel_rem_pio2+0x66a>
 800d370:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d374:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800d378:	f1bb 0f00 	cmp.w	fp, #0
 800d37c:	f040 809b 	bne.w	800d4b6 <__kernel_rem_pio2+0x676>
 800d380:	9b01      	ldr	r3, [sp, #4]
 800d382:	e9c3 5600 	strd	r5, r6, [r3]
 800d386:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d38a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d38e:	e7ca      	b.n	800d326 <__kernel_rem_pio2+0x4e6>
 800d390:	3408      	adds	r4, #8
 800d392:	ab4a      	add	r3, sp, #296	; 0x128
 800d394:	441c      	add	r4, r3
 800d396:	462e      	mov	r6, r5
 800d398:	2000      	movs	r0, #0
 800d39a:	2100      	movs	r1, #0
 800d39c:	2e00      	cmp	r6, #0
 800d39e:	da36      	bge.n	800d40e <__kernel_rem_pio2+0x5ce>
 800d3a0:	f1bb 0f00 	cmp.w	fp, #0
 800d3a4:	d039      	beq.n	800d41a <__kernel_rem_pio2+0x5da>
 800d3a6:	4602      	mov	r2, r0
 800d3a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d3ac:	9c01      	ldr	r4, [sp, #4]
 800d3ae:	e9c4 2300 	strd	r2, r3, [r4]
 800d3b2:	4602      	mov	r2, r0
 800d3b4:	460b      	mov	r3, r1
 800d3b6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800d3ba:	f7f2 ff85 	bl	80002c8 <__aeabi_dsub>
 800d3be:	ae4c      	add	r6, sp, #304	; 0x130
 800d3c0:	2401      	movs	r4, #1
 800d3c2:	42a5      	cmp	r5, r4
 800d3c4:	da2c      	bge.n	800d420 <__kernel_rem_pio2+0x5e0>
 800d3c6:	f1bb 0f00 	cmp.w	fp, #0
 800d3ca:	d002      	beq.n	800d3d2 <__kernel_rem_pio2+0x592>
 800d3cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	9b01      	ldr	r3, [sp, #4]
 800d3d4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d3d8:	e7a5      	b.n	800d326 <__kernel_rem_pio2+0x4e6>
 800d3da:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800d3de:	eb0d 0403 	add.w	r4, sp, r3
 800d3e2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d3e6:	2000      	movs	r0, #0
 800d3e8:	2100      	movs	r1, #0
 800d3ea:	2d00      	cmp	r5, #0
 800d3ec:	da09      	bge.n	800d402 <__kernel_rem_pio2+0x5c2>
 800d3ee:	f1bb 0f00 	cmp.w	fp, #0
 800d3f2:	d002      	beq.n	800d3fa <__kernel_rem_pio2+0x5ba>
 800d3f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	9b01      	ldr	r3, [sp, #4]
 800d3fc:	e9c3 0100 	strd	r0, r1, [r3]
 800d400:	e791      	b.n	800d326 <__kernel_rem_pio2+0x4e6>
 800d402:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d406:	f7f2 ff61 	bl	80002cc <__adddf3>
 800d40a:	3d01      	subs	r5, #1
 800d40c:	e7ed      	b.n	800d3ea <__kernel_rem_pio2+0x5aa>
 800d40e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d412:	f7f2 ff5b 	bl	80002cc <__adddf3>
 800d416:	3e01      	subs	r6, #1
 800d418:	e7c0      	b.n	800d39c <__kernel_rem_pio2+0x55c>
 800d41a:	4602      	mov	r2, r0
 800d41c:	460b      	mov	r3, r1
 800d41e:	e7c5      	b.n	800d3ac <__kernel_rem_pio2+0x56c>
 800d420:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d424:	f7f2 ff52 	bl	80002cc <__adddf3>
 800d428:	3401      	adds	r4, #1
 800d42a:	e7ca      	b.n	800d3c2 <__kernel_rem_pio2+0x582>
 800d42c:	e9da 8900 	ldrd	r8, r9, [sl]
 800d430:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d434:	9b02      	ldr	r3, [sp, #8]
 800d436:	3b01      	subs	r3, #1
 800d438:	9302      	str	r3, [sp, #8]
 800d43a:	4632      	mov	r2, r6
 800d43c:	463b      	mov	r3, r7
 800d43e:	4640      	mov	r0, r8
 800d440:	4649      	mov	r1, r9
 800d442:	f7f2 ff43 	bl	80002cc <__adddf3>
 800d446:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d44a:	4602      	mov	r2, r0
 800d44c:	460b      	mov	r3, r1
 800d44e:	4640      	mov	r0, r8
 800d450:	4649      	mov	r1, r9
 800d452:	f7f2 ff39 	bl	80002c8 <__aeabi_dsub>
 800d456:	4632      	mov	r2, r6
 800d458:	463b      	mov	r3, r7
 800d45a:	f7f2 ff37 	bl	80002cc <__adddf3>
 800d45e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800d462:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d466:	ed8a 7b00 	vstr	d7, [sl]
 800d46a:	e76e      	b.n	800d34a <__kernel_rem_pio2+0x50a>
 800d46c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d470:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d474:	4640      	mov	r0, r8
 800d476:	4632      	mov	r2, r6
 800d478:	463b      	mov	r3, r7
 800d47a:	4649      	mov	r1, r9
 800d47c:	f7f2 ff26 	bl	80002cc <__adddf3>
 800d480:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d484:	4602      	mov	r2, r0
 800d486:	460b      	mov	r3, r1
 800d488:	4640      	mov	r0, r8
 800d48a:	4649      	mov	r1, r9
 800d48c:	f7f2 ff1c 	bl	80002c8 <__aeabi_dsub>
 800d490:	4632      	mov	r2, r6
 800d492:	463b      	mov	r3, r7
 800d494:	f7f2 ff1a 	bl	80002cc <__adddf3>
 800d498:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d49c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d4a0:	ed84 7b00 	vstr	d7, [r4]
 800d4a4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d4a8:	e755      	b.n	800d356 <__kernel_rem_pio2+0x516>
 800d4aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d4ae:	f7f2 ff0d 	bl	80002cc <__adddf3>
 800d4b2:	3d01      	subs	r5, #1
 800d4b4:	e759      	b.n	800d36a <__kernel_rem_pio2+0x52a>
 800d4b6:	9b01      	ldr	r3, [sp, #4]
 800d4b8:	9a01      	ldr	r2, [sp, #4]
 800d4ba:	601d      	str	r5, [r3, #0]
 800d4bc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d4c0:	605c      	str	r4, [r3, #4]
 800d4c2:	609f      	str	r7, [r3, #8]
 800d4c4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d4c8:	60d3      	str	r3, [r2, #12]
 800d4ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d4ce:	6110      	str	r0, [r2, #16]
 800d4d0:	6153      	str	r3, [r2, #20]
 800d4d2:	e728      	b.n	800d326 <__kernel_rem_pio2+0x4e6>
 800d4d4:	41700000 	.word	0x41700000
 800d4d8:	3e700000 	.word	0x3e700000
 800d4dc:	00000000 	.word	0x00000000

0800d4e0 <__kernel_sin>:
 800d4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4e4:	ed2d 8b04 	vpush	{d8-d9}
 800d4e8:	eeb0 8a41 	vmov.f32	s16, s2
 800d4ec:	eef0 8a61 	vmov.f32	s17, s3
 800d4f0:	ec55 4b10 	vmov	r4, r5, d0
 800d4f4:	b083      	sub	sp, #12
 800d4f6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d4fa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d4fe:	9001      	str	r0, [sp, #4]
 800d500:	da06      	bge.n	800d510 <__kernel_sin+0x30>
 800d502:	ee10 0a10 	vmov	r0, s0
 800d506:	4629      	mov	r1, r5
 800d508:	f7f3 fb46 	bl	8000b98 <__aeabi_d2iz>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d051      	beq.n	800d5b4 <__kernel_sin+0xd4>
 800d510:	4622      	mov	r2, r4
 800d512:	462b      	mov	r3, r5
 800d514:	4620      	mov	r0, r4
 800d516:	4629      	mov	r1, r5
 800d518:	f7f3 f88e 	bl	8000638 <__aeabi_dmul>
 800d51c:	4682      	mov	sl, r0
 800d51e:	468b      	mov	fp, r1
 800d520:	4602      	mov	r2, r0
 800d522:	460b      	mov	r3, r1
 800d524:	4620      	mov	r0, r4
 800d526:	4629      	mov	r1, r5
 800d528:	f7f3 f886 	bl	8000638 <__aeabi_dmul>
 800d52c:	a341      	add	r3, pc, #260	; (adr r3, 800d634 <__kernel_sin+0x154>)
 800d52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d532:	4680      	mov	r8, r0
 800d534:	4689      	mov	r9, r1
 800d536:	4650      	mov	r0, sl
 800d538:	4659      	mov	r1, fp
 800d53a:	f7f3 f87d 	bl	8000638 <__aeabi_dmul>
 800d53e:	a33f      	add	r3, pc, #252	; (adr r3, 800d63c <__kernel_sin+0x15c>)
 800d540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d544:	f7f2 fec0 	bl	80002c8 <__aeabi_dsub>
 800d548:	4652      	mov	r2, sl
 800d54a:	465b      	mov	r3, fp
 800d54c:	f7f3 f874 	bl	8000638 <__aeabi_dmul>
 800d550:	a33c      	add	r3, pc, #240	; (adr r3, 800d644 <__kernel_sin+0x164>)
 800d552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d556:	f7f2 feb9 	bl	80002cc <__adddf3>
 800d55a:	4652      	mov	r2, sl
 800d55c:	465b      	mov	r3, fp
 800d55e:	f7f3 f86b 	bl	8000638 <__aeabi_dmul>
 800d562:	a33a      	add	r3, pc, #232	; (adr r3, 800d64c <__kernel_sin+0x16c>)
 800d564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d568:	f7f2 feae 	bl	80002c8 <__aeabi_dsub>
 800d56c:	4652      	mov	r2, sl
 800d56e:	465b      	mov	r3, fp
 800d570:	f7f3 f862 	bl	8000638 <__aeabi_dmul>
 800d574:	a337      	add	r3, pc, #220	; (adr r3, 800d654 <__kernel_sin+0x174>)
 800d576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57a:	f7f2 fea7 	bl	80002cc <__adddf3>
 800d57e:	9b01      	ldr	r3, [sp, #4]
 800d580:	4606      	mov	r6, r0
 800d582:	460f      	mov	r7, r1
 800d584:	b9eb      	cbnz	r3, 800d5c2 <__kernel_sin+0xe2>
 800d586:	4602      	mov	r2, r0
 800d588:	460b      	mov	r3, r1
 800d58a:	4650      	mov	r0, sl
 800d58c:	4659      	mov	r1, fp
 800d58e:	f7f3 f853 	bl	8000638 <__aeabi_dmul>
 800d592:	a325      	add	r3, pc, #148	; (adr r3, 800d628 <__kernel_sin+0x148>)
 800d594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d598:	f7f2 fe96 	bl	80002c8 <__aeabi_dsub>
 800d59c:	4642      	mov	r2, r8
 800d59e:	464b      	mov	r3, r9
 800d5a0:	f7f3 f84a 	bl	8000638 <__aeabi_dmul>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	4629      	mov	r1, r5
 800d5ac:	f7f2 fe8e 	bl	80002cc <__adddf3>
 800d5b0:	4604      	mov	r4, r0
 800d5b2:	460d      	mov	r5, r1
 800d5b4:	ec45 4b10 	vmov	d0, r4, r5
 800d5b8:	b003      	add	sp, #12
 800d5ba:	ecbd 8b04 	vpop	{d8-d9}
 800d5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c2:	4b1b      	ldr	r3, [pc, #108]	; (800d630 <__kernel_sin+0x150>)
 800d5c4:	ec51 0b18 	vmov	r0, r1, d8
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	f7f3 f835 	bl	8000638 <__aeabi_dmul>
 800d5ce:	4632      	mov	r2, r6
 800d5d0:	ec41 0b19 	vmov	d9, r0, r1
 800d5d4:	463b      	mov	r3, r7
 800d5d6:	4640      	mov	r0, r8
 800d5d8:	4649      	mov	r1, r9
 800d5da:	f7f3 f82d 	bl	8000638 <__aeabi_dmul>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	ec51 0b19 	vmov	r0, r1, d9
 800d5e6:	f7f2 fe6f 	bl	80002c8 <__aeabi_dsub>
 800d5ea:	4652      	mov	r2, sl
 800d5ec:	465b      	mov	r3, fp
 800d5ee:	f7f3 f823 	bl	8000638 <__aeabi_dmul>
 800d5f2:	ec53 2b18 	vmov	r2, r3, d8
 800d5f6:	f7f2 fe67 	bl	80002c8 <__aeabi_dsub>
 800d5fa:	a30b      	add	r3, pc, #44	; (adr r3, 800d628 <__kernel_sin+0x148>)
 800d5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d600:	4606      	mov	r6, r0
 800d602:	460f      	mov	r7, r1
 800d604:	4640      	mov	r0, r8
 800d606:	4649      	mov	r1, r9
 800d608:	f7f3 f816 	bl	8000638 <__aeabi_dmul>
 800d60c:	4602      	mov	r2, r0
 800d60e:	460b      	mov	r3, r1
 800d610:	4630      	mov	r0, r6
 800d612:	4639      	mov	r1, r7
 800d614:	f7f2 fe5a 	bl	80002cc <__adddf3>
 800d618:	4602      	mov	r2, r0
 800d61a:	460b      	mov	r3, r1
 800d61c:	4620      	mov	r0, r4
 800d61e:	4629      	mov	r1, r5
 800d620:	f7f2 fe52 	bl	80002c8 <__aeabi_dsub>
 800d624:	e7c4      	b.n	800d5b0 <__kernel_sin+0xd0>
 800d626:	bf00      	nop
 800d628:	55555549 	.word	0x55555549
 800d62c:	3fc55555 	.word	0x3fc55555
 800d630:	3fe00000 	.word	0x3fe00000
 800d634:	5acfd57c 	.word	0x5acfd57c
 800d638:	3de5d93a 	.word	0x3de5d93a
 800d63c:	8a2b9ceb 	.word	0x8a2b9ceb
 800d640:	3e5ae5e6 	.word	0x3e5ae5e6
 800d644:	57b1fe7d 	.word	0x57b1fe7d
 800d648:	3ec71de3 	.word	0x3ec71de3
 800d64c:	19c161d5 	.word	0x19c161d5
 800d650:	3f2a01a0 	.word	0x3f2a01a0
 800d654:	1110f8a6 	.word	0x1110f8a6
 800d658:	3f811111 	.word	0x3f811111
 800d65c:	00000000 	.word	0x00000000

0800d660 <atan>:
 800d660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d664:	ec55 4b10 	vmov	r4, r5, d0
 800d668:	4bc3      	ldr	r3, [pc, #780]	; (800d978 <atan+0x318>)
 800d66a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d66e:	429e      	cmp	r6, r3
 800d670:	46ab      	mov	fp, r5
 800d672:	dd18      	ble.n	800d6a6 <atan+0x46>
 800d674:	4bc1      	ldr	r3, [pc, #772]	; (800d97c <atan+0x31c>)
 800d676:	429e      	cmp	r6, r3
 800d678:	dc01      	bgt.n	800d67e <atan+0x1e>
 800d67a:	d109      	bne.n	800d690 <atan+0x30>
 800d67c:	b144      	cbz	r4, 800d690 <atan+0x30>
 800d67e:	4622      	mov	r2, r4
 800d680:	462b      	mov	r3, r5
 800d682:	4620      	mov	r0, r4
 800d684:	4629      	mov	r1, r5
 800d686:	f7f2 fe21 	bl	80002cc <__adddf3>
 800d68a:	4604      	mov	r4, r0
 800d68c:	460d      	mov	r5, r1
 800d68e:	e006      	b.n	800d69e <atan+0x3e>
 800d690:	f1bb 0f00 	cmp.w	fp, #0
 800d694:	f300 8131 	bgt.w	800d8fa <atan+0x29a>
 800d698:	a59b      	add	r5, pc, #620	; (adr r5, 800d908 <atan+0x2a8>)
 800d69a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d69e:	ec45 4b10 	vmov	d0, r4, r5
 800d6a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a6:	4bb6      	ldr	r3, [pc, #728]	; (800d980 <atan+0x320>)
 800d6a8:	429e      	cmp	r6, r3
 800d6aa:	dc14      	bgt.n	800d6d6 <atan+0x76>
 800d6ac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d6b0:	429e      	cmp	r6, r3
 800d6b2:	dc0d      	bgt.n	800d6d0 <atan+0x70>
 800d6b4:	a396      	add	r3, pc, #600	; (adr r3, 800d910 <atan+0x2b0>)
 800d6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ba:	ee10 0a10 	vmov	r0, s0
 800d6be:	4629      	mov	r1, r5
 800d6c0:	f7f2 fe04 	bl	80002cc <__adddf3>
 800d6c4:	4baf      	ldr	r3, [pc, #700]	; (800d984 <atan+0x324>)
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	f7f3 fa46 	bl	8000b58 <__aeabi_dcmpgt>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	d1e6      	bne.n	800d69e <atan+0x3e>
 800d6d0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d6d4:	e02b      	b.n	800d72e <atan+0xce>
 800d6d6:	f000 f963 	bl	800d9a0 <fabs>
 800d6da:	4bab      	ldr	r3, [pc, #684]	; (800d988 <atan+0x328>)
 800d6dc:	429e      	cmp	r6, r3
 800d6de:	ec55 4b10 	vmov	r4, r5, d0
 800d6e2:	f300 80bf 	bgt.w	800d864 <atan+0x204>
 800d6e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d6ea:	429e      	cmp	r6, r3
 800d6ec:	f300 80a0 	bgt.w	800d830 <atan+0x1d0>
 800d6f0:	ee10 2a10 	vmov	r2, s0
 800d6f4:	ee10 0a10 	vmov	r0, s0
 800d6f8:	462b      	mov	r3, r5
 800d6fa:	4629      	mov	r1, r5
 800d6fc:	f7f2 fde6 	bl	80002cc <__adddf3>
 800d700:	4ba0      	ldr	r3, [pc, #640]	; (800d984 <atan+0x324>)
 800d702:	2200      	movs	r2, #0
 800d704:	f7f2 fde0 	bl	80002c8 <__aeabi_dsub>
 800d708:	2200      	movs	r2, #0
 800d70a:	4606      	mov	r6, r0
 800d70c:	460f      	mov	r7, r1
 800d70e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d712:	4620      	mov	r0, r4
 800d714:	4629      	mov	r1, r5
 800d716:	f7f2 fdd9 	bl	80002cc <__adddf3>
 800d71a:	4602      	mov	r2, r0
 800d71c:	460b      	mov	r3, r1
 800d71e:	4630      	mov	r0, r6
 800d720:	4639      	mov	r1, r7
 800d722:	f7f3 f8b3 	bl	800088c <__aeabi_ddiv>
 800d726:	f04f 0a00 	mov.w	sl, #0
 800d72a:	4604      	mov	r4, r0
 800d72c:	460d      	mov	r5, r1
 800d72e:	4622      	mov	r2, r4
 800d730:	462b      	mov	r3, r5
 800d732:	4620      	mov	r0, r4
 800d734:	4629      	mov	r1, r5
 800d736:	f7f2 ff7f 	bl	8000638 <__aeabi_dmul>
 800d73a:	4602      	mov	r2, r0
 800d73c:	460b      	mov	r3, r1
 800d73e:	4680      	mov	r8, r0
 800d740:	4689      	mov	r9, r1
 800d742:	f7f2 ff79 	bl	8000638 <__aeabi_dmul>
 800d746:	a374      	add	r3, pc, #464	; (adr r3, 800d918 <atan+0x2b8>)
 800d748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74c:	4606      	mov	r6, r0
 800d74e:	460f      	mov	r7, r1
 800d750:	f7f2 ff72 	bl	8000638 <__aeabi_dmul>
 800d754:	a372      	add	r3, pc, #456	; (adr r3, 800d920 <atan+0x2c0>)
 800d756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75a:	f7f2 fdb7 	bl	80002cc <__adddf3>
 800d75e:	4632      	mov	r2, r6
 800d760:	463b      	mov	r3, r7
 800d762:	f7f2 ff69 	bl	8000638 <__aeabi_dmul>
 800d766:	a370      	add	r3, pc, #448	; (adr r3, 800d928 <atan+0x2c8>)
 800d768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76c:	f7f2 fdae 	bl	80002cc <__adddf3>
 800d770:	4632      	mov	r2, r6
 800d772:	463b      	mov	r3, r7
 800d774:	f7f2 ff60 	bl	8000638 <__aeabi_dmul>
 800d778:	a36d      	add	r3, pc, #436	; (adr r3, 800d930 <atan+0x2d0>)
 800d77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77e:	f7f2 fda5 	bl	80002cc <__adddf3>
 800d782:	4632      	mov	r2, r6
 800d784:	463b      	mov	r3, r7
 800d786:	f7f2 ff57 	bl	8000638 <__aeabi_dmul>
 800d78a:	a36b      	add	r3, pc, #428	; (adr r3, 800d938 <atan+0x2d8>)
 800d78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d790:	f7f2 fd9c 	bl	80002cc <__adddf3>
 800d794:	4632      	mov	r2, r6
 800d796:	463b      	mov	r3, r7
 800d798:	f7f2 ff4e 	bl	8000638 <__aeabi_dmul>
 800d79c:	a368      	add	r3, pc, #416	; (adr r3, 800d940 <atan+0x2e0>)
 800d79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a2:	f7f2 fd93 	bl	80002cc <__adddf3>
 800d7a6:	4642      	mov	r2, r8
 800d7a8:	464b      	mov	r3, r9
 800d7aa:	f7f2 ff45 	bl	8000638 <__aeabi_dmul>
 800d7ae:	a366      	add	r3, pc, #408	; (adr r3, 800d948 <atan+0x2e8>)
 800d7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b4:	4680      	mov	r8, r0
 800d7b6:	4689      	mov	r9, r1
 800d7b8:	4630      	mov	r0, r6
 800d7ba:	4639      	mov	r1, r7
 800d7bc:	f7f2 ff3c 	bl	8000638 <__aeabi_dmul>
 800d7c0:	a363      	add	r3, pc, #396	; (adr r3, 800d950 <atan+0x2f0>)
 800d7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c6:	f7f2 fd7f 	bl	80002c8 <__aeabi_dsub>
 800d7ca:	4632      	mov	r2, r6
 800d7cc:	463b      	mov	r3, r7
 800d7ce:	f7f2 ff33 	bl	8000638 <__aeabi_dmul>
 800d7d2:	a361      	add	r3, pc, #388	; (adr r3, 800d958 <atan+0x2f8>)
 800d7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d8:	f7f2 fd76 	bl	80002c8 <__aeabi_dsub>
 800d7dc:	4632      	mov	r2, r6
 800d7de:	463b      	mov	r3, r7
 800d7e0:	f7f2 ff2a 	bl	8000638 <__aeabi_dmul>
 800d7e4:	a35e      	add	r3, pc, #376	; (adr r3, 800d960 <atan+0x300>)
 800d7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ea:	f7f2 fd6d 	bl	80002c8 <__aeabi_dsub>
 800d7ee:	4632      	mov	r2, r6
 800d7f0:	463b      	mov	r3, r7
 800d7f2:	f7f2 ff21 	bl	8000638 <__aeabi_dmul>
 800d7f6:	a35c      	add	r3, pc, #368	; (adr r3, 800d968 <atan+0x308>)
 800d7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fc:	f7f2 fd64 	bl	80002c8 <__aeabi_dsub>
 800d800:	4632      	mov	r2, r6
 800d802:	463b      	mov	r3, r7
 800d804:	f7f2 ff18 	bl	8000638 <__aeabi_dmul>
 800d808:	4602      	mov	r2, r0
 800d80a:	460b      	mov	r3, r1
 800d80c:	4640      	mov	r0, r8
 800d80e:	4649      	mov	r1, r9
 800d810:	f7f2 fd5c 	bl	80002cc <__adddf3>
 800d814:	4622      	mov	r2, r4
 800d816:	462b      	mov	r3, r5
 800d818:	f7f2 ff0e 	bl	8000638 <__aeabi_dmul>
 800d81c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800d820:	4602      	mov	r2, r0
 800d822:	460b      	mov	r3, r1
 800d824:	d14b      	bne.n	800d8be <atan+0x25e>
 800d826:	4620      	mov	r0, r4
 800d828:	4629      	mov	r1, r5
 800d82a:	f7f2 fd4d 	bl	80002c8 <__aeabi_dsub>
 800d82e:	e72c      	b.n	800d68a <atan+0x2a>
 800d830:	ee10 0a10 	vmov	r0, s0
 800d834:	4b53      	ldr	r3, [pc, #332]	; (800d984 <atan+0x324>)
 800d836:	2200      	movs	r2, #0
 800d838:	4629      	mov	r1, r5
 800d83a:	f7f2 fd45 	bl	80002c8 <__aeabi_dsub>
 800d83e:	4b51      	ldr	r3, [pc, #324]	; (800d984 <atan+0x324>)
 800d840:	4606      	mov	r6, r0
 800d842:	460f      	mov	r7, r1
 800d844:	2200      	movs	r2, #0
 800d846:	4620      	mov	r0, r4
 800d848:	4629      	mov	r1, r5
 800d84a:	f7f2 fd3f 	bl	80002cc <__adddf3>
 800d84e:	4602      	mov	r2, r0
 800d850:	460b      	mov	r3, r1
 800d852:	4630      	mov	r0, r6
 800d854:	4639      	mov	r1, r7
 800d856:	f7f3 f819 	bl	800088c <__aeabi_ddiv>
 800d85a:	f04f 0a01 	mov.w	sl, #1
 800d85e:	4604      	mov	r4, r0
 800d860:	460d      	mov	r5, r1
 800d862:	e764      	b.n	800d72e <atan+0xce>
 800d864:	4b49      	ldr	r3, [pc, #292]	; (800d98c <atan+0x32c>)
 800d866:	429e      	cmp	r6, r3
 800d868:	da1d      	bge.n	800d8a6 <atan+0x246>
 800d86a:	ee10 0a10 	vmov	r0, s0
 800d86e:	4b48      	ldr	r3, [pc, #288]	; (800d990 <atan+0x330>)
 800d870:	2200      	movs	r2, #0
 800d872:	4629      	mov	r1, r5
 800d874:	f7f2 fd28 	bl	80002c8 <__aeabi_dsub>
 800d878:	4b45      	ldr	r3, [pc, #276]	; (800d990 <atan+0x330>)
 800d87a:	4606      	mov	r6, r0
 800d87c:	460f      	mov	r7, r1
 800d87e:	2200      	movs	r2, #0
 800d880:	4620      	mov	r0, r4
 800d882:	4629      	mov	r1, r5
 800d884:	f7f2 fed8 	bl	8000638 <__aeabi_dmul>
 800d888:	4b3e      	ldr	r3, [pc, #248]	; (800d984 <atan+0x324>)
 800d88a:	2200      	movs	r2, #0
 800d88c:	f7f2 fd1e 	bl	80002cc <__adddf3>
 800d890:	4602      	mov	r2, r0
 800d892:	460b      	mov	r3, r1
 800d894:	4630      	mov	r0, r6
 800d896:	4639      	mov	r1, r7
 800d898:	f7f2 fff8 	bl	800088c <__aeabi_ddiv>
 800d89c:	f04f 0a02 	mov.w	sl, #2
 800d8a0:	4604      	mov	r4, r0
 800d8a2:	460d      	mov	r5, r1
 800d8a4:	e743      	b.n	800d72e <atan+0xce>
 800d8a6:	462b      	mov	r3, r5
 800d8a8:	ee10 2a10 	vmov	r2, s0
 800d8ac:	4939      	ldr	r1, [pc, #228]	; (800d994 <atan+0x334>)
 800d8ae:	2000      	movs	r0, #0
 800d8b0:	f7f2 ffec 	bl	800088c <__aeabi_ddiv>
 800d8b4:	f04f 0a03 	mov.w	sl, #3
 800d8b8:	4604      	mov	r4, r0
 800d8ba:	460d      	mov	r5, r1
 800d8bc:	e737      	b.n	800d72e <atan+0xce>
 800d8be:	4b36      	ldr	r3, [pc, #216]	; (800d998 <atan+0x338>)
 800d8c0:	4e36      	ldr	r6, [pc, #216]	; (800d99c <atan+0x33c>)
 800d8c2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d8c6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d8ca:	e9da 2300 	ldrd	r2, r3, [sl]
 800d8ce:	f7f2 fcfb 	bl	80002c8 <__aeabi_dsub>
 800d8d2:	4622      	mov	r2, r4
 800d8d4:	462b      	mov	r3, r5
 800d8d6:	f7f2 fcf7 	bl	80002c8 <__aeabi_dsub>
 800d8da:	4602      	mov	r2, r0
 800d8dc:	460b      	mov	r3, r1
 800d8de:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d8e2:	f7f2 fcf1 	bl	80002c8 <__aeabi_dsub>
 800d8e6:	f1bb 0f00 	cmp.w	fp, #0
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	460d      	mov	r5, r1
 800d8ee:	f6bf aed6 	bge.w	800d69e <atan+0x3e>
 800d8f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d8f6:	461d      	mov	r5, r3
 800d8f8:	e6d1      	b.n	800d69e <atan+0x3e>
 800d8fa:	a51d      	add	r5, pc, #116	; (adr r5, 800d970 <atan+0x310>)
 800d8fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d900:	e6cd      	b.n	800d69e <atan+0x3e>
 800d902:	bf00      	nop
 800d904:	f3af 8000 	nop.w
 800d908:	54442d18 	.word	0x54442d18
 800d90c:	bff921fb 	.word	0xbff921fb
 800d910:	8800759c 	.word	0x8800759c
 800d914:	7e37e43c 	.word	0x7e37e43c
 800d918:	e322da11 	.word	0xe322da11
 800d91c:	3f90ad3a 	.word	0x3f90ad3a
 800d920:	24760deb 	.word	0x24760deb
 800d924:	3fa97b4b 	.word	0x3fa97b4b
 800d928:	a0d03d51 	.word	0xa0d03d51
 800d92c:	3fb10d66 	.word	0x3fb10d66
 800d930:	c54c206e 	.word	0xc54c206e
 800d934:	3fb745cd 	.word	0x3fb745cd
 800d938:	920083ff 	.word	0x920083ff
 800d93c:	3fc24924 	.word	0x3fc24924
 800d940:	5555550d 	.word	0x5555550d
 800d944:	3fd55555 	.word	0x3fd55555
 800d948:	2c6a6c2f 	.word	0x2c6a6c2f
 800d94c:	bfa2b444 	.word	0xbfa2b444
 800d950:	52defd9a 	.word	0x52defd9a
 800d954:	3fadde2d 	.word	0x3fadde2d
 800d958:	af749a6d 	.word	0xaf749a6d
 800d95c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d960:	fe231671 	.word	0xfe231671
 800d964:	3fbc71c6 	.word	0x3fbc71c6
 800d968:	9998ebc4 	.word	0x9998ebc4
 800d96c:	3fc99999 	.word	0x3fc99999
 800d970:	54442d18 	.word	0x54442d18
 800d974:	3ff921fb 	.word	0x3ff921fb
 800d978:	440fffff 	.word	0x440fffff
 800d97c:	7ff00000 	.word	0x7ff00000
 800d980:	3fdbffff 	.word	0x3fdbffff
 800d984:	3ff00000 	.word	0x3ff00000
 800d988:	3ff2ffff 	.word	0x3ff2ffff
 800d98c:	40038000 	.word	0x40038000
 800d990:	3ff80000 	.word	0x3ff80000
 800d994:	bff00000 	.word	0xbff00000
 800d998:	0800e568 	.word	0x0800e568
 800d99c:	0800e548 	.word	0x0800e548

0800d9a0 <fabs>:
 800d9a0:	ec51 0b10 	vmov	r0, r1, d0
 800d9a4:	ee10 2a10 	vmov	r2, s0
 800d9a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d9ac:	ec43 2b10 	vmov	d0, r2, r3
 800d9b0:	4770      	bx	lr
 800d9b2:	0000      	movs	r0, r0
 800d9b4:	0000      	movs	r0, r0
	...

0800d9b8 <floor>:
 800d9b8:	ec51 0b10 	vmov	r0, r1, d0
 800d9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d9c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d9c8:	2e13      	cmp	r6, #19
 800d9ca:	ee10 5a10 	vmov	r5, s0
 800d9ce:	ee10 8a10 	vmov	r8, s0
 800d9d2:	460c      	mov	r4, r1
 800d9d4:	dc32      	bgt.n	800da3c <floor+0x84>
 800d9d6:	2e00      	cmp	r6, #0
 800d9d8:	da14      	bge.n	800da04 <floor+0x4c>
 800d9da:	a333      	add	r3, pc, #204	; (adr r3, 800daa8 <floor+0xf0>)
 800d9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e0:	f7f2 fc74 	bl	80002cc <__adddf3>
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	f7f3 f8b6 	bl	8000b58 <__aeabi_dcmpgt>
 800d9ec:	b138      	cbz	r0, 800d9fe <floor+0x46>
 800d9ee:	2c00      	cmp	r4, #0
 800d9f0:	da57      	bge.n	800daa2 <floor+0xea>
 800d9f2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d9f6:	431d      	orrs	r5, r3
 800d9f8:	d001      	beq.n	800d9fe <floor+0x46>
 800d9fa:	4c2d      	ldr	r4, [pc, #180]	; (800dab0 <floor+0xf8>)
 800d9fc:	2500      	movs	r5, #0
 800d9fe:	4621      	mov	r1, r4
 800da00:	4628      	mov	r0, r5
 800da02:	e025      	b.n	800da50 <floor+0x98>
 800da04:	4f2b      	ldr	r7, [pc, #172]	; (800dab4 <floor+0xfc>)
 800da06:	4137      	asrs	r7, r6
 800da08:	ea01 0307 	and.w	r3, r1, r7
 800da0c:	4303      	orrs	r3, r0
 800da0e:	d01f      	beq.n	800da50 <floor+0x98>
 800da10:	a325      	add	r3, pc, #148	; (adr r3, 800daa8 <floor+0xf0>)
 800da12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da16:	f7f2 fc59 	bl	80002cc <__adddf3>
 800da1a:	2200      	movs	r2, #0
 800da1c:	2300      	movs	r3, #0
 800da1e:	f7f3 f89b 	bl	8000b58 <__aeabi_dcmpgt>
 800da22:	2800      	cmp	r0, #0
 800da24:	d0eb      	beq.n	800d9fe <floor+0x46>
 800da26:	2c00      	cmp	r4, #0
 800da28:	bfbe      	ittt	lt
 800da2a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800da2e:	fa43 f606 	asrlt.w	r6, r3, r6
 800da32:	19a4      	addlt	r4, r4, r6
 800da34:	ea24 0407 	bic.w	r4, r4, r7
 800da38:	2500      	movs	r5, #0
 800da3a:	e7e0      	b.n	800d9fe <floor+0x46>
 800da3c:	2e33      	cmp	r6, #51	; 0x33
 800da3e:	dd0b      	ble.n	800da58 <floor+0xa0>
 800da40:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800da44:	d104      	bne.n	800da50 <floor+0x98>
 800da46:	ee10 2a10 	vmov	r2, s0
 800da4a:	460b      	mov	r3, r1
 800da4c:	f7f2 fc3e 	bl	80002cc <__adddf3>
 800da50:	ec41 0b10 	vmov	d0, r0, r1
 800da54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da58:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800da5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da60:	fa23 f707 	lsr.w	r7, r3, r7
 800da64:	4207      	tst	r7, r0
 800da66:	d0f3      	beq.n	800da50 <floor+0x98>
 800da68:	a30f      	add	r3, pc, #60	; (adr r3, 800daa8 <floor+0xf0>)
 800da6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6e:	f7f2 fc2d 	bl	80002cc <__adddf3>
 800da72:	2200      	movs	r2, #0
 800da74:	2300      	movs	r3, #0
 800da76:	f7f3 f86f 	bl	8000b58 <__aeabi_dcmpgt>
 800da7a:	2800      	cmp	r0, #0
 800da7c:	d0bf      	beq.n	800d9fe <floor+0x46>
 800da7e:	2c00      	cmp	r4, #0
 800da80:	da02      	bge.n	800da88 <floor+0xd0>
 800da82:	2e14      	cmp	r6, #20
 800da84:	d103      	bne.n	800da8e <floor+0xd6>
 800da86:	3401      	adds	r4, #1
 800da88:	ea25 0507 	bic.w	r5, r5, r7
 800da8c:	e7b7      	b.n	800d9fe <floor+0x46>
 800da8e:	2301      	movs	r3, #1
 800da90:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800da94:	fa03 f606 	lsl.w	r6, r3, r6
 800da98:	4435      	add	r5, r6
 800da9a:	4545      	cmp	r5, r8
 800da9c:	bf38      	it	cc
 800da9e:	18e4      	addcc	r4, r4, r3
 800daa0:	e7f2      	b.n	800da88 <floor+0xd0>
 800daa2:	2500      	movs	r5, #0
 800daa4:	462c      	mov	r4, r5
 800daa6:	e7aa      	b.n	800d9fe <floor+0x46>
 800daa8:	8800759c 	.word	0x8800759c
 800daac:	7e37e43c 	.word	0x7e37e43c
 800dab0:	bff00000 	.word	0xbff00000
 800dab4:	000fffff 	.word	0x000fffff

0800dab8 <nan>:
 800dab8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dac0 <nan+0x8>
 800dabc:	4770      	bx	lr
 800dabe:	bf00      	nop
 800dac0:	00000000 	.word	0x00000000
 800dac4:	7ff80000 	.word	0x7ff80000

0800dac8 <scalbn>:
 800dac8:	b570      	push	{r4, r5, r6, lr}
 800daca:	ec55 4b10 	vmov	r4, r5, d0
 800dace:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800dad2:	4606      	mov	r6, r0
 800dad4:	462b      	mov	r3, r5
 800dad6:	b99a      	cbnz	r2, 800db00 <scalbn+0x38>
 800dad8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dadc:	4323      	orrs	r3, r4
 800dade:	d036      	beq.n	800db4e <scalbn+0x86>
 800dae0:	4b39      	ldr	r3, [pc, #228]	; (800dbc8 <scalbn+0x100>)
 800dae2:	4629      	mov	r1, r5
 800dae4:	ee10 0a10 	vmov	r0, s0
 800dae8:	2200      	movs	r2, #0
 800daea:	f7f2 fda5 	bl	8000638 <__aeabi_dmul>
 800daee:	4b37      	ldr	r3, [pc, #220]	; (800dbcc <scalbn+0x104>)
 800daf0:	429e      	cmp	r6, r3
 800daf2:	4604      	mov	r4, r0
 800daf4:	460d      	mov	r5, r1
 800daf6:	da10      	bge.n	800db1a <scalbn+0x52>
 800daf8:	a32b      	add	r3, pc, #172	; (adr r3, 800dba8 <scalbn+0xe0>)
 800dafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafe:	e03a      	b.n	800db76 <scalbn+0xae>
 800db00:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800db04:	428a      	cmp	r2, r1
 800db06:	d10c      	bne.n	800db22 <scalbn+0x5a>
 800db08:	ee10 2a10 	vmov	r2, s0
 800db0c:	4620      	mov	r0, r4
 800db0e:	4629      	mov	r1, r5
 800db10:	f7f2 fbdc 	bl	80002cc <__adddf3>
 800db14:	4604      	mov	r4, r0
 800db16:	460d      	mov	r5, r1
 800db18:	e019      	b.n	800db4e <scalbn+0x86>
 800db1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800db1e:	460b      	mov	r3, r1
 800db20:	3a36      	subs	r2, #54	; 0x36
 800db22:	4432      	add	r2, r6
 800db24:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800db28:	428a      	cmp	r2, r1
 800db2a:	dd08      	ble.n	800db3e <scalbn+0x76>
 800db2c:	2d00      	cmp	r5, #0
 800db2e:	a120      	add	r1, pc, #128	; (adr r1, 800dbb0 <scalbn+0xe8>)
 800db30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db34:	da1c      	bge.n	800db70 <scalbn+0xa8>
 800db36:	a120      	add	r1, pc, #128	; (adr r1, 800dbb8 <scalbn+0xf0>)
 800db38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db3c:	e018      	b.n	800db70 <scalbn+0xa8>
 800db3e:	2a00      	cmp	r2, #0
 800db40:	dd08      	ble.n	800db54 <scalbn+0x8c>
 800db42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800db46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800db4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800db4e:	ec45 4b10 	vmov	d0, r4, r5
 800db52:	bd70      	pop	{r4, r5, r6, pc}
 800db54:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800db58:	da19      	bge.n	800db8e <scalbn+0xc6>
 800db5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800db5e:	429e      	cmp	r6, r3
 800db60:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800db64:	dd0a      	ble.n	800db7c <scalbn+0xb4>
 800db66:	a112      	add	r1, pc, #72	; (adr r1, 800dbb0 <scalbn+0xe8>)
 800db68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d1e2      	bne.n	800db36 <scalbn+0x6e>
 800db70:	a30f      	add	r3, pc, #60	; (adr r3, 800dbb0 <scalbn+0xe8>)
 800db72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db76:	f7f2 fd5f 	bl	8000638 <__aeabi_dmul>
 800db7a:	e7cb      	b.n	800db14 <scalbn+0x4c>
 800db7c:	a10a      	add	r1, pc, #40	; (adr r1, 800dba8 <scalbn+0xe0>)
 800db7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d0b8      	beq.n	800daf8 <scalbn+0x30>
 800db86:	a10e      	add	r1, pc, #56	; (adr r1, 800dbc0 <scalbn+0xf8>)
 800db88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db8c:	e7b4      	b.n	800daf8 <scalbn+0x30>
 800db8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800db92:	3236      	adds	r2, #54	; 0x36
 800db94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800db98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800db9c:	4620      	mov	r0, r4
 800db9e:	4b0c      	ldr	r3, [pc, #48]	; (800dbd0 <scalbn+0x108>)
 800dba0:	2200      	movs	r2, #0
 800dba2:	e7e8      	b.n	800db76 <scalbn+0xae>
 800dba4:	f3af 8000 	nop.w
 800dba8:	c2f8f359 	.word	0xc2f8f359
 800dbac:	01a56e1f 	.word	0x01a56e1f
 800dbb0:	8800759c 	.word	0x8800759c
 800dbb4:	7e37e43c 	.word	0x7e37e43c
 800dbb8:	8800759c 	.word	0x8800759c
 800dbbc:	fe37e43c 	.word	0xfe37e43c
 800dbc0:	c2f8f359 	.word	0xc2f8f359
 800dbc4:	81a56e1f 	.word	0x81a56e1f
 800dbc8:	43500000 	.word	0x43500000
 800dbcc:	ffff3cb0 	.word	0xffff3cb0
 800dbd0:	3c900000 	.word	0x3c900000

0800dbd4 <_init>:
 800dbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbd6:	bf00      	nop
 800dbd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbda:	bc08      	pop	{r3}
 800dbdc:	469e      	mov	lr, r3
 800dbde:	4770      	bx	lr

0800dbe0 <_fini>:
 800dbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbe2:	bf00      	nop
 800dbe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbe6:	bc08      	pop	{r3}
 800dbe8:	469e      	mov	lr, r3
 800dbea:	4770      	bx	lr
