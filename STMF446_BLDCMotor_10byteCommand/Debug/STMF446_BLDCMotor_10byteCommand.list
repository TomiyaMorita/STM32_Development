
STMF446_BLDCMotor_10byteCommand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af3c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000958  0800b110  0800b110  0001b110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba68  0800ba68  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba68  0800ba68  0001ba68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba70  0800ba70  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba70  0800ba70  0001ba70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba74  0800ba74  0001ba74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800ba78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  200001e8  0800bc60  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  0800bc60  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccc7  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f4b  00000000  00000000  0002cedf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002ee30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002f868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000332b  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cfdf  00000000  00000000  00033503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd2ec  00000000  00000000  000404e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010d7ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e0c  00000000  00000000  0010d820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b0f4 	.word	0x0800b0f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800b0f4 	.word	0x0800b0f4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <HAL_GPIO_EXTI_Callback>:
	uint16_t rxMsg;
	uint16_t txMsg;
}CANMessage;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
	//stepper 0 end stop senssor
	if(GPIO_Pin == GPIO_PIN_5 ){
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	2b20      	cmp	r3, #32
 8000f9a:	d11b      	bne.n	8000fd4 <HAL_GPIO_EXTI_Callback+0x48>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){	//end stop ONの時フラグを立てる
 8000f9c:	2120      	movs	r1, #32
 8000f9e:	480f      	ldr	r0, [pc, #60]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x50>)
 8000fa0:	f003 fdc4 	bl	8004b2c <HAL_GPIO_ReadPin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d106      	bne.n	8000fb8 <HAL_GPIO_EXTI_Callback+0x2c>
			home_position_state |= 1;
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000fb6:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 8000fb8:	2120      	movs	r1, #32
 8000fba:	4808      	ldr	r0, [pc, #32]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x50>)
 8000fbc:	f003 fdb6 	bl	8004b2c <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d006      	beq.n	8000fd4 <HAL_GPIO_EXTI_Callback+0x48>
			home_position_state &= ~1;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	f023 0301 	bic.w	r3, r3, #1
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000fd2:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	20000304 	.word	0x20000304

08000fe4 <EnterMotorMode>:
    data[6] = 0xFF;
    data[7] = 0xFE;
    //WriteAll();
    }

void EnterMotorMode(){
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
	data[0] = 0xFF;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <EnterMotorMode+0x40>)
 8000fea:	22ff      	movs	r2, #255	; 0xff
 8000fec:	701a      	strb	r2, [r3, #0]
    data[1] = 0xFF;
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <EnterMotorMode+0x40>)
 8000ff0:	22ff      	movs	r2, #255	; 0xff
 8000ff2:	705a      	strb	r2, [r3, #1]
    data[2] = 0xFF;
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <EnterMotorMode+0x40>)
 8000ff6:	22ff      	movs	r2, #255	; 0xff
 8000ff8:	709a      	strb	r2, [r3, #2]
    data[3] = 0xFF;
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <EnterMotorMode+0x40>)
 8000ffc:	22ff      	movs	r2, #255	; 0xff
 8000ffe:	70da      	strb	r2, [r3, #3]
    data[4] = 0xFF;
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <EnterMotorMode+0x40>)
 8001002:	22ff      	movs	r2, #255	; 0xff
 8001004:	711a      	strb	r2, [r3, #4]
    data[5] = 0xFF;
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <EnterMotorMode+0x40>)
 8001008:	22ff      	movs	r2, #255	; 0xff
 800100a:	715a      	strb	r2, [r3, #5]
    data[6] = 0xFF;
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <EnterMotorMode+0x40>)
 800100e:	22ff      	movs	r2, #255	; 0xff
 8001010:	719a      	strb	r2, [r3, #6]
    data[7] = 0xFC;
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <EnterMotorMode+0x40>)
 8001014:	22fc      	movs	r2, #252	; 0xfc
 8001016:	71da      	strb	r2, [r3, #7]
    //WriteAll();
    }
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	200002f4 	.word	0x200002f4

08001028 <ExitMotorMode>:

void ExitMotorMode(){
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
	data[0] = 0xFF;
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <ExitMotorMode+0x40>)
 800102e:	22ff      	movs	r2, #255	; 0xff
 8001030:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <ExitMotorMode+0x40>)
 8001034:	22ff      	movs	r2, #255	; 0xff
 8001036:	705a      	strb	r2, [r3, #1]
	data[2] = 0xFF;
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <ExitMotorMode+0x40>)
 800103a:	22ff      	movs	r2, #255	; 0xff
 800103c:	709a      	strb	r2, [r3, #2]
	data[3] = 0xFF;
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <ExitMotorMode+0x40>)
 8001040:	22ff      	movs	r2, #255	; 0xff
 8001042:	70da      	strb	r2, [r3, #3]
	data[4] = 0xFF;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <ExitMotorMode+0x40>)
 8001046:	22ff      	movs	r2, #255	; 0xff
 8001048:	711a      	strb	r2, [r3, #4]
	data[5] = 0xFF;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <ExitMotorMode+0x40>)
 800104c:	22ff      	movs	r2, #255	; 0xff
 800104e:	715a      	strb	r2, [r3, #5]
	data[6] = 0xFF;
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <ExitMotorMode+0x40>)
 8001052:	22ff      	movs	r2, #255	; 0xff
 8001054:	719a      	strb	r2, [r3, #6]
	data[7] = 0xFD;
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <ExitMotorMode+0x40>)
 8001058:	22fd      	movs	r2, #253	; 0xfd
 800105a:	71da      	strb	r2, [r3, #7]
    //WriteAll();
    }
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200002f4 	.word	0x200002f4

0800106c <pack_cmd>:

void pack_cmd(float _p_des, float _v_des, float _kp, float _kd, float _t_ff){
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	; 0x38
 8001070:	af00      	add	r7, sp, #0
 8001072:	ed87 0a05 	vstr	s0, [r7, #20]
 8001076:	edc7 0a04 	vstr	s1, [r7, #16]
 800107a:	ed87 1a03 	vstr	s2, [r7, #12]
 800107e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001082:	ed87 2a01 	vstr	s4, [r7, #4]
	/// limit data to be within bounds ///
	float p_des = fminf(fmaxf(P_MIN, _p_des), P_MAX);
 8001086:	edd7 0a05 	vldr	s1, [r7, #20]
 800108a:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800108e:	f001 ff66 	bl	8002f5e <fmaxf>
 8001092:	eef0 7a40 	vmov.f32	s15, s0
 8001096:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 800109a:	eeb0 0a67 	vmov.f32	s0, s15
 800109e:	f001 ff7a 	bl	8002f96 <fminf>
 80010a2:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float v_des = fminf(fmaxf(V_MIN, _v_des), V_MAX);
 80010a6:	edd7 0a04 	vldr	s1, [r7, #16]
 80010aa:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8001208 <pack_cmd+0x19c>
 80010ae:	f001 ff56 	bl	8002f5e <fmaxf>
 80010b2:	eef0 7a40 	vmov.f32	s15, s0
 80010b6:	eddf 0a55 	vldr	s1, [pc, #340]	; 800120c <pack_cmd+0x1a0>
 80010ba:	eeb0 0a67 	vmov.f32	s0, s15
 80010be:	f001 ff6a 	bl	8002f96 <fminf>
 80010c2:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	float kp = fminf(fmaxf(KP_MIN, _kp), KP_MAX);
 80010c6:	edd7 0a03 	vldr	s1, [r7, #12]
 80010ca:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8001210 <pack_cmd+0x1a4>
 80010ce:	f001 ff46 	bl	8002f5e <fmaxf>
 80010d2:	eef0 7a40 	vmov.f32	s15, s0
 80010d6:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8001214 <pack_cmd+0x1a8>
 80010da:	eeb0 0a67 	vmov.f32	s0, s15
 80010de:	f001 ff5a 	bl	8002f96 <fminf>
 80010e2:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float kd = fminf(fmaxf(KD_MIN, _kd), KD_MAX);
 80010e6:	edd7 0a02 	vldr	s1, [r7, #8]
 80010ea:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8001210 <pack_cmd+0x1a4>
 80010ee:	f001 ff36 	bl	8002f5e <fmaxf>
 80010f2:	eef0 7a40 	vmov.f32	s15, s0
 80010f6:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80010fa:	eeb0 0a67 	vmov.f32	s0, s15
 80010fe:	f001 ff4a 	bl	8002f96 <fminf>
 8001102:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	float t_ff = fminf(fmaxf(T_MIN, _t_ff), T_MAX);
 8001106:	edd7 0a01 	vldr	s1, [r7, #4]
 800110a:	eebb 0a02 	vmov.f32	s0, #178	; 0xc1900000 -18.0
 800110e:	f001 ff26 	bl	8002f5e <fmaxf>
 8001112:	eef0 7a40 	vmov.f32	s15, s0
 8001116:	eef3 0a02 	vmov.f32	s1, #50	; 0x41900000  18.0
 800111a:	eeb0 0a67 	vmov.f32	s0, s15
 800111e:	f001 ff3a 	bl	8002f96 <fminf>
 8001122:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	/// convert floats to unsigned ints ///
	uint16_t p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);
 8001126:	2010      	movs	r0, #16
 8001128:	eeb2 1a09 	vmov.f32	s2, #41	; 0x41480000  12.5
 800112c:	eefa 0a09 	vmov.f32	s1, #169	; 0xc1480000 -12.5
 8001130:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001134:	f001 ff4b 	bl	8002fce <float_to_uint>
 8001138:	4603      	mov	r3, r0
 800113a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t v_int = float_to_uint(v_des, V_MIN, V_MAX, 12);
 800113c:	200c      	movs	r0, #12
 800113e:	ed9f 1a33 	vldr	s2, [pc, #204]	; 800120c <pack_cmd+0x1a0>
 8001142:	eddf 0a31 	vldr	s1, [pc, #196]	; 8001208 <pack_cmd+0x19c>
 8001146:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 800114a:	f001 ff40 	bl	8002fce <float_to_uint>
 800114e:	4603      	mov	r3, r0
 8001150:	843b      	strh	r3, [r7, #32]
	uint16_t kp_int = float_to_uint(kp, KP_MIN, KP_MAX, 12);
 8001152:	200c      	movs	r0, #12
 8001154:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8001214 <pack_cmd+0x1a8>
 8001158:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8001210 <pack_cmd+0x1a4>
 800115c:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001160:	f001 ff35 	bl	8002fce <float_to_uint>
 8001164:	4603      	mov	r3, r0
 8001166:	83fb      	strh	r3, [r7, #30]
	uint16_t kd_int = float_to_uint(kd, KD_MIN, KD_MAX, 12);
 8001168:	200c      	movs	r0, #12
 800116a:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 800116e:	eddf 0a28 	vldr	s1, [pc, #160]	; 8001210 <pack_cmd+0x1a4>
 8001172:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001176:	f001 ff2a 	bl	8002fce <float_to_uint>
 800117a:	4603      	mov	r3, r0
 800117c:	83bb      	strh	r3, [r7, #28]
	uint16_t t_int = float_to_uint(t_ff, T_MIN, T_MAX, 12);
 800117e:	200c      	movs	r0, #12
 8001180:	eeb3 1a02 	vmov.f32	s2, #50	; 0x41900000  18.0
 8001184:	eefb 0a02 	vmov.f32	s1, #178	; 0xc1900000 -18.0
 8001188:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800118c:	f001 ff1f 	bl	8002fce <float_to_uint>
 8001190:	4603      	mov	r3, r0
 8001192:	837b      	strh	r3, [r7, #26]
//	printf("v_int%d \r\n",v_int);
//	printf("kp_int%d \r\n",kp_int);
//	printf("kd_int%d \r\n",kd_int);

	/// pack ints into the can buffer ///
	data[0] = p_int>>8;
 8001194:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001196:	0a1b      	lsrs	r3, r3, #8
 8001198:	b29b      	uxth	r3, r3
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <pack_cmd+0x1ac>)
 800119e:	701a      	strb	r2, [r3, #0]
	data[1] = p_int&0xFF;
 80011a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <pack_cmd+0x1ac>)
 80011a6:	705a      	strb	r2, [r3, #1]
	data[2] = v_int>>4;
 80011a8:	8c3b      	ldrh	r3, [r7, #32]
 80011aa:	091b      	lsrs	r3, r3, #4
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <pack_cmd+0x1ac>)
 80011b2:	709a      	strb	r2, [r3, #2]
	data[3] = ((v_int&0xF)<<4)|(kp_int>>8);
 80011b4:	8c3b      	ldrh	r3, [r7, #32]
 80011b6:	011b      	lsls	r3, r3, #4
 80011b8:	b25a      	sxtb	r2, r3
 80011ba:	8bfb      	ldrh	r3, [r7, #30]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	b29b      	uxth	r3, r3
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <pack_cmd+0x1ac>)
 80011ca:	70da      	strb	r2, [r3, #3]
	data[4] = kp_int&0xFF;
 80011cc:	8bfb      	ldrh	r3, [r7, #30]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <pack_cmd+0x1ac>)
 80011d2:	711a      	strb	r2, [r3, #4]
	data[5] = kd_int>>4;
 80011d4:	8bbb      	ldrh	r3, [r7, #28]
 80011d6:	091b      	lsrs	r3, r3, #4
 80011d8:	b29b      	uxth	r3, r3
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <pack_cmd+0x1ac>)
 80011de:	715a      	strb	r2, [r3, #5]
	data[6] = ((kd_int&0xF)<<4)|(t_int>>8);
 80011e0:	8bbb      	ldrh	r3, [r7, #28]
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	b25a      	sxtb	r2, r3
 80011e6:	8b7b      	ldrh	r3, [r7, #26]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <pack_cmd+0x1ac>)
 80011f6:	719a      	strb	r2, [r3, #6]
	data[7] = t_int&0xFF;
 80011f8:	8b7b      	ldrh	r3, [r7, #26]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <pack_cmd+0x1ac>)
 80011fe:	71da      	strb	r2, [r3, #7]
}
 8001200:	bf00      	nop
 8001202:	3738      	adds	r7, #56	; 0x38
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	c2820000 	.word	0xc2820000
 800120c:	42820000 	.word	0x42820000
 8001210:	00000000 	.word	0x00000000
 8001214:	43fa0000 	.word	0x43fa0000
 8001218:	200002f4 	.word	0x200002f4

0800121c <BLDC_CANTx>:
void BLDC_CANTx(){
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
	TxHeader.StdId=canid;
 8001222:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <BLDC_CANTx+0xd8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a34      	ldr	r2, [pc, #208]	; (80012f8 <BLDC_CANTx+0xdc>)
 8001228:	6013      	str	r3, [r2, #0]
	TxHeader.IDE = CAN_ID_STD;
 800122a:	4b33      	ldr	r3, [pc, #204]	; (80012f8 <BLDC_CANTx+0xdc>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 0x08;
 8001230:	4b31      	ldr	r3, [pc, #196]	; (80012f8 <BLDC_CANTx+0xdc>)
 8001232:	2208      	movs	r2, #8
 8001234:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8001236:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <BLDC_CANTx+0xdc>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 800123c:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <BLDC_CANTx+0xdc>)
 800123e:	2200      	movs	r2, #0
 8001240:	751a      	strb	r2, [r3, #20]
//	HAL_CAN_AddTxMessage(&hcan1,&TxHeader,data,&TxMailbox);
//	HAL_Delay(10);

//	int i = 0;
	int count=0;
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) ){
 8001246:	482d      	ldr	r0, [pc, #180]	; (80012fc <BLDC_CANTx+0xe0>)
 8001248:	f002 fda6 	bl	8003d98 <HAL_CAN_GetTxMailboxesFreeLevel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d03f      	beq.n	80012d2 <BLDC_CANTx+0xb6>
		HAL_CAN_AddTxMessage(&hcan1,&TxHeader,data,&TxMailbox);
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <BLDC_CANTx+0xe4>)
 8001254:	4a2b      	ldr	r2, [pc, #172]	; (8001304 <BLDC_CANTx+0xe8>)
 8001256:	4928      	ldr	r1, [pc, #160]	; (80012f8 <BLDC_CANTx+0xdc>)
 8001258:	4828      	ldr	r0, [pc, #160]	; (80012fc <BLDC_CANTx+0xe0>)
 800125a:	f002 fcc2 	bl	8003be2 <HAL_CAN_AddTxMessage>
		HAL_Delay(10);
 800125e:	200a      	movs	r0, #10
 8001260:	f002 fa32 	bl	80036c8 <HAL_Delay>
//		printf("Can Send\r\n"3);
		if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) ){
 8001264:	4825      	ldr	r0, [pc, #148]	; (80012fc <BLDC_CANTx+0xe0>)
 8001266:	f002 fd97 	bl	8003d98 <HAL_CAN_GetTxMailboxesFreeLevel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d02a      	beq.n	80012c6 <BLDC_CANTx+0xaa>
			while(!nextcan_flag){
 8001270:	e025      	b.n	80012be <BLDC_CANTx+0xa2>
				printf("Mailboxes: %d\r\n",HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8001272:	4822      	ldr	r0, [pc, #136]	; (80012fc <BLDC_CANTx+0xe0>)
 8001274:	f002 fd90 	bl	8003d98 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001278:	4603      	mov	r3, r0
 800127a:	4619      	mov	r1, r3
 800127c:	4822      	ldr	r0, [pc, #136]	; (8001308 <BLDC_CANTx+0xec>)
 800127e:	f005 ff9b 	bl	80071b8 <iprintf>
				HAL_CAN_AddTxMessage(&hcan1,&TxHeader,data,&TxMailbox);
 8001282:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <BLDC_CANTx+0xe4>)
 8001284:	4a1f      	ldr	r2, [pc, #124]	; (8001304 <BLDC_CANTx+0xe8>)
 8001286:	491c      	ldr	r1, [pc, #112]	; (80012f8 <BLDC_CANTx+0xdc>)
 8001288:	481c      	ldr	r0, [pc, #112]	; (80012fc <BLDC_CANTx+0xe0>)
 800128a:	f002 fcaa 	bl	8003be2 <HAL_CAN_AddTxMessage>
				HAL_Delay(10);
 800128e:	200a      	movs	r0, #10
 8001290:	f002 fa1a 	bl	80036c8 <HAL_Delay>
				count++;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3301      	adds	r3, #1
 8001298:	607b      	str	r3, [r7, #4]
				if(count==10){
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0a      	cmp	r3, #10
 800129e:	d10e      	bne.n	80012be <BLDC_CANTx+0xa2>
					nextcan_flag=1;
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <BLDC_CANTx+0xf0>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
					get_can_flag=1;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <BLDC_CANTx+0xf4>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
					HAL_CAN_Stop (&hcan1);
 80012ac:	4813      	ldr	r0, [pc, #76]	; (80012fc <BLDC_CANTx+0xe0>)
 80012ae:	f002 fc4f 	bl	8003b50 <HAL_CAN_Stop>
					//HAL_CAN_AbortTxRequest(&hcan1,TxMailbox);
					HAL_CAN_Start(&hcan1);
 80012b2:	4812      	ldr	r0, [pc, #72]	; (80012fc <BLDC_CANTx+0xe0>)
 80012b4:	f002 fc08 	bl	8003ac8 <HAL_CAN_Start>
					printf("CAN RESET\r\n");
 80012b8:	4816      	ldr	r0, [pc, #88]	; (8001314 <BLDC_CANTx+0xf8>)
 80012ba:	f006 f803 	bl	80072c4 <puts>
			while(!nextcan_flag){
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <BLDC_CANTx+0xf0>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0d5      	beq.n	8001272 <BLDC_CANTx+0x56>
				}
			}
		}
		nextcan_flag=0;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <BLDC_CANTx+0xf0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
		count=0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	e008      	b.n	80012e4 <BLDC_CANTx+0xc8>
	}else{
		printf("Mailbox_congestion\r\n");
 80012d2:	4811      	ldr	r0, [pc, #68]	; (8001318 <BLDC_CANTx+0xfc>)
 80012d4:	f005 fff6 	bl	80072c4 <puts>
		nextcan_flag=0;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <BLDC_CANTx+0xf0>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
		get_can_flag=1;
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <BLDC_CANTx+0xf4>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(10);
 80012e4:	200a      	movs	r0, #10
 80012e6:	f002 f9ef 	bl	80036c8 <HAL_Delay>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000300 	.word	0x20000300
 80012f8:	200002c0 	.word	0x200002c0
 80012fc:	20000204 	.word	0x20000204
 8001300:	200002fc 	.word	0x200002fc
 8001304:	200002f4 	.word	0x200002f4
 8001308:	0800b110 	.word	0x0800b110
 800130c:	20000307 	.word	0x20000307
 8001310:	20000306 	.word	0x20000306
 8001314:	0800b120 	.word	0x0800b120
 8001318:	0800b12c 	.word	0x0800b12c

0800131c <unpack_reply>:

void unpack_reply(){
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
    /// unpack ints from can buffer ///
    uint16_t id = data[0];
 8001322:	4b3a      	ldr	r3, [pc, #232]	; (800140c <unpack_reply+0xf0>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	82fb      	strh	r3, [r7, #22]
    uint16_t p_int = (data[1]<<8)|data[2];
 8001328:	4b38      	ldr	r3, [pc, #224]	; (800140c <unpack_reply+0xf0>)
 800132a:	785b      	ldrb	r3, [r3, #1]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	b21a      	sxth	r2, r3
 8001330:	4b36      	ldr	r3, [pc, #216]	; (800140c <unpack_reply+0xf0>)
 8001332:	789b      	ldrb	r3, [r3, #2]
 8001334:	b21b      	sxth	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b21b      	sxth	r3, r3
 800133a:	82bb      	strh	r3, [r7, #20]
    uint16_t v_int = (data[3]<<4)|(data[4]>>4);
 800133c:	4b33      	ldr	r3, [pc, #204]	; (800140c <unpack_reply+0xf0>)
 800133e:	78db      	ldrb	r3, [r3, #3]
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	b21a      	sxth	r2, r3
 8001344:	4b31      	ldr	r3, [pc, #196]	; (800140c <unpack_reply+0xf0>)
 8001346:	791b      	ldrb	r3, [r3, #4]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	b2db      	uxtb	r3, r3
 800134c:	b21b      	sxth	r3, r3
 800134e:	4313      	orrs	r3, r2
 8001350:	b21b      	sxth	r3, r3
 8001352:	827b      	strh	r3, [r7, #18]
    uint16_t i_int = ((data[4]&0xF)<<8)|data[5];
 8001354:	4b2d      	ldr	r3, [pc, #180]	; (800140c <unpack_reply+0xf0>)
 8001356:	791b      	ldrb	r3, [r3, #4]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21b      	sxth	r3, r3
 800135c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001360:	b21a      	sxth	r2, r3
 8001362:	4b2a      	ldr	r3, [pc, #168]	; (800140c <unpack_reply+0xf0>)
 8001364:	795b      	ldrb	r3, [r3, #5]
 8001366:	b21b      	sxth	r3, r3
 8001368:	4313      	orrs	r3, r2
 800136a:	b21b      	sxth	r3, r3
 800136c:	823b      	strh	r3, [r7, #16]

    p_getintdata=p_int;
 800136e:	4a28      	ldr	r2, [pc, #160]	; (8001410 <unpack_reply+0xf4>)
 8001370:	8abb      	ldrh	r3, [r7, #20]
 8001372:	8013      	strh	r3, [r2, #0]
    /// convert uints to floats ///
    float p = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001374:	8abb      	ldrh	r3, [r7, #20]
 8001376:	2110      	movs	r1, #16
 8001378:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 800137c:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 8001380:	4618      	mov	r0, r3
 8001382:	f001 fe57 	bl	8003034 <uint_to_float>
 8001386:	ed87 0a03 	vstr	s0, [r7, #12]
    float v = uint_to_float(v_int, V_MIN, V_MAX, 12);
 800138a:	8a7b      	ldrh	r3, [r7, #18]
 800138c:	210c      	movs	r1, #12
 800138e:	eddf 0a21 	vldr	s1, [pc, #132]	; 8001414 <unpack_reply+0xf8>
 8001392:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8001418 <unpack_reply+0xfc>
 8001396:	4618      	mov	r0, r3
 8001398:	f001 fe4c 	bl	8003034 <uint_to_float>
 800139c:	ed87 0a02 	vstr	s0, [r7, #8]
    float t = uint_to_float(i_int, -T_MAX, T_MAX, 12);
 80013a0:	8a3b      	ldrh	r3, [r7, #16]
 80013a2:	210c      	movs	r1, #12
 80013a4:	eef3 0a02 	vmov.f32	s1, #50	; 0x41900000  18.0
 80013a8:	eebb 0a02 	vmov.f32	s0, #178	; 0xc1900000 -18.0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f001 fe41 	bl	8003034 <uint_to_float>
 80013b2:	ed87 0a01 	vstr	s0, [r7, #4]
    p_getdata=p;
 80013b6:	4a19      	ldr	r2, [pc, #100]	; (800141c <unpack_reply+0x100>)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6013      	str	r3, [r2, #0]
    //printf(" get data \r\n");
    printf("GetUnpackCanData\r\n");
 80013bc:	4818      	ldr	r0, [pc, #96]	; (8001420 <unpack_reply+0x104>)
 80013be:	f005 ff81 	bl	80072c4 <puts>
    printf("ID : %x\r\n",id);
 80013c2:	8afb      	ldrh	r3, [r7, #22]
 80013c4:	4619      	mov	r1, r3
 80013c6:	4817      	ldr	r0, [pc, #92]	; (8001424 <unpack_reply+0x108>)
 80013c8:	f005 fef6 	bl	80071b8 <iprintf>
    printf("Position : %lf\r\n",p);
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f7ff f8db 	bl	8000588 <__aeabi_f2d>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4814      	ldr	r0, [pc, #80]	; (8001428 <unpack_reply+0x10c>)
 80013d8:	f005 feee 	bl	80071b8 <iprintf>
    printf("Velocity : %lf\r\n",v);
 80013dc:	68b8      	ldr	r0, [r7, #8]
 80013de:	f7ff f8d3 	bl	8000588 <__aeabi_f2d>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4811      	ldr	r0, [pc, #68]	; (800142c <unpack_reply+0x110>)
 80013e8:	f005 fee6 	bl	80071b8 <iprintf>
    printf("Current : %lf\r\n",t);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff f8cb 	bl	8000588 <__aeabi_f2d>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	480e      	ldr	r0, [pc, #56]	; (8001430 <unpack_reply+0x114>)
 80013f8:	f005 fede 	bl	80071b8 <iprintf>
	printf("\r\n");
 80013fc:	480d      	ldr	r0, [pc, #52]	; (8001434 <unpack_reply+0x118>)
 80013fe:	f005 ff61 	bl	80072c4 <puts>

}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200002f4 	.word	0x200002f4
 8001410:	20000318 	.word	0x20000318
 8001414:	42820000 	.word	0x42820000
 8001418:	c2820000 	.word	0xc2820000
 800141c:	20000308 	.word	0x20000308
 8001420:	0800b140 	.word	0x0800b140
 8001424:	0800b154 	.word	0x0800b154
 8001428:	0800b160 	.word	0x0800b160
 800142c:	0800b174 	.word	0x0800b174
 8001430:	0800b188 	.word	0x0800b188
 8001434:	0800b198 	.word	0x0800b198

08001438 <BLDC_StartMotorRotate>:
void BLDC_StartMotorRotate(){
 8001438:	b580      	push	{r7, lr}
 800143a:	b08c      	sub	sp, #48	; 0x30
 800143c:	af00      	add	r7, sp, #0
	float m1_startpos;
	float m2_startpos;
	float m1_target_pos;
	float m2_target_pos;
	float i=0.0;
 800143e:	f04f 0300 	mov.w	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
	float m1_dis;
	float m2_dis;
	float set_Kp=20.0;
 8001444:	4bb0      	ldr	r3, [pc, #704]	; (8001708 <BLDC_StartMotorRotate+0x2d0>)
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
	float count_rad=0.05;
 8001448:	4bb0      	ldr	r3, [pc, #704]	; (800170c <BLDC_StartMotorRotate+0x2d4>)
 800144a:	623b      	str	r3, [r7, #32]
	int m1_dir;
	int m2_dir;
	uint8_t count_end=0;
 800144c:	2300      	movs	r3, #0
 800144e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	canid=0x01;
 8001452:	4baf      	ldr	r3, [pc, #700]	; (8001710 <BLDC_StartMotorRotate+0x2d8>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 4.0, 0.0);	//現在の場所の所得
 8001458:	ed9f 2aae 	vldr	s4, [pc, #696]	; 8001714 <BLDC_StartMotorRotate+0x2dc>
 800145c:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8001460:	ed9f 1aac 	vldr	s2, [pc, #688]	; 8001714 <BLDC_StartMotorRotate+0x2dc>
 8001464:	eddf 0aab 	vldr	s1, [pc, #684]	; 8001714 <BLDC_StartMotorRotate+0x2dc>
 8001468:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 8001714 <BLDC_StartMotorRotate+0x2dc>
 800146c:	f7ff fdfe 	bl	800106c <pack_cmd>
	BLDC_CANTx();
 8001470:	f7ff fed4 	bl	800121c <BLDC_CANTx>
	unpack_reply();
 8001474:	f7ff ff52 	bl	800131c <unpack_reply>
	m1_startpos=p_getdata;
 8001478:	4ba7      	ldr	r3, [pc, #668]	; (8001718 <BLDC_StartMotorRotate+0x2e0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	61fb      	str	r3, [r7, #28]
	m1_target_pos=-t_position[0];
 800147e:	4ba7      	ldr	r3, [pc, #668]	; (800171c <BLDC_StartMotorRotate+0x2e4>)
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	eef1 7a67 	vneg.f32	s15, s15
 8001488:	edc7 7a06 	vstr	s15, [r7, #24]
	canid=0x02;
 800148c:	4ba0      	ldr	r3, [pc, #640]	; (8001710 <BLDC_StartMotorRotate+0x2d8>)
 800148e:	2202      	movs	r2, #2
 8001490:	601a      	str	r2, [r3, #0]
	pack_cmd(0.0, 0.0, 0.0, 4.0, 0.0);	//現在の場所の所得
 8001492:	ed9f 2aa0 	vldr	s4, [pc, #640]	; 8001714 <BLDC_StartMotorRotate+0x2dc>
 8001496:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 800149a:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 8001714 <BLDC_StartMotorRotate+0x2dc>
 800149e:	eddf 0a9d 	vldr	s1, [pc, #628]	; 8001714 <BLDC_StartMotorRotate+0x2dc>
 80014a2:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 8001714 <BLDC_StartMotorRotate+0x2dc>
 80014a6:	f7ff fde1 	bl	800106c <pack_cmd>
	BLDC_CANTx();
 80014aa:	f7ff feb7 	bl	800121c <BLDC_CANTx>
	unpack_reply();
 80014ae:	f7ff ff35 	bl	800131c <unpack_reply>
	m2_startpos=p_getdata;
 80014b2:	4b99      	ldr	r3, [pc, #612]	; (8001718 <BLDC_StartMotorRotate+0x2e0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	617b      	str	r3, [r7, #20]
	m2_target_pos=(-t_position[1]+M_PI);
 80014b8:	4b98      	ldr	r3, [pc, #608]	; (800171c <BLDC_StartMotorRotate+0x2e4>)
 80014ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80014be:	eef1 7a67 	vneg.f32	s15, s15
 80014c2:	ee17 3a90 	vmov	r3, s15
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f85e 	bl	8000588 <__aeabi_f2d>
 80014cc:	a38c      	add	r3, pc, #560	; (adr r3, 8001700 <BLDC_StartMotorRotate+0x2c8>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7fe fefb 	bl	80002cc <__adddf3>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff fb83 	bl	8000be8 <__aeabi_d2f>
 80014e2:	4603      	mov	r3, r0
 80014e4:	613b      	str	r3, [r7, #16]
	m1_dis=fabsf(m1_target_pos-m1_startpos);	//目標地点ー現在の地点＝移動距離
 80014e6:	ed97 7a06 	vldr	s14, [r7, #24]
 80014ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80014ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f2:	eef0 7ae7 	vabs.f32	s15, s15
 80014f6:	edc7 7a03 	vstr	s15, [r7, #12]
	m2_dis=fabsf((m2_target_pos-m2_startpos));
 80014fa:	ed97 7a04 	vldr	s14, [r7, #16]
 80014fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001506:	eef0 7ae7 	vabs.f32	s15, s15
 800150a:	edc7 7a02 	vstr	s15, [r7, #8]
	m1_dir=((m1_target_pos-m1_startpos)>=0)?1:-1;
 800150e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001512:	edd7 7a07 	vldr	s15, [r7, #28]
 8001516:	ee77 7a67 	vsub.f32	s15, s14, s15
 800151a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800151e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001522:	db01      	blt.n	8001528 <BLDC_StartMotorRotate+0xf0>
 8001524:	2301      	movs	r3, #1
 8001526:	e001      	b.n	800152c <BLDC_StartMotorRotate+0xf4>
 8001528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800152c:	607b      	str	r3, [r7, #4]
	m2_dir=((m2_target_pos-m2_startpos)>=0)?1:-1;
 800152e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001532:	edd7 7a05 	vldr	s15, [r7, #20]
 8001536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800153a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001542:	db01      	blt.n	8001548 <BLDC_StartMotorRotate+0x110>
 8001544:	2301      	movs	r3, #1
 8001546:	e001      	b.n	800154c <BLDC_StartMotorRotate+0x114>
 8001548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800154c:	603b      	str	r3, [r7, #0]
	printf("m1_target_pos=%f\r\n",m1_target_pos);
 800154e:	69b8      	ldr	r0, [r7, #24]
 8001550:	f7ff f81a 	bl	8000588 <__aeabi_f2d>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4871      	ldr	r0, [pc, #452]	; (8001720 <BLDC_StartMotorRotate+0x2e8>)
 800155a:	f005 fe2d 	bl	80071b8 <iprintf>
	printf("m2_target_pos=%f\r\n",m2_target_pos);
 800155e:	6938      	ldr	r0, [r7, #16]
 8001560:	f7ff f812 	bl	8000588 <__aeabi_f2d>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	486e      	ldr	r0, [pc, #440]	; (8001724 <BLDC_StartMotorRotate+0x2ec>)
 800156a:	f005 fe25 	bl	80071b8 <iprintf>
	printf("m1_startpos=%f\r\n",m1_startpos);
 800156e:	69f8      	ldr	r0, [r7, #28]
 8001570:	f7ff f80a 	bl	8000588 <__aeabi_f2d>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	486b      	ldr	r0, [pc, #428]	; (8001728 <BLDC_StartMotorRotate+0x2f0>)
 800157a:	f005 fe1d 	bl	80071b8 <iprintf>
	printf("m2_startpos=%f\r\n",m2_startpos);
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7ff f802 	bl	8000588 <__aeabi_f2d>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4868      	ldr	r0, [pc, #416]	; (800172c <BLDC_StartMotorRotate+0x2f4>)
 800158a:	f005 fe15 	bl	80071b8 <iprintf>

	i=count_rad;
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(count_rad<m2_dis){
 8001592:	ed97 7a08 	vldr	s14, [r7, #32]
 8001596:	edd7 7a02 	vldr	s15, [r7, #8]
 800159a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a2:	d53c      	bpl.n	800161e <BLDC_StartMotorRotate+0x1e6>
		while(!count_end){
 80015a4:	e037      	b.n	8001616 <BLDC_StartMotorRotate+0x1de>
			i+=(m2_dir*count_rad);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	ee07 3a90 	vmov	s15, r3
 80015ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80015b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80015bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			if(fabsf(i)<m2_dis){
 80015c4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015c8:	eef0 7ae7 	vabs.f32	s15, s15
 80015cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80015d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d8:	dd1a      	ble.n	8001610 <BLDC_StartMotorRotate+0x1d8>
				canid=0x02;
 80015da:	4b4d      	ldr	r3, [pc, #308]	; (8001710 <BLDC_StartMotorRotate+0x2d8>)
 80015dc:	2202      	movs	r2, #2
 80015de:	601a      	str	r2, [r3, #0]
				pack_cmd(m2_startpos+i, 0.0, set_Kp, 2.0, 0.0);	//現在の場所の所得
 80015e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80015e4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ec:	ed9f 2a49 	vldr	s4, [pc, #292]	; 8001714 <BLDC_StartMotorRotate+0x2dc>
 80015f0:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 80015f4:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 80015f8:	eddf 0a46 	vldr	s1, [pc, #280]	; 8001714 <BLDC_StartMotorRotate+0x2dc>
 80015fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001600:	f7ff fd34 	bl	800106c <pack_cmd>
				BLDC_CANTx();
 8001604:	f7ff fe0a 	bl	800121c <BLDC_CANTx>
				HAL_Delay(20);
 8001608:	2014      	movs	r0, #20
 800160a:	f002 f85d 	bl	80036c8 <HAL_Delay>
 800160e:	e002      	b.n	8001616 <BLDC_StartMotorRotate+0x1de>
			}else{
				count_end=1;
 8001610:	2301      	movs	r3, #1
 8001612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		while(!count_end){
 8001616:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0c3      	beq.n	80015a6 <BLDC_StartMotorRotate+0x16e>
			}
		}
	}
	canid=0x02;
 800161e:	4b3c      	ldr	r3, [pc, #240]	; (8001710 <BLDC_StartMotorRotate+0x2d8>)
 8001620:	2202      	movs	r2, #2
 8001622:	601a      	str	r2, [r3, #0]
	pack_cmd(m2_target_pos, 0.0, set_Kp, 2.0, 0.0);	//現在の場所の所得
 8001624:	ed9f 2a3b 	vldr	s4, [pc, #236]	; 8001714 <BLDC_StartMotorRotate+0x2dc>
 8001628:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 800162c:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8001630:	eddf 0a38 	vldr	s1, [pc, #224]	; 8001714 <BLDC_StartMotorRotate+0x2dc>
 8001634:	ed97 0a04 	vldr	s0, [r7, #16]
 8001638:	f7ff fd18 	bl	800106c <pack_cmd>
	BLDC_CANTx();
 800163c:	f7ff fdee 	bl	800121c <BLDC_CANTx>
	count_end=0;
 8001640:	2300      	movs	r3, #0
 8001642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	i=count_rad;
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(count_rad<m1_dis){
 800164a:	ed97 7a08 	vldr	s14, [r7, #32]
 800164e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001652:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165a:	d53c      	bpl.n	80016d6 <BLDC_StartMotorRotate+0x29e>
		while(!count_end){
 800165c:	e037      	b.n	80016ce <BLDC_StartMotorRotate+0x296>
			i+=(m1_dir*count_rad);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001668:	edd7 7a08 	vldr	s15, [r7, #32]
 800166c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001670:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001678:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			if(fabsf(i)<m1_dis){
 800167c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001680:	eef0 7ae7 	vabs.f32	s15, s15
 8001684:	ed97 7a03 	vldr	s14, [r7, #12]
 8001688:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800168c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001690:	dd1a      	ble.n	80016c8 <BLDC_StartMotorRotate+0x290>
				canid=0x01;
 8001692:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <BLDC_StartMotorRotate+0x2d8>)
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]
				pack_cmd(m1_startpos+i, 0.0, set_Kp, 2.0, 0.0);	//現在の場所の所得
 8001698:	ed97 7a07 	vldr	s14, [r7, #28]
 800169c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80016a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a4:	ed9f 2a1b 	vldr	s4, [pc, #108]	; 8001714 <BLDC_StartMotorRotate+0x2dc>
 80016a8:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 80016ac:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 80016b0:	eddf 0a18 	vldr	s1, [pc, #96]	; 8001714 <BLDC_StartMotorRotate+0x2dc>
 80016b4:	eeb0 0a67 	vmov.f32	s0, s15
 80016b8:	f7ff fcd8 	bl	800106c <pack_cmd>
				BLDC_CANTx();
 80016bc:	f7ff fdae 	bl	800121c <BLDC_CANTx>
				HAL_Delay(20);
 80016c0:	2014      	movs	r0, #20
 80016c2:	f002 f801 	bl	80036c8 <HAL_Delay>
 80016c6:	e002      	b.n	80016ce <BLDC_StartMotorRotate+0x296>
			}else{
				count_end=1;
 80016c8:	2301      	movs	r3, #1
 80016ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		while(!count_end){
 80016ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0c3      	beq.n	800165e <BLDC_StartMotorRotate+0x226>
			}
		}
	}

	canid=0x01;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <BLDC_StartMotorRotate+0x2d8>)
 80016d8:	2201      	movs	r2, #1
 80016da:	601a      	str	r2, [r3, #0]
	pack_cmd(m1_target_pos, 0.0, set_Kp, 2.0, 0.0);	//現在の場所の所得
 80016dc:	ed9f 2a0d 	vldr	s4, [pc, #52]	; 8001714 <BLDC_StartMotorRotate+0x2dc>
 80016e0:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 80016e4:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 80016e8:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8001714 <BLDC_StartMotorRotate+0x2dc>
 80016ec:	ed97 0a06 	vldr	s0, [r7, #24]
 80016f0:	f7ff fcbc 	bl	800106c <pack_cmd>
	BLDC_CANTx();
 80016f4:	f7ff fd92 	bl	800121c <BLDC_CANTx>

}
 80016f8:	bf00      	nop
 80016fa:	3730      	adds	r7, #48	; 0x30
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	54442d18 	.word	0x54442d18
 8001704:	400921fb 	.word	0x400921fb
 8001708:	41a00000 	.word	0x41a00000
 800170c:	3d4ccccd 	.word	0x3d4ccccd
 8001710:	20000300 	.word	0x20000300
 8001714:	00000000 	.word	0x00000000
 8001718:	20000308 	.word	0x20000308
 800171c:	2000030c 	.word	0x2000030c
 8001720:	0800b19c 	.word	0x0800b19c
 8001724:	0800b1b0 	.word	0x0800b1b0
 8001728:	0800b1c4 	.word	0x0800b1c4
 800172c:	0800b1d8 	.word	0x0800b1d8

08001730 <BLDC_MotorRotate>:
	canid=0x02;
	pack_cmd(m2_target_pos, 0.0, set_Kp, 2.0, 0.0);	//現在の場所の所得
	BLDC_CANTx();

}
void BLDC_MotorRotate(){
 8001730:	b580      	push	{r7, lr}
 8001732:	b094      	sub	sp, #80	; 0x50
 8001734:	af00      	add	r7, sp, #0
	float count_rad=0.05;
 8001736:	4bc6      	ldr	r3, [pc, #792]	; (8001a50 <BLDC_MotorRotate+0x320>)
 8001738:	623b      	str	r3, [r7, #32]
	float set_Kp=20.0;
 800173a:	4bc6      	ldr	r3, [pc, #792]	; (8001a54 <BLDC_MotorRotate+0x324>)
 800173c:	61fb      	str	r3, [r7, #28]
	float setMax_kp=100.0;
 800173e:	4bc6      	ldr	r3, [pc, #792]	; (8001a58 <BLDC_MotorRotate+0x328>)
 8001740:	61bb      	str	r3, [r7, #24]
	uint8_t count_end=0;
 8001742:	2300      	movs	r3, #0
 8001744:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		int far_dis_dir=0;
 8001748:	2300      	movs	r3, #0
 800174a:	64bb      	str	r3, [r7, #72]	; 0x48
		int near_dis_dir=0;
 800174c:	2300      	movs	r3, #0
 800174e:	647b      	str	r3, [r7, #68]	; 0x44
		uint32_t canid_select_far;
		uint32_t canid_select_near;
		float running_dis[2];
		float far_dis;
		float near_dis;
		float i=0.0;
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	633b      	str	r3, [r7, #48]	; 0x30
		float m2_startpos;
		float m1_target_pos;
		float m2_target_pos;
		float far_startpos;
		float near_startpos;
		canid=0x01;
 8001756:	4bc1      	ldr	r3, [pc, #772]	; (8001a5c <BLDC_MotorRotate+0x32c>)
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]
//		pack_cmd(0.0, 0.0, 0.0, 1.0, 0.0);	//現在の場所の所得
		pack_cmd(0.0, 0.0, 0.0, 1.0, 0.0);	//現在の場所の所得
 800175c:	ed9f 2ac0 	vldr	s4, [pc, #768]	; 8001a60 <BLDC_MotorRotate+0x330>
 8001760:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001764:	ed9f 1abe 	vldr	s2, [pc, #760]	; 8001a60 <BLDC_MotorRotate+0x330>
 8001768:	eddf 0abd 	vldr	s1, [pc, #756]	; 8001a60 <BLDC_MotorRotate+0x330>
 800176c:	ed9f 0abc 	vldr	s0, [pc, #752]	; 8001a60 <BLDC_MotorRotate+0x330>
 8001770:	f7ff fc7c 	bl	800106c <pack_cmd>
		BLDC_CANTx();
 8001774:	f7ff fd52 	bl	800121c <BLDC_CANTx>
		unpack_reply();
 8001778:	f7ff fdd0 	bl	800131c <unpack_reply>
		HAL_Delay(10);
 800177c:	200a      	movs	r0, #10
 800177e:	f001 ffa3 	bl	80036c8 <HAL_Delay>
		m1_target_pos=-t_position[0];
 8001782:	4bb8      	ldr	r3, [pc, #736]	; (8001a64 <BLDC_MotorRotate+0x334>)
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	eef1 7a67 	vneg.f32	s15, s15
 800178c:	edc7 7a05 	vstr	s15, [r7, #20]
		m1_startpos=p_getdata;
 8001790:	4bb5      	ldr	r3, [pc, #724]	; (8001a68 <BLDC_MotorRotate+0x338>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	613b      	str	r3, [r7, #16]
		running_dis[0]=fabsf(m1_target_pos-m1_startpos);	//目標地点ー現在の地点＝移動距離
 8001796:	ed97 7a05 	vldr	s14, [r7, #20]
 800179a:	edd7 7a04 	vldr	s15, [r7, #16]
 800179e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a2:	eef0 7ae7 	vabs.f32	s15, s15
 80017a6:	edc7 7a00 	vstr	s15, [r7]
		canid=0x02;
 80017aa:	4bac      	ldr	r3, [pc, #688]	; (8001a5c <BLDC_MotorRotate+0x32c>)
 80017ac:	2202      	movs	r2, #2
 80017ae:	601a      	str	r2, [r3, #0]
		pack_cmd(0.0, 0.0, 0.0, 1.0, 0.0);	//現在の場所の所得
 80017b0:	ed9f 2aab 	vldr	s4, [pc, #684]	; 8001a60 <BLDC_MotorRotate+0x330>
 80017b4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80017b8:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 8001a60 <BLDC_MotorRotate+0x330>
 80017bc:	eddf 0aa8 	vldr	s1, [pc, #672]	; 8001a60 <BLDC_MotorRotate+0x330>
 80017c0:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 8001a60 <BLDC_MotorRotate+0x330>
 80017c4:	f7ff fc52 	bl	800106c <pack_cmd>
		BLDC_CANTx();
 80017c8:	f7ff fd28 	bl	800121c <BLDC_CANTx>
		unpack_reply();
 80017cc:	f7ff fda6 	bl	800131c <unpack_reply>
		HAL_Delay(10);
 80017d0:	200a      	movs	r0, #10
 80017d2:	f001 ff79 	bl	80036c8 <HAL_Delay>
		m2_target_pos=(-t_position[1]+M_PI);
 80017d6:	4ba3      	ldr	r3, [pc, #652]	; (8001a64 <BLDC_MotorRotate+0x334>)
 80017d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80017dc:	eef1 7a67 	vneg.f32	s15, s15
 80017e0:	ee17 3a90 	vmov	r3, s15
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fecf 	bl	8000588 <__aeabi_f2d>
 80017ea:	a397      	add	r3, pc, #604	; (adr r3, 8001a48 <BLDC_MotorRotate+0x318>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	f7fe fd6c 	bl	80002cc <__adddf3>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f7ff f9f4 	bl	8000be8 <__aeabi_d2f>
 8001800:	4603      	mov	r3, r0
 8001802:	60fb      	str	r3, [r7, #12]
		m2_startpos=p_getdata;
 8001804:	4b98      	ldr	r3, [pc, #608]	; (8001a68 <BLDC_MotorRotate+0x338>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60bb      	str	r3, [r7, #8]
		running_dis[1]=fabsf((m2_target_pos-m2_startpos));
 800180a:	ed97 7a03 	vldr	s14, [r7, #12]
 800180e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001816:	eef0 7ae7 	vabs.f32	s15, s15
 800181a:	edc7 7a01 	vstr	s15, [r7, #4]

		printf("m1_running_dis=%f\r\n",running_dis[0]);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe feb1 	bl	8000588 <__aeabi_f2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4890      	ldr	r0, [pc, #576]	; (8001a6c <BLDC_MotorRotate+0x33c>)
 800182c:	f005 fcc4 	bl	80071b8 <iprintf>
		printf("m2_running_dis=%f\r\n",running_dis[1]);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fea8 	bl	8000588 <__aeabi_f2d>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	488c      	ldr	r0, [pc, #560]	; (8001a70 <BLDC_MotorRotate+0x340>)
 800183e:	f005 fcbb 	bl	80071b8 <iprintf>
		printf("m1_target_pos=%f\r\n",m1_target_pos);
 8001842:	6978      	ldr	r0, [r7, #20]
 8001844:	f7fe fea0 	bl	8000588 <__aeabi_f2d>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4889      	ldr	r0, [pc, #548]	; (8001a74 <BLDC_MotorRotate+0x344>)
 800184e:	f005 fcb3 	bl	80071b8 <iprintf>
		printf("m2_target_pos=%f\r\n",m2_target_pos);
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f7fe fe98 	bl	8000588 <__aeabi_f2d>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4886      	ldr	r0, [pc, #536]	; (8001a78 <BLDC_MotorRotate+0x348>)
 800185e:	f005 fcab 	bl	80071b8 <iprintf>
		printf("m1_startpos=%f\r\n",m1_startpos);
 8001862:	6938      	ldr	r0, [r7, #16]
 8001864:	f7fe fe90 	bl	8000588 <__aeabi_f2d>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4883      	ldr	r0, [pc, #524]	; (8001a7c <BLDC_MotorRotate+0x34c>)
 800186e:	f005 fca3 	bl	80071b8 <iprintf>
		printf("m2_startpos=%f\r\n",m2_startpos);
 8001872:	68b8      	ldr	r0, [r7, #8]
 8001874:	f7fe fe88 	bl	8000588 <__aeabi_f2d>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4880      	ldr	r0, [pc, #512]	; (8001a80 <BLDC_MotorRotate+0x350>)
 800187e:	f005 fc9b 	bl	80071b8 <iprintf>
		if(running_dis[0]>running_dis[1]){
 8001882:	ed97 7a00 	vldr	s14, [r7]
 8001886:	edd7 7a01 	vldr	s15, [r7, #4]
 800188a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800188e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001892:	dd34      	ble.n	80018fe <BLDC_MotorRotate+0x1ce>

			far_dis=running_dis[0];
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	63bb      	str	r3, [r7, #56]	; 0x38
			near_dis=running_dis[1];
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	637b      	str	r3, [r7, #52]	; 0x34
			canid_select_far=0x01;
 800189c:	2301      	movs	r3, #1
 800189e:	643b      	str	r3, [r7, #64]	; 0x40
			canid_select_near=0x02;
 80018a0:	2302      	movs	r3, #2
 80018a2:	63fb      	str	r3, [r7, #60]	; 0x3c
			far_startpos=m1_startpos;
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			near_startpos=m2_startpos;
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28

			far_dis_dir=((m1_target_pos-m1_startpos)>=0)?1:-1;
 80018ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80018b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80018b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c0:	db01      	blt.n	80018c6 <BLDC_MotorRotate+0x196>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e001      	b.n	80018ca <BLDC_MotorRotate+0x19a>
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ca:	64bb      	str	r3, [r7, #72]	; 0x48
			near_dis_dir=((m2_target_pos-m2_startpos)>=0)?1:-1;
 80018cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80018d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e0:	db01      	blt.n	80018e6 <BLDC_MotorRotate+0x1b6>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e001      	b.n	80018ea <BLDC_MotorRotate+0x1ba>
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ea:	647b      	str	r3, [r7, #68]	; 0x44
			printf("m1_dir=%d\r\n",far_dis_dir);
 80018ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80018ee:	4865      	ldr	r0, [pc, #404]	; (8001a84 <BLDC_MotorRotate+0x354>)
 80018f0:	f005 fc62 	bl	80071b8 <iprintf>
			printf("m2_dir=%d\r\n",near_dis_dir);
 80018f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80018f6:	4864      	ldr	r0, [pc, #400]	; (8001a88 <BLDC_MotorRotate+0x358>)
 80018f8:	f005 fc5e 	bl	80071b8 <iprintf>
 80018fc:	e033      	b.n	8001966 <BLDC_MotorRotate+0x236>
		}else{
			far_dis=running_dis[1];
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	63bb      	str	r3, [r7, #56]	; 0x38
			near_dis=running_dis[0];
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	637b      	str	r3, [r7, #52]	; 0x34
			canid_select_far=0x02;
 8001906:	2302      	movs	r3, #2
 8001908:	643b      	str	r3, [r7, #64]	; 0x40
			canid_select_near=0x01;
 800190a:	2301      	movs	r3, #1
 800190c:	63fb      	str	r3, [r7, #60]	; 0x3c
			far_startpos=m2_startpos;
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
			near_startpos=m1_startpos;
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	62bb      	str	r3, [r7, #40]	; 0x28
			far_dis_dir=((m2_target_pos-m2_startpos)>=0)?1:-1;
 8001916:	ed97 7a03 	vldr	s14, [r7, #12]
 800191a:	edd7 7a02 	vldr	s15, [r7, #8]
 800191e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001922:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192a:	db01      	blt.n	8001930 <BLDC_MotorRotate+0x200>
 800192c:	2301      	movs	r3, #1
 800192e:	e001      	b.n	8001934 <BLDC_MotorRotate+0x204>
 8001930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001934:	64bb      	str	r3, [r7, #72]	; 0x48
			near_dis_dir=((m1_target_pos-m1_startpos)>=0)?1:-1;
 8001936:	ed97 7a05 	vldr	s14, [r7, #20]
 800193a:	edd7 7a04 	vldr	s15, [r7, #16]
 800193e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001942:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194a:	db01      	blt.n	8001950 <BLDC_MotorRotate+0x220>
 800194c:	2301      	movs	r3, #1
 800194e:	e001      	b.n	8001954 <BLDC_MotorRotate+0x224>
 8001950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001954:	647b      	str	r3, [r7, #68]	; 0x44
			printf("m2_dir=%d\r\n",far_dis_dir);
 8001956:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001958:	484b      	ldr	r0, [pc, #300]	; (8001a88 <BLDC_MotorRotate+0x358>)
 800195a:	f005 fc2d 	bl	80071b8 <iprintf>
			printf("m1_dir=%d\r\n",near_dis_dir);
 800195e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001960:	4848      	ldr	r0, [pc, #288]	; (8001a84 <BLDC_MotorRotate+0x354>)
 8001962:	f005 fc29 	bl	80071b8 <iprintf>
		}

		if (far_dis>count_rad){
 8001966:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800196a:	edd7 7a08 	vldr	s15, [r7, #32]
 800196e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001976:	f340 80c2 	ble.w	8001afe <BLDC_MotorRotate+0x3ce>
			printf("phase1_done\r\n");
 800197a:	4844      	ldr	r0, [pc, #272]	; (8001a8c <BLDC_MotorRotate+0x35c>)
 800197c:	f005 fca2 	bl	80072c4 <puts>
			while(!count_end){
 8001980:	e0b8      	b.n	8001af4 <BLDC_MotorRotate+0x3c4>
				i+=(far_dis_dir*count_rad);
 8001982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001984:	ee07 3a90 	vmov	s15, r3
 8001988:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800198c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001994:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
//				printf("phase2_done\r\n");
//				printf("i=%f\r\n",i);
//				printf("far_dis=%f\r\n",far_dis);
				if(fabsf(i)<far_dis){
 80019a0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019a4:	eef0 7ae7 	vabs.f32	s15, s15
 80019a8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80019ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b4:	dd6c      	ble.n	8001a90 <BLDC_MotorRotate+0x360>
//					printf("phase3_done\r\n");
					canid=canid_select_far;
 80019b6:	4a29      	ldr	r2, [pc, #164]	; (8001a5c <BLDC_MotorRotate+0x32c>)
 80019b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019ba:	6013      	str	r3, [r2, #0]
					pack_cmd(far_startpos+i, 0.0, set_Kp, 2.0, 0.0);	//現在の場所の所得
 80019bc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80019c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c8:	ed9f 2a25 	vldr	s4, [pc, #148]	; 8001a60 <BLDC_MotorRotate+0x330>
 80019cc:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 80019d0:	ed97 1a07 	vldr	s2, [r7, #28]
 80019d4:	eddf 0a22 	vldr	s1, [pc, #136]	; 8001a60 <BLDC_MotorRotate+0x330>
 80019d8:	eeb0 0a67 	vmov.f32	s0, s15
 80019dc:	f7ff fb46 	bl	800106c <pack_cmd>
					BLDC_CANTx();
 80019e0:	f7ff fc1c 	bl	800121c <BLDC_CANTx>
					HAL_Delay(20);
 80019e4:	2014      	movs	r0, #20
 80019e6:	f001 fe6f 	bl	80036c8 <HAL_Delay>
					canid=canid_select_near;
 80019ea:	4a1c      	ldr	r2, [pc, #112]	; (8001a5c <BLDC_MotorRotate+0x32c>)
 80019ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ee:	6013      	str	r3, [r2, #0]
					pack_cmd(near_startpos+fabsf(i)*(near_dis/far_dis)*near_dis_dir, 0.0, set_Kp, 2.0, 0.0);	//現在の場所の所得
 80019f0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019f4:	eeb0 7ae7 	vabs.f32	s14, s15
 80019f8:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 80019fc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001a00:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a16:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1e:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8001a60 <BLDC_MotorRotate+0x330>
 8001a22:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8001a26:	ed97 1a07 	vldr	s2, [r7, #28]
 8001a2a:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8001a60 <BLDC_MotorRotate+0x330>
 8001a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a32:	f7ff fb1b 	bl	800106c <pack_cmd>
					BLDC_CANTx();
 8001a36:	f7ff fbf1 	bl	800121c <BLDC_CANTx>
					HAL_Delay(20);
 8001a3a:	2014      	movs	r0, #20
 8001a3c:	f001 fe44 	bl	80036c8 <HAL_Delay>
 8001a40:	e058      	b.n	8001af4 <BLDC_MotorRotate+0x3c4>
 8001a42:	bf00      	nop
 8001a44:	f3af 8000 	nop.w
 8001a48:	54442d18 	.word	0x54442d18
 8001a4c:	400921fb 	.word	0x400921fb
 8001a50:	3d4ccccd 	.word	0x3d4ccccd
 8001a54:	41a00000 	.word	0x41a00000
 8001a58:	42c80000 	.word	0x42c80000
 8001a5c:	20000300 	.word	0x20000300
 8001a60:	00000000 	.word	0x00000000
 8001a64:	2000030c 	.word	0x2000030c
 8001a68:	20000308 	.word	0x20000308
 8001a6c:	0800b204 	.word	0x0800b204
 8001a70:	0800b218 	.word	0x0800b218
 8001a74:	0800b19c 	.word	0x0800b19c
 8001a78:	0800b1b0 	.word	0x0800b1b0
 8001a7c:	0800b1c4 	.word	0x0800b1c4
 8001a80:	0800b1d8 	.word	0x0800b1d8
 8001a84:	0800b22c 	.word	0x0800b22c
 8001a88:	0800b238 	.word	0x0800b238
 8001a8c:	0800b244 	.word	0x0800b244
				}
				else{
					printf("far_targetpos=%f\r\n",far_startpos+i);
 8001a90:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001a94:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9c:	ee17 0a90 	vmov	r0, s15
 8001aa0:	f7fe fd72 	bl	8000588 <__aeabi_f2d>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4848      	ldr	r0, [pc, #288]	; (8001bcc <BLDC_MotorRotate+0x49c>)
 8001aaa:	f005 fb85 	bl	80071b8 <iprintf>
					printf("near_targetpos=%f\r\n",near_startpos+fabsf(i)*(near_dis/far_dis)*near_dis_dir);
 8001aae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ab2:	eeb0 7ae7 	vabs.f32	s14, s15
 8001ab6:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8001aba:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001abe:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001ac2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac8:	ee07 3a90 	vmov	s15, r3
 8001acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ad4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001adc:	ee17 0a90 	vmov	r0, s15
 8001ae0:	f7fe fd52 	bl	8000588 <__aeabi_f2d>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4839      	ldr	r0, [pc, #228]	; (8001bd0 <BLDC_MotorRotate+0x4a0>)
 8001aea:	f005 fb65 	bl	80071b8 <iprintf>
					count_end=1;
 8001aee:	2301      	movs	r3, #1
 8001af0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			while(!count_end){
 8001af4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f43f af42 	beq.w	8001982 <BLDC_MotorRotate+0x252>
//		canid=0x02;
//		pack_cmd(m2_target_pos, 0.0, setMax_kp, 3.0, 0.0);	//現在の場所の所得
//		BLDC_CANTx();
//		HAL_Delay(30);
//		m1_last_pos=m1_target_pos;
		for(int i=1;i<=50;i++){
 8001afe:	2301      	movs	r3, #1
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
 8001b02:	e05b      	b.n	8001bbc <BLDC_MotorRotate+0x48c>
			if(set_Kp+i*10<=setMax_kp){
 8001b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	ee07 3a90 	vmov	s15, r3
 8001b12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b16:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2a:	db42      	blt.n	8001bb2 <BLDC_MotorRotate+0x482>
			canid=0x01;
 8001b2c:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <BLDC_MotorRotate+0x4a4>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]
			pack_cmd(m1_target_pos, 0.0, set_Kp+i*10, 2.0, 0.0);	//現在の場所の所得
 8001b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	ee07 3a90 	vmov	s15, r3
 8001b40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b44:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4c:	ed9f 2a22 	vldr	s4, [pc, #136]	; 8001bd8 <BLDC_MotorRotate+0x4a8>
 8001b50:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8001b54:	eeb0 1a67 	vmov.f32	s2, s15
 8001b58:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8001bd8 <BLDC_MotorRotate+0x4a8>
 8001b5c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001b60:	f7ff fa84 	bl	800106c <pack_cmd>
			BLDC_CANTx();
 8001b64:	f7ff fb5a 	bl	800121c <BLDC_CANTx>
			HAL_Delay(20);
 8001b68:	2014      	movs	r0, #20
 8001b6a:	f001 fdad 	bl	80036c8 <HAL_Delay>
			canid=0x02;
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <BLDC_MotorRotate+0x4a4>)
 8001b70:	2202      	movs	r2, #2
 8001b72:	601a      	str	r2, [r3, #0]
			pack_cmd(m2_target_pos, 0.0, set_Kp+i*10, 2.0, 0.0);	//現在の場所の所得
 8001b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	ee07 3a90 	vmov	s15, r3
 8001b82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b86:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8e:	ed9f 2a12 	vldr	s4, [pc, #72]	; 8001bd8 <BLDC_MotorRotate+0x4a8>
 8001b92:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8001b96:	eeb0 1a67 	vmov.f32	s2, s15
 8001b9a:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8001bd8 <BLDC_MotorRotate+0x4a8>
 8001b9e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001ba2:	f7ff fa63 	bl	800106c <pack_cmd>
			BLDC_CANTx();
 8001ba6:	f7ff fb39 	bl	800121c <BLDC_CANTx>
			HAL_Delay(20);
 8001baa:	2014      	movs	r0, #20
 8001bac:	f001 fd8c 	bl	80036c8 <HAL_Delay>
 8001bb0:	e001      	b.n	8001bb6 <BLDC_MotorRotate+0x486>
			}else{
				i=50;
 8001bb2:	2332      	movs	r3, #50	; 0x32
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
		for(int i=1;i<=50;i++){
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	3301      	adds	r3, #1
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	2b32      	cmp	r3, #50	; 0x32
 8001bc0:	dda0      	ble.n	8001b04 <BLDC_MotorRotate+0x3d4>
			}

		}
}
 8001bc2:	bf00      	nop
 8001bc4:	bf00      	nop
 8001bc6:	3750      	adds	r7, #80	; 0x50
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	0800b254 	.word	0x0800b254
 8001bd0:	0800b268 	.word	0x0800b268
 8001bd4:	20000300 	.word	0x20000300
	...

08001be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b0aa      	sub	sp, #168	; 0xa8
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001be6:	f001 fcfd 	bl	80035e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bea:	f000 fd8f 	bl	800270c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bee:	f000 fe93 	bl	8002918 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001bf2:	f000 fe67 	bl	80028c4 <MX_USART2_UART_Init>
  MX_CAN2_Init();
 8001bf6:	f000 fe2d 	bl	8002854 <MX_CAN2_Init>
  MX_CAN1_Init();
 8001bfa:	f000 fdf3 	bl	80027e4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t Init_flag=0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)!=1){	//リミットスイッチON→待機状態
 8001c04:	2120      	movs	r1, #32
 8001c06:	48be      	ldr	r0, [pc, #760]	; (8001f00 <main+0x320>)
 8001c08:	f002 ff90 	bl	8004b2c <HAL_GPIO_ReadPin>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d006      	beq.n	8001c20 <main+0x40>
		  home_position_state=1;
 8001c12:	4bbc      	ldr	r3, [pc, #752]	; (8001f04 <main+0x324>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]
		  printf("home_position_state\r\n");
 8001c18:	48bb      	ldr	r0, [pc, #748]	; (8001f08 <main+0x328>)
 8001c1a:	f005 fb53 	bl	80072c4 <puts>
 8001c1e:	e005      	b.n	8001c2c <main+0x4c>
	  }else{
		  home_position_state=0;
 8001c20:	4bb8      	ldr	r3, [pc, #736]	; (8001f04 <main+0x324>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
		  printf("Error!\r\n");
 8001c26:	48b9      	ldr	r0, [pc, #740]	; (8001f0c <main+0x32c>)
 8001c28:	f005 fb4c 	bl	80072c4 <puts>
	  }
sFilterConfig.FilterBank = 0;
 8001c2c:	4bb8      	ldr	r3, [pc, #736]	; (8001f10 <main+0x330>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	615a      	str	r2, [r3, #20]
sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001c32:	4bb7      	ldr	r3, [pc, #732]	; (8001f10 <main+0x330>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001c38:	4bb5      	ldr	r3, [pc, #724]	; (8001f10 <main+0x330>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	61da      	str	r2, [r3, #28]
sFilterConfig.FilterIdHigh = 0x0000;
 8001c3e:	4bb4      	ldr	r3, [pc, #720]	; (8001f10 <main+0x330>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
sFilterConfig.FilterIdLow = 0x0000;
 8001c44:	4bb2      	ldr	r3, [pc, #712]	; (8001f10 <main+0x330>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	605a      	str	r2, [r3, #4]
sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001c4a:	4bb1      	ldr	r3, [pc, #708]	; (8001f10 <main+0x330>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
sFilterConfig.FilterMaskIdLow = 0x0000;
 8001c50:	4baf      	ldr	r3, [pc, #700]	; (8001f10 <main+0x330>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001c56:	4bae      	ldr	r3, [pc, #696]	; (8001f10 <main+0x330>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
//	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;
sFilterConfig.FilterActivation=ENABLE;
 8001c5c:	4bac      	ldr	r3, [pc, #688]	; (8001f10 <main+0x330>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	621a      	str	r2, [r3, #32]
sFilterConfig.SlaveStartFilterBank=14;
 8001c62:	4bab      	ldr	r3, [pc, #684]	; (8001f10 <main+0x330>)
 8001c64:	220e      	movs	r2, #14
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24

if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 8001c68:	49a9      	ldr	r1, [pc, #676]	; (8001f10 <main+0x330>)
 8001c6a:	48aa      	ldr	r0, [pc, #680]	; (8001f14 <main+0x334>)
 8001c6c:	f001 fe4c 	bl	8003908 <HAL_CAN_ConfigFilter>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <main+0x9a>
{
	Error_Handler();
 8001c76:	f001 f96d 	bl	8002f54 <Error_Handler>
}
if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 8001c7a:	48a6      	ldr	r0, [pc, #664]	; (8001f14 <main+0x334>)
 8001c7c:	f001 ff24 	bl	8003ac8 <HAL_CAN_Start>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <main+0xaa>
{
	Error_Handler();
 8001c86:	f001 f965 	bl	8002f54 <Error_Handler>
}

if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8001c8a:	2103      	movs	r1, #3
 8001c8c:	48a1      	ldr	r0, [pc, #644]	; (8001f14 <main+0x334>)
 8001c8e:	f002 f9ca 	bl	8004026 <HAL_CAN_ActivateNotification>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <main+0xbc>
{
	Error_Handler();
 8001c98:	f001 f95c 	bl	8002f54 <Error_Handler>
}
char KeyCommand[10];
char Mode_Type[4];
int sent_data[10];
uint32_t Mode_selection=0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
float teaching_data[2];
float rad_data[2];
float coordinate_data[2];
float origin_rad_pos[10];
float origin_coordinate_pos[10];
origin_coordinate_pos[0]=0.0;
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	603b      	str	r3, [r7, #0]
origin_coordinate_pos[1]=300.0;
 8001ca8:	4b9b      	ldr	r3, [pc, #620]	; (8001f18 <main+0x338>)
 8001caa:	607b      	str	r3, [r7, #4]
BLDC_IK(origin_coordinate_pos[0],origin_coordinate_pos[1],&rad_data[0],&rad_data[1]);
 8001cac:	edd7 7a00 	vldr	s15, [r7]
 8001cb0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cb8:	1d1a      	adds	r2, r3, #4
 8001cba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	eef0 0a47 	vmov.f32	s1, s14
 8001cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cca:	f000 ff8f 	bl	8002bec <BLDC_IK>
origin_rad_pos[0]=rad_data[0];
 8001cce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
origin_rad_pos[1]=rad_data[1];
 8001cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
printf("s1=%f\r\n",rad_data[0]);
 8001cd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fc55 	bl	8000588 <__aeabi_f2d>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	488e      	ldr	r0, [pc, #568]	; (8001f1c <main+0x33c>)
 8001ce4:	f005 fa68 	bl	80071b8 <iprintf>
printf("s2=%f\r\n",rad_data[1]);
 8001ce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc4c 	bl	8000588 <__aeabi_f2d>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	488a      	ldr	r0, [pc, #552]	; (8001f20 <main+0x340>)
 8001cf6:	f005 fa5f 	bl	80071b8 <iprintf>
KeyCommand[0]=0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
printf("BLDC Start\r\n");
 8001d00:	4888      	ldr	r0, [pc, #544]	; (8001f24 <main+0x344>)
 8001d02:	f005 fadf 	bl	80072c4 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  KeyCommand[0]=0;
	  home_position_state=0;
 8001d06:	4b7f      	ldr	r3, [pc, #508]	; (8001f04 <main+0x324>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
	  get_uart_flag=0;
 8001d0c:	4b86      	ldr	r3, [pc, #536]	; (8001f28 <main+0x348>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2, (uint8_t *)KeyCommand, buffersize);
 8001d12:	4b86      	ldr	r3, [pc, #536]	; (8001f2c <main+0x34c>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4884      	ldr	r0, [pc, #528]	; (8001f30 <main+0x350>)
 8001d20:	f003 fe15 	bl	800594e <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart2, (uint8_t *)KeyCommand, buffersize,300);
 8001d24:	4b81      	ldr	r3, [pc, #516]	; (8001f2c <main+0x34c>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8001d2e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001d32:	487f      	ldr	r0, [pc, #508]	; (8001f30 <main+0x350>)
 8001d34:	f003 fd79 	bl	800582a <HAL_UART_Transmit>
	  //受信するまで待つ
	  while(!get_uart_flag){}
 8001d38:	bf00      	nop
 8001d3a:	4b7b      	ldr	r3, [pc, #492]	; (8001f28 <main+0x348>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0fb      	beq.n	8001d3a <main+0x15a>
	  get_can_flag=1;//canデータ受信用のフラグを0に
 8001d42:	4b7c      	ldr	r3, [pc, #496]	; (8001f34 <main+0x354>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	701a      	strb	r2, [r3, #0]
	  if(KeyCommand[0]!=0 && home_position_state==1){
 8001d48:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d042      	beq.n	8001dd6 <main+0x1f6>
 8001d50:	4b6c      	ldr	r3, [pc, #432]	; (8001f04 <main+0x324>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d13e      	bne.n	8001dd6 <main+0x1f6>
		  switch(KeyCommand[0]){
 8001d58:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001d5c:	2b69      	cmp	r3, #105	; 0x69
 8001d5e:	d12a      	bne.n	8001db6 <main+0x1d6>
		  case'i':
			  printf("case : i\r\n");
 8001d60:	4875      	ldr	r0, [pc, #468]	; (8001f38 <main+0x358>)
 8001d62:	f005 faaf 	bl	80072c4 <puts>
			  Mode_Type[0]=0xA0;
 8001d66:	23a0      	movs	r3, #160	; 0xa0
 8001d68:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			  Mode_Type[1]=0xFF;
 8001d6c:	23ff      	movs	r3, #255	; 0xff
 8001d6e:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
			  Mode_Type[2]=0xFF;
 8001d72:	23ff      	movs	r3, #255	; 0xff
 8001d74:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			  Mode_Type[3]=0xFF;
 8001d78:	23ff      	movs	r3, #255	; 0xff
 8001d7a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
//			  printf("Mode_selection　%x\r\n",Mode_selection);
			  Mode_selection=Mode_Type[0]<<24|Mode_Type[1]<<16|Mode_Type[2]<<8|Mode_Type[3];
 8001d7e:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8001d82:	061a      	lsls	r2, r3, #24
 8001d84:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001d88:	041b      	lsls	r3, r3, #16
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	4313      	orrs	r3, r2
 8001d94:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  Mode_selection=Mode_selection>>24&0xFF;
 8001d9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001da2:	0e1b      	lsrs	r3, r3, #24
 8001da4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  HAL_Delay(10);
 8001da8:	200a      	movs	r0, #10
 8001daa:	f001 fc8d 	bl	80036c8 <HAL_Delay>
			  KeyCommand[0]=0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 8001db4:	e00c      	b.n	8001dd0 <main+0x1f0>
		  default:
			  printf("NoCommand:%x\r\n",KeyCommand[0]);
 8001db6:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001dba:	4619      	mov	r1, r3
 8001dbc:	485f      	ldr	r0, [pc, #380]	; (8001f3c <main+0x35c>)
 8001dbe:	f005 f9fb 	bl	80071b8 <iprintf>
			  KeyCommand[0]=0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  get_can_flag=1;
 8001dc8:	4b5a      	ldr	r3, [pc, #360]	; (8001f34 <main+0x354>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
			  break;
 8001dce:	bf00      	nop
		  }
		  get_uart_flag=0;
 8001dd0:	4b55      	ldr	r3, [pc, #340]	; (8001f28 <main+0x348>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
	  }
	  if(KeyCommand[0]!=0 && home_position_state==0){
 8001dd6:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 8219 	beq.w	8002212 <main+0x632>
 8001de0:	4b48      	ldr	r3, [pc, #288]	; (8001f04 <main+0x324>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f040 8214 	bne.w	8002212 <main+0x632>
		  switch(KeyCommand[0]){
 8001dea:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001dee:	3b65      	subs	r3, #101	; 0x65
 8001df0:	2b15      	cmp	r3, #21
 8001df2:	f200 8201 	bhi.w	80021f8 <main+0x618>
 8001df6:	a201      	add	r2, pc, #4	; (adr r2, 8001dfc <main+0x21c>)
 8001df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfc:	080020a1 	.word	0x080020a1
 8001e00:	080021f9 	.word	0x080021f9
 8001e04:	080021f9 	.word	0x080021f9
 8001e08:	080021a3 	.word	0x080021a3
 8001e0c:	080021f9 	.word	0x080021f9
 8001e10:	080021f9 	.word	0x080021f9
 8001e14:	080021f9 	.word	0x080021f9
 8001e18:	080021f9 	.word	0x080021f9
 8001e1c:	08001e55 	.word	0x08001e55
 8001e20:	08001f9f 	.word	0x08001f9f
 8001e24:	080021f9 	.word	0x080021f9
 8001e28:	080021f9 	.word	0x080021f9
 8001e2c:	0800204b 	.word	0x0800204b
 8001e30:	080021f9 	.word	0x080021f9
 8001e34:	08001f49 	.word	0x08001f49
 8001e38:	08001eab 	.word	0x08001eab
 8001e3c:	080021f9 	.word	0x080021f9
 8001e40:	080021f9 	.word	0x080021f9
 8001e44:	08001ff5 	.word	0x08001ff5
 8001e48:	0800214d 	.word	0x0800214d
 8001e4c:	080021f9 	.word	0x080021f9
 8001e50:	080020f7 	.word	0x080020f7
		  //void pack_cmd(float _p_des, float _v_des, float _kp, float _kd, float _t_ff)
		  case'm':
			  printf("case : m\r\n");
 8001e54:	483a      	ldr	r0, [pc, #232]	; (8001f40 <main+0x360>)
 8001e56:	f005 fa35 	bl	80072c4 <puts>
			  Mode_Type[0]=0x0A;
 8001e5a:	230a      	movs	r3, #10
 8001e5c:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			  Mode_Type[1]=0x00;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
			  Mode_Type[2]=0x00;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			  Mode_Type[3]=0x00;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
//			  printf("Mode_selection　%x\r\n",Mode_selection);
			  Mode_selection=Mode_Type[0]<<24|Mode_Type[1]<<16|Mode_Type[2]<<8|Mode_Type[3];
 8001e72:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8001e76:	061a      	lsls	r2, r3, #24
 8001e78:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001e7c:	041b      	lsls	r3, r3, #16
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  Mode_selection=Mode_selection>>24&0xFF;
 8001e92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e96:	0e1b      	lsrs	r3, r3, #24
 8001e98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
//			  printf("Mode_selection　%x\r\n",Mode_selection);
			  HAL_Delay(10);
 8001e9c:	200a      	movs	r0, #10
 8001e9e:	f001 fc13 	bl	80036c8 <HAL_Delay>
			  KeyCommand[0]=0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 8001ea8:	e1b0      	b.n	800220c <main+0x62c>
		  case't':
			  printf("case : t\r\n");
 8001eaa:	4826      	ldr	r0, [pc, #152]	; (8001f44 <main+0x364>)
 8001eac:	f005 fa0a 	bl	80072c4 <puts>
			  Mode_Type[0]=0x0B;
 8001eb0:	230b      	movs	r3, #11
 8001eb2:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			  Mode_Type[1]=0x00;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
			  Mode_Type[2]=0x00;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			  Mode_Type[3]=0x00;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			  Mode_selection=Mode_Type[0]<<24|Mode_Type[1]<<16|Mode_Type[2]<<8|Mode_Type[3];
 8001ec8:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8001ecc:	061a      	lsls	r2, r3, #24
 8001ece:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001ed2:	041b      	lsls	r3, r3, #16
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8001eda:	021b      	lsls	r3, r3, #8
 8001edc:	4313      	orrs	r3, r2
 8001ede:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  Mode_selection=Mode_selection>>24&0xFF;
 8001ee8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001eec:	0e1b      	lsrs	r3, r3, #24
 8001eee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  HAL_Delay(10);
 8001ef2:	200a      	movs	r0, #10
 8001ef4:	f001 fbe8 	bl	80036c8 <HAL_Delay>
			  KeyCommand[0]=0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 8001efe:	e185      	b.n	800220c <main+0x62c>
 8001f00:	40020400 	.word	0x40020400
 8001f04:	20000304 	.word	0x20000304
 8001f08:	0800b27c 	.word	0x0800b27c
 8001f0c:	0800b294 	.word	0x0800b294
 8001f10:	20000298 	.word	0x20000298
 8001f14:	20000204 	.word	0x20000204
 8001f18:	43960000 	.word	0x43960000
 8001f1c:	0800b29c 	.word	0x0800b29c
 8001f20:	0800b2a4 	.word	0x0800b2a4
 8001f24:	0800b2ac 	.word	0x0800b2ac
 8001f28:	20000305 	.word	0x20000305
 8001f2c:	20000008 	.word	0x20000008
 8001f30:	20000254 	.word	0x20000254
 8001f34:	20000306 	.word	0x20000306
 8001f38:	0800b2b8 	.word	0x0800b2b8
 8001f3c:	0800b2c4 	.word	0x0800b2c4
 8001f40:	0800b2d4 	.word	0x0800b2d4
 8001f44:	0800b2e0 	.word	0x0800b2e0
		  case's':
			  printf("case : s\r\n");
 8001f48:	48d8      	ldr	r0, [pc, #864]	; (80022ac <main+0x6cc>)
 8001f4a:	f005 f9bb 	bl	80072c4 <puts>
			  Mode_Type[0]=0x1B;
 8001f4e:	231b      	movs	r3, #27
 8001f50:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			  Mode_Type[1]=0x00;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
			  Mode_Type[2]=0x00;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			  Mode_Type[3]=0x00;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			  Mode_selection=Mode_Type[0]<<24|Mode_Type[1]<<16|Mode_Type[2]<<8|Mode_Type[3];
 8001f66:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8001f6a:	061a      	lsls	r2, r3, #24
 8001f6c:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001f70:	041b      	lsls	r3, r3, #16
 8001f72:	431a      	orrs	r2, r3
 8001f74:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8001f80:	4313      	orrs	r3, r2
 8001f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  Mode_selection=Mode_selection>>24&0xFF;
 8001f86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f8a:	0e1b      	lsrs	r3, r3, #24
 8001f8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  HAL_Delay(10);
 8001f90:	200a      	movs	r0, #10
 8001f92:	f001 fb99 	bl	80036c8 <HAL_Delay>
			  KeyCommand[0]=0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 8001f9c:	e136      	b.n	800220c <main+0x62c>
		  case'n':
			  printf("case : n\r\n");
 8001f9e:	48c4      	ldr	r0, [pc, #784]	; (80022b0 <main+0x6d0>)
 8001fa0:	f005 f990 	bl	80072c4 <puts>
			  Mode_Type[0]=0xA1;
 8001fa4:	23a1      	movs	r3, #161	; 0xa1
 8001fa6:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			  Mode_Type[1]=0x00;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
			  Mode_Type[2]=0x00;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			  Mode_Type[3]=0x00;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			  Mode_selection=Mode_Type[0]<<24|Mode_Type[1]<<16|Mode_Type[2]<<8|Mode_Type[3];
 8001fbc:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8001fc0:	061a      	lsls	r2, r3, #24
 8001fc2:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001fc6:	041b      	lsls	r3, r3, #16
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  Mode_selection=Mode_selection>>24&0xFF;
 8001fdc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fe0:	0e1b      	lsrs	r3, r3, #24
 8001fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  HAL_Delay(10);
 8001fe6:	200a      	movs	r0, #10
 8001fe8:	f001 fb6e 	bl	80036c8 <HAL_Delay>
			  KeyCommand[0]=0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 8001ff2:	e10b      	b.n	800220c <main+0x62c>
		  case'w':
			  printf("case : w\r\n");
 8001ff4:	48af      	ldr	r0, [pc, #700]	; (80022b4 <main+0x6d4>)
 8001ff6:	f005 f965 	bl	80072c4 <puts>
			  Mode_Type[0]=0xA2;
 8001ffa:	23a2      	movs	r3, #162	; 0xa2
 8001ffc:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			  Mode_Type[1]=0x00;
 8002000:	2300      	movs	r3, #0
 8002002:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
			  Mode_Type[2]=0x00;
 8002006:	2300      	movs	r3, #0
 8002008:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			  Mode_Type[3]=0x00;
 800200c:	2300      	movs	r3, #0
 800200e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			  Mode_selection=Mode_Type[0]<<24|Mode_Type[1]<<16|Mode_Type[2]<<8|Mode_Type[3];
 8002012:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002016:	061a      	lsls	r2, r3, #24
 8002018:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800201c:	041b      	lsls	r3, r3, #16
 800201e:	431a      	orrs	r2, r3
 8002020:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	4313      	orrs	r3, r2
 8002028:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  Mode_selection=Mode_selection>>24&0xFF;
 8002032:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002036:	0e1b      	lsrs	r3, r3, #24
 8002038:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  HAL_Delay(10);
 800203c:	200a      	movs	r0, #10
 800203e:	f001 fb43 	bl	80036c8 <HAL_Delay>
			  KeyCommand[0]=0;
 8002042:	2300      	movs	r3, #0
 8002044:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 8002048:	e0e0      	b.n	800220c <main+0x62c>
		  case'q':
			  printf("case : q\r\n");
 800204a:	489b      	ldr	r0, [pc, #620]	; (80022b8 <main+0x6d8>)
 800204c:	f005 f93a 	bl	80072c4 <puts>
			  Mode_Type[0]=0xF1;
 8002050:	23f1      	movs	r3, #241	; 0xf1
 8002052:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			  Mode_Type[1]=0x00;
 8002056:	2300      	movs	r3, #0
 8002058:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
			  Mode_Type[2]=0x00;
 800205c:	2300      	movs	r3, #0
 800205e:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			  Mode_Type[3]=0x00;
 8002062:	2300      	movs	r3, #0
 8002064:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			  Mode_selection=Mode_Type[0]<<24|Mode_Type[1]<<16|Mode_Type[2]<<8|Mode_Type[3];
 8002068:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800206c:	061a      	lsls	r2, r3, #24
 800206e:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002072:	041b      	lsls	r3, r3, #16
 8002074:	431a      	orrs	r2, r3
 8002076:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	4313      	orrs	r3, r2
 800207e:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  Mode_selection=Mode_selection>>24&0xFF;
 8002088:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800208c:	0e1b      	lsrs	r3, r3, #24
 800208e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  HAL_Delay(10);
 8002092:	200a      	movs	r0, #10
 8002094:	f001 fb18 	bl	80036c8 <HAL_Delay>
			  KeyCommand[0]=0;
 8002098:	2300      	movs	r3, #0
 800209a:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 800209e:	e0b5      	b.n	800220c <main+0x62c>
		  case'e':
			  printf("case : e\r\n");
 80020a0:	4886      	ldr	r0, [pc, #536]	; (80022bc <main+0x6dc>)
 80020a2:	f005 f90f 	bl	80072c4 <puts>
			  Mode_Type[0]=0xF2;
 80020a6:	23f2      	movs	r3, #242	; 0xf2
 80020a8:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			  Mode_Type[1]=0x00;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
			  Mode_Type[2]=0x00;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			  Mode_Type[3]=0x00;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			  Mode_selection=Mode_Type[0]<<24|Mode_Type[1]<<16|Mode_Type[2]<<8|Mode_Type[3];
 80020be:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80020c2:	061a      	lsls	r2, r3, #24
 80020c4:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80020c8:	041b      	lsls	r3, r3, #16
 80020ca:	431a      	orrs	r2, r3
 80020cc:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 80020d8:	4313      	orrs	r3, r2
 80020da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  Mode_selection=Mode_selection>>24&0xFF;
 80020de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020e2:	0e1b      	lsrs	r3, r3, #24
 80020e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  HAL_Delay(10);
 80020e8:	200a      	movs	r0, #10
 80020ea:	f001 faed 	bl	80036c8 <HAL_Delay>
			  KeyCommand[0]=0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 80020f4:	e08a      	b.n	800220c <main+0x62c>
		  case'z':
			  printf("case : z\r\n");
 80020f6:	4872      	ldr	r0, [pc, #456]	; (80022c0 <main+0x6e0>)
 80020f8:	f005 f8e4 	bl	80072c4 <puts>
			  Mode_Type[0]=0xF3;
 80020fc:	23f3      	movs	r3, #243	; 0xf3
 80020fe:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			  Mode_Type[1]=0x00;
 8002102:	2300      	movs	r3, #0
 8002104:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
			  Mode_Type[2]=0x00;
 8002108:	2300      	movs	r3, #0
 800210a:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			  Mode_Type[3]=0x00;
 800210e:	2300      	movs	r3, #0
 8002110:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			  Mode_selection=Mode_Type[0]<<24|Mode_Type[1]<<16|Mode_Type[2]<<8|Mode_Type[3];
 8002114:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002118:	061a      	lsls	r2, r3, #24
 800211a:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800211e:	041b      	lsls	r3, r3, #16
 8002120:	431a      	orrs	r2, r3
 8002122:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	4313      	orrs	r3, r2
 800212a:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  Mode_selection=Mode_selection>>24&0xFF;
 8002134:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002138:	0e1b      	lsrs	r3, r3, #24
 800213a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  HAL_Delay(10);
 800213e:	200a      	movs	r0, #10
 8002140:	f001 fac2 	bl	80036c8 <HAL_Delay>
			  KeyCommand[0]=0;
 8002144:	2300      	movs	r3, #0
 8002146:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 800214a:	e05f      	b.n	800220c <main+0x62c>
		  case'x':
			  printf("case : z\r\n");
 800214c:	485c      	ldr	r0, [pc, #368]	; (80022c0 <main+0x6e0>)
 800214e:	f005 f8b9 	bl	80072c4 <puts>
			  Mode_Type[0]=0xF4;
 8002152:	23f4      	movs	r3, #244	; 0xf4
 8002154:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			  Mode_Type[1]=0x00;
 8002158:	2300      	movs	r3, #0
 800215a:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
			  Mode_Type[2]=0x00;
 800215e:	2300      	movs	r3, #0
 8002160:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			  Mode_Type[3]=0x00;
 8002164:	2300      	movs	r3, #0
 8002166:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			  Mode_selection=Mode_Type[0]<<24|Mode_Type[1]<<16|Mode_Type[2]<<8|Mode_Type[3];
 800216a:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800216e:	061a      	lsls	r2, r3, #24
 8002170:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002174:	041b      	lsls	r3, r3, #16
 8002176:	431a      	orrs	r2, r3
 8002178:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	4313      	orrs	r3, r2
 8002180:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  Mode_selection=Mode_selection>>24&0xFF;
 800218a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800218e:	0e1b      	lsrs	r3, r3, #24
 8002190:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  HAL_Delay(10);
 8002194:	200a      	movs	r0, #10
 8002196:	f001 fa97 	bl	80036c8 <HAL_Delay>
			  KeyCommand[0]=0;
 800219a:	2300      	movs	r3, #0
 800219c:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 80021a0:	e034      	b.n	800220c <main+0x62c>
		  case'h':
			  printf("case : z\r\n");
 80021a2:	4847      	ldr	r0, [pc, #284]	; (80022c0 <main+0x6e0>)
 80021a4:	f005 f88e 	bl	80072c4 <puts>
			  Mode_Type[0]=0xF5;
 80021a8:	23f5      	movs	r3, #245	; 0xf5
 80021aa:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			  Mode_Type[1]=0x00;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
			  Mode_Type[2]=0x00;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			  Mode_Type[3]=0x00;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			  Mode_selection=Mode_Type[0]<<24|Mode_Type[1]<<16|Mode_Type[2]<<8|Mode_Type[3];
 80021c0:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80021c4:	061a      	lsls	r2, r3, #24
 80021c6:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80021ca:	041b      	lsls	r3, r3, #16
 80021cc:	431a      	orrs	r2, r3
 80021ce:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  Mode_selection=Mode_selection>>24&0xFF;
 80021e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021e4:	0e1b      	lsrs	r3, r3, #24
 80021e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  HAL_Delay(10);
 80021ea:	200a      	movs	r0, #10
 80021ec:	f001 fa6c 	bl	80036c8 <HAL_Delay>
			  KeyCommand[0]=0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 80021f6:	e009      	b.n	800220c <main+0x62c>
		  default:
			  printf("NoCommand\r\n");
 80021f8:	4832      	ldr	r0, [pc, #200]	; (80022c4 <main+0x6e4>)
 80021fa:	f005 f863 	bl	80072c4 <puts>
			  KeyCommand[0]=0;
 80021fe:	2300      	movs	r3, #0
 8002200:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  get_can_flag=1;
 8002204:	4b30      	ldr	r3, [pc, #192]	; (80022c8 <main+0x6e8>)
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
			  break;
 800220a:	bf00      	nop
		  }
		  get_uart_flag=0;
 800220c:	4b2f      	ldr	r3, [pc, #188]	; (80022cc <main+0x6ec>)
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
	  }
		  switch(Mode_selection){
 8002212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002216:	2bf5      	cmp	r3, #245	; 0xf5
 8002218:	f200 8255 	bhi.w	80026c6 <main+0xae6>
 800221c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002220:	2bf1      	cmp	r3, #241	; 0xf1
 8002222:	d230      	bcs.n	8002286 <main+0x6a6>
 8002224:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002228:	2ba2      	cmp	r3, #162	; 0xa2
 800222a:	f000 8093 	beq.w	8002354 <main+0x774>
 800222e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002232:	2ba2      	cmp	r3, #162	; 0xa2
 8002234:	f200 8247 	bhi.w	80026c6 <main+0xae6>
 8002238:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800223c:	2ba1      	cmp	r3, #161	; 0xa1
 800223e:	d074      	beq.n	800232a <main+0x74a>
 8002240:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002244:	2ba1      	cmp	r3, #161	; 0xa1
 8002246:	f200 823e 	bhi.w	80026c6 <main+0xae6>
 800224a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800224e:	2ba0      	cmp	r3, #160	; 0xa0
 8002250:	d03e      	beq.n	80022d0 <main+0x6f0>
 8002252:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002256:	2ba0      	cmp	r3, #160	; 0xa0
 8002258:	f200 8235 	bhi.w	80026c6 <main+0xae6>
 800225c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002260:	2b1b      	cmp	r3, #27
 8002262:	f000 8135 	beq.w	80024d0 <main+0x8f0>
 8002266:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800226a:	2b1b      	cmp	r3, #27
 800226c:	f200 822b 	bhi.w	80026c6 <main+0xae6>
 8002270:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002274:	2b0a      	cmp	r3, #10
 8002276:	f000 80d5 	beq.w	8002424 <main+0x844>
 800227a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800227e:	2b0b      	cmp	r3, #11
 8002280:	f000 80f7 	beq.w	8002472 <main+0x892>
 8002284:	e21f      	b.n	80026c6 <main+0xae6>
 8002286:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800228a:	3bf1      	subs	r3, #241	; 0xf1
 800228c:	2b04      	cmp	r3, #4
 800228e:	f200 821a 	bhi.w	80026c6 <main+0xae6>
 8002292:	a201      	add	r2, pc, #4	; (adr r2, 8002298 <main+0x6b8>)
 8002294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002298:	08002593 	.word	0x08002593
 800229c:	080025c9 	.word	0x080025c9
 80022a0:	08002641 	.word	0x08002641
 80022a4:	0800265d 	.word	0x0800265d
 80022a8:	08002677 	.word	0x08002677
 80022ac:	0800b2ec 	.word	0x0800b2ec
 80022b0:	0800b2f8 	.word	0x0800b2f8
 80022b4:	0800b304 	.word	0x0800b304
 80022b8:	0800b310 	.word	0x0800b310
 80022bc:	0800b31c 	.word	0x0800b31c
 80022c0:	0800b328 	.word	0x0800b328
 80022c4:	0800b334 	.word	0x0800b334
 80022c8:	20000306 	.word	0x20000306
 80022cc:	20000305 	.word	0x20000305
		  case 0xA0:
			  printf("Initialization\r\n");	//初期位置モード
 80022d0:	48cb      	ldr	r0, [pc, #812]	; (8002600 <main+0xa20>)
 80022d2:	f004 fff7 	bl	80072c4 <puts>
			  t_position[0] = 0.0;
 80022d6:	4bcb      	ldr	r3, [pc, #812]	; (8002604 <main+0xa24>)
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
			  t_position[1] = 0.0;
 80022de:	4bc9      	ldr	r3, [pc, #804]	; (8002604 <main+0xa24>)
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	605a      	str	r2, [r3, #4]
			  BLDC_StartMotorRotate();
 80022e6:	f7ff f8a7 	bl	8001438 <BLDC_StartMotorRotate>
			  t_position[0] = origin_rad_pos[0];
 80022ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ec:	4ac5      	ldr	r2, [pc, #788]	; (8002604 <main+0xa24>)
 80022ee:	6013      	str	r3, [r2, #0]
			  t_position[1] = origin_rad_pos[1];
 80022f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f2:	4ac4      	ldr	r2, [pc, #784]	; (8002604 <main+0xa24>)
 80022f4:	6053      	str	r3, [r2, #4]

			  printf("Initialization m1 %f\r\n",t_position[0]);
 80022f6:	4bc3      	ldr	r3, [pc, #780]	; (8002604 <main+0xa24>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe f944 	bl	8000588 <__aeabi_f2d>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	48c0      	ldr	r0, [pc, #768]	; (8002608 <main+0xa28>)
 8002306:	f004 ff57 	bl	80071b8 <iprintf>
			  printf("Initialization m2 %f\r\n",t_position[1]);
 800230a:	4bbe      	ldr	r3, [pc, #760]	; (8002604 <main+0xa24>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f93a 	bl	8000588 <__aeabi_f2d>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	48bc      	ldr	r0, [pc, #752]	; (800260c <main+0xa2c>)
 800231a:	f004 ff4d 	bl	80071b8 <iprintf>
			  BLDC_MotorRotate();
 800231e:	f7ff fa07 	bl	8001730 <BLDC_MotorRotate>
			  KeyCommand[0]=0;
 8002322:	2300      	movs	r3, #0
 8002324:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 8002328:	e1d7      	b.n	80026da <main+0xafa>
		  case 0xA1:	//待機位置に戻す
			  printf("StandbyReturn\r\n");
 800232a:	48b9      	ldr	r0, [pc, #740]	; (8002610 <main+0xa30>)
 800232c:	f004 ffca 	bl	80072c4 <puts>
			  t_position[0]=0;
 8002330:	4bb4      	ldr	r3, [pc, #720]	; (8002604 <main+0xa24>)
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
			  t_position[1]=0;
 8002338:	4bb2      	ldr	r3, [pc, #712]	; (8002604 <main+0xa24>)
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	605a      	str	r2, [r3, #4]
			  m1_last_pos=t_position[0];
 8002340:	4bb0      	ldr	r3, [pc, #704]	; (8002604 <main+0xa24>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4ab3      	ldr	r2, [pc, #716]	; (8002614 <main+0xa34>)
 8002346:	6013      	str	r3, [r2, #0]
			  BLDC_MotorRotate();
 8002348:	f7ff f9f2 	bl	8001730 <BLDC_MotorRotate>
			  KeyCommand[0]=0;
 800234c:	2300      	movs	r3, #0
 800234e:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 8002352:	e1c2      	b.n	80026da <main+0xafa>
		  case 0xA2:	//初期位置の登録
			  printf("Register initial position\r\n");
 8002354:	48b0      	ldr	r0, [pc, #704]	; (8002618 <main+0xa38>)
 8002356:	f004 ffb5 	bl	80072c4 <puts>
			  canid=0x01;
 800235a:	4bb0      	ldr	r3, [pc, #704]	; (800261c <main+0xa3c>)
 800235c:	2201      	movs	r2, #1
 800235e:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 1.0, 0.0);
 8002360:	ed9f 2aaf 	vldr	s4, [pc, #700]	; 8002620 <main+0xa40>
 8002364:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8002368:	ed9f 1aad 	vldr	s2, [pc, #692]	; 8002620 <main+0xa40>
 800236c:	eddf 0aac 	vldr	s1, [pc, #688]	; 8002620 <main+0xa40>
 8002370:	ed9f 0aab 	vldr	s0, [pc, #684]	; 8002620 <main+0xa40>
 8002374:	f7fe fe7a 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 8002378:	f7fe ff50 	bl	800121c <BLDC_CANTx>
			  unpack_reply();
 800237c:	f7fe ffce 	bl	800131c <unpack_reply>
			  rad_data[0]=p_getdata;
 8002380:	4ba8      	ldr	r3, [pc, #672]	; (8002624 <main+0xa44>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	65bb      	str	r3, [r7, #88]	; 0x58
			  pack_cmd(0.0, 0.0, 100.0, 3.0, 0.0);
 8002386:	ed9f 2aa6 	vldr	s4, [pc, #664]	; 8002620 <main+0xa40>
 800238a:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 800238e:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 8002628 <main+0xa48>
 8002392:	eddf 0aa3 	vldr	s1, [pc, #652]	; 8002620 <main+0xa40>
 8002396:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 8002620 <main+0xa40>
 800239a:	f7fe fe67 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 800239e:	f7fe ff3d 	bl	800121c <BLDC_CANTx>
			  unpack_reply();
 80023a2:	f7fe ffbb 	bl	800131c <unpack_reply>
			  canid=0x02;
 80023a6:	4b9d      	ldr	r3, [pc, #628]	; (800261c <main+0xa3c>)
 80023a8:	2202      	movs	r2, #2
 80023aa:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 1.0, 0.0);
 80023ac:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 8002620 <main+0xa40>
 80023b0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80023b4:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 8002620 <main+0xa40>
 80023b8:	eddf 0a99 	vldr	s1, [pc, #612]	; 8002620 <main+0xa40>
 80023bc:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8002620 <main+0xa40>
 80023c0:	f7fe fe54 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 80023c4:	f7fe ff2a 	bl	800121c <BLDC_CANTx>
			  unpack_reply();
 80023c8:	f7fe ffa8 	bl	800131c <unpack_reply>
			  rad_data[1]=p_getdata;
 80023cc:	4b95      	ldr	r3, [pc, #596]	; (8002624 <main+0xa44>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	65fb      	str	r3, [r7, #92]	; 0x5c
			  pack_cmd(0.0, 0.0, 100.0, 3.0, 0.0);
 80023d2:	ed9f 2a93 	vldr	s4, [pc, #588]	; 8002620 <main+0xa40>
 80023d6:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 80023da:	ed9f 1a93 	vldr	s2, [pc, #588]	; 8002628 <main+0xa48>
 80023de:	eddf 0a90 	vldr	s1, [pc, #576]	; 8002620 <main+0xa40>
 80023e2:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 8002620 <main+0xa40>
 80023e6:	f7fe fe41 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 80023ea:	f7fe ff17 	bl	800121c <BLDC_CANTx>
			  unpack_reply();
 80023ee:	f7fe ff95 	bl	800131c <unpack_reply>
			  BLDC_FK(rad_data[0],rad_data[1],&coordinate_data[0],&coordinate_data[1]);
 80023f2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80023f6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80023fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023fe:	1d1a      	adds	r2, r3, #4
 8002400:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002404:	4611      	mov	r1, r2
 8002406:	4618      	mov	r0, r3
 8002408:	eef0 0a47 	vmov.f32	s1, s14
 800240c:	eeb0 0a67 	vmov.f32	s0, s15
 8002410:	f000 fb1a 	bl	8002a48 <BLDC_FK>
			  origin_rad_pos[0]=coordinate_data[0];
 8002414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
			  origin_rad_pos[1]=coordinate_data[1];
 8002418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
			  KeyCommand[0]=0;
 800241c:	2300      	movs	r3, #0
 800241e:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 8002422:	e15a      	b.n	80026da <main+0xafa>
		  case 0x0A:
			  printf("MoveMode\r\n");	//動作モード
 8002424:	4881      	ldr	r0, [pc, #516]	; (800262c <main+0xa4c>)
 8002426:	f004 ff4d 	bl	80072c4 <puts>

//			  BLDC_IK(teaching_data[0],teaching_data[1],&rad_data[0],&rad_data[1]);
			  t_position[0] = -rad_data[0];
 800242a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800242e:	eef1 7a67 	vneg.f32	s15, s15
 8002432:	4b74      	ldr	r3, [pc, #464]	; (8002604 <main+0xa24>)
 8002434:	edc3 7a00 	vstr	s15, [r3]
			  t_position[1] = (-rad_data[1]+M_PI);
 8002438:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800243c:	eef1 7a67 	vneg.f32	s15, s15
 8002440:	ee17 3a90 	vmov	r3, s15
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe f89f 	bl	8000588 <__aeabi_f2d>
 800244a:	a36b      	add	r3, pc, #428	; (adr r3, 80025f8 <main+0xa18>)
 800244c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002450:	f7fd ff3c 	bl	80002cc <__adddf3>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4610      	mov	r0, r2
 800245a:	4619      	mov	r1, r3
 800245c:	f7fe fbc4 	bl	8000be8 <__aeabi_d2f>
 8002460:	4603      	mov	r3, r0
 8002462:	4a68      	ldr	r2, [pc, #416]	; (8002604 <main+0xa24>)
 8002464:	6053      	str	r3, [r2, #4]
//			  m1_last_pos=-t_position[0];
			  BLDC_MotorRotate();
 8002466:	f7ff f963 	bl	8001730 <BLDC_MotorRotate>
			  KeyCommand[0]=0;
 800246a:	2300      	movs	r3, #0
 800246c:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 8002470:	e133      	b.n	80026da <main+0xafa>
		  case 0x0B:
			  printf("Teaching\r\n");	//ティーチングモード
 8002472:	486f      	ldr	r0, [pc, #444]	; (8002630 <main+0xa50>)
 8002474:	f004 ff26 	bl	80072c4 <puts>
			  canid=0x01;
 8002478:	4b68      	ldr	r3, [pc, #416]	; (800261c <main+0xa3c>)
 800247a:	2201      	movs	r2, #1
 800247c:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 1.0, 0.0);
 800247e:	ed9f 2a68 	vldr	s4, [pc, #416]	; 8002620 <main+0xa40>
 8002482:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8002486:	ed9f 1a66 	vldr	s2, [pc, #408]	; 8002620 <main+0xa40>
 800248a:	eddf 0a65 	vldr	s1, [pc, #404]	; 8002620 <main+0xa40>
 800248e:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8002620 <main+0xa40>
 8002492:	f7fe fdeb 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 8002496:	f7fe fec1 	bl	800121c <BLDC_CANTx>
			  HAL_Delay(10);
 800249a:	200a      	movs	r0, #10
 800249c:	f001 f914 	bl	80036c8 <HAL_Delay>
			  canid=0x02;
 80024a0:	4b5e      	ldr	r3, [pc, #376]	; (800261c <main+0xa3c>)
 80024a2:	2202      	movs	r2, #2
 80024a4:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 1.0, 0.0);
 80024a6:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 8002620 <main+0xa40>
 80024aa:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80024ae:	ed9f 1a5c 	vldr	s2, [pc, #368]	; 8002620 <main+0xa40>
 80024b2:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8002620 <main+0xa40>
 80024b6:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8002620 <main+0xa40>
 80024ba:	f7fe fdd7 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 80024be:	f7fe fead 	bl	800121c <BLDC_CANTx>
			  HAL_Delay(10);
 80024c2:	200a      	movs	r0, #10
 80024c4:	f001 f900 	bl	80036c8 <HAL_Delay>
			  KeyCommand[0]=0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 80024ce:	e104      	b.n	80026da <main+0xafa>
		  case 0x1B:
			  canid=0x01;
 80024d0:	4b52      	ldr	r3, [pc, #328]	; (800261c <main+0xa3c>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 1.0, 0.0);
 80024d6:	ed9f 2a52 	vldr	s4, [pc, #328]	; 8002620 <main+0xa40>
 80024da:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80024de:	ed9f 1a50 	vldr	s2, [pc, #320]	; 8002620 <main+0xa40>
 80024e2:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8002620 <main+0xa40>
 80024e6:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8002620 <main+0xa40>
 80024ea:	f7fe fdbf 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 80024ee:	f7fe fe95 	bl	800121c <BLDC_CANTx>
			  HAL_Delay(10);
 80024f2:	200a      	movs	r0, #10
 80024f4:	f001 f8e8 	bl	80036c8 <HAL_Delay>
			  unpack_reply();
 80024f8:	f7fe ff10 	bl	800131c <unpack_reply>
			  pack_cmd(p_getdata, 0.0, 100.0, 3.0, 0.0);
 80024fc:	4b49      	ldr	r3, [pc, #292]	; (8002624 <main+0xa44>)
 80024fe:	edd3 7a00 	vldr	s15, [r3]
 8002502:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8002620 <main+0xa40>
 8002506:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 800250a:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8002628 <main+0xa48>
 800250e:	eddf 0a44 	vldr	s1, [pc, #272]	; 8002620 <main+0xa40>
 8002512:	eeb0 0a67 	vmov.f32	s0, s15
 8002516:	f7fe fda9 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 800251a:	f7fe fe7f 	bl	800121c <BLDC_CANTx>
			  HAL_Delay(10);
 800251e:	200a      	movs	r0, #10
 8002520:	f001 f8d2 	bl	80036c8 <HAL_Delay>
			  rad_data[0]=p_getdata;
 8002524:	4b3f      	ldr	r3, [pc, #252]	; (8002624 <main+0xa44>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	65bb      	str	r3, [r7, #88]	; 0x58
			  canid=0x02;
 800252a:	4b3c      	ldr	r3, [pc, #240]	; (800261c <main+0xa3c>)
 800252c:	2202      	movs	r2, #2
 800252e:	601a      	str	r2, [r3, #0]
			  pack_cmd(0.0, 0.0, 0.0, 1.0, 0.0);
 8002530:	ed9f 2a3b 	vldr	s4, [pc, #236]	; 8002620 <main+0xa40>
 8002534:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8002538:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8002620 <main+0xa40>
 800253c:	eddf 0a38 	vldr	s1, [pc, #224]	; 8002620 <main+0xa40>
 8002540:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8002620 <main+0xa40>
 8002544:	f7fe fd92 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 8002548:	f7fe fe68 	bl	800121c <BLDC_CANTx>
			  HAL_Delay(10);
 800254c:	200a      	movs	r0, #10
 800254e:	f001 f8bb 	bl	80036c8 <HAL_Delay>
			  unpack_reply();
 8002552:	f7fe fee3 	bl	800131c <unpack_reply>
			  pack_cmd(p_getdata, 0.0, 100.0, 3.0, 0.0);
 8002556:	4b33      	ldr	r3, [pc, #204]	; (8002624 <main+0xa44>)
 8002558:	edd3 7a00 	vldr	s15, [r3]
 800255c:	ed9f 2a30 	vldr	s4, [pc, #192]	; 8002620 <main+0xa40>
 8002560:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8002564:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8002628 <main+0xa48>
 8002568:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8002620 <main+0xa40>
 800256c:	eeb0 0a67 	vmov.f32	s0, s15
 8002570:	f7fe fd7c 	bl	800106c <pack_cmd>
			  BLDC_CANTx();
 8002574:	f7fe fe52 	bl	800121c <BLDC_CANTx>
			  HAL_Delay(10);
 8002578:	200a      	movs	r0, #10
 800257a:	f001 f8a5 	bl	80036c8 <HAL_Delay>
			  rad_data[1]=p_getdata;
 800257e:	4b29      	ldr	r3, [pc, #164]	; (8002624 <main+0xa44>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	65fb      	str	r3, [r7, #92]	; 0x5c
//			  teaching_data[1]=coordinate_data[1];
//			  printf("x:%f\r\n",teaching_data[0]);
//			  printf("y:%f\r\n",teaching_data[1]);
//			  sent_data[0]=origin_coordinate_pos[0]-coordinate_data[0];	//手先座標系から機械座標系への変換
//			  sent_data[1]=origin_coordinate_pos[1]-coordinate_data[1];
			  printf("T_Success!\r\n");
 8002584:	482b      	ldr	r0, [pc, #172]	; (8002634 <main+0xa54>)
 8002586:	f004 fe9d 	bl	80072c4 <puts>

			  KeyCommand[0]=0;
 800258a:	2300      	movs	r3, #0
 800258c:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 8002590:	e0a3      	b.n	80026da <main+0xafa>
		  case 0xF1:	//モーターオフ
			  printf("MotorOff\r\n");
 8002592:	4829      	ldr	r0, [pc, #164]	; (8002638 <main+0xa58>)
 8002594:	f004 fe96 	bl	80072c4 <puts>
			  ExitMotorMode();
 8002598:	f7fe fd46 	bl	8001028 <ExitMotorMode>
			  canid=0x01;
 800259c:	4b1f      	ldr	r3, [pc, #124]	; (800261c <main+0xa3c>)
 800259e:	2201      	movs	r2, #1
 80025a0:	601a      	str	r2, [r3, #0]
			  BLDC_CANTx();
 80025a2:	f7fe fe3b 	bl	800121c <BLDC_CANTx>
			  HAL_Delay(10);
 80025a6:	200a      	movs	r0, #10
 80025a8:	f001 f88e 	bl	80036c8 <HAL_Delay>
			  ExitMotorMode();
 80025ac:	f7fe fd3c 	bl	8001028 <ExitMotorMode>
			  canid=0x02;
 80025b0:	4b1a      	ldr	r3, [pc, #104]	; (800261c <main+0xa3c>)
 80025b2:	2202      	movs	r2, #2
 80025b4:	601a      	str	r2, [r3, #0]
			  BLDC_CANTx();
 80025b6:	f7fe fe31 	bl	800121c <BLDC_CANTx>
			  HAL_Delay(10);
 80025ba:	200a      	movs	r0, #10
 80025bc:	f001 f884 	bl	80036c8 <HAL_Delay>
			  KeyCommand[0]=0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 80025c6:	e088      	b.n	80026da <main+0xafa>
		  case 0xF2:	//モーターオン
			  printf("MotorON\r\n");
 80025c8:	481c      	ldr	r0, [pc, #112]	; (800263c <main+0xa5c>)
 80025ca:	f004 fe7b 	bl	80072c4 <puts>
			  EnterMotorMode();
 80025ce:	f7fe fd09 	bl	8000fe4 <EnterMotorMode>
			  canid=0x01;
 80025d2:	4b12      	ldr	r3, [pc, #72]	; (800261c <main+0xa3c>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	601a      	str	r2, [r3, #0]
			  BLDC_CANTx();
 80025d8:	f7fe fe20 	bl	800121c <BLDC_CANTx>
			  HAL_Delay(10);
 80025dc:	200a      	movs	r0, #10
 80025de:	f001 f873 	bl	80036c8 <HAL_Delay>
//			  unpack_reply();
//			  printf("m1 pos : %lf\r\n",p_getdata);
			  EnterMotorMode();
 80025e2:	f7fe fcff 	bl	8000fe4 <EnterMotorMode>
			  canid=0x02;
 80025e6:	4b0d      	ldr	r3, [pc, #52]	; (800261c <main+0xa3c>)
 80025e8:	2202      	movs	r2, #2
 80025ea:	601a      	str	r2, [r3, #0]
			  BLDC_CANTx();
 80025ec:	f7fe fe16 	bl	800121c <BLDC_CANTx>
//			  unpack_reply();
//			  printf("m2 pos : %lf\r\n",p_getdata);
			  KeyCommand[0]=0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 80025f6:	e070      	b.n	80026da <main+0xafa>
 80025f8:	54442d18 	.word	0x54442d18
 80025fc:	400921fb 	.word	0x400921fb
 8002600:	0800b340 	.word	0x0800b340
 8002604:	2000030c 	.word	0x2000030c
 8002608:	0800b350 	.word	0x0800b350
 800260c:	0800b368 	.word	0x0800b368
 8002610:	0800b380 	.word	0x0800b380
 8002614:	20000314 	.word	0x20000314
 8002618:	0800b390 	.word	0x0800b390
 800261c:	20000300 	.word	0x20000300
 8002620:	00000000 	.word	0x00000000
 8002624:	20000308 	.word	0x20000308
 8002628:	42c80000 	.word	0x42c80000
 800262c:	0800b3ac 	.word	0x0800b3ac
 8002630:	0800b3b8 	.word	0x0800b3b8
 8002634:	0800b3c4 	.word	0x0800b3c4
 8002638:	0800b3d0 	.word	0x0800b3d0
 800263c:	0800b3dc 	.word	0x0800b3dc
		  case 0xF3:	//pos0
			  t_position[0] = 0.0;
 8002640:	4b2b      	ldr	r3, [pc, #172]	; (80026f0 <main+0xb10>)
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
			  t_position[1] = 0.0;
 8002648:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <main+0xb10>)
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	605a      	str	r2, [r3, #4]
//			  m1_last_pos=-t_position[0];
			  BLDC_MotorRotate();
 8002650:	f7ff f86e 	bl	8001730 <BLDC_MotorRotate>
//			  BLDC_StartMotorRotate();
//			  BLDC_SeparateMotorRotate();
			  KeyCommand[0]=0;
 8002654:	2300      	movs	r3, #0
 8002656:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 800265a:	e03e      	b.n	80026da <main+0xafa>
		  case 0xF4:	//pos0

			  t_position[0] = 0.0;
 800265c:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <main+0xb10>)
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
			  t_position[1] = M_PI;
 8002664:	4b22      	ldr	r3, [pc, #136]	; (80026f0 <main+0xb10>)
 8002666:	4a23      	ldr	r2, [pc, #140]	; (80026f4 <main+0xb14>)
 8002668:	605a      	str	r2, [r3, #4]
			  BLDC_MotorRotate();
 800266a:	f7ff f861 	bl	8001730 <BLDC_MotorRotate>
//			  BLDC_StartMotorRotate();
//			  BLDC_SeparateMotorRotate();

			  KeyCommand[0]=0;
 800266e:	2300      	movs	r3, #0
 8002670:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 8002674:	e031      	b.n	80026da <main+0xafa>
		  case 0xF5:	//setposition
			  t_position[0] = 0.0;
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <main+0xb10>)
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
			  t_position[1] = 0.0;
 800267e:	4b1c      	ldr	r3, [pc, #112]	; (80026f0 <main+0xb10>)
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	605a      	str	r2, [r3, #4]
			  BLDC_StartMotorRotate();
 8002686:	f7fe fed7 	bl	8001438 <BLDC_StartMotorRotate>
			  t_position[0] = origin_rad_pos[0];
 800268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268c:	4a18      	ldr	r2, [pc, #96]	; (80026f0 <main+0xb10>)
 800268e:	6013      	str	r3, [r2, #0]
			  t_position[1] = origin_rad_pos[1];
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002692:	4a17      	ldr	r2, [pc, #92]	; (80026f0 <main+0xb10>)
 8002694:	6053      	str	r3, [r2, #4]

			  printf("origin_rad_pos m1 %f\r\n",origin_rad_pos[0]);
 8002696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd ff75 	bl	8000588 <__aeabi_f2d>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4815      	ldr	r0, [pc, #84]	; (80026f8 <main+0xb18>)
 80026a4:	f004 fd88 	bl	80071b8 <iprintf>
			  printf("origin_rad_pos m2 %f\r\n",origin_rad_pos[1]);
 80026a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fd ff6c 	bl	8000588 <__aeabi_f2d>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4811      	ldr	r0, [pc, #68]	; (80026fc <main+0xb1c>)
 80026b6:	f004 fd7f 	bl	80071b8 <iprintf>
			  BLDC_MotorRotate();
 80026ba:	f7ff f839 	bl	8001730 <BLDC_MotorRotate>
//			  BLDC_StartMotorRotate();
//			  BLDC_SeparateMotorRotate();

			  KeyCommand[0]=0;
 80026be:	2300      	movs	r3, #0
 80026c0:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  break;
 80026c4:	e009      	b.n	80026da <main+0xafa>
		  default:
			  printf("NoCommand\r\n");
 80026c6:	480e      	ldr	r0, [pc, #56]	; (8002700 <main+0xb20>)
 80026c8:	f004 fdfc 	bl	80072c4 <puts>
			  KeyCommand[0]=0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			  get_can_flag=1;
 80026d2:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <main+0xb24>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	701a      	strb	r2, [r3, #0]
			  break;
 80026d8:	bf00      	nop
		  }
		  get_uart_flag=0;
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <main+0xb28>)
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
		  while(!get_can_flag){}
 80026e0:	bf00      	nop
 80026e2:	4b08      	ldr	r3, [pc, #32]	; (8002704 <main+0xb24>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0fb      	beq.n	80026e2 <main+0xb02>
	  home_position_state=0;
 80026ea:	f7ff bb0c 	b.w	8001d06 <main+0x126>
 80026ee:	bf00      	nop
 80026f0:	2000030c 	.word	0x2000030c
 80026f4:	40490fdb 	.word	0x40490fdb
 80026f8:	0800b3e8 	.word	0x0800b3e8
 80026fc:	0800b400 	.word	0x0800b400
 8002700:	0800b334 	.word	0x0800b334
 8002704:	20000306 	.word	0x20000306
 8002708:	20000305 	.word	0x20000305

0800270c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b094      	sub	sp, #80	; 0x50
 8002710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002712:	f107 031c 	add.w	r3, r7, #28
 8002716:	2234      	movs	r2, #52	; 0x34
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f004 f8da 	bl	80068d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002720:	f107 0308 	add.w	r3, r7, #8
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002730:	2300      	movs	r3, #0
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	4b29      	ldr	r3, [pc, #164]	; (80027dc <SystemClock_Config+0xd0>)
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	4a28      	ldr	r2, [pc, #160]	; (80027dc <SystemClock_Config+0xd0>)
 800273a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273e:	6413      	str	r3, [r2, #64]	; 0x40
 8002740:	4b26      	ldr	r3, [pc, #152]	; (80027dc <SystemClock_Config+0xd0>)
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800274c:	2300      	movs	r3, #0
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <SystemClock_Config+0xd4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a22      	ldr	r2, [pc, #136]	; (80027e0 <SystemClock_Config+0xd4>)
 8002756:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <SystemClock_Config+0xd4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002764:	603b      	str	r3, [r7, #0]
 8002766:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002768:	2302      	movs	r3, #2
 800276a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800276c:	2301      	movs	r3, #1
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002770:	2310      	movs	r3, #16
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002774:	2302      	movs	r3, #2
 8002776:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002778:	2300      	movs	r3, #0
 800277a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800277c:	2308      	movs	r3, #8
 800277e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002780:	23a0      	movs	r3, #160	; 0xa0
 8002782:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002784:	2302      	movs	r3, #2
 8002786:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002788:	2302      	movs	r3, #2
 800278a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800278c:	2302      	movs	r3, #2
 800278e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002790:	f107 031c 	add.w	r3, r7, #28
 8002794:	4618      	mov	r0, r3
 8002796:	f002 fd5d 	bl	8005254 <HAL_RCC_OscConfig>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80027a0:	f000 fbd8 	bl	8002f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027a4:	230f      	movs	r3, #15
 80027a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027a8:	2302      	movs	r3, #2
 80027aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ac:	2300      	movs	r3, #0
 80027ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027bc:	f107 0308 	add.w	r3, r7, #8
 80027c0:	2105      	movs	r1, #5
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 f9fc 	bl	8004bc0 <HAL_RCC_ClockConfig>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80027ce:	f000 fbc1 	bl	8002f54 <Error_Handler>
  }
}
 80027d2:	bf00      	nop
 80027d4:	3750      	adds	r7, #80	; 0x50
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40007000 	.word	0x40007000

080027e4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80027e8:	4b18      	ldr	r3, [pc, #96]	; (800284c <MX_CAN1_Init+0x68>)
 80027ea:	4a19      	ldr	r2, [pc, #100]	; (8002850 <MX_CAN1_Init+0x6c>)
 80027ec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80027ee:	4b17      	ldr	r3, [pc, #92]	; (800284c <MX_CAN1_Init+0x68>)
 80027f0:	2204      	movs	r2, #4
 80027f2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80027f4:	4b15      	ldr	r3, [pc, #84]	; (800284c <MX_CAN1_Init+0x68>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80027fa:	4b14      	ldr	r3, [pc, #80]	; (800284c <MX_CAN1_Init+0x68>)
 80027fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002800:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <MX_CAN1_Init+0x68>)
 8002804:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002808:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <MX_CAN1_Init+0x68>)
 800280c:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8002810:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <MX_CAN1_Init+0x68>)
 8002814:	2200      	movs	r2, #0
 8002816:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <MX_CAN1_Init+0x68>)
 800281a:	2200      	movs	r2, #0
 800281c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <MX_CAN1_Init+0x68>)
 8002820:	2200      	movs	r2, #0
 8002822:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <MX_CAN1_Init+0x68>)
 8002826:	2200      	movs	r2, #0
 8002828:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <MX_CAN1_Init+0x68>)
 800282c:	2200      	movs	r2, #0
 800282e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <MX_CAN1_Init+0x68>)
 8002832:	2200      	movs	r2, #0
 8002834:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002836:	4805      	ldr	r0, [pc, #20]	; (800284c <MX_CAN1_Init+0x68>)
 8002838:	f000 ff6a 	bl	8003710 <HAL_CAN_Init>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8002842:	f000 fb87 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000204 	.word	0x20000204
 8002850:	40006400 	.word	0x40006400

08002854 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002858:	4b18      	ldr	r3, [pc, #96]	; (80028bc <MX_CAN2_Init+0x68>)
 800285a:	4a19      	ldr	r2, [pc, #100]	; (80028c0 <MX_CAN2_Init+0x6c>)
 800285c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 800285e:	4b17      	ldr	r3, [pc, #92]	; (80028bc <MX_CAN2_Init+0x68>)
 8002860:	2204      	movs	r2, #4
 8002862:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002864:	4b15      	ldr	r3, [pc, #84]	; (80028bc <MX_CAN2_Init+0x68>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800286a:	4b14      	ldr	r3, [pc, #80]	; (80028bc <MX_CAN2_Init+0x68>)
 800286c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002870:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002872:	4b12      	ldr	r3, [pc, #72]	; (80028bc <MX_CAN2_Init+0x68>)
 8002874:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002878:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_7TQ;
 800287a:	4b10      	ldr	r3, [pc, #64]	; (80028bc <MX_CAN2_Init+0x68>)
 800287c:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8002880:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002882:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <MX_CAN2_Init+0x68>)
 8002884:	2200      	movs	r2, #0
 8002886:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002888:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <MX_CAN2_Init+0x68>)
 800288a:	2200      	movs	r2, #0
 800288c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800288e:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <MX_CAN2_Init+0x68>)
 8002890:	2200      	movs	r2, #0
 8002892:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002894:	4b09      	ldr	r3, [pc, #36]	; (80028bc <MX_CAN2_Init+0x68>)
 8002896:	2200      	movs	r2, #0
 8002898:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <MX_CAN2_Init+0x68>)
 800289c:	2200      	movs	r2, #0
 800289e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <MX_CAN2_Init+0x68>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80028a6:	4805      	ldr	r0, [pc, #20]	; (80028bc <MX_CAN2_Init+0x68>)
 80028a8:	f000 ff32 	bl	8003710 <HAL_CAN_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 80028b2:	f000 fb4f 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	2000022c 	.word	0x2000022c
 80028c0:	40006800 	.word	0x40006800

080028c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <MX_USART2_UART_Init+0x4c>)
 80028ca:	4a12      	ldr	r2, [pc, #72]	; (8002914 <MX_USART2_UART_Init+0x50>)
 80028cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <MX_USART2_UART_Init+0x4c>)
 80028d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028d6:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <MX_USART2_UART_Init+0x4c>)
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <MX_USART2_UART_Init+0x4c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028e2:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <MX_USART2_UART_Init+0x4c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <MX_USART2_UART_Init+0x4c>)
 80028ea:	220c      	movs	r2, #12
 80028ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ee:	4b08      	ldr	r3, [pc, #32]	; (8002910 <MX_USART2_UART_Init+0x4c>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <MX_USART2_UART_Init+0x4c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028fa:	4805      	ldr	r0, [pc, #20]	; (8002910 <MX_USART2_UART_Init+0x4c>)
 80028fc:	f002 ff48 	bl	8005790 <HAL_UART_Init>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002906:	f000 fb25 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000254 	.word	0x20000254
 8002914:	40004400 	.word	0x40004400

08002918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08a      	sub	sp, #40	; 0x28
 800291c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	60da      	str	r2, [r3, #12]
 800292c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	4b41      	ldr	r3, [pc, #260]	; (8002a38 <MX_GPIO_Init+0x120>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a40      	ldr	r2, [pc, #256]	; (8002a38 <MX_GPIO_Init+0x120>)
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b3e      	ldr	r3, [pc, #248]	; (8002a38 <MX_GPIO_Init+0x120>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	4b3a      	ldr	r3, [pc, #232]	; (8002a38 <MX_GPIO_Init+0x120>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a39      	ldr	r2, [pc, #228]	; (8002a38 <MX_GPIO_Init+0x120>)
 8002954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b37      	ldr	r3, [pc, #220]	; (8002a38 <MX_GPIO_Init+0x120>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	4b33      	ldr	r3, [pc, #204]	; (8002a38 <MX_GPIO_Init+0x120>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	4a32      	ldr	r2, [pc, #200]	; (8002a38 <MX_GPIO_Init+0x120>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6313      	str	r3, [r2, #48]	; 0x30
 8002976:	4b30      	ldr	r3, [pc, #192]	; (8002a38 <MX_GPIO_Init+0x120>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	607b      	str	r3, [r7, #4]
 8002986:	4b2c      	ldr	r3, [pc, #176]	; (8002a38 <MX_GPIO_Init+0x120>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a2b      	ldr	r2, [pc, #172]	; (8002a38 <MX_GPIO_Init+0x120>)
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b29      	ldr	r3, [pc, #164]	; (8002a38 <MX_GPIO_Init+0x120>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	607b      	str	r3, [r7, #4]
 800299c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800299e:	2200      	movs	r2, #0
 80029a0:	2120      	movs	r1, #32
 80029a2:	4826      	ldr	r0, [pc, #152]	; (8002a3c <MX_GPIO_Init+0x124>)
 80029a4:	f002 f8da 	bl	8004b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80029a8:	2200      	movs	r2, #0
 80029aa:	2110      	movs	r1, #16
 80029ac:	4824      	ldr	r0, [pc, #144]	; (8002a40 <MX_GPIO_Init+0x128>)
 80029ae:	f002 f8d5 	bl	8004b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80029b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80029bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029c2:	f107 0314 	add.w	r3, r7, #20
 80029c6:	4619      	mov	r1, r3
 80029c8:	481e      	ldr	r0, [pc, #120]	; (8002a44 <MX_GPIO_Init+0x12c>)
 80029ca:	f001 ff1b 	bl	8004804 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80029ce:	2320      	movs	r3, #32
 80029d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d2:	2301      	movs	r3, #1
 80029d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029da:	2300      	movs	r3, #0
 80029dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80029de:	f107 0314 	add.w	r3, r7, #20
 80029e2:	4619      	mov	r1, r3
 80029e4:	4815      	ldr	r0, [pc, #84]	; (8002a3c <MX_GPIO_Init+0x124>)
 80029e6:	f001 ff0d 	bl	8004804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029ea:	2310      	movs	r3, #16
 80029ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ee:	2301      	movs	r3, #1
 80029f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f6:	2300      	movs	r3, #0
 80029f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fa:	f107 0314 	add.w	r3, r7, #20
 80029fe:	4619      	mov	r1, r3
 8002a00:	480f      	ldr	r0, [pc, #60]	; (8002a40 <MX_GPIO_Init+0x128>)
 8002a02:	f001 feff 	bl	8004804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a06:	2320      	movs	r3, #32
 8002a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002a0a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4809      	ldr	r0, [pc, #36]	; (8002a40 <MX_GPIO_Init+0x128>)
 8002a1c:	f001 fef2 	bl	8004804 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002a20:	2200      	movs	r2, #0
 8002a22:	2100      	movs	r1, #0
 8002a24:	2017      	movs	r0, #23
 8002a26:	f001 fe24 	bl	8004672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a2a:	2017      	movs	r0, #23
 8002a2c:	f001 fe3d 	bl	80046aa <HAL_NVIC_EnableIRQ>

}
 8002a30:	bf00      	nop
 8002a32:	3728      	adds	r7, #40	; 0x28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40020000 	.word	0x40020000
 8002a40:	40020400 	.word	0x40020400
 8002a44:	40020800 	.word	0x40020800

08002a48 <BLDC_FK>:

/* USER CODE BEGIN 4 */
void BLDC_FK(float s1,float s2,float* xp,float* yp){
 8002a48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a4c:	b086      	sub	sp, #24
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	ed87 0a03 	vstr	s0, [r7, #12]
 8002a54:	edc7 0a02 	vstr	s1, [r7, #8]
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	6039      	str	r1, [r7, #0]
	float x=0.0;
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
	float y=0.0;
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]
	x=l1*cos(s1)+l2*cos(s1+s2);
 8002a68:	4b5a      	ldr	r3, [pc, #360]	; (8002bd4 <BLDC_FK+0x18c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fd8b 	bl	8000588 <__aeabi_f2d>
 8002a72:	4604      	mov	r4, r0
 8002a74:	460d      	mov	r5, r1
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f7fd fd86 	bl	8000588 <__aeabi_f2d>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	ec43 2b10 	vmov	d0, r2, r3
 8002a84:	f006 fcd4 	bl	8009430 <cos>
 8002a88:	ec53 2b10 	vmov	r2, r3, d0
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	4629      	mov	r1, r5
 8002a90:	f7fd fdd2 	bl	8000638 <__aeabi_dmul>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4690      	mov	r8, r2
 8002a9a:	4699      	mov	r9, r3
 8002a9c:	4b4e      	ldr	r3, [pc, #312]	; (8002bd8 <BLDC_FK+0x190>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fd fd71 	bl	8000588 <__aeabi_f2d>
 8002aa6:	4604      	mov	r4, r0
 8002aa8:	460d      	mov	r5, r1
 8002aaa:	ed97 7a03 	vldr	s14, [r7, #12]
 8002aae:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab6:	ee17 0a90 	vmov	r0, s15
 8002aba:	f7fd fd65 	bl	8000588 <__aeabi_f2d>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	ec43 2b10 	vmov	d0, r2, r3
 8002ac6:	f006 fcb3 	bl	8009430 <cos>
 8002aca:	ec53 2b10 	vmov	r2, r3, d0
 8002ace:	4620      	mov	r0, r4
 8002ad0:	4629      	mov	r1, r5
 8002ad2:	f7fd fdb1 	bl	8000638 <__aeabi_dmul>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4640      	mov	r0, r8
 8002adc:	4649      	mov	r1, r9
 8002ade:	f7fd fbf5 	bl	80002cc <__adddf3>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f7fe f87d 	bl	8000be8 <__aeabi_d2f>
 8002aee:	4603      	mov	r3, r0
 8002af0:	617b      	str	r3, [r7, #20]
	y=l1*sin(s1)+l2*sin(s1+s2);
 8002af2:	4b38      	ldr	r3, [pc, #224]	; (8002bd4 <BLDC_FK+0x18c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fd46 	bl	8000588 <__aeabi_f2d>
 8002afc:	4604      	mov	r4, r0
 8002afe:	460d      	mov	r5, r1
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f7fd fd41 	bl	8000588 <__aeabi_f2d>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	ec43 2b10 	vmov	d0, r2, r3
 8002b0e:	f006 fce3 	bl	80094d8 <sin>
 8002b12:	ec53 2b10 	vmov	r2, r3, d0
 8002b16:	4620      	mov	r0, r4
 8002b18:	4629      	mov	r1, r5
 8002b1a:	f7fd fd8d 	bl	8000638 <__aeabi_dmul>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4690      	mov	r8, r2
 8002b24:	4699      	mov	r9, r3
 8002b26:	4b2c      	ldr	r3, [pc, #176]	; (8002bd8 <BLDC_FK+0x190>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fd2c 	bl	8000588 <__aeabi_f2d>
 8002b30:	4604      	mov	r4, r0
 8002b32:	460d      	mov	r5, r1
 8002b34:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b38:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b40:	ee17 0a90 	vmov	r0, s15
 8002b44:	f7fd fd20 	bl	8000588 <__aeabi_f2d>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	ec43 2b10 	vmov	d0, r2, r3
 8002b50:	f006 fcc2 	bl	80094d8 <sin>
 8002b54:	ec53 2b10 	vmov	r2, r3, d0
 8002b58:	4620      	mov	r0, r4
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	f7fd fd6c 	bl	8000638 <__aeabi_dmul>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4640      	mov	r0, r8
 8002b66:	4649      	mov	r1, r9
 8002b68:	f7fd fbb0 	bl	80002cc <__adddf3>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4610      	mov	r0, r2
 8002b72:	4619      	mov	r1, r3
 8002b74:	f7fe f838 	bl	8000be8 <__aeabi_d2f>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	613b      	str	r3, [r7, #16]
	printf("s1=%f\r\n",s1);
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f7fd fd03 	bl	8000588 <__aeabi_f2d>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4815      	ldr	r0, [pc, #84]	; (8002bdc <BLDC_FK+0x194>)
 8002b88:	f004 fb16 	bl	80071b8 <iprintf>
	printf("s2=%f\r\n",s2);
 8002b8c:	68b8      	ldr	r0, [r7, #8]
 8002b8e:	f7fd fcfb 	bl	8000588 <__aeabi_f2d>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4812      	ldr	r0, [pc, #72]	; (8002be0 <BLDC_FK+0x198>)
 8002b98:	f004 fb0e 	bl	80071b8 <iprintf>
	printf("x=%f\r\n",x);
 8002b9c:	6978      	ldr	r0, [r7, #20]
 8002b9e:	f7fd fcf3 	bl	8000588 <__aeabi_f2d>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	480f      	ldr	r0, [pc, #60]	; (8002be4 <BLDC_FK+0x19c>)
 8002ba8:	f004 fb06 	bl	80071b8 <iprintf>
	printf("y=%f\r\n",y);
 8002bac:	6938      	ldr	r0, [r7, #16]
 8002bae:	f7fd fceb 	bl	8000588 <__aeabi_f2d>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	480c      	ldr	r0, [pc, #48]	; (8002be8 <BLDC_FK+0x1a0>)
 8002bb8:	f004 fafe 	bl	80071b8 <iprintf>
	*xp=x;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	601a      	str	r2, [r3, #0]
	*yp=y;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	601a      	str	r2, [r3, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	20000004 	.word	0x20000004
 8002bdc:	0800b29c 	.word	0x0800b29c
 8002be0:	0800b2a4 	.word	0x0800b2a4
 8002be4:	0800b418 	.word	0x0800b418
 8002be8:	0800b420 	.word	0x0800b420

08002bec <BLDC_IK>:
void BLDC_IK(float x,float y,float* s1p,float* s2p){
 8002bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf0:	ed2d 8b02 	vpush	{d8}
 8002bf4:	b086      	sub	sp, #24
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	ed87 0a03 	vstr	s0, [r7, #12]
 8002bfc:	edc7 0a02 	vstr	s1, [r7, #8]
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
	float s1=0.0;
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
	float s2=0.0;
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	613b      	str	r3, [r7, #16]
	s2=-acos((x*x+y*y-l1*l1-l2*l2)/(2*l1*l2));
 8002c10:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c14:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002c18:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002c20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c24:	4b9e      	ldr	r3, [pc, #632]	; (8002ea0 <BLDC_IK+0x2b4>)
 8002c26:	edd3 6a00 	vldr	s13, [r3]
 8002c2a:	4b9d      	ldr	r3, [pc, #628]	; (8002ea0 <BLDC_IK+0x2b4>)
 8002c2c:	edd3 7a00 	vldr	s15, [r3]
 8002c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c38:	4b9a      	ldr	r3, [pc, #616]	; (8002ea4 <BLDC_IK+0x2b8>)
 8002c3a:	edd3 6a00 	vldr	s13, [r3]
 8002c3e:	4b99      	ldr	r3, [pc, #612]	; (8002ea4 <BLDC_IK+0x2b8>)
 8002c40:	edd3 7a00 	vldr	s15, [r3]
 8002c44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c4c:	4b94      	ldr	r3, [pc, #592]	; (8002ea0 <BLDC_IK+0x2b4>)
 8002c4e:	edd3 7a00 	vldr	s15, [r3]
 8002c52:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c56:	4b93      	ldr	r3, [pc, #588]	; (8002ea4 <BLDC_IK+0x2b8>)
 8002c58:	edd3 7a00 	vldr	s15, [r3]
 8002c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c60:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c64:	ee16 0a90 	vmov	r0, s13
 8002c68:	f7fd fc8e 	bl	8000588 <__aeabi_f2d>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	ec43 2b10 	vmov	d0, r2, r3
 8002c74:	f006 fc88 	bl	8009588 <acos>
 8002c78:	ec53 2b10 	vmov	r2, r3, d0
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	f7fd ffb2 	bl	8000be8 <__aeabi_d2f>
 8002c84:	4603      	mov	r3, r0
 8002c86:	ee07 3a90 	vmov	s15, r3
 8002c8a:	eef1 7a67 	vneg.f32	s15, s15
 8002c8e:	edc7 7a04 	vstr	s15, [r7, #16]
//	s2=acos((x*x+y*y-l1*l1-l2*l2)/(2*l1*l2));
	s1=atan2((-l2*sin(s2)*x+(l1+l2*cos(s2))*y),((l1+l2*cos(s2))*x+l2*sin(s2)*y));
 8002c92:	4b84      	ldr	r3, [pc, #528]	; (8002ea4 <BLDC_IK+0x2b8>)
 8002c94:	edd3 7a00 	vldr	s15, [r3]
 8002c98:	eef1 7a67 	vneg.f32	s15, s15
 8002c9c:	ee17 3a90 	vmov	r3, s15
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fd fc71 	bl	8000588 <__aeabi_f2d>
 8002ca6:	4604      	mov	r4, r0
 8002ca8:	460d      	mov	r5, r1
 8002caa:	6938      	ldr	r0, [r7, #16]
 8002cac:	f7fd fc6c 	bl	8000588 <__aeabi_f2d>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	ec43 2b10 	vmov	d0, r2, r3
 8002cb8:	f006 fc0e 	bl	80094d8 <sin>
 8002cbc:	ec53 2b10 	vmov	r2, r3, d0
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	f7fd fcb8 	bl	8000638 <__aeabi_dmul>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4614      	mov	r4, r2
 8002cce:	461d      	mov	r5, r3
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f7fd fc59 	bl	8000588 <__aeabi_f2d>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4620      	mov	r0, r4
 8002cdc:	4629      	mov	r1, r5
 8002cde:	f7fd fcab 	bl	8000638 <__aeabi_dmul>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4692      	mov	sl, r2
 8002ce8:	469b      	mov	fp, r3
 8002cea:	4b6d      	ldr	r3, [pc, #436]	; (8002ea0 <BLDC_IK+0x2b4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd fc4a 	bl	8000588 <__aeabi_f2d>
 8002cf4:	4604      	mov	r4, r0
 8002cf6:	460d      	mov	r5, r1
 8002cf8:	4b6a      	ldr	r3, [pc, #424]	; (8002ea4 <BLDC_IK+0x2b8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fd fc43 	bl	8000588 <__aeabi_f2d>
 8002d02:	4680      	mov	r8, r0
 8002d04:	4689      	mov	r9, r1
 8002d06:	6938      	ldr	r0, [r7, #16]
 8002d08:	f7fd fc3e 	bl	8000588 <__aeabi_f2d>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	ec43 2b10 	vmov	d0, r2, r3
 8002d14:	f006 fb8c 	bl	8009430 <cos>
 8002d18:	ec53 2b10 	vmov	r2, r3, d0
 8002d1c:	4640      	mov	r0, r8
 8002d1e:	4649      	mov	r1, r9
 8002d20:	f7fd fc8a 	bl	8000638 <__aeabi_dmul>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4620      	mov	r0, r4
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	f7fd face 	bl	80002cc <__adddf3>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4614      	mov	r4, r2
 8002d36:	461d      	mov	r5, r3
 8002d38:	68b8      	ldr	r0, [r7, #8]
 8002d3a:	f7fd fc25 	bl	8000588 <__aeabi_f2d>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4620      	mov	r0, r4
 8002d44:	4629      	mov	r1, r5
 8002d46:	f7fd fc77 	bl	8000638 <__aeabi_dmul>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4650      	mov	r0, sl
 8002d50:	4659      	mov	r1, fp
 8002d52:	f7fd fabb 	bl	80002cc <__adddf3>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	ec43 2b18 	vmov	d8, r2, r3
 8002d5e:	4b50      	ldr	r3, [pc, #320]	; (8002ea0 <BLDC_IK+0x2b4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fc10 	bl	8000588 <__aeabi_f2d>
 8002d68:	4604      	mov	r4, r0
 8002d6a:	460d      	mov	r5, r1
 8002d6c:	4b4d      	ldr	r3, [pc, #308]	; (8002ea4 <BLDC_IK+0x2b8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd fc09 	bl	8000588 <__aeabi_f2d>
 8002d76:	4680      	mov	r8, r0
 8002d78:	4689      	mov	r9, r1
 8002d7a:	6938      	ldr	r0, [r7, #16]
 8002d7c:	f7fd fc04 	bl	8000588 <__aeabi_f2d>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	ec43 2b10 	vmov	d0, r2, r3
 8002d88:	f006 fb52 	bl	8009430 <cos>
 8002d8c:	ec53 2b10 	vmov	r2, r3, d0
 8002d90:	4640      	mov	r0, r8
 8002d92:	4649      	mov	r1, r9
 8002d94:	f7fd fc50 	bl	8000638 <__aeabi_dmul>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	4629      	mov	r1, r5
 8002da0:	f7fd fa94 	bl	80002cc <__adddf3>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4614      	mov	r4, r2
 8002daa:	461d      	mov	r5, r3
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f7fd fbeb 	bl	8000588 <__aeabi_f2d>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4620      	mov	r0, r4
 8002db8:	4629      	mov	r1, r5
 8002dba:	f7fd fc3d 	bl	8000638 <__aeabi_dmul>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4690      	mov	r8, r2
 8002dc4:	4699      	mov	r9, r3
 8002dc6:	4b37      	ldr	r3, [pc, #220]	; (8002ea4 <BLDC_IK+0x2b8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fd fbdc 	bl	8000588 <__aeabi_f2d>
 8002dd0:	4604      	mov	r4, r0
 8002dd2:	460d      	mov	r5, r1
 8002dd4:	6938      	ldr	r0, [r7, #16]
 8002dd6:	f7fd fbd7 	bl	8000588 <__aeabi_f2d>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	ec43 2b10 	vmov	d0, r2, r3
 8002de2:	f006 fb79 	bl	80094d8 <sin>
 8002de6:	ec53 2b10 	vmov	r2, r3, d0
 8002dea:	4620      	mov	r0, r4
 8002dec:	4629      	mov	r1, r5
 8002dee:	f7fd fc23 	bl	8000638 <__aeabi_dmul>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4614      	mov	r4, r2
 8002df8:	461d      	mov	r5, r3
 8002dfa:	68b8      	ldr	r0, [r7, #8]
 8002dfc:	f7fd fbc4 	bl	8000588 <__aeabi_f2d>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4620      	mov	r0, r4
 8002e06:	4629      	mov	r1, r5
 8002e08:	f7fd fc16 	bl	8000638 <__aeabi_dmul>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4640      	mov	r0, r8
 8002e12:	4649      	mov	r1, r9
 8002e14:	f7fd fa5a 	bl	80002cc <__adddf3>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	ec43 2b17 	vmov	d7, r2, r3
 8002e20:	eeb0 1a47 	vmov.f32	s2, s14
 8002e24:	eef0 1a67 	vmov.f32	s3, s15
 8002e28:	eeb0 0a48 	vmov.f32	s0, s16
 8002e2c:	eef0 0a68 	vmov.f32	s1, s17
 8002e30:	f006 fbde 	bl	80095f0 <atan2>
 8002e34:	ec53 2b10 	vmov	r2, r3, d0
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f7fd fed4 	bl	8000be8 <__aeabi_d2f>
 8002e40:	4603      	mov	r3, r0
 8002e42:	617b      	str	r3, [r7, #20]
	printf("s1=%f\r\n",s1);
 8002e44:	6978      	ldr	r0, [r7, #20]
 8002e46:	f7fd fb9f 	bl	8000588 <__aeabi_f2d>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4816      	ldr	r0, [pc, #88]	; (8002ea8 <BLDC_IK+0x2bc>)
 8002e50:	f004 f9b2 	bl	80071b8 <iprintf>
	printf("s2=%f\r\n",s2);
 8002e54:	6938      	ldr	r0, [r7, #16]
 8002e56:	f7fd fb97 	bl	8000588 <__aeabi_f2d>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4813      	ldr	r0, [pc, #76]	; (8002eac <BLDC_IK+0x2c0>)
 8002e60:	f004 f9aa 	bl	80071b8 <iprintf>
	printf("x=%f\r\n",x);
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f7fd fb8f 	bl	8000588 <__aeabi_f2d>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4810      	ldr	r0, [pc, #64]	; (8002eb0 <BLDC_IK+0x2c4>)
 8002e70:	f004 f9a2 	bl	80071b8 <iprintf>
	printf("y=%f\r\n",y);
 8002e74:	68b8      	ldr	r0, [r7, #8]
 8002e76:	f7fd fb87 	bl	8000588 <__aeabi_f2d>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	480d      	ldr	r0, [pc, #52]	; (8002eb4 <BLDC_IK+0x2c8>)
 8002e80:	f004 f99a 	bl	80071b8 <iprintf>
	*s1p=s1;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	601a      	str	r2, [r3, #0]
	*s2p=s2;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	601a      	str	r2, [r3, #0]
}
 8002e90:	bf00      	nop
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	ecbd 8b02 	vpop	{d8}
 8002e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000000 	.word	0x20000000
 8002ea4:	20000004 	.word	0x20000004
 8002ea8:	0800b29c 	.word	0x0800b29c
 8002eac:	0800b2a4 	.word	0x0800b2a4
 8002eb0:	0800b418 	.word	0x0800b418
 8002eb4:	0800b420 	.word	0x0800b420

08002eb8 <_write>:
int _write(int file, char *ptr, int len)	//printfに必要
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	230a      	movs	r3, #10
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	4803      	ldr	r0, [pc, #12]	; (8002edc <_write+0x24>)
 8002ece:	f002 fcac 	bl	800582a <HAL_UART_Transmit>
  return len;
 8002ed2:	687b      	ldr	r3, [r7, #4]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	20000254 	.word	0x20000254

08002ee0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*UartHandle)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(&huart2,UART1_Data,6,1000);
//	printf("UART_START\r\n");
//if(get_can_flag==0){
	get_uart_flag=1;
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <HAL_UART_RxCpltCallback+0x1c>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	701a      	strb	r2, [r3, #0]
//	printf("UART_GET\r\n");
//}

}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	20000305 	.word	0x20000305

08002f00 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
//	  printf("TxCan\r\n");
	  nextcan_flag=1;
 8002f08:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	20000307 	.word	0x20000307

08002f20 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
	get_can_flag=1;
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
//	printf("RxCan\r\n");
	HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0, &RxHeader,data);
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8002f30:	4a06      	ldr	r2, [pc, #24]	; (8002f4c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8002f32:	2100      	movs	r1, #0
 8002f34:	4806      	ldr	r0, [pc, #24]	; (8002f50 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002f36:	f000 ff64 	bl	8003e02 <HAL_CAN_GetRxMessage>

}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000306 	.word	0x20000306
 8002f48:	200002f4 	.word	0x200002f4
 8002f4c:	200002d8 	.word	0x200002d8
 8002f50:	20000204 	.word	0x20000204

08002f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f58:	b672      	cpsid	i
}
 8002f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f5c:	e7fe      	b.n	8002f5c <Error_Handler+0x8>

08002f5e <fmaxf>:
#include "math_ops.h"


float fmaxf(float x, float y){
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	ed87 0a01 	vstr	s0, [r7, #4]
 8002f68:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8002f6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f70:	edd7 7a00 	vldr	s15, [r7]
 8002f74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7c:	dd01      	ble.n	8002f82 <fmaxf+0x24>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	e000      	b.n	8002f84 <fmaxf+0x26>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	ee07 3a90 	vmov	s15, r3
    }
 8002f88:	eeb0 0a67 	vmov.f32	s0, s15
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <fminf>:

float fminf(float x, float y){
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	ed87 0a01 	vstr	s0, [r7, #4]
 8002fa0:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8002fa4:	ed97 7a01 	vldr	s14, [r7, #4]
 8002fa8:	edd7 7a00 	vldr	s15, [r7]
 8002fac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb4:	d501      	bpl.n	8002fba <fminf+0x24>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	e000      	b.n	8002fbc <fminf+0x26>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	ee07 3a90 	vmov	s15, r3
    }
 8002fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <float_to_uint>:
        *y = *y * limit/norm;
        }
    }


int float_to_uint(float x, float x_min, float x_max, int bits){
 8002fce:	b480      	push	{r7}
 8002fd0:	b087      	sub	sp, #28
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	ed87 0a03 	vstr	s0, [r7, #12]
 8002fd8:	edc7 0a02 	vstr	s1, [r7, #8]
 8002fdc:	ed87 1a01 	vstr	s2, [r7, #4]
 8002fe0:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 8002fe2:	ed97 7a01 	vldr	s14, [r7, #4]
 8002fe6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fee:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8002ff6:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ffa:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ffe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003002:	2201      	movs	r2, #1
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	ee07 3a90 	vmov	s15, r3
 8003010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003014:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003018:	ed97 7a05 	vldr	s14, [r7, #20]
 800301c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003020:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003024:	ee17 3a90 	vmov	r3, s15
    }
 8003028:	4618      	mov	r0, r3
 800302a:	371c      	adds	r7, #28
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <uint_to_float>:


float uint_to_float(int x_int, float x_min, float x_max, int bits){
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003040:	edc7 0a01 	vstr	s1, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8003046:	ed97 7a01 	vldr	s14, [r7, #4]
 800304a:	edd7 7a02 	vldr	s15, [r7, #8]
 800304e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003052:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	ee07 3a90 	vmov	s15, r3
 8003060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003064:	edd7 7a05 	vldr	s15, [r7, #20]
 8003068:	ee67 6a27 	vmul.f32	s13, s14, s15
 800306c:	2201      	movs	r2, #1
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	ee07 3a90 	vmov	s15, r3
 800307a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800307e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003082:	edd7 7a04 	vldr	s15, [r7, #16]
 8003086:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 800308a:	eeb0 0a67 	vmov.f32	s0, s15
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	607b      	str	r3, [r7, #4]
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <HAL_MspInit+0x4c>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	4a0f      	ldr	r2, [pc, #60]	; (80030e4 <HAL_MspInit+0x4c>)
 80030a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ac:	6453      	str	r3, [r2, #68]	; 0x44
 80030ae:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <HAL_MspInit+0x4c>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_MspInit+0x4c>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <HAL_MspInit+0x4c>)
 80030c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_MspInit+0x4c>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800

080030e8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08c      	sub	sp, #48	; 0x30
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f0:	f107 031c 	add.w	r3, r7, #28
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	60da      	str	r2, [r3, #12]
 80030fe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a64      	ldr	r2, [pc, #400]	; (8003298 <HAL_CAN_MspInit+0x1b0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d157      	bne.n	80031ba <HAL_CAN_MspInit+0xd2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800310a:	4b64      	ldr	r3, [pc, #400]	; (800329c <HAL_CAN_MspInit+0x1b4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	3301      	adds	r3, #1
 8003110:	4a62      	ldr	r2, [pc, #392]	; (800329c <HAL_CAN_MspInit+0x1b4>)
 8003112:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003114:	4b61      	ldr	r3, [pc, #388]	; (800329c <HAL_CAN_MspInit+0x1b4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d10d      	bne.n	8003138 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800311c:	2300      	movs	r3, #0
 800311e:	61bb      	str	r3, [r7, #24]
 8003120:	4b5f      	ldr	r3, [pc, #380]	; (80032a0 <HAL_CAN_MspInit+0x1b8>)
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	4a5e      	ldr	r2, [pc, #376]	; (80032a0 <HAL_CAN_MspInit+0x1b8>)
 8003126:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800312a:	6413      	str	r3, [r2, #64]	; 0x40
 800312c:	4b5c      	ldr	r3, [pc, #368]	; (80032a0 <HAL_CAN_MspInit+0x1b8>)
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	4b58      	ldr	r3, [pc, #352]	; (80032a0 <HAL_CAN_MspInit+0x1b8>)
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	4a57      	ldr	r2, [pc, #348]	; (80032a0 <HAL_CAN_MspInit+0x1b8>)
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	6313      	str	r3, [r2, #48]	; 0x30
 8003148:	4b55      	ldr	r3, [pc, #340]	; (80032a0 <HAL_CAN_MspInit+0x1b8>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003154:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315a:	2302      	movs	r3, #2
 800315c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003162:	2303      	movs	r3, #3
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003166:	2309      	movs	r3, #9
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316a:	f107 031c 	add.w	r3, r7, #28
 800316e:	4619      	mov	r1, r3
 8003170:	484c      	ldr	r0, [pc, #304]	; (80032a4 <HAL_CAN_MspInit+0x1bc>)
 8003172:	f001 fb47 	bl	8004804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800317a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317c:	2302      	movs	r3, #2
 800317e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003180:	2301      	movs	r3, #1
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003184:	2303      	movs	r3, #3
 8003186:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003188:	2309      	movs	r3, #9
 800318a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318c:	f107 031c 	add.w	r3, r7, #28
 8003190:	4619      	mov	r1, r3
 8003192:	4844      	ldr	r0, [pc, #272]	; (80032a4 <HAL_CAN_MspInit+0x1bc>)
 8003194:	f001 fb36 	bl	8004804 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8003198:	2200      	movs	r2, #0
 800319a:	2100      	movs	r1, #0
 800319c:	2013      	movs	r0, #19
 800319e:	f001 fa68 	bl	8004672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80031a2:	2013      	movs	r0, #19
 80031a4:	f001 fa81 	bl	80046aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80031a8:	2200      	movs	r2, #0
 80031aa:	2100      	movs	r1, #0
 80031ac:	2014      	movs	r0, #20
 80031ae:	f001 fa60 	bl	8004672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80031b2:	2014      	movs	r0, #20
 80031b4:	f001 fa79 	bl	80046aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80031b8:	e069      	b.n	800328e <HAL_CAN_MspInit+0x1a6>
  else if(hcan->Instance==CAN2)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a3a      	ldr	r2, [pc, #232]	; (80032a8 <HAL_CAN_MspInit+0x1c0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d164      	bne.n	800328e <HAL_CAN_MspInit+0x1a6>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	4b35      	ldr	r3, [pc, #212]	; (80032a0 <HAL_CAN_MspInit+0x1b8>)
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	4a34      	ldr	r2, [pc, #208]	; (80032a0 <HAL_CAN_MspInit+0x1b8>)
 80031ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031d2:	6413      	str	r3, [r2, #64]	; 0x40
 80031d4:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <HAL_CAN_MspInit+0x1b8>)
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80031e0:	4b2e      	ldr	r3, [pc, #184]	; (800329c <HAL_CAN_MspInit+0x1b4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3301      	adds	r3, #1
 80031e6:	4a2d      	ldr	r2, [pc, #180]	; (800329c <HAL_CAN_MspInit+0x1b4>)
 80031e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80031ea:	4b2c      	ldr	r3, [pc, #176]	; (800329c <HAL_CAN_MspInit+0x1b4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d10d      	bne.n	800320e <HAL_CAN_MspInit+0x126>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	4b2a      	ldr	r3, [pc, #168]	; (80032a0 <HAL_CAN_MspInit+0x1b8>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	4a29      	ldr	r2, [pc, #164]	; (80032a0 <HAL_CAN_MspInit+0x1b8>)
 80031fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003200:	6413      	str	r3, [r2, #64]	; 0x40
 8003202:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <HAL_CAN_MspInit+0x1b8>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	4b23      	ldr	r3, [pc, #140]	; (80032a0 <HAL_CAN_MspInit+0x1b8>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	4a22      	ldr	r2, [pc, #136]	; (80032a0 <HAL_CAN_MspInit+0x1b8>)
 8003218:	f043 0302 	orr.w	r3, r3, #2
 800321c:	6313      	str	r3, [r2, #48]	; 0x30
 800321e:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <HAL_CAN_MspInit+0x1b8>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800322a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800322e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003230:	2302      	movs	r3, #2
 8003232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003234:	2300      	movs	r3, #0
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003238:	2303      	movs	r3, #3
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800323c:	2309      	movs	r3, #9
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003240:	f107 031c 	add.w	r3, r7, #28
 8003244:	4619      	mov	r1, r3
 8003246:	4819      	ldr	r0, [pc, #100]	; (80032ac <HAL_CAN_MspInit+0x1c4>)
 8003248:	f001 fadc 	bl	8004804 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800324c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003252:	2302      	movs	r3, #2
 8003254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003256:	2301      	movs	r3, #1
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800325a:	2303      	movs	r3, #3
 800325c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800325e:	2309      	movs	r3, #9
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003262:	f107 031c 	add.w	r3, r7, #28
 8003266:	4619      	mov	r1, r3
 8003268:	4810      	ldr	r0, [pc, #64]	; (80032ac <HAL_CAN_MspInit+0x1c4>)
 800326a:	f001 facb 	bl	8004804 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 800326e:	2200      	movs	r2, #0
 8003270:	2100      	movs	r1, #0
 8003272:	203f      	movs	r0, #63	; 0x3f
 8003274:	f001 f9fd 	bl	8004672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8003278:	203f      	movs	r0, #63	; 0x3f
 800327a:	f001 fa16 	bl	80046aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800327e:	2200      	movs	r2, #0
 8003280:	2100      	movs	r1, #0
 8003282:	2040      	movs	r0, #64	; 0x40
 8003284:	f001 f9f5 	bl	8004672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003288:	2040      	movs	r0, #64	; 0x40
 800328a:	f001 fa0e 	bl	80046aa <HAL_NVIC_EnableIRQ>
}
 800328e:	bf00      	nop
 8003290:	3730      	adds	r7, #48	; 0x30
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40006400 	.word	0x40006400
 800329c:	2000031c 	.word	0x2000031c
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40020000 	.word	0x40020000
 80032a8:	40006800 	.word	0x40006800
 80032ac:	40020400 	.word	0x40020400

080032b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b8:	f107 0314 	add.w	r3, r7, #20
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	60da      	str	r2, [r3, #12]
 80032c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1d      	ldr	r2, [pc, #116]	; (8003344 <HAL_UART_MspInit+0x94>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d133      	bne.n	800333a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	4b1c      	ldr	r3, [pc, #112]	; (8003348 <HAL_UART_MspInit+0x98>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	4a1b      	ldr	r2, [pc, #108]	; (8003348 <HAL_UART_MspInit+0x98>)
 80032dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e0:	6413      	str	r3, [r2, #64]	; 0x40
 80032e2:	4b19      	ldr	r3, [pc, #100]	; (8003348 <HAL_UART_MspInit+0x98>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	4b15      	ldr	r3, [pc, #84]	; (8003348 <HAL_UART_MspInit+0x98>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	4a14      	ldr	r2, [pc, #80]	; (8003348 <HAL_UART_MspInit+0x98>)
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	6313      	str	r3, [r2, #48]	; 0x30
 80032fe:	4b12      	ldr	r3, [pc, #72]	; (8003348 <HAL_UART_MspInit+0x98>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800330a:	230c      	movs	r3, #12
 800330c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330e:	2302      	movs	r3, #2
 8003310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003316:	2303      	movs	r3, #3
 8003318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800331a:	2307      	movs	r3, #7
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800331e:	f107 0314 	add.w	r3, r7, #20
 8003322:	4619      	mov	r1, r3
 8003324:	4809      	ldr	r0, [pc, #36]	; (800334c <HAL_UART_MspInit+0x9c>)
 8003326:	f001 fa6d 	bl	8004804 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800332a:	2200      	movs	r2, #0
 800332c:	2100      	movs	r1, #0
 800332e:	2026      	movs	r0, #38	; 0x26
 8003330:	f001 f99f 	bl	8004672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003334:	2026      	movs	r0, #38	; 0x26
 8003336:	f001 f9b8 	bl	80046aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800333a:	bf00      	nop
 800333c:	3728      	adds	r7, #40	; 0x28
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40004400 	.word	0x40004400
 8003348:	40023800 	.word	0x40023800
 800334c:	40020000 	.word	0x40020000

08003350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003354:	e7fe      	b.n	8003354 <NMI_Handler+0x4>

08003356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800335a:	e7fe      	b.n	800335a <HardFault_Handler+0x4>

0800335c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003360:	e7fe      	b.n	8003360 <MemManage_Handler+0x4>

08003362 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003362:	b480      	push	{r7}
 8003364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003366:	e7fe      	b.n	8003366 <BusFault_Handler+0x4>

08003368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800336c:	e7fe      	b.n	800336c <UsageFault_Handler+0x4>

0800336e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800336e:	b480      	push	{r7}
 8003370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003372:	bf00      	nop
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800338a:	b480      	push	{r7}
 800338c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800339c:	f000 f974 	bl	8003688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033a0:	bf00      	nop
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80033a8:	4802      	ldr	r0, [pc, #8]	; (80033b4 <CAN1_TX_IRQHandler+0x10>)
 80033aa:	f000 fe62 	bl	8004072 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20000204 	.word	0x20000204

080033b8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80033bc:	4802      	ldr	r0, [pc, #8]	; (80033c8 <CAN1_RX0_IRQHandler+0x10>)
 80033be:	f000 fe58 	bl	8004072 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000204 	.word	0x20000204

080033cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80033d0:	2020      	movs	r0, #32
 80033d2:	f001 fbdd 	bl	8004b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80033e0:	4802      	ldr	r0, [pc, #8]	; (80033ec <USART2_IRQHandler+0x10>)
 80033e2:	f002 fae5 	bl	80059b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000254 	.word	0x20000254

080033f0 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80033f4:	4802      	ldr	r0, [pc, #8]	; (8003400 <CAN2_TX_IRQHandler+0x10>)
 80033f6:	f000 fe3c 	bl	8004072 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	2000022c 	.word	0x2000022c

08003404 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003408:	4802      	ldr	r0, [pc, #8]	; (8003414 <CAN2_RX0_IRQHandler+0x10>)
 800340a:	f000 fe32 	bl	8004072 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	2000022c 	.word	0x2000022c

08003418 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
	return 1;
 800341c:	2301      	movs	r3, #1
}
 800341e:	4618      	mov	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <_kill>:

int _kill(int pid, int sig)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003432:	f003 fa25 	bl	8006880 <__errno>
 8003436:	4603      	mov	r3, r0
 8003438:	2216      	movs	r2, #22
 800343a:	601a      	str	r2, [r3, #0]
	return -1;
 800343c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <_exit>:

void _exit (int status)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003450:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ffe7 	bl	8003428 <_kill>
	while (1) {}		/* Make sure we hang here */
 800345a:	e7fe      	b.n	800345a <_exit+0x12>

0800345c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	e00a      	b.n	8003484 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800346e:	f3af 8000 	nop.w
 8003472:	4601      	mov	r1, r0
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	60ba      	str	r2, [r7, #8]
 800347a:	b2ca      	uxtb	r2, r1
 800347c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	3301      	adds	r3, #1
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	429a      	cmp	r2, r3
 800348a:	dbf0      	blt.n	800346e <_read+0x12>
	}

return len;
 800348c:	687b      	ldr	r3, [r7, #4]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
	return -1;
 800349e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034be:	605a      	str	r2, [r3, #4]
	return 0;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <_isatty>:

int _isatty(int file)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
	return 1;
 80034d6:	2301      	movs	r3, #1
}
 80034d8:	4618      	mov	r0, r3
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
	return 0;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003508:	4a14      	ldr	r2, [pc, #80]	; (800355c <_sbrk+0x5c>)
 800350a:	4b15      	ldr	r3, [pc, #84]	; (8003560 <_sbrk+0x60>)
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003514:	4b13      	ldr	r3, [pc, #76]	; (8003564 <_sbrk+0x64>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d102      	bne.n	8003522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800351c:	4b11      	ldr	r3, [pc, #68]	; (8003564 <_sbrk+0x64>)
 800351e:	4a12      	ldr	r2, [pc, #72]	; (8003568 <_sbrk+0x68>)
 8003520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003522:	4b10      	ldr	r3, [pc, #64]	; (8003564 <_sbrk+0x64>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	429a      	cmp	r2, r3
 800352e:	d207      	bcs.n	8003540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003530:	f003 f9a6 	bl	8006880 <__errno>
 8003534:	4603      	mov	r3, r0
 8003536:	220c      	movs	r2, #12
 8003538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800353a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800353e:	e009      	b.n	8003554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003540:	4b08      	ldr	r3, [pc, #32]	; (8003564 <_sbrk+0x64>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003546:	4b07      	ldr	r3, [pc, #28]	; (8003564 <_sbrk+0x64>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4413      	add	r3, r2
 800354e:	4a05      	ldr	r2, [pc, #20]	; (8003564 <_sbrk+0x64>)
 8003550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003552:	68fb      	ldr	r3, [r7, #12]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20020000 	.word	0x20020000
 8003560:	00000400 	.word	0x00000400
 8003564:	20000320 	.word	0x20000320
 8003568:	20000338 	.word	0x20000338

0800356c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <SystemInit+0x20>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003576:	4a05      	ldr	r2, [pc, #20]	; (800358c <SystemInit+0x20>)
 8003578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800357c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003594:	480d      	ldr	r0, [pc, #52]	; (80035cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003596:	490e      	ldr	r1, [pc, #56]	; (80035d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003598:	4a0e      	ldr	r2, [pc, #56]	; (80035d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800359a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800359c:	e002      	b.n	80035a4 <LoopCopyDataInit>

0800359e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800359e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035a2:	3304      	adds	r3, #4

080035a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035a8:	d3f9      	bcc.n	800359e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035aa:	4a0b      	ldr	r2, [pc, #44]	; (80035d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035ac:	4c0b      	ldr	r4, [pc, #44]	; (80035dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80035ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035b0:	e001      	b.n	80035b6 <LoopFillZerobss>

080035b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035b4:	3204      	adds	r2, #4

080035b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035b8:	d3fb      	bcc.n	80035b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035ba:	f7ff ffd7 	bl	800356c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035be:	f003 f965 	bl	800688c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035c2:	f7fe fb0d 	bl	8001be0 <main>
  bx  lr    
 80035c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035d0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80035d4:	0800ba78 	.word	0x0800ba78
  ldr r2, =_sbss
 80035d8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80035dc:	20000338 	.word	0x20000338

080035e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035e0:	e7fe      	b.n	80035e0 <ADC_IRQHandler>
	...

080035e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035e8:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <HAL_Init+0x40>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a0d      	ldr	r2, [pc, #52]	; (8003624 <HAL_Init+0x40>)
 80035ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_Init+0x40>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <HAL_Init+0x40>)
 80035fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003600:	4b08      	ldr	r3, [pc, #32]	; (8003624 <HAL_Init+0x40>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a07      	ldr	r2, [pc, #28]	; (8003624 <HAL_Init+0x40>)
 8003606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800360c:	2003      	movs	r0, #3
 800360e:	f001 f825 	bl	800465c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003612:	2000      	movs	r0, #0
 8003614:	f000 f808 	bl	8003628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003618:	f7ff fd3e 	bl	8003098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40023c00 	.word	0x40023c00

08003628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003630:	4b12      	ldr	r3, [pc, #72]	; (800367c <HAL_InitTick+0x54>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4b12      	ldr	r3, [pc, #72]	; (8003680 <HAL_InitTick+0x58>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	4619      	mov	r1, r3
 800363a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800363e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003642:	fbb2 f3f3 	udiv	r3, r2, r3
 8003646:	4618      	mov	r0, r3
 8003648:	f001 f83d 	bl	80046c6 <HAL_SYSTICK_Config>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e00e      	b.n	8003674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b0f      	cmp	r3, #15
 800365a:	d80a      	bhi.n	8003672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800365c:	2200      	movs	r2, #0
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003664:	f001 f805 	bl	8004672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003668:	4a06      	ldr	r2, [pc, #24]	; (8003684 <HAL_InitTick+0x5c>)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	e000      	b.n	8003674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
}
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	2000000c 	.word	0x2000000c
 8003680:	20000014 	.word	0x20000014
 8003684:	20000010 	.word	0x20000010

08003688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800368c:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <HAL_IncTick+0x20>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	461a      	mov	r2, r3
 8003692:	4b06      	ldr	r3, [pc, #24]	; (80036ac <HAL_IncTick+0x24>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4413      	add	r3, r2
 8003698:	4a04      	ldr	r2, [pc, #16]	; (80036ac <HAL_IncTick+0x24>)
 800369a:	6013      	str	r3, [r2, #0]
}
 800369c:	bf00      	nop
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000014 	.word	0x20000014
 80036ac:	20000324 	.word	0x20000324

080036b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  return uwTick;
 80036b4:	4b03      	ldr	r3, [pc, #12]	; (80036c4 <HAL_GetTick+0x14>)
 80036b6:	681b      	ldr	r3, [r3, #0]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	20000324 	.word	0x20000324

080036c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036d0:	f7ff ffee 	bl	80036b0 <HAL_GetTick>
 80036d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036e0:	d005      	beq.n	80036ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036e2:	4b0a      	ldr	r3, [pc, #40]	; (800370c <HAL_Delay+0x44>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036ee:	bf00      	nop
 80036f0:	f7ff ffde 	bl	80036b0 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d8f7      	bhi.n	80036f0 <HAL_Delay+0x28>
  {
  }
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20000014 	.word	0x20000014

08003710 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e0ed      	b.n	80038fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d102      	bne.n	8003734 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7ff fcda 	bl	80030e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003744:	f7ff ffb4 	bl	80036b0 <HAL_GetTick>
 8003748:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800374a:	e012      	b.n	8003772 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800374c:	f7ff ffb0 	bl	80036b0 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b0a      	cmp	r3, #10
 8003758:	d90b      	bls.n	8003772 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2205      	movs	r2, #5
 800376a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e0c5      	b.n	80038fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0e5      	beq.n	800374c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0202 	bic.w	r2, r2, #2
 800378e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003790:	f7ff ff8e 	bl	80036b0 <HAL_GetTick>
 8003794:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003796:	e012      	b.n	80037be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003798:	f7ff ff8a 	bl	80036b0 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b0a      	cmp	r3, #10
 80037a4:	d90b      	bls.n	80037be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2205      	movs	r2, #5
 80037b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e09f      	b.n	80038fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e5      	bne.n	8003798 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	7e1b      	ldrb	r3, [r3, #24]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d108      	bne.n	80037e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	e007      	b.n	80037f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7e5b      	ldrb	r3, [r3, #25]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d108      	bne.n	8003810 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e007      	b.n	8003820 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	7e9b      	ldrb	r3, [r3, #26]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d108      	bne.n	800383a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0220 	orr.w	r2, r2, #32
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	e007      	b.n	800384a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0220 	bic.w	r2, r2, #32
 8003848:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	7edb      	ldrb	r3, [r3, #27]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d108      	bne.n	8003864 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0210 	bic.w	r2, r2, #16
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	e007      	b.n	8003874 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0210 	orr.w	r2, r2, #16
 8003872:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	7f1b      	ldrb	r3, [r3, #28]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d108      	bne.n	800388e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0208 	orr.w	r2, r2, #8
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e007      	b.n	800389e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0208 	bic.w	r2, r2, #8
 800389c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	7f5b      	ldrb	r3, [r3, #29]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d108      	bne.n	80038b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0204 	orr.w	r2, r2, #4
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	e007      	b.n	80038c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0204 	bic.w	r2, r2, #4
 80038c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	ea42 0103 	orr.w	r1, r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	1e5a      	subs	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800391e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d003      	beq.n	800392e <HAL_CAN_ConfigFilter+0x26>
 8003926:	7cfb      	ldrb	r3, [r7, #19]
 8003928:	2b02      	cmp	r3, #2
 800392a:	f040 80be 	bne.w	8003aaa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800392e:	4b65      	ldr	r3, [pc, #404]	; (8003ac4 <HAL_CAN_ConfigFilter+0x1bc>)
 8003930:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003938:	f043 0201 	orr.w	r2, r3, #1
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003948:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	431a      	orrs	r2, r3
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f003 031f 	and.w	r3, r3, #31
 800396e:	2201      	movs	r2, #1
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	43db      	mvns	r3, r3
 8003980:	401a      	ands	r2, r3
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d123      	bne.n	80039d8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	43db      	mvns	r3, r3
 800399a:	401a      	ands	r2, r3
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80039b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	3248      	adds	r2, #72	; 0x48
 80039b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039ce:	6979      	ldr	r1, [r7, #20]
 80039d0:	3348      	adds	r3, #72	; 0x48
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	440b      	add	r3, r1
 80039d6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d122      	bne.n	8003a26 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	431a      	orrs	r2, r3
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a00:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	3248      	adds	r2, #72	; 0x48
 8003a06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a1a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a1c:	6979      	ldr	r1, [r7, #20]
 8003a1e:	3348      	adds	r3, #72	; 0x48
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	440b      	add	r3, r1
 8003a24:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d109      	bne.n	8003a42 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	43db      	mvns	r3, r3
 8003a38:	401a      	ands	r2, r3
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003a40:	e007      	b.n	8003a52 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	43db      	mvns	r3, r3
 8003a64:	401a      	ands	r2, r3
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003a6c:	e007      	b.n	8003a7e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d107      	bne.n	8003a96 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a9c:	f023 0201 	bic.w	r2, r3, #1
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	e006      	b.n	8003ab8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
  }
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	371c      	adds	r7, #28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	40006400 	.word	0x40006400

08003ac8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d12e      	bne.n	8003b3a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003af4:	f7ff fddc 	bl	80036b0 <HAL_GetTick>
 8003af8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003afa:	e012      	b.n	8003b22 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003afc:	f7ff fdd8 	bl	80036b0 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b0a      	cmp	r3, #10
 8003b08:	d90b      	bls.n	8003b22 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2205      	movs	r2, #5
 8003b1a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e012      	b.n	8003b48 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1e5      	bne.n	8003afc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	e006      	b.n	8003b48 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
  }
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d133      	bne.n	8003bcc <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b74:	f7ff fd9c 	bl	80036b0 <HAL_GetTick>
 8003b78:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b7a:	e012      	b.n	8003ba2 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b7c:	f7ff fd98 	bl	80036b0 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b0a      	cmp	r3, #10
 8003b88:	d90b      	bls.n	8003ba2 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2205      	movs	r2, #5
 8003b9a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e01b      	b.n	8003bda <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0e5      	beq.n	8003b7c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0202 	bic.w	r2, r2, #2
 8003bbe:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	e006      	b.n	8003bda <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
  }
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b089      	sub	sp, #36	; 0x24
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	607a      	str	r2, [r7, #4]
 8003bee:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bf6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c00:	7ffb      	ldrb	r3, [r7, #31]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d003      	beq.n	8003c0e <HAL_CAN_AddTxMessage+0x2c>
 8003c06:	7ffb      	ldrb	r3, [r7, #31]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	f040 80b8 	bne.w	8003d7e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10a      	bne.n	8003c2e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d105      	bne.n	8003c2e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80a0 	beq.w	8003d6e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	0e1b      	lsrs	r3, r3, #24
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d907      	bls.n	8003c4e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e09e      	b.n	8003d8c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003c4e:	2201      	movs	r2, #1
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	409a      	lsls	r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10d      	bne.n	8003c7c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003c6a:	68f9      	ldr	r1, [r7, #12]
 8003c6c:	6809      	ldr	r1, [r1, #0]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	3318      	adds	r3, #24
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	440b      	add	r3, r1
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	e00f      	b.n	8003c9c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c86:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c8c:	68f9      	ldr	r1, [r7, #12]
 8003c8e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003c90:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	3318      	adds	r3, #24
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	440b      	add	r3, r1
 8003c9a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6819      	ldr	r1, [r3, #0]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	3318      	adds	r3, #24
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	440b      	add	r3, r1
 8003cac:	3304      	adds	r3, #4
 8003cae:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	7d1b      	ldrb	r3, [r3, #20]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d111      	bne.n	8003cdc <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	3318      	adds	r3, #24
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	6811      	ldr	r1, [r2, #0]
 8003ccc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	3318      	adds	r3, #24
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	440b      	add	r3, r1
 8003cd8:	3304      	adds	r3, #4
 8003cda:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3307      	adds	r3, #7
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	061a      	lsls	r2, r3, #24
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3306      	adds	r3, #6
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	041b      	lsls	r3, r3, #16
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3305      	adds	r3, #5
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	3204      	adds	r2, #4
 8003cfc:	7812      	ldrb	r2, [r2, #0]
 8003cfe:	4610      	mov	r0, r2
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	6811      	ldr	r1, [r2, #0]
 8003d04:	ea43 0200 	orr.w	r2, r3, r0
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	440b      	add	r3, r1
 8003d0e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003d12:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3303      	adds	r3, #3
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	061a      	lsls	r2, r3, #24
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3302      	adds	r3, #2
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	041b      	lsls	r3, r3, #16
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	021b      	lsls	r3, r3, #8
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	7812      	ldrb	r2, [r2, #0]
 8003d34:	4610      	mov	r0, r2
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	6811      	ldr	r1, [r2, #0]
 8003d3a:	ea43 0200 	orr.w	r2, r3, r0
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	440b      	add	r3, r1
 8003d44:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003d48:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	3318      	adds	r3, #24
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	4413      	add	r3, r2
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	6811      	ldr	r1, [r2, #0]
 8003d5c:	f043 0201 	orr.w	r2, r3, #1
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	3318      	adds	r3, #24
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	440b      	add	r3, r1
 8003d68:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e00e      	b.n	8003d8c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e006      	b.n	8003d8c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
  }
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3724      	adds	r7, #36	; 0x24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003daa:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003dac:	7afb      	ldrb	r3, [r7, #11]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d002      	beq.n	8003db8 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003db2:	7afb      	ldrb	r3, [r7, #11]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d11d      	bne.n	8003df4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	3301      	adds	r3, #1
 8003df2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003df4:	68fb      	ldr	r3, [r7, #12]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003e02:	b480      	push	{r7}
 8003e04:	b087      	sub	sp, #28
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	607a      	str	r2, [r7, #4]
 8003e0e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e16:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e18:	7dfb      	ldrb	r3, [r7, #23]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d003      	beq.n	8003e26 <HAL_CAN_GetRxMessage+0x24>
 8003e1e:	7dfb      	ldrb	r3, [r7, #23]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	f040 80f3 	bne.w	800400c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10e      	bne.n	8003e4a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d116      	bne.n	8003e68 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e0e7      	b.n	800401a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d107      	bne.n	8003e68 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0d8      	b.n	800401a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	331b      	adds	r3, #27
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	4413      	add	r3, r2
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0204 	and.w	r2, r3, #4
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10c      	bne.n	8003ea0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	331b      	adds	r3, #27
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	4413      	add	r3, r2
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	0d5b      	lsrs	r3, r3, #21
 8003e96:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	e00b      	b.n	8003eb8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	331b      	adds	r3, #27
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	4413      	add	r3, r2
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	08db      	lsrs	r3, r3, #3
 8003eb0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	331b      	adds	r3, #27
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	4413      	add	r3, r2
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0202 	and.w	r2, r3, #2
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	331b      	adds	r3, #27
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	4413      	add	r3, r2
 8003eda:	3304      	adds	r3, #4
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 020f 	and.w	r2, r3, #15
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	331b      	adds	r3, #27
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	0a1b      	lsrs	r3, r3, #8
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	331b      	adds	r3, #27
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	4413      	add	r3, r2
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	0c1b      	lsrs	r3, r3, #16
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	0a1a      	lsrs	r2, r3, #8
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	3301      	adds	r3, #1
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	0c1a      	lsrs	r2, r3, #16
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	3302      	adds	r3, #2
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	0e1a      	lsrs	r2, r3, #24
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	3303      	adds	r3, #3
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	0a1a      	lsrs	r2, r3, #8
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	3305      	adds	r3, #5
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	0c1a      	lsrs	r2, r3, #16
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	3306      	adds	r3, #6
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	0e1a      	lsrs	r2, r3, #24
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	3307      	adds	r3, #7
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d108      	bne.n	8003ff8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0220 	orr.w	r2, r2, #32
 8003ff4:	60da      	str	r2, [r3, #12]
 8003ff6:	e007      	b.n	8004008 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0220 	orr.w	r2, r2, #32
 8004006:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	e006      	b.n	800401a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
  }
}
 800401a:	4618      	mov	r0, r3
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004026:	b480      	push	{r7}
 8004028:	b085      	sub	sp, #20
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004036:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d002      	beq.n	8004044 <HAL_CAN_ActivateNotification+0x1e>
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	2b02      	cmp	r3, #2
 8004042:	d109      	bne.n	8004058 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6959      	ldr	r1, [r3, #20]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	e006      	b.n	8004066 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
  }
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b08a      	sub	sp, #40	; 0x28
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800407a:	2300      	movs	r3, #0
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d07c      	beq.n	80041b2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d023      	beq.n	800410a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2201      	movs	r2, #1
 80040c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7fe ff13 	bl	8002f00 <HAL_CAN_TxMailbox0CompleteCallback>
 80040da:	e016      	b.n	800410a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d004      	beq.n	80040f0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
 80040ee:	e00c      	b.n	800410a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d004      	beq.n	8004104 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
 8004102:	e002      	b.n	800410a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f97f 	bl	8004408 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d024      	beq.n	800415e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f44f 7280 	mov.w	r2, #256	; 0x100
 800411c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f959 	bl	80043e0 <HAL_CAN_TxMailbox1CompleteCallback>
 800412e:	e016      	b.n	800415e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004136:	2b00      	cmp	r3, #0
 8004138:	d004      	beq.n	8004144 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
 8004142:	e00c      	b.n	800415e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800414a:	2b00      	cmp	r3, #0
 800414c:	d004      	beq.n	8004158 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
 8004156:	e002      	b.n	800415e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f95f 	bl	800441c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d024      	beq.n	80041b2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004170:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f939 	bl	80043f4 <HAL_CAN_TxMailbox2CompleteCallback>
 8004182:	e016      	b.n	80041b2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d004      	beq.n	8004198 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
 8004196:	e00c      	b.n	80041b2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d004      	beq.n	80041ac <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
 80041aa:	e002      	b.n	80041b2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f93f 	bl	8004430 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00c      	beq.n	80041d6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f003 0310 	and.w	r3, r3, #16
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2210      	movs	r2, #16
 80041d4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00b      	beq.n	80041f8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d006      	beq.n	80041f8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2208      	movs	r2, #8
 80041f0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f926 	bl	8004444 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d009      	beq.n	8004216 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f003 0303 	and.w	r3, r3, #3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7fe fe85 	bl	8002f20 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00c      	beq.n	800423a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b00      	cmp	r3, #0
 8004228:	d007      	beq.n	800423a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004230:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2210      	movs	r2, #16
 8004238:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00b      	beq.n	800425c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d006      	beq.n	800425c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2208      	movs	r2, #8
 8004254:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f908 	bl	800446c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f003 0303 	and.w	r3, r3, #3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f8ef 	bl	8004458 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00b      	beq.n	800429c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0310 	and.w	r3, r3, #16
 800428a:	2b00      	cmp	r3, #0
 800428c:	d006      	beq.n	800429c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2210      	movs	r2, #16
 8004294:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f8f2 	bl	8004480 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d006      	beq.n	80042be <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2208      	movs	r2, #8
 80042b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f8eb 	bl	8004494 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d07b      	beq.n	80043c0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d072      	beq.n	80043b8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	f043 0301 	orr.w	r3, r3, #1
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	f043 0302 	orr.w	r3, r3, #2
 8004308:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	f043 0304 	orr.w	r3, r3, #4
 8004324:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800432c:	2b00      	cmp	r3, #0
 800432e:	d043      	beq.n	80043b8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004336:	2b00      	cmp	r3, #0
 8004338:	d03e      	beq.n	80043b8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004340:	2b60      	cmp	r3, #96	; 0x60
 8004342:	d02b      	beq.n	800439c <HAL_CAN_IRQHandler+0x32a>
 8004344:	2b60      	cmp	r3, #96	; 0x60
 8004346:	d82e      	bhi.n	80043a6 <HAL_CAN_IRQHandler+0x334>
 8004348:	2b50      	cmp	r3, #80	; 0x50
 800434a:	d022      	beq.n	8004392 <HAL_CAN_IRQHandler+0x320>
 800434c:	2b50      	cmp	r3, #80	; 0x50
 800434e:	d82a      	bhi.n	80043a6 <HAL_CAN_IRQHandler+0x334>
 8004350:	2b40      	cmp	r3, #64	; 0x40
 8004352:	d019      	beq.n	8004388 <HAL_CAN_IRQHandler+0x316>
 8004354:	2b40      	cmp	r3, #64	; 0x40
 8004356:	d826      	bhi.n	80043a6 <HAL_CAN_IRQHandler+0x334>
 8004358:	2b30      	cmp	r3, #48	; 0x30
 800435a:	d010      	beq.n	800437e <HAL_CAN_IRQHandler+0x30c>
 800435c:	2b30      	cmp	r3, #48	; 0x30
 800435e:	d822      	bhi.n	80043a6 <HAL_CAN_IRQHandler+0x334>
 8004360:	2b10      	cmp	r3, #16
 8004362:	d002      	beq.n	800436a <HAL_CAN_IRQHandler+0x2f8>
 8004364:	2b20      	cmp	r3, #32
 8004366:	d005      	beq.n	8004374 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004368:	e01d      	b.n	80043a6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	f043 0308 	orr.w	r3, r3, #8
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004372:	e019      	b.n	80043a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	f043 0310 	orr.w	r3, r3, #16
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800437c:	e014      	b.n	80043a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	f043 0320 	orr.w	r3, r3, #32
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004386:	e00f      	b.n	80043a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004390:	e00a      	b.n	80043a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800439a:	e005      	b.n	80043a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80043a4:	e000      	b.n	80043a8 <HAL_CAN_IRQHandler+0x336>
            break;
 80043a6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80043b6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2204      	movs	r2, #4
 80043be:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d008      	beq.n	80043d8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f868 	bl	80044a8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80043d8:	bf00      	nop
 80043da:	3728      	adds	r7, #40	; 0x28
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044cc:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <__NVIC_SetPriorityGrouping+0x44>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044d8:	4013      	ands	r3, r2
 80044da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ee:	4a04      	ldr	r2, [pc, #16]	; (8004500 <__NVIC_SetPriorityGrouping+0x44>)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	60d3      	str	r3, [r2, #12]
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	e000ed00 	.word	0xe000ed00

08004504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004508:	4b04      	ldr	r3, [pc, #16]	; (800451c <__NVIC_GetPriorityGrouping+0x18>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	0a1b      	lsrs	r3, r3, #8
 800450e:	f003 0307 	and.w	r3, r3, #7
}
 8004512:	4618      	mov	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	e000ed00 	.word	0xe000ed00

08004520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	4603      	mov	r3, r0
 8004528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800452a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452e:	2b00      	cmp	r3, #0
 8004530:	db0b      	blt.n	800454a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	f003 021f 	and.w	r2, r3, #31
 8004538:	4907      	ldr	r1, [pc, #28]	; (8004558 <__NVIC_EnableIRQ+0x38>)
 800453a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	2001      	movs	r0, #1
 8004542:	fa00 f202 	lsl.w	r2, r0, r2
 8004546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	e000e100 	.word	0xe000e100

0800455c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	6039      	str	r1, [r7, #0]
 8004566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456c:	2b00      	cmp	r3, #0
 800456e:	db0a      	blt.n	8004586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	b2da      	uxtb	r2, r3
 8004574:	490c      	ldr	r1, [pc, #48]	; (80045a8 <__NVIC_SetPriority+0x4c>)
 8004576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457a:	0112      	lsls	r2, r2, #4
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	440b      	add	r3, r1
 8004580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004584:	e00a      	b.n	800459c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	b2da      	uxtb	r2, r3
 800458a:	4908      	ldr	r1, [pc, #32]	; (80045ac <__NVIC_SetPriority+0x50>)
 800458c:	79fb      	ldrb	r3, [r7, #7]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	3b04      	subs	r3, #4
 8004594:	0112      	lsls	r2, r2, #4
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	440b      	add	r3, r1
 800459a:	761a      	strb	r2, [r3, #24]
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	e000e100 	.word	0xe000e100
 80045ac:	e000ed00 	.word	0xe000ed00

080045b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b089      	sub	sp, #36	; 0x24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f1c3 0307 	rsb	r3, r3, #7
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	bf28      	it	cs
 80045ce:	2304      	movcs	r3, #4
 80045d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	3304      	adds	r3, #4
 80045d6:	2b06      	cmp	r3, #6
 80045d8:	d902      	bls.n	80045e0 <NVIC_EncodePriority+0x30>
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	3b03      	subs	r3, #3
 80045de:	e000      	b.n	80045e2 <NVIC_EncodePriority+0x32>
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	43da      	mvns	r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	401a      	ands	r2, r3
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004602:	43d9      	mvns	r1, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004608:	4313      	orrs	r3, r2
         );
}
 800460a:	4618      	mov	r0, r3
 800460c:	3724      	adds	r7, #36	; 0x24
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
	...

08004618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3b01      	subs	r3, #1
 8004624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004628:	d301      	bcc.n	800462e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800462a:	2301      	movs	r3, #1
 800462c:	e00f      	b.n	800464e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800462e:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <SysTick_Config+0x40>)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3b01      	subs	r3, #1
 8004634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004636:	210f      	movs	r1, #15
 8004638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800463c:	f7ff ff8e 	bl	800455c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004640:	4b05      	ldr	r3, [pc, #20]	; (8004658 <SysTick_Config+0x40>)
 8004642:	2200      	movs	r2, #0
 8004644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004646:	4b04      	ldr	r3, [pc, #16]	; (8004658 <SysTick_Config+0x40>)
 8004648:	2207      	movs	r2, #7
 800464a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	e000e010 	.word	0xe000e010

0800465c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff ff29 	bl	80044bc <__NVIC_SetPriorityGrouping>
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004672:	b580      	push	{r7, lr}
 8004674:	b086      	sub	sp, #24
 8004676:	af00      	add	r7, sp, #0
 8004678:	4603      	mov	r3, r0
 800467a:	60b9      	str	r1, [r7, #8]
 800467c:	607a      	str	r2, [r7, #4]
 800467e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004684:	f7ff ff3e 	bl	8004504 <__NVIC_GetPriorityGrouping>
 8004688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	6978      	ldr	r0, [r7, #20]
 8004690:	f7ff ff8e 	bl	80045b0 <NVIC_EncodePriority>
 8004694:	4602      	mov	r2, r0
 8004696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800469a:	4611      	mov	r1, r2
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff ff5d 	bl	800455c <__NVIC_SetPriority>
}
 80046a2:	bf00      	nop
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b082      	sub	sp, #8
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	4603      	mov	r3, r0
 80046b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff ff31 	bl	8004520 <__NVIC_EnableIRQ>
}
 80046be:	bf00      	nop
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff ffa2 	bl	8004618 <SysTick_Config>
 80046d4:	4603      	mov	r3, r0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046ec:	f7fe ffe0 	bl	80036b0 <HAL_GetTick>
 80046f0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d008      	beq.n	8004710 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2280      	movs	r2, #128	; 0x80
 8004702:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e052      	b.n	80047b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0216 	bic.w	r2, r2, #22
 800471e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800472e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d103      	bne.n	8004740 <HAL_DMA_Abort+0x62>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473c:	2b00      	cmp	r3, #0
 800473e:	d007      	beq.n	8004750 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0208 	bic.w	r2, r2, #8
 800474e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0201 	bic.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004760:	e013      	b.n	800478a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004762:	f7fe ffa5 	bl	80036b0 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b05      	cmp	r3, #5
 800476e:	d90c      	bls.n	800478a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2203      	movs	r2, #3
 800477a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e015      	b.n	80047b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e4      	bne.n	8004762 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479c:	223f      	movs	r2, #63	; 0x3f
 800479e:	409a      	lsls	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d004      	beq.n	80047dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2280      	movs	r2, #128	; 0x80
 80047d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e00c      	b.n	80047f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2205      	movs	r2, #5
 80047e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0201 	bic.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
	...

08004804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004804:	b480      	push	{r7}
 8004806:	b089      	sub	sp, #36	; 0x24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004816:	2300      	movs	r3, #0
 8004818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800481a:	2300      	movs	r3, #0
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	e165      	b.n	8004aec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004820:	2201      	movs	r2, #1
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4013      	ands	r3, r2
 8004832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	429a      	cmp	r2, r3
 800483a:	f040 8154 	bne.w	8004ae6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	2b01      	cmp	r3, #1
 8004848:	d005      	beq.n	8004856 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004852:	2b02      	cmp	r3, #2
 8004854:	d130      	bne.n	80048b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	2203      	movs	r2, #3
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	4313      	orrs	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800488c:	2201      	movs	r2, #1
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	43db      	mvns	r3, r3
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	4013      	ands	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	f003 0201 	and.w	r2, r3, #1
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d017      	beq.n	80048f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	2203      	movs	r2, #3
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	43db      	mvns	r3, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4013      	ands	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d123      	bne.n	8004948 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	08da      	lsrs	r2, r3, #3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3208      	adds	r2, #8
 8004908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800490c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	220f      	movs	r2, #15
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	43db      	mvns	r3, r3
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4013      	ands	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	4313      	orrs	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	08da      	lsrs	r2, r3, #3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3208      	adds	r2, #8
 8004942:	69b9      	ldr	r1, [r7, #24]
 8004944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	2203      	movs	r2, #3
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	43db      	mvns	r3, r3
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	4013      	ands	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f003 0203 	and.w	r2, r3, #3
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4313      	orrs	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80ae 	beq.w	8004ae6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800498a:	2300      	movs	r3, #0
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	4b5d      	ldr	r3, [pc, #372]	; (8004b04 <HAL_GPIO_Init+0x300>)
 8004990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004992:	4a5c      	ldr	r2, [pc, #368]	; (8004b04 <HAL_GPIO_Init+0x300>)
 8004994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004998:	6453      	str	r3, [r2, #68]	; 0x44
 800499a:	4b5a      	ldr	r3, [pc, #360]	; (8004b04 <HAL_GPIO_Init+0x300>)
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049a6:	4a58      	ldr	r2, [pc, #352]	; (8004b08 <HAL_GPIO_Init+0x304>)
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	089b      	lsrs	r3, r3, #2
 80049ac:	3302      	adds	r3, #2
 80049ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	220f      	movs	r2, #15
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	43db      	mvns	r3, r3
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	4013      	ands	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a4f      	ldr	r2, [pc, #316]	; (8004b0c <HAL_GPIO_Init+0x308>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d025      	beq.n	8004a1e <HAL_GPIO_Init+0x21a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a4e      	ldr	r2, [pc, #312]	; (8004b10 <HAL_GPIO_Init+0x30c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d01f      	beq.n	8004a1a <HAL_GPIO_Init+0x216>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a4d      	ldr	r2, [pc, #308]	; (8004b14 <HAL_GPIO_Init+0x310>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d019      	beq.n	8004a16 <HAL_GPIO_Init+0x212>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a4c      	ldr	r2, [pc, #304]	; (8004b18 <HAL_GPIO_Init+0x314>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d013      	beq.n	8004a12 <HAL_GPIO_Init+0x20e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a4b      	ldr	r2, [pc, #300]	; (8004b1c <HAL_GPIO_Init+0x318>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00d      	beq.n	8004a0e <HAL_GPIO_Init+0x20a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a4a      	ldr	r2, [pc, #296]	; (8004b20 <HAL_GPIO_Init+0x31c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d007      	beq.n	8004a0a <HAL_GPIO_Init+0x206>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a49      	ldr	r2, [pc, #292]	; (8004b24 <HAL_GPIO_Init+0x320>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d101      	bne.n	8004a06 <HAL_GPIO_Init+0x202>
 8004a02:	2306      	movs	r3, #6
 8004a04:	e00c      	b.n	8004a20 <HAL_GPIO_Init+0x21c>
 8004a06:	2307      	movs	r3, #7
 8004a08:	e00a      	b.n	8004a20 <HAL_GPIO_Init+0x21c>
 8004a0a:	2305      	movs	r3, #5
 8004a0c:	e008      	b.n	8004a20 <HAL_GPIO_Init+0x21c>
 8004a0e:	2304      	movs	r3, #4
 8004a10:	e006      	b.n	8004a20 <HAL_GPIO_Init+0x21c>
 8004a12:	2303      	movs	r3, #3
 8004a14:	e004      	b.n	8004a20 <HAL_GPIO_Init+0x21c>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e002      	b.n	8004a20 <HAL_GPIO_Init+0x21c>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <HAL_GPIO_Init+0x21c>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	f002 0203 	and.w	r2, r2, #3
 8004a26:	0092      	lsls	r2, r2, #2
 8004a28:	4093      	lsls	r3, r2
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a30:	4935      	ldr	r1, [pc, #212]	; (8004b08 <HAL_GPIO_Init+0x304>)
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	089b      	lsrs	r3, r3, #2
 8004a36:	3302      	adds	r3, #2
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a3e:	4b3a      	ldr	r3, [pc, #232]	; (8004b28 <HAL_GPIO_Init+0x324>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	43db      	mvns	r3, r3
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a62:	4a31      	ldr	r2, [pc, #196]	; (8004b28 <HAL_GPIO_Init+0x324>)
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a68:	4b2f      	ldr	r3, [pc, #188]	; (8004b28 <HAL_GPIO_Init+0x324>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	43db      	mvns	r3, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	4013      	ands	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a8c:	4a26      	ldr	r2, [pc, #152]	; (8004b28 <HAL_GPIO_Init+0x324>)
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a92:	4b25      	ldr	r3, [pc, #148]	; (8004b28 <HAL_GPIO_Init+0x324>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ab6:	4a1c      	ldr	r2, [pc, #112]	; (8004b28 <HAL_GPIO_Init+0x324>)
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004abc:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <HAL_GPIO_Init+0x324>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ae0:	4a11      	ldr	r2, [pc, #68]	; (8004b28 <HAL_GPIO_Init+0x324>)
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	61fb      	str	r3, [r7, #28]
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	2b0f      	cmp	r3, #15
 8004af0:	f67f ae96 	bls.w	8004820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop
 8004af8:	3724      	adds	r7, #36	; 0x24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40023800 	.word	0x40023800
 8004b08:	40013800 	.word	0x40013800
 8004b0c:	40020000 	.word	0x40020000
 8004b10:	40020400 	.word	0x40020400
 8004b14:	40020800 	.word	0x40020800
 8004b18:	40020c00 	.word	0x40020c00
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	40021400 	.word	0x40021400
 8004b24:	40021800 	.word	0x40021800
 8004b28:	40013c00 	.word	0x40013c00

08004b2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	887b      	ldrh	r3, [r7, #2]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b44:	2301      	movs	r3, #1
 8004b46:	73fb      	strb	r3, [r7, #15]
 8004b48:	e001      	b.n	8004b4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	807b      	strh	r3, [r7, #2]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b6c:	787b      	ldrb	r3, [r7, #1]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b72:	887a      	ldrh	r2, [r7, #2]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b78:	e003      	b.n	8004b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b7a:	887b      	ldrh	r3, [r7, #2]
 8004b7c:	041a      	lsls	r2, r3, #16
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	619a      	str	r2, [r3, #24]
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b9a:	4b08      	ldr	r3, [pc, #32]	; (8004bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b9c:	695a      	ldr	r2, [r3, #20]
 8004b9e:	88fb      	ldrh	r3, [r7, #6]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d006      	beq.n	8004bb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ba6:	4a05      	ldr	r2, [pc, #20]	; (8004bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ba8:	88fb      	ldrh	r3, [r7, #6]
 8004baa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bac:	88fb      	ldrh	r3, [r7, #6]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fc f9ec 	bl	8000f8c <HAL_GPIO_EXTI_Callback>
  }
}
 8004bb4:	bf00      	nop
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40013c00 	.word	0x40013c00

08004bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e0cc      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bd4:	4b68      	ldr	r3, [pc, #416]	; (8004d78 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d90c      	bls.n	8004bfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be2:	4b65      	ldr	r3, [pc, #404]	; (8004d78 <HAL_RCC_ClockConfig+0x1b8>)
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bea:	4b63      	ldr	r3, [pc, #396]	; (8004d78 <HAL_RCC_ClockConfig+0x1b8>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0b8      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d020      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c14:	4b59      	ldr	r3, [pc, #356]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	4a58      	ldr	r2, [pc, #352]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c2c:	4b53      	ldr	r3, [pc, #332]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	4a52      	ldr	r2, [pc, #328]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c38:	4b50      	ldr	r3, [pc, #320]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	494d      	ldr	r1, [pc, #308]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d044      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d107      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5e:	4b47      	ldr	r3, [pc, #284]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d119      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e07f      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d003      	beq.n	8004c7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d107      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7e:	4b3f      	ldr	r3, [pc, #252]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d109      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e06f      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c8e:	4b3b      	ldr	r3, [pc, #236]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e067      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c9e:	4b37      	ldr	r3, [pc, #220]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f023 0203 	bic.w	r2, r3, #3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	4934      	ldr	r1, [pc, #208]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cb0:	f7fe fcfe 	bl	80036b0 <HAL_GetTick>
 8004cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb6:	e00a      	b.n	8004cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb8:	f7fe fcfa 	bl	80036b0 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e04f      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cce:	4b2b      	ldr	r3, [pc, #172]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 020c 	and.w	r2, r3, #12
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d1eb      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ce0:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 030f 	and.w	r3, r3, #15
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d20c      	bcs.n	8004d08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cee:	4b22      	ldr	r3, [pc, #136]	; (8004d78 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf6:	4b20      	ldr	r3, [pc, #128]	; (8004d78 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 030f 	and.w	r3, r3, #15
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d001      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e032      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d008      	beq.n	8004d26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d14:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	4916      	ldr	r1, [pc, #88]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d009      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d32:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	490e      	ldr	r1, [pc, #56]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d46:	f000 f855 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	091b      	lsrs	r3, r3, #4
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	490a      	ldr	r1, [pc, #40]	; (8004d80 <HAL_RCC_ClockConfig+0x1c0>)
 8004d58:	5ccb      	ldrb	r3, [r1, r3]
 8004d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5e:	4a09      	ldr	r2, [pc, #36]	; (8004d84 <HAL_RCC_ClockConfig+0x1c4>)
 8004d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d62:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <HAL_RCC_ClockConfig+0x1c8>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fe fc5e 	bl	8003628 <HAL_InitTick>

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40023c00 	.word	0x40023c00
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	0800b428 	.word	0x0800b428
 8004d84:	2000000c 	.word	0x2000000c
 8004d88:	20000010 	.word	0x20000010

08004d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d90:	4b03      	ldr	r3, [pc, #12]	; (8004da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d92:	681b      	ldr	r3, [r3, #0]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	2000000c 	.word	0x2000000c

08004da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004da8:	f7ff fff0 	bl	8004d8c <HAL_RCC_GetHCLKFreq>
 8004dac:	4602      	mov	r2, r0
 8004dae:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	0a9b      	lsrs	r3, r3, #10
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	4903      	ldr	r1, [pc, #12]	; (8004dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dba:	5ccb      	ldrb	r3, [r1, r3]
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	0800b438 	.word	0x0800b438

08004dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004dd0:	f7ff ffdc 	bl	8004d8c <HAL_RCC_GetHCLKFreq>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	0b5b      	lsrs	r3, r3, #13
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	4903      	ldr	r1, [pc, #12]	; (8004df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004de2:	5ccb      	ldrb	r3, [r1, r3]
 8004de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40023800 	.word	0x40023800
 8004df0:	0800b438 	.word	0x0800b438

08004df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004df8:	b0ae      	sub	sp, #184	; 0xb8
 8004dfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e1a:	4bcb      	ldr	r3, [pc, #812]	; (8005148 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 030c 	and.w	r3, r3, #12
 8004e22:	2b0c      	cmp	r3, #12
 8004e24:	f200 8206 	bhi.w	8005234 <HAL_RCC_GetSysClockFreq+0x440>
 8004e28:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2e:	bf00      	nop
 8004e30:	08004e65 	.word	0x08004e65
 8004e34:	08005235 	.word	0x08005235
 8004e38:	08005235 	.word	0x08005235
 8004e3c:	08005235 	.word	0x08005235
 8004e40:	08004e6d 	.word	0x08004e6d
 8004e44:	08005235 	.word	0x08005235
 8004e48:	08005235 	.word	0x08005235
 8004e4c:	08005235 	.word	0x08005235
 8004e50:	08004e75 	.word	0x08004e75
 8004e54:	08005235 	.word	0x08005235
 8004e58:	08005235 	.word	0x08005235
 8004e5c:	08005235 	.word	0x08005235
 8004e60:	08005065 	.word	0x08005065
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e64:	4bb9      	ldr	r3, [pc, #740]	; (800514c <HAL_RCC_GetSysClockFreq+0x358>)
 8004e66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004e6a:	e1e7      	b.n	800523c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e6c:	4bb8      	ldr	r3, [pc, #736]	; (8005150 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004e72:	e1e3      	b.n	800523c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e74:	4bb4      	ldr	r3, [pc, #720]	; (8005148 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e80:	4bb1      	ldr	r3, [pc, #708]	; (8005148 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d071      	beq.n	8004f70 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e8c:	4bae      	ldr	r3, [pc, #696]	; (8005148 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	099b      	lsrs	r3, r3, #6
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e98:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004e9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004eae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004eb2:	4622      	mov	r2, r4
 8004eb4:	462b      	mov	r3, r5
 8004eb6:	f04f 0000 	mov.w	r0, #0
 8004eba:	f04f 0100 	mov.w	r1, #0
 8004ebe:	0159      	lsls	r1, r3, #5
 8004ec0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ec4:	0150      	lsls	r0, r2, #5
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4621      	mov	r1, r4
 8004ecc:	1a51      	subs	r1, r2, r1
 8004ece:	6439      	str	r1, [r7, #64]	; 0x40
 8004ed0:	4629      	mov	r1, r5
 8004ed2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004ee4:	4649      	mov	r1, r9
 8004ee6:	018b      	lsls	r3, r1, #6
 8004ee8:	4641      	mov	r1, r8
 8004eea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004eee:	4641      	mov	r1, r8
 8004ef0:	018a      	lsls	r2, r1, #6
 8004ef2:	4641      	mov	r1, r8
 8004ef4:	1a51      	subs	r1, r2, r1
 8004ef6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ef8:	4649      	mov	r1, r9
 8004efa:	eb63 0301 	sbc.w	r3, r3, r1
 8004efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	00cb      	lsls	r3, r1, #3
 8004f10:	4641      	mov	r1, r8
 8004f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f16:	4641      	mov	r1, r8
 8004f18:	00ca      	lsls	r2, r1, #3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4603      	mov	r3, r0
 8004f20:	4622      	mov	r2, r4
 8004f22:	189b      	adds	r3, r3, r2
 8004f24:	633b      	str	r3, [r7, #48]	; 0x30
 8004f26:	462b      	mov	r3, r5
 8004f28:	460a      	mov	r2, r1
 8004f2a:	eb42 0303 	adc.w	r3, r2, r3
 8004f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f3c:	4629      	mov	r1, r5
 8004f3e:	024b      	lsls	r3, r1, #9
 8004f40:	4621      	mov	r1, r4
 8004f42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f46:	4621      	mov	r1, r4
 8004f48:	024a      	lsls	r2, r1, #9
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f52:	2200      	movs	r2, #0
 8004f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f5c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004f60:	f7fb fe92 	bl	8000c88 <__aeabi_uldivmod>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4613      	mov	r3, r2
 8004f6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f6e:	e067      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f70:	4b75      	ldr	r3, [pc, #468]	; (8005148 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	099b      	lsrs	r3, r3, #6
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f7c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004f80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f88:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f8e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004f92:	4622      	mov	r2, r4
 8004f94:	462b      	mov	r3, r5
 8004f96:	f04f 0000 	mov.w	r0, #0
 8004f9a:	f04f 0100 	mov.w	r1, #0
 8004f9e:	0159      	lsls	r1, r3, #5
 8004fa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fa4:	0150      	lsls	r0, r2, #5
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4621      	mov	r1, r4
 8004fac:	1a51      	subs	r1, r2, r1
 8004fae:	62b9      	str	r1, [r7, #40]	; 0x28
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	eb63 0301 	sbc.w	r3, r3, r1
 8004fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004fc4:	4649      	mov	r1, r9
 8004fc6:	018b      	lsls	r3, r1, #6
 8004fc8:	4641      	mov	r1, r8
 8004fca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fce:	4641      	mov	r1, r8
 8004fd0:	018a      	lsls	r2, r1, #6
 8004fd2:	4641      	mov	r1, r8
 8004fd4:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fd8:	4649      	mov	r1, r9
 8004fda:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ff2:	4692      	mov	sl, r2
 8004ff4:	469b      	mov	fp, r3
 8004ff6:	4623      	mov	r3, r4
 8004ff8:	eb1a 0303 	adds.w	r3, sl, r3
 8004ffc:	623b      	str	r3, [r7, #32]
 8004ffe:	462b      	mov	r3, r5
 8005000:	eb4b 0303 	adc.w	r3, fp, r3
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005012:	4629      	mov	r1, r5
 8005014:	028b      	lsls	r3, r1, #10
 8005016:	4621      	mov	r1, r4
 8005018:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800501c:	4621      	mov	r1, r4
 800501e:	028a      	lsls	r2, r1, #10
 8005020:	4610      	mov	r0, r2
 8005022:	4619      	mov	r1, r3
 8005024:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005028:	2200      	movs	r2, #0
 800502a:	673b      	str	r3, [r7, #112]	; 0x70
 800502c:	677a      	str	r2, [r7, #116]	; 0x74
 800502e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005032:	f7fb fe29 	bl	8000c88 <__aeabi_uldivmod>
 8005036:	4602      	mov	r2, r0
 8005038:	460b      	mov	r3, r1
 800503a:	4613      	mov	r3, r2
 800503c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005040:	4b41      	ldr	r3, [pc, #260]	; (8005148 <HAL_RCC_GetSysClockFreq+0x354>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	0c1b      	lsrs	r3, r3, #16
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	3301      	adds	r3, #1
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005052:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005056:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800505a:	fbb2 f3f3 	udiv	r3, r2, r3
 800505e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005062:	e0eb      	b.n	800523c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005064:	4b38      	ldr	r3, [pc, #224]	; (8005148 <HAL_RCC_GetSysClockFreq+0x354>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800506c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005070:	4b35      	ldr	r3, [pc, #212]	; (8005148 <HAL_RCC_GetSysClockFreq+0x354>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d06b      	beq.n	8005154 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800507c:	4b32      	ldr	r3, [pc, #200]	; (8005148 <HAL_RCC_GetSysClockFreq+0x354>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	099b      	lsrs	r3, r3, #6
 8005082:	2200      	movs	r2, #0
 8005084:	66bb      	str	r3, [r7, #104]	; 0x68
 8005086:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005088:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800508a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800508e:	663b      	str	r3, [r7, #96]	; 0x60
 8005090:	2300      	movs	r3, #0
 8005092:	667b      	str	r3, [r7, #100]	; 0x64
 8005094:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005098:	4622      	mov	r2, r4
 800509a:	462b      	mov	r3, r5
 800509c:	f04f 0000 	mov.w	r0, #0
 80050a0:	f04f 0100 	mov.w	r1, #0
 80050a4:	0159      	lsls	r1, r3, #5
 80050a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050aa:	0150      	lsls	r0, r2, #5
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	4621      	mov	r1, r4
 80050b2:	1a51      	subs	r1, r2, r1
 80050b4:	61b9      	str	r1, [r7, #24]
 80050b6:	4629      	mov	r1, r5
 80050b8:	eb63 0301 	sbc.w	r3, r3, r1
 80050bc:	61fb      	str	r3, [r7, #28]
 80050be:	f04f 0200 	mov.w	r2, #0
 80050c2:	f04f 0300 	mov.w	r3, #0
 80050c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80050ca:	4659      	mov	r1, fp
 80050cc:	018b      	lsls	r3, r1, #6
 80050ce:	4651      	mov	r1, sl
 80050d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050d4:	4651      	mov	r1, sl
 80050d6:	018a      	lsls	r2, r1, #6
 80050d8:	4651      	mov	r1, sl
 80050da:	ebb2 0801 	subs.w	r8, r2, r1
 80050de:	4659      	mov	r1, fp
 80050e0:	eb63 0901 	sbc.w	r9, r3, r1
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050f8:	4690      	mov	r8, r2
 80050fa:	4699      	mov	r9, r3
 80050fc:	4623      	mov	r3, r4
 80050fe:	eb18 0303 	adds.w	r3, r8, r3
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	462b      	mov	r3, r5
 8005106:	eb49 0303 	adc.w	r3, r9, r3
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	f04f 0200 	mov.w	r2, #0
 8005110:	f04f 0300 	mov.w	r3, #0
 8005114:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005118:	4629      	mov	r1, r5
 800511a:	024b      	lsls	r3, r1, #9
 800511c:	4621      	mov	r1, r4
 800511e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005122:	4621      	mov	r1, r4
 8005124:	024a      	lsls	r2, r1, #9
 8005126:	4610      	mov	r0, r2
 8005128:	4619      	mov	r1, r3
 800512a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800512e:	2200      	movs	r2, #0
 8005130:	65bb      	str	r3, [r7, #88]	; 0x58
 8005132:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005134:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005138:	f7fb fda6 	bl	8000c88 <__aeabi_uldivmod>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4613      	mov	r3, r2
 8005142:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005146:	e065      	b.n	8005214 <HAL_RCC_GetSysClockFreq+0x420>
 8005148:	40023800 	.word	0x40023800
 800514c:	00f42400 	.word	0x00f42400
 8005150:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005154:	4b3d      	ldr	r3, [pc, #244]	; (800524c <HAL_RCC_GetSysClockFreq+0x458>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	099b      	lsrs	r3, r3, #6
 800515a:	2200      	movs	r2, #0
 800515c:	4618      	mov	r0, r3
 800515e:	4611      	mov	r1, r2
 8005160:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005164:	653b      	str	r3, [r7, #80]	; 0x50
 8005166:	2300      	movs	r3, #0
 8005168:	657b      	str	r3, [r7, #84]	; 0x54
 800516a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800516e:	4642      	mov	r2, r8
 8005170:	464b      	mov	r3, r9
 8005172:	f04f 0000 	mov.w	r0, #0
 8005176:	f04f 0100 	mov.w	r1, #0
 800517a:	0159      	lsls	r1, r3, #5
 800517c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005180:	0150      	lsls	r0, r2, #5
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4641      	mov	r1, r8
 8005188:	1a51      	subs	r1, r2, r1
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	4649      	mov	r1, r9
 800518e:	eb63 0301 	sbc.w	r3, r3, r1
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80051a0:	4659      	mov	r1, fp
 80051a2:	018b      	lsls	r3, r1, #6
 80051a4:	4651      	mov	r1, sl
 80051a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051aa:	4651      	mov	r1, sl
 80051ac:	018a      	lsls	r2, r1, #6
 80051ae:	4651      	mov	r1, sl
 80051b0:	1a54      	subs	r4, r2, r1
 80051b2:	4659      	mov	r1, fp
 80051b4:	eb63 0501 	sbc.w	r5, r3, r1
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	00eb      	lsls	r3, r5, #3
 80051c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051c6:	00e2      	lsls	r2, r4, #3
 80051c8:	4614      	mov	r4, r2
 80051ca:	461d      	mov	r5, r3
 80051cc:	4643      	mov	r3, r8
 80051ce:	18e3      	adds	r3, r4, r3
 80051d0:	603b      	str	r3, [r7, #0]
 80051d2:	464b      	mov	r3, r9
 80051d4:	eb45 0303 	adc.w	r3, r5, r3
 80051d8:	607b      	str	r3, [r7, #4]
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	f04f 0300 	mov.w	r3, #0
 80051e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051e6:	4629      	mov	r1, r5
 80051e8:	028b      	lsls	r3, r1, #10
 80051ea:	4621      	mov	r1, r4
 80051ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051f0:	4621      	mov	r1, r4
 80051f2:	028a      	lsls	r2, r1, #10
 80051f4:	4610      	mov	r0, r2
 80051f6:	4619      	mov	r1, r3
 80051f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051fc:	2200      	movs	r2, #0
 80051fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005200:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005202:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005206:	f7fb fd3f 	bl	8000c88 <__aeabi_uldivmod>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4613      	mov	r3, r2
 8005210:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005214:	4b0d      	ldr	r3, [pc, #52]	; (800524c <HAL_RCC_GetSysClockFreq+0x458>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	0f1b      	lsrs	r3, r3, #28
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005222:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005226:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800522a:	fbb2 f3f3 	udiv	r3, r2, r3
 800522e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005232:	e003      	b.n	800523c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005234:	4b06      	ldr	r3, [pc, #24]	; (8005250 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005236:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800523a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800523c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005240:	4618      	mov	r0, r3
 8005242:	37b8      	adds	r7, #184	; 0xb8
 8005244:	46bd      	mov	sp, r7
 8005246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800524a:	bf00      	nop
 800524c:	40023800 	.word	0x40023800
 8005250:	00f42400 	.word	0x00f42400

08005254 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e28d      	b.n	8005782 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 8083 	beq.w	800537a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005274:	4b94      	ldr	r3, [pc, #592]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 030c 	and.w	r3, r3, #12
 800527c:	2b04      	cmp	r3, #4
 800527e:	d019      	beq.n	80052b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005280:	4b91      	ldr	r3, [pc, #580]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005288:	2b08      	cmp	r3, #8
 800528a:	d106      	bne.n	800529a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800528c:	4b8e      	ldr	r3, [pc, #568]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005294:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005298:	d00c      	beq.n	80052b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800529a:	4b8b      	ldr	r3, [pc, #556]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80052a2:	2b0c      	cmp	r3, #12
 80052a4:	d112      	bne.n	80052cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052a6:	4b88      	ldr	r3, [pc, #544]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052b2:	d10b      	bne.n	80052cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b4:	4b84      	ldr	r3, [pc, #528]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d05b      	beq.n	8005378 <HAL_RCC_OscConfig+0x124>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d157      	bne.n	8005378 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e25a      	b.n	8005782 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d4:	d106      	bne.n	80052e4 <HAL_RCC_OscConfig+0x90>
 80052d6:	4b7c      	ldr	r3, [pc, #496]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a7b      	ldr	r2, [pc, #492]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 80052dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	e01d      	b.n	8005320 <HAL_RCC_OscConfig+0xcc>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052ec:	d10c      	bne.n	8005308 <HAL_RCC_OscConfig+0xb4>
 80052ee:	4b76      	ldr	r3, [pc, #472]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a75      	ldr	r2, [pc, #468]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 80052f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	4b73      	ldr	r3, [pc, #460]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a72      	ldr	r2, [pc, #456]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 8005300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	e00b      	b.n	8005320 <HAL_RCC_OscConfig+0xcc>
 8005308:	4b6f      	ldr	r3, [pc, #444]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a6e      	ldr	r2, [pc, #440]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 800530e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	4b6c      	ldr	r3, [pc, #432]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a6b      	ldr	r2, [pc, #428]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 800531a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800531e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d013      	beq.n	8005350 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005328:	f7fe f9c2 	bl	80036b0 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005330:	f7fe f9be 	bl	80036b0 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b64      	cmp	r3, #100	; 0x64
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e21f      	b.n	8005782 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005342:	4b61      	ldr	r3, [pc, #388]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0f0      	beq.n	8005330 <HAL_RCC_OscConfig+0xdc>
 800534e:	e014      	b.n	800537a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005350:	f7fe f9ae 	bl	80036b0 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005358:	f7fe f9aa 	bl	80036b0 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b64      	cmp	r3, #100	; 0x64
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e20b      	b.n	8005782 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800536a:	4b57      	ldr	r3, [pc, #348]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f0      	bne.n	8005358 <HAL_RCC_OscConfig+0x104>
 8005376:	e000      	b.n	800537a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d06f      	beq.n	8005466 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005386:	4b50      	ldr	r3, [pc, #320]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 030c 	and.w	r3, r3, #12
 800538e:	2b00      	cmp	r3, #0
 8005390:	d017      	beq.n	80053c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005392:	4b4d      	ldr	r3, [pc, #308]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800539a:	2b08      	cmp	r3, #8
 800539c:	d105      	bne.n	80053aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800539e:	4b4a      	ldr	r3, [pc, #296]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00b      	beq.n	80053c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053aa:	4b47      	ldr	r3, [pc, #284]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80053b2:	2b0c      	cmp	r3, #12
 80053b4:	d11c      	bne.n	80053f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053b6:	4b44      	ldr	r3, [pc, #272]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d116      	bne.n	80053f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053c2:	4b41      	ldr	r3, [pc, #260]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d005      	beq.n	80053da <HAL_RCC_OscConfig+0x186>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d001      	beq.n	80053da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e1d3      	b.n	8005782 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053da:	4b3b      	ldr	r3, [pc, #236]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	4937      	ldr	r1, [pc, #220]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ee:	e03a      	b.n	8005466 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d020      	beq.n	800543a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053f8:	4b34      	ldr	r3, [pc, #208]	; (80054cc <HAL_RCC_OscConfig+0x278>)
 80053fa:	2201      	movs	r2, #1
 80053fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fe:	f7fe f957 	bl	80036b0 <HAL_GetTick>
 8005402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005404:	e008      	b.n	8005418 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005406:	f7fe f953 	bl	80036b0 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e1b4      	b.n	8005782 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005418:	4b2b      	ldr	r3, [pc, #172]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0f0      	beq.n	8005406 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005424:	4b28      	ldr	r3, [pc, #160]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	4925      	ldr	r1, [pc, #148]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 8005434:	4313      	orrs	r3, r2
 8005436:	600b      	str	r3, [r1, #0]
 8005438:	e015      	b.n	8005466 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800543a:	4b24      	ldr	r3, [pc, #144]	; (80054cc <HAL_RCC_OscConfig+0x278>)
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005440:	f7fe f936 	bl	80036b0 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005448:	f7fe f932 	bl	80036b0 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e193      	b.n	8005782 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800545a:	4b1b      	ldr	r3, [pc, #108]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d036      	beq.n	80054e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d016      	beq.n	80054a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800547a:	4b15      	ldr	r3, [pc, #84]	; (80054d0 <HAL_RCC_OscConfig+0x27c>)
 800547c:	2201      	movs	r2, #1
 800547e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005480:	f7fe f916 	bl	80036b0 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005488:	f7fe f912 	bl	80036b0 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e173      	b.n	8005782 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800549a:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <HAL_RCC_OscConfig+0x274>)
 800549c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0f0      	beq.n	8005488 <HAL_RCC_OscConfig+0x234>
 80054a6:	e01b      	b.n	80054e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054a8:	4b09      	ldr	r3, [pc, #36]	; (80054d0 <HAL_RCC_OscConfig+0x27c>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ae:	f7fe f8ff 	bl	80036b0 <HAL_GetTick>
 80054b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054b4:	e00e      	b.n	80054d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054b6:	f7fe f8fb 	bl	80036b0 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d907      	bls.n	80054d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e15c      	b.n	8005782 <HAL_RCC_OscConfig+0x52e>
 80054c8:	40023800 	.word	0x40023800
 80054cc:	42470000 	.word	0x42470000
 80054d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054d4:	4b8a      	ldr	r3, [pc, #552]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 80054d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1ea      	bne.n	80054b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8097 	beq.w	800561c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ee:	2300      	movs	r3, #0
 80054f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054f2:	4b83      	ldr	r3, [pc, #524]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10f      	bne.n	800551e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054fe:	2300      	movs	r3, #0
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	4b7f      	ldr	r3, [pc, #508]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	4a7e      	ldr	r2, [pc, #504]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 8005508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800550c:	6413      	str	r3, [r2, #64]	; 0x40
 800550e:	4b7c      	ldr	r3, [pc, #496]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005516:	60bb      	str	r3, [r7, #8]
 8005518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800551a:	2301      	movs	r3, #1
 800551c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800551e:	4b79      	ldr	r3, [pc, #484]	; (8005704 <HAL_RCC_OscConfig+0x4b0>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005526:	2b00      	cmp	r3, #0
 8005528:	d118      	bne.n	800555c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800552a:	4b76      	ldr	r3, [pc, #472]	; (8005704 <HAL_RCC_OscConfig+0x4b0>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a75      	ldr	r2, [pc, #468]	; (8005704 <HAL_RCC_OscConfig+0x4b0>)
 8005530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005536:	f7fe f8bb 	bl	80036b0 <HAL_GetTick>
 800553a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800553c:	e008      	b.n	8005550 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800553e:	f7fe f8b7 	bl	80036b0 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d901      	bls.n	8005550 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e118      	b.n	8005782 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005550:	4b6c      	ldr	r3, [pc, #432]	; (8005704 <HAL_RCC_OscConfig+0x4b0>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005558:	2b00      	cmp	r3, #0
 800555a:	d0f0      	beq.n	800553e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d106      	bne.n	8005572 <HAL_RCC_OscConfig+0x31e>
 8005564:	4b66      	ldr	r3, [pc, #408]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 8005566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005568:	4a65      	ldr	r2, [pc, #404]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 800556a:	f043 0301 	orr.w	r3, r3, #1
 800556e:	6713      	str	r3, [r2, #112]	; 0x70
 8005570:	e01c      	b.n	80055ac <HAL_RCC_OscConfig+0x358>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	2b05      	cmp	r3, #5
 8005578:	d10c      	bne.n	8005594 <HAL_RCC_OscConfig+0x340>
 800557a:	4b61      	ldr	r3, [pc, #388]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 800557c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557e:	4a60      	ldr	r2, [pc, #384]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 8005580:	f043 0304 	orr.w	r3, r3, #4
 8005584:	6713      	str	r3, [r2, #112]	; 0x70
 8005586:	4b5e      	ldr	r3, [pc, #376]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 8005588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558a:	4a5d      	ldr	r2, [pc, #372]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 800558c:	f043 0301 	orr.w	r3, r3, #1
 8005590:	6713      	str	r3, [r2, #112]	; 0x70
 8005592:	e00b      	b.n	80055ac <HAL_RCC_OscConfig+0x358>
 8005594:	4b5a      	ldr	r3, [pc, #360]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 8005596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005598:	4a59      	ldr	r2, [pc, #356]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 800559a:	f023 0301 	bic.w	r3, r3, #1
 800559e:	6713      	str	r3, [r2, #112]	; 0x70
 80055a0:	4b57      	ldr	r3, [pc, #348]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 80055a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a4:	4a56      	ldr	r2, [pc, #344]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 80055a6:	f023 0304 	bic.w	r3, r3, #4
 80055aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d015      	beq.n	80055e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b4:	f7fe f87c 	bl	80036b0 <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ba:	e00a      	b.n	80055d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055bc:	f7fe f878 	bl	80036b0 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e0d7      	b.n	8005782 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d2:	4b4b      	ldr	r3, [pc, #300]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0ee      	beq.n	80055bc <HAL_RCC_OscConfig+0x368>
 80055de:	e014      	b.n	800560a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e0:	f7fe f866 	bl	80036b0 <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055e6:	e00a      	b.n	80055fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055e8:	f7fe f862 	bl	80036b0 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e0c1      	b.n	8005782 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055fe:	4b40      	ldr	r3, [pc, #256]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 8005600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1ee      	bne.n	80055e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800560a:	7dfb      	ldrb	r3, [r7, #23]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d105      	bne.n	800561c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005610:	4b3b      	ldr	r3, [pc, #236]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	4a3a      	ldr	r2, [pc, #232]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 8005616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800561a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 80ad 	beq.w	8005780 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005626:	4b36      	ldr	r3, [pc, #216]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 030c 	and.w	r3, r3, #12
 800562e:	2b08      	cmp	r3, #8
 8005630:	d060      	beq.n	80056f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d145      	bne.n	80056c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800563a:	4b33      	ldr	r3, [pc, #204]	; (8005708 <HAL_RCC_OscConfig+0x4b4>)
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005640:	f7fe f836 	bl	80036b0 <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005648:	f7fe f832 	bl	80036b0 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e093      	b.n	8005782 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800565a:	4b29      	ldr	r3, [pc, #164]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f0      	bne.n	8005648 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	69da      	ldr	r2, [r3, #28]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	019b      	lsls	r3, r3, #6
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567c:	085b      	lsrs	r3, r3, #1
 800567e:	3b01      	subs	r3, #1
 8005680:	041b      	lsls	r3, r3, #16
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005688:	061b      	lsls	r3, r3, #24
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	071b      	lsls	r3, r3, #28
 8005692:	491b      	ldr	r1, [pc, #108]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 8005694:	4313      	orrs	r3, r2
 8005696:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005698:	4b1b      	ldr	r3, [pc, #108]	; (8005708 <HAL_RCC_OscConfig+0x4b4>)
 800569a:	2201      	movs	r2, #1
 800569c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569e:	f7fe f807 	bl	80036b0 <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a6:	f7fe f803 	bl	80036b0 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e064      	b.n	8005782 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056b8:	4b11      	ldr	r3, [pc, #68]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0f0      	beq.n	80056a6 <HAL_RCC_OscConfig+0x452>
 80056c4:	e05c      	b.n	8005780 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c6:	4b10      	ldr	r3, [pc, #64]	; (8005708 <HAL_RCC_OscConfig+0x4b4>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056cc:	f7fd fff0 	bl	80036b0 <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d4:	f7fd ffec 	bl	80036b0 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e04d      	b.n	8005782 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056e6:	4b06      	ldr	r3, [pc, #24]	; (8005700 <HAL_RCC_OscConfig+0x4ac>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1f0      	bne.n	80056d4 <HAL_RCC_OscConfig+0x480>
 80056f2:	e045      	b.n	8005780 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d107      	bne.n	800570c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e040      	b.n	8005782 <HAL_RCC_OscConfig+0x52e>
 8005700:	40023800 	.word	0x40023800
 8005704:	40007000 	.word	0x40007000
 8005708:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800570c:	4b1f      	ldr	r3, [pc, #124]	; (800578c <HAL_RCC_OscConfig+0x538>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d030      	beq.n	800577c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005724:	429a      	cmp	r2, r3
 8005726:	d129      	bne.n	800577c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005732:	429a      	cmp	r2, r3
 8005734:	d122      	bne.n	800577c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800573c:	4013      	ands	r3, r2
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005742:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005744:	4293      	cmp	r3, r2
 8005746:	d119      	bne.n	800577c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005752:	085b      	lsrs	r3, r3, #1
 8005754:	3b01      	subs	r3, #1
 8005756:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005758:	429a      	cmp	r2, r3
 800575a:	d10f      	bne.n	800577c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005766:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005768:	429a      	cmp	r2, r3
 800576a:	d107      	bne.n	800577c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005778:	429a      	cmp	r2, r3
 800577a:	d001      	beq.n	8005780 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e000      	b.n	8005782 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	40023800 	.word	0x40023800

08005790 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e03f      	b.n	8005822 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d106      	bne.n	80057bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7fd fd7a 	bl	80032b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2224      	movs	r2, #36	; 0x24
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fddf 	bl	8006398 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	691a      	ldr	r2, [r3, #16]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695a      	ldr	r2, [r3, #20]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005808:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b08a      	sub	sp, #40	; 0x28
 800582e:	af02      	add	r7, sp, #8
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	603b      	str	r3, [r7, #0]
 8005836:	4613      	mov	r3, r2
 8005838:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b20      	cmp	r3, #32
 8005848:	d17c      	bne.n	8005944 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <HAL_UART_Transmit+0x2c>
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e075      	b.n	8005946 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <HAL_UART_Transmit+0x3e>
 8005864:	2302      	movs	r3, #2
 8005866:	e06e      	b.n	8005946 <HAL_UART_Transmit+0x11c>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2221      	movs	r2, #33	; 0x21
 800587a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800587e:	f7fd ff17 	bl	80036b0 <HAL_GetTick>
 8005882:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	88fa      	ldrh	r2, [r7, #6]
 8005888:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	88fa      	ldrh	r2, [r7, #6]
 800588e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005898:	d108      	bne.n	80058ac <HAL_UART_Transmit+0x82>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d104      	bne.n	80058ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058a2:	2300      	movs	r3, #0
 80058a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	61bb      	str	r3, [r7, #24]
 80058aa:	e003      	b.n	80058b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058b0:	2300      	movs	r3, #0
 80058b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058bc:	e02a      	b.n	8005914 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2200      	movs	r2, #0
 80058c6:	2180      	movs	r1, #128	; 0x80
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 fb1f 	bl	8005f0c <UART_WaitOnFlagUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e036      	b.n	8005946 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10b      	bne.n	80058f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	461a      	mov	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	3302      	adds	r3, #2
 80058f2:	61bb      	str	r3, [r7, #24]
 80058f4:	e007      	b.n	8005906 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	781a      	ldrb	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	3301      	adds	r3, #1
 8005904:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800590a:	b29b      	uxth	r3, r3
 800590c:	3b01      	subs	r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1cf      	bne.n	80058be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2200      	movs	r2, #0
 8005926:	2140      	movs	r1, #64	; 0x40
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 faef 	bl	8005f0c <UART_WaitOnFlagUntilTimeout>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e006      	b.n	8005946 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2220      	movs	r2, #32
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005940:	2300      	movs	r3, #0
 8005942:	e000      	b.n	8005946 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005944:	2302      	movs	r3, #2
  }
}
 8005946:	4618      	mov	r0, r3
 8005948:	3720      	adds	r7, #32
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b084      	sub	sp, #16
 8005952:	af00      	add	r7, sp, #0
 8005954:	60f8      	str	r0, [r7, #12]
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	4613      	mov	r3, r2
 800595a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b20      	cmp	r3, #32
 8005966:	d11d      	bne.n	80059a4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <HAL_UART_Receive_IT+0x26>
 800596e:	88fb      	ldrh	r3, [r7, #6]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e016      	b.n	80059a6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_UART_Receive_IT+0x38>
 8005982:	2302      	movs	r3, #2
 8005984:	e00f      	b.n	80059a6 <HAL_UART_Receive_IT+0x58>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005994:	88fb      	ldrh	r3, [r7, #6]
 8005996:	461a      	mov	r2, r3
 8005998:	68b9      	ldr	r1, [r7, #8]
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 fb24 	bl	8005fe8 <UART_Start_Receive_IT>
 80059a0:	4603      	mov	r3, r0
 80059a2:	e000      	b.n	80059a6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80059a4:	2302      	movs	r3, #2
  }
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b0ba      	sub	sp, #232	; 0xe8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80059dc:	2300      	movs	r3, #0
 80059de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80059ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10f      	bne.n	8005a16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d009      	beq.n	8005a16 <HAL_UART_IRQHandler+0x66>
 8005a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a06:	f003 0320 	and.w	r3, r3, #32
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fc07 	bl	8006222 <UART_Receive_IT>
      return;
 8005a14:	e256      	b.n	8005ec4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 80de 	beq.w	8005bdc <HAL_UART_IRQHandler+0x22c>
 8005a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d106      	bne.n	8005a3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 80d1 	beq.w	8005bdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00b      	beq.n	8005a5e <HAL_UART_IRQHandler+0xae>
 8005a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d005      	beq.n	8005a5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	f043 0201 	orr.w	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00b      	beq.n	8005a82 <HAL_UART_IRQHandler+0xd2>
 8005a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d005      	beq.n	8005a82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	f043 0202 	orr.w	r2, r3, #2
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00b      	beq.n	8005aa6 <HAL_UART_IRQHandler+0xf6>
 8005a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d005      	beq.n	8005aa6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	f043 0204 	orr.w	r2, r3, #4
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d011      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x126>
 8005ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab6:	f003 0320 	and.w	r3, r3, #32
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d105      	bne.n	8005aca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	f043 0208 	orr.w	r2, r3, #8
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 81ed 	beq.w	8005eba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae4:	f003 0320 	and.w	r3, r3, #32
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d008      	beq.n	8005afe <HAL_UART_IRQHandler+0x14e>
 8005aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af0:	f003 0320 	and.w	r3, r3, #32
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fb92 	bl	8006222 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b08:	2b40      	cmp	r3, #64	; 0x40
 8005b0a:	bf0c      	ite	eq
 8005b0c:	2301      	moveq	r3, #1
 8005b0e:	2300      	movne	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	f003 0308 	and.w	r3, r3, #8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d103      	bne.n	8005b2a <HAL_UART_IRQHandler+0x17a>
 8005b22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d04f      	beq.n	8005bca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fa9a 	bl	8006064 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3a:	2b40      	cmp	r3, #64	; 0x40
 8005b3c:	d141      	bne.n	8005bc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3314      	adds	r3, #20
 8005b44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b4c:	e853 3f00 	ldrex	r3, [r3]
 8005b50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3314      	adds	r3, #20
 8005b66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1d9      	bne.n	8005b3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d013      	beq.n	8005bba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	4a7d      	ldr	r2, [pc, #500]	; (8005d8c <HAL_UART_IRQHandler+0x3dc>)
 8005b98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fe fe0d 	bl	80047be <HAL_DMA_Abort_IT>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d016      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb8:	e00e      	b.n	8005bd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f990 	bl	8005ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc0:	e00a      	b.n	8005bd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f98c 	bl	8005ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc8:	e006      	b.n	8005bd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f988 	bl	8005ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005bd6:	e170      	b.n	8005eba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd8:	bf00      	nop
    return;
 8005bda:	e16e      	b.n	8005eba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	f040 814a 	bne.w	8005e7a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bea:	f003 0310 	and.w	r3, r3, #16
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 8143 	beq.w	8005e7a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 813c 	beq.w	8005e7a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c02:	2300      	movs	r3, #0
 8005c04:	60bb      	str	r3, [r7, #8]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	60bb      	str	r3, [r7, #8]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	60bb      	str	r3, [r7, #8]
 8005c16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c22:	2b40      	cmp	r3, #64	; 0x40
 8005c24:	f040 80b4 	bne.w	8005d90 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 8140 	beq.w	8005ebe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c46:	429a      	cmp	r2, r3
 8005c48:	f080 8139 	bcs.w	8005ebe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c52:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c5e:	f000 8088 	beq.w	8005d72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	330c      	adds	r3, #12
 8005c68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	330c      	adds	r3, #12
 8005c8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1d9      	bne.n	8005c62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3314      	adds	r3, #20
 8005cb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005cbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cc0:	f023 0301 	bic.w	r3, r3, #1
 8005cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3314      	adds	r3, #20
 8005cce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005cd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005cd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005cda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005cde:	e841 2300 	strex	r3, r2, [r1]
 8005ce2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1e1      	bne.n	8005cae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	3314      	adds	r3, #20
 8005cf0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cf4:	e853 3f00 	ldrex	r3, [r3]
 8005cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3314      	adds	r3, #20
 8005d0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d16:	e841 2300 	strex	r3, r2, [r1]
 8005d1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1e3      	bne.n	8005cea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	330c      	adds	r3, #12
 8005d36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d42:	f023 0310 	bic.w	r3, r3, #16
 8005d46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	330c      	adds	r3, #12
 8005d50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d54:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d56:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d5c:	e841 2300 	strex	r3, r2, [r1]
 8005d60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e3      	bne.n	8005d30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fe fcb6 	bl	80046de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	4619      	mov	r1, r3
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f8b6 	bl	8005ef4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d88:	e099      	b.n	8005ebe <HAL_UART_IRQHandler+0x50e>
 8005d8a:	bf00      	nop
 8005d8c:	0800612b 	.word	0x0800612b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 808b 	beq.w	8005ec2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005dac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 8086 	beq.w	8005ec2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	330c      	adds	r3, #12
 8005dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	330c      	adds	r3, #12
 8005dd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005dda:	647a      	str	r2, [r7, #68]	; 0x44
 8005ddc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005de0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005de2:	e841 2300 	strex	r3, r2, [r1]
 8005de6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1e3      	bne.n	8005db6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3314      	adds	r3, #20
 8005df4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	623b      	str	r3, [r7, #32]
   return(result);
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	f023 0301 	bic.w	r3, r3, #1
 8005e04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3314      	adds	r3, #20
 8005e0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e12:	633a      	str	r2, [r7, #48]	; 0x30
 8005e14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e3      	bne.n	8005dee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	330c      	adds	r3, #12
 8005e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	e853 3f00 	ldrex	r3, [r3]
 8005e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0310 	bic.w	r3, r3, #16
 8005e4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	330c      	adds	r3, #12
 8005e54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e58:	61fa      	str	r2, [r7, #28]
 8005e5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5c:	69b9      	ldr	r1, [r7, #24]
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	e841 2300 	strex	r3, r2, [r1]
 8005e64:	617b      	str	r3, [r7, #20]
   return(result);
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1e3      	bne.n	8005e34 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e70:	4619      	mov	r1, r3
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f83e 	bl	8005ef4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e78:	e023      	b.n	8005ec2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d009      	beq.n	8005e9a <HAL_UART_IRQHandler+0x4ea>
 8005e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f95d 	bl	8006152 <UART_Transmit_IT>
    return;
 8005e98:	e014      	b.n	8005ec4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00e      	beq.n	8005ec4 <HAL_UART_IRQHandler+0x514>
 8005ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d008      	beq.n	8005ec4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f99d 	bl	80061f2 <UART_EndTransmit_IT>
    return;
 8005eb8:	e004      	b.n	8005ec4 <HAL_UART_IRQHandler+0x514>
    return;
 8005eba:	bf00      	nop
 8005ebc:	e002      	b.n	8005ec4 <HAL_UART_IRQHandler+0x514>
      return;
 8005ebe:	bf00      	nop
 8005ec0:	e000      	b.n	8005ec4 <HAL_UART_IRQHandler+0x514>
      return;
 8005ec2:	bf00      	nop
  }
}
 8005ec4:	37e8      	adds	r7, #232	; 0xe8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop

08005ecc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	460b      	mov	r3, r1
 8005efe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b090      	sub	sp, #64	; 0x40
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f1c:	e050      	b.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f24:	d04c      	beq.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d007      	beq.n	8005f3c <UART_WaitOnFlagUntilTimeout+0x30>
 8005f2c:	f7fd fbc0 	bl	80036b0 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d241      	bcs.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	330c      	adds	r3, #12
 8005f42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	330c      	adds	r3, #12
 8005f5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f5c:	637a      	str	r2, [r7, #52]	; 0x34
 8005f5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e5      	bne.n	8005f3c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3314      	adds	r3, #20
 8005f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	e853 3f00 	ldrex	r3, [r3]
 8005f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f023 0301 	bic.w	r3, r3, #1
 8005f86:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3314      	adds	r3, #20
 8005f8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f90:	623a      	str	r2, [r7, #32]
 8005f92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f94:	69f9      	ldr	r1, [r7, #28]
 8005f96:	6a3a      	ldr	r2, [r7, #32]
 8005f98:	e841 2300 	strex	r3, r2, [r1]
 8005f9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1e5      	bne.n	8005f70 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e00f      	b.n	8005fe0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	bf0c      	ite	eq
 8005fd0:	2301      	moveq	r3, #1
 8005fd2:	2300      	movne	r3, #0
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	79fb      	ldrb	r3, [r7, #7]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d09f      	beq.n	8005f1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3740      	adds	r7, #64	; 0x40
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	88fa      	ldrh	r2, [r7, #6]
 8006000:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	88fa      	ldrh	r2, [r7, #6]
 8006006:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2222      	movs	r2, #34	; 0x22
 8006012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d007      	beq.n	8006036 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006034:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	695a      	ldr	r2, [r3, #20]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f042 0201 	orr.w	r2, r2, #1
 8006044:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0220 	orr.w	r2, r2, #32
 8006054:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006064:	b480      	push	{r7}
 8006066:	b095      	sub	sp, #84	; 0x54
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	330c      	adds	r3, #12
 8006072:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	330c      	adds	r3, #12
 800608a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800608c:	643a      	str	r2, [r7, #64]	; 0x40
 800608e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006092:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e5      	bne.n	800606c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3314      	adds	r3, #20
 80060a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	e853 3f00 	ldrex	r3, [r3]
 80060ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	f023 0301 	bic.w	r3, r3, #1
 80060b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3314      	adds	r3, #20
 80060be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060c8:	e841 2300 	strex	r3, r2, [r1]
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1e5      	bne.n	80060a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d119      	bne.n	8006110 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	330c      	adds	r3, #12
 80060e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f023 0310 	bic.w	r3, r3, #16
 80060f2:	647b      	str	r3, [r7, #68]	; 0x44
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	330c      	adds	r3, #12
 80060fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060fc:	61ba      	str	r2, [r7, #24]
 80060fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6979      	ldr	r1, [r7, #20]
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	613b      	str	r3, [r7, #16]
   return(result);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e5      	bne.n	80060dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2220      	movs	r2, #32
 8006114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800611e:	bf00      	nop
 8006120:	3754      	adds	r7, #84	; 0x54
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006136:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f7ff fecb 	bl	8005ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800614a:	bf00      	nop
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006152:	b480      	push	{r7}
 8006154:	b085      	sub	sp, #20
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b21      	cmp	r3, #33	; 0x21
 8006164:	d13e      	bne.n	80061e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800616e:	d114      	bne.n	800619a <UART_Transmit_IT+0x48>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d110      	bne.n	800619a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800618c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	1c9a      	adds	r2, r3, #2
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	621a      	str	r2, [r3, #32]
 8006198:	e008      	b.n	80061ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	1c59      	adds	r1, r3, #1
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	6211      	str	r1, [r2, #32]
 80061a4:	781a      	ldrb	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	4619      	mov	r1, r3
 80061ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10f      	bne.n	80061e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	e000      	b.n	80061e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061e4:	2302      	movs	r3, #2
  }
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b082      	sub	sp, #8
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006208:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2220      	movs	r2, #32
 800620e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff fe5a 	bl	8005ecc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b08c      	sub	sp, #48	; 0x30
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b22      	cmp	r3, #34	; 0x22
 8006234:	f040 80ab 	bne.w	800638e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006240:	d117      	bne.n	8006272 <UART_Receive_IT+0x50>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d113      	bne.n	8006272 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800624a:	2300      	movs	r3, #0
 800624c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	b29b      	uxth	r3, r3
 800625c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006260:	b29a      	uxth	r2, r3
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626a:	1c9a      	adds	r2, r3, #2
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	629a      	str	r2, [r3, #40]	; 0x28
 8006270:	e026      	b.n	80062c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006276:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006278:	2300      	movs	r3, #0
 800627a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006284:	d007      	beq.n	8006296 <UART_Receive_IT+0x74>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10a      	bne.n	80062a4 <UART_Receive_IT+0x82>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d106      	bne.n	80062a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	b2da      	uxtb	r2, r3
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	e008      	b.n	80062b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	4619      	mov	r1, r3
 80062ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d15a      	bne.n	800638a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68da      	ldr	r2, [r3, #12]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0220 	bic.w	r2, r2, #32
 80062e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695a      	ldr	r2, [r3, #20]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0201 	bic.w	r2, r2, #1
 8006302:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2220      	movs	r2, #32
 8006308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006310:	2b01      	cmp	r3, #1
 8006312:	d135      	bne.n	8006380 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	330c      	adds	r3, #12
 8006320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	613b      	str	r3, [r7, #16]
   return(result);
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f023 0310 	bic.w	r3, r3, #16
 8006330:	627b      	str	r3, [r7, #36]	; 0x24
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	330c      	adds	r3, #12
 8006338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800633a:	623a      	str	r2, [r7, #32]
 800633c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	69f9      	ldr	r1, [r7, #28]
 8006340:	6a3a      	ldr	r2, [r7, #32]
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	61bb      	str	r3, [r7, #24]
   return(result);
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e5      	bne.n	800631a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	2b10      	cmp	r3, #16
 800635a:	d10a      	bne.n	8006372 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800635c:	2300      	movs	r3, #0
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7ff fdbb 	bl	8005ef4 <HAL_UARTEx_RxEventCallback>
 800637e:	e002      	b.n	8006386 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7fc fdad 	bl	8002ee0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	e002      	b.n	8006390 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	e000      	b.n	8006390 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800638e:	2302      	movs	r3, #2
  }
}
 8006390:	4618      	mov	r0, r3
 8006392:	3730      	adds	r7, #48	; 0x30
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800639c:	b0c0      	sub	sp, #256	; 0x100
 800639e:	af00      	add	r7, sp, #0
 80063a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80063b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b4:	68d9      	ldr	r1, [r3, #12]
 80063b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	ea40 0301 	orr.w	r3, r0, r1
 80063c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	431a      	orrs	r2, r3
 80063d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	431a      	orrs	r2, r3
 80063d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	4313      	orrs	r3, r2
 80063e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80063f0:	f021 010c 	bic.w	r1, r1, #12
 80063f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063fe:	430b      	orrs	r3, r1
 8006400:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800640e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006412:	6999      	ldr	r1, [r3, #24]
 8006414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	ea40 0301 	orr.w	r3, r0, r1
 800641e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	4b8f      	ldr	r3, [pc, #572]	; (8006664 <UART_SetConfig+0x2cc>)
 8006428:	429a      	cmp	r2, r3
 800642a:	d005      	beq.n	8006438 <UART_SetConfig+0xa0>
 800642c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	4b8d      	ldr	r3, [pc, #564]	; (8006668 <UART_SetConfig+0x2d0>)
 8006434:	429a      	cmp	r2, r3
 8006436:	d104      	bne.n	8006442 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006438:	f7fe fcc8 	bl	8004dcc <HAL_RCC_GetPCLK2Freq>
 800643c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006440:	e003      	b.n	800644a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006442:	f7fe fcaf 	bl	8004da4 <HAL_RCC_GetPCLK1Freq>
 8006446:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800644a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006454:	f040 810c 	bne.w	8006670 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800645c:	2200      	movs	r2, #0
 800645e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006462:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006466:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800646a:	4622      	mov	r2, r4
 800646c:	462b      	mov	r3, r5
 800646e:	1891      	adds	r1, r2, r2
 8006470:	65b9      	str	r1, [r7, #88]	; 0x58
 8006472:	415b      	adcs	r3, r3
 8006474:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006476:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800647a:	4621      	mov	r1, r4
 800647c:	eb12 0801 	adds.w	r8, r2, r1
 8006480:	4629      	mov	r1, r5
 8006482:	eb43 0901 	adc.w	r9, r3, r1
 8006486:	f04f 0200 	mov.w	r2, #0
 800648a:	f04f 0300 	mov.w	r3, #0
 800648e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006492:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006496:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800649a:	4690      	mov	r8, r2
 800649c:	4699      	mov	r9, r3
 800649e:	4623      	mov	r3, r4
 80064a0:	eb18 0303 	adds.w	r3, r8, r3
 80064a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064a8:	462b      	mov	r3, r5
 80064aa:	eb49 0303 	adc.w	r3, r9, r3
 80064ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80064c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80064c6:	460b      	mov	r3, r1
 80064c8:	18db      	adds	r3, r3, r3
 80064ca:	653b      	str	r3, [r7, #80]	; 0x50
 80064cc:	4613      	mov	r3, r2
 80064ce:	eb42 0303 	adc.w	r3, r2, r3
 80064d2:	657b      	str	r3, [r7, #84]	; 0x54
 80064d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80064d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80064dc:	f7fa fbd4 	bl	8000c88 <__aeabi_uldivmod>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4b61      	ldr	r3, [pc, #388]	; (800666c <UART_SetConfig+0x2d4>)
 80064e6:	fba3 2302 	umull	r2, r3, r3, r2
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	011c      	lsls	r4, r3, #4
 80064ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064f2:	2200      	movs	r2, #0
 80064f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80064fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006500:	4642      	mov	r2, r8
 8006502:	464b      	mov	r3, r9
 8006504:	1891      	adds	r1, r2, r2
 8006506:	64b9      	str	r1, [r7, #72]	; 0x48
 8006508:	415b      	adcs	r3, r3
 800650a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800650c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006510:	4641      	mov	r1, r8
 8006512:	eb12 0a01 	adds.w	sl, r2, r1
 8006516:	4649      	mov	r1, r9
 8006518:	eb43 0b01 	adc.w	fp, r3, r1
 800651c:	f04f 0200 	mov.w	r2, #0
 8006520:	f04f 0300 	mov.w	r3, #0
 8006524:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006528:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800652c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006530:	4692      	mov	sl, r2
 8006532:	469b      	mov	fp, r3
 8006534:	4643      	mov	r3, r8
 8006536:	eb1a 0303 	adds.w	r3, sl, r3
 800653a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800653e:	464b      	mov	r3, r9
 8006540:	eb4b 0303 	adc.w	r3, fp, r3
 8006544:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006554:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006558:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800655c:	460b      	mov	r3, r1
 800655e:	18db      	adds	r3, r3, r3
 8006560:	643b      	str	r3, [r7, #64]	; 0x40
 8006562:	4613      	mov	r3, r2
 8006564:	eb42 0303 	adc.w	r3, r2, r3
 8006568:	647b      	str	r3, [r7, #68]	; 0x44
 800656a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800656e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006572:	f7fa fb89 	bl	8000c88 <__aeabi_uldivmod>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4611      	mov	r1, r2
 800657c:	4b3b      	ldr	r3, [pc, #236]	; (800666c <UART_SetConfig+0x2d4>)
 800657e:	fba3 2301 	umull	r2, r3, r3, r1
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	2264      	movs	r2, #100	; 0x64
 8006586:	fb02 f303 	mul.w	r3, r2, r3
 800658a:	1acb      	subs	r3, r1, r3
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006592:	4b36      	ldr	r3, [pc, #216]	; (800666c <UART_SetConfig+0x2d4>)
 8006594:	fba3 2302 	umull	r2, r3, r3, r2
 8006598:	095b      	lsrs	r3, r3, #5
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065a0:	441c      	add	r4, r3
 80065a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80065b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80065b4:	4642      	mov	r2, r8
 80065b6:	464b      	mov	r3, r9
 80065b8:	1891      	adds	r1, r2, r2
 80065ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80065bc:	415b      	adcs	r3, r3
 80065be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065c4:	4641      	mov	r1, r8
 80065c6:	1851      	adds	r1, r2, r1
 80065c8:	6339      	str	r1, [r7, #48]	; 0x30
 80065ca:	4649      	mov	r1, r9
 80065cc:	414b      	adcs	r3, r1
 80065ce:	637b      	str	r3, [r7, #52]	; 0x34
 80065d0:	f04f 0200 	mov.w	r2, #0
 80065d4:	f04f 0300 	mov.w	r3, #0
 80065d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80065dc:	4659      	mov	r1, fp
 80065de:	00cb      	lsls	r3, r1, #3
 80065e0:	4651      	mov	r1, sl
 80065e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065e6:	4651      	mov	r1, sl
 80065e8:	00ca      	lsls	r2, r1, #3
 80065ea:	4610      	mov	r0, r2
 80065ec:	4619      	mov	r1, r3
 80065ee:	4603      	mov	r3, r0
 80065f0:	4642      	mov	r2, r8
 80065f2:	189b      	adds	r3, r3, r2
 80065f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065f8:	464b      	mov	r3, r9
 80065fa:	460a      	mov	r2, r1
 80065fc:	eb42 0303 	adc.w	r3, r2, r3
 8006600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006610:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006614:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006618:	460b      	mov	r3, r1
 800661a:	18db      	adds	r3, r3, r3
 800661c:	62bb      	str	r3, [r7, #40]	; 0x28
 800661e:	4613      	mov	r3, r2
 8006620:	eb42 0303 	adc.w	r3, r2, r3
 8006624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006626:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800662a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800662e:	f7fa fb2b 	bl	8000c88 <__aeabi_uldivmod>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4b0d      	ldr	r3, [pc, #52]	; (800666c <UART_SetConfig+0x2d4>)
 8006638:	fba3 1302 	umull	r1, r3, r3, r2
 800663c:	095b      	lsrs	r3, r3, #5
 800663e:	2164      	movs	r1, #100	; 0x64
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	3332      	adds	r3, #50	; 0x32
 800664a:	4a08      	ldr	r2, [pc, #32]	; (800666c <UART_SetConfig+0x2d4>)
 800664c:	fba2 2303 	umull	r2, r3, r2, r3
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	f003 0207 	and.w	r2, r3, #7
 8006656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4422      	add	r2, r4
 800665e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006660:	e105      	b.n	800686e <UART_SetConfig+0x4d6>
 8006662:	bf00      	nop
 8006664:	40011000 	.word	0x40011000
 8006668:	40011400 	.word	0x40011400
 800666c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006674:	2200      	movs	r2, #0
 8006676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800667a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800667e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006682:	4642      	mov	r2, r8
 8006684:	464b      	mov	r3, r9
 8006686:	1891      	adds	r1, r2, r2
 8006688:	6239      	str	r1, [r7, #32]
 800668a:	415b      	adcs	r3, r3
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
 800668e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006692:	4641      	mov	r1, r8
 8006694:	1854      	adds	r4, r2, r1
 8006696:	4649      	mov	r1, r9
 8006698:	eb43 0501 	adc.w	r5, r3, r1
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	00eb      	lsls	r3, r5, #3
 80066a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066aa:	00e2      	lsls	r2, r4, #3
 80066ac:	4614      	mov	r4, r2
 80066ae:	461d      	mov	r5, r3
 80066b0:	4643      	mov	r3, r8
 80066b2:	18e3      	adds	r3, r4, r3
 80066b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066b8:	464b      	mov	r3, r9
 80066ba:	eb45 0303 	adc.w	r3, r5, r3
 80066be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066d2:	f04f 0200 	mov.w	r2, #0
 80066d6:	f04f 0300 	mov.w	r3, #0
 80066da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80066de:	4629      	mov	r1, r5
 80066e0:	008b      	lsls	r3, r1, #2
 80066e2:	4621      	mov	r1, r4
 80066e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066e8:	4621      	mov	r1, r4
 80066ea:	008a      	lsls	r2, r1, #2
 80066ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80066f0:	f7fa faca 	bl	8000c88 <__aeabi_uldivmod>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4b60      	ldr	r3, [pc, #384]	; (800687c <UART_SetConfig+0x4e4>)
 80066fa:	fba3 2302 	umull	r2, r3, r3, r2
 80066fe:	095b      	lsrs	r3, r3, #5
 8006700:	011c      	lsls	r4, r3, #4
 8006702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006706:	2200      	movs	r2, #0
 8006708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800670c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006710:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006714:	4642      	mov	r2, r8
 8006716:	464b      	mov	r3, r9
 8006718:	1891      	adds	r1, r2, r2
 800671a:	61b9      	str	r1, [r7, #24]
 800671c:	415b      	adcs	r3, r3
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006724:	4641      	mov	r1, r8
 8006726:	1851      	adds	r1, r2, r1
 8006728:	6139      	str	r1, [r7, #16]
 800672a:	4649      	mov	r1, r9
 800672c:	414b      	adcs	r3, r1
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	f04f 0300 	mov.w	r3, #0
 8006738:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800673c:	4659      	mov	r1, fp
 800673e:	00cb      	lsls	r3, r1, #3
 8006740:	4651      	mov	r1, sl
 8006742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006746:	4651      	mov	r1, sl
 8006748:	00ca      	lsls	r2, r1, #3
 800674a:	4610      	mov	r0, r2
 800674c:	4619      	mov	r1, r3
 800674e:	4603      	mov	r3, r0
 8006750:	4642      	mov	r2, r8
 8006752:	189b      	adds	r3, r3, r2
 8006754:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006758:	464b      	mov	r3, r9
 800675a:	460a      	mov	r2, r1
 800675c:	eb42 0303 	adc.w	r3, r2, r3
 8006760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	67bb      	str	r3, [r7, #120]	; 0x78
 800676e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	f04f 0300 	mov.w	r3, #0
 8006778:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800677c:	4649      	mov	r1, r9
 800677e:	008b      	lsls	r3, r1, #2
 8006780:	4641      	mov	r1, r8
 8006782:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006786:	4641      	mov	r1, r8
 8006788:	008a      	lsls	r2, r1, #2
 800678a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800678e:	f7fa fa7b 	bl	8000c88 <__aeabi_uldivmod>
 8006792:	4602      	mov	r2, r0
 8006794:	460b      	mov	r3, r1
 8006796:	4b39      	ldr	r3, [pc, #228]	; (800687c <UART_SetConfig+0x4e4>)
 8006798:	fba3 1302 	umull	r1, r3, r3, r2
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	2164      	movs	r1, #100	; 0x64
 80067a0:	fb01 f303 	mul.w	r3, r1, r3
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	3332      	adds	r3, #50	; 0x32
 80067aa:	4a34      	ldr	r2, [pc, #208]	; (800687c <UART_SetConfig+0x4e4>)
 80067ac:	fba2 2303 	umull	r2, r3, r2, r3
 80067b0:	095b      	lsrs	r3, r3, #5
 80067b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067b6:	441c      	add	r4, r3
 80067b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067bc:	2200      	movs	r2, #0
 80067be:	673b      	str	r3, [r7, #112]	; 0x70
 80067c0:	677a      	str	r2, [r7, #116]	; 0x74
 80067c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80067c6:	4642      	mov	r2, r8
 80067c8:	464b      	mov	r3, r9
 80067ca:	1891      	adds	r1, r2, r2
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	415b      	adcs	r3, r3
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067d6:	4641      	mov	r1, r8
 80067d8:	1851      	adds	r1, r2, r1
 80067da:	6039      	str	r1, [r7, #0]
 80067dc:	4649      	mov	r1, r9
 80067de:	414b      	adcs	r3, r1
 80067e0:	607b      	str	r3, [r7, #4]
 80067e2:	f04f 0200 	mov.w	r2, #0
 80067e6:	f04f 0300 	mov.w	r3, #0
 80067ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067ee:	4659      	mov	r1, fp
 80067f0:	00cb      	lsls	r3, r1, #3
 80067f2:	4651      	mov	r1, sl
 80067f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067f8:	4651      	mov	r1, sl
 80067fa:	00ca      	lsls	r2, r1, #3
 80067fc:	4610      	mov	r0, r2
 80067fe:	4619      	mov	r1, r3
 8006800:	4603      	mov	r3, r0
 8006802:	4642      	mov	r2, r8
 8006804:	189b      	adds	r3, r3, r2
 8006806:	66bb      	str	r3, [r7, #104]	; 0x68
 8006808:	464b      	mov	r3, r9
 800680a:	460a      	mov	r2, r1
 800680c:	eb42 0303 	adc.w	r3, r2, r3
 8006810:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	663b      	str	r3, [r7, #96]	; 0x60
 800681c:	667a      	str	r2, [r7, #100]	; 0x64
 800681e:	f04f 0200 	mov.w	r2, #0
 8006822:	f04f 0300 	mov.w	r3, #0
 8006826:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800682a:	4649      	mov	r1, r9
 800682c:	008b      	lsls	r3, r1, #2
 800682e:	4641      	mov	r1, r8
 8006830:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006834:	4641      	mov	r1, r8
 8006836:	008a      	lsls	r2, r1, #2
 8006838:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800683c:	f7fa fa24 	bl	8000c88 <__aeabi_uldivmod>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	4b0d      	ldr	r3, [pc, #52]	; (800687c <UART_SetConfig+0x4e4>)
 8006846:	fba3 1302 	umull	r1, r3, r3, r2
 800684a:	095b      	lsrs	r3, r3, #5
 800684c:	2164      	movs	r1, #100	; 0x64
 800684e:	fb01 f303 	mul.w	r3, r1, r3
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	3332      	adds	r3, #50	; 0x32
 8006858:	4a08      	ldr	r2, [pc, #32]	; (800687c <UART_SetConfig+0x4e4>)
 800685a:	fba2 2303 	umull	r2, r3, r2, r3
 800685e:	095b      	lsrs	r3, r3, #5
 8006860:	f003 020f 	and.w	r2, r3, #15
 8006864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4422      	add	r2, r4
 800686c:	609a      	str	r2, [r3, #8]
}
 800686e:	bf00      	nop
 8006870:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006874:	46bd      	mov	sp, r7
 8006876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800687a:	bf00      	nop
 800687c:	51eb851f 	.word	0x51eb851f

08006880 <__errno>:
 8006880:	4b01      	ldr	r3, [pc, #4]	; (8006888 <__errno+0x8>)
 8006882:	6818      	ldr	r0, [r3, #0]
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	20000018 	.word	0x20000018

0800688c <__libc_init_array>:
 800688c:	b570      	push	{r4, r5, r6, lr}
 800688e:	4d0d      	ldr	r5, [pc, #52]	; (80068c4 <__libc_init_array+0x38>)
 8006890:	4c0d      	ldr	r4, [pc, #52]	; (80068c8 <__libc_init_array+0x3c>)
 8006892:	1b64      	subs	r4, r4, r5
 8006894:	10a4      	asrs	r4, r4, #2
 8006896:	2600      	movs	r6, #0
 8006898:	42a6      	cmp	r6, r4
 800689a:	d109      	bne.n	80068b0 <__libc_init_array+0x24>
 800689c:	4d0b      	ldr	r5, [pc, #44]	; (80068cc <__libc_init_array+0x40>)
 800689e:	4c0c      	ldr	r4, [pc, #48]	; (80068d0 <__libc_init_array+0x44>)
 80068a0:	f004 fc28 	bl	800b0f4 <_init>
 80068a4:	1b64      	subs	r4, r4, r5
 80068a6:	10a4      	asrs	r4, r4, #2
 80068a8:	2600      	movs	r6, #0
 80068aa:	42a6      	cmp	r6, r4
 80068ac:	d105      	bne.n	80068ba <__libc_init_array+0x2e>
 80068ae:	bd70      	pop	{r4, r5, r6, pc}
 80068b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b4:	4798      	blx	r3
 80068b6:	3601      	adds	r6, #1
 80068b8:	e7ee      	b.n	8006898 <__libc_init_array+0xc>
 80068ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80068be:	4798      	blx	r3
 80068c0:	3601      	adds	r6, #1
 80068c2:	e7f2      	b.n	80068aa <__libc_init_array+0x1e>
 80068c4:	0800ba70 	.word	0x0800ba70
 80068c8:	0800ba70 	.word	0x0800ba70
 80068cc:	0800ba70 	.word	0x0800ba70
 80068d0:	0800ba74 	.word	0x0800ba74

080068d4 <memset>:
 80068d4:	4402      	add	r2, r0
 80068d6:	4603      	mov	r3, r0
 80068d8:	4293      	cmp	r3, r2
 80068da:	d100      	bne.n	80068de <memset+0xa>
 80068dc:	4770      	bx	lr
 80068de:	f803 1b01 	strb.w	r1, [r3], #1
 80068e2:	e7f9      	b.n	80068d8 <memset+0x4>

080068e4 <__cvt>:
 80068e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068e8:	ec55 4b10 	vmov	r4, r5, d0
 80068ec:	2d00      	cmp	r5, #0
 80068ee:	460e      	mov	r6, r1
 80068f0:	4619      	mov	r1, r3
 80068f2:	462b      	mov	r3, r5
 80068f4:	bfbb      	ittet	lt
 80068f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80068fa:	461d      	movlt	r5, r3
 80068fc:	2300      	movge	r3, #0
 80068fe:	232d      	movlt	r3, #45	; 0x2d
 8006900:	700b      	strb	r3, [r1, #0]
 8006902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006904:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006908:	4691      	mov	r9, r2
 800690a:	f023 0820 	bic.w	r8, r3, #32
 800690e:	bfbc      	itt	lt
 8006910:	4622      	movlt	r2, r4
 8006912:	4614      	movlt	r4, r2
 8006914:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006918:	d005      	beq.n	8006926 <__cvt+0x42>
 800691a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800691e:	d100      	bne.n	8006922 <__cvt+0x3e>
 8006920:	3601      	adds	r6, #1
 8006922:	2102      	movs	r1, #2
 8006924:	e000      	b.n	8006928 <__cvt+0x44>
 8006926:	2103      	movs	r1, #3
 8006928:	ab03      	add	r3, sp, #12
 800692a:	9301      	str	r3, [sp, #4]
 800692c:	ab02      	add	r3, sp, #8
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	ec45 4b10 	vmov	d0, r4, r5
 8006934:	4653      	mov	r3, sl
 8006936:	4632      	mov	r2, r6
 8006938:	f000 fe1a 	bl	8007570 <_dtoa_r>
 800693c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006940:	4607      	mov	r7, r0
 8006942:	d102      	bne.n	800694a <__cvt+0x66>
 8006944:	f019 0f01 	tst.w	r9, #1
 8006948:	d022      	beq.n	8006990 <__cvt+0xac>
 800694a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800694e:	eb07 0906 	add.w	r9, r7, r6
 8006952:	d110      	bne.n	8006976 <__cvt+0x92>
 8006954:	783b      	ldrb	r3, [r7, #0]
 8006956:	2b30      	cmp	r3, #48	; 0x30
 8006958:	d10a      	bne.n	8006970 <__cvt+0x8c>
 800695a:	2200      	movs	r2, #0
 800695c:	2300      	movs	r3, #0
 800695e:	4620      	mov	r0, r4
 8006960:	4629      	mov	r1, r5
 8006962:	f7fa f8d1 	bl	8000b08 <__aeabi_dcmpeq>
 8006966:	b918      	cbnz	r0, 8006970 <__cvt+0x8c>
 8006968:	f1c6 0601 	rsb	r6, r6, #1
 800696c:	f8ca 6000 	str.w	r6, [sl]
 8006970:	f8da 3000 	ldr.w	r3, [sl]
 8006974:	4499      	add	r9, r3
 8006976:	2200      	movs	r2, #0
 8006978:	2300      	movs	r3, #0
 800697a:	4620      	mov	r0, r4
 800697c:	4629      	mov	r1, r5
 800697e:	f7fa f8c3 	bl	8000b08 <__aeabi_dcmpeq>
 8006982:	b108      	cbz	r0, 8006988 <__cvt+0xa4>
 8006984:	f8cd 900c 	str.w	r9, [sp, #12]
 8006988:	2230      	movs	r2, #48	; 0x30
 800698a:	9b03      	ldr	r3, [sp, #12]
 800698c:	454b      	cmp	r3, r9
 800698e:	d307      	bcc.n	80069a0 <__cvt+0xbc>
 8006990:	9b03      	ldr	r3, [sp, #12]
 8006992:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006994:	1bdb      	subs	r3, r3, r7
 8006996:	4638      	mov	r0, r7
 8006998:	6013      	str	r3, [r2, #0]
 800699a:	b004      	add	sp, #16
 800699c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a0:	1c59      	adds	r1, r3, #1
 80069a2:	9103      	str	r1, [sp, #12]
 80069a4:	701a      	strb	r2, [r3, #0]
 80069a6:	e7f0      	b.n	800698a <__cvt+0xa6>

080069a8 <__exponent>:
 80069a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069aa:	4603      	mov	r3, r0
 80069ac:	2900      	cmp	r1, #0
 80069ae:	bfb8      	it	lt
 80069b0:	4249      	neglt	r1, r1
 80069b2:	f803 2b02 	strb.w	r2, [r3], #2
 80069b6:	bfb4      	ite	lt
 80069b8:	222d      	movlt	r2, #45	; 0x2d
 80069ba:	222b      	movge	r2, #43	; 0x2b
 80069bc:	2909      	cmp	r1, #9
 80069be:	7042      	strb	r2, [r0, #1]
 80069c0:	dd2a      	ble.n	8006a18 <__exponent+0x70>
 80069c2:	f10d 0407 	add.w	r4, sp, #7
 80069c6:	46a4      	mov	ip, r4
 80069c8:	270a      	movs	r7, #10
 80069ca:	46a6      	mov	lr, r4
 80069cc:	460a      	mov	r2, r1
 80069ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80069d2:	fb07 1516 	mls	r5, r7, r6, r1
 80069d6:	3530      	adds	r5, #48	; 0x30
 80069d8:	2a63      	cmp	r2, #99	; 0x63
 80069da:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80069de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80069e2:	4631      	mov	r1, r6
 80069e4:	dcf1      	bgt.n	80069ca <__exponent+0x22>
 80069e6:	3130      	adds	r1, #48	; 0x30
 80069e8:	f1ae 0502 	sub.w	r5, lr, #2
 80069ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80069f0:	1c44      	adds	r4, r0, #1
 80069f2:	4629      	mov	r1, r5
 80069f4:	4561      	cmp	r1, ip
 80069f6:	d30a      	bcc.n	8006a0e <__exponent+0x66>
 80069f8:	f10d 0209 	add.w	r2, sp, #9
 80069fc:	eba2 020e 	sub.w	r2, r2, lr
 8006a00:	4565      	cmp	r5, ip
 8006a02:	bf88      	it	hi
 8006a04:	2200      	movhi	r2, #0
 8006a06:	4413      	add	r3, r2
 8006a08:	1a18      	subs	r0, r3, r0
 8006a0a:	b003      	add	sp, #12
 8006a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a12:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006a16:	e7ed      	b.n	80069f4 <__exponent+0x4c>
 8006a18:	2330      	movs	r3, #48	; 0x30
 8006a1a:	3130      	adds	r1, #48	; 0x30
 8006a1c:	7083      	strb	r3, [r0, #2]
 8006a1e:	70c1      	strb	r1, [r0, #3]
 8006a20:	1d03      	adds	r3, r0, #4
 8006a22:	e7f1      	b.n	8006a08 <__exponent+0x60>

08006a24 <_printf_float>:
 8006a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a28:	ed2d 8b02 	vpush	{d8}
 8006a2c:	b08d      	sub	sp, #52	; 0x34
 8006a2e:	460c      	mov	r4, r1
 8006a30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006a34:	4616      	mov	r6, r2
 8006a36:	461f      	mov	r7, r3
 8006a38:	4605      	mov	r5, r0
 8006a3a:	f001 fd3f 	bl	80084bc <_localeconv_r>
 8006a3e:	f8d0 a000 	ldr.w	sl, [r0]
 8006a42:	4650      	mov	r0, sl
 8006a44:	f7f9 fbe4 	bl	8000210 <strlen>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	930a      	str	r3, [sp, #40]	; 0x28
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	9305      	str	r3, [sp, #20]
 8006a50:	f8d8 3000 	ldr.w	r3, [r8]
 8006a54:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006a58:	3307      	adds	r3, #7
 8006a5a:	f023 0307 	bic.w	r3, r3, #7
 8006a5e:	f103 0208 	add.w	r2, r3, #8
 8006a62:	f8c8 2000 	str.w	r2, [r8]
 8006a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006a6e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006a72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a76:	9307      	str	r3, [sp, #28]
 8006a78:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a7c:	ee08 0a10 	vmov	s16, r0
 8006a80:	4b9f      	ldr	r3, [pc, #636]	; (8006d00 <_printf_float+0x2dc>)
 8006a82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a8a:	f7fa f86f 	bl	8000b6c <__aeabi_dcmpun>
 8006a8e:	bb88      	cbnz	r0, 8006af4 <_printf_float+0xd0>
 8006a90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a94:	4b9a      	ldr	r3, [pc, #616]	; (8006d00 <_printf_float+0x2dc>)
 8006a96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a9a:	f7fa f849 	bl	8000b30 <__aeabi_dcmple>
 8006a9e:	bb48      	cbnz	r0, 8006af4 <_printf_float+0xd0>
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	4640      	mov	r0, r8
 8006aa6:	4649      	mov	r1, r9
 8006aa8:	f7fa f838 	bl	8000b1c <__aeabi_dcmplt>
 8006aac:	b110      	cbz	r0, 8006ab4 <_printf_float+0x90>
 8006aae:	232d      	movs	r3, #45	; 0x2d
 8006ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ab4:	4b93      	ldr	r3, [pc, #588]	; (8006d04 <_printf_float+0x2e0>)
 8006ab6:	4894      	ldr	r0, [pc, #592]	; (8006d08 <_printf_float+0x2e4>)
 8006ab8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006abc:	bf94      	ite	ls
 8006abe:	4698      	movls	r8, r3
 8006ac0:	4680      	movhi	r8, r0
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	6123      	str	r3, [r4, #16]
 8006ac6:	9b05      	ldr	r3, [sp, #20]
 8006ac8:	f023 0204 	bic.w	r2, r3, #4
 8006acc:	6022      	str	r2, [r4, #0]
 8006ace:	f04f 0900 	mov.w	r9, #0
 8006ad2:	9700      	str	r7, [sp, #0]
 8006ad4:	4633      	mov	r3, r6
 8006ad6:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ad8:	4621      	mov	r1, r4
 8006ada:	4628      	mov	r0, r5
 8006adc:	f000 f9d8 	bl	8006e90 <_printf_common>
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	f040 8090 	bne.w	8006c06 <_printf_float+0x1e2>
 8006ae6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006aea:	b00d      	add	sp, #52	; 0x34
 8006aec:	ecbd 8b02 	vpop	{d8}
 8006af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af4:	4642      	mov	r2, r8
 8006af6:	464b      	mov	r3, r9
 8006af8:	4640      	mov	r0, r8
 8006afa:	4649      	mov	r1, r9
 8006afc:	f7fa f836 	bl	8000b6c <__aeabi_dcmpun>
 8006b00:	b140      	cbz	r0, 8006b14 <_printf_float+0xf0>
 8006b02:	464b      	mov	r3, r9
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	bfbc      	itt	lt
 8006b08:	232d      	movlt	r3, #45	; 0x2d
 8006b0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b0e:	487f      	ldr	r0, [pc, #508]	; (8006d0c <_printf_float+0x2e8>)
 8006b10:	4b7f      	ldr	r3, [pc, #508]	; (8006d10 <_printf_float+0x2ec>)
 8006b12:	e7d1      	b.n	8006ab8 <_printf_float+0x94>
 8006b14:	6863      	ldr	r3, [r4, #4]
 8006b16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006b1a:	9206      	str	r2, [sp, #24]
 8006b1c:	1c5a      	adds	r2, r3, #1
 8006b1e:	d13f      	bne.n	8006ba0 <_printf_float+0x17c>
 8006b20:	2306      	movs	r3, #6
 8006b22:	6063      	str	r3, [r4, #4]
 8006b24:	9b05      	ldr	r3, [sp, #20]
 8006b26:	6861      	ldr	r1, [r4, #4]
 8006b28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9303      	str	r3, [sp, #12]
 8006b30:	ab0a      	add	r3, sp, #40	; 0x28
 8006b32:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006b36:	ab09      	add	r3, sp, #36	; 0x24
 8006b38:	ec49 8b10 	vmov	d0, r8, r9
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	6022      	str	r2, [r4, #0]
 8006b40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b44:	4628      	mov	r0, r5
 8006b46:	f7ff fecd 	bl	80068e4 <__cvt>
 8006b4a:	9b06      	ldr	r3, [sp, #24]
 8006b4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b4e:	2b47      	cmp	r3, #71	; 0x47
 8006b50:	4680      	mov	r8, r0
 8006b52:	d108      	bne.n	8006b66 <_printf_float+0x142>
 8006b54:	1cc8      	adds	r0, r1, #3
 8006b56:	db02      	blt.n	8006b5e <_printf_float+0x13a>
 8006b58:	6863      	ldr	r3, [r4, #4]
 8006b5a:	4299      	cmp	r1, r3
 8006b5c:	dd41      	ble.n	8006be2 <_printf_float+0x1be>
 8006b5e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006b62:	fa5f fb8b 	uxtb.w	fp, fp
 8006b66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b6a:	d820      	bhi.n	8006bae <_printf_float+0x18a>
 8006b6c:	3901      	subs	r1, #1
 8006b6e:	465a      	mov	r2, fp
 8006b70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b74:	9109      	str	r1, [sp, #36]	; 0x24
 8006b76:	f7ff ff17 	bl	80069a8 <__exponent>
 8006b7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b7c:	1813      	adds	r3, r2, r0
 8006b7e:	2a01      	cmp	r2, #1
 8006b80:	4681      	mov	r9, r0
 8006b82:	6123      	str	r3, [r4, #16]
 8006b84:	dc02      	bgt.n	8006b8c <_printf_float+0x168>
 8006b86:	6822      	ldr	r2, [r4, #0]
 8006b88:	07d2      	lsls	r2, r2, #31
 8006b8a:	d501      	bpl.n	8006b90 <_printf_float+0x16c>
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	6123      	str	r3, [r4, #16]
 8006b90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d09c      	beq.n	8006ad2 <_printf_float+0xae>
 8006b98:	232d      	movs	r3, #45	; 0x2d
 8006b9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b9e:	e798      	b.n	8006ad2 <_printf_float+0xae>
 8006ba0:	9a06      	ldr	r2, [sp, #24]
 8006ba2:	2a47      	cmp	r2, #71	; 0x47
 8006ba4:	d1be      	bne.n	8006b24 <_printf_float+0x100>
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1bc      	bne.n	8006b24 <_printf_float+0x100>
 8006baa:	2301      	movs	r3, #1
 8006bac:	e7b9      	b.n	8006b22 <_printf_float+0xfe>
 8006bae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006bb2:	d118      	bne.n	8006be6 <_printf_float+0x1c2>
 8006bb4:	2900      	cmp	r1, #0
 8006bb6:	6863      	ldr	r3, [r4, #4]
 8006bb8:	dd0b      	ble.n	8006bd2 <_printf_float+0x1ae>
 8006bba:	6121      	str	r1, [r4, #16]
 8006bbc:	b913      	cbnz	r3, 8006bc4 <_printf_float+0x1a0>
 8006bbe:	6822      	ldr	r2, [r4, #0]
 8006bc0:	07d0      	lsls	r0, r2, #31
 8006bc2:	d502      	bpl.n	8006bca <_printf_float+0x1a6>
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	440b      	add	r3, r1
 8006bc8:	6123      	str	r3, [r4, #16]
 8006bca:	65a1      	str	r1, [r4, #88]	; 0x58
 8006bcc:	f04f 0900 	mov.w	r9, #0
 8006bd0:	e7de      	b.n	8006b90 <_printf_float+0x16c>
 8006bd2:	b913      	cbnz	r3, 8006bda <_printf_float+0x1b6>
 8006bd4:	6822      	ldr	r2, [r4, #0]
 8006bd6:	07d2      	lsls	r2, r2, #31
 8006bd8:	d501      	bpl.n	8006bde <_printf_float+0x1ba>
 8006bda:	3302      	adds	r3, #2
 8006bdc:	e7f4      	b.n	8006bc8 <_printf_float+0x1a4>
 8006bde:	2301      	movs	r3, #1
 8006be0:	e7f2      	b.n	8006bc8 <_printf_float+0x1a4>
 8006be2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be8:	4299      	cmp	r1, r3
 8006bea:	db05      	blt.n	8006bf8 <_printf_float+0x1d4>
 8006bec:	6823      	ldr	r3, [r4, #0]
 8006bee:	6121      	str	r1, [r4, #16]
 8006bf0:	07d8      	lsls	r0, r3, #31
 8006bf2:	d5ea      	bpl.n	8006bca <_printf_float+0x1a6>
 8006bf4:	1c4b      	adds	r3, r1, #1
 8006bf6:	e7e7      	b.n	8006bc8 <_printf_float+0x1a4>
 8006bf8:	2900      	cmp	r1, #0
 8006bfa:	bfd4      	ite	le
 8006bfc:	f1c1 0202 	rsble	r2, r1, #2
 8006c00:	2201      	movgt	r2, #1
 8006c02:	4413      	add	r3, r2
 8006c04:	e7e0      	b.n	8006bc8 <_printf_float+0x1a4>
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	055a      	lsls	r2, r3, #21
 8006c0a:	d407      	bmi.n	8006c1c <_printf_float+0x1f8>
 8006c0c:	6923      	ldr	r3, [r4, #16]
 8006c0e:	4642      	mov	r2, r8
 8006c10:	4631      	mov	r1, r6
 8006c12:	4628      	mov	r0, r5
 8006c14:	47b8      	blx	r7
 8006c16:	3001      	adds	r0, #1
 8006c18:	d12c      	bne.n	8006c74 <_printf_float+0x250>
 8006c1a:	e764      	b.n	8006ae6 <_printf_float+0xc2>
 8006c1c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c20:	f240 80e0 	bls.w	8006de4 <_printf_float+0x3c0>
 8006c24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f7f9 ff6c 	bl	8000b08 <__aeabi_dcmpeq>
 8006c30:	2800      	cmp	r0, #0
 8006c32:	d034      	beq.n	8006c9e <_printf_float+0x27a>
 8006c34:	4a37      	ldr	r2, [pc, #220]	; (8006d14 <_printf_float+0x2f0>)
 8006c36:	2301      	movs	r3, #1
 8006c38:	4631      	mov	r1, r6
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	47b8      	blx	r7
 8006c3e:	3001      	adds	r0, #1
 8006c40:	f43f af51 	beq.w	8006ae6 <_printf_float+0xc2>
 8006c44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	db02      	blt.n	8006c52 <_printf_float+0x22e>
 8006c4c:	6823      	ldr	r3, [r4, #0]
 8006c4e:	07d8      	lsls	r0, r3, #31
 8006c50:	d510      	bpl.n	8006c74 <_printf_float+0x250>
 8006c52:	ee18 3a10 	vmov	r3, s16
 8006c56:	4652      	mov	r2, sl
 8006c58:	4631      	mov	r1, r6
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	47b8      	blx	r7
 8006c5e:	3001      	adds	r0, #1
 8006c60:	f43f af41 	beq.w	8006ae6 <_printf_float+0xc2>
 8006c64:	f04f 0800 	mov.w	r8, #0
 8006c68:	f104 091a 	add.w	r9, r4, #26
 8006c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	4543      	cmp	r3, r8
 8006c72:	dc09      	bgt.n	8006c88 <_printf_float+0x264>
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	079b      	lsls	r3, r3, #30
 8006c78:	f100 8105 	bmi.w	8006e86 <_printf_float+0x462>
 8006c7c:	68e0      	ldr	r0, [r4, #12]
 8006c7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c80:	4298      	cmp	r0, r3
 8006c82:	bfb8      	it	lt
 8006c84:	4618      	movlt	r0, r3
 8006c86:	e730      	b.n	8006aea <_printf_float+0xc6>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	464a      	mov	r2, r9
 8006c8c:	4631      	mov	r1, r6
 8006c8e:	4628      	mov	r0, r5
 8006c90:	47b8      	blx	r7
 8006c92:	3001      	adds	r0, #1
 8006c94:	f43f af27 	beq.w	8006ae6 <_printf_float+0xc2>
 8006c98:	f108 0801 	add.w	r8, r8, #1
 8006c9c:	e7e6      	b.n	8006c6c <_printf_float+0x248>
 8006c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	dc39      	bgt.n	8006d18 <_printf_float+0x2f4>
 8006ca4:	4a1b      	ldr	r2, [pc, #108]	; (8006d14 <_printf_float+0x2f0>)
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	4631      	mov	r1, r6
 8006caa:	4628      	mov	r0, r5
 8006cac:	47b8      	blx	r7
 8006cae:	3001      	adds	r0, #1
 8006cb0:	f43f af19 	beq.w	8006ae6 <_printf_float+0xc2>
 8006cb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	d102      	bne.n	8006cc2 <_printf_float+0x29e>
 8006cbc:	6823      	ldr	r3, [r4, #0]
 8006cbe:	07d9      	lsls	r1, r3, #31
 8006cc0:	d5d8      	bpl.n	8006c74 <_printf_float+0x250>
 8006cc2:	ee18 3a10 	vmov	r3, s16
 8006cc6:	4652      	mov	r2, sl
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4628      	mov	r0, r5
 8006ccc:	47b8      	blx	r7
 8006cce:	3001      	adds	r0, #1
 8006cd0:	f43f af09 	beq.w	8006ae6 <_printf_float+0xc2>
 8006cd4:	f04f 0900 	mov.w	r9, #0
 8006cd8:	f104 0a1a 	add.w	sl, r4, #26
 8006cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cde:	425b      	negs	r3, r3
 8006ce0:	454b      	cmp	r3, r9
 8006ce2:	dc01      	bgt.n	8006ce8 <_printf_float+0x2c4>
 8006ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ce6:	e792      	b.n	8006c0e <_printf_float+0x1ea>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	4652      	mov	r2, sl
 8006cec:	4631      	mov	r1, r6
 8006cee:	4628      	mov	r0, r5
 8006cf0:	47b8      	blx	r7
 8006cf2:	3001      	adds	r0, #1
 8006cf4:	f43f aef7 	beq.w	8006ae6 <_printf_float+0xc2>
 8006cf8:	f109 0901 	add.w	r9, r9, #1
 8006cfc:	e7ee      	b.n	8006cdc <_printf_float+0x2b8>
 8006cfe:	bf00      	nop
 8006d00:	7fefffff 	.word	0x7fefffff
 8006d04:	0800b444 	.word	0x0800b444
 8006d08:	0800b448 	.word	0x0800b448
 8006d0c:	0800b450 	.word	0x0800b450
 8006d10:	0800b44c 	.word	0x0800b44c
 8006d14:	0800b454 	.word	0x0800b454
 8006d18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	bfa8      	it	ge
 8006d20:	461a      	movge	r2, r3
 8006d22:	2a00      	cmp	r2, #0
 8006d24:	4691      	mov	r9, r2
 8006d26:	dc37      	bgt.n	8006d98 <_printf_float+0x374>
 8006d28:	f04f 0b00 	mov.w	fp, #0
 8006d2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d30:	f104 021a 	add.w	r2, r4, #26
 8006d34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d36:	9305      	str	r3, [sp, #20]
 8006d38:	eba3 0309 	sub.w	r3, r3, r9
 8006d3c:	455b      	cmp	r3, fp
 8006d3e:	dc33      	bgt.n	8006da8 <_printf_float+0x384>
 8006d40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d44:	429a      	cmp	r2, r3
 8006d46:	db3b      	blt.n	8006dc0 <_printf_float+0x39c>
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	07da      	lsls	r2, r3, #31
 8006d4c:	d438      	bmi.n	8006dc0 <_printf_float+0x39c>
 8006d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d50:	9a05      	ldr	r2, [sp, #20]
 8006d52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d54:	1a9a      	subs	r2, r3, r2
 8006d56:	eba3 0901 	sub.w	r9, r3, r1
 8006d5a:	4591      	cmp	r9, r2
 8006d5c:	bfa8      	it	ge
 8006d5e:	4691      	movge	r9, r2
 8006d60:	f1b9 0f00 	cmp.w	r9, #0
 8006d64:	dc35      	bgt.n	8006dd2 <_printf_float+0x3ae>
 8006d66:	f04f 0800 	mov.w	r8, #0
 8006d6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d6e:	f104 0a1a 	add.w	sl, r4, #26
 8006d72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d76:	1a9b      	subs	r3, r3, r2
 8006d78:	eba3 0309 	sub.w	r3, r3, r9
 8006d7c:	4543      	cmp	r3, r8
 8006d7e:	f77f af79 	ble.w	8006c74 <_printf_float+0x250>
 8006d82:	2301      	movs	r3, #1
 8006d84:	4652      	mov	r2, sl
 8006d86:	4631      	mov	r1, r6
 8006d88:	4628      	mov	r0, r5
 8006d8a:	47b8      	blx	r7
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	f43f aeaa 	beq.w	8006ae6 <_printf_float+0xc2>
 8006d92:	f108 0801 	add.w	r8, r8, #1
 8006d96:	e7ec      	b.n	8006d72 <_printf_float+0x34e>
 8006d98:	4613      	mov	r3, r2
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	4642      	mov	r2, r8
 8006d9e:	4628      	mov	r0, r5
 8006da0:	47b8      	blx	r7
 8006da2:	3001      	adds	r0, #1
 8006da4:	d1c0      	bne.n	8006d28 <_printf_float+0x304>
 8006da6:	e69e      	b.n	8006ae6 <_printf_float+0xc2>
 8006da8:	2301      	movs	r3, #1
 8006daa:	4631      	mov	r1, r6
 8006dac:	4628      	mov	r0, r5
 8006dae:	9205      	str	r2, [sp, #20]
 8006db0:	47b8      	blx	r7
 8006db2:	3001      	adds	r0, #1
 8006db4:	f43f ae97 	beq.w	8006ae6 <_printf_float+0xc2>
 8006db8:	9a05      	ldr	r2, [sp, #20]
 8006dba:	f10b 0b01 	add.w	fp, fp, #1
 8006dbe:	e7b9      	b.n	8006d34 <_printf_float+0x310>
 8006dc0:	ee18 3a10 	vmov	r3, s16
 8006dc4:	4652      	mov	r2, sl
 8006dc6:	4631      	mov	r1, r6
 8006dc8:	4628      	mov	r0, r5
 8006dca:	47b8      	blx	r7
 8006dcc:	3001      	adds	r0, #1
 8006dce:	d1be      	bne.n	8006d4e <_printf_float+0x32a>
 8006dd0:	e689      	b.n	8006ae6 <_printf_float+0xc2>
 8006dd2:	9a05      	ldr	r2, [sp, #20]
 8006dd4:	464b      	mov	r3, r9
 8006dd6:	4442      	add	r2, r8
 8006dd8:	4631      	mov	r1, r6
 8006dda:	4628      	mov	r0, r5
 8006ddc:	47b8      	blx	r7
 8006dde:	3001      	adds	r0, #1
 8006de0:	d1c1      	bne.n	8006d66 <_printf_float+0x342>
 8006de2:	e680      	b.n	8006ae6 <_printf_float+0xc2>
 8006de4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006de6:	2a01      	cmp	r2, #1
 8006de8:	dc01      	bgt.n	8006dee <_printf_float+0x3ca>
 8006dea:	07db      	lsls	r3, r3, #31
 8006dec:	d538      	bpl.n	8006e60 <_printf_float+0x43c>
 8006dee:	2301      	movs	r3, #1
 8006df0:	4642      	mov	r2, r8
 8006df2:	4631      	mov	r1, r6
 8006df4:	4628      	mov	r0, r5
 8006df6:	47b8      	blx	r7
 8006df8:	3001      	adds	r0, #1
 8006dfa:	f43f ae74 	beq.w	8006ae6 <_printf_float+0xc2>
 8006dfe:	ee18 3a10 	vmov	r3, s16
 8006e02:	4652      	mov	r2, sl
 8006e04:	4631      	mov	r1, r6
 8006e06:	4628      	mov	r0, r5
 8006e08:	47b8      	blx	r7
 8006e0a:	3001      	adds	r0, #1
 8006e0c:	f43f ae6b 	beq.w	8006ae6 <_printf_float+0xc2>
 8006e10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e14:	2200      	movs	r2, #0
 8006e16:	2300      	movs	r3, #0
 8006e18:	f7f9 fe76 	bl	8000b08 <__aeabi_dcmpeq>
 8006e1c:	b9d8      	cbnz	r0, 8006e56 <_printf_float+0x432>
 8006e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e20:	f108 0201 	add.w	r2, r8, #1
 8006e24:	3b01      	subs	r3, #1
 8006e26:	4631      	mov	r1, r6
 8006e28:	4628      	mov	r0, r5
 8006e2a:	47b8      	blx	r7
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	d10e      	bne.n	8006e4e <_printf_float+0x42a>
 8006e30:	e659      	b.n	8006ae6 <_printf_float+0xc2>
 8006e32:	2301      	movs	r3, #1
 8006e34:	4652      	mov	r2, sl
 8006e36:	4631      	mov	r1, r6
 8006e38:	4628      	mov	r0, r5
 8006e3a:	47b8      	blx	r7
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	f43f ae52 	beq.w	8006ae6 <_printf_float+0xc2>
 8006e42:	f108 0801 	add.w	r8, r8, #1
 8006e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	4543      	cmp	r3, r8
 8006e4c:	dcf1      	bgt.n	8006e32 <_printf_float+0x40e>
 8006e4e:	464b      	mov	r3, r9
 8006e50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e54:	e6dc      	b.n	8006c10 <_printf_float+0x1ec>
 8006e56:	f04f 0800 	mov.w	r8, #0
 8006e5a:	f104 0a1a 	add.w	sl, r4, #26
 8006e5e:	e7f2      	b.n	8006e46 <_printf_float+0x422>
 8006e60:	2301      	movs	r3, #1
 8006e62:	4642      	mov	r2, r8
 8006e64:	e7df      	b.n	8006e26 <_printf_float+0x402>
 8006e66:	2301      	movs	r3, #1
 8006e68:	464a      	mov	r2, r9
 8006e6a:	4631      	mov	r1, r6
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	47b8      	blx	r7
 8006e70:	3001      	adds	r0, #1
 8006e72:	f43f ae38 	beq.w	8006ae6 <_printf_float+0xc2>
 8006e76:	f108 0801 	add.w	r8, r8, #1
 8006e7a:	68e3      	ldr	r3, [r4, #12]
 8006e7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e7e:	1a5b      	subs	r3, r3, r1
 8006e80:	4543      	cmp	r3, r8
 8006e82:	dcf0      	bgt.n	8006e66 <_printf_float+0x442>
 8006e84:	e6fa      	b.n	8006c7c <_printf_float+0x258>
 8006e86:	f04f 0800 	mov.w	r8, #0
 8006e8a:	f104 0919 	add.w	r9, r4, #25
 8006e8e:	e7f4      	b.n	8006e7a <_printf_float+0x456>

08006e90 <_printf_common>:
 8006e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e94:	4616      	mov	r6, r2
 8006e96:	4699      	mov	r9, r3
 8006e98:	688a      	ldr	r2, [r1, #8]
 8006e9a:	690b      	ldr	r3, [r1, #16]
 8006e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	bfb8      	it	lt
 8006ea4:	4613      	movlt	r3, r2
 8006ea6:	6033      	str	r3, [r6, #0]
 8006ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006eac:	4607      	mov	r7, r0
 8006eae:	460c      	mov	r4, r1
 8006eb0:	b10a      	cbz	r2, 8006eb6 <_printf_common+0x26>
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	6033      	str	r3, [r6, #0]
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	0699      	lsls	r1, r3, #26
 8006eba:	bf42      	ittt	mi
 8006ebc:	6833      	ldrmi	r3, [r6, #0]
 8006ebe:	3302      	addmi	r3, #2
 8006ec0:	6033      	strmi	r3, [r6, #0]
 8006ec2:	6825      	ldr	r5, [r4, #0]
 8006ec4:	f015 0506 	ands.w	r5, r5, #6
 8006ec8:	d106      	bne.n	8006ed8 <_printf_common+0x48>
 8006eca:	f104 0a19 	add.w	sl, r4, #25
 8006ece:	68e3      	ldr	r3, [r4, #12]
 8006ed0:	6832      	ldr	r2, [r6, #0]
 8006ed2:	1a9b      	subs	r3, r3, r2
 8006ed4:	42ab      	cmp	r3, r5
 8006ed6:	dc26      	bgt.n	8006f26 <_printf_common+0x96>
 8006ed8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006edc:	1e13      	subs	r3, r2, #0
 8006ede:	6822      	ldr	r2, [r4, #0]
 8006ee0:	bf18      	it	ne
 8006ee2:	2301      	movne	r3, #1
 8006ee4:	0692      	lsls	r2, r2, #26
 8006ee6:	d42b      	bmi.n	8006f40 <_printf_common+0xb0>
 8006ee8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006eec:	4649      	mov	r1, r9
 8006eee:	4638      	mov	r0, r7
 8006ef0:	47c0      	blx	r8
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	d01e      	beq.n	8006f34 <_printf_common+0xa4>
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	68e5      	ldr	r5, [r4, #12]
 8006efa:	6832      	ldr	r2, [r6, #0]
 8006efc:	f003 0306 	and.w	r3, r3, #6
 8006f00:	2b04      	cmp	r3, #4
 8006f02:	bf08      	it	eq
 8006f04:	1aad      	subeq	r5, r5, r2
 8006f06:	68a3      	ldr	r3, [r4, #8]
 8006f08:	6922      	ldr	r2, [r4, #16]
 8006f0a:	bf0c      	ite	eq
 8006f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f10:	2500      	movne	r5, #0
 8006f12:	4293      	cmp	r3, r2
 8006f14:	bfc4      	itt	gt
 8006f16:	1a9b      	subgt	r3, r3, r2
 8006f18:	18ed      	addgt	r5, r5, r3
 8006f1a:	2600      	movs	r6, #0
 8006f1c:	341a      	adds	r4, #26
 8006f1e:	42b5      	cmp	r5, r6
 8006f20:	d11a      	bne.n	8006f58 <_printf_common+0xc8>
 8006f22:	2000      	movs	r0, #0
 8006f24:	e008      	b.n	8006f38 <_printf_common+0xa8>
 8006f26:	2301      	movs	r3, #1
 8006f28:	4652      	mov	r2, sl
 8006f2a:	4649      	mov	r1, r9
 8006f2c:	4638      	mov	r0, r7
 8006f2e:	47c0      	blx	r8
 8006f30:	3001      	adds	r0, #1
 8006f32:	d103      	bne.n	8006f3c <_printf_common+0xac>
 8006f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f3c:	3501      	adds	r5, #1
 8006f3e:	e7c6      	b.n	8006ece <_printf_common+0x3e>
 8006f40:	18e1      	adds	r1, r4, r3
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	2030      	movs	r0, #48	; 0x30
 8006f46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f4a:	4422      	add	r2, r4
 8006f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f54:	3302      	adds	r3, #2
 8006f56:	e7c7      	b.n	8006ee8 <_printf_common+0x58>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	4622      	mov	r2, r4
 8006f5c:	4649      	mov	r1, r9
 8006f5e:	4638      	mov	r0, r7
 8006f60:	47c0      	blx	r8
 8006f62:	3001      	adds	r0, #1
 8006f64:	d0e6      	beq.n	8006f34 <_printf_common+0xa4>
 8006f66:	3601      	adds	r6, #1
 8006f68:	e7d9      	b.n	8006f1e <_printf_common+0x8e>
	...

08006f6c <_printf_i>:
 8006f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f70:	7e0f      	ldrb	r7, [r1, #24]
 8006f72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f74:	2f78      	cmp	r7, #120	; 0x78
 8006f76:	4691      	mov	r9, r2
 8006f78:	4680      	mov	r8, r0
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	469a      	mov	sl, r3
 8006f7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f82:	d807      	bhi.n	8006f94 <_printf_i+0x28>
 8006f84:	2f62      	cmp	r7, #98	; 0x62
 8006f86:	d80a      	bhi.n	8006f9e <_printf_i+0x32>
 8006f88:	2f00      	cmp	r7, #0
 8006f8a:	f000 80d8 	beq.w	800713e <_printf_i+0x1d2>
 8006f8e:	2f58      	cmp	r7, #88	; 0x58
 8006f90:	f000 80a3 	beq.w	80070da <_printf_i+0x16e>
 8006f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f9c:	e03a      	b.n	8007014 <_printf_i+0xa8>
 8006f9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fa2:	2b15      	cmp	r3, #21
 8006fa4:	d8f6      	bhi.n	8006f94 <_printf_i+0x28>
 8006fa6:	a101      	add	r1, pc, #4	; (adr r1, 8006fac <_printf_i+0x40>)
 8006fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fac:	08007005 	.word	0x08007005
 8006fb0:	08007019 	.word	0x08007019
 8006fb4:	08006f95 	.word	0x08006f95
 8006fb8:	08006f95 	.word	0x08006f95
 8006fbc:	08006f95 	.word	0x08006f95
 8006fc0:	08006f95 	.word	0x08006f95
 8006fc4:	08007019 	.word	0x08007019
 8006fc8:	08006f95 	.word	0x08006f95
 8006fcc:	08006f95 	.word	0x08006f95
 8006fd0:	08006f95 	.word	0x08006f95
 8006fd4:	08006f95 	.word	0x08006f95
 8006fd8:	08007125 	.word	0x08007125
 8006fdc:	08007049 	.word	0x08007049
 8006fe0:	08007107 	.word	0x08007107
 8006fe4:	08006f95 	.word	0x08006f95
 8006fe8:	08006f95 	.word	0x08006f95
 8006fec:	08007147 	.word	0x08007147
 8006ff0:	08006f95 	.word	0x08006f95
 8006ff4:	08007049 	.word	0x08007049
 8006ff8:	08006f95 	.word	0x08006f95
 8006ffc:	08006f95 	.word	0x08006f95
 8007000:	0800710f 	.word	0x0800710f
 8007004:	682b      	ldr	r3, [r5, #0]
 8007006:	1d1a      	adds	r2, r3, #4
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	602a      	str	r2, [r5, #0]
 800700c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007014:	2301      	movs	r3, #1
 8007016:	e0a3      	b.n	8007160 <_printf_i+0x1f4>
 8007018:	6820      	ldr	r0, [r4, #0]
 800701a:	6829      	ldr	r1, [r5, #0]
 800701c:	0606      	lsls	r6, r0, #24
 800701e:	f101 0304 	add.w	r3, r1, #4
 8007022:	d50a      	bpl.n	800703a <_printf_i+0xce>
 8007024:	680e      	ldr	r6, [r1, #0]
 8007026:	602b      	str	r3, [r5, #0]
 8007028:	2e00      	cmp	r6, #0
 800702a:	da03      	bge.n	8007034 <_printf_i+0xc8>
 800702c:	232d      	movs	r3, #45	; 0x2d
 800702e:	4276      	negs	r6, r6
 8007030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007034:	485e      	ldr	r0, [pc, #376]	; (80071b0 <_printf_i+0x244>)
 8007036:	230a      	movs	r3, #10
 8007038:	e019      	b.n	800706e <_printf_i+0x102>
 800703a:	680e      	ldr	r6, [r1, #0]
 800703c:	602b      	str	r3, [r5, #0]
 800703e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007042:	bf18      	it	ne
 8007044:	b236      	sxthne	r6, r6
 8007046:	e7ef      	b.n	8007028 <_printf_i+0xbc>
 8007048:	682b      	ldr	r3, [r5, #0]
 800704a:	6820      	ldr	r0, [r4, #0]
 800704c:	1d19      	adds	r1, r3, #4
 800704e:	6029      	str	r1, [r5, #0]
 8007050:	0601      	lsls	r1, r0, #24
 8007052:	d501      	bpl.n	8007058 <_printf_i+0xec>
 8007054:	681e      	ldr	r6, [r3, #0]
 8007056:	e002      	b.n	800705e <_printf_i+0xf2>
 8007058:	0646      	lsls	r6, r0, #25
 800705a:	d5fb      	bpl.n	8007054 <_printf_i+0xe8>
 800705c:	881e      	ldrh	r6, [r3, #0]
 800705e:	4854      	ldr	r0, [pc, #336]	; (80071b0 <_printf_i+0x244>)
 8007060:	2f6f      	cmp	r7, #111	; 0x6f
 8007062:	bf0c      	ite	eq
 8007064:	2308      	moveq	r3, #8
 8007066:	230a      	movne	r3, #10
 8007068:	2100      	movs	r1, #0
 800706a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800706e:	6865      	ldr	r5, [r4, #4]
 8007070:	60a5      	str	r5, [r4, #8]
 8007072:	2d00      	cmp	r5, #0
 8007074:	bfa2      	ittt	ge
 8007076:	6821      	ldrge	r1, [r4, #0]
 8007078:	f021 0104 	bicge.w	r1, r1, #4
 800707c:	6021      	strge	r1, [r4, #0]
 800707e:	b90e      	cbnz	r6, 8007084 <_printf_i+0x118>
 8007080:	2d00      	cmp	r5, #0
 8007082:	d04d      	beq.n	8007120 <_printf_i+0x1b4>
 8007084:	4615      	mov	r5, r2
 8007086:	fbb6 f1f3 	udiv	r1, r6, r3
 800708a:	fb03 6711 	mls	r7, r3, r1, r6
 800708e:	5dc7      	ldrb	r7, [r0, r7]
 8007090:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007094:	4637      	mov	r7, r6
 8007096:	42bb      	cmp	r3, r7
 8007098:	460e      	mov	r6, r1
 800709a:	d9f4      	bls.n	8007086 <_printf_i+0x11a>
 800709c:	2b08      	cmp	r3, #8
 800709e:	d10b      	bne.n	80070b8 <_printf_i+0x14c>
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	07de      	lsls	r6, r3, #31
 80070a4:	d508      	bpl.n	80070b8 <_printf_i+0x14c>
 80070a6:	6923      	ldr	r3, [r4, #16]
 80070a8:	6861      	ldr	r1, [r4, #4]
 80070aa:	4299      	cmp	r1, r3
 80070ac:	bfde      	ittt	le
 80070ae:	2330      	movle	r3, #48	; 0x30
 80070b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80070b8:	1b52      	subs	r2, r2, r5
 80070ba:	6122      	str	r2, [r4, #16]
 80070bc:	f8cd a000 	str.w	sl, [sp]
 80070c0:	464b      	mov	r3, r9
 80070c2:	aa03      	add	r2, sp, #12
 80070c4:	4621      	mov	r1, r4
 80070c6:	4640      	mov	r0, r8
 80070c8:	f7ff fee2 	bl	8006e90 <_printf_common>
 80070cc:	3001      	adds	r0, #1
 80070ce:	d14c      	bne.n	800716a <_printf_i+0x1fe>
 80070d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070d4:	b004      	add	sp, #16
 80070d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070da:	4835      	ldr	r0, [pc, #212]	; (80071b0 <_printf_i+0x244>)
 80070dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80070e0:	6829      	ldr	r1, [r5, #0]
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80070e8:	6029      	str	r1, [r5, #0]
 80070ea:	061d      	lsls	r5, r3, #24
 80070ec:	d514      	bpl.n	8007118 <_printf_i+0x1ac>
 80070ee:	07df      	lsls	r7, r3, #31
 80070f0:	bf44      	itt	mi
 80070f2:	f043 0320 	orrmi.w	r3, r3, #32
 80070f6:	6023      	strmi	r3, [r4, #0]
 80070f8:	b91e      	cbnz	r6, 8007102 <_printf_i+0x196>
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	f023 0320 	bic.w	r3, r3, #32
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	2310      	movs	r3, #16
 8007104:	e7b0      	b.n	8007068 <_printf_i+0xfc>
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	f043 0320 	orr.w	r3, r3, #32
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	2378      	movs	r3, #120	; 0x78
 8007110:	4828      	ldr	r0, [pc, #160]	; (80071b4 <_printf_i+0x248>)
 8007112:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007116:	e7e3      	b.n	80070e0 <_printf_i+0x174>
 8007118:	0659      	lsls	r1, r3, #25
 800711a:	bf48      	it	mi
 800711c:	b2b6      	uxthmi	r6, r6
 800711e:	e7e6      	b.n	80070ee <_printf_i+0x182>
 8007120:	4615      	mov	r5, r2
 8007122:	e7bb      	b.n	800709c <_printf_i+0x130>
 8007124:	682b      	ldr	r3, [r5, #0]
 8007126:	6826      	ldr	r6, [r4, #0]
 8007128:	6961      	ldr	r1, [r4, #20]
 800712a:	1d18      	adds	r0, r3, #4
 800712c:	6028      	str	r0, [r5, #0]
 800712e:	0635      	lsls	r5, r6, #24
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	d501      	bpl.n	8007138 <_printf_i+0x1cc>
 8007134:	6019      	str	r1, [r3, #0]
 8007136:	e002      	b.n	800713e <_printf_i+0x1d2>
 8007138:	0670      	lsls	r0, r6, #25
 800713a:	d5fb      	bpl.n	8007134 <_printf_i+0x1c8>
 800713c:	8019      	strh	r1, [r3, #0]
 800713e:	2300      	movs	r3, #0
 8007140:	6123      	str	r3, [r4, #16]
 8007142:	4615      	mov	r5, r2
 8007144:	e7ba      	b.n	80070bc <_printf_i+0x150>
 8007146:	682b      	ldr	r3, [r5, #0]
 8007148:	1d1a      	adds	r2, r3, #4
 800714a:	602a      	str	r2, [r5, #0]
 800714c:	681d      	ldr	r5, [r3, #0]
 800714e:	6862      	ldr	r2, [r4, #4]
 8007150:	2100      	movs	r1, #0
 8007152:	4628      	mov	r0, r5
 8007154:	f7f9 f864 	bl	8000220 <memchr>
 8007158:	b108      	cbz	r0, 800715e <_printf_i+0x1f2>
 800715a:	1b40      	subs	r0, r0, r5
 800715c:	6060      	str	r0, [r4, #4]
 800715e:	6863      	ldr	r3, [r4, #4]
 8007160:	6123      	str	r3, [r4, #16]
 8007162:	2300      	movs	r3, #0
 8007164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007168:	e7a8      	b.n	80070bc <_printf_i+0x150>
 800716a:	6923      	ldr	r3, [r4, #16]
 800716c:	462a      	mov	r2, r5
 800716e:	4649      	mov	r1, r9
 8007170:	4640      	mov	r0, r8
 8007172:	47d0      	blx	sl
 8007174:	3001      	adds	r0, #1
 8007176:	d0ab      	beq.n	80070d0 <_printf_i+0x164>
 8007178:	6823      	ldr	r3, [r4, #0]
 800717a:	079b      	lsls	r3, r3, #30
 800717c:	d413      	bmi.n	80071a6 <_printf_i+0x23a>
 800717e:	68e0      	ldr	r0, [r4, #12]
 8007180:	9b03      	ldr	r3, [sp, #12]
 8007182:	4298      	cmp	r0, r3
 8007184:	bfb8      	it	lt
 8007186:	4618      	movlt	r0, r3
 8007188:	e7a4      	b.n	80070d4 <_printf_i+0x168>
 800718a:	2301      	movs	r3, #1
 800718c:	4632      	mov	r2, r6
 800718e:	4649      	mov	r1, r9
 8007190:	4640      	mov	r0, r8
 8007192:	47d0      	blx	sl
 8007194:	3001      	adds	r0, #1
 8007196:	d09b      	beq.n	80070d0 <_printf_i+0x164>
 8007198:	3501      	adds	r5, #1
 800719a:	68e3      	ldr	r3, [r4, #12]
 800719c:	9903      	ldr	r1, [sp, #12]
 800719e:	1a5b      	subs	r3, r3, r1
 80071a0:	42ab      	cmp	r3, r5
 80071a2:	dcf2      	bgt.n	800718a <_printf_i+0x21e>
 80071a4:	e7eb      	b.n	800717e <_printf_i+0x212>
 80071a6:	2500      	movs	r5, #0
 80071a8:	f104 0619 	add.w	r6, r4, #25
 80071ac:	e7f5      	b.n	800719a <_printf_i+0x22e>
 80071ae:	bf00      	nop
 80071b0:	0800b456 	.word	0x0800b456
 80071b4:	0800b467 	.word	0x0800b467

080071b8 <iprintf>:
 80071b8:	b40f      	push	{r0, r1, r2, r3}
 80071ba:	4b0a      	ldr	r3, [pc, #40]	; (80071e4 <iprintf+0x2c>)
 80071bc:	b513      	push	{r0, r1, r4, lr}
 80071be:	681c      	ldr	r4, [r3, #0]
 80071c0:	b124      	cbz	r4, 80071cc <iprintf+0x14>
 80071c2:	69a3      	ldr	r3, [r4, #24]
 80071c4:	b913      	cbnz	r3, 80071cc <iprintf+0x14>
 80071c6:	4620      	mov	r0, r4
 80071c8:	f001 f8da 	bl	8008380 <__sinit>
 80071cc:	ab05      	add	r3, sp, #20
 80071ce:	9a04      	ldr	r2, [sp, #16]
 80071d0:	68a1      	ldr	r1, [r4, #8]
 80071d2:	9301      	str	r3, [sp, #4]
 80071d4:	4620      	mov	r0, r4
 80071d6:	f001 fe97 	bl	8008f08 <_vfiprintf_r>
 80071da:	b002      	add	sp, #8
 80071dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071e0:	b004      	add	sp, #16
 80071e2:	4770      	bx	lr
 80071e4:	20000018 	.word	0x20000018

080071e8 <_puts_r>:
 80071e8:	b570      	push	{r4, r5, r6, lr}
 80071ea:	460e      	mov	r6, r1
 80071ec:	4605      	mov	r5, r0
 80071ee:	b118      	cbz	r0, 80071f8 <_puts_r+0x10>
 80071f0:	6983      	ldr	r3, [r0, #24]
 80071f2:	b90b      	cbnz	r3, 80071f8 <_puts_r+0x10>
 80071f4:	f001 f8c4 	bl	8008380 <__sinit>
 80071f8:	69ab      	ldr	r3, [r5, #24]
 80071fa:	68ac      	ldr	r4, [r5, #8]
 80071fc:	b913      	cbnz	r3, 8007204 <_puts_r+0x1c>
 80071fe:	4628      	mov	r0, r5
 8007200:	f001 f8be 	bl	8008380 <__sinit>
 8007204:	4b2c      	ldr	r3, [pc, #176]	; (80072b8 <_puts_r+0xd0>)
 8007206:	429c      	cmp	r4, r3
 8007208:	d120      	bne.n	800724c <_puts_r+0x64>
 800720a:	686c      	ldr	r4, [r5, #4]
 800720c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800720e:	07db      	lsls	r3, r3, #31
 8007210:	d405      	bmi.n	800721e <_puts_r+0x36>
 8007212:	89a3      	ldrh	r3, [r4, #12]
 8007214:	0598      	lsls	r0, r3, #22
 8007216:	d402      	bmi.n	800721e <_puts_r+0x36>
 8007218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800721a:	f001 f954 	bl	80084c6 <__retarget_lock_acquire_recursive>
 800721e:	89a3      	ldrh	r3, [r4, #12]
 8007220:	0719      	lsls	r1, r3, #28
 8007222:	d51d      	bpl.n	8007260 <_puts_r+0x78>
 8007224:	6923      	ldr	r3, [r4, #16]
 8007226:	b1db      	cbz	r3, 8007260 <_puts_r+0x78>
 8007228:	3e01      	subs	r6, #1
 800722a:	68a3      	ldr	r3, [r4, #8]
 800722c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007230:	3b01      	subs	r3, #1
 8007232:	60a3      	str	r3, [r4, #8]
 8007234:	bb39      	cbnz	r1, 8007286 <_puts_r+0x9e>
 8007236:	2b00      	cmp	r3, #0
 8007238:	da38      	bge.n	80072ac <_puts_r+0xc4>
 800723a:	4622      	mov	r2, r4
 800723c:	210a      	movs	r1, #10
 800723e:	4628      	mov	r0, r5
 8007240:	f000 f848 	bl	80072d4 <__swbuf_r>
 8007244:	3001      	adds	r0, #1
 8007246:	d011      	beq.n	800726c <_puts_r+0x84>
 8007248:	250a      	movs	r5, #10
 800724a:	e011      	b.n	8007270 <_puts_r+0x88>
 800724c:	4b1b      	ldr	r3, [pc, #108]	; (80072bc <_puts_r+0xd4>)
 800724e:	429c      	cmp	r4, r3
 8007250:	d101      	bne.n	8007256 <_puts_r+0x6e>
 8007252:	68ac      	ldr	r4, [r5, #8]
 8007254:	e7da      	b.n	800720c <_puts_r+0x24>
 8007256:	4b1a      	ldr	r3, [pc, #104]	; (80072c0 <_puts_r+0xd8>)
 8007258:	429c      	cmp	r4, r3
 800725a:	bf08      	it	eq
 800725c:	68ec      	ldreq	r4, [r5, #12]
 800725e:	e7d5      	b.n	800720c <_puts_r+0x24>
 8007260:	4621      	mov	r1, r4
 8007262:	4628      	mov	r0, r5
 8007264:	f000 f888 	bl	8007378 <__swsetup_r>
 8007268:	2800      	cmp	r0, #0
 800726a:	d0dd      	beq.n	8007228 <_puts_r+0x40>
 800726c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007270:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007272:	07da      	lsls	r2, r3, #31
 8007274:	d405      	bmi.n	8007282 <_puts_r+0x9a>
 8007276:	89a3      	ldrh	r3, [r4, #12]
 8007278:	059b      	lsls	r3, r3, #22
 800727a:	d402      	bmi.n	8007282 <_puts_r+0x9a>
 800727c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800727e:	f001 f923 	bl	80084c8 <__retarget_lock_release_recursive>
 8007282:	4628      	mov	r0, r5
 8007284:	bd70      	pop	{r4, r5, r6, pc}
 8007286:	2b00      	cmp	r3, #0
 8007288:	da04      	bge.n	8007294 <_puts_r+0xac>
 800728a:	69a2      	ldr	r2, [r4, #24]
 800728c:	429a      	cmp	r2, r3
 800728e:	dc06      	bgt.n	800729e <_puts_r+0xb6>
 8007290:	290a      	cmp	r1, #10
 8007292:	d004      	beq.n	800729e <_puts_r+0xb6>
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	1c5a      	adds	r2, r3, #1
 8007298:	6022      	str	r2, [r4, #0]
 800729a:	7019      	strb	r1, [r3, #0]
 800729c:	e7c5      	b.n	800722a <_puts_r+0x42>
 800729e:	4622      	mov	r2, r4
 80072a0:	4628      	mov	r0, r5
 80072a2:	f000 f817 	bl	80072d4 <__swbuf_r>
 80072a6:	3001      	adds	r0, #1
 80072a8:	d1bf      	bne.n	800722a <_puts_r+0x42>
 80072aa:	e7df      	b.n	800726c <_puts_r+0x84>
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	250a      	movs	r5, #10
 80072b0:	1c5a      	adds	r2, r3, #1
 80072b2:	6022      	str	r2, [r4, #0]
 80072b4:	701d      	strb	r5, [r3, #0]
 80072b6:	e7db      	b.n	8007270 <_puts_r+0x88>
 80072b8:	0800b528 	.word	0x0800b528
 80072bc:	0800b548 	.word	0x0800b548
 80072c0:	0800b508 	.word	0x0800b508

080072c4 <puts>:
 80072c4:	4b02      	ldr	r3, [pc, #8]	; (80072d0 <puts+0xc>)
 80072c6:	4601      	mov	r1, r0
 80072c8:	6818      	ldr	r0, [r3, #0]
 80072ca:	f7ff bf8d 	b.w	80071e8 <_puts_r>
 80072ce:	bf00      	nop
 80072d0:	20000018 	.word	0x20000018

080072d4 <__swbuf_r>:
 80072d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d6:	460e      	mov	r6, r1
 80072d8:	4614      	mov	r4, r2
 80072da:	4605      	mov	r5, r0
 80072dc:	b118      	cbz	r0, 80072e6 <__swbuf_r+0x12>
 80072de:	6983      	ldr	r3, [r0, #24]
 80072e0:	b90b      	cbnz	r3, 80072e6 <__swbuf_r+0x12>
 80072e2:	f001 f84d 	bl	8008380 <__sinit>
 80072e6:	4b21      	ldr	r3, [pc, #132]	; (800736c <__swbuf_r+0x98>)
 80072e8:	429c      	cmp	r4, r3
 80072ea:	d12b      	bne.n	8007344 <__swbuf_r+0x70>
 80072ec:	686c      	ldr	r4, [r5, #4]
 80072ee:	69a3      	ldr	r3, [r4, #24]
 80072f0:	60a3      	str	r3, [r4, #8]
 80072f2:	89a3      	ldrh	r3, [r4, #12]
 80072f4:	071a      	lsls	r2, r3, #28
 80072f6:	d52f      	bpl.n	8007358 <__swbuf_r+0x84>
 80072f8:	6923      	ldr	r3, [r4, #16]
 80072fa:	b36b      	cbz	r3, 8007358 <__swbuf_r+0x84>
 80072fc:	6923      	ldr	r3, [r4, #16]
 80072fe:	6820      	ldr	r0, [r4, #0]
 8007300:	1ac0      	subs	r0, r0, r3
 8007302:	6963      	ldr	r3, [r4, #20]
 8007304:	b2f6      	uxtb	r6, r6
 8007306:	4283      	cmp	r3, r0
 8007308:	4637      	mov	r7, r6
 800730a:	dc04      	bgt.n	8007316 <__swbuf_r+0x42>
 800730c:	4621      	mov	r1, r4
 800730e:	4628      	mov	r0, r5
 8007310:	f000 ffa2 	bl	8008258 <_fflush_r>
 8007314:	bb30      	cbnz	r0, 8007364 <__swbuf_r+0x90>
 8007316:	68a3      	ldr	r3, [r4, #8]
 8007318:	3b01      	subs	r3, #1
 800731a:	60a3      	str	r3, [r4, #8]
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	6022      	str	r2, [r4, #0]
 8007322:	701e      	strb	r6, [r3, #0]
 8007324:	6963      	ldr	r3, [r4, #20]
 8007326:	3001      	adds	r0, #1
 8007328:	4283      	cmp	r3, r0
 800732a:	d004      	beq.n	8007336 <__swbuf_r+0x62>
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	07db      	lsls	r3, r3, #31
 8007330:	d506      	bpl.n	8007340 <__swbuf_r+0x6c>
 8007332:	2e0a      	cmp	r6, #10
 8007334:	d104      	bne.n	8007340 <__swbuf_r+0x6c>
 8007336:	4621      	mov	r1, r4
 8007338:	4628      	mov	r0, r5
 800733a:	f000 ff8d 	bl	8008258 <_fflush_r>
 800733e:	b988      	cbnz	r0, 8007364 <__swbuf_r+0x90>
 8007340:	4638      	mov	r0, r7
 8007342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007344:	4b0a      	ldr	r3, [pc, #40]	; (8007370 <__swbuf_r+0x9c>)
 8007346:	429c      	cmp	r4, r3
 8007348:	d101      	bne.n	800734e <__swbuf_r+0x7a>
 800734a:	68ac      	ldr	r4, [r5, #8]
 800734c:	e7cf      	b.n	80072ee <__swbuf_r+0x1a>
 800734e:	4b09      	ldr	r3, [pc, #36]	; (8007374 <__swbuf_r+0xa0>)
 8007350:	429c      	cmp	r4, r3
 8007352:	bf08      	it	eq
 8007354:	68ec      	ldreq	r4, [r5, #12]
 8007356:	e7ca      	b.n	80072ee <__swbuf_r+0x1a>
 8007358:	4621      	mov	r1, r4
 800735a:	4628      	mov	r0, r5
 800735c:	f000 f80c 	bl	8007378 <__swsetup_r>
 8007360:	2800      	cmp	r0, #0
 8007362:	d0cb      	beq.n	80072fc <__swbuf_r+0x28>
 8007364:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007368:	e7ea      	b.n	8007340 <__swbuf_r+0x6c>
 800736a:	bf00      	nop
 800736c:	0800b528 	.word	0x0800b528
 8007370:	0800b548 	.word	0x0800b548
 8007374:	0800b508 	.word	0x0800b508

08007378 <__swsetup_r>:
 8007378:	4b32      	ldr	r3, [pc, #200]	; (8007444 <__swsetup_r+0xcc>)
 800737a:	b570      	push	{r4, r5, r6, lr}
 800737c:	681d      	ldr	r5, [r3, #0]
 800737e:	4606      	mov	r6, r0
 8007380:	460c      	mov	r4, r1
 8007382:	b125      	cbz	r5, 800738e <__swsetup_r+0x16>
 8007384:	69ab      	ldr	r3, [r5, #24]
 8007386:	b913      	cbnz	r3, 800738e <__swsetup_r+0x16>
 8007388:	4628      	mov	r0, r5
 800738a:	f000 fff9 	bl	8008380 <__sinit>
 800738e:	4b2e      	ldr	r3, [pc, #184]	; (8007448 <__swsetup_r+0xd0>)
 8007390:	429c      	cmp	r4, r3
 8007392:	d10f      	bne.n	80073b4 <__swsetup_r+0x3c>
 8007394:	686c      	ldr	r4, [r5, #4]
 8007396:	89a3      	ldrh	r3, [r4, #12]
 8007398:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800739c:	0719      	lsls	r1, r3, #28
 800739e:	d42c      	bmi.n	80073fa <__swsetup_r+0x82>
 80073a0:	06dd      	lsls	r5, r3, #27
 80073a2:	d411      	bmi.n	80073c8 <__swsetup_r+0x50>
 80073a4:	2309      	movs	r3, #9
 80073a6:	6033      	str	r3, [r6, #0]
 80073a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073ac:	81a3      	strh	r3, [r4, #12]
 80073ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073b2:	e03e      	b.n	8007432 <__swsetup_r+0xba>
 80073b4:	4b25      	ldr	r3, [pc, #148]	; (800744c <__swsetup_r+0xd4>)
 80073b6:	429c      	cmp	r4, r3
 80073b8:	d101      	bne.n	80073be <__swsetup_r+0x46>
 80073ba:	68ac      	ldr	r4, [r5, #8]
 80073bc:	e7eb      	b.n	8007396 <__swsetup_r+0x1e>
 80073be:	4b24      	ldr	r3, [pc, #144]	; (8007450 <__swsetup_r+0xd8>)
 80073c0:	429c      	cmp	r4, r3
 80073c2:	bf08      	it	eq
 80073c4:	68ec      	ldreq	r4, [r5, #12]
 80073c6:	e7e6      	b.n	8007396 <__swsetup_r+0x1e>
 80073c8:	0758      	lsls	r0, r3, #29
 80073ca:	d512      	bpl.n	80073f2 <__swsetup_r+0x7a>
 80073cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073ce:	b141      	cbz	r1, 80073e2 <__swsetup_r+0x6a>
 80073d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073d4:	4299      	cmp	r1, r3
 80073d6:	d002      	beq.n	80073de <__swsetup_r+0x66>
 80073d8:	4630      	mov	r0, r6
 80073da:	f001 fc8b 	bl	8008cf4 <_free_r>
 80073de:	2300      	movs	r3, #0
 80073e0:	6363      	str	r3, [r4, #52]	; 0x34
 80073e2:	89a3      	ldrh	r3, [r4, #12]
 80073e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073e8:	81a3      	strh	r3, [r4, #12]
 80073ea:	2300      	movs	r3, #0
 80073ec:	6063      	str	r3, [r4, #4]
 80073ee:	6923      	ldr	r3, [r4, #16]
 80073f0:	6023      	str	r3, [r4, #0]
 80073f2:	89a3      	ldrh	r3, [r4, #12]
 80073f4:	f043 0308 	orr.w	r3, r3, #8
 80073f8:	81a3      	strh	r3, [r4, #12]
 80073fa:	6923      	ldr	r3, [r4, #16]
 80073fc:	b94b      	cbnz	r3, 8007412 <__swsetup_r+0x9a>
 80073fe:	89a3      	ldrh	r3, [r4, #12]
 8007400:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007408:	d003      	beq.n	8007412 <__swsetup_r+0x9a>
 800740a:	4621      	mov	r1, r4
 800740c:	4630      	mov	r0, r6
 800740e:	f001 f881 	bl	8008514 <__smakebuf_r>
 8007412:	89a0      	ldrh	r0, [r4, #12]
 8007414:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007418:	f010 0301 	ands.w	r3, r0, #1
 800741c:	d00a      	beq.n	8007434 <__swsetup_r+0xbc>
 800741e:	2300      	movs	r3, #0
 8007420:	60a3      	str	r3, [r4, #8]
 8007422:	6963      	ldr	r3, [r4, #20]
 8007424:	425b      	negs	r3, r3
 8007426:	61a3      	str	r3, [r4, #24]
 8007428:	6923      	ldr	r3, [r4, #16]
 800742a:	b943      	cbnz	r3, 800743e <__swsetup_r+0xc6>
 800742c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007430:	d1ba      	bne.n	80073a8 <__swsetup_r+0x30>
 8007432:	bd70      	pop	{r4, r5, r6, pc}
 8007434:	0781      	lsls	r1, r0, #30
 8007436:	bf58      	it	pl
 8007438:	6963      	ldrpl	r3, [r4, #20]
 800743a:	60a3      	str	r3, [r4, #8]
 800743c:	e7f4      	b.n	8007428 <__swsetup_r+0xb0>
 800743e:	2000      	movs	r0, #0
 8007440:	e7f7      	b.n	8007432 <__swsetup_r+0xba>
 8007442:	bf00      	nop
 8007444:	20000018 	.word	0x20000018
 8007448:	0800b528 	.word	0x0800b528
 800744c:	0800b548 	.word	0x0800b548
 8007450:	0800b508 	.word	0x0800b508

08007454 <quorem>:
 8007454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007458:	6903      	ldr	r3, [r0, #16]
 800745a:	690c      	ldr	r4, [r1, #16]
 800745c:	42a3      	cmp	r3, r4
 800745e:	4607      	mov	r7, r0
 8007460:	f2c0 8081 	blt.w	8007566 <quorem+0x112>
 8007464:	3c01      	subs	r4, #1
 8007466:	f101 0814 	add.w	r8, r1, #20
 800746a:	f100 0514 	add.w	r5, r0, #20
 800746e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007478:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800747c:	3301      	adds	r3, #1
 800747e:	429a      	cmp	r2, r3
 8007480:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007484:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007488:	fbb2 f6f3 	udiv	r6, r2, r3
 800748c:	d331      	bcc.n	80074f2 <quorem+0x9e>
 800748e:	f04f 0e00 	mov.w	lr, #0
 8007492:	4640      	mov	r0, r8
 8007494:	46ac      	mov	ip, r5
 8007496:	46f2      	mov	sl, lr
 8007498:	f850 2b04 	ldr.w	r2, [r0], #4
 800749c:	b293      	uxth	r3, r2
 800749e:	fb06 e303 	mla	r3, r6, r3, lr
 80074a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	ebaa 0303 	sub.w	r3, sl, r3
 80074ac:	f8dc a000 	ldr.w	sl, [ip]
 80074b0:	0c12      	lsrs	r2, r2, #16
 80074b2:	fa13 f38a 	uxtah	r3, r3, sl
 80074b6:	fb06 e202 	mla	r2, r6, r2, lr
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	9b00      	ldr	r3, [sp, #0]
 80074be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80074c2:	b292      	uxth	r2, r2
 80074c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80074c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80074d0:	4581      	cmp	r9, r0
 80074d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074d6:	f84c 3b04 	str.w	r3, [ip], #4
 80074da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80074de:	d2db      	bcs.n	8007498 <quorem+0x44>
 80074e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80074e4:	b92b      	cbnz	r3, 80074f2 <quorem+0x9e>
 80074e6:	9b01      	ldr	r3, [sp, #4]
 80074e8:	3b04      	subs	r3, #4
 80074ea:	429d      	cmp	r5, r3
 80074ec:	461a      	mov	r2, r3
 80074ee:	d32e      	bcc.n	800754e <quorem+0xfa>
 80074f0:	613c      	str	r4, [r7, #16]
 80074f2:	4638      	mov	r0, r7
 80074f4:	f001 fae6 	bl	8008ac4 <__mcmp>
 80074f8:	2800      	cmp	r0, #0
 80074fa:	db24      	blt.n	8007546 <quorem+0xf2>
 80074fc:	3601      	adds	r6, #1
 80074fe:	4628      	mov	r0, r5
 8007500:	f04f 0c00 	mov.w	ip, #0
 8007504:	f858 2b04 	ldr.w	r2, [r8], #4
 8007508:	f8d0 e000 	ldr.w	lr, [r0]
 800750c:	b293      	uxth	r3, r2
 800750e:	ebac 0303 	sub.w	r3, ip, r3
 8007512:	0c12      	lsrs	r2, r2, #16
 8007514:	fa13 f38e 	uxtah	r3, r3, lr
 8007518:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800751c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007520:	b29b      	uxth	r3, r3
 8007522:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007526:	45c1      	cmp	r9, r8
 8007528:	f840 3b04 	str.w	r3, [r0], #4
 800752c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007530:	d2e8      	bcs.n	8007504 <quorem+0xb0>
 8007532:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007536:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800753a:	b922      	cbnz	r2, 8007546 <quorem+0xf2>
 800753c:	3b04      	subs	r3, #4
 800753e:	429d      	cmp	r5, r3
 8007540:	461a      	mov	r2, r3
 8007542:	d30a      	bcc.n	800755a <quorem+0x106>
 8007544:	613c      	str	r4, [r7, #16]
 8007546:	4630      	mov	r0, r6
 8007548:	b003      	add	sp, #12
 800754a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800754e:	6812      	ldr	r2, [r2, #0]
 8007550:	3b04      	subs	r3, #4
 8007552:	2a00      	cmp	r2, #0
 8007554:	d1cc      	bne.n	80074f0 <quorem+0x9c>
 8007556:	3c01      	subs	r4, #1
 8007558:	e7c7      	b.n	80074ea <quorem+0x96>
 800755a:	6812      	ldr	r2, [r2, #0]
 800755c:	3b04      	subs	r3, #4
 800755e:	2a00      	cmp	r2, #0
 8007560:	d1f0      	bne.n	8007544 <quorem+0xf0>
 8007562:	3c01      	subs	r4, #1
 8007564:	e7eb      	b.n	800753e <quorem+0xea>
 8007566:	2000      	movs	r0, #0
 8007568:	e7ee      	b.n	8007548 <quorem+0xf4>
 800756a:	0000      	movs	r0, r0
 800756c:	0000      	movs	r0, r0
	...

08007570 <_dtoa_r>:
 8007570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007574:	ed2d 8b04 	vpush	{d8-d9}
 8007578:	ec57 6b10 	vmov	r6, r7, d0
 800757c:	b093      	sub	sp, #76	; 0x4c
 800757e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007580:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007584:	9106      	str	r1, [sp, #24]
 8007586:	ee10 aa10 	vmov	sl, s0
 800758a:	4604      	mov	r4, r0
 800758c:	9209      	str	r2, [sp, #36]	; 0x24
 800758e:	930c      	str	r3, [sp, #48]	; 0x30
 8007590:	46bb      	mov	fp, r7
 8007592:	b975      	cbnz	r5, 80075b2 <_dtoa_r+0x42>
 8007594:	2010      	movs	r0, #16
 8007596:	f000 fffd 	bl	8008594 <malloc>
 800759a:	4602      	mov	r2, r0
 800759c:	6260      	str	r0, [r4, #36]	; 0x24
 800759e:	b920      	cbnz	r0, 80075aa <_dtoa_r+0x3a>
 80075a0:	4ba7      	ldr	r3, [pc, #668]	; (8007840 <_dtoa_r+0x2d0>)
 80075a2:	21ea      	movs	r1, #234	; 0xea
 80075a4:	48a7      	ldr	r0, [pc, #668]	; (8007844 <_dtoa_r+0x2d4>)
 80075a6:	f001 fe45 	bl	8009234 <__assert_func>
 80075aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80075ae:	6005      	str	r5, [r0, #0]
 80075b0:	60c5      	str	r5, [r0, #12]
 80075b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075b4:	6819      	ldr	r1, [r3, #0]
 80075b6:	b151      	cbz	r1, 80075ce <_dtoa_r+0x5e>
 80075b8:	685a      	ldr	r2, [r3, #4]
 80075ba:	604a      	str	r2, [r1, #4]
 80075bc:	2301      	movs	r3, #1
 80075be:	4093      	lsls	r3, r2
 80075c0:	608b      	str	r3, [r1, #8]
 80075c2:	4620      	mov	r0, r4
 80075c4:	f001 f83c 	bl	8008640 <_Bfree>
 80075c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075ca:	2200      	movs	r2, #0
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	1e3b      	subs	r3, r7, #0
 80075d0:	bfaa      	itet	ge
 80075d2:	2300      	movge	r3, #0
 80075d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80075d8:	f8c8 3000 	strge.w	r3, [r8]
 80075dc:	4b9a      	ldr	r3, [pc, #616]	; (8007848 <_dtoa_r+0x2d8>)
 80075de:	bfbc      	itt	lt
 80075e0:	2201      	movlt	r2, #1
 80075e2:	f8c8 2000 	strlt.w	r2, [r8]
 80075e6:	ea33 030b 	bics.w	r3, r3, fp
 80075ea:	d11b      	bne.n	8007624 <_dtoa_r+0xb4>
 80075ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80075f2:	6013      	str	r3, [r2, #0]
 80075f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075f8:	4333      	orrs	r3, r6
 80075fa:	f000 8592 	beq.w	8008122 <_dtoa_r+0xbb2>
 80075fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007600:	b963      	cbnz	r3, 800761c <_dtoa_r+0xac>
 8007602:	4b92      	ldr	r3, [pc, #584]	; (800784c <_dtoa_r+0x2dc>)
 8007604:	e022      	b.n	800764c <_dtoa_r+0xdc>
 8007606:	4b92      	ldr	r3, [pc, #584]	; (8007850 <_dtoa_r+0x2e0>)
 8007608:	9301      	str	r3, [sp, #4]
 800760a:	3308      	adds	r3, #8
 800760c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800760e:	6013      	str	r3, [r2, #0]
 8007610:	9801      	ldr	r0, [sp, #4]
 8007612:	b013      	add	sp, #76	; 0x4c
 8007614:	ecbd 8b04 	vpop	{d8-d9}
 8007618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800761c:	4b8b      	ldr	r3, [pc, #556]	; (800784c <_dtoa_r+0x2dc>)
 800761e:	9301      	str	r3, [sp, #4]
 8007620:	3303      	adds	r3, #3
 8007622:	e7f3      	b.n	800760c <_dtoa_r+0x9c>
 8007624:	2200      	movs	r2, #0
 8007626:	2300      	movs	r3, #0
 8007628:	4650      	mov	r0, sl
 800762a:	4659      	mov	r1, fp
 800762c:	f7f9 fa6c 	bl	8000b08 <__aeabi_dcmpeq>
 8007630:	ec4b ab19 	vmov	d9, sl, fp
 8007634:	4680      	mov	r8, r0
 8007636:	b158      	cbz	r0, 8007650 <_dtoa_r+0xe0>
 8007638:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800763a:	2301      	movs	r3, #1
 800763c:	6013      	str	r3, [r2, #0]
 800763e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 856b 	beq.w	800811c <_dtoa_r+0xbac>
 8007646:	4883      	ldr	r0, [pc, #524]	; (8007854 <_dtoa_r+0x2e4>)
 8007648:	6018      	str	r0, [r3, #0]
 800764a:	1e43      	subs	r3, r0, #1
 800764c:	9301      	str	r3, [sp, #4]
 800764e:	e7df      	b.n	8007610 <_dtoa_r+0xa0>
 8007650:	ec4b ab10 	vmov	d0, sl, fp
 8007654:	aa10      	add	r2, sp, #64	; 0x40
 8007656:	a911      	add	r1, sp, #68	; 0x44
 8007658:	4620      	mov	r0, r4
 800765a:	f001 fad9 	bl	8008c10 <__d2b>
 800765e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007662:	ee08 0a10 	vmov	s16, r0
 8007666:	2d00      	cmp	r5, #0
 8007668:	f000 8084 	beq.w	8007774 <_dtoa_r+0x204>
 800766c:	ee19 3a90 	vmov	r3, s19
 8007670:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007674:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007678:	4656      	mov	r6, sl
 800767a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800767e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007682:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007686:	4b74      	ldr	r3, [pc, #464]	; (8007858 <_dtoa_r+0x2e8>)
 8007688:	2200      	movs	r2, #0
 800768a:	4630      	mov	r0, r6
 800768c:	4639      	mov	r1, r7
 800768e:	f7f8 fe1b 	bl	80002c8 <__aeabi_dsub>
 8007692:	a365      	add	r3, pc, #404	; (adr r3, 8007828 <_dtoa_r+0x2b8>)
 8007694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007698:	f7f8 ffce 	bl	8000638 <__aeabi_dmul>
 800769c:	a364      	add	r3, pc, #400	; (adr r3, 8007830 <_dtoa_r+0x2c0>)
 800769e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a2:	f7f8 fe13 	bl	80002cc <__adddf3>
 80076a6:	4606      	mov	r6, r0
 80076a8:	4628      	mov	r0, r5
 80076aa:	460f      	mov	r7, r1
 80076ac:	f7f8 ff5a 	bl	8000564 <__aeabi_i2d>
 80076b0:	a361      	add	r3, pc, #388	; (adr r3, 8007838 <_dtoa_r+0x2c8>)
 80076b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b6:	f7f8 ffbf 	bl	8000638 <__aeabi_dmul>
 80076ba:	4602      	mov	r2, r0
 80076bc:	460b      	mov	r3, r1
 80076be:	4630      	mov	r0, r6
 80076c0:	4639      	mov	r1, r7
 80076c2:	f7f8 fe03 	bl	80002cc <__adddf3>
 80076c6:	4606      	mov	r6, r0
 80076c8:	460f      	mov	r7, r1
 80076ca:	f7f9 fa65 	bl	8000b98 <__aeabi_d2iz>
 80076ce:	2200      	movs	r2, #0
 80076d0:	9000      	str	r0, [sp, #0]
 80076d2:	2300      	movs	r3, #0
 80076d4:	4630      	mov	r0, r6
 80076d6:	4639      	mov	r1, r7
 80076d8:	f7f9 fa20 	bl	8000b1c <__aeabi_dcmplt>
 80076dc:	b150      	cbz	r0, 80076f4 <_dtoa_r+0x184>
 80076de:	9800      	ldr	r0, [sp, #0]
 80076e0:	f7f8 ff40 	bl	8000564 <__aeabi_i2d>
 80076e4:	4632      	mov	r2, r6
 80076e6:	463b      	mov	r3, r7
 80076e8:	f7f9 fa0e 	bl	8000b08 <__aeabi_dcmpeq>
 80076ec:	b910      	cbnz	r0, 80076f4 <_dtoa_r+0x184>
 80076ee:	9b00      	ldr	r3, [sp, #0]
 80076f0:	3b01      	subs	r3, #1
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	9b00      	ldr	r3, [sp, #0]
 80076f6:	2b16      	cmp	r3, #22
 80076f8:	d85a      	bhi.n	80077b0 <_dtoa_r+0x240>
 80076fa:	9a00      	ldr	r2, [sp, #0]
 80076fc:	4b57      	ldr	r3, [pc, #348]	; (800785c <_dtoa_r+0x2ec>)
 80076fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007706:	ec51 0b19 	vmov	r0, r1, d9
 800770a:	f7f9 fa07 	bl	8000b1c <__aeabi_dcmplt>
 800770e:	2800      	cmp	r0, #0
 8007710:	d050      	beq.n	80077b4 <_dtoa_r+0x244>
 8007712:	9b00      	ldr	r3, [sp, #0]
 8007714:	3b01      	subs	r3, #1
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	2300      	movs	r3, #0
 800771a:	930b      	str	r3, [sp, #44]	; 0x2c
 800771c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800771e:	1b5d      	subs	r5, r3, r5
 8007720:	1e6b      	subs	r3, r5, #1
 8007722:	9305      	str	r3, [sp, #20]
 8007724:	bf45      	ittet	mi
 8007726:	f1c5 0301 	rsbmi	r3, r5, #1
 800772a:	9304      	strmi	r3, [sp, #16]
 800772c:	2300      	movpl	r3, #0
 800772e:	2300      	movmi	r3, #0
 8007730:	bf4c      	ite	mi
 8007732:	9305      	strmi	r3, [sp, #20]
 8007734:	9304      	strpl	r3, [sp, #16]
 8007736:	9b00      	ldr	r3, [sp, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	db3d      	blt.n	80077b8 <_dtoa_r+0x248>
 800773c:	9b05      	ldr	r3, [sp, #20]
 800773e:	9a00      	ldr	r2, [sp, #0]
 8007740:	920a      	str	r2, [sp, #40]	; 0x28
 8007742:	4413      	add	r3, r2
 8007744:	9305      	str	r3, [sp, #20]
 8007746:	2300      	movs	r3, #0
 8007748:	9307      	str	r3, [sp, #28]
 800774a:	9b06      	ldr	r3, [sp, #24]
 800774c:	2b09      	cmp	r3, #9
 800774e:	f200 8089 	bhi.w	8007864 <_dtoa_r+0x2f4>
 8007752:	2b05      	cmp	r3, #5
 8007754:	bfc4      	itt	gt
 8007756:	3b04      	subgt	r3, #4
 8007758:	9306      	strgt	r3, [sp, #24]
 800775a:	9b06      	ldr	r3, [sp, #24]
 800775c:	f1a3 0302 	sub.w	r3, r3, #2
 8007760:	bfcc      	ite	gt
 8007762:	2500      	movgt	r5, #0
 8007764:	2501      	movle	r5, #1
 8007766:	2b03      	cmp	r3, #3
 8007768:	f200 8087 	bhi.w	800787a <_dtoa_r+0x30a>
 800776c:	e8df f003 	tbb	[pc, r3]
 8007770:	59383a2d 	.word	0x59383a2d
 8007774:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007778:	441d      	add	r5, r3
 800777a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800777e:	2b20      	cmp	r3, #32
 8007780:	bfc1      	itttt	gt
 8007782:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007786:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800778a:	fa0b f303 	lslgt.w	r3, fp, r3
 800778e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007792:	bfda      	itte	le
 8007794:	f1c3 0320 	rsble	r3, r3, #32
 8007798:	fa06 f003 	lslle.w	r0, r6, r3
 800779c:	4318      	orrgt	r0, r3
 800779e:	f7f8 fed1 	bl	8000544 <__aeabi_ui2d>
 80077a2:	2301      	movs	r3, #1
 80077a4:	4606      	mov	r6, r0
 80077a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80077aa:	3d01      	subs	r5, #1
 80077ac:	930e      	str	r3, [sp, #56]	; 0x38
 80077ae:	e76a      	b.n	8007686 <_dtoa_r+0x116>
 80077b0:	2301      	movs	r3, #1
 80077b2:	e7b2      	b.n	800771a <_dtoa_r+0x1aa>
 80077b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80077b6:	e7b1      	b.n	800771c <_dtoa_r+0x1ac>
 80077b8:	9b04      	ldr	r3, [sp, #16]
 80077ba:	9a00      	ldr	r2, [sp, #0]
 80077bc:	1a9b      	subs	r3, r3, r2
 80077be:	9304      	str	r3, [sp, #16]
 80077c0:	4253      	negs	r3, r2
 80077c2:	9307      	str	r3, [sp, #28]
 80077c4:	2300      	movs	r3, #0
 80077c6:	930a      	str	r3, [sp, #40]	; 0x28
 80077c8:	e7bf      	b.n	800774a <_dtoa_r+0x1da>
 80077ca:	2300      	movs	r3, #0
 80077cc:	9308      	str	r3, [sp, #32]
 80077ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	dc55      	bgt.n	8007880 <_dtoa_r+0x310>
 80077d4:	2301      	movs	r3, #1
 80077d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077da:	461a      	mov	r2, r3
 80077dc:	9209      	str	r2, [sp, #36]	; 0x24
 80077de:	e00c      	b.n	80077fa <_dtoa_r+0x28a>
 80077e0:	2301      	movs	r3, #1
 80077e2:	e7f3      	b.n	80077cc <_dtoa_r+0x25c>
 80077e4:	2300      	movs	r3, #0
 80077e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077e8:	9308      	str	r3, [sp, #32]
 80077ea:	9b00      	ldr	r3, [sp, #0]
 80077ec:	4413      	add	r3, r2
 80077ee:	9302      	str	r3, [sp, #8]
 80077f0:	3301      	adds	r3, #1
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	9303      	str	r3, [sp, #12]
 80077f6:	bfb8      	it	lt
 80077f8:	2301      	movlt	r3, #1
 80077fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80077fc:	2200      	movs	r2, #0
 80077fe:	6042      	str	r2, [r0, #4]
 8007800:	2204      	movs	r2, #4
 8007802:	f102 0614 	add.w	r6, r2, #20
 8007806:	429e      	cmp	r6, r3
 8007808:	6841      	ldr	r1, [r0, #4]
 800780a:	d93d      	bls.n	8007888 <_dtoa_r+0x318>
 800780c:	4620      	mov	r0, r4
 800780e:	f000 fed7 	bl	80085c0 <_Balloc>
 8007812:	9001      	str	r0, [sp, #4]
 8007814:	2800      	cmp	r0, #0
 8007816:	d13b      	bne.n	8007890 <_dtoa_r+0x320>
 8007818:	4b11      	ldr	r3, [pc, #68]	; (8007860 <_dtoa_r+0x2f0>)
 800781a:	4602      	mov	r2, r0
 800781c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007820:	e6c0      	b.n	80075a4 <_dtoa_r+0x34>
 8007822:	2301      	movs	r3, #1
 8007824:	e7df      	b.n	80077e6 <_dtoa_r+0x276>
 8007826:	bf00      	nop
 8007828:	636f4361 	.word	0x636f4361
 800782c:	3fd287a7 	.word	0x3fd287a7
 8007830:	8b60c8b3 	.word	0x8b60c8b3
 8007834:	3fc68a28 	.word	0x3fc68a28
 8007838:	509f79fb 	.word	0x509f79fb
 800783c:	3fd34413 	.word	0x3fd34413
 8007840:	0800b485 	.word	0x0800b485
 8007844:	0800b49c 	.word	0x0800b49c
 8007848:	7ff00000 	.word	0x7ff00000
 800784c:	0800b481 	.word	0x0800b481
 8007850:	0800b478 	.word	0x0800b478
 8007854:	0800b455 	.word	0x0800b455
 8007858:	3ff80000 	.word	0x3ff80000
 800785c:	0800b5f0 	.word	0x0800b5f0
 8007860:	0800b4f7 	.word	0x0800b4f7
 8007864:	2501      	movs	r5, #1
 8007866:	2300      	movs	r3, #0
 8007868:	9306      	str	r3, [sp, #24]
 800786a:	9508      	str	r5, [sp, #32]
 800786c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007870:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007874:	2200      	movs	r2, #0
 8007876:	2312      	movs	r3, #18
 8007878:	e7b0      	b.n	80077dc <_dtoa_r+0x26c>
 800787a:	2301      	movs	r3, #1
 800787c:	9308      	str	r3, [sp, #32]
 800787e:	e7f5      	b.n	800786c <_dtoa_r+0x2fc>
 8007880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007882:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007886:	e7b8      	b.n	80077fa <_dtoa_r+0x28a>
 8007888:	3101      	adds	r1, #1
 800788a:	6041      	str	r1, [r0, #4]
 800788c:	0052      	lsls	r2, r2, #1
 800788e:	e7b8      	b.n	8007802 <_dtoa_r+0x292>
 8007890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007892:	9a01      	ldr	r2, [sp, #4]
 8007894:	601a      	str	r2, [r3, #0]
 8007896:	9b03      	ldr	r3, [sp, #12]
 8007898:	2b0e      	cmp	r3, #14
 800789a:	f200 809d 	bhi.w	80079d8 <_dtoa_r+0x468>
 800789e:	2d00      	cmp	r5, #0
 80078a0:	f000 809a 	beq.w	80079d8 <_dtoa_r+0x468>
 80078a4:	9b00      	ldr	r3, [sp, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	dd32      	ble.n	8007910 <_dtoa_r+0x3a0>
 80078aa:	4ab7      	ldr	r2, [pc, #732]	; (8007b88 <_dtoa_r+0x618>)
 80078ac:	f003 030f 	and.w	r3, r3, #15
 80078b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80078b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078b8:	9b00      	ldr	r3, [sp, #0]
 80078ba:	05d8      	lsls	r0, r3, #23
 80078bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80078c0:	d516      	bpl.n	80078f0 <_dtoa_r+0x380>
 80078c2:	4bb2      	ldr	r3, [pc, #712]	; (8007b8c <_dtoa_r+0x61c>)
 80078c4:	ec51 0b19 	vmov	r0, r1, d9
 80078c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078cc:	f7f8 ffde 	bl	800088c <__aeabi_ddiv>
 80078d0:	f007 070f 	and.w	r7, r7, #15
 80078d4:	4682      	mov	sl, r0
 80078d6:	468b      	mov	fp, r1
 80078d8:	2503      	movs	r5, #3
 80078da:	4eac      	ldr	r6, [pc, #688]	; (8007b8c <_dtoa_r+0x61c>)
 80078dc:	b957      	cbnz	r7, 80078f4 <_dtoa_r+0x384>
 80078de:	4642      	mov	r2, r8
 80078e0:	464b      	mov	r3, r9
 80078e2:	4650      	mov	r0, sl
 80078e4:	4659      	mov	r1, fp
 80078e6:	f7f8 ffd1 	bl	800088c <__aeabi_ddiv>
 80078ea:	4682      	mov	sl, r0
 80078ec:	468b      	mov	fp, r1
 80078ee:	e028      	b.n	8007942 <_dtoa_r+0x3d2>
 80078f0:	2502      	movs	r5, #2
 80078f2:	e7f2      	b.n	80078da <_dtoa_r+0x36a>
 80078f4:	07f9      	lsls	r1, r7, #31
 80078f6:	d508      	bpl.n	800790a <_dtoa_r+0x39a>
 80078f8:	4640      	mov	r0, r8
 80078fa:	4649      	mov	r1, r9
 80078fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007900:	f7f8 fe9a 	bl	8000638 <__aeabi_dmul>
 8007904:	3501      	adds	r5, #1
 8007906:	4680      	mov	r8, r0
 8007908:	4689      	mov	r9, r1
 800790a:	107f      	asrs	r7, r7, #1
 800790c:	3608      	adds	r6, #8
 800790e:	e7e5      	b.n	80078dc <_dtoa_r+0x36c>
 8007910:	f000 809b 	beq.w	8007a4a <_dtoa_r+0x4da>
 8007914:	9b00      	ldr	r3, [sp, #0]
 8007916:	4f9d      	ldr	r7, [pc, #628]	; (8007b8c <_dtoa_r+0x61c>)
 8007918:	425e      	negs	r6, r3
 800791a:	4b9b      	ldr	r3, [pc, #620]	; (8007b88 <_dtoa_r+0x618>)
 800791c:	f006 020f 	and.w	r2, r6, #15
 8007920:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007928:	ec51 0b19 	vmov	r0, r1, d9
 800792c:	f7f8 fe84 	bl	8000638 <__aeabi_dmul>
 8007930:	1136      	asrs	r6, r6, #4
 8007932:	4682      	mov	sl, r0
 8007934:	468b      	mov	fp, r1
 8007936:	2300      	movs	r3, #0
 8007938:	2502      	movs	r5, #2
 800793a:	2e00      	cmp	r6, #0
 800793c:	d17a      	bne.n	8007a34 <_dtoa_r+0x4c4>
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1d3      	bne.n	80078ea <_dtoa_r+0x37a>
 8007942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 8082 	beq.w	8007a4e <_dtoa_r+0x4de>
 800794a:	4b91      	ldr	r3, [pc, #580]	; (8007b90 <_dtoa_r+0x620>)
 800794c:	2200      	movs	r2, #0
 800794e:	4650      	mov	r0, sl
 8007950:	4659      	mov	r1, fp
 8007952:	f7f9 f8e3 	bl	8000b1c <__aeabi_dcmplt>
 8007956:	2800      	cmp	r0, #0
 8007958:	d079      	beq.n	8007a4e <_dtoa_r+0x4de>
 800795a:	9b03      	ldr	r3, [sp, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d076      	beq.n	8007a4e <_dtoa_r+0x4de>
 8007960:	9b02      	ldr	r3, [sp, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	dd36      	ble.n	80079d4 <_dtoa_r+0x464>
 8007966:	9b00      	ldr	r3, [sp, #0]
 8007968:	4650      	mov	r0, sl
 800796a:	4659      	mov	r1, fp
 800796c:	1e5f      	subs	r7, r3, #1
 800796e:	2200      	movs	r2, #0
 8007970:	4b88      	ldr	r3, [pc, #544]	; (8007b94 <_dtoa_r+0x624>)
 8007972:	f7f8 fe61 	bl	8000638 <__aeabi_dmul>
 8007976:	9e02      	ldr	r6, [sp, #8]
 8007978:	4682      	mov	sl, r0
 800797a:	468b      	mov	fp, r1
 800797c:	3501      	adds	r5, #1
 800797e:	4628      	mov	r0, r5
 8007980:	f7f8 fdf0 	bl	8000564 <__aeabi_i2d>
 8007984:	4652      	mov	r2, sl
 8007986:	465b      	mov	r3, fp
 8007988:	f7f8 fe56 	bl	8000638 <__aeabi_dmul>
 800798c:	4b82      	ldr	r3, [pc, #520]	; (8007b98 <_dtoa_r+0x628>)
 800798e:	2200      	movs	r2, #0
 8007990:	f7f8 fc9c 	bl	80002cc <__adddf3>
 8007994:	46d0      	mov	r8, sl
 8007996:	46d9      	mov	r9, fp
 8007998:	4682      	mov	sl, r0
 800799a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800799e:	2e00      	cmp	r6, #0
 80079a0:	d158      	bne.n	8007a54 <_dtoa_r+0x4e4>
 80079a2:	4b7e      	ldr	r3, [pc, #504]	; (8007b9c <_dtoa_r+0x62c>)
 80079a4:	2200      	movs	r2, #0
 80079a6:	4640      	mov	r0, r8
 80079a8:	4649      	mov	r1, r9
 80079aa:	f7f8 fc8d 	bl	80002c8 <__aeabi_dsub>
 80079ae:	4652      	mov	r2, sl
 80079b0:	465b      	mov	r3, fp
 80079b2:	4680      	mov	r8, r0
 80079b4:	4689      	mov	r9, r1
 80079b6:	f7f9 f8cf 	bl	8000b58 <__aeabi_dcmpgt>
 80079ba:	2800      	cmp	r0, #0
 80079bc:	f040 8295 	bne.w	8007eea <_dtoa_r+0x97a>
 80079c0:	4652      	mov	r2, sl
 80079c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80079c6:	4640      	mov	r0, r8
 80079c8:	4649      	mov	r1, r9
 80079ca:	f7f9 f8a7 	bl	8000b1c <__aeabi_dcmplt>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	f040 8289 	bne.w	8007ee6 <_dtoa_r+0x976>
 80079d4:	ec5b ab19 	vmov	sl, fp, d9
 80079d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f2c0 8148 	blt.w	8007c70 <_dtoa_r+0x700>
 80079e0:	9a00      	ldr	r2, [sp, #0]
 80079e2:	2a0e      	cmp	r2, #14
 80079e4:	f300 8144 	bgt.w	8007c70 <_dtoa_r+0x700>
 80079e8:	4b67      	ldr	r3, [pc, #412]	; (8007b88 <_dtoa_r+0x618>)
 80079ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f280 80d5 	bge.w	8007ba4 <_dtoa_r+0x634>
 80079fa:	9b03      	ldr	r3, [sp, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f300 80d1 	bgt.w	8007ba4 <_dtoa_r+0x634>
 8007a02:	f040 826f 	bne.w	8007ee4 <_dtoa_r+0x974>
 8007a06:	4b65      	ldr	r3, [pc, #404]	; (8007b9c <_dtoa_r+0x62c>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	4649      	mov	r1, r9
 8007a0e:	f7f8 fe13 	bl	8000638 <__aeabi_dmul>
 8007a12:	4652      	mov	r2, sl
 8007a14:	465b      	mov	r3, fp
 8007a16:	f7f9 f895 	bl	8000b44 <__aeabi_dcmpge>
 8007a1a:	9e03      	ldr	r6, [sp, #12]
 8007a1c:	4637      	mov	r7, r6
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	f040 8245 	bne.w	8007eae <_dtoa_r+0x93e>
 8007a24:	9d01      	ldr	r5, [sp, #4]
 8007a26:	2331      	movs	r3, #49	; 0x31
 8007a28:	f805 3b01 	strb.w	r3, [r5], #1
 8007a2c:	9b00      	ldr	r3, [sp, #0]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	e240      	b.n	8007eb6 <_dtoa_r+0x946>
 8007a34:	07f2      	lsls	r2, r6, #31
 8007a36:	d505      	bpl.n	8007a44 <_dtoa_r+0x4d4>
 8007a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a3c:	f7f8 fdfc 	bl	8000638 <__aeabi_dmul>
 8007a40:	3501      	adds	r5, #1
 8007a42:	2301      	movs	r3, #1
 8007a44:	1076      	asrs	r6, r6, #1
 8007a46:	3708      	adds	r7, #8
 8007a48:	e777      	b.n	800793a <_dtoa_r+0x3ca>
 8007a4a:	2502      	movs	r5, #2
 8007a4c:	e779      	b.n	8007942 <_dtoa_r+0x3d2>
 8007a4e:	9f00      	ldr	r7, [sp, #0]
 8007a50:	9e03      	ldr	r6, [sp, #12]
 8007a52:	e794      	b.n	800797e <_dtoa_r+0x40e>
 8007a54:	9901      	ldr	r1, [sp, #4]
 8007a56:	4b4c      	ldr	r3, [pc, #304]	; (8007b88 <_dtoa_r+0x618>)
 8007a58:	4431      	add	r1, r6
 8007a5a:	910d      	str	r1, [sp, #52]	; 0x34
 8007a5c:	9908      	ldr	r1, [sp, #32]
 8007a5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007a62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a66:	2900      	cmp	r1, #0
 8007a68:	d043      	beq.n	8007af2 <_dtoa_r+0x582>
 8007a6a:	494d      	ldr	r1, [pc, #308]	; (8007ba0 <_dtoa_r+0x630>)
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	f7f8 ff0d 	bl	800088c <__aeabi_ddiv>
 8007a72:	4652      	mov	r2, sl
 8007a74:	465b      	mov	r3, fp
 8007a76:	f7f8 fc27 	bl	80002c8 <__aeabi_dsub>
 8007a7a:	9d01      	ldr	r5, [sp, #4]
 8007a7c:	4682      	mov	sl, r0
 8007a7e:	468b      	mov	fp, r1
 8007a80:	4649      	mov	r1, r9
 8007a82:	4640      	mov	r0, r8
 8007a84:	f7f9 f888 	bl	8000b98 <__aeabi_d2iz>
 8007a88:	4606      	mov	r6, r0
 8007a8a:	f7f8 fd6b 	bl	8000564 <__aeabi_i2d>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	460b      	mov	r3, r1
 8007a92:	4640      	mov	r0, r8
 8007a94:	4649      	mov	r1, r9
 8007a96:	f7f8 fc17 	bl	80002c8 <__aeabi_dsub>
 8007a9a:	3630      	adds	r6, #48	; 0x30
 8007a9c:	f805 6b01 	strb.w	r6, [r5], #1
 8007aa0:	4652      	mov	r2, sl
 8007aa2:	465b      	mov	r3, fp
 8007aa4:	4680      	mov	r8, r0
 8007aa6:	4689      	mov	r9, r1
 8007aa8:	f7f9 f838 	bl	8000b1c <__aeabi_dcmplt>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d163      	bne.n	8007b78 <_dtoa_r+0x608>
 8007ab0:	4642      	mov	r2, r8
 8007ab2:	464b      	mov	r3, r9
 8007ab4:	4936      	ldr	r1, [pc, #216]	; (8007b90 <_dtoa_r+0x620>)
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	f7f8 fc06 	bl	80002c8 <__aeabi_dsub>
 8007abc:	4652      	mov	r2, sl
 8007abe:	465b      	mov	r3, fp
 8007ac0:	f7f9 f82c 	bl	8000b1c <__aeabi_dcmplt>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	f040 80b5 	bne.w	8007c34 <_dtoa_r+0x6c4>
 8007aca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007acc:	429d      	cmp	r5, r3
 8007ace:	d081      	beq.n	80079d4 <_dtoa_r+0x464>
 8007ad0:	4b30      	ldr	r3, [pc, #192]	; (8007b94 <_dtoa_r+0x624>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	4650      	mov	r0, sl
 8007ad6:	4659      	mov	r1, fp
 8007ad8:	f7f8 fdae 	bl	8000638 <__aeabi_dmul>
 8007adc:	4b2d      	ldr	r3, [pc, #180]	; (8007b94 <_dtoa_r+0x624>)
 8007ade:	4682      	mov	sl, r0
 8007ae0:	468b      	mov	fp, r1
 8007ae2:	4640      	mov	r0, r8
 8007ae4:	4649      	mov	r1, r9
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f7f8 fda6 	bl	8000638 <__aeabi_dmul>
 8007aec:	4680      	mov	r8, r0
 8007aee:	4689      	mov	r9, r1
 8007af0:	e7c6      	b.n	8007a80 <_dtoa_r+0x510>
 8007af2:	4650      	mov	r0, sl
 8007af4:	4659      	mov	r1, fp
 8007af6:	f7f8 fd9f 	bl	8000638 <__aeabi_dmul>
 8007afa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007afc:	9d01      	ldr	r5, [sp, #4]
 8007afe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b00:	4682      	mov	sl, r0
 8007b02:	468b      	mov	fp, r1
 8007b04:	4649      	mov	r1, r9
 8007b06:	4640      	mov	r0, r8
 8007b08:	f7f9 f846 	bl	8000b98 <__aeabi_d2iz>
 8007b0c:	4606      	mov	r6, r0
 8007b0e:	f7f8 fd29 	bl	8000564 <__aeabi_i2d>
 8007b12:	3630      	adds	r6, #48	; 0x30
 8007b14:	4602      	mov	r2, r0
 8007b16:	460b      	mov	r3, r1
 8007b18:	4640      	mov	r0, r8
 8007b1a:	4649      	mov	r1, r9
 8007b1c:	f7f8 fbd4 	bl	80002c8 <__aeabi_dsub>
 8007b20:	f805 6b01 	strb.w	r6, [r5], #1
 8007b24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b26:	429d      	cmp	r5, r3
 8007b28:	4680      	mov	r8, r0
 8007b2a:	4689      	mov	r9, r1
 8007b2c:	f04f 0200 	mov.w	r2, #0
 8007b30:	d124      	bne.n	8007b7c <_dtoa_r+0x60c>
 8007b32:	4b1b      	ldr	r3, [pc, #108]	; (8007ba0 <_dtoa_r+0x630>)
 8007b34:	4650      	mov	r0, sl
 8007b36:	4659      	mov	r1, fp
 8007b38:	f7f8 fbc8 	bl	80002cc <__adddf3>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4640      	mov	r0, r8
 8007b42:	4649      	mov	r1, r9
 8007b44:	f7f9 f808 	bl	8000b58 <__aeabi_dcmpgt>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d173      	bne.n	8007c34 <_dtoa_r+0x6c4>
 8007b4c:	4652      	mov	r2, sl
 8007b4e:	465b      	mov	r3, fp
 8007b50:	4913      	ldr	r1, [pc, #76]	; (8007ba0 <_dtoa_r+0x630>)
 8007b52:	2000      	movs	r0, #0
 8007b54:	f7f8 fbb8 	bl	80002c8 <__aeabi_dsub>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	4640      	mov	r0, r8
 8007b5e:	4649      	mov	r1, r9
 8007b60:	f7f8 ffdc 	bl	8000b1c <__aeabi_dcmplt>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	f43f af35 	beq.w	80079d4 <_dtoa_r+0x464>
 8007b6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007b6c:	1e6b      	subs	r3, r5, #1
 8007b6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b74:	2b30      	cmp	r3, #48	; 0x30
 8007b76:	d0f8      	beq.n	8007b6a <_dtoa_r+0x5fa>
 8007b78:	9700      	str	r7, [sp, #0]
 8007b7a:	e049      	b.n	8007c10 <_dtoa_r+0x6a0>
 8007b7c:	4b05      	ldr	r3, [pc, #20]	; (8007b94 <_dtoa_r+0x624>)
 8007b7e:	f7f8 fd5b 	bl	8000638 <__aeabi_dmul>
 8007b82:	4680      	mov	r8, r0
 8007b84:	4689      	mov	r9, r1
 8007b86:	e7bd      	b.n	8007b04 <_dtoa_r+0x594>
 8007b88:	0800b5f0 	.word	0x0800b5f0
 8007b8c:	0800b5c8 	.word	0x0800b5c8
 8007b90:	3ff00000 	.word	0x3ff00000
 8007b94:	40240000 	.word	0x40240000
 8007b98:	401c0000 	.word	0x401c0000
 8007b9c:	40140000 	.word	0x40140000
 8007ba0:	3fe00000 	.word	0x3fe00000
 8007ba4:	9d01      	ldr	r5, [sp, #4]
 8007ba6:	4656      	mov	r6, sl
 8007ba8:	465f      	mov	r7, fp
 8007baa:	4642      	mov	r2, r8
 8007bac:	464b      	mov	r3, r9
 8007bae:	4630      	mov	r0, r6
 8007bb0:	4639      	mov	r1, r7
 8007bb2:	f7f8 fe6b 	bl	800088c <__aeabi_ddiv>
 8007bb6:	f7f8 ffef 	bl	8000b98 <__aeabi_d2iz>
 8007bba:	4682      	mov	sl, r0
 8007bbc:	f7f8 fcd2 	bl	8000564 <__aeabi_i2d>
 8007bc0:	4642      	mov	r2, r8
 8007bc2:	464b      	mov	r3, r9
 8007bc4:	f7f8 fd38 	bl	8000638 <__aeabi_dmul>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4630      	mov	r0, r6
 8007bce:	4639      	mov	r1, r7
 8007bd0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007bd4:	f7f8 fb78 	bl	80002c8 <__aeabi_dsub>
 8007bd8:	f805 6b01 	strb.w	r6, [r5], #1
 8007bdc:	9e01      	ldr	r6, [sp, #4]
 8007bde:	9f03      	ldr	r7, [sp, #12]
 8007be0:	1bae      	subs	r6, r5, r6
 8007be2:	42b7      	cmp	r7, r6
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	d135      	bne.n	8007c56 <_dtoa_r+0x6e6>
 8007bea:	f7f8 fb6f 	bl	80002cc <__adddf3>
 8007bee:	4642      	mov	r2, r8
 8007bf0:	464b      	mov	r3, r9
 8007bf2:	4606      	mov	r6, r0
 8007bf4:	460f      	mov	r7, r1
 8007bf6:	f7f8 ffaf 	bl	8000b58 <__aeabi_dcmpgt>
 8007bfa:	b9d0      	cbnz	r0, 8007c32 <_dtoa_r+0x6c2>
 8007bfc:	4642      	mov	r2, r8
 8007bfe:	464b      	mov	r3, r9
 8007c00:	4630      	mov	r0, r6
 8007c02:	4639      	mov	r1, r7
 8007c04:	f7f8 ff80 	bl	8000b08 <__aeabi_dcmpeq>
 8007c08:	b110      	cbz	r0, 8007c10 <_dtoa_r+0x6a0>
 8007c0a:	f01a 0f01 	tst.w	sl, #1
 8007c0e:	d110      	bne.n	8007c32 <_dtoa_r+0x6c2>
 8007c10:	4620      	mov	r0, r4
 8007c12:	ee18 1a10 	vmov	r1, s16
 8007c16:	f000 fd13 	bl	8008640 <_Bfree>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	9800      	ldr	r0, [sp, #0]
 8007c1e:	702b      	strb	r3, [r5, #0]
 8007c20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c22:	3001      	adds	r0, #1
 8007c24:	6018      	str	r0, [r3, #0]
 8007c26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f43f acf1 	beq.w	8007610 <_dtoa_r+0xa0>
 8007c2e:	601d      	str	r5, [r3, #0]
 8007c30:	e4ee      	b.n	8007610 <_dtoa_r+0xa0>
 8007c32:	9f00      	ldr	r7, [sp, #0]
 8007c34:	462b      	mov	r3, r5
 8007c36:	461d      	mov	r5, r3
 8007c38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c3c:	2a39      	cmp	r2, #57	; 0x39
 8007c3e:	d106      	bne.n	8007c4e <_dtoa_r+0x6de>
 8007c40:	9a01      	ldr	r2, [sp, #4]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d1f7      	bne.n	8007c36 <_dtoa_r+0x6c6>
 8007c46:	9901      	ldr	r1, [sp, #4]
 8007c48:	2230      	movs	r2, #48	; 0x30
 8007c4a:	3701      	adds	r7, #1
 8007c4c:	700a      	strb	r2, [r1, #0]
 8007c4e:	781a      	ldrb	r2, [r3, #0]
 8007c50:	3201      	adds	r2, #1
 8007c52:	701a      	strb	r2, [r3, #0]
 8007c54:	e790      	b.n	8007b78 <_dtoa_r+0x608>
 8007c56:	4ba6      	ldr	r3, [pc, #664]	; (8007ef0 <_dtoa_r+0x980>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f7f8 fced 	bl	8000638 <__aeabi_dmul>
 8007c5e:	2200      	movs	r2, #0
 8007c60:	2300      	movs	r3, #0
 8007c62:	4606      	mov	r6, r0
 8007c64:	460f      	mov	r7, r1
 8007c66:	f7f8 ff4f 	bl	8000b08 <__aeabi_dcmpeq>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	d09d      	beq.n	8007baa <_dtoa_r+0x63a>
 8007c6e:	e7cf      	b.n	8007c10 <_dtoa_r+0x6a0>
 8007c70:	9a08      	ldr	r2, [sp, #32]
 8007c72:	2a00      	cmp	r2, #0
 8007c74:	f000 80d7 	beq.w	8007e26 <_dtoa_r+0x8b6>
 8007c78:	9a06      	ldr	r2, [sp, #24]
 8007c7a:	2a01      	cmp	r2, #1
 8007c7c:	f300 80ba 	bgt.w	8007df4 <_dtoa_r+0x884>
 8007c80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c82:	2a00      	cmp	r2, #0
 8007c84:	f000 80b2 	beq.w	8007dec <_dtoa_r+0x87c>
 8007c88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c8c:	9e07      	ldr	r6, [sp, #28]
 8007c8e:	9d04      	ldr	r5, [sp, #16]
 8007c90:	9a04      	ldr	r2, [sp, #16]
 8007c92:	441a      	add	r2, r3
 8007c94:	9204      	str	r2, [sp, #16]
 8007c96:	9a05      	ldr	r2, [sp, #20]
 8007c98:	2101      	movs	r1, #1
 8007c9a:	441a      	add	r2, r3
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	9205      	str	r2, [sp, #20]
 8007ca0:	f000 fd86 	bl	80087b0 <__i2b>
 8007ca4:	4607      	mov	r7, r0
 8007ca6:	2d00      	cmp	r5, #0
 8007ca8:	dd0c      	ble.n	8007cc4 <_dtoa_r+0x754>
 8007caa:	9b05      	ldr	r3, [sp, #20]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	dd09      	ble.n	8007cc4 <_dtoa_r+0x754>
 8007cb0:	42ab      	cmp	r3, r5
 8007cb2:	9a04      	ldr	r2, [sp, #16]
 8007cb4:	bfa8      	it	ge
 8007cb6:	462b      	movge	r3, r5
 8007cb8:	1ad2      	subs	r2, r2, r3
 8007cba:	9204      	str	r2, [sp, #16]
 8007cbc:	9a05      	ldr	r2, [sp, #20]
 8007cbe:	1aed      	subs	r5, r5, r3
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	9305      	str	r3, [sp, #20]
 8007cc4:	9b07      	ldr	r3, [sp, #28]
 8007cc6:	b31b      	cbz	r3, 8007d10 <_dtoa_r+0x7a0>
 8007cc8:	9b08      	ldr	r3, [sp, #32]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 80af 	beq.w	8007e2e <_dtoa_r+0x8be>
 8007cd0:	2e00      	cmp	r6, #0
 8007cd2:	dd13      	ble.n	8007cfc <_dtoa_r+0x78c>
 8007cd4:	4639      	mov	r1, r7
 8007cd6:	4632      	mov	r2, r6
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f000 fe29 	bl	8008930 <__pow5mult>
 8007cde:	ee18 2a10 	vmov	r2, s16
 8007ce2:	4601      	mov	r1, r0
 8007ce4:	4607      	mov	r7, r0
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f000 fd78 	bl	80087dc <__multiply>
 8007cec:	ee18 1a10 	vmov	r1, s16
 8007cf0:	4680      	mov	r8, r0
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f000 fca4 	bl	8008640 <_Bfree>
 8007cf8:	ee08 8a10 	vmov	s16, r8
 8007cfc:	9b07      	ldr	r3, [sp, #28]
 8007cfe:	1b9a      	subs	r2, r3, r6
 8007d00:	d006      	beq.n	8007d10 <_dtoa_r+0x7a0>
 8007d02:	ee18 1a10 	vmov	r1, s16
 8007d06:	4620      	mov	r0, r4
 8007d08:	f000 fe12 	bl	8008930 <__pow5mult>
 8007d0c:	ee08 0a10 	vmov	s16, r0
 8007d10:	2101      	movs	r1, #1
 8007d12:	4620      	mov	r0, r4
 8007d14:	f000 fd4c 	bl	80087b0 <__i2b>
 8007d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	4606      	mov	r6, r0
 8007d1e:	f340 8088 	ble.w	8007e32 <_dtoa_r+0x8c2>
 8007d22:	461a      	mov	r2, r3
 8007d24:	4601      	mov	r1, r0
 8007d26:	4620      	mov	r0, r4
 8007d28:	f000 fe02 	bl	8008930 <__pow5mult>
 8007d2c:	9b06      	ldr	r3, [sp, #24]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	4606      	mov	r6, r0
 8007d32:	f340 8081 	ble.w	8007e38 <_dtoa_r+0x8c8>
 8007d36:	f04f 0800 	mov.w	r8, #0
 8007d3a:	6933      	ldr	r3, [r6, #16]
 8007d3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d40:	6918      	ldr	r0, [r3, #16]
 8007d42:	f000 fce5 	bl	8008710 <__hi0bits>
 8007d46:	f1c0 0020 	rsb	r0, r0, #32
 8007d4a:	9b05      	ldr	r3, [sp, #20]
 8007d4c:	4418      	add	r0, r3
 8007d4e:	f010 001f 	ands.w	r0, r0, #31
 8007d52:	f000 8092 	beq.w	8007e7a <_dtoa_r+0x90a>
 8007d56:	f1c0 0320 	rsb	r3, r0, #32
 8007d5a:	2b04      	cmp	r3, #4
 8007d5c:	f340 808a 	ble.w	8007e74 <_dtoa_r+0x904>
 8007d60:	f1c0 001c 	rsb	r0, r0, #28
 8007d64:	9b04      	ldr	r3, [sp, #16]
 8007d66:	4403      	add	r3, r0
 8007d68:	9304      	str	r3, [sp, #16]
 8007d6a:	9b05      	ldr	r3, [sp, #20]
 8007d6c:	4403      	add	r3, r0
 8007d6e:	4405      	add	r5, r0
 8007d70:	9305      	str	r3, [sp, #20]
 8007d72:	9b04      	ldr	r3, [sp, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	dd07      	ble.n	8007d88 <_dtoa_r+0x818>
 8007d78:	ee18 1a10 	vmov	r1, s16
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f000 fe30 	bl	80089e4 <__lshift>
 8007d84:	ee08 0a10 	vmov	s16, r0
 8007d88:	9b05      	ldr	r3, [sp, #20]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	dd05      	ble.n	8007d9a <_dtoa_r+0x82a>
 8007d8e:	4631      	mov	r1, r6
 8007d90:	461a      	mov	r2, r3
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 fe26 	bl	80089e4 <__lshift>
 8007d98:	4606      	mov	r6, r0
 8007d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d06e      	beq.n	8007e7e <_dtoa_r+0x90e>
 8007da0:	ee18 0a10 	vmov	r0, s16
 8007da4:	4631      	mov	r1, r6
 8007da6:	f000 fe8d 	bl	8008ac4 <__mcmp>
 8007daa:	2800      	cmp	r0, #0
 8007dac:	da67      	bge.n	8007e7e <_dtoa_r+0x90e>
 8007dae:	9b00      	ldr	r3, [sp, #0]
 8007db0:	3b01      	subs	r3, #1
 8007db2:	ee18 1a10 	vmov	r1, s16
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	220a      	movs	r2, #10
 8007dba:	2300      	movs	r3, #0
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f000 fc61 	bl	8008684 <__multadd>
 8007dc2:	9b08      	ldr	r3, [sp, #32]
 8007dc4:	ee08 0a10 	vmov	s16, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 81b1 	beq.w	8008130 <_dtoa_r+0xbc0>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	4639      	mov	r1, r7
 8007dd2:	220a      	movs	r2, #10
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f000 fc55 	bl	8008684 <__multadd>
 8007dda:	9b02      	ldr	r3, [sp, #8]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	4607      	mov	r7, r0
 8007de0:	f300 808e 	bgt.w	8007f00 <_dtoa_r+0x990>
 8007de4:	9b06      	ldr	r3, [sp, #24]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	dc51      	bgt.n	8007e8e <_dtoa_r+0x91e>
 8007dea:	e089      	b.n	8007f00 <_dtoa_r+0x990>
 8007dec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007df2:	e74b      	b.n	8007c8c <_dtoa_r+0x71c>
 8007df4:	9b03      	ldr	r3, [sp, #12]
 8007df6:	1e5e      	subs	r6, r3, #1
 8007df8:	9b07      	ldr	r3, [sp, #28]
 8007dfa:	42b3      	cmp	r3, r6
 8007dfc:	bfbf      	itttt	lt
 8007dfe:	9b07      	ldrlt	r3, [sp, #28]
 8007e00:	9607      	strlt	r6, [sp, #28]
 8007e02:	1af2      	sublt	r2, r6, r3
 8007e04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007e06:	bfb6      	itet	lt
 8007e08:	189b      	addlt	r3, r3, r2
 8007e0a:	1b9e      	subge	r6, r3, r6
 8007e0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007e0e:	9b03      	ldr	r3, [sp, #12]
 8007e10:	bfb8      	it	lt
 8007e12:	2600      	movlt	r6, #0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	bfb7      	itett	lt
 8007e18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007e1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007e20:	1a9d      	sublt	r5, r3, r2
 8007e22:	2300      	movlt	r3, #0
 8007e24:	e734      	b.n	8007c90 <_dtoa_r+0x720>
 8007e26:	9e07      	ldr	r6, [sp, #28]
 8007e28:	9d04      	ldr	r5, [sp, #16]
 8007e2a:	9f08      	ldr	r7, [sp, #32]
 8007e2c:	e73b      	b.n	8007ca6 <_dtoa_r+0x736>
 8007e2e:	9a07      	ldr	r2, [sp, #28]
 8007e30:	e767      	b.n	8007d02 <_dtoa_r+0x792>
 8007e32:	9b06      	ldr	r3, [sp, #24]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	dc18      	bgt.n	8007e6a <_dtoa_r+0x8fa>
 8007e38:	f1ba 0f00 	cmp.w	sl, #0
 8007e3c:	d115      	bne.n	8007e6a <_dtoa_r+0x8fa>
 8007e3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e42:	b993      	cbnz	r3, 8007e6a <_dtoa_r+0x8fa>
 8007e44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e48:	0d1b      	lsrs	r3, r3, #20
 8007e4a:	051b      	lsls	r3, r3, #20
 8007e4c:	b183      	cbz	r3, 8007e70 <_dtoa_r+0x900>
 8007e4e:	9b04      	ldr	r3, [sp, #16]
 8007e50:	3301      	adds	r3, #1
 8007e52:	9304      	str	r3, [sp, #16]
 8007e54:	9b05      	ldr	r3, [sp, #20]
 8007e56:	3301      	adds	r3, #1
 8007e58:	9305      	str	r3, [sp, #20]
 8007e5a:	f04f 0801 	mov.w	r8, #1
 8007e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f47f af6a 	bne.w	8007d3a <_dtoa_r+0x7ca>
 8007e66:	2001      	movs	r0, #1
 8007e68:	e76f      	b.n	8007d4a <_dtoa_r+0x7da>
 8007e6a:	f04f 0800 	mov.w	r8, #0
 8007e6e:	e7f6      	b.n	8007e5e <_dtoa_r+0x8ee>
 8007e70:	4698      	mov	r8, r3
 8007e72:	e7f4      	b.n	8007e5e <_dtoa_r+0x8ee>
 8007e74:	f43f af7d 	beq.w	8007d72 <_dtoa_r+0x802>
 8007e78:	4618      	mov	r0, r3
 8007e7a:	301c      	adds	r0, #28
 8007e7c:	e772      	b.n	8007d64 <_dtoa_r+0x7f4>
 8007e7e:	9b03      	ldr	r3, [sp, #12]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	dc37      	bgt.n	8007ef4 <_dtoa_r+0x984>
 8007e84:	9b06      	ldr	r3, [sp, #24]
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	dd34      	ble.n	8007ef4 <_dtoa_r+0x984>
 8007e8a:	9b03      	ldr	r3, [sp, #12]
 8007e8c:	9302      	str	r3, [sp, #8]
 8007e8e:	9b02      	ldr	r3, [sp, #8]
 8007e90:	b96b      	cbnz	r3, 8007eae <_dtoa_r+0x93e>
 8007e92:	4631      	mov	r1, r6
 8007e94:	2205      	movs	r2, #5
 8007e96:	4620      	mov	r0, r4
 8007e98:	f000 fbf4 	bl	8008684 <__multadd>
 8007e9c:	4601      	mov	r1, r0
 8007e9e:	4606      	mov	r6, r0
 8007ea0:	ee18 0a10 	vmov	r0, s16
 8007ea4:	f000 fe0e 	bl	8008ac4 <__mcmp>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	f73f adbb 	bgt.w	8007a24 <_dtoa_r+0x4b4>
 8007eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eb0:	9d01      	ldr	r5, [sp, #4]
 8007eb2:	43db      	mvns	r3, r3
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	f04f 0800 	mov.w	r8, #0
 8007eba:	4631      	mov	r1, r6
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f000 fbbf 	bl	8008640 <_Bfree>
 8007ec2:	2f00      	cmp	r7, #0
 8007ec4:	f43f aea4 	beq.w	8007c10 <_dtoa_r+0x6a0>
 8007ec8:	f1b8 0f00 	cmp.w	r8, #0
 8007ecc:	d005      	beq.n	8007eda <_dtoa_r+0x96a>
 8007ece:	45b8      	cmp	r8, r7
 8007ed0:	d003      	beq.n	8007eda <_dtoa_r+0x96a>
 8007ed2:	4641      	mov	r1, r8
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f000 fbb3 	bl	8008640 <_Bfree>
 8007eda:	4639      	mov	r1, r7
 8007edc:	4620      	mov	r0, r4
 8007ede:	f000 fbaf 	bl	8008640 <_Bfree>
 8007ee2:	e695      	b.n	8007c10 <_dtoa_r+0x6a0>
 8007ee4:	2600      	movs	r6, #0
 8007ee6:	4637      	mov	r7, r6
 8007ee8:	e7e1      	b.n	8007eae <_dtoa_r+0x93e>
 8007eea:	9700      	str	r7, [sp, #0]
 8007eec:	4637      	mov	r7, r6
 8007eee:	e599      	b.n	8007a24 <_dtoa_r+0x4b4>
 8007ef0:	40240000 	.word	0x40240000
 8007ef4:	9b08      	ldr	r3, [sp, #32]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f000 80ca 	beq.w	8008090 <_dtoa_r+0xb20>
 8007efc:	9b03      	ldr	r3, [sp, #12]
 8007efe:	9302      	str	r3, [sp, #8]
 8007f00:	2d00      	cmp	r5, #0
 8007f02:	dd05      	ble.n	8007f10 <_dtoa_r+0x9a0>
 8007f04:	4639      	mov	r1, r7
 8007f06:	462a      	mov	r2, r5
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f000 fd6b 	bl	80089e4 <__lshift>
 8007f0e:	4607      	mov	r7, r0
 8007f10:	f1b8 0f00 	cmp.w	r8, #0
 8007f14:	d05b      	beq.n	8007fce <_dtoa_r+0xa5e>
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f000 fb51 	bl	80085c0 <_Balloc>
 8007f1e:	4605      	mov	r5, r0
 8007f20:	b928      	cbnz	r0, 8007f2e <_dtoa_r+0x9be>
 8007f22:	4b87      	ldr	r3, [pc, #540]	; (8008140 <_dtoa_r+0xbd0>)
 8007f24:	4602      	mov	r2, r0
 8007f26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007f2a:	f7ff bb3b 	b.w	80075a4 <_dtoa_r+0x34>
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	3202      	adds	r2, #2
 8007f32:	0092      	lsls	r2, r2, #2
 8007f34:	f107 010c 	add.w	r1, r7, #12
 8007f38:	300c      	adds	r0, #12
 8007f3a:	f000 fb33 	bl	80085a4 <memcpy>
 8007f3e:	2201      	movs	r2, #1
 8007f40:	4629      	mov	r1, r5
 8007f42:	4620      	mov	r0, r4
 8007f44:	f000 fd4e 	bl	80089e4 <__lshift>
 8007f48:	9b01      	ldr	r3, [sp, #4]
 8007f4a:	f103 0901 	add.w	r9, r3, #1
 8007f4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007f52:	4413      	add	r3, r2
 8007f54:	9305      	str	r3, [sp, #20]
 8007f56:	f00a 0301 	and.w	r3, sl, #1
 8007f5a:	46b8      	mov	r8, r7
 8007f5c:	9304      	str	r3, [sp, #16]
 8007f5e:	4607      	mov	r7, r0
 8007f60:	4631      	mov	r1, r6
 8007f62:	ee18 0a10 	vmov	r0, s16
 8007f66:	f7ff fa75 	bl	8007454 <quorem>
 8007f6a:	4641      	mov	r1, r8
 8007f6c:	9002      	str	r0, [sp, #8]
 8007f6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007f72:	ee18 0a10 	vmov	r0, s16
 8007f76:	f000 fda5 	bl	8008ac4 <__mcmp>
 8007f7a:	463a      	mov	r2, r7
 8007f7c:	9003      	str	r0, [sp, #12]
 8007f7e:	4631      	mov	r1, r6
 8007f80:	4620      	mov	r0, r4
 8007f82:	f000 fdbb 	bl	8008afc <__mdiff>
 8007f86:	68c2      	ldr	r2, [r0, #12]
 8007f88:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007f8c:	4605      	mov	r5, r0
 8007f8e:	bb02      	cbnz	r2, 8007fd2 <_dtoa_r+0xa62>
 8007f90:	4601      	mov	r1, r0
 8007f92:	ee18 0a10 	vmov	r0, s16
 8007f96:	f000 fd95 	bl	8008ac4 <__mcmp>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	9207      	str	r2, [sp, #28]
 8007fa2:	f000 fb4d 	bl	8008640 <_Bfree>
 8007fa6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007faa:	ea43 0102 	orr.w	r1, r3, r2
 8007fae:	9b04      	ldr	r3, [sp, #16]
 8007fb0:	430b      	orrs	r3, r1
 8007fb2:	464d      	mov	r5, r9
 8007fb4:	d10f      	bne.n	8007fd6 <_dtoa_r+0xa66>
 8007fb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007fba:	d02a      	beq.n	8008012 <_dtoa_r+0xaa2>
 8007fbc:	9b03      	ldr	r3, [sp, #12]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	dd02      	ble.n	8007fc8 <_dtoa_r+0xa58>
 8007fc2:	9b02      	ldr	r3, [sp, #8]
 8007fc4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007fc8:	f88b a000 	strb.w	sl, [fp]
 8007fcc:	e775      	b.n	8007eba <_dtoa_r+0x94a>
 8007fce:	4638      	mov	r0, r7
 8007fd0:	e7ba      	b.n	8007f48 <_dtoa_r+0x9d8>
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	e7e2      	b.n	8007f9c <_dtoa_r+0xa2c>
 8007fd6:	9b03      	ldr	r3, [sp, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	db04      	blt.n	8007fe6 <_dtoa_r+0xa76>
 8007fdc:	9906      	ldr	r1, [sp, #24]
 8007fde:	430b      	orrs	r3, r1
 8007fe0:	9904      	ldr	r1, [sp, #16]
 8007fe2:	430b      	orrs	r3, r1
 8007fe4:	d122      	bne.n	800802c <_dtoa_r+0xabc>
 8007fe6:	2a00      	cmp	r2, #0
 8007fe8:	ddee      	ble.n	8007fc8 <_dtoa_r+0xa58>
 8007fea:	ee18 1a10 	vmov	r1, s16
 8007fee:	2201      	movs	r2, #1
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f000 fcf7 	bl	80089e4 <__lshift>
 8007ff6:	4631      	mov	r1, r6
 8007ff8:	ee08 0a10 	vmov	s16, r0
 8007ffc:	f000 fd62 	bl	8008ac4 <__mcmp>
 8008000:	2800      	cmp	r0, #0
 8008002:	dc03      	bgt.n	800800c <_dtoa_r+0xa9c>
 8008004:	d1e0      	bne.n	8007fc8 <_dtoa_r+0xa58>
 8008006:	f01a 0f01 	tst.w	sl, #1
 800800a:	d0dd      	beq.n	8007fc8 <_dtoa_r+0xa58>
 800800c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008010:	d1d7      	bne.n	8007fc2 <_dtoa_r+0xa52>
 8008012:	2339      	movs	r3, #57	; 0x39
 8008014:	f88b 3000 	strb.w	r3, [fp]
 8008018:	462b      	mov	r3, r5
 800801a:	461d      	mov	r5, r3
 800801c:	3b01      	subs	r3, #1
 800801e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008022:	2a39      	cmp	r2, #57	; 0x39
 8008024:	d071      	beq.n	800810a <_dtoa_r+0xb9a>
 8008026:	3201      	adds	r2, #1
 8008028:	701a      	strb	r2, [r3, #0]
 800802a:	e746      	b.n	8007eba <_dtoa_r+0x94a>
 800802c:	2a00      	cmp	r2, #0
 800802e:	dd07      	ble.n	8008040 <_dtoa_r+0xad0>
 8008030:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008034:	d0ed      	beq.n	8008012 <_dtoa_r+0xaa2>
 8008036:	f10a 0301 	add.w	r3, sl, #1
 800803a:	f88b 3000 	strb.w	r3, [fp]
 800803e:	e73c      	b.n	8007eba <_dtoa_r+0x94a>
 8008040:	9b05      	ldr	r3, [sp, #20]
 8008042:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008046:	4599      	cmp	r9, r3
 8008048:	d047      	beq.n	80080da <_dtoa_r+0xb6a>
 800804a:	ee18 1a10 	vmov	r1, s16
 800804e:	2300      	movs	r3, #0
 8008050:	220a      	movs	r2, #10
 8008052:	4620      	mov	r0, r4
 8008054:	f000 fb16 	bl	8008684 <__multadd>
 8008058:	45b8      	cmp	r8, r7
 800805a:	ee08 0a10 	vmov	s16, r0
 800805e:	f04f 0300 	mov.w	r3, #0
 8008062:	f04f 020a 	mov.w	r2, #10
 8008066:	4641      	mov	r1, r8
 8008068:	4620      	mov	r0, r4
 800806a:	d106      	bne.n	800807a <_dtoa_r+0xb0a>
 800806c:	f000 fb0a 	bl	8008684 <__multadd>
 8008070:	4680      	mov	r8, r0
 8008072:	4607      	mov	r7, r0
 8008074:	f109 0901 	add.w	r9, r9, #1
 8008078:	e772      	b.n	8007f60 <_dtoa_r+0x9f0>
 800807a:	f000 fb03 	bl	8008684 <__multadd>
 800807e:	4639      	mov	r1, r7
 8008080:	4680      	mov	r8, r0
 8008082:	2300      	movs	r3, #0
 8008084:	220a      	movs	r2, #10
 8008086:	4620      	mov	r0, r4
 8008088:	f000 fafc 	bl	8008684 <__multadd>
 800808c:	4607      	mov	r7, r0
 800808e:	e7f1      	b.n	8008074 <_dtoa_r+0xb04>
 8008090:	9b03      	ldr	r3, [sp, #12]
 8008092:	9302      	str	r3, [sp, #8]
 8008094:	9d01      	ldr	r5, [sp, #4]
 8008096:	ee18 0a10 	vmov	r0, s16
 800809a:	4631      	mov	r1, r6
 800809c:	f7ff f9da 	bl	8007454 <quorem>
 80080a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80080a4:	9b01      	ldr	r3, [sp, #4]
 80080a6:	f805 ab01 	strb.w	sl, [r5], #1
 80080aa:	1aea      	subs	r2, r5, r3
 80080ac:	9b02      	ldr	r3, [sp, #8]
 80080ae:	4293      	cmp	r3, r2
 80080b0:	dd09      	ble.n	80080c6 <_dtoa_r+0xb56>
 80080b2:	ee18 1a10 	vmov	r1, s16
 80080b6:	2300      	movs	r3, #0
 80080b8:	220a      	movs	r2, #10
 80080ba:	4620      	mov	r0, r4
 80080bc:	f000 fae2 	bl	8008684 <__multadd>
 80080c0:	ee08 0a10 	vmov	s16, r0
 80080c4:	e7e7      	b.n	8008096 <_dtoa_r+0xb26>
 80080c6:	9b02      	ldr	r3, [sp, #8]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	bfc8      	it	gt
 80080cc:	461d      	movgt	r5, r3
 80080ce:	9b01      	ldr	r3, [sp, #4]
 80080d0:	bfd8      	it	le
 80080d2:	2501      	movle	r5, #1
 80080d4:	441d      	add	r5, r3
 80080d6:	f04f 0800 	mov.w	r8, #0
 80080da:	ee18 1a10 	vmov	r1, s16
 80080de:	2201      	movs	r2, #1
 80080e0:	4620      	mov	r0, r4
 80080e2:	f000 fc7f 	bl	80089e4 <__lshift>
 80080e6:	4631      	mov	r1, r6
 80080e8:	ee08 0a10 	vmov	s16, r0
 80080ec:	f000 fcea 	bl	8008ac4 <__mcmp>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	dc91      	bgt.n	8008018 <_dtoa_r+0xaa8>
 80080f4:	d102      	bne.n	80080fc <_dtoa_r+0xb8c>
 80080f6:	f01a 0f01 	tst.w	sl, #1
 80080fa:	d18d      	bne.n	8008018 <_dtoa_r+0xaa8>
 80080fc:	462b      	mov	r3, r5
 80080fe:	461d      	mov	r5, r3
 8008100:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008104:	2a30      	cmp	r2, #48	; 0x30
 8008106:	d0fa      	beq.n	80080fe <_dtoa_r+0xb8e>
 8008108:	e6d7      	b.n	8007eba <_dtoa_r+0x94a>
 800810a:	9a01      	ldr	r2, [sp, #4]
 800810c:	429a      	cmp	r2, r3
 800810e:	d184      	bne.n	800801a <_dtoa_r+0xaaa>
 8008110:	9b00      	ldr	r3, [sp, #0]
 8008112:	3301      	adds	r3, #1
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	2331      	movs	r3, #49	; 0x31
 8008118:	7013      	strb	r3, [r2, #0]
 800811a:	e6ce      	b.n	8007eba <_dtoa_r+0x94a>
 800811c:	4b09      	ldr	r3, [pc, #36]	; (8008144 <_dtoa_r+0xbd4>)
 800811e:	f7ff ba95 	b.w	800764c <_dtoa_r+0xdc>
 8008122:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008124:	2b00      	cmp	r3, #0
 8008126:	f47f aa6e 	bne.w	8007606 <_dtoa_r+0x96>
 800812a:	4b07      	ldr	r3, [pc, #28]	; (8008148 <_dtoa_r+0xbd8>)
 800812c:	f7ff ba8e 	b.w	800764c <_dtoa_r+0xdc>
 8008130:	9b02      	ldr	r3, [sp, #8]
 8008132:	2b00      	cmp	r3, #0
 8008134:	dcae      	bgt.n	8008094 <_dtoa_r+0xb24>
 8008136:	9b06      	ldr	r3, [sp, #24]
 8008138:	2b02      	cmp	r3, #2
 800813a:	f73f aea8 	bgt.w	8007e8e <_dtoa_r+0x91e>
 800813e:	e7a9      	b.n	8008094 <_dtoa_r+0xb24>
 8008140:	0800b4f7 	.word	0x0800b4f7
 8008144:	0800b454 	.word	0x0800b454
 8008148:	0800b478 	.word	0x0800b478

0800814c <__sflush_r>:
 800814c:	898a      	ldrh	r2, [r1, #12]
 800814e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008152:	4605      	mov	r5, r0
 8008154:	0710      	lsls	r0, r2, #28
 8008156:	460c      	mov	r4, r1
 8008158:	d458      	bmi.n	800820c <__sflush_r+0xc0>
 800815a:	684b      	ldr	r3, [r1, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	dc05      	bgt.n	800816c <__sflush_r+0x20>
 8008160:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008162:	2b00      	cmp	r3, #0
 8008164:	dc02      	bgt.n	800816c <__sflush_r+0x20>
 8008166:	2000      	movs	r0, #0
 8008168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800816c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800816e:	2e00      	cmp	r6, #0
 8008170:	d0f9      	beq.n	8008166 <__sflush_r+0x1a>
 8008172:	2300      	movs	r3, #0
 8008174:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008178:	682f      	ldr	r7, [r5, #0]
 800817a:	602b      	str	r3, [r5, #0]
 800817c:	d032      	beq.n	80081e4 <__sflush_r+0x98>
 800817e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008180:	89a3      	ldrh	r3, [r4, #12]
 8008182:	075a      	lsls	r2, r3, #29
 8008184:	d505      	bpl.n	8008192 <__sflush_r+0x46>
 8008186:	6863      	ldr	r3, [r4, #4]
 8008188:	1ac0      	subs	r0, r0, r3
 800818a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800818c:	b10b      	cbz	r3, 8008192 <__sflush_r+0x46>
 800818e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008190:	1ac0      	subs	r0, r0, r3
 8008192:	2300      	movs	r3, #0
 8008194:	4602      	mov	r2, r0
 8008196:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008198:	6a21      	ldr	r1, [r4, #32]
 800819a:	4628      	mov	r0, r5
 800819c:	47b0      	blx	r6
 800819e:	1c43      	adds	r3, r0, #1
 80081a0:	89a3      	ldrh	r3, [r4, #12]
 80081a2:	d106      	bne.n	80081b2 <__sflush_r+0x66>
 80081a4:	6829      	ldr	r1, [r5, #0]
 80081a6:	291d      	cmp	r1, #29
 80081a8:	d82c      	bhi.n	8008204 <__sflush_r+0xb8>
 80081aa:	4a2a      	ldr	r2, [pc, #168]	; (8008254 <__sflush_r+0x108>)
 80081ac:	40ca      	lsrs	r2, r1
 80081ae:	07d6      	lsls	r6, r2, #31
 80081b0:	d528      	bpl.n	8008204 <__sflush_r+0xb8>
 80081b2:	2200      	movs	r2, #0
 80081b4:	6062      	str	r2, [r4, #4]
 80081b6:	04d9      	lsls	r1, r3, #19
 80081b8:	6922      	ldr	r2, [r4, #16]
 80081ba:	6022      	str	r2, [r4, #0]
 80081bc:	d504      	bpl.n	80081c8 <__sflush_r+0x7c>
 80081be:	1c42      	adds	r2, r0, #1
 80081c0:	d101      	bne.n	80081c6 <__sflush_r+0x7a>
 80081c2:	682b      	ldr	r3, [r5, #0]
 80081c4:	b903      	cbnz	r3, 80081c8 <__sflush_r+0x7c>
 80081c6:	6560      	str	r0, [r4, #84]	; 0x54
 80081c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081ca:	602f      	str	r7, [r5, #0]
 80081cc:	2900      	cmp	r1, #0
 80081ce:	d0ca      	beq.n	8008166 <__sflush_r+0x1a>
 80081d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081d4:	4299      	cmp	r1, r3
 80081d6:	d002      	beq.n	80081de <__sflush_r+0x92>
 80081d8:	4628      	mov	r0, r5
 80081da:	f000 fd8b 	bl	8008cf4 <_free_r>
 80081de:	2000      	movs	r0, #0
 80081e0:	6360      	str	r0, [r4, #52]	; 0x34
 80081e2:	e7c1      	b.n	8008168 <__sflush_r+0x1c>
 80081e4:	6a21      	ldr	r1, [r4, #32]
 80081e6:	2301      	movs	r3, #1
 80081e8:	4628      	mov	r0, r5
 80081ea:	47b0      	blx	r6
 80081ec:	1c41      	adds	r1, r0, #1
 80081ee:	d1c7      	bne.n	8008180 <__sflush_r+0x34>
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d0c4      	beq.n	8008180 <__sflush_r+0x34>
 80081f6:	2b1d      	cmp	r3, #29
 80081f8:	d001      	beq.n	80081fe <__sflush_r+0xb2>
 80081fa:	2b16      	cmp	r3, #22
 80081fc:	d101      	bne.n	8008202 <__sflush_r+0xb6>
 80081fe:	602f      	str	r7, [r5, #0]
 8008200:	e7b1      	b.n	8008166 <__sflush_r+0x1a>
 8008202:	89a3      	ldrh	r3, [r4, #12]
 8008204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008208:	81a3      	strh	r3, [r4, #12]
 800820a:	e7ad      	b.n	8008168 <__sflush_r+0x1c>
 800820c:	690f      	ldr	r7, [r1, #16]
 800820e:	2f00      	cmp	r7, #0
 8008210:	d0a9      	beq.n	8008166 <__sflush_r+0x1a>
 8008212:	0793      	lsls	r3, r2, #30
 8008214:	680e      	ldr	r6, [r1, #0]
 8008216:	bf08      	it	eq
 8008218:	694b      	ldreq	r3, [r1, #20]
 800821a:	600f      	str	r7, [r1, #0]
 800821c:	bf18      	it	ne
 800821e:	2300      	movne	r3, #0
 8008220:	eba6 0807 	sub.w	r8, r6, r7
 8008224:	608b      	str	r3, [r1, #8]
 8008226:	f1b8 0f00 	cmp.w	r8, #0
 800822a:	dd9c      	ble.n	8008166 <__sflush_r+0x1a>
 800822c:	6a21      	ldr	r1, [r4, #32]
 800822e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008230:	4643      	mov	r3, r8
 8008232:	463a      	mov	r2, r7
 8008234:	4628      	mov	r0, r5
 8008236:	47b0      	blx	r6
 8008238:	2800      	cmp	r0, #0
 800823a:	dc06      	bgt.n	800824a <__sflush_r+0xfe>
 800823c:	89a3      	ldrh	r3, [r4, #12]
 800823e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008242:	81a3      	strh	r3, [r4, #12]
 8008244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008248:	e78e      	b.n	8008168 <__sflush_r+0x1c>
 800824a:	4407      	add	r7, r0
 800824c:	eba8 0800 	sub.w	r8, r8, r0
 8008250:	e7e9      	b.n	8008226 <__sflush_r+0xda>
 8008252:	bf00      	nop
 8008254:	20400001 	.word	0x20400001

08008258 <_fflush_r>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	690b      	ldr	r3, [r1, #16]
 800825c:	4605      	mov	r5, r0
 800825e:	460c      	mov	r4, r1
 8008260:	b913      	cbnz	r3, 8008268 <_fflush_r+0x10>
 8008262:	2500      	movs	r5, #0
 8008264:	4628      	mov	r0, r5
 8008266:	bd38      	pop	{r3, r4, r5, pc}
 8008268:	b118      	cbz	r0, 8008272 <_fflush_r+0x1a>
 800826a:	6983      	ldr	r3, [r0, #24]
 800826c:	b90b      	cbnz	r3, 8008272 <_fflush_r+0x1a>
 800826e:	f000 f887 	bl	8008380 <__sinit>
 8008272:	4b14      	ldr	r3, [pc, #80]	; (80082c4 <_fflush_r+0x6c>)
 8008274:	429c      	cmp	r4, r3
 8008276:	d11b      	bne.n	80082b0 <_fflush_r+0x58>
 8008278:	686c      	ldr	r4, [r5, #4]
 800827a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d0ef      	beq.n	8008262 <_fflush_r+0xa>
 8008282:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008284:	07d0      	lsls	r0, r2, #31
 8008286:	d404      	bmi.n	8008292 <_fflush_r+0x3a>
 8008288:	0599      	lsls	r1, r3, #22
 800828a:	d402      	bmi.n	8008292 <_fflush_r+0x3a>
 800828c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800828e:	f000 f91a 	bl	80084c6 <__retarget_lock_acquire_recursive>
 8008292:	4628      	mov	r0, r5
 8008294:	4621      	mov	r1, r4
 8008296:	f7ff ff59 	bl	800814c <__sflush_r>
 800829a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800829c:	07da      	lsls	r2, r3, #31
 800829e:	4605      	mov	r5, r0
 80082a0:	d4e0      	bmi.n	8008264 <_fflush_r+0xc>
 80082a2:	89a3      	ldrh	r3, [r4, #12]
 80082a4:	059b      	lsls	r3, r3, #22
 80082a6:	d4dd      	bmi.n	8008264 <_fflush_r+0xc>
 80082a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082aa:	f000 f90d 	bl	80084c8 <__retarget_lock_release_recursive>
 80082ae:	e7d9      	b.n	8008264 <_fflush_r+0xc>
 80082b0:	4b05      	ldr	r3, [pc, #20]	; (80082c8 <_fflush_r+0x70>)
 80082b2:	429c      	cmp	r4, r3
 80082b4:	d101      	bne.n	80082ba <_fflush_r+0x62>
 80082b6:	68ac      	ldr	r4, [r5, #8]
 80082b8:	e7df      	b.n	800827a <_fflush_r+0x22>
 80082ba:	4b04      	ldr	r3, [pc, #16]	; (80082cc <_fflush_r+0x74>)
 80082bc:	429c      	cmp	r4, r3
 80082be:	bf08      	it	eq
 80082c0:	68ec      	ldreq	r4, [r5, #12]
 80082c2:	e7da      	b.n	800827a <_fflush_r+0x22>
 80082c4:	0800b528 	.word	0x0800b528
 80082c8:	0800b548 	.word	0x0800b548
 80082cc:	0800b508 	.word	0x0800b508

080082d0 <std>:
 80082d0:	2300      	movs	r3, #0
 80082d2:	b510      	push	{r4, lr}
 80082d4:	4604      	mov	r4, r0
 80082d6:	e9c0 3300 	strd	r3, r3, [r0]
 80082da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082de:	6083      	str	r3, [r0, #8]
 80082e0:	8181      	strh	r1, [r0, #12]
 80082e2:	6643      	str	r3, [r0, #100]	; 0x64
 80082e4:	81c2      	strh	r2, [r0, #14]
 80082e6:	6183      	str	r3, [r0, #24]
 80082e8:	4619      	mov	r1, r3
 80082ea:	2208      	movs	r2, #8
 80082ec:	305c      	adds	r0, #92	; 0x5c
 80082ee:	f7fe faf1 	bl	80068d4 <memset>
 80082f2:	4b05      	ldr	r3, [pc, #20]	; (8008308 <std+0x38>)
 80082f4:	6263      	str	r3, [r4, #36]	; 0x24
 80082f6:	4b05      	ldr	r3, [pc, #20]	; (800830c <std+0x3c>)
 80082f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80082fa:	4b05      	ldr	r3, [pc, #20]	; (8008310 <std+0x40>)
 80082fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082fe:	4b05      	ldr	r3, [pc, #20]	; (8008314 <std+0x44>)
 8008300:	6224      	str	r4, [r4, #32]
 8008302:	6323      	str	r3, [r4, #48]	; 0x30
 8008304:	bd10      	pop	{r4, pc}
 8008306:	bf00      	nop
 8008308:	08009189 	.word	0x08009189
 800830c:	080091ab 	.word	0x080091ab
 8008310:	080091e3 	.word	0x080091e3
 8008314:	08009207 	.word	0x08009207

08008318 <_cleanup_r>:
 8008318:	4901      	ldr	r1, [pc, #4]	; (8008320 <_cleanup_r+0x8>)
 800831a:	f000 b8af 	b.w	800847c <_fwalk_reent>
 800831e:	bf00      	nop
 8008320:	08008259 	.word	0x08008259

08008324 <__sfmoreglue>:
 8008324:	b570      	push	{r4, r5, r6, lr}
 8008326:	2268      	movs	r2, #104	; 0x68
 8008328:	1e4d      	subs	r5, r1, #1
 800832a:	4355      	muls	r5, r2
 800832c:	460e      	mov	r6, r1
 800832e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008332:	f000 fd4b 	bl	8008dcc <_malloc_r>
 8008336:	4604      	mov	r4, r0
 8008338:	b140      	cbz	r0, 800834c <__sfmoreglue+0x28>
 800833a:	2100      	movs	r1, #0
 800833c:	e9c0 1600 	strd	r1, r6, [r0]
 8008340:	300c      	adds	r0, #12
 8008342:	60a0      	str	r0, [r4, #8]
 8008344:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008348:	f7fe fac4 	bl	80068d4 <memset>
 800834c:	4620      	mov	r0, r4
 800834e:	bd70      	pop	{r4, r5, r6, pc}

08008350 <__sfp_lock_acquire>:
 8008350:	4801      	ldr	r0, [pc, #4]	; (8008358 <__sfp_lock_acquire+0x8>)
 8008352:	f000 b8b8 	b.w	80084c6 <__retarget_lock_acquire_recursive>
 8008356:	bf00      	nop
 8008358:	20000329 	.word	0x20000329

0800835c <__sfp_lock_release>:
 800835c:	4801      	ldr	r0, [pc, #4]	; (8008364 <__sfp_lock_release+0x8>)
 800835e:	f000 b8b3 	b.w	80084c8 <__retarget_lock_release_recursive>
 8008362:	bf00      	nop
 8008364:	20000329 	.word	0x20000329

08008368 <__sinit_lock_acquire>:
 8008368:	4801      	ldr	r0, [pc, #4]	; (8008370 <__sinit_lock_acquire+0x8>)
 800836a:	f000 b8ac 	b.w	80084c6 <__retarget_lock_acquire_recursive>
 800836e:	bf00      	nop
 8008370:	2000032a 	.word	0x2000032a

08008374 <__sinit_lock_release>:
 8008374:	4801      	ldr	r0, [pc, #4]	; (800837c <__sinit_lock_release+0x8>)
 8008376:	f000 b8a7 	b.w	80084c8 <__retarget_lock_release_recursive>
 800837a:	bf00      	nop
 800837c:	2000032a 	.word	0x2000032a

08008380 <__sinit>:
 8008380:	b510      	push	{r4, lr}
 8008382:	4604      	mov	r4, r0
 8008384:	f7ff fff0 	bl	8008368 <__sinit_lock_acquire>
 8008388:	69a3      	ldr	r3, [r4, #24]
 800838a:	b11b      	cbz	r3, 8008394 <__sinit+0x14>
 800838c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008390:	f7ff bff0 	b.w	8008374 <__sinit_lock_release>
 8008394:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008398:	6523      	str	r3, [r4, #80]	; 0x50
 800839a:	4b13      	ldr	r3, [pc, #76]	; (80083e8 <__sinit+0x68>)
 800839c:	4a13      	ldr	r2, [pc, #76]	; (80083ec <__sinit+0x6c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80083a2:	42a3      	cmp	r3, r4
 80083a4:	bf04      	itt	eq
 80083a6:	2301      	moveq	r3, #1
 80083a8:	61a3      	streq	r3, [r4, #24]
 80083aa:	4620      	mov	r0, r4
 80083ac:	f000 f820 	bl	80083f0 <__sfp>
 80083b0:	6060      	str	r0, [r4, #4]
 80083b2:	4620      	mov	r0, r4
 80083b4:	f000 f81c 	bl	80083f0 <__sfp>
 80083b8:	60a0      	str	r0, [r4, #8]
 80083ba:	4620      	mov	r0, r4
 80083bc:	f000 f818 	bl	80083f0 <__sfp>
 80083c0:	2200      	movs	r2, #0
 80083c2:	60e0      	str	r0, [r4, #12]
 80083c4:	2104      	movs	r1, #4
 80083c6:	6860      	ldr	r0, [r4, #4]
 80083c8:	f7ff ff82 	bl	80082d0 <std>
 80083cc:	68a0      	ldr	r0, [r4, #8]
 80083ce:	2201      	movs	r2, #1
 80083d0:	2109      	movs	r1, #9
 80083d2:	f7ff ff7d 	bl	80082d0 <std>
 80083d6:	68e0      	ldr	r0, [r4, #12]
 80083d8:	2202      	movs	r2, #2
 80083da:	2112      	movs	r1, #18
 80083dc:	f7ff ff78 	bl	80082d0 <std>
 80083e0:	2301      	movs	r3, #1
 80083e2:	61a3      	str	r3, [r4, #24]
 80083e4:	e7d2      	b.n	800838c <__sinit+0xc>
 80083e6:	bf00      	nop
 80083e8:	0800b440 	.word	0x0800b440
 80083ec:	08008319 	.word	0x08008319

080083f0 <__sfp>:
 80083f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f2:	4607      	mov	r7, r0
 80083f4:	f7ff ffac 	bl	8008350 <__sfp_lock_acquire>
 80083f8:	4b1e      	ldr	r3, [pc, #120]	; (8008474 <__sfp+0x84>)
 80083fa:	681e      	ldr	r6, [r3, #0]
 80083fc:	69b3      	ldr	r3, [r6, #24]
 80083fe:	b913      	cbnz	r3, 8008406 <__sfp+0x16>
 8008400:	4630      	mov	r0, r6
 8008402:	f7ff ffbd 	bl	8008380 <__sinit>
 8008406:	3648      	adds	r6, #72	; 0x48
 8008408:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800840c:	3b01      	subs	r3, #1
 800840e:	d503      	bpl.n	8008418 <__sfp+0x28>
 8008410:	6833      	ldr	r3, [r6, #0]
 8008412:	b30b      	cbz	r3, 8008458 <__sfp+0x68>
 8008414:	6836      	ldr	r6, [r6, #0]
 8008416:	e7f7      	b.n	8008408 <__sfp+0x18>
 8008418:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800841c:	b9d5      	cbnz	r5, 8008454 <__sfp+0x64>
 800841e:	4b16      	ldr	r3, [pc, #88]	; (8008478 <__sfp+0x88>)
 8008420:	60e3      	str	r3, [r4, #12]
 8008422:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008426:	6665      	str	r5, [r4, #100]	; 0x64
 8008428:	f000 f84c 	bl	80084c4 <__retarget_lock_init_recursive>
 800842c:	f7ff ff96 	bl	800835c <__sfp_lock_release>
 8008430:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008434:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008438:	6025      	str	r5, [r4, #0]
 800843a:	61a5      	str	r5, [r4, #24]
 800843c:	2208      	movs	r2, #8
 800843e:	4629      	mov	r1, r5
 8008440:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008444:	f7fe fa46 	bl	80068d4 <memset>
 8008448:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800844c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008450:	4620      	mov	r0, r4
 8008452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008454:	3468      	adds	r4, #104	; 0x68
 8008456:	e7d9      	b.n	800840c <__sfp+0x1c>
 8008458:	2104      	movs	r1, #4
 800845a:	4638      	mov	r0, r7
 800845c:	f7ff ff62 	bl	8008324 <__sfmoreglue>
 8008460:	4604      	mov	r4, r0
 8008462:	6030      	str	r0, [r6, #0]
 8008464:	2800      	cmp	r0, #0
 8008466:	d1d5      	bne.n	8008414 <__sfp+0x24>
 8008468:	f7ff ff78 	bl	800835c <__sfp_lock_release>
 800846c:	230c      	movs	r3, #12
 800846e:	603b      	str	r3, [r7, #0]
 8008470:	e7ee      	b.n	8008450 <__sfp+0x60>
 8008472:	bf00      	nop
 8008474:	0800b440 	.word	0x0800b440
 8008478:	ffff0001 	.word	0xffff0001

0800847c <_fwalk_reent>:
 800847c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008480:	4606      	mov	r6, r0
 8008482:	4688      	mov	r8, r1
 8008484:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008488:	2700      	movs	r7, #0
 800848a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800848e:	f1b9 0901 	subs.w	r9, r9, #1
 8008492:	d505      	bpl.n	80084a0 <_fwalk_reent+0x24>
 8008494:	6824      	ldr	r4, [r4, #0]
 8008496:	2c00      	cmp	r4, #0
 8008498:	d1f7      	bne.n	800848a <_fwalk_reent+0xe>
 800849a:	4638      	mov	r0, r7
 800849c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084a0:	89ab      	ldrh	r3, [r5, #12]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d907      	bls.n	80084b6 <_fwalk_reent+0x3a>
 80084a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084aa:	3301      	adds	r3, #1
 80084ac:	d003      	beq.n	80084b6 <_fwalk_reent+0x3a>
 80084ae:	4629      	mov	r1, r5
 80084b0:	4630      	mov	r0, r6
 80084b2:	47c0      	blx	r8
 80084b4:	4307      	orrs	r7, r0
 80084b6:	3568      	adds	r5, #104	; 0x68
 80084b8:	e7e9      	b.n	800848e <_fwalk_reent+0x12>
	...

080084bc <_localeconv_r>:
 80084bc:	4800      	ldr	r0, [pc, #0]	; (80084c0 <_localeconv_r+0x4>)
 80084be:	4770      	bx	lr
 80084c0:	2000016c 	.word	0x2000016c

080084c4 <__retarget_lock_init_recursive>:
 80084c4:	4770      	bx	lr

080084c6 <__retarget_lock_acquire_recursive>:
 80084c6:	4770      	bx	lr

080084c8 <__retarget_lock_release_recursive>:
 80084c8:	4770      	bx	lr

080084ca <__swhatbuf_r>:
 80084ca:	b570      	push	{r4, r5, r6, lr}
 80084cc:	460e      	mov	r6, r1
 80084ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084d2:	2900      	cmp	r1, #0
 80084d4:	b096      	sub	sp, #88	; 0x58
 80084d6:	4614      	mov	r4, r2
 80084d8:	461d      	mov	r5, r3
 80084da:	da08      	bge.n	80084ee <__swhatbuf_r+0x24>
 80084dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	602a      	str	r2, [r5, #0]
 80084e4:	061a      	lsls	r2, r3, #24
 80084e6:	d410      	bmi.n	800850a <__swhatbuf_r+0x40>
 80084e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ec:	e00e      	b.n	800850c <__swhatbuf_r+0x42>
 80084ee:	466a      	mov	r2, sp
 80084f0:	f000 fee0 	bl	80092b4 <_fstat_r>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	dbf1      	blt.n	80084dc <__swhatbuf_r+0x12>
 80084f8:	9a01      	ldr	r2, [sp, #4]
 80084fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008502:	425a      	negs	r2, r3
 8008504:	415a      	adcs	r2, r3
 8008506:	602a      	str	r2, [r5, #0]
 8008508:	e7ee      	b.n	80084e8 <__swhatbuf_r+0x1e>
 800850a:	2340      	movs	r3, #64	; 0x40
 800850c:	2000      	movs	r0, #0
 800850e:	6023      	str	r3, [r4, #0]
 8008510:	b016      	add	sp, #88	; 0x58
 8008512:	bd70      	pop	{r4, r5, r6, pc}

08008514 <__smakebuf_r>:
 8008514:	898b      	ldrh	r3, [r1, #12]
 8008516:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008518:	079d      	lsls	r5, r3, #30
 800851a:	4606      	mov	r6, r0
 800851c:	460c      	mov	r4, r1
 800851e:	d507      	bpl.n	8008530 <__smakebuf_r+0x1c>
 8008520:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008524:	6023      	str	r3, [r4, #0]
 8008526:	6123      	str	r3, [r4, #16]
 8008528:	2301      	movs	r3, #1
 800852a:	6163      	str	r3, [r4, #20]
 800852c:	b002      	add	sp, #8
 800852e:	bd70      	pop	{r4, r5, r6, pc}
 8008530:	ab01      	add	r3, sp, #4
 8008532:	466a      	mov	r2, sp
 8008534:	f7ff ffc9 	bl	80084ca <__swhatbuf_r>
 8008538:	9900      	ldr	r1, [sp, #0]
 800853a:	4605      	mov	r5, r0
 800853c:	4630      	mov	r0, r6
 800853e:	f000 fc45 	bl	8008dcc <_malloc_r>
 8008542:	b948      	cbnz	r0, 8008558 <__smakebuf_r+0x44>
 8008544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008548:	059a      	lsls	r2, r3, #22
 800854a:	d4ef      	bmi.n	800852c <__smakebuf_r+0x18>
 800854c:	f023 0303 	bic.w	r3, r3, #3
 8008550:	f043 0302 	orr.w	r3, r3, #2
 8008554:	81a3      	strh	r3, [r4, #12]
 8008556:	e7e3      	b.n	8008520 <__smakebuf_r+0xc>
 8008558:	4b0d      	ldr	r3, [pc, #52]	; (8008590 <__smakebuf_r+0x7c>)
 800855a:	62b3      	str	r3, [r6, #40]	; 0x28
 800855c:	89a3      	ldrh	r3, [r4, #12]
 800855e:	6020      	str	r0, [r4, #0]
 8008560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008564:	81a3      	strh	r3, [r4, #12]
 8008566:	9b00      	ldr	r3, [sp, #0]
 8008568:	6163      	str	r3, [r4, #20]
 800856a:	9b01      	ldr	r3, [sp, #4]
 800856c:	6120      	str	r0, [r4, #16]
 800856e:	b15b      	cbz	r3, 8008588 <__smakebuf_r+0x74>
 8008570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008574:	4630      	mov	r0, r6
 8008576:	f000 feaf 	bl	80092d8 <_isatty_r>
 800857a:	b128      	cbz	r0, 8008588 <__smakebuf_r+0x74>
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	f023 0303 	bic.w	r3, r3, #3
 8008582:	f043 0301 	orr.w	r3, r3, #1
 8008586:	81a3      	strh	r3, [r4, #12]
 8008588:	89a0      	ldrh	r0, [r4, #12]
 800858a:	4305      	orrs	r5, r0
 800858c:	81a5      	strh	r5, [r4, #12]
 800858e:	e7cd      	b.n	800852c <__smakebuf_r+0x18>
 8008590:	08008319 	.word	0x08008319

08008594 <malloc>:
 8008594:	4b02      	ldr	r3, [pc, #8]	; (80085a0 <malloc+0xc>)
 8008596:	4601      	mov	r1, r0
 8008598:	6818      	ldr	r0, [r3, #0]
 800859a:	f000 bc17 	b.w	8008dcc <_malloc_r>
 800859e:	bf00      	nop
 80085a0:	20000018 	.word	0x20000018

080085a4 <memcpy>:
 80085a4:	440a      	add	r2, r1
 80085a6:	4291      	cmp	r1, r2
 80085a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80085ac:	d100      	bne.n	80085b0 <memcpy+0xc>
 80085ae:	4770      	bx	lr
 80085b0:	b510      	push	{r4, lr}
 80085b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085ba:	4291      	cmp	r1, r2
 80085bc:	d1f9      	bne.n	80085b2 <memcpy+0xe>
 80085be:	bd10      	pop	{r4, pc}

080085c0 <_Balloc>:
 80085c0:	b570      	push	{r4, r5, r6, lr}
 80085c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085c4:	4604      	mov	r4, r0
 80085c6:	460d      	mov	r5, r1
 80085c8:	b976      	cbnz	r6, 80085e8 <_Balloc+0x28>
 80085ca:	2010      	movs	r0, #16
 80085cc:	f7ff ffe2 	bl	8008594 <malloc>
 80085d0:	4602      	mov	r2, r0
 80085d2:	6260      	str	r0, [r4, #36]	; 0x24
 80085d4:	b920      	cbnz	r0, 80085e0 <_Balloc+0x20>
 80085d6:	4b18      	ldr	r3, [pc, #96]	; (8008638 <_Balloc+0x78>)
 80085d8:	4818      	ldr	r0, [pc, #96]	; (800863c <_Balloc+0x7c>)
 80085da:	2166      	movs	r1, #102	; 0x66
 80085dc:	f000 fe2a 	bl	8009234 <__assert_func>
 80085e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085e4:	6006      	str	r6, [r0, #0]
 80085e6:	60c6      	str	r6, [r0, #12]
 80085e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80085ea:	68f3      	ldr	r3, [r6, #12]
 80085ec:	b183      	cbz	r3, 8008610 <_Balloc+0x50>
 80085ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085f6:	b9b8      	cbnz	r0, 8008628 <_Balloc+0x68>
 80085f8:	2101      	movs	r1, #1
 80085fa:	fa01 f605 	lsl.w	r6, r1, r5
 80085fe:	1d72      	adds	r2, r6, #5
 8008600:	0092      	lsls	r2, r2, #2
 8008602:	4620      	mov	r0, r4
 8008604:	f000 fb60 	bl	8008cc8 <_calloc_r>
 8008608:	b160      	cbz	r0, 8008624 <_Balloc+0x64>
 800860a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800860e:	e00e      	b.n	800862e <_Balloc+0x6e>
 8008610:	2221      	movs	r2, #33	; 0x21
 8008612:	2104      	movs	r1, #4
 8008614:	4620      	mov	r0, r4
 8008616:	f000 fb57 	bl	8008cc8 <_calloc_r>
 800861a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800861c:	60f0      	str	r0, [r6, #12]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1e4      	bne.n	80085ee <_Balloc+0x2e>
 8008624:	2000      	movs	r0, #0
 8008626:	bd70      	pop	{r4, r5, r6, pc}
 8008628:	6802      	ldr	r2, [r0, #0]
 800862a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800862e:	2300      	movs	r3, #0
 8008630:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008634:	e7f7      	b.n	8008626 <_Balloc+0x66>
 8008636:	bf00      	nop
 8008638:	0800b485 	.word	0x0800b485
 800863c:	0800b568 	.word	0x0800b568

08008640 <_Bfree>:
 8008640:	b570      	push	{r4, r5, r6, lr}
 8008642:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008644:	4605      	mov	r5, r0
 8008646:	460c      	mov	r4, r1
 8008648:	b976      	cbnz	r6, 8008668 <_Bfree+0x28>
 800864a:	2010      	movs	r0, #16
 800864c:	f7ff ffa2 	bl	8008594 <malloc>
 8008650:	4602      	mov	r2, r0
 8008652:	6268      	str	r0, [r5, #36]	; 0x24
 8008654:	b920      	cbnz	r0, 8008660 <_Bfree+0x20>
 8008656:	4b09      	ldr	r3, [pc, #36]	; (800867c <_Bfree+0x3c>)
 8008658:	4809      	ldr	r0, [pc, #36]	; (8008680 <_Bfree+0x40>)
 800865a:	218a      	movs	r1, #138	; 0x8a
 800865c:	f000 fdea 	bl	8009234 <__assert_func>
 8008660:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008664:	6006      	str	r6, [r0, #0]
 8008666:	60c6      	str	r6, [r0, #12]
 8008668:	b13c      	cbz	r4, 800867a <_Bfree+0x3a>
 800866a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800866c:	6862      	ldr	r2, [r4, #4]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008674:	6021      	str	r1, [r4, #0]
 8008676:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800867a:	bd70      	pop	{r4, r5, r6, pc}
 800867c:	0800b485 	.word	0x0800b485
 8008680:	0800b568 	.word	0x0800b568

08008684 <__multadd>:
 8008684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008688:	690d      	ldr	r5, [r1, #16]
 800868a:	4607      	mov	r7, r0
 800868c:	460c      	mov	r4, r1
 800868e:	461e      	mov	r6, r3
 8008690:	f101 0c14 	add.w	ip, r1, #20
 8008694:	2000      	movs	r0, #0
 8008696:	f8dc 3000 	ldr.w	r3, [ip]
 800869a:	b299      	uxth	r1, r3
 800869c:	fb02 6101 	mla	r1, r2, r1, r6
 80086a0:	0c1e      	lsrs	r6, r3, #16
 80086a2:	0c0b      	lsrs	r3, r1, #16
 80086a4:	fb02 3306 	mla	r3, r2, r6, r3
 80086a8:	b289      	uxth	r1, r1
 80086aa:	3001      	adds	r0, #1
 80086ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086b0:	4285      	cmp	r5, r0
 80086b2:	f84c 1b04 	str.w	r1, [ip], #4
 80086b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086ba:	dcec      	bgt.n	8008696 <__multadd+0x12>
 80086bc:	b30e      	cbz	r6, 8008702 <__multadd+0x7e>
 80086be:	68a3      	ldr	r3, [r4, #8]
 80086c0:	42ab      	cmp	r3, r5
 80086c2:	dc19      	bgt.n	80086f8 <__multadd+0x74>
 80086c4:	6861      	ldr	r1, [r4, #4]
 80086c6:	4638      	mov	r0, r7
 80086c8:	3101      	adds	r1, #1
 80086ca:	f7ff ff79 	bl	80085c0 <_Balloc>
 80086ce:	4680      	mov	r8, r0
 80086d0:	b928      	cbnz	r0, 80086de <__multadd+0x5a>
 80086d2:	4602      	mov	r2, r0
 80086d4:	4b0c      	ldr	r3, [pc, #48]	; (8008708 <__multadd+0x84>)
 80086d6:	480d      	ldr	r0, [pc, #52]	; (800870c <__multadd+0x88>)
 80086d8:	21b5      	movs	r1, #181	; 0xb5
 80086da:	f000 fdab 	bl	8009234 <__assert_func>
 80086de:	6922      	ldr	r2, [r4, #16]
 80086e0:	3202      	adds	r2, #2
 80086e2:	f104 010c 	add.w	r1, r4, #12
 80086e6:	0092      	lsls	r2, r2, #2
 80086e8:	300c      	adds	r0, #12
 80086ea:	f7ff ff5b 	bl	80085a4 <memcpy>
 80086ee:	4621      	mov	r1, r4
 80086f0:	4638      	mov	r0, r7
 80086f2:	f7ff ffa5 	bl	8008640 <_Bfree>
 80086f6:	4644      	mov	r4, r8
 80086f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086fc:	3501      	adds	r5, #1
 80086fe:	615e      	str	r6, [r3, #20]
 8008700:	6125      	str	r5, [r4, #16]
 8008702:	4620      	mov	r0, r4
 8008704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008708:	0800b4f7 	.word	0x0800b4f7
 800870c:	0800b568 	.word	0x0800b568

08008710 <__hi0bits>:
 8008710:	0c03      	lsrs	r3, r0, #16
 8008712:	041b      	lsls	r3, r3, #16
 8008714:	b9d3      	cbnz	r3, 800874c <__hi0bits+0x3c>
 8008716:	0400      	lsls	r0, r0, #16
 8008718:	2310      	movs	r3, #16
 800871a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800871e:	bf04      	itt	eq
 8008720:	0200      	lsleq	r0, r0, #8
 8008722:	3308      	addeq	r3, #8
 8008724:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008728:	bf04      	itt	eq
 800872a:	0100      	lsleq	r0, r0, #4
 800872c:	3304      	addeq	r3, #4
 800872e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008732:	bf04      	itt	eq
 8008734:	0080      	lsleq	r0, r0, #2
 8008736:	3302      	addeq	r3, #2
 8008738:	2800      	cmp	r0, #0
 800873a:	db05      	blt.n	8008748 <__hi0bits+0x38>
 800873c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008740:	f103 0301 	add.w	r3, r3, #1
 8008744:	bf08      	it	eq
 8008746:	2320      	moveq	r3, #32
 8008748:	4618      	mov	r0, r3
 800874a:	4770      	bx	lr
 800874c:	2300      	movs	r3, #0
 800874e:	e7e4      	b.n	800871a <__hi0bits+0xa>

08008750 <__lo0bits>:
 8008750:	6803      	ldr	r3, [r0, #0]
 8008752:	f013 0207 	ands.w	r2, r3, #7
 8008756:	4601      	mov	r1, r0
 8008758:	d00b      	beq.n	8008772 <__lo0bits+0x22>
 800875a:	07da      	lsls	r2, r3, #31
 800875c:	d423      	bmi.n	80087a6 <__lo0bits+0x56>
 800875e:	0798      	lsls	r0, r3, #30
 8008760:	bf49      	itett	mi
 8008762:	085b      	lsrmi	r3, r3, #1
 8008764:	089b      	lsrpl	r3, r3, #2
 8008766:	2001      	movmi	r0, #1
 8008768:	600b      	strmi	r3, [r1, #0]
 800876a:	bf5c      	itt	pl
 800876c:	600b      	strpl	r3, [r1, #0]
 800876e:	2002      	movpl	r0, #2
 8008770:	4770      	bx	lr
 8008772:	b298      	uxth	r0, r3
 8008774:	b9a8      	cbnz	r0, 80087a2 <__lo0bits+0x52>
 8008776:	0c1b      	lsrs	r3, r3, #16
 8008778:	2010      	movs	r0, #16
 800877a:	b2da      	uxtb	r2, r3
 800877c:	b90a      	cbnz	r2, 8008782 <__lo0bits+0x32>
 800877e:	3008      	adds	r0, #8
 8008780:	0a1b      	lsrs	r3, r3, #8
 8008782:	071a      	lsls	r2, r3, #28
 8008784:	bf04      	itt	eq
 8008786:	091b      	lsreq	r3, r3, #4
 8008788:	3004      	addeq	r0, #4
 800878a:	079a      	lsls	r2, r3, #30
 800878c:	bf04      	itt	eq
 800878e:	089b      	lsreq	r3, r3, #2
 8008790:	3002      	addeq	r0, #2
 8008792:	07da      	lsls	r2, r3, #31
 8008794:	d403      	bmi.n	800879e <__lo0bits+0x4e>
 8008796:	085b      	lsrs	r3, r3, #1
 8008798:	f100 0001 	add.w	r0, r0, #1
 800879c:	d005      	beq.n	80087aa <__lo0bits+0x5a>
 800879e:	600b      	str	r3, [r1, #0]
 80087a0:	4770      	bx	lr
 80087a2:	4610      	mov	r0, r2
 80087a4:	e7e9      	b.n	800877a <__lo0bits+0x2a>
 80087a6:	2000      	movs	r0, #0
 80087a8:	4770      	bx	lr
 80087aa:	2020      	movs	r0, #32
 80087ac:	4770      	bx	lr
	...

080087b0 <__i2b>:
 80087b0:	b510      	push	{r4, lr}
 80087b2:	460c      	mov	r4, r1
 80087b4:	2101      	movs	r1, #1
 80087b6:	f7ff ff03 	bl	80085c0 <_Balloc>
 80087ba:	4602      	mov	r2, r0
 80087bc:	b928      	cbnz	r0, 80087ca <__i2b+0x1a>
 80087be:	4b05      	ldr	r3, [pc, #20]	; (80087d4 <__i2b+0x24>)
 80087c0:	4805      	ldr	r0, [pc, #20]	; (80087d8 <__i2b+0x28>)
 80087c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80087c6:	f000 fd35 	bl	8009234 <__assert_func>
 80087ca:	2301      	movs	r3, #1
 80087cc:	6144      	str	r4, [r0, #20]
 80087ce:	6103      	str	r3, [r0, #16]
 80087d0:	bd10      	pop	{r4, pc}
 80087d2:	bf00      	nop
 80087d4:	0800b4f7 	.word	0x0800b4f7
 80087d8:	0800b568 	.word	0x0800b568

080087dc <__multiply>:
 80087dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e0:	4691      	mov	r9, r2
 80087e2:	690a      	ldr	r2, [r1, #16]
 80087e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	bfb8      	it	lt
 80087ec:	460b      	movlt	r3, r1
 80087ee:	460c      	mov	r4, r1
 80087f0:	bfbc      	itt	lt
 80087f2:	464c      	movlt	r4, r9
 80087f4:	4699      	movlt	r9, r3
 80087f6:	6927      	ldr	r7, [r4, #16]
 80087f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80087fc:	68a3      	ldr	r3, [r4, #8]
 80087fe:	6861      	ldr	r1, [r4, #4]
 8008800:	eb07 060a 	add.w	r6, r7, sl
 8008804:	42b3      	cmp	r3, r6
 8008806:	b085      	sub	sp, #20
 8008808:	bfb8      	it	lt
 800880a:	3101      	addlt	r1, #1
 800880c:	f7ff fed8 	bl	80085c0 <_Balloc>
 8008810:	b930      	cbnz	r0, 8008820 <__multiply+0x44>
 8008812:	4602      	mov	r2, r0
 8008814:	4b44      	ldr	r3, [pc, #272]	; (8008928 <__multiply+0x14c>)
 8008816:	4845      	ldr	r0, [pc, #276]	; (800892c <__multiply+0x150>)
 8008818:	f240 115d 	movw	r1, #349	; 0x15d
 800881c:	f000 fd0a 	bl	8009234 <__assert_func>
 8008820:	f100 0514 	add.w	r5, r0, #20
 8008824:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008828:	462b      	mov	r3, r5
 800882a:	2200      	movs	r2, #0
 800882c:	4543      	cmp	r3, r8
 800882e:	d321      	bcc.n	8008874 <__multiply+0x98>
 8008830:	f104 0314 	add.w	r3, r4, #20
 8008834:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008838:	f109 0314 	add.w	r3, r9, #20
 800883c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008840:	9202      	str	r2, [sp, #8]
 8008842:	1b3a      	subs	r2, r7, r4
 8008844:	3a15      	subs	r2, #21
 8008846:	f022 0203 	bic.w	r2, r2, #3
 800884a:	3204      	adds	r2, #4
 800884c:	f104 0115 	add.w	r1, r4, #21
 8008850:	428f      	cmp	r7, r1
 8008852:	bf38      	it	cc
 8008854:	2204      	movcc	r2, #4
 8008856:	9201      	str	r2, [sp, #4]
 8008858:	9a02      	ldr	r2, [sp, #8]
 800885a:	9303      	str	r3, [sp, #12]
 800885c:	429a      	cmp	r2, r3
 800885e:	d80c      	bhi.n	800887a <__multiply+0x9e>
 8008860:	2e00      	cmp	r6, #0
 8008862:	dd03      	ble.n	800886c <__multiply+0x90>
 8008864:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008868:	2b00      	cmp	r3, #0
 800886a:	d05a      	beq.n	8008922 <__multiply+0x146>
 800886c:	6106      	str	r6, [r0, #16]
 800886e:	b005      	add	sp, #20
 8008870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008874:	f843 2b04 	str.w	r2, [r3], #4
 8008878:	e7d8      	b.n	800882c <__multiply+0x50>
 800887a:	f8b3 a000 	ldrh.w	sl, [r3]
 800887e:	f1ba 0f00 	cmp.w	sl, #0
 8008882:	d024      	beq.n	80088ce <__multiply+0xf2>
 8008884:	f104 0e14 	add.w	lr, r4, #20
 8008888:	46a9      	mov	r9, r5
 800888a:	f04f 0c00 	mov.w	ip, #0
 800888e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008892:	f8d9 1000 	ldr.w	r1, [r9]
 8008896:	fa1f fb82 	uxth.w	fp, r2
 800889a:	b289      	uxth	r1, r1
 800889c:	fb0a 110b 	mla	r1, sl, fp, r1
 80088a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80088a4:	f8d9 2000 	ldr.w	r2, [r9]
 80088a8:	4461      	add	r1, ip
 80088aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80088b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80088b6:	b289      	uxth	r1, r1
 80088b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80088bc:	4577      	cmp	r7, lr
 80088be:	f849 1b04 	str.w	r1, [r9], #4
 80088c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088c6:	d8e2      	bhi.n	800888e <__multiply+0xb2>
 80088c8:	9a01      	ldr	r2, [sp, #4]
 80088ca:	f845 c002 	str.w	ip, [r5, r2]
 80088ce:	9a03      	ldr	r2, [sp, #12]
 80088d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80088d4:	3304      	adds	r3, #4
 80088d6:	f1b9 0f00 	cmp.w	r9, #0
 80088da:	d020      	beq.n	800891e <__multiply+0x142>
 80088dc:	6829      	ldr	r1, [r5, #0]
 80088de:	f104 0c14 	add.w	ip, r4, #20
 80088e2:	46ae      	mov	lr, r5
 80088e4:	f04f 0a00 	mov.w	sl, #0
 80088e8:	f8bc b000 	ldrh.w	fp, [ip]
 80088ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80088f0:	fb09 220b 	mla	r2, r9, fp, r2
 80088f4:	4492      	add	sl, r2
 80088f6:	b289      	uxth	r1, r1
 80088f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80088fc:	f84e 1b04 	str.w	r1, [lr], #4
 8008900:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008904:	f8be 1000 	ldrh.w	r1, [lr]
 8008908:	0c12      	lsrs	r2, r2, #16
 800890a:	fb09 1102 	mla	r1, r9, r2, r1
 800890e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008912:	4567      	cmp	r7, ip
 8008914:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008918:	d8e6      	bhi.n	80088e8 <__multiply+0x10c>
 800891a:	9a01      	ldr	r2, [sp, #4]
 800891c:	50a9      	str	r1, [r5, r2]
 800891e:	3504      	adds	r5, #4
 8008920:	e79a      	b.n	8008858 <__multiply+0x7c>
 8008922:	3e01      	subs	r6, #1
 8008924:	e79c      	b.n	8008860 <__multiply+0x84>
 8008926:	bf00      	nop
 8008928:	0800b4f7 	.word	0x0800b4f7
 800892c:	0800b568 	.word	0x0800b568

08008930 <__pow5mult>:
 8008930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008934:	4615      	mov	r5, r2
 8008936:	f012 0203 	ands.w	r2, r2, #3
 800893a:	4606      	mov	r6, r0
 800893c:	460f      	mov	r7, r1
 800893e:	d007      	beq.n	8008950 <__pow5mult+0x20>
 8008940:	4c25      	ldr	r4, [pc, #148]	; (80089d8 <__pow5mult+0xa8>)
 8008942:	3a01      	subs	r2, #1
 8008944:	2300      	movs	r3, #0
 8008946:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800894a:	f7ff fe9b 	bl	8008684 <__multadd>
 800894e:	4607      	mov	r7, r0
 8008950:	10ad      	asrs	r5, r5, #2
 8008952:	d03d      	beq.n	80089d0 <__pow5mult+0xa0>
 8008954:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008956:	b97c      	cbnz	r4, 8008978 <__pow5mult+0x48>
 8008958:	2010      	movs	r0, #16
 800895a:	f7ff fe1b 	bl	8008594 <malloc>
 800895e:	4602      	mov	r2, r0
 8008960:	6270      	str	r0, [r6, #36]	; 0x24
 8008962:	b928      	cbnz	r0, 8008970 <__pow5mult+0x40>
 8008964:	4b1d      	ldr	r3, [pc, #116]	; (80089dc <__pow5mult+0xac>)
 8008966:	481e      	ldr	r0, [pc, #120]	; (80089e0 <__pow5mult+0xb0>)
 8008968:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800896c:	f000 fc62 	bl	8009234 <__assert_func>
 8008970:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008974:	6004      	str	r4, [r0, #0]
 8008976:	60c4      	str	r4, [r0, #12]
 8008978:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800897c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008980:	b94c      	cbnz	r4, 8008996 <__pow5mult+0x66>
 8008982:	f240 2171 	movw	r1, #625	; 0x271
 8008986:	4630      	mov	r0, r6
 8008988:	f7ff ff12 	bl	80087b0 <__i2b>
 800898c:	2300      	movs	r3, #0
 800898e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008992:	4604      	mov	r4, r0
 8008994:	6003      	str	r3, [r0, #0]
 8008996:	f04f 0900 	mov.w	r9, #0
 800899a:	07eb      	lsls	r3, r5, #31
 800899c:	d50a      	bpl.n	80089b4 <__pow5mult+0x84>
 800899e:	4639      	mov	r1, r7
 80089a0:	4622      	mov	r2, r4
 80089a2:	4630      	mov	r0, r6
 80089a4:	f7ff ff1a 	bl	80087dc <__multiply>
 80089a8:	4639      	mov	r1, r7
 80089aa:	4680      	mov	r8, r0
 80089ac:	4630      	mov	r0, r6
 80089ae:	f7ff fe47 	bl	8008640 <_Bfree>
 80089b2:	4647      	mov	r7, r8
 80089b4:	106d      	asrs	r5, r5, #1
 80089b6:	d00b      	beq.n	80089d0 <__pow5mult+0xa0>
 80089b8:	6820      	ldr	r0, [r4, #0]
 80089ba:	b938      	cbnz	r0, 80089cc <__pow5mult+0x9c>
 80089bc:	4622      	mov	r2, r4
 80089be:	4621      	mov	r1, r4
 80089c0:	4630      	mov	r0, r6
 80089c2:	f7ff ff0b 	bl	80087dc <__multiply>
 80089c6:	6020      	str	r0, [r4, #0]
 80089c8:	f8c0 9000 	str.w	r9, [r0]
 80089cc:	4604      	mov	r4, r0
 80089ce:	e7e4      	b.n	800899a <__pow5mult+0x6a>
 80089d0:	4638      	mov	r0, r7
 80089d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089d6:	bf00      	nop
 80089d8:	0800b6b8 	.word	0x0800b6b8
 80089dc:	0800b485 	.word	0x0800b485
 80089e0:	0800b568 	.word	0x0800b568

080089e4 <__lshift>:
 80089e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089e8:	460c      	mov	r4, r1
 80089ea:	6849      	ldr	r1, [r1, #4]
 80089ec:	6923      	ldr	r3, [r4, #16]
 80089ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089f2:	68a3      	ldr	r3, [r4, #8]
 80089f4:	4607      	mov	r7, r0
 80089f6:	4691      	mov	r9, r2
 80089f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089fc:	f108 0601 	add.w	r6, r8, #1
 8008a00:	42b3      	cmp	r3, r6
 8008a02:	db0b      	blt.n	8008a1c <__lshift+0x38>
 8008a04:	4638      	mov	r0, r7
 8008a06:	f7ff fddb 	bl	80085c0 <_Balloc>
 8008a0a:	4605      	mov	r5, r0
 8008a0c:	b948      	cbnz	r0, 8008a22 <__lshift+0x3e>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	4b2a      	ldr	r3, [pc, #168]	; (8008abc <__lshift+0xd8>)
 8008a12:	482b      	ldr	r0, [pc, #172]	; (8008ac0 <__lshift+0xdc>)
 8008a14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008a18:	f000 fc0c 	bl	8009234 <__assert_func>
 8008a1c:	3101      	adds	r1, #1
 8008a1e:	005b      	lsls	r3, r3, #1
 8008a20:	e7ee      	b.n	8008a00 <__lshift+0x1c>
 8008a22:	2300      	movs	r3, #0
 8008a24:	f100 0114 	add.w	r1, r0, #20
 8008a28:	f100 0210 	add.w	r2, r0, #16
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	4553      	cmp	r3, sl
 8008a30:	db37      	blt.n	8008aa2 <__lshift+0xbe>
 8008a32:	6920      	ldr	r0, [r4, #16]
 8008a34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a38:	f104 0314 	add.w	r3, r4, #20
 8008a3c:	f019 091f 	ands.w	r9, r9, #31
 8008a40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008a48:	d02f      	beq.n	8008aaa <__lshift+0xc6>
 8008a4a:	f1c9 0e20 	rsb	lr, r9, #32
 8008a4e:	468a      	mov	sl, r1
 8008a50:	f04f 0c00 	mov.w	ip, #0
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	fa02 f209 	lsl.w	r2, r2, r9
 8008a5a:	ea42 020c 	orr.w	r2, r2, ip
 8008a5e:	f84a 2b04 	str.w	r2, [sl], #4
 8008a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a66:	4298      	cmp	r0, r3
 8008a68:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008a6c:	d8f2      	bhi.n	8008a54 <__lshift+0x70>
 8008a6e:	1b03      	subs	r3, r0, r4
 8008a70:	3b15      	subs	r3, #21
 8008a72:	f023 0303 	bic.w	r3, r3, #3
 8008a76:	3304      	adds	r3, #4
 8008a78:	f104 0215 	add.w	r2, r4, #21
 8008a7c:	4290      	cmp	r0, r2
 8008a7e:	bf38      	it	cc
 8008a80:	2304      	movcc	r3, #4
 8008a82:	f841 c003 	str.w	ip, [r1, r3]
 8008a86:	f1bc 0f00 	cmp.w	ip, #0
 8008a8a:	d001      	beq.n	8008a90 <__lshift+0xac>
 8008a8c:	f108 0602 	add.w	r6, r8, #2
 8008a90:	3e01      	subs	r6, #1
 8008a92:	4638      	mov	r0, r7
 8008a94:	612e      	str	r6, [r5, #16]
 8008a96:	4621      	mov	r1, r4
 8008a98:	f7ff fdd2 	bl	8008640 <_Bfree>
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	e7c1      	b.n	8008a2e <__lshift+0x4a>
 8008aaa:	3904      	subs	r1, #4
 8008aac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ab0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ab4:	4298      	cmp	r0, r3
 8008ab6:	d8f9      	bhi.n	8008aac <__lshift+0xc8>
 8008ab8:	e7ea      	b.n	8008a90 <__lshift+0xac>
 8008aba:	bf00      	nop
 8008abc:	0800b4f7 	.word	0x0800b4f7
 8008ac0:	0800b568 	.word	0x0800b568

08008ac4 <__mcmp>:
 8008ac4:	b530      	push	{r4, r5, lr}
 8008ac6:	6902      	ldr	r2, [r0, #16]
 8008ac8:	690c      	ldr	r4, [r1, #16]
 8008aca:	1b12      	subs	r2, r2, r4
 8008acc:	d10e      	bne.n	8008aec <__mcmp+0x28>
 8008ace:	f100 0314 	add.w	r3, r0, #20
 8008ad2:	3114      	adds	r1, #20
 8008ad4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008ad8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008adc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ae0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ae4:	42a5      	cmp	r5, r4
 8008ae6:	d003      	beq.n	8008af0 <__mcmp+0x2c>
 8008ae8:	d305      	bcc.n	8008af6 <__mcmp+0x32>
 8008aea:	2201      	movs	r2, #1
 8008aec:	4610      	mov	r0, r2
 8008aee:	bd30      	pop	{r4, r5, pc}
 8008af0:	4283      	cmp	r3, r0
 8008af2:	d3f3      	bcc.n	8008adc <__mcmp+0x18>
 8008af4:	e7fa      	b.n	8008aec <__mcmp+0x28>
 8008af6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008afa:	e7f7      	b.n	8008aec <__mcmp+0x28>

08008afc <__mdiff>:
 8008afc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b00:	460c      	mov	r4, r1
 8008b02:	4606      	mov	r6, r0
 8008b04:	4611      	mov	r1, r2
 8008b06:	4620      	mov	r0, r4
 8008b08:	4690      	mov	r8, r2
 8008b0a:	f7ff ffdb 	bl	8008ac4 <__mcmp>
 8008b0e:	1e05      	subs	r5, r0, #0
 8008b10:	d110      	bne.n	8008b34 <__mdiff+0x38>
 8008b12:	4629      	mov	r1, r5
 8008b14:	4630      	mov	r0, r6
 8008b16:	f7ff fd53 	bl	80085c0 <_Balloc>
 8008b1a:	b930      	cbnz	r0, 8008b2a <__mdiff+0x2e>
 8008b1c:	4b3a      	ldr	r3, [pc, #232]	; (8008c08 <__mdiff+0x10c>)
 8008b1e:	4602      	mov	r2, r0
 8008b20:	f240 2132 	movw	r1, #562	; 0x232
 8008b24:	4839      	ldr	r0, [pc, #228]	; (8008c0c <__mdiff+0x110>)
 8008b26:	f000 fb85 	bl	8009234 <__assert_func>
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b34:	bfa4      	itt	ge
 8008b36:	4643      	movge	r3, r8
 8008b38:	46a0      	movge	r8, r4
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b40:	bfa6      	itte	ge
 8008b42:	461c      	movge	r4, r3
 8008b44:	2500      	movge	r5, #0
 8008b46:	2501      	movlt	r5, #1
 8008b48:	f7ff fd3a 	bl	80085c0 <_Balloc>
 8008b4c:	b920      	cbnz	r0, 8008b58 <__mdiff+0x5c>
 8008b4e:	4b2e      	ldr	r3, [pc, #184]	; (8008c08 <__mdiff+0x10c>)
 8008b50:	4602      	mov	r2, r0
 8008b52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008b56:	e7e5      	b.n	8008b24 <__mdiff+0x28>
 8008b58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008b5c:	6926      	ldr	r6, [r4, #16]
 8008b5e:	60c5      	str	r5, [r0, #12]
 8008b60:	f104 0914 	add.w	r9, r4, #20
 8008b64:	f108 0514 	add.w	r5, r8, #20
 8008b68:	f100 0e14 	add.w	lr, r0, #20
 8008b6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008b70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b74:	f108 0210 	add.w	r2, r8, #16
 8008b78:	46f2      	mov	sl, lr
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b84:	fa1f f883 	uxth.w	r8, r3
 8008b88:	fa11 f18b 	uxtah	r1, r1, fp
 8008b8c:	0c1b      	lsrs	r3, r3, #16
 8008b8e:	eba1 0808 	sub.w	r8, r1, r8
 8008b92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b9a:	fa1f f888 	uxth.w	r8, r8
 8008b9e:	1419      	asrs	r1, r3, #16
 8008ba0:	454e      	cmp	r6, r9
 8008ba2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ba6:	f84a 3b04 	str.w	r3, [sl], #4
 8008baa:	d8e7      	bhi.n	8008b7c <__mdiff+0x80>
 8008bac:	1b33      	subs	r3, r6, r4
 8008bae:	3b15      	subs	r3, #21
 8008bb0:	f023 0303 	bic.w	r3, r3, #3
 8008bb4:	3304      	adds	r3, #4
 8008bb6:	3415      	adds	r4, #21
 8008bb8:	42a6      	cmp	r6, r4
 8008bba:	bf38      	it	cc
 8008bbc:	2304      	movcc	r3, #4
 8008bbe:	441d      	add	r5, r3
 8008bc0:	4473      	add	r3, lr
 8008bc2:	469e      	mov	lr, r3
 8008bc4:	462e      	mov	r6, r5
 8008bc6:	4566      	cmp	r6, ip
 8008bc8:	d30e      	bcc.n	8008be8 <__mdiff+0xec>
 8008bca:	f10c 0203 	add.w	r2, ip, #3
 8008bce:	1b52      	subs	r2, r2, r5
 8008bd0:	f022 0203 	bic.w	r2, r2, #3
 8008bd4:	3d03      	subs	r5, #3
 8008bd6:	45ac      	cmp	ip, r5
 8008bd8:	bf38      	it	cc
 8008bda:	2200      	movcc	r2, #0
 8008bdc:	441a      	add	r2, r3
 8008bde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008be2:	b17b      	cbz	r3, 8008c04 <__mdiff+0x108>
 8008be4:	6107      	str	r7, [r0, #16]
 8008be6:	e7a3      	b.n	8008b30 <__mdiff+0x34>
 8008be8:	f856 8b04 	ldr.w	r8, [r6], #4
 8008bec:	fa11 f288 	uxtah	r2, r1, r8
 8008bf0:	1414      	asrs	r4, r2, #16
 8008bf2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008bf6:	b292      	uxth	r2, r2
 8008bf8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008bfc:	f84e 2b04 	str.w	r2, [lr], #4
 8008c00:	1421      	asrs	r1, r4, #16
 8008c02:	e7e0      	b.n	8008bc6 <__mdiff+0xca>
 8008c04:	3f01      	subs	r7, #1
 8008c06:	e7ea      	b.n	8008bde <__mdiff+0xe2>
 8008c08:	0800b4f7 	.word	0x0800b4f7
 8008c0c:	0800b568 	.word	0x0800b568

08008c10 <__d2b>:
 8008c10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c14:	4689      	mov	r9, r1
 8008c16:	2101      	movs	r1, #1
 8008c18:	ec57 6b10 	vmov	r6, r7, d0
 8008c1c:	4690      	mov	r8, r2
 8008c1e:	f7ff fccf 	bl	80085c0 <_Balloc>
 8008c22:	4604      	mov	r4, r0
 8008c24:	b930      	cbnz	r0, 8008c34 <__d2b+0x24>
 8008c26:	4602      	mov	r2, r0
 8008c28:	4b25      	ldr	r3, [pc, #148]	; (8008cc0 <__d2b+0xb0>)
 8008c2a:	4826      	ldr	r0, [pc, #152]	; (8008cc4 <__d2b+0xb4>)
 8008c2c:	f240 310a 	movw	r1, #778	; 0x30a
 8008c30:	f000 fb00 	bl	8009234 <__assert_func>
 8008c34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008c38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c3c:	bb35      	cbnz	r5, 8008c8c <__d2b+0x7c>
 8008c3e:	2e00      	cmp	r6, #0
 8008c40:	9301      	str	r3, [sp, #4]
 8008c42:	d028      	beq.n	8008c96 <__d2b+0x86>
 8008c44:	4668      	mov	r0, sp
 8008c46:	9600      	str	r6, [sp, #0]
 8008c48:	f7ff fd82 	bl	8008750 <__lo0bits>
 8008c4c:	9900      	ldr	r1, [sp, #0]
 8008c4e:	b300      	cbz	r0, 8008c92 <__d2b+0x82>
 8008c50:	9a01      	ldr	r2, [sp, #4]
 8008c52:	f1c0 0320 	rsb	r3, r0, #32
 8008c56:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5a:	430b      	orrs	r3, r1
 8008c5c:	40c2      	lsrs	r2, r0
 8008c5e:	6163      	str	r3, [r4, #20]
 8008c60:	9201      	str	r2, [sp, #4]
 8008c62:	9b01      	ldr	r3, [sp, #4]
 8008c64:	61a3      	str	r3, [r4, #24]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	bf14      	ite	ne
 8008c6a:	2202      	movne	r2, #2
 8008c6c:	2201      	moveq	r2, #1
 8008c6e:	6122      	str	r2, [r4, #16]
 8008c70:	b1d5      	cbz	r5, 8008ca8 <__d2b+0x98>
 8008c72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c76:	4405      	add	r5, r0
 8008c78:	f8c9 5000 	str.w	r5, [r9]
 8008c7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c80:	f8c8 0000 	str.w	r0, [r8]
 8008c84:	4620      	mov	r0, r4
 8008c86:	b003      	add	sp, #12
 8008c88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c90:	e7d5      	b.n	8008c3e <__d2b+0x2e>
 8008c92:	6161      	str	r1, [r4, #20]
 8008c94:	e7e5      	b.n	8008c62 <__d2b+0x52>
 8008c96:	a801      	add	r0, sp, #4
 8008c98:	f7ff fd5a 	bl	8008750 <__lo0bits>
 8008c9c:	9b01      	ldr	r3, [sp, #4]
 8008c9e:	6163      	str	r3, [r4, #20]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	6122      	str	r2, [r4, #16]
 8008ca4:	3020      	adds	r0, #32
 8008ca6:	e7e3      	b.n	8008c70 <__d2b+0x60>
 8008ca8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008cac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008cb0:	f8c9 0000 	str.w	r0, [r9]
 8008cb4:	6918      	ldr	r0, [r3, #16]
 8008cb6:	f7ff fd2b 	bl	8008710 <__hi0bits>
 8008cba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008cbe:	e7df      	b.n	8008c80 <__d2b+0x70>
 8008cc0:	0800b4f7 	.word	0x0800b4f7
 8008cc4:	0800b568 	.word	0x0800b568

08008cc8 <_calloc_r>:
 8008cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cca:	fba1 2402 	umull	r2, r4, r1, r2
 8008cce:	b94c      	cbnz	r4, 8008ce4 <_calloc_r+0x1c>
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	9201      	str	r2, [sp, #4]
 8008cd4:	f000 f87a 	bl	8008dcc <_malloc_r>
 8008cd8:	9a01      	ldr	r2, [sp, #4]
 8008cda:	4605      	mov	r5, r0
 8008cdc:	b930      	cbnz	r0, 8008cec <_calloc_r+0x24>
 8008cde:	4628      	mov	r0, r5
 8008ce0:	b003      	add	sp, #12
 8008ce2:	bd30      	pop	{r4, r5, pc}
 8008ce4:	220c      	movs	r2, #12
 8008ce6:	6002      	str	r2, [r0, #0]
 8008ce8:	2500      	movs	r5, #0
 8008cea:	e7f8      	b.n	8008cde <_calloc_r+0x16>
 8008cec:	4621      	mov	r1, r4
 8008cee:	f7fd fdf1 	bl	80068d4 <memset>
 8008cf2:	e7f4      	b.n	8008cde <_calloc_r+0x16>

08008cf4 <_free_r>:
 8008cf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cf6:	2900      	cmp	r1, #0
 8008cf8:	d044      	beq.n	8008d84 <_free_r+0x90>
 8008cfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cfe:	9001      	str	r0, [sp, #4]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f1a1 0404 	sub.w	r4, r1, #4
 8008d06:	bfb8      	it	lt
 8008d08:	18e4      	addlt	r4, r4, r3
 8008d0a:	f000 fb19 	bl	8009340 <__malloc_lock>
 8008d0e:	4a1e      	ldr	r2, [pc, #120]	; (8008d88 <_free_r+0x94>)
 8008d10:	9801      	ldr	r0, [sp, #4]
 8008d12:	6813      	ldr	r3, [r2, #0]
 8008d14:	b933      	cbnz	r3, 8008d24 <_free_r+0x30>
 8008d16:	6063      	str	r3, [r4, #4]
 8008d18:	6014      	str	r4, [r2, #0]
 8008d1a:	b003      	add	sp, #12
 8008d1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d20:	f000 bb14 	b.w	800934c <__malloc_unlock>
 8008d24:	42a3      	cmp	r3, r4
 8008d26:	d908      	bls.n	8008d3a <_free_r+0x46>
 8008d28:	6825      	ldr	r5, [r4, #0]
 8008d2a:	1961      	adds	r1, r4, r5
 8008d2c:	428b      	cmp	r3, r1
 8008d2e:	bf01      	itttt	eq
 8008d30:	6819      	ldreq	r1, [r3, #0]
 8008d32:	685b      	ldreq	r3, [r3, #4]
 8008d34:	1949      	addeq	r1, r1, r5
 8008d36:	6021      	streq	r1, [r4, #0]
 8008d38:	e7ed      	b.n	8008d16 <_free_r+0x22>
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	b10b      	cbz	r3, 8008d44 <_free_r+0x50>
 8008d40:	42a3      	cmp	r3, r4
 8008d42:	d9fa      	bls.n	8008d3a <_free_r+0x46>
 8008d44:	6811      	ldr	r1, [r2, #0]
 8008d46:	1855      	adds	r5, r2, r1
 8008d48:	42a5      	cmp	r5, r4
 8008d4a:	d10b      	bne.n	8008d64 <_free_r+0x70>
 8008d4c:	6824      	ldr	r4, [r4, #0]
 8008d4e:	4421      	add	r1, r4
 8008d50:	1854      	adds	r4, r2, r1
 8008d52:	42a3      	cmp	r3, r4
 8008d54:	6011      	str	r1, [r2, #0]
 8008d56:	d1e0      	bne.n	8008d1a <_free_r+0x26>
 8008d58:	681c      	ldr	r4, [r3, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	6053      	str	r3, [r2, #4]
 8008d5e:	4421      	add	r1, r4
 8008d60:	6011      	str	r1, [r2, #0]
 8008d62:	e7da      	b.n	8008d1a <_free_r+0x26>
 8008d64:	d902      	bls.n	8008d6c <_free_r+0x78>
 8008d66:	230c      	movs	r3, #12
 8008d68:	6003      	str	r3, [r0, #0]
 8008d6a:	e7d6      	b.n	8008d1a <_free_r+0x26>
 8008d6c:	6825      	ldr	r5, [r4, #0]
 8008d6e:	1961      	adds	r1, r4, r5
 8008d70:	428b      	cmp	r3, r1
 8008d72:	bf04      	itt	eq
 8008d74:	6819      	ldreq	r1, [r3, #0]
 8008d76:	685b      	ldreq	r3, [r3, #4]
 8008d78:	6063      	str	r3, [r4, #4]
 8008d7a:	bf04      	itt	eq
 8008d7c:	1949      	addeq	r1, r1, r5
 8008d7e:	6021      	streq	r1, [r4, #0]
 8008d80:	6054      	str	r4, [r2, #4]
 8008d82:	e7ca      	b.n	8008d1a <_free_r+0x26>
 8008d84:	b003      	add	sp, #12
 8008d86:	bd30      	pop	{r4, r5, pc}
 8008d88:	2000032c 	.word	0x2000032c

08008d8c <sbrk_aligned>:
 8008d8c:	b570      	push	{r4, r5, r6, lr}
 8008d8e:	4e0e      	ldr	r6, [pc, #56]	; (8008dc8 <sbrk_aligned+0x3c>)
 8008d90:	460c      	mov	r4, r1
 8008d92:	6831      	ldr	r1, [r6, #0]
 8008d94:	4605      	mov	r5, r0
 8008d96:	b911      	cbnz	r1, 8008d9e <sbrk_aligned+0x12>
 8008d98:	f000 f9e6 	bl	8009168 <_sbrk_r>
 8008d9c:	6030      	str	r0, [r6, #0]
 8008d9e:	4621      	mov	r1, r4
 8008da0:	4628      	mov	r0, r5
 8008da2:	f000 f9e1 	bl	8009168 <_sbrk_r>
 8008da6:	1c43      	adds	r3, r0, #1
 8008da8:	d00a      	beq.n	8008dc0 <sbrk_aligned+0x34>
 8008daa:	1cc4      	adds	r4, r0, #3
 8008dac:	f024 0403 	bic.w	r4, r4, #3
 8008db0:	42a0      	cmp	r0, r4
 8008db2:	d007      	beq.n	8008dc4 <sbrk_aligned+0x38>
 8008db4:	1a21      	subs	r1, r4, r0
 8008db6:	4628      	mov	r0, r5
 8008db8:	f000 f9d6 	bl	8009168 <_sbrk_r>
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	d101      	bne.n	8008dc4 <sbrk_aligned+0x38>
 8008dc0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	bd70      	pop	{r4, r5, r6, pc}
 8008dc8:	20000330 	.word	0x20000330

08008dcc <_malloc_r>:
 8008dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd0:	1ccd      	adds	r5, r1, #3
 8008dd2:	f025 0503 	bic.w	r5, r5, #3
 8008dd6:	3508      	adds	r5, #8
 8008dd8:	2d0c      	cmp	r5, #12
 8008dda:	bf38      	it	cc
 8008ddc:	250c      	movcc	r5, #12
 8008dde:	2d00      	cmp	r5, #0
 8008de0:	4607      	mov	r7, r0
 8008de2:	db01      	blt.n	8008de8 <_malloc_r+0x1c>
 8008de4:	42a9      	cmp	r1, r5
 8008de6:	d905      	bls.n	8008df4 <_malloc_r+0x28>
 8008de8:	230c      	movs	r3, #12
 8008dea:	603b      	str	r3, [r7, #0]
 8008dec:	2600      	movs	r6, #0
 8008dee:	4630      	mov	r0, r6
 8008df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008df4:	4e2e      	ldr	r6, [pc, #184]	; (8008eb0 <_malloc_r+0xe4>)
 8008df6:	f000 faa3 	bl	8009340 <__malloc_lock>
 8008dfa:	6833      	ldr	r3, [r6, #0]
 8008dfc:	461c      	mov	r4, r3
 8008dfe:	bb34      	cbnz	r4, 8008e4e <_malloc_r+0x82>
 8008e00:	4629      	mov	r1, r5
 8008e02:	4638      	mov	r0, r7
 8008e04:	f7ff ffc2 	bl	8008d8c <sbrk_aligned>
 8008e08:	1c43      	adds	r3, r0, #1
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	d14d      	bne.n	8008eaa <_malloc_r+0xde>
 8008e0e:	6834      	ldr	r4, [r6, #0]
 8008e10:	4626      	mov	r6, r4
 8008e12:	2e00      	cmp	r6, #0
 8008e14:	d140      	bne.n	8008e98 <_malloc_r+0xcc>
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	4631      	mov	r1, r6
 8008e1a:	4638      	mov	r0, r7
 8008e1c:	eb04 0803 	add.w	r8, r4, r3
 8008e20:	f000 f9a2 	bl	8009168 <_sbrk_r>
 8008e24:	4580      	cmp	r8, r0
 8008e26:	d13a      	bne.n	8008e9e <_malloc_r+0xd2>
 8008e28:	6821      	ldr	r1, [r4, #0]
 8008e2a:	3503      	adds	r5, #3
 8008e2c:	1a6d      	subs	r5, r5, r1
 8008e2e:	f025 0503 	bic.w	r5, r5, #3
 8008e32:	3508      	adds	r5, #8
 8008e34:	2d0c      	cmp	r5, #12
 8008e36:	bf38      	it	cc
 8008e38:	250c      	movcc	r5, #12
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	4638      	mov	r0, r7
 8008e3e:	f7ff ffa5 	bl	8008d8c <sbrk_aligned>
 8008e42:	3001      	adds	r0, #1
 8008e44:	d02b      	beq.n	8008e9e <_malloc_r+0xd2>
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	442b      	add	r3, r5
 8008e4a:	6023      	str	r3, [r4, #0]
 8008e4c:	e00e      	b.n	8008e6c <_malloc_r+0xa0>
 8008e4e:	6822      	ldr	r2, [r4, #0]
 8008e50:	1b52      	subs	r2, r2, r5
 8008e52:	d41e      	bmi.n	8008e92 <_malloc_r+0xc6>
 8008e54:	2a0b      	cmp	r2, #11
 8008e56:	d916      	bls.n	8008e86 <_malloc_r+0xba>
 8008e58:	1961      	adds	r1, r4, r5
 8008e5a:	42a3      	cmp	r3, r4
 8008e5c:	6025      	str	r5, [r4, #0]
 8008e5e:	bf18      	it	ne
 8008e60:	6059      	strne	r1, [r3, #4]
 8008e62:	6863      	ldr	r3, [r4, #4]
 8008e64:	bf08      	it	eq
 8008e66:	6031      	streq	r1, [r6, #0]
 8008e68:	5162      	str	r2, [r4, r5]
 8008e6a:	604b      	str	r3, [r1, #4]
 8008e6c:	4638      	mov	r0, r7
 8008e6e:	f104 060b 	add.w	r6, r4, #11
 8008e72:	f000 fa6b 	bl	800934c <__malloc_unlock>
 8008e76:	f026 0607 	bic.w	r6, r6, #7
 8008e7a:	1d23      	adds	r3, r4, #4
 8008e7c:	1af2      	subs	r2, r6, r3
 8008e7e:	d0b6      	beq.n	8008dee <_malloc_r+0x22>
 8008e80:	1b9b      	subs	r3, r3, r6
 8008e82:	50a3      	str	r3, [r4, r2]
 8008e84:	e7b3      	b.n	8008dee <_malloc_r+0x22>
 8008e86:	6862      	ldr	r2, [r4, #4]
 8008e88:	42a3      	cmp	r3, r4
 8008e8a:	bf0c      	ite	eq
 8008e8c:	6032      	streq	r2, [r6, #0]
 8008e8e:	605a      	strne	r2, [r3, #4]
 8008e90:	e7ec      	b.n	8008e6c <_malloc_r+0xa0>
 8008e92:	4623      	mov	r3, r4
 8008e94:	6864      	ldr	r4, [r4, #4]
 8008e96:	e7b2      	b.n	8008dfe <_malloc_r+0x32>
 8008e98:	4634      	mov	r4, r6
 8008e9a:	6876      	ldr	r6, [r6, #4]
 8008e9c:	e7b9      	b.n	8008e12 <_malloc_r+0x46>
 8008e9e:	230c      	movs	r3, #12
 8008ea0:	603b      	str	r3, [r7, #0]
 8008ea2:	4638      	mov	r0, r7
 8008ea4:	f000 fa52 	bl	800934c <__malloc_unlock>
 8008ea8:	e7a1      	b.n	8008dee <_malloc_r+0x22>
 8008eaa:	6025      	str	r5, [r4, #0]
 8008eac:	e7de      	b.n	8008e6c <_malloc_r+0xa0>
 8008eae:	bf00      	nop
 8008eb0:	2000032c 	.word	0x2000032c

08008eb4 <__sfputc_r>:
 8008eb4:	6893      	ldr	r3, [r2, #8]
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	b410      	push	{r4}
 8008ebc:	6093      	str	r3, [r2, #8]
 8008ebe:	da08      	bge.n	8008ed2 <__sfputc_r+0x1e>
 8008ec0:	6994      	ldr	r4, [r2, #24]
 8008ec2:	42a3      	cmp	r3, r4
 8008ec4:	db01      	blt.n	8008eca <__sfputc_r+0x16>
 8008ec6:	290a      	cmp	r1, #10
 8008ec8:	d103      	bne.n	8008ed2 <__sfputc_r+0x1e>
 8008eca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ece:	f7fe ba01 	b.w	80072d4 <__swbuf_r>
 8008ed2:	6813      	ldr	r3, [r2, #0]
 8008ed4:	1c58      	adds	r0, r3, #1
 8008ed6:	6010      	str	r0, [r2, #0]
 8008ed8:	7019      	strb	r1, [r3, #0]
 8008eda:	4608      	mov	r0, r1
 8008edc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <__sfputs_r>:
 8008ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee4:	4606      	mov	r6, r0
 8008ee6:	460f      	mov	r7, r1
 8008ee8:	4614      	mov	r4, r2
 8008eea:	18d5      	adds	r5, r2, r3
 8008eec:	42ac      	cmp	r4, r5
 8008eee:	d101      	bne.n	8008ef4 <__sfputs_r+0x12>
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	e007      	b.n	8008f04 <__sfputs_r+0x22>
 8008ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef8:	463a      	mov	r2, r7
 8008efa:	4630      	mov	r0, r6
 8008efc:	f7ff ffda 	bl	8008eb4 <__sfputc_r>
 8008f00:	1c43      	adds	r3, r0, #1
 8008f02:	d1f3      	bne.n	8008eec <__sfputs_r+0xa>
 8008f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f08 <_vfiprintf_r>:
 8008f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f0c:	460d      	mov	r5, r1
 8008f0e:	b09d      	sub	sp, #116	; 0x74
 8008f10:	4614      	mov	r4, r2
 8008f12:	4698      	mov	r8, r3
 8008f14:	4606      	mov	r6, r0
 8008f16:	b118      	cbz	r0, 8008f20 <_vfiprintf_r+0x18>
 8008f18:	6983      	ldr	r3, [r0, #24]
 8008f1a:	b90b      	cbnz	r3, 8008f20 <_vfiprintf_r+0x18>
 8008f1c:	f7ff fa30 	bl	8008380 <__sinit>
 8008f20:	4b89      	ldr	r3, [pc, #548]	; (8009148 <_vfiprintf_r+0x240>)
 8008f22:	429d      	cmp	r5, r3
 8008f24:	d11b      	bne.n	8008f5e <_vfiprintf_r+0x56>
 8008f26:	6875      	ldr	r5, [r6, #4]
 8008f28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f2a:	07d9      	lsls	r1, r3, #31
 8008f2c:	d405      	bmi.n	8008f3a <_vfiprintf_r+0x32>
 8008f2e:	89ab      	ldrh	r3, [r5, #12]
 8008f30:	059a      	lsls	r2, r3, #22
 8008f32:	d402      	bmi.n	8008f3a <_vfiprintf_r+0x32>
 8008f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f36:	f7ff fac6 	bl	80084c6 <__retarget_lock_acquire_recursive>
 8008f3a:	89ab      	ldrh	r3, [r5, #12]
 8008f3c:	071b      	lsls	r3, r3, #28
 8008f3e:	d501      	bpl.n	8008f44 <_vfiprintf_r+0x3c>
 8008f40:	692b      	ldr	r3, [r5, #16]
 8008f42:	b9eb      	cbnz	r3, 8008f80 <_vfiprintf_r+0x78>
 8008f44:	4629      	mov	r1, r5
 8008f46:	4630      	mov	r0, r6
 8008f48:	f7fe fa16 	bl	8007378 <__swsetup_r>
 8008f4c:	b1c0      	cbz	r0, 8008f80 <_vfiprintf_r+0x78>
 8008f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f50:	07dc      	lsls	r4, r3, #31
 8008f52:	d50e      	bpl.n	8008f72 <_vfiprintf_r+0x6a>
 8008f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f58:	b01d      	add	sp, #116	; 0x74
 8008f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5e:	4b7b      	ldr	r3, [pc, #492]	; (800914c <_vfiprintf_r+0x244>)
 8008f60:	429d      	cmp	r5, r3
 8008f62:	d101      	bne.n	8008f68 <_vfiprintf_r+0x60>
 8008f64:	68b5      	ldr	r5, [r6, #8]
 8008f66:	e7df      	b.n	8008f28 <_vfiprintf_r+0x20>
 8008f68:	4b79      	ldr	r3, [pc, #484]	; (8009150 <_vfiprintf_r+0x248>)
 8008f6a:	429d      	cmp	r5, r3
 8008f6c:	bf08      	it	eq
 8008f6e:	68f5      	ldreq	r5, [r6, #12]
 8008f70:	e7da      	b.n	8008f28 <_vfiprintf_r+0x20>
 8008f72:	89ab      	ldrh	r3, [r5, #12]
 8008f74:	0598      	lsls	r0, r3, #22
 8008f76:	d4ed      	bmi.n	8008f54 <_vfiprintf_r+0x4c>
 8008f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f7a:	f7ff faa5 	bl	80084c8 <__retarget_lock_release_recursive>
 8008f7e:	e7e9      	b.n	8008f54 <_vfiprintf_r+0x4c>
 8008f80:	2300      	movs	r3, #0
 8008f82:	9309      	str	r3, [sp, #36]	; 0x24
 8008f84:	2320      	movs	r3, #32
 8008f86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f8e:	2330      	movs	r3, #48	; 0x30
 8008f90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009154 <_vfiprintf_r+0x24c>
 8008f94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f98:	f04f 0901 	mov.w	r9, #1
 8008f9c:	4623      	mov	r3, r4
 8008f9e:	469a      	mov	sl, r3
 8008fa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fa4:	b10a      	cbz	r2, 8008faa <_vfiprintf_r+0xa2>
 8008fa6:	2a25      	cmp	r2, #37	; 0x25
 8008fa8:	d1f9      	bne.n	8008f9e <_vfiprintf_r+0x96>
 8008faa:	ebba 0b04 	subs.w	fp, sl, r4
 8008fae:	d00b      	beq.n	8008fc8 <_vfiprintf_r+0xc0>
 8008fb0:	465b      	mov	r3, fp
 8008fb2:	4622      	mov	r2, r4
 8008fb4:	4629      	mov	r1, r5
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f7ff ff93 	bl	8008ee2 <__sfputs_r>
 8008fbc:	3001      	adds	r0, #1
 8008fbe:	f000 80aa 	beq.w	8009116 <_vfiprintf_r+0x20e>
 8008fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fc4:	445a      	add	r2, fp
 8008fc6:	9209      	str	r2, [sp, #36]	; 0x24
 8008fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f000 80a2 	beq.w	8009116 <_vfiprintf_r+0x20e>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fdc:	f10a 0a01 	add.w	sl, sl, #1
 8008fe0:	9304      	str	r3, [sp, #16]
 8008fe2:	9307      	str	r3, [sp, #28]
 8008fe4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fe8:	931a      	str	r3, [sp, #104]	; 0x68
 8008fea:	4654      	mov	r4, sl
 8008fec:	2205      	movs	r2, #5
 8008fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff2:	4858      	ldr	r0, [pc, #352]	; (8009154 <_vfiprintf_r+0x24c>)
 8008ff4:	f7f7 f914 	bl	8000220 <memchr>
 8008ff8:	9a04      	ldr	r2, [sp, #16]
 8008ffa:	b9d8      	cbnz	r0, 8009034 <_vfiprintf_r+0x12c>
 8008ffc:	06d1      	lsls	r1, r2, #27
 8008ffe:	bf44      	itt	mi
 8009000:	2320      	movmi	r3, #32
 8009002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009006:	0713      	lsls	r3, r2, #28
 8009008:	bf44      	itt	mi
 800900a:	232b      	movmi	r3, #43	; 0x2b
 800900c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009010:	f89a 3000 	ldrb.w	r3, [sl]
 8009014:	2b2a      	cmp	r3, #42	; 0x2a
 8009016:	d015      	beq.n	8009044 <_vfiprintf_r+0x13c>
 8009018:	9a07      	ldr	r2, [sp, #28]
 800901a:	4654      	mov	r4, sl
 800901c:	2000      	movs	r0, #0
 800901e:	f04f 0c0a 	mov.w	ip, #10
 8009022:	4621      	mov	r1, r4
 8009024:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009028:	3b30      	subs	r3, #48	; 0x30
 800902a:	2b09      	cmp	r3, #9
 800902c:	d94e      	bls.n	80090cc <_vfiprintf_r+0x1c4>
 800902e:	b1b0      	cbz	r0, 800905e <_vfiprintf_r+0x156>
 8009030:	9207      	str	r2, [sp, #28]
 8009032:	e014      	b.n	800905e <_vfiprintf_r+0x156>
 8009034:	eba0 0308 	sub.w	r3, r0, r8
 8009038:	fa09 f303 	lsl.w	r3, r9, r3
 800903c:	4313      	orrs	r3, r2
 800903e:	9304      	str	r3, [sp, #16]
 8009040:	46a2      	mov	sl, r4
 8009042:	e7d2      	b.n	8008fea <_vfiprintf_r+0xe2>
 8009044:	9b03      	ldr	r3, [sp, #12]
 8009046:	1d19      	adds	r1, r3, #4
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	9103      	str	r1, [sp, #12]
 800904c:	2b00      	cmp	r3, #0
 800904e:	bfbb      	ittet	lt
 8009050:	425b      	neglt	r3, r3
 8009052:	f042 0202 	orrlt.w	r2, r2, #2
 8009056:	9307      	strge	r3, [sp, #28]
 8009058:	9307      	strlt	r3, [sp, #28]
 800905a:	bfb8      	it	lt
 800905c:	9204      	strlt	r2, [sp, #16]
 800905e:	7823      	ldrb	r3, [r4, #0]
 8009060:	2b2e      	cmp	r3, #46	; 0x2e
 8009062:	d10c      	bne.n	800907e <_vfiprintf_r+0x176>
 8009064:	7863      	ldrb	r3, [r4, #1]
 8009066:	2b2a      	cmp	r3, #42	; 0x2a
 8009068:	d135      	bne.n	80090d6 <_vfiprintf_r+0x1ce>
 800906a:	9b03      	ldr	r3, [sp, #12]
 800906c:	1d1a      	adds	r2, r3, #4
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	9203      	str	r2, [sp, #12]
 8009072:	2b00      	cmp	r3, #0
 8009074:	bfb8      	it	lt
 8009076:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800907a:	3402      	adds	r4, #2
 800907c:	9305      	str	r3, [sp, #20]
 800907e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009164 <_vfiprintf_r+0x25c>
 8009082:	7821      	ldrb	r1, [r4, #0]
 8009084:	2203      	movs	r2, #3
 8009086:	4650      	mov	r0, sl
 8009088:	f7f7 f8ca 	bl	8000220 <memchr>
 800908c:	b140      	cbz	r0, 80090a0 <_vfiprintf_r+0x198>
 800908e:	2340      	movs	r3, #64	; 0x40
 8009090:	eba0 000a 	sub.w	r0, r0, sl
 8009094:	fa03 f000 	lsl.w	r0, r3, r0
 8009098:	9b04      	ldr	r3, [sp, #16]
 800909a:	4303      	orrs	r3, r0
 800909c:	3401      	adds	r4, #1
 800909e:	9304      	str	r3, [sp, #16]
 80090a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090a4:	482c      	ldr	r0, [pc, #176]	; (8009158 <_vfiprintf_r+0x250>)
 80090a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090aa:	2206      	movs	r2, #6
 80090ac:	f7f7 f8b8 	bl	8000220 <memchr>
 80090b0:	2800      	cmp	r0, #0
 80090b2:	d03f      	beq.n	8009134 <_vfiprintf_r+0x22c>
 80090b4:	4b29      	ldr	r3, [pc, #164]	; (800915c <_vfiprintf_r+0x254>)
 80090b6:	bb1b      	cbnz	r3, 8009100 <_vfiprintf_r+0x1f8>
 80090b8:	9b03      	ldr	r3, [sp, #12]
 80090ba:	3307      	adds	r3, #7
 80090bc:	f023 0307 	bic.w	r3, r3, #7
 80090c0:	3308      	adds	r3, #8
 80090c2:	9303      	str	r3, [sp, #12]
 80090c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c6:	443b      	add	r3, r7
 80090c8:	9309      	str	r3, [sp, #36]	; 0x24
 80090ca:	e767      	b.n	8008f9c <_vfiprintf_r+0x94>
 80090cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80090d0:	460c      	mov	r4, r1
 80090d2:	2001      	movs	r0, #1
 80090d4:	e7a5      	b.n	8009022 <_vfiprintf_r+0x11a>
 80090d6:	2300      	movs	r3, #0
 80090d8:	3401      	adds	r4, #1
 80090da:	9305      	str	r3, [sp, #20]
 80090dc:	4619      	mov	r1, r3
 80090de:	f04f 0c0a 	mov.w	ip, #10
 80090e2:	4620      	mov	r0, r4
 80090e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090e8:	3a30      	subs	r2, #48	; 0x30
 80090ea:	2a09      	cmp	r2, #9
 80090ec:	d903      	bls.n	80090f6 <_vfiprintf_r+0x1ee>
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d0c5      	beq.n	800907e <_vfiprintf_r+0x176>
 80090f2:	9105      	str	r1, [sp, #20]
 80090f4:	e7c3      	b.n	800907e <_vfiprintf_r+0x176>
 80090f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80090fa:	4604      	mov	r4, r0
 80090fc:	2301      	movs	r3, #1
 80090fe:	e7f0      	b.n	80090e2 <_vfiprintf_r+0x1da>
 8009100:	ab03      	add	r3, sp, #12
 8009102:	9300      	str	r3, [sp, #0]
 8009104:	462a      	mov	r2, r5
 8009106:	4b16      	ldr	r3, [pc, #88]	; (8009160 <_vfiprintf_r+0x258>)
 8009108:	a904      	add	r1, sp, #16
 800910a:	4630      	mov	r0, r6
 800910c:	f7fd fc8a 	bl	8006a24 <_printf_float>
 8009110:	4607      	mov	r7, r0
 8009112:	1c78      	adds	r0, r7, #1
 8009114:	d1d6      	bne.n	80090c4 <_vfiprintf_r+0x1bc>
 8009116:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009118:	07d9      	lsls	r1, r3, #31
 800911a:	d405      	bmi.n	8009128 <_vfiprintf_r+0x220>
 800911c:	89ab      	ldrh	r3, [r5, #12]
 800911e:	059a      	lsls	r2, r3, #22
 8009120:	d402      	bmi.n	8009128 <_vfiprintf_r+0x220>
 8009122:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009124:	f7ff f9d0 	bl	80084c8 <__retarget_lock_release_recursive>
 8009128:	89ab      	ldrh	r3, [r5, #12]
 800912a:	065b      	lsls	r3, r3, #25
 800912c:	f53f af12 	bmi.w	8008f54 <_vfiprintf_r+0x4c>
 8009130:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009132:	e711      	b.n	8008f58 <_vfiprintf_r+0x50>
 8009134:	ab03      	add	r3, sp, #12
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	462a      	mov	r2, r5
 800913a:	4b09      	ldr	r3, [pc, #36]	; (8009160 <_vfiprintf_r+0x258>)
 800913c:	a904      	add	r1, sp, #16
 800913e:	4630      	mov	r0, r6
 8009140:	f7fd ff14 	bl	8006f6c <_printf_i>
 8009144:	e7e4      	b.n	8009110 <_vfiprintf_r+0x208>
 8009146:	bf00      	nop
 8009148:	0800b528 	.word	0x0800b528
 800914c:	0800b548 	.word	0x0800b548
 8009150:	0800b508 	.word	0x0800b508
 8009154:	0800b6c4 	.word	0x0800b6c4
 8009158:	0800b6ce 	.word	0x0800b6ce
 800915c:	08006a25 	.word	0x08006a25
 8009160:	08008ee3 	.word	0x08008ee3
 8009164:	0800b6ca 	.word	0x0800b6ca

08009168 <_sbrk_r>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	4d06      	ldr	r5, [pc, #24]	; (8009184 <_sbrk_r+0x1c>)
 800916c:	2300      	movs	r3, #0
 800916e:	4604      	mov	r4, r0
 8009170:	4608      	mov	r0, r1
 8009172:	602b      	str	r3, [r5, #0]
 8009174:	f7fa f9c4 	bl	8003500 <_sbrk>
 8009178:	1c43      	adds	r3, r0, #1
 800917a:	d102      	bne.n	8009182 <_sbrk_r+0x1a>
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	b103      	cbz	r3, 8009182 <_sbrk_r+0x1a>
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	bd38      	pop	{r3, r4, r5, pc}
 8009184:	20000334 	.word	0x20000334

08009188 <__sread>:
 8009188:	b510      	push	{r4, lr}
 800918a:	460c      	mov	r4, r1
 800918c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009190:	f000 f8e2 	bl	8009358 <_read_r>
 8009194:	2800      	cmp	r0, #0
 8009196:	bfab      	itete	ge
 8009198:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800919a:	89a3      	ldrhlt	r3, [r4, #12]
 800919c:	181b      	addge	r3, r3, r0
 800919e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091a2:	bfac      	ite	ge
 80091a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80091a6:	81a3      	strhlt	r3, [r4, #12]
 80091a8:	bd10      	pop	{r4, pc}

080091aa <__swrite>:
 80091aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ae:	461f      	mov	r7, r3
 80091b0:	898b      	ldrh	r3, [r1, #12]
 80091b2:	05db      	lsls	r3, r3, #23
 80091b4:	4605      	mov	r5, r0
 80091b6:	460c      	mov	r4, r1
 80091b8:	4616      	mov	r6, r2
 80091ba:	d505      	bpl.n	80091c8 <__swrite+0x1e>
 80091bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091c0:	2302      	movs	r3, #2
 80091c2:	2200      	movs	r2, #0
 80091c4:	f000 f898 	bl	80092f8 <_lseek_r>
 80091c8:	89a3      	ldrh	r3, [r4, #12]
 80091ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091d2:	81a3      	strh	r3, [r4, #12]
 80091d4:	4632      	mov	r2, r6
 80091d6:	463b      	mov	r3, r7
 80091d8:	4628      	mov	r0, r5
 80091da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091de:	f000 b817 	b.w	8009210 <_write_r>

080091e2 <__sseek>:
 80091e2:	b510      	push	{r4, lr}
 80091e4:	460c      	mov	r4, r1
 80091e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ea:	f000 f885 	bl	80092f8 <_lseek_r>
 80091ee:	1c43      	adds	r3, r0, #1
 80091f0:	89a3      	ldrh	r3, [r4, #12]
 80091f2:	bf15      	itete	ne
 80091f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80091f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091fe:	81a3      	strheq	r3, [r4, #12]
 8009200:	bf18      	it	ne
 8009202:	81a3      	strhne	r3, [r4, #12]
 8009204:	bd10      	pop	{r4, pc}

08009206 <__sclose>:
 8009206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800920a:	f000 b831 	b.w	8009270 <_close_r>
	...

08009210 <_write_r>:
 8009210:	b538      	push	{r3, r4, r5, lr}
 8009212:	4d07      	ldr	r5, [pc, #28]	; (8009230 <_write_r+0x20>)
 8009214:	4604      	mov	r4, r0
 8009216:	4608      	mov	r0, r1
 8009218:	4611      	mov	r1, r2
 800921a:	2200      	movs	r2, #0
 800921c:	602a      	str	r2, [r5, #0]
 800921e:	461a      	mov	r2, r3
 8009220:	f7f9 fe4a 	bl	8002eb8 <_write>
 8009224:	1c43      	adds	r3, r0, #1
 8009226:	d102      	bne.n	800922e <_write_r+0x1e>
 8009228:	682b      	ldr	r3, [r5, #0]
 800922a:	b103      	cbz	r3, 800922e <_write_r+0x1e>
 800922c:	6023      	str	r3, [r4, #0]
 800922e:	bd38      	pop	{r3, r4, r5, pc}
 8009230:	20000334 	.word	0x20000334

08009234 <__assert_func>:
 8009234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009236:	4614      	mov	r4, r2
 8009238:	461a      	mov	r2, r3
 800923a:	4b09      	ldr	r3, [pc, #36]	; (8009260 <__assert_func+0x2c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4605      	mov	r5, r0
 8009240:	68d8      	ldr	r0, [r3, #12]
 8009242:	b14c      	cbz	r4, 8009258 <__assert_func+0x24>
 8009244:	4b07      	ldr	r3, [pc, #28]	; (8009264 <__assert_func+0x30>)
 8009246:	9100      	str	r1, [sp, #0]
 8009248:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800924c:	4906      	ldr	r1, [pc, #24]	; (8009268 <__assert_func+0x34>)
 800924e:	462b      	mov	r3, r5
 8009250:	f000 f81e 	bl	8009290 <fiprintf>
 8009254:	f000 f89f 	bl	8009396 <abort>
 8009258:	4b04      	ldr	r3, [pc, #16]	; (800926c <__assert_func+0x38>)
 800925a:	461c      	mov	r4, r3
 800925c:	e7f3      	b.n	8009246 <__assert_func+0x12>
 800925e:	bf00      	nop
 8009260:	20000018 	.word	0x20000018
 8009264:	0800b6d5 	.word	0x0800b6d5
 8009268:	0800b6e2 	.word	0x0800b6e2
 800926c:	0800b710 	.word	0x0800b710

08009270 <_close_r>:
 8009270:	b538      	push	{r3, r4, r5, lr}
 8009272:	4d06      	ldr	r5, [pc, #24]	; (800928c <_close_r+0x1c>)
 8009274:	2300      	movs	r3, #0
 8009276:	4604      	mov	r4, r0
 8009278:	4608      	mov	r0, r1
 800927a:	602b      	str	r3, [r5, #0]
 800927c:	f7fa f90b 	bl	8003496 <_close>
 8009280:	1c43      	adds	r3, r0, #1
 8009282:	d102      	bne.n	800928a <_close_r+0x1a>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	b103      	cbz	r3, 800928a <_close_r+0x1a>
 8009288:	6023      	str	r3, [r4, #0]
 800928a:	bd38      	pop	{r3, r4, r5, pc}
 800928c:	20000334 	.word	0x20000334

08009290 <fiprintf>:
 8009290:	b40e      	push	{r1, r2, r3}
 8009292:	b503      	push	{r0, r1, lr}
 8009294:	4601      	mov	r1, r0
 8009296:	ab03      	add	r3, sp, #12
 8009298:	4805      	ldr	r0, [pc, #20]	; (80092b0 <fiprintf+0x20>)
 800929a:	f853 2b04 	ldr.w	r2, [r3], #4
 800929e:	6800      	ldr	r0, [r0, #0]
 80092a0:	9301      	str	r3, [sp, #4]
 80092a2:	f7ff fe31 	bl	8008f08 <_vfiprintf_r>
 80092a6:	b002      	add	sp, #8
 80092a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80092ac:	b003      	add	sp, #12
 80092ae:	4770      	bx	lr
 80092b0:	20000018 	.word	0x20000018

080092b4 <_fstat_r>:
 80092b4:	b538      	push	{r3, r4, r5, lr}
 80092b6:	4d07      	ldr	r5, [pc, #28]	; (80092d4 <_fstat_r+0x20>)
 80092b8:	2300      	movs	r3, #0
 80092ba:	4604      	mov	r4, r0
 80092bc:	4608      	mov	r0, r1
 80092be:	4611      	mov	r1, r2
 80092c0:	602b      	str	r3, [r5, #0]
 80092c2:	f7fa f8f4 	bl	80034ae <_fstat>
 80092c6:	1c43      	adds	r3, r0, #1
 80092c8:	d102      	bne.n	80092d0 <_fstat_r+0x1c>
 80092ca:	682b      	ldr	r3, [r5, #0]
 80092cc:	b103      	cbz	r3, 80092d0 <_fstat_r+0x1c>
 80092ce:	6023      	str	r3, [r4, #0]
 80092d0:	bd38      	pop	{r3, r4, r5, pc}
 80092d2:	bf00      	nop
 80092d4:	20000334 	.word	0x20000334

080092d8 <_isatty_r>:
 80092d8:	b538      	push	{r3, r4, r5, lr}
 80092da:	4d06      	ldr	r5, [pc, #24]	; (80092f4 <_isatty_r+0x1c>)
 80092dc:	2300      	movs	r3, #0
 80092de:	4604      	mov	r4, r0
 80092e0:	4608      	mov	r0, r1
 80092e2:	602b      	str	r3, [r5, #0]
 80092e4:	f7fa f8f3 	bl	80034ce <_isatty>
 80092e8:	1c43      	adds	r3, r0, #1
 80092ea:	d102      	bne.n	80092f2 <_isatty_r+0x1a>
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	b103      	cbz	r3, 80092f2 <_isatty_r+0x1a>
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	bd38      	pop	{r3, r4, r5, pc}
 80092f4:	20000334 	.word	0x20000334

080092f8 <_lseek_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4d07      	ldr	r5, [pc, #28]	; (8009318 <_lseek_r+0x20>)
 80092fc:	4604      	mov	r4, r0
 80092fe:	4608      	mov	r0, r1
 8009300:	4611      	mov	r1, r2
 8009302:	2200      	movs	r2, #0
 8009304:	602a      	str	r2, [r5, #0]
 8009306:	461a      	mov	r2, r3
 8009308:	f7fa f8ec 	bl	80034e4 <_lseek>
 800930c:	1c43      	adds	r3, r0, #1
 800930e:	d102      	bne.n	8009316 <_lseek_r+0x1e>
 8009310:	682b      	ldr	r3, [r5, #0]
 8009312:	b103      	cbz	r3, 8009316 <_lseek_r+0x1e>
 8009314:	6023      	str	r3, [r4, #0]
 8009316:	bd38      	pop	{r3, r4, r5, pc}
 8009318:	20000334 	.word	0x20000334

0800931c <__ascii_mbtowc>:
 800931c:	b082      	sub	sp, #8
 800931e:	b901      	cbnz	r1, 8009322 <__ascii_mbtowc+0x6>
 8009320:	a901      	add	r1, sp, #4
 8009322:	b142      	cbz	r2, 8009336 <__ascii_mbtowc+0x1a>
 8009324:	b14b      	cbz	r3, 800933a <__ascii_mbtowc+0x1e>
 8009326:	7813      	ldrb	r3, [r2, #0]
 8009328:	600b      	str	r3, [r1, #0]
 800932a:	7812      	ldrb	r2, [r2, #0]
 800932c:	1e10      	subs	r0, r2, #0
 800932e:	bf18      	it	ne
 8009330:	2001      	movne	r0, #1
 8009332:	b002      	add	sp, #8
 8009334:	4770      	bx	lr
 8009336:	4610      	mov	r0, r2
 8009338:	e7fb      	b.n	8009332 <__ascii_mbtowc+0x16>
 800933a:	f06f 0001 	mvn.w	r0, #1
 800933e:	e7f8      	b.n	8009332 <__ascii_mbtowc+0x16>

08009340 <__malloc_lock>:
 8009340:	4801      	ldr	r0, [pc, #4]	; (8009348 <__malloc_lock+0x8>)
 8009342:	f7ff b8c0 	b.w	80084c6 <__retarget_lock_acquire_recursive>
 8009346:	bf00      	nop
 8009348:	20000328 	.word	0x20000328

0800934c <__malloc_unlock>:
 800934c:	4801      	ldr	r0, [pc, #4]	; (8009354 <__malloc_unlock+0x8>)
 800934e:	f7ff b8bb 	b.w	80084c8 <__retarget_lock_release_recursive>
 8009352:	bf00      	nop
 8009354:	20000328 	.word	0x20000328

08009358 <_read_r>:
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	4d07      	ldr	r5, [pc, #28]	; (8009378 <_read_r+0x20>)
 800935c:	4604      	mov	r4, r0
 800935e:	4608      	mov	r0, r1
 8009360:	4611      	mov	r1, r2
 8009362:	2200      	movs	r2, #0
 8009364:	602a      	str	r2, [r5, #0]
 8009366:	461a      	mov	r2, r3
 8009368:	f7fa f878 	bl	800345c <_read>
 800936c:	1c43      	adds	r3, r0, #1
 800936e:	d102      	bne.n	8009376 <_read_r+0x1e>
 8009370:	682b      	ldr	r3, [r5, #0]
 8009372:	b103      	cbz	r3, 8009376 <_read_r+0x1e>
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	bd38      	pop	{r3, r4, r5, pc}
 8009378:	20000334 	.word	0x20000334

0800937c <__ascii_wctomb>:
 800937c:	b149      	cbz	r1, 8009392 <__ascii_wctomb+0x16>
 800937e:	2aff      	cmp	r2, #255	; 0xff
 8009380:	bf85      	ittet	hi
 8009382:	238a      	movhi	r3, #138	; 0x8a
 8009384:	6003      	strhi	r3, [r0, #0]
 8009386:	700a      	strbls	r2, [r1, #0]
 8009388:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800938c:	bf98      	it	ls
 800938e:	2001      	movls	r0, #1
 8009390:	4770      	bx	lr
 8009392:	4608      	mov	r0, r1
 8009394:	4770      	bx	lr

08009396 <abort>:
 8009396:	b508      	push	{r3, lr}
 8009398:	2006      	movs	r0, #6
 800939a:	f000 f82b 	bl	80093f4 <raise>
 800939e:	2001      	movs	r0, #1
 80093a0:	f7fa f852 	bl	8003448 <_exit>

080093a4 <_raise_r>:
 80093a4:	291f      	cmp	r1, #31
 80093a6:	b538      	push	{r3, r4, r5, lr}
 80093a8:	4604      	mov	r4, r0
 80093aa:	460d      	mov	r5, r1
 80093ac:	d904      	bls.n	80093b8 <_raise_r+0x14>
 80093ae:	2316      	movs	r3, #22
 80093b0:	6003      	str	r3, [r0, #0]
 80093b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093b6:	bd38      	pop	{r3, r4, r5, pc}
 80093b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093ba:	b112      	cbz	r2, 80093c2 <_raise_r+0x1e>
 80093bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093c0:	b94b      	cbnz	r3, 80093d6 <_raise_r+0x32>
 80093c2:	4620      	mov	r0, r4
 80093c4:	f000 f830 	bl	8009428 <_getpid_r>
 80093c8:	462a      	mov	r2, r5
 80093ca:	4601      	mov	r1, r0
 80093cc:	4620      	mov	r0, r4
 80093ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093d2:	f000 b817 	b.w	8009404 <_kill_r>
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d00a      	beq.n	80093f0 <_raise_r+0x4c>
 80093da:	1c59      	adds	r1, r3, #1
 80093dc:	d103      	bne.n	80093e6 <_raise_r+0x42>
 80093de:	2316      	movs	r3, #22
 80093e0:	6003      	str	r3, [r0, #0]
 80093e2:	2001      	movs	r0, #1
 80093e4:	e7e7      	b.n	80093b6 <_raise_r+0x12>
 80093e6:	2400      	movs	r4, #0
 80093e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093ec:	4628      	mov	r0, r5
 80093ee:	4798      	blx	r3
 80093f0:	2000      	movs	r0, #0
 80093f2:	e7e0      	b.n	80093b6 <_raise_r+0x12>

080093f4 <raise>:
 80093f4:	4b02      	ldr	r3, [pc, #8]	; (8009400 <raise+0xc>)
 80093f6:	4601      	mov	r1, r0
 80093f8:	6818      	ldr	r0, [r3, #0]
 80093fa:	f7ff bfd3 	b.w	80093a4 <_raise_r>
 80093fe:	bf00      	nop
 8009400:	20000018 	.word	0x20000018

08009404 <_kill_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4d07      	ldr	r5, [pc, #28]	; (8009424 <_kill_r+0x20>)
 8009408:	2300      	movs	r3, #0
 800940a:	4604      	mov	r4, r0
 800940c:	4608      	mov	r0, r1
 800940e:	4611      	mov	r1, r2
 8009410:	602b      	str	r3, [r5, #0]
 8009412:	f7fa f809 	bl	8003428 <_kill>
 8009416:	1c43      	adds	r3, r0, #1
 8009418:	d102      	bne.n	8009420 <_kill_r+0x1c>
 800941a:	682b      	ldr	r3, [r5, #0]
 800941c:	b103      	cbz	r3, 8009420 <_kill_r+0x1c>
 800941e:	6023      	str	r3, [r4, #0]
 8009420:	bd38      	pop	{r3, r4, r5, pc}
 8009422:	bf00      	nop
 8009424:	20000334 	.word	0x20000334

08009428 <_getpid_r>:
 8009428:	f7f9 bff6 	b.w	8003418 <_getpid>
 800942c:	0000      	movs	r0, r0
	...

08009430 <cos>:
 8009430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009432:	ec53 2b10 	vmov	r2, r3, d0
 8009436:	4826      	ldr	r0, [pc, #152]	; (80094d0 <cos+0xa0>)
 8009438:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800943c:	4281      	cmp	r1, r0
 800943e:	dc06      	bgt.n	800944e <cos+0x1e>
 8009440:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80094c8 <cos+0x98>
 8009444:	b005      	add	sp, #20
 8009446:	f85d eb04 	ldr.w	lr, [sp], #4
 800944a:	f000 bec1 	b.w	800a1d0 <__kernel_cos>
 800944e:	4821      	ldr	r0, [pc, #132]	; (80094d4 <cos+0xa4>)
 8009450:	4281      	cmp	r1, r0
 8009452:	dd09      	ble.n	8009468 <cos+0x38>
 8009454:	ee10 0a10 	vmov	r0, s0
 8009458:	4619      	mov	r1, r3
 800945a:	f7f6 ff35 	bl	80002c8 <__aeabi_dsub>
 800945e:	ec41 0b10 	vmov	d0, r0, r1
 8009462:	b005      	add	sp, #20
 8009464:	f85d fb04 	ldr.w	pc, [sp], #4
 8009468:	4668      	mov	r0, sp
 800946a:	f000 fbf1 	bl	8009c50 <__ieee754_rem_pio2>
 800946e:	f000 0003 	and.w	r0, r0, #3
 8009472:	2801      	cmp	r0, #1
 8009474:	d00b      	beq.n	800948e <cos+0x5e>
 8009476:	2802      	cmp	r0, #2
 8009478:	d016      	beq.n	80094a8 <cos+0x78>
 800947a:	b9e0      	cbnz	r0, 80094b6 <cos+0x86>
 800947c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009480:	ed9d 0b00 	vldr	d0, [sp]
 8009484:	f000 fea4 	bl	800a1d0 <__kernel_cos>
 8009488:	ec51 0b10 	vmov	r0, r1, d0
 800948c:	e7e7      	b.n	800945e <cos+0x2e>
 800948e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009492:	ed9d 0b00 	vldr	d0, [sp]
 8009496:	f001 fab3 	bl	800aa00 <__kernel_sin>
 800949a:	ec53 2b10 	vmov	r2, r3, d0
 800949e:	ee10 0a10 	vmov	r0, s0
 80094a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80094a6:	e7da      	b.n	800945e <cos+0x2e>
 80094a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80094ac:	ed9d 0b00 	vldr	d0, [sp]
 80094b0:	f000 fe8e 	bl	800a1d0 <__kernel_cos>
 80094b4:	e7f1      	b.n	800949a <cos+0x6a>
 80094b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80094ba:	ed9d 0b00 	vldr	d0, [sp]
 80094be:	2001      	movs	r0, #1
 80094c0:	f001 fa9e 	bl	800aa00 <__kernel_sin>
 80094c4:	e7e0      	b.n	8009488 <cos+0x58>
 80094c6:	bf00      	nop
	...
 80094d0:	3fe921fb 	.word	0x3fe921fb
 80094d4:	7fefffff 	.word	0x7fefffff

080094d8 <sin>:
 80094d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094da:	ec53 2b10 	vmov	r2, r3, d0
 80094de:	4828      	ldr	r0, [pc, #160]	; (8009580 <sin+0xa8>)
 80094e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80094e4:	4281      	cmp	r1, r0
 80094e6:	dc07      	bgt.n	80094f8 <sin+0x20>
 80094e8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009578 <sin+0xa0>
 80094ec:	2000      	movs	r0, #0
 80094ee:	b005      	add	sp, #20
 80094f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80094f4:	f001 ba84 	b.w	800aa00 <__kernel_sin>
 80094f8:	4822      	ldr	r0, [pc, #136]	; (8009584 <sin+0xac>)
 80094fa:	4281      	cmp	r1, r0
 80094fc:	dd09      	ble.n	8009512 <sin+0x3a>
 80094fe:	ee10 0a10 	vmov	r0, s0
 8009502:	4619      	mov	r1, r3
 8009504:	f7f6 fee0 	bl	80002c8 <__aeabi_dsub>
 8009508:	ec41 0b10 	vmov	d0, r0, r1
 800950c:	b005      	add	sp, #20
 800950e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009512:	4668      	mov	r0, sp
 8009514:	f000 fb9c 	bl	8009c50 <__ieee754_rem_pio2>
 8009518:	f000 0003 	and.w	r0, r0, #3
 800951c:	2801      	cmp	r0, #1
 800951e:	d00c      	beq.n	800953a <sin+0x62>
 8009520:	2802      	cmp	r0, #2
 8009522:	d011      	beq.n	8009548 <sin+0x70>
 8009524:	b9f0      	cbnz	r0, 8009564 <sin+0x8c>
 8009526:	ed9d 1b02 	vldr	d1, [sp, #8]
 800952a:	ed9d 0b00 	vldr	d0, [sp]
 800952e:	2001      	movs	r0, #1
 8009530:	f001 fa66 	bl	800aa00 <__kernel_sin>
 8009534:	ec51 0b10 	vmov	r0, r1, d0
 8009538:	e7e6      	b.n	8009508 <sin+0x30>
 800953a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800953e:	ed9d 0b00 	vldr	d0, [sp]
 8009542:	f000 fe45 	bl	800a1d0 <__kernel_cos>
 8009546:	e7f5      	b.n	8009534 <sin+0x5c>
 8009548:	ed9d 1b02 	vldr	d1, [sp, #8]
 800954c:	ed9d 0b00 	vldr	d0, [sp]
 8009550:	2001      	movs	r0, #1
 8009552:	f001 fa55 	bl	800aa00 <__kernel_sin>
 8009556:	ec53 2b10 	vmov	r2, r3, d0
 800955a:	ee10 0a10 	vmov	r0, s0
 800955e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009562:	e7d1      	b.n	8009508 <sin+0x30>
 8009564:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009568:	ed9d 0b00 	vldr	d0, [sp]
 800956c:	f000 fe30 	bl	800a1d0 <__kernel_cos>
 8009570:	e7f1      	b.n	8009556 <sin+0x7e>
 8009572:	bf00      	nop
 8009574:	f3af 8000 	nop.w
	...
 8009580:	3fe921fb 	.word	0x3fe921fb
 8009584:	7fefffff 	.word	0x7fefffff

08009588 <acos>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	ed2d 8b02 	vpush	{d8}
 800958e:	ec55 4b10 	vmov	r4, r5, d0
 8009592:	f000 f831 	bl	80095f8 <__ieee754_acos>
 8009596:	4622      	mov	r2, r4
 8009598:	462b      	mov	r3, r5
 800959a:	4620      	mov	r0, r4
 800959c:	4629      	mov	r1, r5
 800959e:	eeb0 8a40 	vmov.f32	s16, s0
 80095a2:	eef0 8a60 	vmov.f32	s17, s1
 80095a6:	f7f7 fae1 	bl	8000b6c <__aeabi_dcmpun>
 80095aa:	b9a8      	cbnz	r0, 80095d8 <acos+0x50>
 80095ac:	ec45 4b10 	vmov	d0, r4, r5
 80095b0:	f001 fc86 	bl	800aec0 <fabs>
 80095b4:	4b0c      	ldr	r3, [pc, #48]	; (80095e8 <acos+0x60>)
 80095b6:	ec51 0b10 	vmov	r0, r1, d0
 80095ba:	2200      	movs	r2, #0
 80095bc:	f7f7 facc 	bl	8000b58 <__aeabi_dcmpgt>
 80095c0:	b150      	cbz	r0, 80095d8 <acos+0x50>
 80095c2:	f7fd f95d 	bl	8006880 <__errno>
 80095c6:	ecbd 8b02 	vpop	{d8}
 80095ca:	2321      	movs	r3, #33	; 0x21
 80095cc:	6003      	str	r3, [r0, #0]
 80095ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095d2:	4806      	ldr	r0, [pc, #24]	; (80095ec <acos+0x64>)
 80095d4:	f001 bd00 	b.w	800afd8 <nan>
 80095d8:	eeb0 0a48 	vmov.f32	s0, s16
 80095dc:	eef0 0a68 	vmov.f32	s1, s17
 80095e0:	ecbd 8b02 	vpop	{d8}
 80095e4:	bd38      	pop	{r3, r4, r5, pc}
 80095e6:	bf00      	nop
 80095e8:	3ff00000 	.word	0x3ff00000
 80095ec:	0800b710 	.word	0x0800b710

080095f0 <atan2>:
 80095f0:	f000 ba62 	b.w	8009ab8 <__ieee754_atan2>
 80095f4:	0000      	movs	r0, r0
	...

080095f8 <__ieee754_acos>:
 80095f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fc:	ec55 4b10 	vmov	r4, r5, d0
 8009600:	49b7      	ldr	r1, [pc, #732]	; (80098e0 <__ieee754_acos+0x2e8>)
 8009602:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009606:	428b      	cmp	r3, r1
 8009608:	dd1b      	ble.n	8009642 <__ieee754_acos+0x4a>
 800960a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800960e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009612:	4323      	orrs	r3, r4
 8009614:	d106      	bne.n	8009624 <__ieee754_acos+0x2c>
 8009616:	2d00      	cmp	r5, #0
 8009618:	f300 8211 	bgt.w	8009a3e <__ieee754_acos+0x446>
 800961c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8009878 <__ieee754_acos+0x280>
 8009620:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009624:	ee10 2a10 	vmov	r2, s0
 8009628:	462b      	mov	r3, r5
 800962a:	ee10 0a10 	vmov	r0, s0
 800962e:	4629      	mov	r1, r5
 8009630:	f7f6 fe4a 	bl	80002c8 <__aeabi_dsub>
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	f7f7 f928 	bl	800088c <__aeabi_ddiv>
 800963c:	ec41 0b10 	vmov	d0, r0, r1
 8009640:	e7ee      	b.n	8009620 <__ieee754_acos+0x28>
 8009642:	49a8      	ldr	r1, [pc, #672]	; (80098e4 <__ieee754_acos+0x2ec>)
 8009644:	428b      	cmp	r3, r1
 8009646:	f300 8087 	bgt.w	8009758 <__ieee754_acos+0x160>
 800964a:	4aa7      	ldr	r2, [pc, #668]	; (80098e8 <__ieee754_acos+0x2f0>)
 800964c:	4293      	cmp	r3, r2
 800964e:	f340 81f9 	ble.w	8009a44 <__ieee754_acos+0x44c>
 8009652:	ee10 2a10 	vmov	r2, s0
 8009656:	ee10 0a10 	vmov	r0, s0
 800965a:	462b      	mov	r3, r5
 800965c:	4629      	mov	r1, r5
 800965e:	f7f6 ffeb 	bl	8000638 <__aeabi_dmul>
 8009662:	a387      	add	r3, pc, #540	; (adr r3, 8009880 <__ieee754_acos+0x288>)
 8009664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009668:	4606      	mov	r6, r0
 800966a:	460f      	mov	r7, r1
 800966c:	f7f6 ffe4 	bl	8000638 <__aeabi_dmul>
 8009670:	a385      	add	r3, pc, #532	; (adr r3, 8009888 <__ieee754_acos+0x290>)
 8009672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009676:	f7f6 fe29 	bl	80002cc <__adddf3>
 800967a:	4632      	mov	r2, r6
 800967c:	463b      	mov	r3, r7
 800967e:	f7f6 ffdb 	bl	8000638 <__aeabi_dmul>
 8009682:	a383      	add	r3, pc, #524	; (adr r3, 8009890 <__ieee754_acos+0x298>)
 8009684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009688:	f7f6 fe1e 	bl	80002c8 <__aeabi_dsub>
 800968c:	4632      	mov	r2, r6
 800968e:	463b      	mov	r3, r7
 8009690:	f7f6 ffd2 	bl	8000638 <__aeabi_dmul>
 8009694:	a380      	add	r3, pc, #512	; (adr r3, 8009898 <__ieee754_acos+0x2a0>)
 8009696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969a:	f7f6 fe17 	bl	80002cc <__adddf3>
 800969e:	4632      	mov	r2, r6
 80096a0:	463b      	mov	r3, r7
 80096a2:	f7f6 ffc9 	bl	8000638 <__aeabi_dmul>
 80096a6:	a37e      	add	r3, pc, #504	; (adr r3, 80098a0 <__ieee754_acos+0x2a8>)
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	f7f6 fe0c 	bl	80002c8 <__aeabi_dsub>
 80096b0:	4632      	mov	r2, r6
 80096b2:	463b      	mov	r3, r7
 80096b4:	f7f6 ffc0 	bl	8000638 <__aeabi_dmul>
 80096b8:	a37b      	add	r3, pc, #492	; (adr r3, 80098a8 <__ieee754_acos+0x2b0>)
 80096ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096be:	f7f6 fe05 	bl	80002cc <__adddf3>
 80096c2:	4632      	mov	r2, r6
 80096c4:	463b      	mov	r3, r7
 80096c6:	f7f6 ffb7 	bl	8000638 <__aeabi_dmul>
 80096ca:	a379      	add	r3, pc, #484	; (adr r3, 80098b0 <__ieee754_acos+0x2b8>)
 80096cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d0:	4680      	mov	r8, r0
 80096d2:	4689      	mov	r9, r1
 80096d4:	4630      	mov	r0, r6
 80096d6:	4639      	mov	r1, r7
 80096d8:	f7f6 ffae 	bl	8000638 <__aeabi_dmul>
 80096dc:	a376      	add	r3, pc, #472	; (adr r3, 80098b8 <__ieee754_acos+0x2c0>)
 80096de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e2:	f7f6 fdf1 	bl	80002c8 <__aeabi_dsub>
 80096e6:	4632      	mov	r2, r6
 80096e8:	463b      	mov	r3, r7
 80096ea:	f7f6 ffa5 	bl	8000638 <__aeabi_dmul>
 80096ee:	a374      	add	r3, pc, #464	; (adr r3, 80098c0 <__ieee754_acos+0x2c8>)
 80096f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f4:	f7f6 fdea 	bl	80002cc <__adddf3>
 80096f8:	4632      	mov	r2, r6
 80096fa:	463b      	mov	r3, r7
 80096fc:	f7f6 ff9c 	bl	8000638 <__aeabi_dmul>
 8009700:	a371      	add	r3, pc, #452	; (adr r3, 80098c8 <__ieee754_acos+0x2d0>)
 8009702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009706:	f7f6 fddf 	bl	80002c8 <__aeabi_dsub>
 800970a:	4632      	mov	r2, r6
 800970c:	463b      	mov	r3, r7
 800970e:	f7f6 ff93 	bl	8000638 <__aeabi_dmul>
 8009712:	4b76      	ldr	r3, [pc, #472]	; (80098ec <__ieee754_acos+0x2f4>)
 8009714:	2200      	movs	r2, #0
 8009716:	f7f6 fdd9 	bl	80002cc <__adddf3>
 800971a:	4602      	mov	r2, r0
 800971c:	460b      	mov	r3, r1
 800971e:	4640      	mov	r0, r8
 8009720:	4649      	mov	r1, r9
 8009722:	f7f7 f8b3 	bl	800088c <__aeabi_ddiv>
 8009726:	4622      	mov	r2, r4
 8009728:	462b      	mov	r3, r5
 800972a:	f7f6 ff85 	bl	8000638 <__aeabi_dmul>
 800972e:	4602      	mov	r2, r0
 8009730:	460b      	mov	r3, r1
 8009732:	a167      	add	r1, pc, #412	; (adr r1, 80098d0 <__ieee754_acos+0x2d8>)
 8009734:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009738:	f7f6 fdc6 	bl	80002c8 <__aeabi_dsub>
 800973c:	4602      	mov	r2, r0
 800973e:	460b      	mov	r3, r1
 8009740:	4620      	mov	r0, r4
 8009742:	4629      	mov	r1, r5
 8009744:	f7f6 fdc0 	bl	80002c8 <__aeabi_dsub>
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	a162      	add	r1, pc, #392	; (adr r1, 80098d8 <__ieee754_acos+0x2e0>)
 800974e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009752:	f7f6 fdb9 	bl	80002c8 <__aeabi_dsub>
 8009756:	e771      	b.n	800963c <__ieee754_acos+0x44>
 8009758:	2d00      	cmp	r5, #0
 800975a:	f280 80cb 	bge.w	80098f4 <__ieee754_acos+0x2fc>
 800975e:	ee10 0a10 	vmov	r0, s0
 8009762:	4b62      	ldr	r3, [pc, #392]	; (80098ec <__ieee754_acos+0x2f4>)
 8009764:	2200      	movs	r2, #0
 8009766:	4629      	mov	r1, r5
 8009768:	f7f6 fdb0 	bl	80002cc <__adddf3>
 800976c:	4b60      	ldr	r3, [pc, #384]	; (80098f0 <__ieee754_acos+0x2f8>)
 800976e:	2200      	movs	r2, #0
 8009770:	f7f6 ff62 	bl	8000638 <__aeabi_dmul>
 8009774:	a342      	add	r3, pc, #264	; (adr r3, 8009880 <__ieee754_acos+0x288>)
 8009776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977a:	4604      	mov	r4, r0
 800977c:	460d      	mov	r5, r1
 800977e:	f7f6 ff5b 	bl	8000638 <__aeabi_dmul>
 8009782:	a341      	add	r3, pc, #260	; (adr r3, 8009888 <__ieee754_acos+0x290>)
 8009784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009788:	f7f6 fda0 	bl	80002cc <__adddf3>
 800978c:	4622      	mov	r2, r4
 800978e:	462b      	mov	r3, r5
 8009790:	f7f6 ff52 	bl	8000638 <__aeabi_dmul>
 8009794:	a33e      	add	r3, pc, #248	; (adr r3, 8009890 <__ieee754_acos+0x298>)
 8009796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979a:	f7f6 fd95 	bl	80002c8 <__aeabi_dsub>
 800979e:	4622      	mov	r2, r4
 80097a0:	462b      	mov	r3, r5
 80097a2:	f7f6 ff49 	bl	8000638 <__aeabi_dmul>
 80097a6:	a33c      	add	r3, pc, #240	; (adr r3, 8009898 <__ieee754_acos+0x2a0>)
 80097a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ac:	f7f6 fd8e 	bl	80002cc <__adddf3>
 80097b0:	4622      	mov	r2, r4
 80097b2:	462b      	mov	r3, r5
 80097b4:	f7f6 ff40 	bl	8000638 <__aeabi_dmul>
 80097b8:	a339      	add	r3, pc, #228	; (adr r3, 80098a0 <__ieee754_acos+0x2a8>)
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	f7f6 fd83 	bl	80002c8 <__aeabi_dsub>
 80097c2:	4622      	mov	r2, r4
 80097c4:	462b      	mov	r3, r5
 80097c6:	f7f6 ff37 	bl	8000638 <__aeabi_dmul>
 80097ca:	a337      	add	r3, pc, #220	; (adr r3, 80098a8 <__ieee754_acos+0x2b0>)
 80097cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d0:	f7f6 fd7c 	bl	80002cc <__adddf3>
 80097d4:	4622      	mov	r2, r4
 80097d6:	462b      	mov	r3, r5
 80097d8:	f7f6 ff2e 	bl	8000638 <__aeabi_dmul>
 80097dc:	ec45 4b10 	vmov	d0, r4, r5
 80097e0:	4680      	mov	r8, r0
 80097e2:	4689      	mov	r9, r1
 80097e4:	f000 fc40 	bl	800a068 <__ieee754_sqrt>
 80097e8:	a331      	add	r3, pc, #196	; (adr r3, 80098b0 <__ieee754_acos+0x2b8>)
 80097ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ee:	4620      	mov	r0, r4
 80097f0:	4629      	mov	r1, r5
 80097f2:	ec57 6b10 	vmov	r6, r7, d0
 80097f6:	f7f6 ff1f 	bl	8000638 <__aeabi_dmul>
 80097fa:	a32f      	add	r3, pc, #188	; (adr r3, 80098b8 <__ieee754_acos+0x2c0>)
 80097fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009800:	f7f6 fd62 	bl	80002c8 <__aeabi_dsub>
 8009804:	4622      	mov	r2, r4
 8009806:	462b      	mov	r3, r5
 8009808:	f7f6 ff16 	bl	8000638 <__aeabi_dmul>
 800980c:	a32c      	add	r3, pc, #176	; (adr r3, 80098c0 <__ieee754_acos+0x2c8>)
 800980e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009812:	f7f6 fd5b 	bl	80002cc <__adddf3>
 8009816:	4622      	mov	r2, r4
 8009818:	462b      	mov	r3, r5
 800981a:	f7f6 ff0d 	bl	8000638 <__aeabi_dmul>
 800981e:	a32a      	add	r3, pc, #168	; (adr r3, 80098c8 <__ieee754_acos+0x2d0>)
 8009820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009824:	f7f6 fd50 	bl	80002c8 <__aeabi_dsub>
 8009828:	4622      	mov	r2, r4
 800982a:	462b      	mov	r3, r5
 800982c:	f7f6 ff04 	bl	8000638 <__aeabi_dmul>
 8009830:	4b2e      	ldr	r3, [pc, #184]	; (80098ec <__ieee754_acos+0x2f4>)
 8009832:	2200      	movs	r2, #0
 8009834:	f7f6 fd4a 	bl	80002cc <__adddf3>
 8009838:	4602      	mov	r2, r0
 800983a:	460b      	mov	r3, r1
 800983c:	4640      	mov	r0, r8
 800983e:	4649      	mov	r1, r9
 8009840:	f7f7 f824 	bl	800088c <__aeabi_ddiv>
 8009844:	4632      	mov	r2, r6
 8009846:	463b      	mov	r3, r7
 8009848:	f7f6 fef6 	bl	8000638 <__aeabi_dmul>
 800984c:	a320      	add	r3, pc, #128	; (adr r3, 80098d0 <__ieee754_acos+0x2d8>)
 800984e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009852:	f7f6 fd39 	bl	80002c8 <__aeabi_dsub>
 8009856:	4632      	mov	r2, r6
 8009858:	463b      	mov	r3, r7
 800985a:	f7f6 fd37 	bl	80002cc <__adddf3>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	f7f6 fd33 	bl	80002cc <__adddf3>
 8009866:	4602      	mov	r2, r0
 8009868:	460b      	mov	r3, r1
 800986a:	a103      	add	r1, pc, #12	; (adr r1, 8009878 <__ieee754_acos+0x280>)
 800986c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009870:	e76f      	b.n	8009752 <__ieee754_acos+0x15a>
 8009872:	bf00      	nop
 8009874:	f3af 8000 	nop.w
 8009878:	54442d18 	.word	0x54442d18
 800987c:	400921fb 	.word	0x400921fb
 8009880:	0dfdf709 	.word	0x0dfdf709
 8009884:	3f023de1 	.word	0x3f023de1
 8009888:	7501b288 	.word	0x7501b288
 800988c:	3f49efe0 	.word	0x3f49efe0
 8009890:	b5688f3b 	.word	0xb5688f3b
 8009894:	3fa48228 	.word	0x3fa48228
 8009898:	0e884455 	.word	0x0e884455
 800989c:	3fc9c155 	.word	0x3fc9c155
 80098a0:	03eb6f7d 	.word	0x03eb6f7d
 80098a4:	3fd4d612 	.word	0x3fd4d612
 80098a8:	55555555 	.word	0x55555555
 80098ac:	3fc55555 	.word	0x3fc55555
 80098b0:	b12e9282 	.word	0xb12e9282
 80098b4:	3fb3b8c5 	.word	0x3fb3b8c5
 80098b8:	1b8d0159 	.word	0x1b8d0159
 80098bc:	3fe6066c 	.word	0x3fe6066c
 80098c0:	9c598ac8 	.word	0x9c598ac8
 80098c4:	40002ae5 	.word	0x40002ae5
 80098c8:	1c8a2d4b 	.word	0x1c8a2d4b
 80098cc:	40033a27 	.word	0x40033a27
 80098d0:	33145c07 	.word	0x33145c07
 80098d4:	3c91a626 	.word	0x3c91a626
 80098d8:	54442d18 	.word	0x54442d18
 80098dc:	3ff921fb 	.word	0x3ff921fb
 80098e0:	3fefffff 	.word	0x3fefffff
 80098e4:	3fdfffff 	.word	0x3fdfffff
 80098e8:	3c600000 	.word	0x3c600000
 80098ec:	3ff00000 	.word	0x3ff00000
 80098f0:	3fe00000 	.word	0x3fe00000
 80098f4:	ee10 2a10 	vmov	r2, s0
 80098f8:	462b      	mov	r3, r5
 80098fa:	496d      	ldr	r1, [pc, #436]	; (8009ab0 <__ieee754_acos+0x4b8>)
 80098fc:	2000      	movs	r0, #0
 80098fe:	f7f6 fce3 	bl	80002c8 <__aeabi_dsub>
 8009902:	4b6c      	ldr	r3, [pc, #432]	; (8009ab4 <__ieee754_acos+0x4bc>)
 8009904:	2200      	movs	r2, #0
 8009906:	f7f6 fe97 	bl	8000638 <__aeabi_dmul>
 800990a:	4604      	mov	r4, r0
 800990c:	460d      	mov	r5, r1
 800990e:	ec45 4b10 	vmov	d0, r4, r5
 8009912:	f000 fba9 	bl	800a068 <__ieee754_sqrt>
 8009916:	a34e      	add	r3, pc, #312	; (adr r3, 8009a50 <__ieee754_acos+0x458>)
 8009918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991c:	4620      	mov	r0, r4
 800991e:	4629      	mov	r1, r5
 8009920:	ec59 8b10 	vmov	r8, r9, d0
 8009924:	f7f6 fe88 	bl	8000638 <__aeabi_dmul>
 8009928:	a34b      	add	r3, pc, #300	; (adr r3, 8009a58 <__ieee754_acos+0x460>)
 800992a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992e:	f7f6 fccd 	bl	80002cc <__adddf3>
 8009932:	4622      	mov	r2, r4
 8009934:	462b      	mov	r3, r5
 8009936:	f7f6 fe7f 	bl	8000638 <__aeabi_dmul>
 800993a:	a349      	add	r3, pc, #292	; (adr r3, 8009a60 <__ieee754_acos+0x468>)
 800993c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009940:	f7f6 fcc2 	bl	80002c8 <__aeabi_dsub>
 8009944:	4622      	mov	r2, r4
 8009946:	462b      	mov	r3, r5
 8009948:	f7f6 fe76 	bl	8000638 <__aeabi_dmul>
 800994c:	a346      	add	r3, pc, #280	; (adr r3, 8009a68 <__ieee754_acos+0x470>)
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	f7f6 fcbb 	bl	80002cc <__adddf3>
 8009956:	4622      	mov	r2, r4
 8009958:	462b      	mov	r3, r5
 800995a:	f7f6 fe6d 	bl	8000638 <__aeabi_dmul>
 800995e:	a344      	add	r3, pc, #272	; (adr r3, 8009a70 <__ieee754_acos+0x478>)
 8009960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009964:	f7f6 fcb0 	bl	80002c8 <__aeabi_dsub>
 8009968:	4622      	mov	r2, r4
 800996a:	462b      	mov	r3, r5
 800996c:	f7f6 fe64 	bl	8000638 <__aeabi_dmul>
 8009970:	a341      	add	r3, pc, #260	; (adr r3, 8009a78 <__ieee754_acos+0x480>)
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	f7f6 fca9 	bl	80002cc <__adddf3>
 800997a:	4622      	mov	r2, r4
 800997c:	462b      	mov	r3, r5
 800997e:	f7f6 fe5b 	bl	8000638 <__aeabi_dmul>
 8009982:	a33f      	add	r3, pc, #252	; (adr r3, 8009a80 <__ieee754_acos+0x488>)
 8009984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009988:	4682      	mov	sl, r0
 800998a:	468b      	mov	fp, r1
 800998c:	4620      	mov	r0, r4
 800998e:	4629      	mov	r1, r5
 8009990:	f7f6 fe52 	bl	8000638 <__aeabi_dmul>
 8009994:	a33c      	add	r3, pc, #240	; (adr r3, 8009a88 <__ieee754_acos+0x490>)
 8009996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999a:	f7f6 fc95 	bl	80002c8 <__aeabi_dsub>
 800999e:	4622      	mov	r2, r4
 80099a0:	462b      	mov	r3, r5
 80099a2:	f7f6 fe49 	bl	8000638 <__aeabi_dmul>
 80099a6:	a33a      	add	r3, pc, #232	; (adr r3, 8009a90 <__ieee754_acos+0x498>)
 80099a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ac:	f7f6 fc8e 	bl	80002cc <__adddf3>
 80099b0:	4622      	mov	r2, r4
 80099b2:	462b      	mov	r3, r5
 80099b4:	f7f6 fe40 	bl	8000638 <__aeabi_dmul>
 80099b8:	a337      	add	r3, pc, #220	; (adr r3, 8009a98 <__ieee754_acos+0x4a0>)
 80099ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099be:	f7f6 fc83 	bl	80002c8 <__aeabi_dsub>
 80099c2:	4622      	mov	r2, r4
 80099c4:	462b      	mov	r3, r5
 80099c6:	f7f6 fe37 	bl	8000638 <__aeabi_dmul>
 80099ca:	4b39      	ldr	r3, [pc, #228]	; (8009ab0 <__ieee754_acos+0x4b8>)
 80099cc:	2200      	movs	r2, #0
 80099ce:	f7f6 fc7d 	bl	80002cc <__adddf3>
 80099d2:	4602      	mov	r2, r0
 80099d4:	460b      	mov	r3, r1
 80099d6:	4650      	mov	r0, sl
 80099d8:	4659      	mov	r1, fp
 80099da:	f7f6 ff57 	bl	800088c <__aeabi_ddiv>
 80099de:	4642      	mov	r2, r8
 80099e0:	464b      	mov	r3, r9
 80099e2:	f7f6 fe29 	bl	8000638 <__aeabi_dmul>
 80099e6:	2600      	movs	r6, #0
 80099e8:	4682      	mov	sl, r0
 80099ea:	468b      	mov	fp, r1
 80099ec:	4632      	mov	r2, r6
 80099ee:	464b      	mov	r3, r9
 80099f0:	4630      	mov	r0, r6
 80099f2:	4649      	mov	r1, r9
 80099f4:	f7f6 fe20 	bl	8000638 <__aeabi_dmul>
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	4620      	mov	r0, r4
 80099fe:	4629      	mov	r1, r5
 8009a00:	f7f6 fc62 	bl	80002c8 <__aeabi_dsub>
 8009a04:	4632      	mov	r2, r6
 8009a06:	4604      	mov	r4, r0
 8009a08:	460d      	mov	r5, r1
 8009a0a:	464b      	mov	r3, r9
 8009a0c:	4640      	mov	r0, r8
 8009a0e:	4649      	mov	r1, r9
 8009a10:	f7f6 fc5c 	bl	80002cc <__adddf3>
 8009a14:	4602      	mov	r2, r0
 8009a16:	460b      	mov	r3, r1
 8009a18:	4620      	mov	r0, r4
 8009a1a:	4629      	mov	r1, r5
 8009a1c:	f7f6 ff36 	bl	800088c <__aeabi_ddiv>
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	4650      	mov	r0, sl
 8009a26:	4659      	mov	r1, fp
 8009a28:	f7f6 fc50 	bl	80002cc <__adddf3>
 8009a2c:	4632      	mov	r2, r6
 8009a2e:	464b      	mov	r3, r9
 8009a30:	f7f6 fc4c 	bl	80002cc <__adddf3>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	f7f6 fc48 	bl	80002cc <__adddf3>
 8009a3c:	e5fe      	b.n	800963c <__ieee754_acos+0x44>
 8009a3e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8009aa0 <__ieee754_acos+0x4a8>
 8009a42:	e5ed      	b.n	8009620 <__ieee754_acos+0x28>
 8009a44:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8009aa8 <__ieee754_acos+0x4b0>
 8009a48:	e5ea      	b.n	8009620 <__ieee754_acos+0x28>
 8009a4a:	bf00      	nop
 8009a4c:	f3af 8000 	nop.w
 8009a50:	0dfdf709 	.word	0x0dfdf709
 8009a54:	3f023de1 	.word	0x3f023de1
 8009a58:	7501b288 	.word	0x7501b288
 8009a5c:	3f49efe0 	.word	0x3f49efe0
 8009a60:	b5688f3b 	.word	0xb5688f3b
 8009a64:	3fa48228 	.word	0x3fa48228
 8009a68:	0e884455 	.word	0x0e884455
 8009a6c:	3fc9c155 	.word	0x3fc9c155
 8009a70:	03eb6f7d 	.word	0x03eb6f7d
 8009a74:	3fd4d612 	.word	0x3fd4d612
 8009a78:	55555555 	.word	0x55555555
 8009a7c:	3fc55555 	.word	0x3fc55555
 8009a80:	b12e9282 	.word	0xb12e9282
 8009a84:	3fb3b8c5 	.word	0x3fb3b8c5
 8009a88:	1b8d0159 	.word	0x1b8d0159
 8009a8c:	3fe6066c 	.word	0x3fe6066c
 8009a90:	9c598ac8 	.word	0x9c598ac8
 8009a94:	40002ae5 	.word	0x40002ae5
 8009a98:	1c8a2d4b 	.word	0x1c8a2d4b
 8009a9c:	40033a27 	.word	0x40033a27
	...
 8009aa8:	54442d18 	.word	0x54442d18
 8009aac:	3ff921fb 	.word	0x3ff921fb
 8009ab0:	3ff00000 	.word	0x3ff00000
 8009ab4:	3fe00000 	.word	0x3fe00000

08009ab8 <__ieee754_atan2>:
 8009ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009abc:	ec57 6b11 	vmov	r6, r7, d1
 8009ac0:	4273      	negs	r3, r6
 8009ac2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009c48 <__ieee754_atan2+0x190>
 8009ac6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009aca:	4333      	orrs	r3, r6
 8009acc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009ad0:	4573      	cmp	r3, lr
 8009ad2:	ec51 0b10 	vmov	r0, r1, d0
 8009ad6:	ee11 8a10 	vmov	r8, s2
 8009ada:	d80a      	bhi.n	8009af2 <__ieee754_atan2+0x3a>
 8009adc:	4244      	negs	r4, r0
 8009ade:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ae2:	4304      	orrs	r4, r0
 8009ae4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009ae8:	4574      	cmp	r4, lr
 8009aea:	ee10 9a10 	vmov	r9, s0
 8009aee:	468c      	mov	ip, r1
 8009af0:	d907      	bls.n	8009b02 <__ieee754_atan2+0x4a>
 8009af2:	4632      	mov	r2, r6
 8009af4:	463b      	mov	r3, r7
 8009af6:	f7f6 fbe9 	bl	80002cc <__adddf3>
 8009afa:	ec41 0b10 	vmov	d0, r0, r1
 8009afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b02:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009b06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009b0a:	4334      	orrs	r4, r6
 8009b0c:	d103      	bne.n	8009b16 <__ieee754_atan2+0x5e>
 8009b0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b12:	f001 b835 	b.w	800ab80 <atan>
 8009b16:	17bc      	asrs	r4, r7, #30
 8009b18:	f004 0402 	and.w	r4, r4, #2
 8009b1c:	ea53 0909 	orrs.w	r9, r3, r9
 8009b20:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009b24:	d107      	bne.n	8009b36 <__ieee754_atan2+0x7e>
 8009b26:	2c02      	cmp	r4, #2
 8009b28:	d060      	beq.n	8009bec <__ieee754_atan2+0x134>
 8009b2a:	2c03      	cmp	r4, #3
 8009b2c:	d1e5      	bne.n	8009afa <__ieee754_atan2+0x42>
 8009b2e:	a142      	add	r1, pc, #264	; (adr r1, 8009c38 <__ieee754_atan2+0x180>)
 8009b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b34:	e7e1      	b.n	8009afa <__ieee754_atan2+0x42>
 8009b36:	ea52 0808 	orrs.w	r8, r2, r8
 8009b3a:	d106      	bne.n	8009b4a <__ieee754_atan2+0x92>
 8009b3c:	f1bc 0f00 	cmp.w	ip, #0
 8009b40:	da5f      	bge.n	8009c02 <__ieee754_atan2+0x14a>
 8009b42:	a13f      	add	r1, pc, #252	; (adr r1, 8009c40 <__ieee754_atan2+0x188>)
 8009b44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b48:	e7d7      	b.n	8009afa <__ieee754_atan2+0x42>
 8009b4a:	4572      	cmp	r2, lr
 8009b4c:	d10f      	bne.n	8009b6e <__ieee754_atan2+0xb6>
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009b54:	d107      	bne.n	8009b66 <__ieee754_atan2+0xae>
 8009b56:	2c02      	cmp	r4, #2
 8009b58:	d84c      	bhi.n	8009bf4 <__ieee754_atan2+0x13c>
 8009b5a:	4b35      	ldr	r3, [pc, #212]	; (8009c30 <__ieee754_atan2+0x178>)
 8009b5c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009b60:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009b64:	e7c9      	b.n	8009afa <__ieee754_atan2+0x42>
 8009b66:	2c02      	cmp	r4, #2
 8009b68:	d848      	bhi.n	8009bfc <__ieee754_atan2+0x144>
 8009b6a:	4b32      	ldr	r3, [pc, #200]	; (8009c34 <__ieee754_atan2+0x17c>)
 8009b6c:	e7f6      	b.n	8009b5c <__ieee754_atan2+0xa4>
 8009b6e:	4573      	cmp	r3, lr
 8009b70:	d0e4      	beq.n	8009b3c <__ieee754_atan2+0x84>
 8009b72:	1a9b      	subs	r3, r3, r2
 8009b74:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009b78:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009b7c:	da1e      	bge.n	8009bbc <__ieee754_atan2+0x104>
 8009b7e:	2f00      	cmp	r7, #0
 8009b80:	da01      	bge.n	8009b86 <__ieee754_atan2+0xce>
 8009b82:	323c      	adds	r2, #60	; 0x3c
 8009b84:	db1e      	blt.n	8009bc4 <__ieee754_atan2+0x10c>
 8009b86:	4632      	mov	r2, r6
 8009b88:	463b      	mov	r3, r7
 8009b8a:	f7f6 fe7f 	bl	800088c <__aeabi_ddiv>
 8009b8e:	ec41 0b10 	vmov	d0, r0, r1
 8009b92:	f001 f995 	bl	800aec0 <fabs>
 8009b96:	f000 fff3 	bl	800ab80 <atan>
 8009b9a:	ec51 0b10 	vmov	r0, r1, d0
 8009b9e:	2c01      	cmp	r4, #1
 8009ba0:	d013      	beq.n	8009bca <__ieee754_atan2+0x112>
 8009ba2:	2c02      	cmp	r4, #2
 8009ba4:	d015      	beq.n	8009bd2 <__ieee754_atan2+0x11a>
 8009ba6:	2c00      	cmp	r4, #0
 8009ba8:	d0a7      	beq.n	8009afa <__ieee754_atan2+0x42>
 8009baa:	a319      	add	r3, pc, #100	; (adr r3, 8009c10 <__ieee754_atan2+0x158>)
 8009bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb0:	f7f6 fb8a 	bl	80002c8 <__aeabi_dsub>
 8009bb4:	a318      	add	r3, pc, #96	; (adr r3, 8009c18 <__ieee754_atan2+0x160>)
 8009bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bba:	e014      	b.n	8009be6 <__ieee754_atan2+0x12e>
 8009bbc:	a118      	add	r1, pc, #96	; (adr r1, 8009c20 <__ieee754_atan2+0x168>)
 8009bbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bc2:	e7ec      	b.n	8009b9e <__ieee754_atan2+0xe6>
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	e7e9      	b.n	8009b9e <__ieee754_atan2+0xe6>
 8009bca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bce:	4619      	mov	r1, r3
 8009bd0:	e793      	b.n	8009afa <__ieee754_atan2+0x42>
 8009bd2:	a30f      	add	r3, pc, #60	; (adr r3, 8009c10 <__ieee754_atan2+0x158>)
 8009bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd8:	f7f6 fb76 	bl	80002c8 <__aeabi_dsub>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	a10d      	add	r1, pc, #52	; (adr r1, 8009c18 <__ieee754_atan2+0x160>)
 8009be2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009be6:	f7f6 fb6f 	bl	80002c8 <__aeabi_dsub>
 8009bea:	e786      	b.n	8009afa <__ieee754_atan2+0x42>
 8009bec:	a10a      	add	r1, pc, #40	; (adr r1, 8009c18 <__ieee754_atan2+0x160>)
 8009bee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bf2:	e782      	b.n	8009afa <__ieee754_atan2+0x42>
 8009bf4:	a10c      	add	r1, pc, #48	; (adr r1, 8009c28 <__ieee754_atan2+0x170>)
 8009bf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bfa:	e77e      	b.n	8009afa <__ieee754_atan2+0x42>
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	2100      	movs	r1, #0
 8009c00:	e77b      	b.n	8009afa <__ieee754_atan2+0x42>
 8009c02:	a107      	add	r1, pc, #28	; (adr r1, 8009c20 <__ieee754_atan2+0x168>)
 8009c04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c08:	e777      	b.n	8009afa <__ieee754_atan2+0x42>
 8009c0a:	bf00      	nop
 8009c0c:	f3af 8000 	nop.w
 8009c10:	33145c07 	.word	0x33145c07
 8009c14:	3ca1a626 	.word	0x3ca1a626
 8009c18:	54442d18 	.word	0x54442d18
 8009c1c:	400921fb 	.word	0x400921fb
 8009c20:	54442d18 	.word	0x54442d18
 8009c24:	3ff921fb 	.word	0x3ff921fb
 8009c28:	54442d18 	.word	0x54442d18
 8009c2c:	3fe921fb 	.word	0x3fe921fb
 8009c30:	0800b820 	.word	0x0800b820
 8009c34:	0800b838 	.word	0x0800b838
 8009c38:	54442d18 	.word	0x54442d18
 8009c3c:	c00921fb 	.word	0xc00921fb
 8009c40:	54442d18 	.word	0x54442d18
 8009c44:	bff921fb 	.word	0xbff921fb
 8009c48:	7ff00000 	.word	0x7ff00000
 8009c4c:	00000000 	.word	0x00000000

08009c50 <__ieee754_rem_pio2>:
 8009c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c54:	ed2d 8b02 	vpush	{d8}
 8009c58:	ec55 4b10 	vmov	r4, r5, d0
 8009c5c:	4bca      	ldr	r3, [pc, #808]	; (8009f88 <__ieee754_rem_pio2+0x338>)
 8009c5e:	b08b      	sub	sp, #44	; 0x2c
 8009c60:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009c64:	4598      	cmp	r8, r3
 8009c66:	4682      	mov	sl, r0
 8009c68:	9502      	str	r5, [sp, #8]
 8009c6a:	dc08      	bgt.n	8009c7e <__ieee754_rem_pio2+0x2e>
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	2300      	movs	r3, #0
 8009c70:	ed80 0b00 	vstr	d0, [r0]
 8009c74:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009c78:	f04f 0b00 	mov.w	fp, #0
 8009c7c:	e028      	b.n	8009cd0 <__ieee754_rem_pio2+0x80>
 8009c7e:	4bc3      	ldr	r3, [pc, #780]	; (8009f8c <__ieee754_rem_pio2+0x33c>)
 8009c80:	4598      	cmp	r8, r3
 8009c82:	dc78      	bgt.n	8009d76 <__ieee754_rem_pio2+0x126>
 8009c84:	9b02      	ldr	r3, [sp, #8]
 8009c86:	4ec2      	ldr	r6, [pc, #776]	; (8009f90 <__ieee754_rem_pio2+0x340>)
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	ee10 0a10 	vmov	r0, s0
 8009c8e:	a3b0      	add	r3, pc, #704	; (adr r3, 8009f50 <__ieee754_rem_pio2+0x300>)
 8009c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c94:	4629      	mov	r1, r5
 8009c96:	dd39      	ble.n	8009d0c <__ieee754_rem_pio2+0xbc>
 8009c98:	f7f6 fb16 	bl	80002c8 <__aeabi_dsub>
 8009c9c:	45b0      	cmp	r8, r6
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	460d      	mov	r5, r1
 8009ca2:	d01b      	beq.n	8009cdc <__ieee754_rem_pio2+0x8c>
 8009ca4:	a3ac      	add	r3, pc, #688	; (adr r3, 8009f58 <__ieee754_rem_pio2+0x308>)
 8009ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009caa:	f7f6 fb0d 	bl	80002c8 <__aeabi_dsub>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	e9ca 2300 	strd	r2, r3, [sl]
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	4629      	mov	r1, r5
 8009cba:	f7f6 fb05 	bl	80002c8 <__aeabi_dsub>
 8009cbe:	a3a6      	add	r3, pc, #664	; (adr r3, 8009f58 <__ieee754_rem_pio2+0x308>)
 8009cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc4:	f7f6 fb00 	bl	80002c8 <__aeabi_dsub>
 8009cc8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009ccc:	f04f 0b01 	mov.w	fp, #1
 8009cd0:	4658      	mov	r0, fp
 8009cd2:	b00b      	add	sp, #44	; 0x2c
 8009cd4:	ecbd 8b02 	vpop	{d8}
 8009cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cdc:	a3a0      	add	r3, pc, #640	; (adr r3, 8009f60 <__ieee754_rem_pio2+0x310>)
 8009cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce2:	f7f6 faf1 	bl	80002c8 <__aeabi_dsub>
 8009ce6:	a3a0      	add	r3, pc, #640	; (adr r3, 8009f68 <__ieee754_rem_pio2+0x318>)
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	4604      	mov	r4, r0
 8009cee:	460d      	mov	r5, r1
 8009cf0:	f7f6 faea 	bl	80002c8 <__aeabi_dsub>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	e9ca 2300 	strd	r2, r3, [sl]
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	4629      	mov	r1, r5
 8009d00:	f7f6 fae2 	bl	80002c8 <__aeabi_dsub>
 8009d04:	a398      	add	r3, pc, #608	; (adr r3, 8009f68 <__ieee754_rem_pio2+0x318>)
 8009d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0a:	e7db      	b.n	8009cc4 <__ieee754_rem_pio2+0x74>
 8009d0c:	f7f6 fade 	bl	80002cc <__adddf3>
 8009d10:	45b0      	cmp	r8, r6
 8009d12:	4604      	mov	r4, r0
 8009d14:	460d      	mov	r5, r1
 8009d16:	d016      	beq.n	8009d46 <__ieee754_rem_pio2+0xf6>
 8009d18:	a38f      	add	r3, pc, #572	; (adr r3, 8009f58 <__ieee754_rem_pio2+0x308>)
 8009d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1e:	f7f6 fad5 	bl	80002cc <__adddf3>
 8009d22:	4602      	mov	r2, r0
 8009d24:	460b      	mov	r3, r1
 8009d26:	e9ca 2300 	strd	r2, r3, [sl]
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	4629      	mov	r1, r5
 8009d2e:	f7f6 facb 	bl	80002c8 <__aeabi_dsub>
 8009d32:	a389      	add	r3, pc, #548	; (adr r3, 8009f58 <__ieee754_rem_pio2+0x308>)
 8009d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d38:	f7f6 fac8 	bl	80002cc <__adddf3>
 8009d3c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8009d40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009d44:	e7c4      	b.n	8009cd0 <__ieee754_rem_pio2+0x80>
 8009d46:	a386      	add	r3, pc, #536	; (adr r3, 8009f60 <__ieee754_rem_pio2+0x310>)
 8009d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4c:	f7f6 fabe 	bl	80002cc <__adddf3>
 8009d50:	a385      	add	r3, pc, #532	; (adr r3, 8009f68 <__ieee754_rem_pio2+0x318>)
 8009d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d56:	4604      	mov	r4, r0
 8009d58:	460d      	mov	r5, r1
 8009d5a:	f7f6 fab7 	bl	80002cc <__adddf3>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	460b      	mov	r3, r1
 8009d62:	e9ca 2300 	strd	r2, r3, [sl]
 8009d66:	4620      	mov	r0, r4
 8009d68:	4629      	mov	r1, r5
 8009d6a:	f7f6 faad 	bl	80002c8 <__aeabi_dsub>
 8009d6e:	a37e      	add	r3, pc, #504	; (adr r3, 8009f68 <__ieee754_rem_pio2+0x318>)
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	e7e0      	b.n	8009d38 <__ieee754_rem_pio2+0xe8>
 8009d76:	4b87      	ldr	r3, [pc, #540]	; (8009f94 <__ieee754_rem_pio2+0x344>)
 8009d78:	4598      	cmp	r8, r3
 8009d7a:	f300 80d9 	bgt.w	8009f30 <__ieee754_rem_pio2+0x2e0>
 8009d7e:	f001 f89f 	bl	800aec0 <fabs>
 8009d82:	ec55 4b10 	vmov	r4, r5, d0
 8009d86:	ee10 0a10 	vmov	r0, s0
 8009d8a:	a379      	add	r3, pc, #484	; (adr r3, 8009f70 <__ieee754_rem_pio2+0x320>)
 8009d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d90:	4629      	mov	r1, r5
 8009d92:	f7f6 fc51 	bl	8000638 <__aeabi_dmul>
 8009d96:	4b80      	ldr	r3, [pc, #512]	; (8009f98 <__ieee754_rem_pio2+0x348>)
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f7f6 fa97 	bl	80002cc <__adddf3>
 8009d9e:	f7f6 fefb 	bl	8000b98 <__aeabi_d2iz>
 8009da2:	4683      	mov	fp, r0
 8009da4:	f7f6 fbde 	bl	8000564 <__aeabi_i2d>
 8009da8:	4602      	mov	r2, r0
 8009daa:	460b      	mov	r3, r1
 8009dac:	ec43 2b18 	vmov	d8, r2, r3
 8009db0:	a367      	add	r3, pc, #412	; (adr r3, 8009f50 <__ieee754_rem_pio2+0x300>)
 8009db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db6:	f7f6 fc3f 	bl	8000638 <__aeabi_dmul>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	f7f6 fa81 	bl	80002c8 <__aeabi_dsub>
 8009dc6:	a364      	add	r3, pc, #400	; (adr r3, 8009f58 <__ieee754_rem_pio2+0x308>)
 8009dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dcc:	4606      	mov	r6, r0
 8009dce:	460f      	mov	r7, r1
 8009dd0:	ec51 0b18 	vmov	r0, r1, d8
 8009dd4:	f7f6 fc30 	bl	8000638 <__aeabi_dmul>
 8009dd8:	f1bb 0f1f 	cmp.w	fp, #31
 8009ddc:	4604      	mov	r4, r0
 8009dde:	460d      	mov	r5, r1
 8009de0:	dc0d      	bgt.n	8009dfe <__ieee754_rem_pio2+0x1ae>
 8009de2:	4b6e      	ldr	r3, [pc, #440]	; (8009f9c <__ieee754_rem_pio2+0x34c>)
 8009de4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8009de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dec:	4543      	cmp	r3, r8
 8009dee:	d006      	beq.n	8009dfe <__ieee754_rem_pio2+0x1ae>
 8009df0:	4622      	mov	r2, r4
 8009df2:	462b      	mov	r3, r5
 8009df4:	4630      	mov	r0, r6
 8009df6:	4639      	mov	r1, r7
 8009df8:	f7f6 fa66 	bl	80002c8 <__aeabi_dsub>
 8009dfc:	e00f      	b.n	8009e1e <__ieee754_rem_pio2+0x1ce>
 8009dfe:	462b      	mov	r3, r5
 8009e00:	4622      	mov	r2, r4
 8009e02:	4630      	mov	r0, r6
 8009e04:	4639      	mov	r1, r7
 8009e06:	f7f6 fa5f 	bl	80002c8 <__aeabi_dsub>
 8009e0a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009e0e:	9303      	str	r3, [sp, #12]
 8009e10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009e14:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009e18:	f1b8 0f10 	cmp.w	r8, #16
 8009e1c:	dc02      	bgt.n	8009e24 <__ieee754_rem_pio2+0x1d4>
 8009e1e:	e9ca 0100 	strd	r0, r1, [sl]
 8009e22:	e039      	b.n	8009e98 <__ieee754_rem_pio2+0x248>
 8009e24:	a34e      	add	r3, pc, #312	; (adr r3, 8009f60 <__ieee754_rem_pio2+0x310>)
 8009e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2a:	ec51 0b18 	vmov	r0, r1, d8
 8009e2e:	f7f6 fc03 	bl	8000638 <__aeabi_dmul>
 8009e32:	4604      	mov	r4, r0
 8009e34:	460d      	mov	r5, r1
 8009e36:	4602      	mov	r2, r0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	4639      	mov	r1, r7
 8009e3e:	f7f6 fa43 	bl	80002c8 <__aeabi_dsub>
 8009e42:	4602      	mov	r2, r0
 8009e44:	460b      	mov	r3, r1
 8009e46:	4680      	mov	r8, r0
 8009e48:	4689      	mov	r9, r1
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	4639      	mov	r1, r7
 8009e4e:	f7f6 fa3b 	bl	80002c8 <__aeabi_dsub>
 8009e52:	4622      	mov	r2, r4
 8009e54:	462b      	mov	r3, r5
 8009e56:	f7f6 fa37 	bl	80002c8 <__aeabi_dsub>
 8009e5a:	a343      	add	r3, pc, #268	; (adr r3, 8009f68 <__ieee754_rem_pio2+0x318>)
 8009e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e60:	4604      	mov	r4, r0
 8009e62:	460d      	mov	r5, r1
 8009e64:	ec51 0b18 	vmov	r0, r1, d8
 8009e68:	f7f6 fbe6 	bl	8000638 <__aeabi_dmul>
 8009e6c:	4622      	mov	r2, r4
 8009e6e:	462b      	mov	r3, r5
 8009e70:	f7f6 fa2a 	bl	80002c8 <__aeabi_dsub>
 8009e74:	4602      	mov	r2, r0
 8009e76:	460b      	mov	r3, r1
 8009e78:	4604      	mov	r4, r0
 8009e7a:	460d      	mov	r5, r1
 8009e7c:	4640      	mov	r0, r8
 8009e7e:	4649      	mov	r1, r9
 8009e80:	f7f6 fa22 	bl	80002c8 <__aeabi_dsub>
 8009e84:	9a03      	ldr	r2, [sp, #12]
 8009e86:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	2b31      	cmp	r3, #49	; 0x31
 8009e8e:	dc24      	bgt.n	8009eda <__ieee754_rem_pio2+0x28a>
 8009e90:	e9ca 0100 	strd	r0, r1, [sl]
 8009e94:	4646      	mov	r6, r8
 8009e96:	464f      	mov	r7, r9
 8009e98:	e9da 8900 	ldrd	r8, r9, [sl]
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	4642      	mov	r2, r8
 8009ea0:	464b      	mov	r3, r9
 8009ea2:	4639      	mov	r1, r7
 8009ea4:	f7f6 fa10 	bl	80002c8 <__aeabi_dsub>
 8009ea8:	462b      	mov	r3, r5
 8009eaa:	4622      	mov	r2, r4
 8009eac:	f7f6 fa0c 	bl	80002c8 <__aeabi_dsub>
 8009eb0:	9b02      	ldr	r3, [sp, #8]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009eb8:	f6bf af0a 	bge.w	8009cd0 <__ieee754_rem_pio2+0x80>
 8009ebc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009ec0:	f8ca 3004 	str.w	r3, [sl, #4]
 8009ec4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ec8:	f8ca 8000 	str.w	r8, [sl]
 8009ecc:	f8ca 0008 	str.w	r0, [sl, #8]
 8009ed0:	f8ca 300c 	str.w	r3, [sl, #12]
 8009ed4:	f1cb 0b00 	rsb	fp, fp, #0
 8009ed8:	e6fa      	b.n	8009cd0 <__ieee754_rem_pio2+0x80>
 8009eda:	a327      	add	r3, pc, #156	; (adr r3, 8009f78 <__ieee754_rem_pio2+0x328>)
 8009edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee0:	ec51 0b18 	vmov	r0, r1, d8
 8009ee4:	f7f6 fba8 	bl	8000638 <__aeabi_dmul>
 8009ee8:	4604      	mov	r4, r0
 8009eea:	460d      	mov	r5, r1
 8009eec:	4602      	mov	r2, r0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	4640      	mov	r0, r8
 8009ef2:	4649      	mov	r1, r9
 8009ef4:	f7f6 f9e8 	bl	80002c8 <__aeabi_dsub>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	460b      	mov	r3, r1
 8009efc:	4606      	mov	r6, r0
 8009efe:	460f      	mov	r7, r1
 8009f00:	4640      	mov	r0, r8
 8009f02:	4649      	mov	r1, r9
 8009f04:	f7f6 f9e0 	bl	80002c8 <__aeabi_dsub>
 8009f08:	4622      	mov	r2, r4
 8009f0a:	462b      	mov	r3, r5
 8009f0c:	f7f6 f9dc 	bl	80002c8 <__aeabi_dsub>
 8009f10:	a31b      	add	r3, pc, #108	; (adr r3, 8009f80 <__ieee754_rem_pio2+0x330>)
 8009f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f16:	4604      	mov	r4, r0
 8009f18:	460d      	mov	r5, r1
 8009f1a:	ec51 0b18 	vmov	r0, r1, d8
 8009f1e:	f7f6 fb8b 	bl	8000638 <__aeabi_dmul>
 8009f22:	4622      	mov	r2, r4
 8009f24:	462b      	mov	r3, r5
 8009f26:	f7f6 f9cf 	bl	80002c8 <__aeabi_dsub>
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	460d      	mov	r5, r1
 8009f2e:	e75f      	b.n	8009df0 <__ieee754_rem_pio2+0x1a0>
 8009f30:	4b1b      	ldr	r3, [pc, #108]	; (8009fa0 <__ieee754_rem_pio2+0x350>)
 8009f32:	4598      	cmp	r8, r3
 8009f34:	dd36      	ble.n	8009fa4 <__ieee754_rem_pio2+0x354>
 8009f36:	ee10 2a10 	vmov	r2, s0
 8009f3a:	462b      	mov	r3, r5
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	4629      	mov	r1, r5
 8009f40:	f7f6 f9c2 	bl	80002c8 <__aeabi_dsub>
 8009f44:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009f48:	e9ca 0100 	strd	r0, r1, [sl]
 8009f4c:	e694      	b.n	8009c78 <__ieee754_rem_pio2+0x28>
 8009f4e:	bf00      	nop
 8009f50:	54400000 	.word	0x54400000
 8009f54:	3ff921fb 	.word	0x3ff921fb
 8009f58:	1a626331 	.word	0x1a626331
 8009f5c:	3dd0b461 	.word	0x3dd0b461
 8009f60:	1a600000 	.word	0x1a600000
 8009f64:	3dd0b461 	.word	0x3dd0b461
 8009f68:	2e037073 	.word	0x2e037073
 8009f6c:	3ba3198a 	.word	0x3ba3198a
 8009f70:	6dc9c883 	.word	0x6dc9c883
 8009f74:	3fe45f30 	.word	0x3fe45f30
 8009f78:	2e000000 	.word	0x2e000000
 8009f7c:	3ba3198a 	.word	0x3ba3198a
 8009f80:	252049c1 	.word	0x252049c1
 8009f84:	397b839a 	.word	0x397b839a
 8009f88:	3fe921fb 	.word	0x3fe921fb
 8009f8c:	4002d97b 	.word	0x4002d97b
 8009f90:	3ff921fb 	.word	0x3ff921fb
 8009f94:	413921fb 	.word	0x413921fb
 8009f98:	3fe00000 	.word	0x3fe00000
 8009f9c:	0800b850 	.word	0x0800b850
 8009fa0:	7fefffff 	.word	0x7fefffff
 8009fa4:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009fa8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009fac:	ee10 0a10 	vmov	r0, s0
 8009fb0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009fb4:	ee10 6a10 	vmov	r6, s0
 8009fb8:	460f      	mov	r7, r1
 8009fba:	f7f6 fded 	bl	8000b98 <__aeabi_d2iz>
 8009fbe:	f7f6 fad1 	bl	8000564 <__aeabi_i2d>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	4639      	mov	r1, r7
 8009fca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009fce:	f7f6 f97b 	bl	80002c8 <__aeabi_dsub>
 8009fd2:	4b23      	ldr	r3, [pc, #140]	; (800a060 <__ieee754_rem_pio2+0x410>)
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f7f6 fb2f 	bl	8000638 <__aeabi_dmul>
 8009fda:	460f      	mov	r7, r1
 8009fdc:	4606      	mov	r6, r0
 8009fde:	f7f6 fddb 	bl	8000b98 <__aeabi_d2iz>
 8009fe2:	f7f6 fabf 	bl	8000564 <__aeabi_i2d>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	460b      	mov	r3, r1
 8009fea:	4630      	mov	r0, r6
 8009fec:	4639      	mov	r1, r7
 8009fee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ff2:	f7f6 f969 	bl	80002c8 <__aeabi_dsub>
 8009ff6:	4b1a      	ldr	r3, [pc, #104]	; (800a060 <__ieee754_rem_pio2+0x410>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f7f6 fb1d 	bl	8000638 <__aeabi_dmul>
 8009ffe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a002:	ad04      	add	r5, sp, #16
 800a004:	f04f 0803 	mov.w	r8, #3
 800a008:	46a9      	mov	r9, r5
 800a00a:	2600      	movs	r6, #0
 800a00c:	2700      	movs	r7, #0
 800a00e:	4632      	mov	r2, r6
 800a010:	463b      	mov	r3, r7
 800a012:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a016:	46c3      	mov	fp, r8
 800a018:	3d08      	subs	r5, #8
 800a01a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a01e:	f7f6 fd73 	bl	8000b08 <__aeabi_dcmpeq>
 800a022:	2800      	cmp	r0, #0
 800a024:	d1f3      	bne.n	800a00e <__ieee754_rem_pio2+0x3be>
 800a026:	4b0f      	ldr	r3, [pc, #60]	; (800a064 <__ieee754_rem_pio2+0x414>)
 800a028:	9301      	str	r3, [sp, #4]
 800a02a:	2302      	movs	r3, #2
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	4622      	mov	r2, r4
 800a030:	465b      	mov	r3, fp
 800a032:	4651      	mov	r1, sl
 800a034:	4648      	mov	r0, r9
 800a036:	f000 f993 	bl	800a360 <__kernel_rem_pio2>
 800a03a:	9b02      	ldr	r3, [sp, #8]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	4683      	mov	fp, r0
 800a040:	f6bf ae46 	bge.w	8009cd0 <__ieee754_rem_pio2+0x80>
 800a044:	e9da 2100 	ldrd	r2, r1, [sl]
 800a048:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a04c:	e9ca 2300 	strd	r2, r3, [sl]
 800a050:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a054:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a058:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a05c:	e73a      	b.n	8009ed4 <__ieee754_rem_pio2+0x284>
 800a05e:	bf00      	nop
 800a060:	41700000 	.word	0x41700000
 800a064:	0800b8d0 	.word	0x0800b8d0

0800a068 <__ieee754_sqrt>:
 800a068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a06c:	ec55 4b10 	vmov	r4, r5, d0
 800a070:	4e55      	ldr	r6, [pc, #340]	; (800a1c8 <__ieee754_sqrt+0x160>)
 800a072:	43ae      	bics	r6, r5
 800a074:	ee10 0a10 	vmov	r0, s0
 800a078:	ee10 3a10 	vmov	r3, s0
 800a07c:	462a      	mov	r2, r5
 800a07e:	4629      	mov	r1, r5
 800a080:	d110      	bne.n	800a0a4 <__ieee754_sqrt+0x3c>
 800a082:	ee10 2a10 	vmov	r2, s0
 800a086:	462b      	mov	r3, r5
 800a088:	f7f6 fad6 	bl	8000638 <__aeabi_dmul>
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	4620      	mov	r0, r4
 800a092:	4629      	mov	r1, r5
 800a094:	f7f6 f91a 	bl	80002cc <__adddf3>
 800a098:	4604      	mov	r4, r0
 800a09a:	460d      	mov	r5, r1
 800a09c:	ec45 4b10 	vmov	d0, r4, r5
 800a0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0a4:	2d00      	cmp	r5, #0
 800a0a6:	dc10      	bgt.n	800a0ca <__ieee754_sqrt+0x62>
 800a0a8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a0ac:	4330      	orrs	r0, r6
 800a0ae:	d0f5      	beq.n	800a09c <__ieee754_sqrt+0x34>
 800a0b0:	b15d      	cbz	r5, 800a0ca <__ieee754_sqrt+0x62>
 800a0b2:	ee10 2a10 	vmov	r2, s0
 800a0b6:	462b      	mov	r3, r5
 800a0b8:	ee10 0a10 	vmov	r0, s0
 800a0bc:	f7f6 f904 	bl	80002c8 <__aeabi_dsub>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	f7f6 fbe2 	bl	800088c <__aeabi_ddiv>
 800a0c8:	e7e6      	b.n	800a098 <__ieee754_sqrt+0x30>
 800a0ca:	1512      	asrs	r2, r2, #20
 800a0cc:	d074      	beq.n	800a1b8 <__ieee754_sqrt+0x150>
 800a0ce:	07d4      	lsls	r4, r2, #31
 800a0d0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a0d4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a0d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a0dc:	bf5e      	ittt	pl
 800a0de:	0fda      	lsrpl	r2, r3, #31
 800a0e0:	005b      	lslpl	r3, r3, #1
 800a0e2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a0e6:	2400      	movs	r4, #0
 800a0e8:	0fda      	lsrs	r2, r3, #31
 800a0ea:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a0ee:	107f      	asrs	r7, r7, #1
 800a0f0:	005b      	lsls	r3, r3, #1
 800a0f2:	2516      	movs	r5, #22
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a0fa:	1886      	adds	r6, r0, r2
 800a0fc:	428e      	cmp	r6, r1
 800a0fe:	bfde      	ittt	le
 800a100:	1b89      	suble	r1, r1, r6
 800a102:	18b0      	addle	r0, r6, r2
 800a104:	18a4      	addle	r4, r4, r2
 800a106:	0049      	lsls	r1, r1, #1
 800a108:	3d01      	subs	r5, #1
 800a10a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a10e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a112:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a116:	d1f0      	bne.n	800a0fa <__ieee754_sqrt+0x92>
 800a118:	462a      	mov	r2, r5
 800a11a:	f04f 0e20 	mov.w	lr, #32
 800a11e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a122:	4281      	cmp	r1, r0
 800a124:	eb06 0c05 	add.w	ip, r6, r5
 800a128:	dc02      	bgt.n	800a130 <__ieee754_sqrt+0xc8>
 800a12a:	d113      	bne.n	800a154 <__ieee754_sqrt+0xec>
 800a12c:	459c      	cmp	ip, r3
 800a12e:	d811      	bhi.n	800a154 <__ieee754_sqrt+0xec>
 800a130:	f1bc 0f00 	cmp.w	ip, #0
 800a134:	eb0c 0506 	add.w	r5, ip, r6
 800a138:	da43      	bge.n	800a1c2 <__ieee754_sqrt+0x15a>
 800a13a:	2d00      	cmp	r5, #0
 800a13c:	db41      	blt.n	800a1c2 <__ieee754_sqrt+0x15a>
 800a13e:	f100 0801 	add.w	r8, r0, #1
 800a142:	1a09      	subs	r1, r1, r0
 800a144:	459c      	cmp	ip, r3
 800a146:	bf88      	it	hi
 800a148:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800a14c:	eba3 030c 	sub.w	r3, r3, ip
 800a150:	4432      	add	r2, r6
 800a152:	4640      	mov	r0, r8
 800a154:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a158:	f1be 0e01 	subs.w	lr, lr, #1
 800a15c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a160:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a164:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a168:	d1db      	bne.n	800a122 <__ieee754_sqrt+0xba>
 800a16a:	430b      	orrs	r3, r1
 800a16c:	d006      	beq.n	800a17c <__ieee754_sqrt+0x114>
 800a16e:	1c50      	adds	r0, r2, #1
 800a170:	bf13      	iteet	ne
 800a172:	3201      	addne	r2, #1
 800a174:	3401      	addeq	r4, #1
 800a176:	4672      	moveq	r2, lr
 800a178:	f022 0201 	bicne.w	r2, r2, #1
 800a17c:	1063      	asrs	r3, r4, #1
 800a17e:	0852      	lsrs	r2, r2, #1
 800a180:	07e1      	lsls	r1, r4, #31
 800a182:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a186:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a18a:	bf48      	it	mi
 800a18c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a190:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a194:	4614      	mov	r4, r2
 800a196:	e781      	b.n	800a09c <__ieee754_sqrt+0x34>
 800a198:	0ad9      	lsrs	r1, r3, #11
 800a19a:	3815      	subs	r0, #21
 800a19c:	055b      	lsls	r3, r3, #21
 800a19e:	2900      	cmp	r1, #0
 800a1a0:	d0fa      	beq.n	800a198 <__ieee754_sqrt+0x130>
 800a1a2:	02cd      	lsls	r5, r1, #11
 800a1a4:	d50a      	bpl.n	800a1bc <__ieee754_sqrt+0x154>
 800a1a6:	f1c2 0420 	rsb	r4, r2, #32
 800a1aa:	fa23 f404 	lsr.w	r4, r3, r4
 800a1ae:	1e55      	subs	r5, r2, #1
 800a1b0:	4093      	lsls	r3, r2
 800a1b2:	4321      	orrs	r1, r4
 800a1b4:	1b42      	subs	r2, r0, r5
 800a1b6:	e78a      	b.n	800a0ce <__ieee754_sqrt+0x66>
 800a1b8:	4610      	mov	r0, r2
 800a1ba:	e7f0      	b.n	800a19e <__ieee754_sqrt+0x136>
 800a1bc:	0049      	lsls	r1, r1, #1
 800a1be:	3201      	adds	r2, #1
 800a1c0:	e7ef      	b.n	800a1a2 <__ieee754_sqrt+0x13a>
 800a1c2:	4680      	mov	r8, r0
 800a1c4:	e7bd      	b.n	800a142 <__ieee754_sqrt+0xda>
 800a1c6:	bf00      	nop
 800a1c8:	7ff00000 	.word	0x7ff00000
 800a1cc:	00000000 	.word	0x00000000

0800a1d0 <__kernel_cos>:
 800a1d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d4:	ec57 6b10 	vmov	r6, r7, d0
 800a1d8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a1dc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a1e0:	ed8d 1b00 	vstr	d1, [sp]
 800a1e4:	da07      	bge.n	800a1f6 <__kernel_cos+0x26>
 800a1e6:	ee10 0a10 	vmov	r0, s0
 800a1ea:	4639      	mov	r1, r7
 800a1ec:	f7f6 fcd4 	bl	8000b98 <__aeabi_d2iz>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	f000 8088 	beq.w	800a306 <__kernel_cos+0x136>
 800a1f6:	4632      	mov	r2, r6
 800a1f8:	463b      	mov	r3, r7
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	4639      	mov	r1, r7
 800a1fe:	f7f6 fa1b 	bl	8000638 <__aeabi_dmul>
 800a202:	4b51      	ldr	r3, [pc, #324]	; (800a348 <__kernel_cos+0x178>)
 800a204:	2200      	movs	r2, #0
 800a206:	4604      	mov	r4, r0
 800a208:	460d      	mov	r5, r1
 800a20a:	f7f6 fa15 	bl	8000638 <__aeabi_dmul>
 800a20e:	a340      	add	r3, pc, #256	; (adr r3, 800a310 <__kernel_cos+0x140>)
 800a210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a214:	4682      	mov	sl, r0
 800a216:	468b      	mov	fp, r1
 800a218:	4620      	mov	r0, r4
 800a21a:	4629      	mov	r1, r5
 800a21c:	f7f6 fa0c 	bl	8000638 <__aeabi_dmul>
 800a220:	a33d      	add	r3, pc, #244	; (adr r3, 800a318 <__kernel_cos+0x148>)
 800a222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a226:	f7f6 f851 	bl	80002cc <__adddf3>
 800a22a:	4622      	mov	r2, r4
 800a22c:	462b      	mov	r3, r5
 800a22e:	f7f6 fa03 	bl	8000638 <__aeabi_dmul>
 800a232:	a33b      	add	r3, pc, #236	; (adr r3, 800a320 <__kernel_cos+0x150>)
 800a234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a238:	f7f6 f846 	bl	80002c8 <__aeabi_dsub>
 800a23c:	4622      	mov	r2, r4
 800a23e:	462b      	mov	r3, r5
 800a240:	f7f6 f9fa 	bl	8000638 <__aeabi_dmul>
 800a244:	a338      	add	r3, pc, #224	; (adr r3, 800a328 <__kernel_cos+0x158>)
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	f7f6 f83f 	bl	80002cc <__adddf3>
 800a24e:	4622      	mov	r2, r4
 800a250:	462b      	mov	r3, r5
 800a252:	f7f6 f9f1 	bl	8000638 <__aeabi_dmul>
 800a256:	a336      	add	r3, pc, #216	; (adr r3, 800a330 <__kernel_cos+0x160>)
 800a258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25c:	f7f6 f834 	bl	80002c8 <__aeabi_dsub>
 800a260:	4622      	mov	r2, r4
 800a262:	462b      	mov	r3, r5
 800a264:	f7f6 f9e8 	bl	8000638 <__aeabi_dmul>
 800a268:	a333      	add	r3, pc, #204	; (adr r3, 800a338 <__kernel_cos+0x168>)
 800a26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26e:	f7f6 f82d 	bl	80002cc <__adddf3>
 800a272:	4622      	mov	r2, r4
 800a274:	462b      	mov	r3, r5
 800a276:	f7f6 f9df 	bl	8000638 <__aeabi_dmul>
 800a27a:	4622      	mov	r2, r4
 800a27c:	462b      	mov	r3, r5
 800a27e:	f7f6 f9db 	bl	8000638 <__aeabi_dmul>
 800a282:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a286:	4604      	mov	r4, r0
 800a288:	460d      	mov	r5, r1
 800a28a:	4630      	mov	r0, r6
 800a28c:	4639      	mov	r1, r7
 800a28e:	f7f6 f9d3 	bl	8000638 <__aeabi_dmul>
 800a292:	460b      	mov	r3, r1
 800a294:	4602      	mov	r2, r0
 800a296:	4629      	mov	r1, r5
 800a298:	4620      	mov	r0, r4
 800a29a:	f7f6 f815 	bl	80002c8 <__aeabi_dsub>
 800a29e:	4b2b      	ldr	r3, [pc, #172]	; (800a34c <__kernel_cos+0x17c>)
 800a2a0:	4598      	cmp	r8, r3
 800a2a2:	4606      	mov	r6, r0
 800a2a4:	460f      	mov	r7, r1
 800a2a6:	dc10      	bgt.n	800a2ca <__kernel_cos+0xfa>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	4650      	mov	r0, sl
 800a2ae:	4659      	mov	r1, fp
 800a2b0:	f7f6 f80a 	bl	80002c8 <__aeabi_dsub>
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	4926      	ldr	r1, [pc, #152]	; (800a350 <__kernel_cos+0x180>)
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	f7f6 f804 	bl	80002c8 <__aeabi_dsub>
 800a2c0:	ec41 0b10 	vmov	d0, r0, r1
 800a2c4:	b003      	add	sp, #12
 800a2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ca:	4b22      	ldr	r3, [pc, #136]	; (800a354 <__kernel_cos+0x184>)
 800a2cc:	4920      	ldr	r1, [pc, #128]	; (800a350 <__kernel_cos+0x180>)
 800a2ce:	4598      	cmp	r8, r3
 800a2d0:	bfcc      	ite	gt
 800a2d2:	4d21      	ldrgt	r5, [pc, #132]	; (800a358 <__kernel_cos+0x188>)
 800a2d4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a2d8:	2400      	movs	r4, #0
 800a2da:	4622      	mov	r2, r4
 800a2dc:	462b      	mov	r3, r5
 800a2de:	2000      	movs	r0, #0
 800a2e0:	f7f5 fff2 	bl	80002c8 <__aeabi_dsub>
 800a2e4:	4622      	mov	r2, r4
 800a2e6:	4680      	mov	r8, r0
 800a2e8:	4689      	mov	r9, r1
 800a2ea:	462b      	mov	r3, r5
 800a2ec:	4650      	mov	r0, sl
 800a2ee:	4659      	mov	r1, fp
 800a2f0:	f7f5 ffea 	bl	80002c8 <__aeabi_dsub>
 800a2f4:	4632      	mov	r2, r6
 800a2f6:	463b      	mov	r3, r7
 800a2f8:	f7f5 ffe6 	bl	80002c8 <__aeabi_dsub>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	460b      	mov	r3, r1
 800a300:	4640      	mov	r0, r8
 800a302:	4649      	mov	r1, r9
 800a304:	e7da      	b.n	800a2bc <__kernel_cos+0xec>
 800a306:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a340 <__kernel_cos+0x170>
 800a30a:	e7db      	b.n	800a2c4 <__kernel_cos+0xf4>
 800a30c:	f3af 8000 	nop.w
 800a310:	be8838d4 	.word	0xbe8838d4
 800a314:	bda8fae9 	.word	0xbda8fae9
 800a318:	bdb4b1c4 	.word	0xbdb4b1c4
 800a31c:	3e21ee9e 	.word	0x3e21ee9e
 800a320:	809c52ad 	.word	0x809c52ad
 800a324:	3e927e4f 	.word	0x3e927e4f
 800a328:	19cb1590 	.word	0x19cb1590
 800a32c:	3efa01a0 	.word	0x3efa01a0
 800a330:	16c15177 	.word	0x16c15177
 800a334:	3f56c16c 	.word	0x3f56c16c
 800a338:	5555554c 	.word	0x5555554c
 800a33c:	3fa55555 	.word	0x3fa55555
 800a340:	00000000 	.word	0x00000000
 800a344:	3ff00000 	.word	0x3ff00000
 800a348:	3fe00000 	.word	0x3fe00000
 800a34c:	3fd33332 	.word	0x3fd33332
 800a350:	3ff00000 	.word	0x3ff00000
 800a354:	3fe90000 	.word	0x3fe90000
 800a358:	3fd20000 	.word	0x3fd20000
 800a35c:	00000000 	.word	0x00000000

0800a360 <__kernel_rem_pio2>:
 800a360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a364:	ed2d 8b02 	vpush	{d8}
 800a368:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a36c:	f112 0f14 	cmn.w	r2, #20
 800a370:	9308      	str	r3, [sp, #32]
 800a372:	9101      	str	r1, [sp, #4]
 800a374:	4bc4      	ldr	r3, [pc, #784]	; (800a688 <__kernel_rem_pio2+0x328>)
 800a376:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a378:	900b      	str	r0, [sp, #44]	; 0x2c
 800a37a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a37e:	9302      	str	r3, [sp, #8]
 800a380:	9b08      	ldr	r3, [sp, #32]
 800a382:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a386:	bfa8      	it	ge
 800a388:	1ed4      	subge	r4, r2, #3
 800a38a:	9306      	str	r3, [sp, #24]
 800a38c:	bfb2      	itee	lt
 800a38e:	2400      	movlt	r4, #0
 800a390:	2318      	movge	r3, #24
 800a392:	fb94 f4f3 	sdivge	r4, r4, r3
 800a396:	f06f 0317 	mvn.w	r3, #23
 800a39a:	fb04 3303 	mla	r3, r4, r3, r3
 800a39e:	eb03 0a02 	add.w	sl, r3, r2
 800a3a2:	9b02      	ldr	r3, [sp, #8]
 800a3a4:	9a06      	ldr	r2, [sp, #24]
 800a3a6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a678 <__kernel_rem_pio2+0x318>
 800a3aa:	eb03 0802 	add.w	r8, r3, r2
 800a3ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a3b0:	1aa7      	subs	r7, r4, r2
 800a3b2:	ae22      	add	r6, sp, #136	; 0x88
 800a3b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a3b8:	2500      	movs	r5, #0
 800a3ba:	4545      	cmp	r5, r8
 800a3bc:	dd13      	ble.n	800a3e6 <__kernel_rem_pio2+0x86>
 800a3be:	9b08      	ldr	r3, [sp, #32]
 800a3c0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a678 <__kernel_rem_pio2+0x318>
 800a3c4:	aa22      	add	r2, sp, #136	; 0x88
 800a3c6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a3ca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a3ce:	f04f 0800 	mov.w	r8, #0
 800a3d2:	9b02      	ldr	r3, [sp, #8]
 800a3d4:	4598      	cmp	r8, r3
 800a3d6:	dc2f      	bgt.n	800a438 <__kernel_rem_pio2+0xd8>
 800a3d8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a3dc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a3e0:	462f      	mov	r7, r5
 800a3e2:	2600      	movs	r6, #0
 800a3e4:	e01b      	b.n	800a41e <__kernel_rem_pio2+0xbe>
 800a3e6:	42ef      	cmn	r7, r5
 800a3e8:	d407      	bmi.n	800a3fa <__kernel_rem_pio2+0x9a>
 800a3ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a3ee:	f7f6 f8b9 	bl	8000564 <__aeabi_i2d>
 800a3f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a3f6:	3501      	adds	r5, #1
 800a3f8:	e7df      	b.n	800a3ba <__kernel_rem_pio2+0x5a>
 800a3fa:	ec51 0b18 	vmov	r0, r1, d8
 800a3fe:	e7f8      	b.n	800a3f2 <__kernel_rem_pio2+0x92>
 800a400:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a404:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a408:	f7f6 f916 	bl	8000638 <__aeabi_dmul>
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a414:	f7f5 ff5a 	bl	80002cc <__adddf3>
 800a418:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a41c:	3601      	adds	r6, #1
 800a41e:	9b06      	ldr	r3, [sp, #24]
 800a420:	429e      	cmp	r6, r3
 800a422:	f1a7 0708 	sub.w	r7, r7, #8
 800a426:	ddeb      	ble.n	800a400 <__kernel_rem_pio2+0xa0>
 800a428:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a42c:	f108 0801 	add.w	r8, r8, #1
 800a430:	ecab 7b02 	vstmia	fp!, {d7}
 800a434:	3508      	adds	r5, #8
 800a436:	e7cc      	b.n	800a3d2 <__kernel_rem_pio2+0x72>
 800a438:	9b02      	ldr	r3, [sp, #8]
 800a43a:	aa0e      	add	r2, sp, #56	; 0x38
 800a43c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a440:	930d      	str	r3, [sp, #52]	; 0x34
 800a442:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a444:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a448:	9c02      	ldr	r4, [sp, #8]
 800a44a:	930c      	str	r3, [sp, #48]	; 0x30
 800a44c:	00e3      	lsls	r3, r4, #3
 800a44e:	930a      	str	r3, [sp, #40]	; 0x28
 800a450:	ab9a      	add	r3, sp, #616	; 0x268
 800a452:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a456:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a45a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a45e:	ab72      	add	r3, sp, #456	; 0x1c8
 800a460:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a464:	46c3      	mov	fp, r8
 800a466:	46a1      	mov	r9, r4
 800a468:	f1b9 0f00 	cmp.w	r9, #0
 800a46c:	f1a5 0508 	sub.w	r5, r5, #8
 800a470:	dc77      	bgt.n	800a562 <__kernel_rem_pio2+0x202>
 800a472:	ec47 6b10 	vmov	d0, r6, r7
 800a476:	4650      	mov	r0, sl
 800a478:	f000 fdb6 	bl	800afe8 <scalbn>
 800a47c:	ec57 6b10 	vmov	r6, r7, d0
 800a480:	2200      	movs	r2, #0
 800a482:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a486:	ee10 0a10 	vmov	r0, s0
 800a48a:	4639      	mov	r1, r7
 800a48c:	f7f6 f8d4 	bl	8000638 <__aeabi_dmul>
 800a490:	ec41 0b10 	vmov	d0, r0, r1
 800a494:	f000 fd20 	bl	800aed8 <floor>
 800a498:	4b7c      	ldr	r3, [pc, #496]	; (800a68c <__kernel_rem_pio2+0x32c>)
 800a49a:	ec51 0b10 	vmov	r0, r1, d0
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f7f6 f8ca 	bl	8000638 <__aeabi_dmul>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	4639      	mov	r1, r7
 800a4ac:	f7f5 ff0c 	bl	80002c8 <__aeabi_dsub>
 800a4b0:	460f      	mov	r7, r1
 800a4b2:	4606      	mov	r6, r0
 800a4b4:	f7f6 fb70 	bl	8000b98 <__aeabi_d2iz>
 800a4b8:	9004      	str	r0, [sp, #16]
 800a4ba:	f7f6 f853 	bl	8000564 <__aeabi_i2d>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	4639      	mov	r1, r7
 800a4c6:	f7f5 feff 	bl	80002c8 <__aeabi_dsub>
 800a4ca:	f1ba 0f00 	cmp.w	sl, #0
 800a4ce:	4606      	mov	r6, r0
 800a4d0:	460f      	mov	r7, r1
 800a4d2:	dd6d      	ble.n	800a5b0 <__kernel_rem_pio2+0x250>
 800a4d4:	1e62      	subs	r2, r4, #1
 800a4d6:	ab0e      	add	r3, sp, #56	; 0x38
 800a4d8:	9d04      	ldr	r5, [sp, #16]
 800a4da:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a4de:	f1ca 0118 	rsb	r1, sl, #24
 800a4e2:	fa40 f301 	asr.w	r3, r0, r1
 800a4e6:	441d      	add	r5, r3
 800a4e8:	408b      	lsls	r3, r1
 800a4ea:	1ac0      	subs	r0, r0, r3
 800a4ec:	ab0e      	add	r3, sp, #56	; 0x38
 800a4ee:	9504      	str	r5, [sp, #16]
 800a4f0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a4f4:	f1ca 0317 	rsb	r3, sl, #23
 800a4f8:	fa40 fb03 	asr.w	fp, r0, r3
 800a4fc:	f1bb 0f00 	cmp.w	fp, #0
 800a500:	dd65      	ble.n	800a5ce <__kernel_rem_pio2+0x26e>
 800a502:	9b04      	ldr	r3, [sp, #16]
 800a504:	2200      	movs	r2, #0
 800a506:	3301      	adds	r3, #1
 800a508:	9304      	str	r3, [sp, #16]
 800a50a:	4615      	mov	r5, r2
 800a50c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a510:	4294      	cmp	r4, r2
 800a512:	f300 809c 	bgt.w	800a64e <__kernel_rem_pio2+0x2ee>
 800a516:	f1ba 0f00 	cmp.w	sl, #0
 800a51a:	dd07      	ble.n	800a52c <__kernel_rem_pio2+0x1cc>
 800a51c:	f1ba 0f01 	cmp.w	sl, #1
 800a520:	f000 80c0 	beq.w	800a6a4 <__kernel_rem_pio2+0x344>
 800a524:	f1ba 0f02 	cmp.w	sl, #2
 800a528:	f000 80c6 	beq.w	800a6b8 <__kernel_rem_pio2+0x358>
 800a52c:	f1bb 0f02 	cmp.w	fp, #2
 800a530:	d14d      	bne.n	800a5ce <__kernel_rem_pio2+0x26e>
 800a532:	4632      	mov	r2, r6
 800a534:	463b      	mov	r3, r7
 800a536:	4956      	ldr	r1, [pc, #344]	; (800a690 <__kernel_rem_pio2+0x330>)
 800a538:	2000      	movs	r0, #0
 800a53a:	f7f5 fec5 	bl	80002c8 <__aeabi_dsub>
 800a53e:	4606      	mov	r6, r0
 800a540:	460f      	mov	r7, r1
 800a542:	2d00      	cmp	r5, #0
 800a544:	d043      	beq.n	800a5ce <__kernel_rem_pio2+0x26e>
 800a546:	4650      	mov	r0, sl
 800a548:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a680 <__kernel_rem_pio2+0x320>
 800a54c:	f000 fd4c 	bl	800afe8 <scalbn>
 800a550:	4630      	mov	r0, r6
 800a552:	4639      	mov	r1, r7
 800a554:	ec53 2b10 	vmov	r2, r3, d0
 800a558:	f7f5 feb6 	bl	80002c8 <__aeabi_dsub>
 800a55c:	4606      	mov	r6, r0
 800a55e:	460f      	mov	r7, r1
 800a560:	e035      	b.n	800a5ce <__kernel_rem_pio2+0x26e>
 800a562:	4b4c      	ldr	r3, [pc, #304]	; (800a694 <__kernel_rem_pio2+0x334>)
 800a564:	2200      	movs	r2, #0
 800a566:	4630      	mov	r0, r6
 800a568:	4639      	mov	r1, r7
 800a56a:	f7f6 f865 	bl	8000638 <__aeabi_dmul>
 800a56e:	f7f6 fb13 	bl	8000b98 <__aeabi_d2iz>
 800a572:	f7f5 fff7 	bl	8000564 <__aeabi_i2d>
 800a576:	4602      	mov	r2, r0
 800a578:	460b      	mov	r3, r1
 800a57a:	ec43 2b18 	vmov	d8, r2, r3
 800a57e:	4b46      	ldr	r3, [pc, #280]	; (800a698 <__kernel_rem_pio2+0x338>)
 800a580:	2200      	movs	r2, #0
 800a582:	f7f6 f859 	bl	8000638 <__aeabi_dmul>
 800a586:	4602      	mov	r2, r0
 800a588:	460b      	mov	r3, r1
 800a58a:	4630      	mov	r0, r6
 800a58c:	4639      	mov	r1, r7
 800a58e:	f7f5 fe9b 	bl	80002c8 <__aeabi_dsub>
 800a592:	f7f6 fb01 	bl	8000b98 <__aeabi_d2iz>
 800a596:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a59a:	f84b 0b04 	str.w	r0, [fp], #4
 800a59e:	ec51 0b18 	vmov	r0, r1, d8
 800a5a2:	f7f5 fe93 	bl	80002cc <__adddf3>
 800a5a6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	460f      	mov	r7, r1
 800a5ae:	e75b      	b.n	800a468 <__kernel_rem_pio2+0x108>
 800a5b0:	d106      	bne.n	800a5c0 <__kernel_rem_pio2+0x260>
 800a5b2:	1e63      	subs	r3, r4, #1
 800a5b4:	aa0e      	add	r2, sp, #56	; 0x38
 800a5b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a5ba:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a5be:	e79d      	b.n	800a4fc <__kernel_rem_pio2+0x19c>
 800a5c0:	4b36      	ldr	r3, [pc, #216]	; (800a69c <__kernel_rem_pio2+0x33c>)
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f7f6 fabe 	bl	8000b44 <__aeabi_dcmpge>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d13d      	bne.n	800a648 <__kernel_rem_pio2+0x2e8>
 800a5cc:	4683      	mov	fp, r0
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	4639      	mov	r1, r7
 800a5d6:	f7f6 fa97 	bl	8000b08 <__aeabi_dcmpeq>
 800a5da:	2800      	cmp	r0, #0
 800a5dc:	f000 80c0 	beq.w	800a760 <__kernel_rem_pio2+0x400>
 800a5e0:	1e65      	subs	r5, r4, #1
 800a5e2:	462b      	mov	r3, r5
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	9902      	ldr	r1, [sp, #8]
 800a5e8:	428b      	cmp	r3, r1
 800a5ea:	da6c      	bge.n	800a6c6 <__kernel_rem_pio2+0x366>
 800a5ec:	2a00      	cmp	r2, #0
 800a5ee:	f000 8089 	beq.w	800a704 <__kernel_rem_pio2+0x3a4>
 800a5f2:	ab0e      	add	r3, sp, #56	; 0x38
 800a5f4:	f1aa 0a18 	sub.w	sl, sl, #24
 800a5f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f000 80ad 	beq.w	800a75c <__kernel_rem_pio2+0x3fc>
 800a602:	4650      	mov	r0, sl
 800a604:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a680 <__kernel_rem_pio2+0x320>
 800a608:	f000 fcee 	bl	800afe8 <scalbn>
 800a60c:	ab9a      	add	r3, sp, #616	; 0x268
 800a60e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a612:	ec57 6b10 	vmov	r6, r7, d0
 800a616:	00ec      	lsls	r4, r5, #3
 800a618:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a61c:	46aa      	mov	sl, r5
 800a61e:	f1ba 0f00 	cmp.w	sl, #0
 800a622:	f280 80d6 	bge.w	800a7d2 <__kernel_rem_pio2+0x472>
 800a626:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a678 <__kernel_rem_pio2+0x318>
 800a62a:	462e      	mov	r6, r5
 800a62c:	2e00      	cmp	r6, #0
 800a62e:	f2c0 8104 	blt.w	800a83a <__kernel_rem_pio2+0x4da>
 800a632:	ab72      	add	r3, sp, #456	; 0x1c8
 800a634:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a638:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a6a0 <__kernel_rem_pio2+0x340>
 800a63c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a640:	f04f 0800 	mov.w	r8, #0
 800a644:	1baf      	subs	r7, r5, r6
 800a646:	e0ea      	b.n	800a81e <__kernel_rem_pio2+0x4be>
 800a648:	f04f 0b02 	mov.w	fp, #2
 800a64c:	e759      	b.n	800a502 <__kernel_rem_pio2+0x1a2>
 800a64e:	f8d8 3000 	ldr.w	r3, [r8]
 800a652:	b955      	cbnz	r5, 800a66a <__kernel_rem_pio2+0x30a>
 800a654:	b123      	cbz	r3, 800a660 <__kernel_rem_pio2+0x300>
 800a656:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a65a:	f8c8 3000 	str.w	r3, [r8]
 800a65e:	2301      	movs	r3, #1
 800a660:	3201      	adds	r2, #1
 800a662:	f108 0804 	add.w	r8, r8, #4
 800a666:	461d      	mov	r5, r3
 800a668:	e752      	b.n	800a510 <__kernel_rem_pio2+0x1b0>
 800a66a:	1acb      	subs	r3, r1, r3
 800a66c:	f8c8 3000 	str.w	r3, [r8]
 800a670:	462b      	mov	r3, r5
 800a672:	e7f5      	b.n	800a660 <__kernel_rem_pio2+0x300>
 800a674:	f3af 8000 	nop.w
	...
 800a684:	3ff00000 	.word	0x3ff00000
 800a688:	0800ba18 	.word	0x0800ba18
 800a68c:	40200000 	.word	0x40200000
 800a690:	3ff00000 	.word	0x3ff00000
 800a694:	3e700000 	.word	0x3e700000
 800a698:	41700000 	.word	0x41700000
 800a69c:	3fe00000 	.word	0x3fe00000
 800a6a0:	0800b9d8 	.word	0x0800b9d8
 800a6a4:	1e62      	subs	r2, r4, #1
 800a6a6:	ab0e      	add	r3, sp, #56	; 0x38
 800a6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a6b0:	a90e      	add	r1, sp, #56	; 0x38
 800a6b2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a6b6:	e739      	b.n	800a52c <__kernel_rem_pio2+0x1cc>
 800a6b8:	1e62      	subs	r2, r4, #1
 800a6ba:	ab0e      	add	r3, sp, #56	; 0x38
 800a6bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a6c4:	e7f4      	b.n	800a6b0 <__kernel_rem_pio2+0x350>
 800a6c6:	a90e      	add	r1, sp, #56	; 0x38
 800a6c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	e789      	b.n	800a5e6 <__kernel_rem_pio2+0x286>
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a6d8:	2900      	cmp	r1, #0
 800a6da:	d0fa      	beq.n	800a6d2 <__kernel_rem_pio2+0x372>
 800a6dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6de:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a6e2:	446a      	add	r2, sp
 800a6e4:	3a98      	subs	r2, #152	; 0x98
 800a6e6:	920a      	str	r2, [sp, #40]	; 0x28
 800a6e8:	9a08      	ldr	r2, [sp, #32]
 800a6ea:	18e3      	adds	r3, r4, r3
 800a6ec:	18a5      	adds	r5, r4, r2
 800a6ee:	aa22      	add	r2, sp, #136	; 0x88
 800a6f0:	f104 0801 	add.w	r8, r4, #1
 800a6f4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a6f8:	9304      	str	r3, [sp, #16]
 800a6fa:	9b04      	ldr	r3, [sp, #16]
 800a6fc:	4543      	cmp	r3, r8
 800a6fe:	da04      	bge.n	800a70a <__kernel_rem_pio2+0x3aa>
 800a700:	461c      	mov	r4, r3
 800a702:	e6a3      	b.n	800a44c <__kernel_rem_pio2+0xec>
 800a704:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a706:	2301      	movs	r3, #1
 800a708:	e7e4      	b.n	800a6d4 <__kernel_rem_pio2+0x374>
 800a70a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a70c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a710:	f7f5 ff28 	bl	8000564 <__aeabi_i2d>
 800a714:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a71a:	46ab      	mov	fp, r5
 800a71c:	461c      	mov	r4, r3
 800a71e:	f04f 0900 	mov.w	r9, #0
 800a722:	2600      	movs	r6, #0
 800a724:	2700      	movs	r7, #0
 800a726:	9b06      	ldr	r3, [sp, #24]
 800a728:	4599      	cmp	r9, r3
 800a72a:	dd06      	ble.n	800a73a <__kernel_rem_pio2+0x3da>
 800a72c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a72e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a732:	f108 0801 	add.w	r8, r8, #1
 800a736:	930a      	str	r3, [sp, #40]	; 0x28
 800a738:	e7df      	b.n	800a6fa <__kernel_rem_pio2+0x39a>
 800a73a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a73e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a742:	f7f5 ff79 	bl	8000638 <__aeabi_dmul>
 800a746:	4602      	mov	r2, r0
 800a748:	460b      	mov	r3, r1
 800a74a:	4630      	mov	r0, r6
 800a74c:	4639      	mov	r1, r7
 800a74e:	f7f5 fdbd 	bl	80002cc <__adddf3>
 800a752:	f109 0901 	add.w	r9, r9, #1
 800a756:	4606      	mov	r6, r0
 800a758:	460f      	mov	r7, r1
 800a75a:	e7e4      	b.n	800a726 <__kernel_rem_pio2+0x3c6>
 800a75c:	3d01      	subs	r5, #1
 800a75e:	e748      	b.n	800a5f2 <__kernel_rem_pio2+0x292>
 800a760:	ec47 6b10 	vmov	d0, r6, r7
 800a764:	f1ca 0000 	rsb	r0, sl, #0
 800a768:	f000 fc3e 	bl	800afe8 <scalbn>
 800a76c:	ec57 6b10 	vmov	r6, r7, d0
 800a770:	4ba0      	ldr	r3, [pc, #640]	; (800a9f4 <__kernel_rem_pio2+0x694>)
 800a772:	ee10 0a10 	vmov	r0, s0
 800a776:	2200      	movs	r2, #0
 800a778:	4639      	mov	r1, r7
 800a77a:	f7f6 f9e3 	bl	8000b44 <__aeabi_dcmpge>
 800a77e:	b1f8      	cbz	r0, 800a7c0 <__kernel_rem_pio2+0x460>
 800a780:	4b9d      	ldr	r3, [pc, #628]	; (800a9f8 <__kernel_rem_pio2+0x698>)
 800a782:	2200      	movs	r2, #0
 800a784:	4630      	mov	r0, r6
 800a786:	4639      	mov	r1, r7
 800a788:	f7f5 ff56 	bl	8000638 <__aeabi_dmul>
 800a78c:	f7f6 fa04 	bl	8000b98 <__aeabi_d2iz>
 800a790:	4680      	mov	r8, r0
 800a792:	f7f5 fee7 	bl	8000564 <__aeabi_i2d>
 800a796:	4b97      	ldr	r3, [pc, #604]	; (800a9f4 <__kernel_rem_pio2+0x694>)
 800a798:	2200      	movs	r2, #0
 800a79a:	f7f5 ff4d 	bl	8000638 <__aeabi_dmul>
 800a79e:	460b      	mov	r3, r1
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	4639      	mov	r1, r7
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	f7f5 fd8f 	bl	80002c8 <__aeabi_dsub>
 800a7aa:	f7f6 f9f5 	bl	8000b98 <__aeabi_d2iz>
 800a7ae:	1c65      	adds	r5, r4, #1
 800a7b0:	ab0e      	add	r3, sp, #56	; 0x38
 800a7b2:	f10a 0a18 	add.w	sl, sl, #24
 800a7b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a7ba:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a7be:	e720      	b.n	800a602 <__kernel_rem_pio2+0x2a2>
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	4639      	mov	r1, r7
 800a7c4:	f7f6 f9e8 	bl	8000b98 <__aeabi_d2iz>
 800a7c8:	ab0e      	add	r3, sp, #56	; 0x38
 800a7ca:	4625      	mov	r5, r4
 800a7cc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a7d0:	e717      	b.n	800a602 <__kernel_rem_pio2+0x2a2>
 800a7d2:	ab0e      	add	r3, sp, #56	; 0x38
 800a7d4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a7d8:	f7f5 fec4 	bl	8000564 <__aeabi_i2d>
 800a7dc:	4632      	mov	r2, r6
 800a7de:	463b      	mov	r3, r7
 800a7e0:	f7f5 ff2a 	bl	8000638 <__aeabi_dmul>
 800a7e4:	4b84      	ldr	r3, [pc, #528]	; (800a9f8 <__kernel_rem_pio2+0x698>)
 800a7e6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	4639      	mov	r1, r7
 800a7f0:	f7f5 ff22 	bl	8000638 <__aeabi_dmul>
 800a7f4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	460f      	mov	r7, r1
 800a7fc:	e70f      	b.n	800a61e <__kernel_rem_pio2+0x2be>
 800a7fe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a802:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a806:	f7f5 ff17 	bl	8000638 <__aeabi_dmul>
 800a80a:	4602      	mov	r2, r0
 800a80c:	460b      	mov	r3, r1
 800a80e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a812:	f7f5 fd5b 	bl	80002cc <__adddf3>
 800a816:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a81a:	f108 0801 	add.w	r8, r8, #1
 800a81e:	9b02      	ldr	r3, [sp, #8]
 800a820:	4598      	cmp	r8, r3
 800a822:	dc01      	bgt.n	800a828 <__kernel_rem_pio2+0x4c8>
 800a824:	45b8      	cmp	r8, r7
 800a826:	ddea      	ble.n	800a7fe <__kernel_rem_pio2+0x49e>
 800a828:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a82c:	ab4a      	add	r3, sp, #296	; 0x128
 800a82e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a832:	ed87 7b00 	vstr	d7, [r7]
 800a836:	3e01      	subs	r6, #1
 800a838:	e6f8      	b.n	800a62c <__kernel_rem_pio2+0x2cc>
 800a83a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	dc0b      	bgt.n	800a858 <__kernel_rem_pio2+0x4f8>
 800a840:	2b00      	cmp	r3, #0
 800a842:	dc35      	bgt.n	800a8b0 <__kernel_rem_pio2+0x550>
 800a844:	d059      	beq.n	800a8fa <__kernel_rem_pio2+0x59a>
 800a846:	9b04      	ldr	r3, [sp, #16]
 800a848:	f003 0007 	and.w	r0, r3, #7
 800a84c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a850:	ecbd 8b02 	vpop	{d8}
 800a854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a858:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a85a:	2b03      	cmp	r3, #3
 800a85c:	d1f3      	bne.n	800a846 <__kernel_rem_pio2+0x4e6>
 800a85e:	ab4a      	add	r3, sp, #296	; 0x128
 800a860:	4423      	add	r3, r4
 800a862:	9306      	str	r3, [sp, #24]
 800a864:	461c      	mov	r4, r3
 800a866:	469a      	mov	sl, r3
 800a868:	9502      	str	r5, [sp, #8]
 800a86a:	9b02      	ldr	r3, [sp, #8]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	f1aa 0a08 	sub.w	sl, sl, #8
 800a872:	dc6b      	bgt.n	800a94c <__kernel_rem_pio2+0x5ec>
 800a874:	46aa      	mov	sl, r5
 800a876:	f1ba 0f01 	cmp.w	sl, #1
 800a87a:	f1a4 0408 	sub.w	r4, r4, #8
 800a87e:	f300 8085 	bgt.w	800a98c <__kernel_rem_pio2+0x62c>
 800a882:	9c06      	ldr	r4, [sp, #24]
 800a884:	2000      	movs	r0, #0
 800a886:	3408      	adds	r4, #8
 800a888:	2100      	movs	r1, #0
 800a88a:	2d01      	cmp	r5, #1
 800a88c:	f300 809d 	bgt.w	800a9ca <__kernel_rem_pio2+0x66a>
 800a890:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a894:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a898:	f1bb 0f00 	cmp.w	fp, #0
 800a89c:	f040 809b 	bne.w	800a9d6 <__kernel_rem_pio2+0x676>
 800a8a0:	9b01      	ldr	r3, [sp, #4]
 800a8a2:	e9c3 5600 	strd	r5, r6, [r3]
 800a8a6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a8aa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a8ae:	e7ca      	b.n	800a846 <__kernel_rem_pio2+0x4e6>
 800a8b0:	3408      	adds	r4, #8
 800a8b2:	ab4a      	add	r3, sp, #296	; 0x128
 800a8b4:	441c      	add	r4, r3
 800a8b6:	462e      	mov	r6, r5
 800a8b8:	2000      	movs	r0, #0
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	2e00      	cmp	r6, #0
 800a8be:	da36      	bge.n	800a92e <__kernel_rem_pio2+0x5ce>
 800a8c0:	f1bb 0f00 	cmp.w	fp, #0
 800a8c4:	d039      	beq.n	800a93a <__kernel_rem_pio2+0x5da>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8cc:	9c01      	ldr	r4, [sp, #4]
 800a8ce:	e9c4 2300 	strd	r2, r3, [r4]
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a8da:	f7f5 fcf5 	bl	80002c8 <__aeabi_dsub>
 800a8de:	ae4c      	add	r6, sp, #304	; 0x130
 800a8e0:	2401      	movs	r4, #1
 800a8e2:	42a5      	cmp	r5, r4
 800a8e4:	da2c      	bge.n	800a940 <__kernel_rem_pio2+0x5e0>
 800a8e6:	f1bb 0f00 	cmp.w	fp, #0
 800a8ea:	d002      	beq.n	800a8f2 <__kernel_rem_pio2+0x592>
 800a8ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	9b01      	ldr	r3, [sp, #4]
 800a8f4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a8f8:	e7a5      	b.n	800a846 <__kernel_rem_pio2+0x4e6>
 800a8fa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800a8fe:	eb0d 0403 	add.w	r4, sp, r3
 800a902:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a906:	2000      	movs	r0, #0
 800a908:	2100      	movs	r1, #0
 800a90a:	2d00      	cmp	r5, #0
 800a90c:	da09      	bge.n	800a922 <__kernel_rem_pio2+0x5c2>
 800a90e:	f1bb 0f00 	cmp.w	fp, #0
 800a912:	d002      	beq.n	800a91a <__kernel_rem_pio2+0x5ba>
 800a914:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a918:	4619      	mov	r1, r3
 800a91a:	9b01      	ldr	r3, [sp, #4]
 800a91c:	e9c3 0100 	strd	r0, r1, [r3]
 800a920:	e791      	b.n	800a846 <__kernel_rem_pio2+0x4e6>
 800a922:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a926:	f7f5 fcd1 	bl	80002cc <__adddf3>
 800a92a:	3d01      	subs	r5, #1
 800a92c:	e7ed      	b.n	800a90a <__kernel_rem_pio2+0x5aa>
 800a92e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a932:	f7f5 fccb 	bl	80002cc <__adddf3>
 800a936:	3e01      	subs	r6, #1
 800a938:	e7c0      	b.n	800a8bc <__kernel_rem_pio2+0x55c>
 800a93a:	4602      	mov	r2, r0
 800a93c:	460b      	mov	r3, r1
 800a93e:	e7c5      	b.n	800a8cc <__kernel_rem_pio2+0x56c>
 800a940:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a944:	f7f5 fcc2 	bl	80002cc <__adddf3>
 800a948:	3401      	adds	r4, #1
 800a94a:	e7ca      	b.n	800a8e2 <__kernel_rem_pio2+0x582>
 800a94c:	e9da 8900 	ldrd	r8, r9, [sl]
 800a950:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a954:	9b02      	ldr	r3, [sp, #8]
 800a956:	3b01      	subs	r3, #1
 800a958:	9302      	str	r3, [sp, #8]
 800a95a:	4632      	mov	r2, r6
 800a95c:	463b      	mov	r3, r7
 800a95e:	4640      	mov	r0, r8
 800a960:	4649      	mov	r1, r9
 800a962:	f7f5 fcb3 	bl	80002cc <__adddf3>
 800a966:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a96a:	4602      	mov	r2, r0
 800a96c:	460b      	mov	r3, r1
 800a96e:	4640      	mov	r0, r8
 800a970:	4649      	mov	r1, r9
 800a972:	f7f5 fca9 	bl	80002c8 <__aeabi_dsub>
 800a976:	4632      	mov	r2, r6
 800a978:	463b      	mov	r3, r7
 800a97a:	f7f5 fca7 	bl	80002cc <__adddf3>
 800a97e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800a982:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a986:	ed8a 7b00 	vstr	d7, [sl]
 800a98a:	e76e      	b.n	800a86a <__kernel_rem_pio2+0x50a>
 800a98c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a990:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a994:	4640      	mov	r0, r8
 800a996:	4632      	mov	r2, r6
 800a998:	463b      	mov	r3, r7
 800a99a:	4649      	mov	r1, r9
 800a99c:	f7f5 fc96 	bl	80002cc <__adddf3>
 800a9a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	4640      	mov	r0, r8
 800a9aa:	4649      	mov	r1, r9
 800a9ac:	f7f5 fc8c 	bl	80002c8 <__aeabi_dsub>
 800a9b0:	4632      	mov	r2, r6
 800a9b2:	463b      	mov	r3, r7
 800a9b4:	f7f5 fc8a 	bl	80002cc <__adddf3>
 800a9b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a9c0:	ed84 7b00 	vstr	d7, [r4]
 800a9c4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a9c8:	e755      	b.n	800a876 <__kernel_rem_pio2+0x516>
 800a9ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a9ce:	f7f5 fc7d 	bl	80002cc <__adddf3>
 800a9d2:	3d01      	subs	r5, #1
 800a9d4:	e759      	b.n	800a88a <__kernel_rem_pio2+0x52a>
 800a9d6:	9b01      	ldr	r3, [sp, #4]
 800a9d8:	9a01      	ldr	r2, [sp, #4]
 800a9da:	601d      	str	r5, [r3, #0]
 800a9dc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800a9e0:	605c      	str	r4, [r3, #4]
 800a9e2:	609f      	str	r7, [r3, #8]
 800a9e4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800a9e8:	60d3      	str	r3, [r2, #12]
 800a9ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9ee:	6110      	str	r0, [r2, #16]
 800a9f0:	6153      	str	r3, [r2, #20]
 800a9f2:	e728      	b.n	800a846 <__kernel_rem_pio2+0x4e6>
 800a9f4:	41700000 	.word	0x41700000
 800a9f8:	3e700000 	.word	0x3e700000
 800a9fc:	00000000 	.word	0x00000000

0800aa00 <__kernel_sin>:
 800aa00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa04:	ed2d 8b04 	vpush	{d8-d9}
 800aa08:	eeb0 8a41 	vmov.f32	s16, s2
 800aa0c:	eef0 8a61 	vmov.f32	s17, s3
 800aa10:	ec55 4b10 	vmov	r4, r5, d0
 800aa14:	b083      	sub	sp, #12
 800aa16:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aa1a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800aa1e:	9001      	str	r0, [sp, #4]
 800aa20:	da06      	bge.n	800aa30 <__kernel_sin+0x30>
 800aa22:	ee10 0a10 	vmov	r0, s0
 800aa26:	4629      	mov	r1, r5
 800aa28:	f7f6 f8b6 	bl	8000b98 <__aeabi_d2iz>
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	d051      	beq.n	800aad4 <__kernel_sin+0xd4>
 800aa30:	4622      	mov	r2, r4
 800aa32:	462b      	mov	r3, r5
 800aa34:	4620      	mov	r0, r4
 800aa36:	4629      	mov	r1, r5
 800aa38:	f7f5 fdfe 	bl	8000638 <__aeabi_dmul>
 800aa3c:	4682      	mov	sl, r0
 800aa3e:	468b      	mov	fp, r1
 800aa40:	4602      	mov	r2, r0
 800aa42:	460b      	mov	r3, r1
 800aa44:	4620      	mov	r0, r4
 800aa46:	4629      	mov	r1, r5
 800aa48:	f7f5 fdf6 	bl	8000638 <__aeabi_dmul>
 800aa4c:	a341      	add	r3, pc, #260	; (adr r3, 800ab54 <__kernel_sin+0x154>)
 800aa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa52:	4680      	mov	r8, r0
 800aa54:	4689      	mov	r9, r1
 800aa56:	4650      	mov	r0, sl
 800aa58:	4659      	mov	r1, fp
 800aa5a:	f7f5 fded 	bl	8000638 <__aeabi_dmul>
 800aa5e:	a33f      	add	r3, pc, #252	; (adr r3, 800ab5c <__kernel_sin+0x15c>)
 800aa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa64:	f7f5 fc30 	bl	80002c8 <__aeabi_dsub>
 800aa68:	4652      	mov	r2, sl
 800aa6a:	465b      	mov	r3, fp
 800aa6c:	f7f5 fde4 	bl	8000638 <__aeabi_dmul>
 800aa70:	a33c      	add	r3, pc, #240	; (adr r3, 800ab64 <__kernel_sin+0x164>)
 800aa72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa76:	f7f5 fc29 	bl	80002cc <__adddf3>
 800aa7a:	4652      	mov	r2, sl
 800aa7c:	465b      	mov	r3, fp
 800aa7e:	f7f5 fddb 	bl	8000638 <__aeabi_dmul>
 800aa82:	a33a      	add	r3, pc, #232	; (adr r3, 800ab6c <__kernel_sin+0x16c>)
 800aa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa88:	f7f5 fc1e 	bl	80002c8 <__aeabi_dsub>
 800aa8c:	4652      	mov	r2, sl
 800aa8e:	465b      	mov	r3, fp
 800aa90:	f7f5 fdd2 	bl	8000638 <__aeabi_dmul>
 800aa94:	a337      	add	r3, pc, #220	; (adr r3, 800ab74 <__kernel_sin+0x174>)
 800aa96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9a:	f7f5 fc17 	bl	80002cc <__adddf3>
 800aa9e:	9b01      	ldr	r3, [sp, #4]
 800aaa0:	4606      	mov	r6, r0
 800aaa2:	460f      	mov	r7, r1
 800aaa4:	b9eb      	cbnz	r3, 800aae2 <__kernel_sin+0xe2>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	4650      	mov	r0, sl
 800aaac:	4659      	mov	r1, fp
 800aaae:	f7f5 fdc3 	bl	8000638 <__aeabi_dmul>
 800aab2:	a325      	add	r3, pc, #148	; (adr r3, 800ab48 <__kernel_sin+0x148>)
 800aab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab8:	f7f5 fc06 	bl	80002c8 <__aeabi_dsub>
 800aabc:	4642      	mov	r2, r8
 800aabe:	464b      	mov	r3, r9
 800aac0:	f7f5 fdba 	bl	8000638 <__aeabi_dmul>
 800aac4:	4602      	mov	r2, r0
 800aac6:	460b      	mov	r3, r1
 800aac8:	4620      	mov	r0, r4
 800aaca:	4629      	mov	r1, r5
 800aacc:	f7f5 fbfe 	bl	80002cc <__adddf3>
 800aad0:	4604      	mov	r4, r0
 800aad2:	460d      	mov	r5, r1
 800aad4:	ec45 4b10 	vmov	d0, r4, r5
 800aad8:	b003      	add	sp, #12
 800aada:	ecbd 8b04 	vpop	{d8-d9}
 800aade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae2:	4b1b      	ldr	r3, [pc, #108]	; (800ab50 <__kernel_sin+0x150>)
 800aae4:	ec51 0b18 	vmov	r0, r1, d8
 800aae8:	2200      	movs	r2, #0
 800aaea:	f7f5 fda5 	bl	8000638 <__aeabi_dmul>
 800aaee:	4632      	mov	r2, r6
 800aaf0:	ec41 0b19 	vmov	d9, r0, r1
 800aaf4:	463b      	mov	r3, r7
 800aaf6:	4640      	mov	r0, r8
 800aaf8:	4649      	mov	r1, r9
 800aafa:	f7f5 fd9d 	bl	8000638 <__aeabi_dmul>
 800aafe:	4602      	mov	r2, r0
 800ab00:	460b      	mov	r3, r1
 800ab02:	ec51 0b19 	vmov	r0, r1, d9
 800ab06:	f7f5 fbdf 	bl	80002c8 <__aeabi_dsub>
 800ab0a:	4652      	mov	r2, sl
 800ab0c:	465b      	mov	r3, fp
 800ab0e:	f7f5 fd93 	bl	8000638 <__aeabi_dmul>
 800ab12:	ec53 2b18 	vmov	r2, r3, d8
 800ab16:	f7f5 fbd7 	bl	80002c8 <__aeabi_dsub>
 800ab1a:	a30b      	add	r3, pc, #44	; (adr r3, 800ab48 <__kernel_sin+0x148>)
 800ab1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab20:	4606      	mov	r6, r0
 800ab22:	460f      	mov	r7, r1
 800ab24:	4640      	mov	r0, r8
 800ab26:	4649      	mov	r1, r9
 800ab28:	f7f5 fd86 	bl	8000638 <__aeabi_dmul>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	4630      	mov	r0, r6
 800ab32:	4639      	mov	r1, r7
 800ab34:	f7f5 fbca 	bl	80002cc <__adddf3>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	4629      	mov	r1, r5
 800ab40:	f7f5 fbc2 	bl	80002c8 <__aeabi_dsub>
 800ab44:	e7c4      	b.n	800aad0 <__kernel_sin+0xd0>
 800ab46:	bf00      	nop
 800ab48:	55555549 	.word	0x55555549
 800ab4c:	3fc55555 	.word	0x3fc55555
 800ab50:	3fe00000 	.word	0x3fe00000
 800ab54:	5acfd57c 	.word	0x5acfd57c
 800ab58:	3de5d93a 	.word	0x3de5d93a
 800ab5c:	8a2b9ceb 	.word	0x8a2b9ceb
 800ab60:	3e5ae5e6 	.word	0x3e5ae5e6
 800ab64:	57b1fe7d 	.word	0x57b1fe7d
 800ab68:	3ec71de3 	.word	0x3ec71de3
 800ab6c:	19c161d5 	.word	0x19c161d5
 800ab70:	3f2a01a0 	.word	0x3f2a01a0
 800ab74:	1110f8a6 	.word	0x1110f8a6
 800ab78:	3f811111 	.word	0x3f811111
 800ab7c:	00000000 	.word	0x00000000

0800ab80 <atan>:
 800ab80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab84:	ec55 4b10 	vmov	r4, r5, d0
 800ab88:	4bc3      	ldr	r3, [pc, #780]	; (800ae98 <atan+0x318>)
 800ab8a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ab8e:	429e      	cmp	r6, r3
 800ab90:	46ab      	mov	fp, r5
 800ab92:	dd18      	ble.n	800abc6 <atan+0x46>
 800ab94:	4bc1      	ldr	r3, [pc, #772]	; (800ae9c <atan+0x31c>)
 800ab96:	429e      	cmp	r6, r3
 800ab98:	dc01      	bgt.n	800ab9e <atan+0x1e>
 800ab9a:	d109      	bne.n	800abb0 <atan+0x30>
 800ab9c:	b144      	cbz	r4, 800abb0 <atan+0x30>
 800ab9e:	4622      	mov	r2, r4
 800aba0:	462b      	mov	r3, r5
 800aba2:	4620      	mov	r0, r4
 800aba4:	4629      	mov	r1, r5
 800aba6:	f7f5 fb91 	bl	80002cc <__adddf3>
 800abaa:	4604      	mov	r4, r0
 800abac:	460d      	mov	r5, r1
 800abae:	e006      	b.n	800abbe <atan+0x3e>
 800abb0:	f1bb 0f00 	cmp.w	fp, #0
 800abb4:	f300 8131 	bgt.w	800ae1a <atan+0x29a>
 800abb8:	a59b      	add	r5, pc, #620	; (adr r5, 800ae28 <atan+0x2a8>)
 800abba:	e9d5 4500 	ldrd	r4, r5, [r5]
 800abbe:	ec45 4b10 	vmov	d0, r4, r5
 800abc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abc6:	4bb6      	ldr	r3, [pc, #728]	; (800aea0 <atan+0x320>)
 800abc8:	429e      	cmp	r6, r3
 800abca:	dc14      	bgt.n	800abf6 <atan+0x76>
 800abcc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800abd0:	429e      	cmp	r6, r3
 800abd2:	dc0d      	bgt.n	800abf0 <atan+0x70>
 800abd4:	a396      	add	r3, pc, #600	; (adr r3, 800ae30 <atan+0x2b0>)
 800abd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abda:	ee10 0a10 	vmov	r0, s0
 800abde:	4629      	mov	r1, r5
 800abe0:	f7f5 fb74 	bl	80002cc <__adddf3>
 800abe4:	4baf      	ldr	r3, [pc, #700]	; (800aea4 <atan+0x324>)
 800abe6:	2200      	movs	r2, #0
 800abe8:	f7f5 ffb6 	bl	8000b58 <__aeabi_dcmpgt>
 800abec:	2800      	cmp	r0, #0
 800abee:	d1e6      	bne.n	800abbe <atan+0x3e>
 800abf0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800abf4:	e02b      	b.n	800ac4e <atan+0xce>
 800abf6:	f000 f963 	bl	800aec0 <fabs>
 800abfa:	4bab      	ldr	r3, [pc, #684]	; (800aea8 <atan+0x328>)
 800abfc:	429e      	cmp	r6, r3
 800abfe:	ec55 4b10 	vmov	r4, r5, d0
 800ac02:	f300 80bf 	bgt.w	800ad84 <atan+0x204>
 800ac06:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ac0a:	429e      	cmp	r6, r3
 800ac0c:	f300 80a0 	bgt.w	800ad50 <atan+0x1d0>
 800ac10:	ee10 2a10 	vmov	r2, s0
 800ac14:	ee10 0a10 	vmov	r0, s0
 800ac18:	462b      	mov	r3, r5
 800ac1a:	4629      	mov	r1, r5
 800ac1c:	f7f5 fb56 	bl	80002cc <__adddf3>
 800ac20:	4ba0      	ldr	r3, [pc, #640]	; (800aea4 <atan+0x324>)
 800ac22:	2200      	movs	r2, #0
 800ac24:	f7f5 fb50 	bl	80002c8 <__aeabi_dsub>
 800ac28:	2200      	movs	r2, #0
 800ac2a:	4606      	mov	r6, r0
 800ac2c:	460f      	mov	r7, r1
 800ac2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac32:	4620      	mov	r0, r4
 800ac34:	4629      	mov	r1, r5
 800ac36:	f7f5 fb49 	bl	80002cc <__adddf3>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	4630      	mov	r0, r6
 800ac40:	4639      	mov	r1, r7
 800ac42:	f7f5 fe23 	bl	800088c <__aeabi_ddiv>
 800ac46:	f04f 0a00 	mov.w	sl, #0
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	460d      	mov	r5, r1
 800ac4e:	4622      	mov	r2, r4
 800ac50:	462b      	mov	r3, r5
 800ac52:	4620      	mov	r0, r4
 800ac54:	4629      	mov	r1, r5
 800ac56:	f7f5 fcef 	bl	8000638 <__aeabi_dmul>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	4680      	mov	r8, r0
 800ac60:	4689      	mov	r9, r1
 800ac62:	f7f5 fce9 	bl	8000638 <__aeabi_dmul>
 800ac66:	a374      	add	r3, pc, #464	; (adr r3, 800ae38 <atan+0x2b8>)
 800ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6c:	4606      	mov	r6, r0
 800ac6e:	460f      	mov	r7, r1
 800ac70:	f7f5 fce2 	bl	8000638 <__aeabi_dmul>
 800ac74:	a372      	add	r3, pc, #456	; (adr r3, 800ae40 <atan+0x2c0>)
 800ac76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7a:	f7f5 fb27 	bl	80002cc <__adddf3>
 800ac7e:	4632      	mov	r2, r6
 800ac80:	463b      	mov	r3, r7
 800ac82:	f7f5 fcd9 	bl	8000638 <__aeabi_dmul>
 800ac86:	a370      	add	r3, pc, #448	; (adr r3, 800ae48 <atan+0x2c8>)
 800ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8c:	f7f5 fb1e 	bl	80002cc <__adddf3>
 800ac90:	4632      	mov	r2, r6
 800ac92:	463b      	mov	r3, r7
 800ac94:	f7f5 fcd0 	bl	8000638 <__aeabi_dmul>
 800ac98:	a36d      	add	r3, pc, #436	; (adr r3, 800ae50 <atan+0x2d0>)
 800ac9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9e:	f7f5 fb15 	bl	80002cc <__adddf3>
 800aca2:	4632      	mov	r2, r6
 800aca4:	463b      	mov	r3, r7
 800aca6:	f7f5 fcc7 	bl	8000638 <__aeabi_dmul>
 800acaa:	a36b      	add	r3, pc, #428	; (adr r3, 800ae58 <atan+0x2d8>)
 800acac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb0:	f7f5 fb0c 	bl	80002cc <__adddf3>
 800acb4:	4632      	mov	r2, r6
 800acb6:	463b      	mov	r3, r7
 800acb8:	f7f5 fcbe 	bl	8000638 <__aeabi_dmul>
 800acbc:	a368      	add	r3, pc, #416	; (adr r3, 800ae60 <atan+0x2e0>)
 800acbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc2:	f7f5 fb03 	bl	80002cc <__adddf3>
 800acc6:	4642      	mov	r2, r8
 800acc8:	464b      	mov	r3, r9
 800acca:	f7f5 fcb5 	bl	8000638 <__aeabi_dmul>
 800acce:	a366      	add	r3, pc, #408	; (adr r3, 800ae68 <atan+0x2e8>)
 800acd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd4:	4680      	mov	r8, r0
 800acd6:	4689      	mov	r9, r1
 800acd8:	4630      	mov	r0, r6
 800acda:	4639      	mov	r1, r7
 800acdc:	f7f5 fcac 	bl	8000638 <__aeabi_dmul>
 800ace0:	a363      	add	r3, pc, #396	; (adr r3, 800ae70 <atan+0x2f0>)
 800ace2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace6:	f7f5 faef 	bl	80002c8 <__aeabi_dsub>
 800acea:	4632      	mov	r2, r6
 800acec:	463b      	mov	r3, r7
 800acee:	f7f5 fca3 	bl	8000638 <__aeabi_dmul>
 800acf2:	a361      	add	r3, pc, #388	; (adr r3, 800ae78 <atan+0x2f8>)
 800acf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf8:	f7f5 fae6 	bl	80002c8 <__aeabi_dsub>
 800acfc:	4632      	mov	r2, r6
 800acfe:	463b      	mov	r3, r7
 800ad00:	f7f5 fc9a 	bl	8000638 <__aeabi_dmul>
 800ad04:	a35e      	add	r3, pc, #376	; (adr r3, 800ae80 <atan+0x300>)
 800ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0a:	f7f5 fadd 	bl	80002c8 <__aeabi_dsub>
 800ad0e:	4632      	mov	r2, r6
 800ad10:	463b      	mov	r3, r7
 800ad12:	f7f5 fc91 	bl	8000638 <__aeabi_dmul>
 800ad16:	a35c      	add	r3, pc, #368	; (adr r3, 800ae88 <atan+0x308>)
 800ad18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1c:	f7f5 fad4 	bl	80002c8 <__aeabi_dsub>
 800ad20:	4632      	mov	r2, r6
 800ad22:	463b      	mov	r3, r7
 800ad24:	f7f5 fc88 	bl	8000638 <__aeabi_dmul>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	4640      	mov	r0, r8
 800ad2e:	4649      	mov	r1, r9
 800ad30:	f7f5 facc 	bl	80002cc <__adddf3>
 800ad34:	4622      	mov	r2, r4
 800ad36:	462b      	mov	r3, r5
 800ad38:	f7f5 fc7e 	bl	8000638 <__aeabi_dmul>
 800ad3c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800ad40:	4602      	mov	r2, r0
 800ad42:	460b      	mov	r3, r1
 800ad44:	d14b      	bne.n	800adde <atan+0x25e>
 800ad46:	4620      	mov	r0, r4
 800ad48:	4629      	mov	r1, r5
 800ad4a:	f7f5 fabd 	bl	80002c8 <__aeabi_dsub>
 800ad4e:	e72c      	b.n	800abaa <atan+0x2a>
 800ad50:	ee10 0a10 	vmov	r0, s0
 800ad54:	4b53      	ldr	r3, [pc, #332]	; (800aea4 <atan+0x324>)
 800ad56:	2200      	movs	r2, #0
 800ad58:	4629      	mov	r1, r5
 800ad5a:	f7f5 fab5 	bl	80002c8 <__aeabi_dsub>
 800ad5e:	4b51      	ldr	r3, [pc, #324]	; (800aea4 <atan+0x324>)
 800ad60:	4606      	mov	r6, r0
 800ad62:	460f      	mov	r7, r1
 800ad64:	2200      	movs	r2, #0
 800ad66:	4620      	mov	r0, r4
 800ad68:	4629      	mov	r1, r5
 800ad6a:	f7f5 faaf 	bl	80002cc <__adddf3>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	460b      	mov	r3, r1
 800ad72:	4630      	mov	r0, r6
 800ad74:	4639      	mov	r1, r7
 800ad76:	f7f5 fd89 	bl	800088c <__aeabi_ddiv>
 800ad7a:	f04f 0a01 	mov.w	sl, #1
 800ad7e:	4604      	mov	r4, r0
 800ad80:	460d      	mov	r5, r1
 800ad82:	e764      	b.n	800ac4e <atan+0xce>
 800ad84:	4b49      	ldr	r3, [pc, #292]	; (800aeac <atan+0x32c>)
 800ad86:	429e      	cmp	r6, r3
 800ad88:	da1d      	bge.n	800adc6 <atan+0x246>
 800ad8a:	ee10 0a10 	vmov	r0, s0
 800ad8e:	4b48      	ldr	r3, [pc, #288]	; (800aeb0 <atan+0x330>)
 800ad90:	2200      	movs	r2, #0
 800ad92:	4629      	mov	r1, r5
 800ad94:	f7f5 fa98 	bl	80002c8 <__aeabi_dsub>
 800ad98:	4b45      	ldr	r3, [pc, #276]	; (800aeb0 <atan+0x330>)
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	460f      	mov	r7, r1
 800ad9e:	2200      	movs	r2, #0
 800ada0:	4620      	mov	r0, r4
 800ada2:	4629      	mov	r1, r5
 800ada4:	f7f5 fc48 	bl	8000638 <__aeabi_dmul>
 800ada8:	4b3e      	ldr	r3, [pc, #248]	; (800aea4 <atan+0x324>)
 800adaa:	2200      	movs	r2, #0
 800adac:	f7f5 fa8e 	bl	80002cc <__adddf3>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4630      	mov	r0, r6
 800adb6:	4639      	mov	r1, r7
 800adb8:	f7f5 fd68 	bl	800088c <__aeabi_ddiv>
 800adbc:	f04f 0a02 	mov.w	sl, #2
 800adc0:	4604      	mov	r4, r0
 800adc2:	460d      	mov	r5, r1
 800adc4:	e743      	b.n	800ac4e <atan+0xce>
 800adc6:	462b      	mov	r3, r5
 800adc8:	ee10 2a10 	vmov	r2, s0
 800adcc:	4939      	ldr	r1, [pc, #228]	; (800aeb4 <atan+0x334>)
 800adce:	2000      	movs	r0, #0
 800add0:	f7f5 fd5c 	bl	800088c <__aeabi_ddiv>
 800add4:	f04f 0a03 	mov.w	sl, #3
 800add8:	4604      	mov	r4, r0
 800adda:	460d      	mov	r5, r1
 800addc:	e737      	b.n	800ac4e <atan+0xce>
 800adde:	4b36      	ldr	r3, [pc, #216]	; (800aeb8 <atan+0x338>)
 800ade0:	4e36      	ldr	r6, [pc, #216]	; (800aebc <atan+0x33c>)
 800ade2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ade6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800adea:	e9da 2300 	ldrd	r2, r3, [sl]
 800adee:	f7f5 fa6b 	bl	80002c8 <__aeabi_dsub>
 800adf2:	4622      	mov	r2, r4
 800adf4:	462b      	mov	r3, r5
 800adf6:	f7f5 fa67 	bl	80002c8 <__aeabi_dsub>
 800adfa:	4602      	mov	r2, r0
 800adfc:	460b      	mov	r3, r1
 800adfe:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ae02:	f7f5 fa61 	bl	80002c8 <__aeabi_dsub>
 800ae06:	f1bb 0f00 	cmp.w	fp, #0
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	460d      	mov	r5, r1
 800ae0e:	f6bf aed6 	bge.w	800abbe <atan+0x3e>
 800ae12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae16:	461d      	mov	r5, r3
 800ae18:	e6d1      	b.n	800abbe <atan+0x3e>
 800ae1a:	a51d      	add	r5, pc, #116	; (adr r5, 800ae90 <atan+0x310>)
 800ae1c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ae20:	e6cd      	b.n	800abbe <atan+0x3e>
 800ae22:	bf00      	nop
 800ae24:	f3af 8000 	nop.w
 800ae28:	54442d18 	.word	0x54442d18
 800ae2c:	bff921fb 	.word	0xbff921fb
 800ae30:	8800759c 	.word	0x8800759c
 800ae34:	7e37e43c 	.word	0x7e37e43c
 800ae38:	e322da11 	.word	0xe322da11
 800ae3c:	3f90ad3a 	.word	0x3f90ad3a
 800ae40:	24760deb 	.word	0x24760deb
 800ae44:	3fa97b4b 	.word	0x3fa97b4b
 800ae48:	a0d03d51 	.word	0xa0d03d51
 800ae4c:	3fb10d66 	.word	0x3fb10d66
 800ae50:	c54c206e 	.word	0xc54c206e
 800ae54:	3fb745cd 	.word	0x3fb745cd
 800ae58:	920083ff 	.word	0x920083ff
 800ae5c:	3fc24924 	.word	0x3fc24924
 800ae60:	5555550d 	.word	0x5555550d
 800ae64:	3fd55555 	.word	0x3fd55555
 800ae68:	2c6a6c2f 	.word	0x2c6a6c2f
 800ae6c:	bfa2b444 	.word	0xbfa2b444
 800ae70:	52defd9a 	.word	0x52defd9a
 800ae74:	3fadde2d 	.word	0x3fadde2d
 800ae78:	af749a6d 	.word	0xaf749a6d
 800ae7c:	3fb3b0f2 	.word	0x3fb3b0f2
 800ae80:	fe231671 	.word	0xfe231671
 800ae84:	3fbc71c6 	.word	0x3fbc71c6
 800ae88:	9998ebc4 	.word	0x9998ebc4
 800ae8c:	3fc99999 	.word	0x3fc99999
 800ae90:	54442d18 	.word	0x54442d18
 800ae94:	3ff921fb 	.word	0x3ff921fb
 800ae98:	440fffff 	.word	0x440fffff
 800ae9c:	7ff00000 	.word	0x7ff00000
 800aea0:	3fdbffff 	.word	0x3fdbffff
 800aea4:	3ff00000 	.word	0x3ff00000
 800aea8:	3ff2ffff 	.word	0x3ff2ffff
 800aeac:	40038000 	.word	0x40038000
 800aeb0:	3ff80000 	.word	0x3ff80000
 800aeb4:	bff00000 	.word	0xbff00000
 800aeb8:	0800ba48 	.word	0x0800ba48
 800aebc:	0800ba28 	.word	0x0800ba28

0800aec0 <fabs>:
 800aec0:	ec51 0b10 	vmov	r0, r1, d0
 800aec4:	ee10 2a10 	vmov	r2, s0
 800aec8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aecc:	ec43 2b10 	vmov	d0, r2, r3
 800aed0:	4770      	bx	lr
 800aed2:	0000      	movs	r0, r0
 800aed4:	0000      	movs	r0, r0
	...

0800aed8 <floor>:
 800aed8:	ec51 0b10 	vmov	r0, r1, d0
 800aedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aee0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800aee4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800aee8:	2e13      	cmp	r6, #19
 800aeea:	ee10 5a10 	vmov	r5, s0
 800aeee:	ee10 8a10 	vmov	r8, s0
 800aef2:	460c      	mov	r4, r1
 800aef4:	dc32      	bgt.n	800af5c <floor+0x84>
 800aef6:	2e00      	cmp	r6, #0
 800aef8:	da14      	bge.n	800af24 <floor+0x4c>
 800aefa:	a333      	add	r3, pc, #204	; (adr r3, 800afc8 <floor+0xf0>)
 800aefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af00:	f7f5 f9e4 	bl	80002cc <__adddf3>
 800af04:	2200      	movs	r2, #0
 800af06:	2300      	movs	r3, #0
 800af08:	f7f5 fe26 	bl	8000b58 <__aeabi_dcmpgt>
 800af0c:	b138      	cbz	r0, 800af1e <floor+0x46>
 800af0e:	2c00      	cmp	r4, #0
 800af10:	da57      	bge.n	800afc2 <floor+0xea>
 800af12:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800af16:	431d      	orrs	r5, r3
 800af18:	d001      	beq.n	800af1e <floor+0x46>
 800af1a:	4c2d      	ldr	r4, [pc, #180]	; (800afd0 <floor+0xf8>)
 800af1c:	2500      	movs	r5, #0
 800af1e:	4621      	mov	r1, r4
 800af20:	4628      	mov	r0, r5
 800af22:	e025      	b.n	800af70 <floor+0x98>
 800af24:	4f2b      	ldr	r7, [pc, #172]	; (800afd4 <floor+0xfc>)
 800af26:	4137      	asrs	r7, r6
 800af28:	ea01 0307 	and.w	r3, r1, r7
 800af2c:	4303      	orrs	r3, r0
 800af2e:	d01f      	beq.n	800af70 <floor+0x98>
 800af30:	a325      	add	r3, pc, #148	; (adr r3, 800afc8 <floor+0xf0>)
 800af32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af36:	f7f5 f9c9 	bl	80002cc <__adddf3>
 800af3a:	2200      	movs	r2, #0
 800af3c:	2300      	movs	r3, #0
 800af3e:	f7f5 fe0b 	bl	8000b58 <__aeabi_dcmpgt>
 800af42:	2800      	cmp	r0, #0
 800af44:	d0eb      	beq.n	800af1e <floor+0x46>
 800af46:	2c00      	cmp	r4, #0
 800af48:	bfbe      	ittt	lt
 800af4a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800af4e:	fa43 f606 	asrlt.w	r6, r3, r6
 800af52:	19a4      	addlt	r4, r4, r6
 800af54:	ea24 0407 	bic.w	r4, r4, r7
 800af58:	2500      	movs	r5, #0
 800af5a:	e7e0      	b.n	800af1e <floor+0x46>
 800af5c:	2e33      	cmp	r6, #51	; 0x33
 800af5e:	dd0b      	ble.n	800af78 <floor+0xa0>
 800af60:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800af64:	d104      	bne.n	800af70 <floor+0x98>
 800af66:	ee10 2a10 	vmov	r2, s0
 800af6a:	460b      	mov	r3, r1
 800af6c:	f7f5 f9ae 	bl	80002cc <__adddf3>
 800af70:	ec41 0b10 	vmov	d0, r0, r1
 800af74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af78:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800af7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af80:	fa23 f707 	lsr.w	r7, r3, r7
 800af84:	4207      	tst	r7, r0
 800af86:	d0f3      	beq.n	800af70 <floor+0x98>
 800af88:	a30f      	add	r3, pc, #60	; (adr r3, 800afc8 <floor+0xf0>)
 800af8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8e:	f7f5 f99d 	bl	80002cc <__adddf3>
 800af92:	2200      	movs	r2, #0
 800af94:	2300      	movs	r3, #0
 800af96:	f7f5 fddf 	bl	8000b58 <__aeabi_dcmpgt>
 800af9a:	2800      	cmp	r0, #0
 800af9c:	d0bf      	beq.n	800af1e <floor+0x46>
 800af9e:	2c00      	cmp	r4, #0
 800afa0:	da02      	bge.n	800afa8 <floor+0xd0>
 800afa2:	2e14      	cmp	r6, #20
 800afa4:	d103      	bne.n	800afae <floor+0xd6>
 800afa6:	3401      	adds	r4, #1
 800afa8:	ea25 0507 	bic.w	r5, r5, r7
 800afac:	e7b7      	b.n	800af1e <floor+0x46>
 800afae:	2301      	movs	r3, #1
 800afb0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800afb4:	fa03 f606 	lsl.w	r6, r3, r6
 800afb8:	4435      	add	r5, r6
 800afba:	4545      	cmp	r5, r8
 800afbc:	bf38      	it	cc
 800afbe:	18e4      	addcc	r4, r4, r3
 800afc0:	e7f2      	b.n	800afa8 <floor+0xd0>
 800afc2:	2500      	movs	r5, #0
 800afc4:	462c      	mov	r4, r5
 800afc6:	e7aa      	b.n	800af1e <floor+0x46>
 800afc8:	8800759c 	.word	0x8800759c
 800afcc:	7e37e43c 	.word	0x7e37e43c
 800afd0:	bff00000 	.word	0xbff00000
 800afd4:	000fffff 	.word	0x000fffff

0800afd8 <nan>:
 800afd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800afe0 <nan+0x8>
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	00000000 	.word	0x00000000
 800afe4:	7ff80000 	.word	0x7ff80000

0800afe8 <scalbn>:
 800afe8:	b570      	push	{r4, r5, r6, lr}
 800afea:	ec55 4b10 	vmov	r4, r5, d0
 800afee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800aff2:	4606      	mov	r6, r0
 800aff4:	462b      	mov	r3, r5
 800aff6:	b99a      	cbnz	r2, 800b020 <scalbn+0x38>
 800aff8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800affc:	4323      	orrs	r3, r4
 800affe:	d036      	beq.n	800b06e <scalbn+0x86>
 800b000:	4b39      	ldr	r3, [pc, #228]	; (800b0e8 <scalbn+0x100>)
 800b002:	4629      	mov	r1, r5
 800b004:	ee10 0a10 	vmov	r0, s0
 800b008:	2200      	movs	r2, #0
 800b00a:	f7f5 fb15 	bl	8000638 <__aeabi_dmul>
 800b00e:	4b37      	ldr	r3, [pc, #220]	; (800b0ec <scalbn+0x104>)
 800b010:	429e      	cmp	r6, r3
 800b012:	4604      	mov	r4, r0
 800b014:	460d      	mov	r5, r1
 800b016:	da10      	bge.n	800b03a <scalbn+0x52>
 800b018:	a32b      	add	r3, pc, #172	; (adr r3, 800b0c8 <scalbn+0xe0>)
 800b01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01e:	e03a      	b.n	800b096 <scalbn+0xae>
 800b020:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b024:	428a      	cmp	r2, r1
 800b026:	d10c      	bne.n	800b042 <scalbn+0x5a>
 800b028:	ee10 2a10 	vmov	r2, s0
 800b02c:	4620      	mov	r0, r4
 800b02e:	4629      	mov	r1, r5
 800b030:	f7f5 f94c 	bl	80002cc <__adddf3>
 800b034:	4604      	mov	r4, r0
 800b036:	460d      	mov	r5, r1
 800b038:	e019      	b.n	800b06e <scalbn+0x86>
 800b03a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b03e:	460b      	mov	r3, r1
 800b040:	3a36      	subs	r2, #54	; 0x36
 800b042:	4432      	add	r2, r6
 800b044:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b048:	428a      	cmp	r2, r1
 800b04a:	dd08      	ble.n	800b05e <scalbn+0x76>
 800b04c:	2d00      	cmp	r5, #0
 800b04e:	a120      	add	r1, pc, #128	; (adr r1, 800b0d0 <scalbn+0xe8>)
 800b050:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b054:	da1c      	bge.n	800b090 <scalbn+0xa8>
 800b056:	a120      	add	r1, pc, #128	; (adr r1, 800b0d8 <scalbn+0xf0>)
 800b058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b05c:	e018      	b.n	800b090 <scalbn+0xa8>
 800b05e:	2a00      	cmp	r2, #0
 800b060:	dd08      	ble.n	800b074 <scalbn+0x8c>
 800b062:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b066:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b06a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b06e:	ec45 4b10 	vmov	d0, r4, r5
 800b072:	bd70      	pop	{r4, r5, r6, pc}
 800b074:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b078:	da19      	bge.n	800b0ae <scalbn+0xc6>
 800b07a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b07e:	429e      	cmp	r6, r3
 800b080:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b084:	dd0a      	ble.n	800b09c <scalbn+0xb4>
 800b086:	a112      	add	r1, pc, #72	; (adr r1, 800b0d0 <scalbn+0xe8>)
 800b088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d1e2      	bne.n	800b056 <scalbn+0x6e>
 800b090:	a30f      	add	r3, pc, #60	; (adr r3, 800b0d0 <scalbn+0xe8>)
 800b092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b096:	f7f5 facf 	bl	8000638 <__aeabi_dmul>
 800b09a:	e7cb      	b.n	800b034 <scalbn+0x4c>
 800b09c:	a10a      	add	r1, pc, #40	; (adr r1, 800b0c8 <scalbn+0xe0>)
 800b09e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d0b8      	beq.n	800b018 <scalbn+0x30>
 800b0a6:	a10e      	add	r1, pc, #56	; (adr r1, 800b0e0 <scalbn+0xf8>)
 800b0a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0ac:	e7b4      	b.n	800b018 <scalbn+0x30>
 800b0ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b0b2:	3236      	adds	r2, #54	; 0x36
 800b0b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b0b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b0bc:	4620      	mov	r0, r4
 800b0be:	4b0c      	ldr	r3, [pc, #48]	; (800b0f0 <scalbn+0x108>)
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	e7e8      	b.n	800b096 <scalbn+0xae>
 800b0c4:	f3af 8000 	nop.w
 800b0c8:	c2f8f359 	.word	0xc2f8f359
 800b0cc:	01a56e1f 	.word	0x01a56e1f
 800b0d0:	8800759c 	.word	0x8800759c
 800b0d4:	7e37e43c 	.word	0x7e37e43c
 800b0d8:	8800759c 	.word	0x8800759c
 800b0dc:	fe37e43c 	.word	0xfe37e43c
 800b0e0:	c2f8f359 	.word	0xc2f8f359
 800b0e4:	81a56e1f 	.word	0x81a56e1f
 800b0e8:	43500000 	.word	0x43500000
 800b0ec:	ffff3cb0 	.word	0xffff3cb0
 800b0f0:	3c900000 	.word	0x3c900000

0800b0f4 <_init>:
 800b0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0f6:	bf00      	nop
 800b0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0fa:	bc08      	pop	{r3}
 800b0fc:	469e      	mov	lr, r3
 800b0fe:	4770      	bx	lr

0800b100 <_fini>:
 800b100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b102:	bf00      	nop
 800b104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b106:	bc08      	pop	{r3}
 800b108:	469e      	mov	lr, r3
 800b10a:	4770      	bx	lr
