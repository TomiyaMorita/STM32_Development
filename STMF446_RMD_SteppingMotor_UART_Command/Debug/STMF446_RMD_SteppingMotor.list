
STMF446_RMD_SteppingMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  080078a8  080078a8  000178a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008000  08008000  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008000  08008000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008008  08008008  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008008  08008008  00018008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800800c  0800800c  0001800c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c8  20000074  08008084  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  08008084  0002093c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c28  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002776  00000000  00000000  00032ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00035448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  000364e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000420e  00000000  00000000  00037490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012dcb  00000000  00000000  0003b69e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d880d  00000000  00000000  0004e469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00126c76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e68  00000000  00000000  00126cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007890 	.word	0x08007890

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007890 	.word	0x08007890

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <tmc2209_readWriteArray>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60b9      	str	r1, [r7, #8]
 80005bc:	607a      	str	r2, [r7, #4]
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	4603      	mov	r3, r0
 80005c2:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 80005c4:	480e      	ldr	r0, [pc, #56]	; (8000600 <tmc2209_readWriteArray+0x4c>)
 80005c6:	f004 fff1 	bl	80055ac <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, data, writeLength,3000);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005d2:	68b9      	ldr	r1, [r7, #8]
 80005d4:	480a      	ldr	r0, [pc, #40]	; (8000600 <tmc2209_readWriteArray+0x4c>)
 80005d6:	f004 fb91 	bl	8004cfc <HAL_UART_Transmit>

	if(readLength > 0){
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00a      	beq.n	80005f6 <tmc2209_readWriteArray+0x42>
		HAL_HalfDuplex_EnableReceiver(&huart1);
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <tmc2209_readWriteArray+0x4c>)
 80005e2:	f005 f817 	bl	8005614 <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart1, data, readLength, 3000);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005ee:	68b9      	ldr	r1, [r7, #8]
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <tmc2209_readWriteArray+0x4c>)
 80005f2:	f004 fc15 	bl	8004e20 <HAL_UART_Receive>
	}
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000128 	.word	0x20000128

08000604 <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 800060e:	2201      	movs	r2, #1
 8000610:	6839      	ldr	r1, [r7, #0]
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f005 fda4 	bl	8006160 <tmc_CRC8>
 8000618:	4603      	mov	r3, r0
}
 800061a:	4618      	mov	r0, r3
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <reset>:
uint8_t uart_data;
char tx_data[]="get_data\r\n";
int flag = 1;

static uint8_t reset()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	//StepDir_init(STEPDIR_PRECISION);
	//StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);

	return tmc2209_reset(&TMC2209);
 8000628:	4802      	ldr	r0, [pc, #8]	; (8000634 <reset+0x10>)
 800062a:	f005 ffd1 	bl	80065d0 <tmc2209_reset>
 800062e:	4603      	mov	r3, r0
}
 8000630:	4618      	mov	r0, r3
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200001b0 	.word	0x200001b0

08000638 <restore>:

static uint8_t restore()
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 800063c:	4802      	ldr	r0, [pc, #8]	; (8000648 <restore+0x10>)
 800063e:	f006 f801 	bl	8006644 <tmc2209_restore>
 8000642:	4603      	mov	r3, r0
}
 8000644:	4618      	mov	r0, r3
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200001b0 	.word	0x200001b0

0800064c <TMC2209_INIT>:


void TMC2209_INIT()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 8000652:	2201      	movs	r2, #1
 8000654:	2101      	movs	r1, #1
 8000656:	2007      	movs	r0, #7
 8000658:	f005 fcca 	bl	8005ff0 <tmc_fillCRC8Table>

	TMC2209_config.reset = reset;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <TMC2209_INIT+0x38>)
 800065e:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <TMC2209_INIT+0x3c>)
 8000660:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config.restore = restore;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <TMC2209_INIT+0x38>)
 8000666:	4a09      	ldr	r2, [pc, #36]	; (800068c <TMC2209_INIT+0x40>)
 8000668:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <TMC2209_INIT+0x44>)
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <TMC2209_INIT+0x38>)
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	4807      	ldr	r0, [pc, #28]	; (8000694 <TMC2209_INIT+0x48>)
 8000678:	f005 fec6 	bl	8006408 <tmc2209_init>


	//restore();
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000438 	.word	0x20000438
 8000688:	08000625 	.word	0x08000625
 800068c:	08000639 	.word	0x08000639
 8000690:	08007cd0 	.word	0x08007cd0
 8000694:	200001b0 	.word	0x200001b0

08000698 <HAL_GPIO_EXTI_Callback>:
	return &TMC2209;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
	//stepper 0 end stop senssor
	if(GPIO_Pin == GPIO_PIN_6 ){
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	2b40      	cmp	r3, #64	; 0x40
 80006a6:	d11b      	bne.n	80006e0 <HAL_GPIO_EXTI_Callback+0x48>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 80006a8:	2140      	movs	r1, #64	; 0x40
 80006aa:	481b      	ldr	r0, [pc, #108]	; (8000718 <HAL_GPIO_EXTI_Callback+0x80>)
 80006ac:	f002 fca0 	bl	8002ff0 <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d106      	bne.n	80006c4 <HAL_GPIO_EXTI_Callback+0x2c>
			end_stop_state |= 1;
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <HAL_GPIO_EXTI_Callback+0x84>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <HAL_GPIO_EXTI_Callback+0x84>)
 80006c2:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 80006c4:	2140      	movs	r1, #64	; 0x40
 80006c6:	4814      	ldr	r0, [pc, #80]	; (8000718 <HAL_GPIO_EXTI_Callback+0x80>)
 80006c8:	f002 fc92 	bl	8002ff0 <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d006      	beq.n	80006e0 <HAL_GPIO_EXTI_Callback+0x48>
			end_stop_state &= ~1;
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <HAL_GPIO_EXTI_Callback+0x84>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	f023 0301 	bic.w	r3, r3, #1
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_GPIO_EXTI_Callback+0x84>)
 80006de:	701a      	strb	r2, [r3, #0]
		}
	}
	if(GPIO_Pin == GPIO_PIN_7 ){
 80006e0:	88fb      	ldrh	r3, [r7, #6]
 80006e2:	2b80      	cmp	r3, #128	; 0x80
 80006e4:	d114      	bne.n	8000710 <HAL_GPIO_EXTI_Callback+0x78>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)){
 80006e6:	2180      	movs	r1, #128	; 0x80
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <HAL_GPIO_EXTI_Callback+0x80>)
 80006ea:	f002 fc81 	bl	8002ff0 <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d103      	bne.n	80006fc <HAL_GPIO_EXTI_Callback+0x64>
			current_stall|= 0;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <HAL_GPIO_EXTI_Callback+0x88>)
 80006f6:	781a      	ldrb	r2, [r3, #0]
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_GPIO_EXTI_Callback+0x88>)
 80006fa:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)){
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	4806      	ldr	r0, [pc, #24]	; (8000718 <HAL_GPIO_EXTI_Callback+0x80>)
 8000700:	f002 fc76 	bl	8002ff0 <HAL_GPIO_ReadPin>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d002      	beq.n	8000710 <HAL_GPIO_EXTI_Callback+0x78>
			current_stall = 1;
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <HAL_GPIO_EXTI_Callback+0x88>)
 800070c:	2201      	movs	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40020400 	.word	0x40020400
 800071c:	2000069c 	.word	0x2000069c
 8000720:	2000069e 	.word	0x2000069e

08000724 <Step0>:
void Step0(){                                       //step pin
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	//pull+

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <Step0+0x20>)
 8000730:	f002 fc76 	bl	8003020 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073a:	4802      	ldr	r0, [pc, #8]	; (8000744 <Step0+0x20>)
 800073c:	f002 fc70 	bl	8003020 <HAL_GPIO_WritePin>
	/*
	 * pull-
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
	 */
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40020400 	.word	0x40020400

08000748 <Dir0>:

void Dir0(int dir){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, dir); //Dir0関数にdirピンを指定して格納
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	461a      	mov	r2, r3
 8000756:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075a:	4803      	ldr	r0, [pc, #12]	; (8000768 <Dir0+0x20>)
 800075c:	f002 fc60 	bl	8003020 <HAL_GPIO_WritePin>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40020400 	.word	0x40020400

0800076c <resetStepper>:
	si->stepPosition = 0;
	si->movementDone = 0;
}


void resetStepper(volatile stepperInfo* si){    //resetStepper関数に引数をstepperInfo構造隊にポイント型変数siとして与える
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	si->c0 = si->acceleration;      //変数*siがメンバc0にアクセス.した値に変数*siがメンバaccelerationにアクセス.した値を代入する
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	edd3 7a00 	vldr	s15, [r3]
 800077a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800077e:	ee17 2a90 	vmov	r2, s15
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	615a      	str	r2, [r3, #20]
	si->d = si->c0;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	ee07 3a90 	vmov	s15, r3
 800078e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	si->di = si->d;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800079e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007a2:	ee17 2a90 	vmov	r2, s15
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	649a      	str	r2, [r3, #72]	; 0x48
	si->stepCount = 0;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	64da      	str	r2, [r3, #76]	; 0x4c
	si->n = 0;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2200      	movs	r2, #0
 80007b4:	641a      	str	r2, [r3, #64]	; 0x40
	si->rampUpStepCount = 0;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2200      	movs	r2, #0
 80007ba:	63da      	str	r2, [r3, #60]	; 0x3c
	si->movementDone = 0;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <prepareMovement>:

volatile uint8_t remainingSteppersFlag = 0; //remainingSteppersFlagをuint8_t型で定義し、初期化

void prepareMovement(int steps){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	if(steps == 0){
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d039      	beq.n	8000852 <prepareMovement+0x82>
		return;
	}
	volatile stepperInfo* si = &steppers[0];
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <prepareMovement+0x8c>)
 80007e0:	60fb      	str	r3, [r7, #12]
	if(si->dir_inv){
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	6a1b      	ldr	r3, [r3, #32]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d011      	beq.n	800080e <prepareMovement+0x3e>
		si->dirFunc( steps < 0 ? 0 : 1);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	43d2      	mvns	r2, r2
 80007f2:	0fd2      	lsrs	r2, r2, #31
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	4610      	mov	r0, r2
 80007f8:	4798      	blx	r3
		si->dir = steps > 0 ? -1:1;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	dd02      	ble.n	8000806 <prepareMovement+0x36>
 8000800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000804:	e000      	b.n	8000808 <prepareMovement+0x38>
 8000806:	2201      	movs	r2, #1
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	61da      	str	r2, [r3, #28]
 800080c:	e00e      	b.n	800082c <prepareMovement+0x5c>
	}else{
		si->dirFunc( steps < 0 ? 1 : 0);
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	0fd2      	lsrs	r2, r2, #31
 8000816:	4610      	mov	r0, r2
 8000818:	4798      	blx	r3
		si->dir = steps > 0 ? 1:-1;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2b00      	cmp	r3, #0
 800081e:	dd01      	ble.n	8000824 <prepareMovement+0x54>
 8000820:	2201      	movs	r2, #1
 8000822:	e001      	b.n	8000828 <prepareMovement+0x58>
 8000824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	61da      	str	r2, [r3, #28]
	}
		si->totalSteps = abs(steps);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	bfb8      	it	lt
 8000832:	425b      	neglt	r3, r3
 8000834:	461a      	mov	r2, r3
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	635a      	str	r2, [r3, #52]	; 0x34
		resetStepper(si);
 800083a:	68f8      	ldr	r0, [r7, #12]
 800083c:	f7ff ff96 	bl	800076c <resetStepper>
		remainingSteppersFlag |= (1 << 0);
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <prepareMovement+0x90>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	b2da      	uxtb	r2, r3
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <prepareMovement+0x90>)
 800084e:	701a      	strb	r2, [r3, #0]
 8000850:	e000      	b.n	8000854 <prepareMovement+0x84>
		return;
 8000852:	bf00      	nop

}
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000064c 	.word	0x2000064c
 8000860:	20000719 	.word	0x20000719

08000864 <prepareAbsoluteMovement>:

void prepareAbsoluteMovement(int absolute_steps){   //prepareAbsoluteMovementで与えられたステップ数だけモータを回す(main文から）
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	printf("absolute_steps:%d\r\n",absolute_steps);
 800086c:	6879      	ldr	r1, [r7, #4]
 800086e:	4820      	ldr	r0, [pc, #128]	; (80008f0 <prepareAbsoluteMovement+0x8c>)
 8000870:	f005 ff34 	bl	80066dc <iprintf>
	volatile stepperInfo* si = &steppers[0];	//steppers[0]のアドレスをstepperInfo* si に代入
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <prepareAbsoluteMovement+0x90>)
 8000876:	60fb      	str	r3, [r7, #12]
	int steps = absolute_steps - si->stepPosition;	//目標値からstepPositionを引いた値（stepposition=毎ステップカウントされるdirの値)
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	60bb      	str	r3, [r7, #8]
	printf("steps:%d\r\n",steps);
 8000882:	68b9      	ldr	r1, [r7, #8]
 8000884:	481c      	ldr	r0, [pc, #112]	; (80008f8 <prepareAbsoluteMovement+0x94>)
 8000886:	f005 ff29 	bl	80066dc <iprintf>
	if(steps == 0){
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d02b      	beq.n	80008e8 <prepareAbsoluteMovement+0x84>
					return;
				}
	si->dirFunc( steps < 0 ? 1 : 0);
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	68ba      	ldr	r2, [r7, #8]
 8000896:	0fd2      	lsrs	r2, r2, #31
 8000898:	4610      	mov	r0, r2
 800089a:	4798      	blx	r3
	si->dir = steps > 0 ? 1:-1;
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	dd01      	ble.n	80008a6 <prepareAbsoluteMovement+0x42>
 80008a2:	2201      	movs	r2, #1
 80008a4:	e001      	b.n	80008aa <prepareAbsoluteMovement+0x46>
 80008a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	61da      	str	r2, [r3, #28]
	//printf("prepareAbsoluteMovement\r\n");
	si->totalSteps = abs(steps);	//stepsの値をアブソリュートでtotalstepsに格納
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	bfb8      	it	lt
 80008b4:	425b      	neglt	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	635a      	str	r2, [r3, #52]	; 0x34
	printf("steps:%d\r\n",si->totalSteps);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008c0:	4619      	mov	r1, r3
 80008c2:	480d      	ldr	r0, [pc, #52]	; (80008f8 <prepareAbsoluteMovement+0x94>)
 80008c4:	f005 ff0a 	bl	80066dc <iprintf>

	resetStepper(si);
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f7ff ff4f 	bl	800076c <resetStepper>
	printf("steps:%d\r\n",steps);
 80008ce:	68b9      	ldr	r1, [r7, #8]
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <prepareAbsoluteMovement+0x94>)
 80008d2:	f005 ff03 	bl	80066dc <iprintf>
	remainingSteppersFlag |= (1 << 0);
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <prepareAbsoluteMovement+0x98>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <prepareAbsoluteMovement+0x98>)
 80008e4:	701a      	strb	r2, [r3, #0]
 80008e6:	e000      	b.n	80008ea <prepareAbsoluteMovement+0x86>
					return;
 80008e8:	bf00      	nop
}
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	080078a8 	.word	0x080078a8
 80008f4:	2000064c 	.word	0x2000064c
 80008f8:	080078bc 	.word	0x080078bc
 80008fc:	20000719 	.word	0x20000719

08000900 <setNextInterruptInterval>:
			t->checkcount=0;
		}
}
volatile uint8_t nextStepperFlag = 0;

void setNextInterruptInterval(){
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0

	unsigned int mind = 999999;
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <setNextInterruptInterval+0x7c>)
 8000908:	607b      	str	r3, [r7, #4]
//	currentcheck();
		if( ((1 << 0)& remainingSteppersFlag) && steppers[0].di < mind ){
 800090a:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <setNextInterruptInterval+0x80>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d007      	beq.n	800092a <setNextInterruptInterval+0x2a>
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <setNextInterruptInterval+0x84>)
 800091c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	429a      	cmp	r2, r3
 8000922:	d902      	bls.n	800092a <setNextInterruptInterval+0x2a>
			mind = steppers[0].di;
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <setNextInterruptInterval+0x84>)
 8000926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000928:	607b      	str	r3, [r7, #4]
		}
		nextStepperFlag = 0;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <setNextInterruptInterval+0x88>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]

			if( (1 << 0) && steppers[0].di == mind ){
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <setNextInterruptInterval+0x84>)
 8000932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	429a      	cmp	r2, r3
 8000938:	d107      	bne.n	800094a <setNextInterruptInterval+0x4a>
				nextStepperFlag |= (1 << 0);
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <setNextInterruptInterval+0x88>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <setNextInterruptInterval+0x88>)
 8000948:	701a      	strb	r2, [r3, #0]
			}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);		//mindにコンペアを設定
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <setNextInterruptInterval+0x8c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	635a      	str	r2, [r3, #52]	; 0x34
			//printf("mind:%d \r\n",mind);

	if (remainingSteppersFlag == 0){
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <setNextInterruptInterval+0x80>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d104      	bne.n	8000966 <setNextInterruptInterval+0x66>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);    //65500→コンペアマッチさせない
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <setNextInterruptInterval+0x8c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8000964:	635a      	str	r2, [r3, #52]	; 0x34
	}

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <setNextInterruptInterval+0x8c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 800096e:	bf00      	nop

}
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	000f423f 	.word	0x000f423f
 8000980:	20000719 	.word	0x20000719
 8000984:	2000064c 	.word	0x2000064c
 8000988:	2000071a 	.word	0x2000071a
 800098c:	200000e0 	.word	0x200000e0

08000990 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){      //指定したコンペアを超えた時発火
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	//HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);

	if(htim == &htim3){
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a6e      	ldr	r2, [pc, #440]	; (8000b54 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 800099c:	4293      	cmp	r3, r2
 800099e:	f040 80d5 	bne.w	8000b4c <HAL_TIM_OC_DelayElapsedCallback+0x1bc>
	unsigned int tmpCtr = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);	//指定されたタイマーチャンネルのコンペアを所得
 80009a2:	4b6c      	ldr	r3, [pc, #432]	; (8000b54 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009a8:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);			//コンペアを65500にセット
 80009aa:	4b6a      	ldr	r3, [pc, #424]	; (8000b54 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80009b2:	635a      	str	r2, [r3, #52]	; 0x34

	if( homing_flag & (1 << 0)){
 80009b4:	4b68      	ldr	r3, [pc, #416]	; (8000b58 <HAL_TIM_OC_DelayElapsedCallback+0x1c8>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d00d      	beq.n	80009dc <HAL_TIM_OC_DelayElapsedCallback+0x4c>
				if(end_stop_state & (1 << 0)){
 80009c0:	4b66      	ldr	r3, [pc, #408]	; (8000b5c <HAL_TIM_OC_DelayElapsedCallback+0x1cc>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d007      	beq.n	80009dc <HAL_TIM_OC_DelayElapsedCallback+0x4c>
					remainingSteppersFlag &= ~(1 << 0);
 80009cc:	4b64      	ldr	r3, [pc, #400]	; (8000b60 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	f023 0301 	bic.w	r3, r3, #1
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	4b61      	ldr	r3, [pc, #388]	; (8000b60 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 80009da:	701a      	strb	r2, [r3, #0]
				}
			}
	if ( ! (nextStepperFlag & (1 << 0)) ){				//nextStepperFlagが真でない(0なら)
 80009dc:	4b61      	ldr	r3, [pc, #388]	; (8000b64 <HAL_TIM_OC_DelayElapsedCallback+0x1d4>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d105      	bne.n	80009f6 <HAL_TIM_OC_DelayElapsedCallback+0x66>
			steppers[0].di -= tmpCtr;           //tmpCtrの値からsteppers[i].di引いた値を新しくsteppers[i].diに代入
 80009ea:	4b5f      	ldr	r3, [pc, #380]	; (8000b68 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80009ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	4a5d      	ldr	r2, [pc, #372]	; (8000b68 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80009f4:	6493      	str	r3, [r2, #72]	; 0x48
		}
		//printf("steppers:%ld \r\n",steppers[0].di);

		volatile stepperInfo* s = &steppers[0];
 80009f6:	4b5c      	ldr	r3, [pc, #368]	; (8000b68 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80009f8:	60bb      	str	r3, [r7, #8]

		if( (s->stepCount) < (s->totalSteps)&& !(current_stall)  ){		//1周ごとにカウントしたstepCountがabs(steps)より小さかったら==動作が終了するまで
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d224      	bcs.n	8000a50 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
 8000a06:	4b59      	ldr	r3, [pc, #356]	; (8000b6c <HAL_TIM_OC_DelayElapsedCallback+0x1dc>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d120      	bne.n	8000a50 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
			s->stepFunc();
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	4798      	blx	r3
			s->stepCount++;							//カウントし続ける
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a18:	1c5a      	adds	r2, r3, #1
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	64da      	str	r2, [r3, #76]	; 0x4c
			s->stepPosition += s->dir;		//dir(+もしくはー(dirの向き）を加算してstepPositionに格納
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	69da      	ldr	r2, [r3, #28]
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	441a      	add	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	619a      	str	r2, [r3, #24]
			if ( (s->stepCount) >= (s->totalSteps) ){	//stepCountがtotalStepsを超えたとき
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d30b      	bcc.n	8000a50 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
				s->movementDone = 1;	//movementDoneを1にする
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				remainingSteppersFlag &= ~(1 << 0);
 8000a40:	4b47      	ldr	r3, [pc, #284]	; (8000b60 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	f023 0301 	bic.w	r3, r3, #1
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	4b44      	ldr	r3, [pc, #272]	; (8000b60 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 8000a4e:	701a      	strb	r2, [r3, #0]
			}
		}

		if (s->rampUpStepCount == 0){
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d142      	bne.n	8000ade <HAL_TIM_OC_DelayElapsedCallback+0x14e>
			s->n++;									//sにnを代入して、nをプラス1する
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	1c5a      	adds	r2, r3, #1
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	641a      	str	r2, [r3, #64]	; 0x40
			s->d = s->d - (2*s->d) / (4*s->n +1);	//加減速遅延時間
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000a6e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	3301      	adds	r3, #1
 8000a7a:	ee07 3a90 	vmov	s15, r3
 8000a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000a82:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			if (s->d <= s->minStepInterval ){		//加減速遅延時間がminStepIntervalより短いなら（定数で指定）
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	ee07 3a90 	vmov	s15, r3
 8000a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aaa:	d80c      	bhi.n	8000ac6 <HAL_TIM_OC_DelayElapsedCallback+0x136>
				s->d = s->minStepInterval;			//minStepIntervalを加減速遅延時間にする
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	ee07 3a90 	vmov	s15, r3
 8000ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
				s->rampUpStepCount = s->stepCount;	//rampUpStepCountはstepCountとする
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	63da      	str	r2, [r3, #60]	; 0x3c
			}
			if (s->stepCount >= (s->totalSteps / 2) ){  //目標値から現在のステップを引いた値の1/2よりstepCountが大きくなったとき
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ace:	085b      	lsrs	r3, r3, #1
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d32c      	bcc.n	8000b2e <HAL_TIM_OC_DelayElapsedCallback+0x19e>
				s->rampUpStepCount = s->stepCount;		//rampUpStepCountはstepCountとする
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	63da      	str	r2, [r3, #60]	; 0x3c
 8000adc:	e027      	b.n	8000b2e <HAL_TIM_OC_DelayElapsedCallback+0x19e>
			}
		} else if ( s->stepCount >= s->totalSteps - s->rampUpStepCount) {	//目標値から現在のステップを引いた値からrampUpStepCountを引いた値がstepCountより小さいなら
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aea:	1acb      	subs	r3, r1, r3
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d31e      	bcc.n	8000b2e <HAL_TIM_OC_DelayElapsedCallback+0x19e>
			s->d = (s->d * (4 * s->n + 1)) / (4 * s->n + 1 -2);				//減速の時のステップ
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	3301      	adds	r3, #1
 8000afe:	ee07 3a90 	vmov	s15, r3
 8000b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b06:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	3b01      	subs	r3, #1
 8000b12:	ee07 3a90 	vmov	s15, r3
 8000b16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			s->n--;		//sにnを代入し、nから1を引く
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40
		}
		s->di = s->d;	//計算結果sをstepperInfoのメンバdに代入したものをメンバdiに代入
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b38:	ee17 2a90 	vmov	r2, s15
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	649a      	str	r2, [r3, #72]	; 0x48
		//printf("stepPosition:%ld \r\n",s->stepPosition);
		setNextInterruptInterval();
 8000b40:	f7ff fede 	bl	8000900 <setNextInterruptInterval>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200000e0 	.word	0x200000e0
 8000b58:	2000069d 	.word	0x2000069d
 8000b5c:	2000069c 	.word	0x2000069c
 8000b60:	20000719 	.word	0x20000719
 8000b64:	2000071a 	.word	0x2000071a
 8000b68:	2000064c 	.word	0x2000064c
 8000b6c:	2000069e 	.word	0x2000069e

08000b70 <stallguard_back>:
	if( ! HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)){	//割り込みピンが真でない(1でない=0なら)
		end_stop_state |= 1;					//end_stop_stateに左辺か右辺が1なら1を代入
	}
}

void stallguard_back(){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	prepareMovement(steppers[0].stall_off);	//stall_off
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <stallguard_back+0x18>)
 8000b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fe29 	bl	80007d0 <prepareMovement>
	current_stall=0;
 8000b7e:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <stallguard_back+0x1c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
	return;
 8000b84:	bf00      	nop
}
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2000064c 	.word	0x2000064c
 8000b8c:	2000069e 	.word	0x2000069e

08000b90 <runAndWait>:

void runAndWait(){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	setNextInterruptInterval();
 8000b94:	f7ff feb4 	bl	8000900 <setNextInterruptInterval>
	while(remainingSteppersFlag && !(current_stall));
 8000b98:	bf00      	nop
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <runAndWait+0x38>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <runAndWait+0x1c>
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <runAndWait+0x3c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d0f6      	beq.n	8000b9a <runAndWait+0xa>
	if(current_stall==1){
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <runAndWait+0x3c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d101      	bne.n	8000bb8 <runAndWait+0x28>
		stallguard_back();
 8000bb4:	f7ff ffdc 	bl	8000b70 <stallguard_back>
	}
	HAL_Delay(100);
 8000bb8:	2064      	movs	r0, #100	; 0x64
 8000bba:	f001 f949 	bl	8001e50 <HAL_Delay>
	end_flag=1;
 8000bbe:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <runAndWait+0x40>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
	//printf("posi%d\r\n",re->totalSteps);
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000719 	.word	0x20000719
 8000bcc:	2000069e 	.word	0x2000069e
 8000bd0:	20000714 	.word	0x20000714

08000bd4 <stepperHoming>:
	printf("RestOK\r\n");
	end_flag=1;
}


void stepperHoming(){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	homing_flag |= (1 << 0);
 8000bd8:	4b2e      	ldr	r3, [pc, #184]	; (8000c94 <stepperHoming+0xc0>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <stepperHoming+0xc0>)
 8000be4:	701a      	strb	r2, [r3, #0]
	//seeking
	steppers[0].minStepInterval = steppers[0].seeking_vel;	//ホームピンに反応するまでモータ回す
 8000be6:	4b2c      	ldr	r3, [pc, #176]	; (8000c98 <stepperHoming+0xc4>)
 8000be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <stepperHoming+0xc4>)
 8000bee:	605a      	str	r2, [r3, #4]
	prepareMovement( -100000000);
 8000bf0:	482a      	ldr	r0, [pc, #168]	; (8000c9c <stepperHoming+0xc8>)
 8000bf2:	f7ff fded 	bl	80007d0 <prepareMovement>
	runAndWait();
 8000bf6:	f7ff ffcb 	bl	8000b90 <runAndWait>
	HAL_Delay(500);
 8000bfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bfe:	f001 f927 	bl	8001e50 <HAL_Delay>
	//pull-off

	homing_flag &= ~(1 << 0);								//homing_flagが反応したらpull_offだけモータ回す
 8000c02:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <stepperHoming+0xc0>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	f023 0301 	bic.w	r3, r3, #1
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <stepperHoming+0xc0>)
 8000c0e:	701a      	strb	r2, [r3, #0]
	prepareMovement(steppers[0].pull_off);
 8000c10:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <stepperHoming+0xc4>)
 8000c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fddb 	bl	80007d0 <prepareMovement>
	runAndWait();
 8000c1a:	f7ff ffb9 	bl	8000b90 <runAndWait>
	HAL_Delay(500);
 8000c1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c22:	f001 f915 	bl	8001e50 <HAL_Delay>
	//homing

	homing_flag |= (1 << 0);								//ホームピンに反応するまでモータ回す
 8000c26:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <stepperHoming+0xc0>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <stepperHoming+0xc0>)
 8000c32:	701a      	strb	r2, [r3, #0]
	steppers[0].minStepInterval = steppers[0].homing_vel;
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <stepperHoming+0xc4>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <stepperHoming+0xc4>)
 8000c3c:	605a      	str	r2, [r3, #4]
	prepareMovement( -100000000);
 8000c3e:	4817      	ldr	r0, [pc, #92]	; (8000c9c <stepperHoming+0xc8>)
 8000c40:	f7ff fdc6 	bl	80007d0 <prepareMovement>
	runAndWait();
 8000c44:	f7ff ffa4 	bl	8000b90 <runAndWait>
	HAL_Delay(500);
 8000c48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c4c:	f001 f900 	bl	8001e50 <HAL_Delay>
	//pull-off
	homing_flag &= ~(1 << 0);
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <stepperHoming+0xc0>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	f023 0301 	bic.w	r3, r3, #1
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <stepperHoming+0xc0>)
 8000c5c:	701a      	strb	r2, [r3, #0]
	prepareMovement(steppers[0].pull_off);
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <stepperHoming+0xc4>)
 8000c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fdb4 	bl	80007d0 <prepareMovement>
	runAndWait();
 8000c68:	f7ff ff92 	bl	8000b90 <runAndWait>
	HAL_Delay(500);
 8000c6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c70:	f001 f8ee 	bl	8001e50 <HAL_Delay>

	steppers[0].stepPosition = 0;
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <stepperHoming+0xc4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	619a      	str	r2, [r3, #24]
	steppers[0].homing = 1;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <stepperHoming+0xc4>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	741a      	strb	r2, [r3, #16]
	steppers[0].minStepInterval = 500;
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <stepperHoming+0xc4>)
 8000c82:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c86:	605a      	str	r2, [r3, #4]
	printf("homing:\r\n");
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <stepperHoming+0xcc>)
 8000c8a:	f005 fdad 	bl	80067e8 <puts>

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	2000069d 	.word	0x2000069d
 8000c98:	2000064c 	.word	0x2000064c
 8000c9c:	fa0a1f00 	.word	0xfa0a1f00
 8000ca0:	080078e4 	.word	0x080078e4

08000ca4 <MotorOFF>:
void MotorOFF(){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
	int32_t value = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]

	value = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, value);
 8000cb2:	2110      	movs	r1, #16
 8000cb4:	482d      	ldr	r0, [pc, #180]	; (8000d6c <MotorOFF+0xc8>)
 8000cb6:	f005 fb44 	bl	8006342 <tmc2209_readInt>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	f023 021f 	bic.w	r2, r3, #31
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 031f 	and.w	r3, r3, #31
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	461a      	mov	r2, r3
 8000cca:	2110      	movs	r1, #16
 8000ccc:	4827      	ldr	r0, [pc, #156]	; (8000d6c <MotorOFF+0xc8>)
 8000cce:	f005 fae8 	bl	80062a2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000cd2:	f001 f8b1 	bl	8001e38 <HAL_GetTick>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4824      	ldr	r0, [pc, #144]	; (8000d6c <MotorOFF+0xc8>)
 8000cdc:	f005 fc67 	bl	80065ae <tmc2209_periodicJob>
	HAL_Delay(100);
 8000ce0:	2064      	movs	r0, #100	; 0x64
 8000ce2:	f001 f8b5 	bl	8001e50 <HAL_Delay>
	value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);	//保持電流
 8000ce6:	2110      	movs	r1, #16
 8000ce8:	4820      	ldr	r0, [pc, #128]	; (8000d6c <MotorOFF+0xc8>)
 8000cea:	f005 fb2a 	bl	8006342 <tmc2209_readInt>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	f003 031f 	and.w	r3, r3, #31
 8000cf4:	607b      	str	r3, [r7, #4]
	printf("IHOLD: %ld\r\n", value);
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	481d      	ldr	r0, [pc, #116]	; (8000d70 <MotorOFF+0xcc>)
 8000cfa:	f005 fcef 	bl	80066dc <iprintf>

	value = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
	value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_FREEWHEEL_MASK, 20);
 8000d02:	2170      	movs	r1, #112	; 0x70
 8000d04:	4819      	ldr	r0, [pc, #100]	; (8000d6c <MotorOFF+0xc8>)
 8000d06:	f005 fb1c 	bl	8006342 <tmc2209_readInt>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	151b      	asrs	r3, r3, #20
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	607b      	str	r3, [r7, #4]
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000d14:	f001 f890 	bl	8001e38 <HAL_GetTick>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4813      	ldr	r0, [pc, #76]	; (8000d6c <MotorOFF+0xc8>)
 8000d1e:	f005 fc46 	bl	80065ae <tmc2209_periodicJob>
	printf("Freewheeling: %ld\r\n", value);
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	4813      	ldr	r0, [pc, #76]	; (8000d74 <MotorOFF+0xd0>)
 8000d26:	f005 fcd9 	bl	80066dc <iprintf>
	HAL_Delay(100);
 8000d2a:	2064      	movs	r0, #100	; 0x64
 8000d2c:	f001 f890 	bl	8001e50 <HAL_Delay>
	value = 1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_PWMCONF, TMC2209_FREEWHEEL_MASK, 20, value);
 8000d34:	2170      	movs	r1, #112	; 0x70
 8000d36:	480d      	ldr	r0, [pc, #52]	; (8000d6c <MotorOFF+0xc8>)
 8000d38:	f005 fb03 	bl	8006342 <tmc2209_readInt>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	051b      	lsls	r3, r3, #20
 8000d46:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	2170      	movs	r1, #112	; 0x70
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <MotorOFF+0xc8>)
 8000d52:	f005 faa6 	bl	80062a2 <tmc2209_writeInt>
	printf("Freewheeling: %ld\r\n", value);
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	4806      	ldr	r0, [pc, #24]	; (8000d74 <MotorOFF+0xd0>)
 8000d5a:	f005 fcbf 	bl	80066dc <iprintf>

	end_flag=1;
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MotorOFF+0xd4>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]


}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200001b0 	.word	0x200001b0
 8000d70:	080078f0 	.word	0x080078f0
 8000d74:	08007900 	.word	0x08007900
 8000d78:	20000714 	.word	0x20000714

08000d7c <command_judgment>:
	UART1_Data[5] = 0x00;
	UART1_Data[6] = 0x00;
	UART1_Data[7] = 0x00;
}

void command_judgment(uint8_t *ModeSelect){
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	int modeflag_count=0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<10 ;i++){
 8000d88:	2300      	movs	r3, #0
 8000d8a:	72fb      	strb	r3, [r7, #11]
 8000d8c:	e015      	b.n	8000dba <command_judgment+0x3e>
		ModeSelect[i]= ~(ModeSelect[i]);
 8000d8e:	7afb      	ldrb	r3, [r7, #11]
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	4413      	add	r3, r2
 8000d94:	781a      	ldrb	r2, [r3, #0]
 8000d96:	7afb      	ldrb	r3, [r7, #11]
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	440b      	add	r3, r1
 8000d9c:	43d2      	mvns	r2, r2
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	701a      	strb	r2, [r3, #0]
		if(ModeSelect[i]==0){
 8000da2:	7afb      	ldrb	r3, [r7, #11]
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	4413      	add	r3, r2
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d102      	bne.n	8000db4 <command_judgment+0x38>
			modeflag_count++;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	3301      	adds	r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<10 ;i++){
 8000db4:	7afb      	ldrb	r3, [r7, #11]
 8000db6:	3301      	adds	r3, #1
 8000db8:	72fb      	strb	r3, [r7, #11]
 8000dba:	7afb      	ldrb	r3, [r7, #11]
 8000dbc:	2b09      	cmp	r3, #9
 8000dbe:	d9e6      	bls.n	8000d8e <command_judgment+0x12>
			}
		}
	if(modeflag_count<=8){	//動作モード
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2b08      	cmp	r3, #8
 8000dc4:	dc03      	bgt.n	8000dce <command_judgment+0x52>
		selectmode_flag=0;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <command_judgment+0x6c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
	}
	else if(modeflag_count==9){	//コマンドモード,9byte ModeSelectが0だったら
		selectmode_flag=1;
	}
}
 8000dcc:	e005      	b.n	8000dda <command_judgment+0x5e>
	else if(modeflag_count==9){	//コマンドモード,9byte ModeSelectが0だったら
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2b09      	cmp	r3, #9
 8000dd2:	d102      	bne.n	8000dda <command_judgment+0x5e>
		selectmode_flag=1;
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <command_judgment+0x6c>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	701a      	strb	r2, [r3, #0]
}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000718 	.word	0x20000718

08000dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0aa      	sub	sp, #168	; 0xa8
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8000df2:	4b8b      	ldr	r3, [pc, #556]	; (8001020 <main+0x234>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f005 fcfc 	bl	80067f8 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e00:	f000 ffb4 	bl	8001d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e04:	f000 f9f2 	bl	80011ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e08:	f000 fb94 	bl	8001534 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e0c:	f000 fb68 	bl	80014e0 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000e10:	f000 fa58 	bl	80012c4 <MX_CAN1_Init>
  MX_TIM3_Init();
 8000e14:	f000 fac6 	bl	80013a4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000e18:	f000 fb38 	bl	800148c <MX_USART1_UART_Init>
  MX_CAN2_Init();
 8000e1c:	f000 fa8a 	bl	8001334 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  TMC2209_INIT();
 8000e20:	f7ff fc14 	bl	800064c <TMC2209_INIT>
  //rxbufを受信したらフラグを
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000e24:	2100      	movs	r1, #0
 8000e26:	487f      	ldr	r0, [pc, #508]	; (8001024 <main+0x238>)
 8000e28:	f002 ffbc 	bl	8003da4 <HAL_TIM_OC_Start_IT>
  printf("Hello\r\n");
 8000e2c:	487e      	ldr	r0, [pc, #504]	; (8001028 <main+0x23c>)
 8000e2e:	f005 fcdb 	bl	80067e8 <puts>
  steppers[0].dirFunc = Dir0;
 8000e32:	4b7e      	ldr	r3, [pc, #504]	; (800102c <main+0x240>)
 8000e34:	4a7e      	ldr	r2, [pc, #504]	; (8001030 <main+0x244>)
 8000e36:	609a      	str	r2, [r3, #8]
  steppers[0].stepFunc = Step0;
 8000e38:	4b7c      	ldr	r3, [pc, #496]	; (800102c <main+0x240>)
 8000e3a:	4a7e      	ldr	r2, [pc, #504]	; (8001034 <main+0x248>)
 8000e3c:	60da      	str	r2, [r3, #12]
  steppers[0].acceleration = 1000;
 8000e3e:	4b7b      	ldr	r3, [pc, #492]	; (800102c <main+0x240>)
 8000e40:	4a7d      	ldr	r2, [pc, #500]	; (8001038 <main+0x24c>)
 8000e42:	601a      	str	r2, [r3, #0]
  steppers[0].minStepInterval = 100;
 8000e44:	4b79      	ldr	r3, [pc, #484]	; (800102c <main+0x240>)
 8000e46:	2264      	movs	r2, #100	; 0x64
 8000e48:	605a      	str	r2, [r3, #4]
  steppers[0].homing = 0;
 8000e4a:	4b78      	ldr	r3, [pc, #480]	; (800102c <main+0x240>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	741a      	strb	r2, [r3, #16]
  steppers[0].dir_inv = 1;
 8000e50:	4b76      	ldr	r3, [pc, #472]	; (800102c <main+0x240>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	621a      	str	r2, [r3, #32]
  steppers[0].seeking_vel = 100;
 8000e56:	4b75      	ldr	r3, [pc, #468]	; (800102c <main+0x240>)
 8000e58:	2264      	movs	r2, #100	; 0x64
 8000e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  steppers[0].homing_vel = 200;
 8000e5c:	4b73      	ldr	r3, [pc, #460]	; (800102c <main+0x240>)
 8000e5e:	22c8      	movs	r2, #200	; 0xc8
 8000e60:	631a      	str	r2, [r3, #48]	; 0x30
  steppers[0].pull_off = 500;
 8000e62:	4b72      	ldr	r3, [pc, #456]	; (800102c <main+0x240>)
 8000e64:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
  steppers[0].stall_off=10000;
 8000e6a:	4b70      	ldr	r3, [pc, #448]	; (800102c <main+0x240>)
 8000e6c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e70:	629a      	str	r2, [r3, #40]	; 0x28
  get_uart_flag=0;
 8000e72:	4b72      	ldr	r3, [pc, #456]	; (800103c <main+0x250>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]

sFilterConfig.FilterBank = 0;
 8000e78:	4b71      	ldr	r3, [pc, #452]	; (8001040 <main+0x254>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e7e:	4b70      	ldr	r3, [pc, #448]	; (8001040 <main+0x254>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e84:	4b6e      	ldr	r3, [pc, #440]	; (8001040 <main+0x254>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	61da      	str	r2, [r3, #28]
sFilterConfig.FilterIdHigh = 0x0000;
 8000e8a:	4b6d      	ldr	r3, [pc, #436]	; (8001040 <main+0x254>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
sFilterConfig.FilterIdLow = 0x0000;
 8000e90:	4b6b      	ldr	r3, [pc, #428]	; (8001040 <main+0x254>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000e96:	4b6a      	ldr	r3, [pc, #424]	; (8001040 <main+0x254>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
sFilterConfig.FilterMaskIdLow = 0x0000;
 8000e9c:	4b68      	ldr	r3, [pc, #416]	; (8001040 <main+0x254>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000ea2:	4b67      	ldr	r3, [pc, #412]	; (8001040 <main+0x254>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	611a      	str	r2, [r3, #16]
//	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;
sFilterConfig.FilterActivation=ENABLE;
 8000ea8:	4b65      	ldr	r3, [pc, #404]	; (8001040 <main+0x254>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	621a      	str	r2, [r3, #32]
sFilterConfig.SlaveStartFilterBank=14;
 8000eae:	4b64      	ldr	r3, [pc, #400]	; (8001040 <main+0x254>)
 8000eb0:	220e      	movs	r2, #14
 8000eb2:	625a      	str	r2, [r3, #36]	; 0x24

if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 8000eb4:	4962      	ldr	r1, [pc, #392]	; (8001040 <main+0x254>)
 8000eb6:	4863      	ldr	r0, [pc, #396]	; (8001044 <main+0x258>)
 8000eb8:	f001 f8ea 	bl	8002090 <HAL_CAN_ConfigFilter>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <main+0xda>
{
	Error_Handler();
 8000ec2:	f000 fc6b 	bl	800179c <Error_Handler>
}
if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 8000ec6:	485f      	ldr	r0, [pc, #380]	; (8001044 <main+0x258>)
 8000ec8:	f001 f9c2 	bl	8002250 <HAL_CAN_Start>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <main+0xea>
{
	Error_Handler();
 8000ed2:	f000 fc63 	bl	800179c <Error_Handler>
}

if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8000ed6:	2103      	movs	r1, #3
 8000ed8:	485a      	ldr	r0, [pc, #360]	; (8001044 <main+0x258>)
 8000eda:	f001 fb0f 	bl	80024fc <HAL_CAN_ActivateNotification>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <main+0xfc>
{
	Error_Handler();
 8000ee4:	f000 fc5a 	bl	800179c <Error_Handler>
}

printf("RMD Start\r\n");
 8000ee8:	4857      	ldr	r0, [pc, #348]	; (8001048 <main+0x25c>)
 8000eea:	f005 fc7d 	bl	80067e8 <puts>
uint8_t judgment[10];
uint8_t modeflag=0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //受信するまで待つ
	 	  while(!get_uart_flag){}
 8000ef4:	bf00      	nop
 8000ef6:	4b51      	ldr	r3, [pc, #324]	; (800103c <main+0x250>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0fb      	beq.n	8000ef6 <main+0x10a>
	 	  get_can1_flag=0;//canデータ受信用のフラグを0に
 8000efe:	4b53      	ldr	r3, [pc, #332]	; (800104c <main+0x260>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
	 	  for(int i=0;i<10;i++){
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000f0a:	e010      	b.n	8000f2e <main+0x142>
	 		  judgment[i]=RxData[i];
 8000f0c:	4a50      	ldr	r2, [pc, #320]	; (8001050 <main+0x264>)
 8000f0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f12:	4413      	add	r3, r2
 8000f14:	7819      	ldrb	r1, [r3, #0]
 8000f16:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f1e:	4413      	add	r3, r2
 8000f20:	460a      	mov	r2, r1
 8000f22:	701a      	strb	r2, [r3, #0]
	 	  for(int i=0;i<10;i++){
 8000f24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f28:	3301      	adds	r3, #1
 8000f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f32:	2b09      	cmp	r3, #9
 8000f34:	ddea      	ble.n	8000f0c <main+0x120>
	 	  }
	 	  command_judgment(judgment);
 8000f36:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff1e 	bl	8000d7c <command_judgment>
	 	  if(selectmode_flag==1){
 8000f40:	4b44      	ldr	r3, [pc, #272]	; (8001054 <main+0x268>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d104      	bne.n	8000f52 <main+0x166>
	 		  mode_select=RxData[0];	//モード変更
 8000f48:	4b41      	ldr	r3, [pc, #260]	; (8001050 <main+0x264>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8000f50:	e02c      	b.n	8000fac <main+0x1c0>
	 		  }
	 	  else if(selectmode_flag==0){
 8000f52:	4b40      	ldr	r3, [pc, #256]	; (8001054 <main+0x268>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d128      	bne.n	8000fac <main+0x1c0>
	 		  receive_xy_coordinate[0]=RxData[0]&0xFF;	//受け取った座標データをビットシフトしてx,yの値に直す
 8000f5a:	4b3d      	ldr	r3, [pc, #244]	; (8001050 <main+0x264>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	b21b      	sxth	r3, r3
 8000f60:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	 		  receive_xy_coordinate[0]+= (RxData[1]&0xFF)<<8;
 8000f64:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	4b39      	ldr	r3, [pc, #228]	; (8001050 <main+0x264>)
 8000f6c:	785b      	ldrb	r3, [r3, #1]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	021b      	lsls	r3, r3, #8
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	4413      	add	r3, r2
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	 		  receive_xy_coordinate[1]=RxData[2]&0xFF;
 8000f7e:	4b34      	ldr	r3, [pc, #208]	; (8001050 <main+0x264>)
 8000f80:	789b      	ldrb	r3, [r3, #2]
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	 		  receive_xy_coordinate[1]+= (RxData[3]&0xFF)<<8;
 8000f88:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	4b30      	ldr	r3, [pc, #192]	; (8001050 <main+0x264>)
 8000f90:	78db      	ldrb	r3, [r3, #3]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	021b      	lsls	r3, r3, #8
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	4413      	add	r3, r2
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

//	 		  tip_coordinate_data[0]=(float)receive_xy_coordinate[0];
//	 		  tip_coordinate_data[1]=(float)receive_xy_coordinate[1];
//	 		  machine_coordinate_data[0]=machine_origin_coordinate[0]+tip_coordinate_data[1];	//手先座標系から機械座標系への変換
//	 		  machine_coordinate_data[1]=machine_origin_coordinate[1]-tip_coordinate_data[0];
	 		  HAL_UART_Transmit_IT(&huart2,RxData,sizeof(RxData));
 8000fa2:	220a      	movs	r2, #10
 8000fa4:	492a      	ldr	r1, [pc, #168]	; (8001050 <main+0x264>)
 8000fa6:	482c      	ldr	r0, [pc, #176]	; (8001058 <main+0x26c>)
 8000fa8:	f003 ffdc 	bl	8004f64 <HAL_UART_Transmit_IT>
//	 		  BLDC_IK(machine_coordinate_data[0],machine_coordinate_data[1],&rad_data[0],&rad_data[1]);
	 	  }
	 	  if(home_position_state==1){	//初期位置モード
 8000fac:	4b2b      	ldr	r3, [pc, #172]	; (800105c <main+0x270>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d122      	bne.n	8000ffa <main+0x20e>
	 		  switch(mode_select){
 8000fb4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8000fba:	d015      	beq.n	8000fe8 <main+0x1fc>
 8000fbc:	2b2a      	cmp	r3, #42	; 0x2a
 8000fbe:	dc99      	bgt.n	8000ef4 <main+0x108>
 8000fc0:	2b0a      	cmp	r3, #10
 8000fc2:	d002      	beq.n	8000fca <main+0x1de>
 8000fc4:	2b1a      	cmp	r3, #26
 8000fc6:	d004      	beq.n	8000fd2 <main+0x1e6>
 8000fc8:	e100      	b.n	80011cc <main+0x3e0>
//	 			  EnterMotorMode();
//	 			  BLDC_CANTx();
//	 			  canid=0x02;
//	 			  EnterMotorMode();
//	 			  BLDC_CANTx();
	 			  RxData[0]=0;
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <main+0x264>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
	 			  break;
 8000fd0:	e0fc      	b.n	80011cc <main+0x3e0>
	 		  case 0x1A:
	 			 stepperHoming();
 8000fd2:	f7ff fdff 	bl	8000bd4 <stepperHoming>
	 			 runAndWait();
 8000fd6:	f7ff fddb 	bl	8000b90 <runAndWait>
	 			 HAL_Delay(10);
 8000fda:	200a      	movs	r0, #10
 8000fdc:	f000 ff38 	bl	8001e50 <HAL_Delay>

	 			  RxData[0]=0;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <main+0x264>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
	 			  break;
 8000fe6:	e0f1      	b.n	80011cc <main+0x3e0>
	 		  case 0x2A:
	 			  if(selectmode_flag==0){	//初期位置の変更
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <main+0x268>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f040 80ec 	bne.w	80011ca <main+0x3de>
//	 				  machine_origin_coordinate[0]=(float)receive_xy_coordinate[0];
//	 				  machine_origin_coordinate[1]=(float)receive_xy_coordinate[1];
//	 				  BLDC_IK(machine_origin_coordinate[0],machine_origin_coordinate[1],&rad_data[0],&rad_data[1]);
//	 				  machine_origin_rad[0]=rad_data[0];
//	 				  machine_origin_rad[1]=rad_data[1];
		 			  RxData[0]=0;
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <main+0x264>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
	 			  }
	 			  break;
 8000ff8:	e0e7      	b.n	80011ca <main+0x3de>
	 		  }
	 	  }
	 	  else if(home_position_state==0){
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <main+0x270>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f47f af78 	bne.w	8000ef4 <main+0x108>
	 		  switch(mode_select){	//
 8001004:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001008:	2bd1      	cmp	r3, #209	; 0xd1
 800100a:	f300 80ce 	bgt.w	80011aa <main+0x3be>
 800100e:	2ba0      	cmp	r3, #160	; 0xa0
 8001010:	da26      	bge.n	8001060 <main+0x274>
 8001012:	2b01      	cmp	r3, #1
 8001014:	f000 80b3 	beq.w	800117e <main+0x392>
 8001018:	2b02      	cmp	r3, #2
 800101a:	f000 80b4 	beq.w	8001186 <main+0x39a>
 800101e:	e0c4      	b.n	80011aa <main+0x3be>
 8001020:	20000010 	.word	0x20000010
 8001024:	200000e0 	.word	0x200000e0
 8001028:	08007cb4 	.word	0x08007cb4
 800102c:	2000064c 	.word	0x2000064c
 8001030:	08000749 	.word	0x08000749
 8001034:	08000725 	.word	0x08000725
 8001038:	447a0000 	.word	0x447a0000
 800103c:	20000712 	.word	0x20000712
 8001040:	200006a0 	.word	0x200006a0
 8001044:	20000090 	.word	0x20000090
 8001048:	08007cbc 	.word	0x08007cbc
 800104c:	20000716 	.word	0x20000716
 8001050:	200006f0 	.word	0x200006f0
 8001054:	20000718 	.word	0x20000718
 8001058:	2000016c 	.word	0x2000016c
 800105c:	20000713 	.word	0x20000713
 8001060:	3ba0      	subs	r3, #160	; 0xa0
 8001062:	2b31      	cmp	r3, #49	; 0x31
 8001064:	f200 80a1 	bhi.w	80011aa <main+0x3be>
 8001068:	a201      	add	r2, pc, #4	; (adr r2, 8001070 <main+0x284>)
 800106a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106e:	bf00      	nop
 8001070:	08001139 	.word	0x08001139
 8001074:	08001155 	.word	0x08001155
 8001078:	0800115d 	.word	0x0800115d
 800107c:	080011ab 	.word	0x080011ab
 8001080:	080011ab 	.word	0x080011ab
 8001084:	080011ab 	.word	0x080011ab
 8001088:	080011ab 	.word	0x080011ab
 800108c:	080011ab 	.word	0x080011ab
 8001090:	080011ab 	.word	0x080011ab
 8001094:	080011ab 	.word	0x080011ab
 8001098:	080011ab 	.word	0x080011ab
 800109c:	080011ab 	.word	0x080011ab
 80010a0:	080011ab 	.word	0x080011ab
 80010a4:	080011ab 	.word	0x080011ab
 80010a8:	080011ab 	.word	0x080011ab
 80010ac:	080011ab 	.word	0x080011ab
 80010b0:	08001165 	.word	0x08001165
 80010b4:	0800116d 	.word	0x0800116d
 80010b8:	080011ab 	.word	0x080011ab
 80010bc:	080011ab 	.word	0x080011ab
 80010c0:	080011ab 	.word	0x080011ab
 80010c4:	080011ab 	.word	0x080011ab
 80010c8:	080011ab 	.word	0x080011ab
 80010cc:	080011ab 	.word	0x080011ab
 80010d0:	080011ab 	.word	0x080011ab
 80010d4:	080011ab 	.word	0x080011ab
 80010d8:	080011ab 	.word	0x080011ab
 80010dc:	080011ab 	.word	0x080011ab
 80010e0:	080011ab 	.word	0x080011ab
 80010e4:	080011ab 	.word	0x080011ab
 80010e8:	080011ab 	.word	0x080011ab
 80010ec:	080011ab 	.word	0x080011ab
 80010f0:	080011ab 	.word	0x080011ab
 80010f4:	080011ab 	.word	0x080011ab
 80010f8:	080011ab 	.word	0x080011ab
 80010fc:	080011ab 	.word	0x080011ab
 8001100:	080011ab 	.word	0x080011ab
 8001104:	080011ab 	.word	0x080011ab
 8001108:	080011ab 	.word	0x080011ab
 800110c:	080011ab 	.word	0x080011ab
 8001110:	080011ab 	.word	0x080011ab
 8001114:	080011ab 	.word	0x080011ab
 8001118:	080011ab 	.word	0x080011ab
 800111c:	080011ab 	.word	0x080011ab
 8001120:	080011ab 	.word	0x080011ab
 8001124:	080011ab 	.word	0x080011ab
 8001128:	080011ab 	.word	0x080011ab
 800112c:	080011ab 	.word	0x080011ab
 8001130:	0800118f 	.word	0x0800118f
 8001134:	0800119b 	.word	0x0800119b
	 		  case 0xA0:	//動作モード
	 			  if(selectmode_flag==0){
 8001138:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <main+0x3e4>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d105      	bne.n	800114c <main+0x360>
//	 				  t_position[0] = rad_data[0];
//	 				  t_position[1] = rad_data[1];
//	 				  BLDC_MotorRotate();
	 				  prepareAbsoluteMovement(20000);
 8001140:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001144:	f7ff fb8e 	bl	8000864 <prepareAbsoluteMovement>
	 				  runAndWait();
 8001148:	f7ff fd22 	bl	8000b90 <runAndWait>
	 			  }
	 			  RxData[0]=0;
 800114c:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <main+0x3e8>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
	 			  break;
 8001152:	e031      	b.n	80011b8 <main+0x3cc>
	 		  case 0xA1:
//	 			  t_position[0] = machine_origin_rad[0];	//アーム初期位置
//	 			  t_position[1] = machine_origin_rad[1];
//	 			  BLDC_MotorRotate();
	 			  RxData[0]=0;
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <main+0x3e8>)
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
	 			  break;
 800115a:	e02d      	b.n	80011b8 <main+0x3cc>
	 		  case 0xA2:
//	 			  t_position[0] = 0;
//	 			  t_position[1] = 0;
//	 			  BLDC_MotorRotate();
	 			  RxData[0]=0;
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <main+0x3e8>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
	 			  break;
 8001162:	e029      	b.n	80011b8 <main+0x3cc>
//	 			  pack_cmd(0.0, 0.0, 0.0, 1.0, 0.0);
//	 			  BLDC_CANTx();
//	 			  canid=0x02;
//	 			  pack_cmd(0.0, 0.0, 0.0, 1.0, 0.0);
//	 			  BLDC_CANTx();
	 			  RxData[0]=0;
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <main+0x3e8>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
	 			  break;
 800116a:	e025      	b.n	80011b8 <main+0x3cc>
//	 			  sent_data[1]=round(machine_coordinate_data[0]-machine_origin_coordinate[0]);
//	 			  TxData[0]=sent_data[0]&0xFF;
//	 			  TxData[1]=(sent_data[0]>>8)&0xFF;
//	 		   	  TxData[2]=sent_data[1]&0xFF;
//	 			  TxData[3]=(sent_data[1]>>8)&0xFF;
	 			  HAL_UART_Transmit_IT(&huart2,TxData,sizeof(TxData));
 800116c:	220a      	movs	r2, #10
 800116e:	491a      	ldr	r1, [pc, #104]	; (80011d8 <main+0x3ec>)
 8001170:	481a      	ldr	r0, [pc, #104]	; (80011dc <main+0x3f0>)
 8001172:	f003 fef7 	bl	8004f64 <HAL_UART_Transmit_IT>
	 			  RxData[0]=0;
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <main+0x3e8>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
	 			  break;
 800117c:	e01c      	b.n	80011b8 <main+0x3cc>
//	 			  EnterMotorMode();
//	 			  BLDC_CANTx();
//	 			  canid=0x02;
//	 			  EnterMotorMode();
//	 			  BLDC_CANTx();
	 			  RxData[0]=0;
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <main+0x3e8>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
	 			  break;
 8001184:	e018      	b.n	80011b8 <main+0x3cc>
//	 			  ExitMotorMode();
//	 			  BLDC_CANTx();
//	 			  canid=0x02;
//	 			  ExitMotorMode();
//	 			  BLDC_CANTx();
	 			  RxData[0]=0;
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <main+0x3e8>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
	 			  break;
 800118c:	e014      	b.n	80011b8 <main+0x3cc>
	 		 case 0xD0:
	 			 MotorOFF();
 800118e:	f7ff fd89 	bl	8000ca4 <MotorOFF>
	 			 HAL_Delay(10);
 8001192:	200a      	movs	r0, #10
 8001194:	f000 fe5c 	bl	8001e50 <HAL_Delay>
	 			 break;
 8001198:	e00e      	b.n	80011b8 <main+0x3cc>
	 		case 0xD1:
	 			stepperHoming();
 800119a:	f7ff fd1b 	bl	8000bd4 <stepperHoming>
	 			runAndWait();
 800119e:	f7ff fcf7 	bl	8000b90 <runAndWait>
	 			HAL_Delay(10);
 80011a2:	200a      	movs	r0, #10
 80011a4:	f000 fe54 	bl	8001e50 <HAL_Delay>
	 			break;
 80011a8:	e006      	b.n	80011b8 <main+0x3cc>
	 		 default:
	 			 get_can1_flag=1;
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <main+0x3f4>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
	 			 get_can2_flag=1;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <main+0x3f8>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
	 			 break;
 80011b6:	bf00      	nop
	 		  }
	 		  get_uart_flag=0;
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <main+0x3fc>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
	 		  while(!get_can1_flag){}
 80011be:	bf00      	nop
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <main+0x3f4>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0fb      	beq.n	80011c0 <main+0x3d4>
 80011c8:	e694      	b.n	8000ef4 <main+0x108>
	 			  break;
 80011ca:	bf00      	nop
	 	  while(!get_uart_flag){}
 80011cc:	e692      	b.n	8000ef4 <main+0x108>
 80011ce:	bf00      	nop
 80011d0:	20000718 	.word	0x20000718
 80011d4:	200006f0 	.word	0x200006f0
 80011d8:	200006e4 	.word	0x200006e4
 80011dc:	2000016c 	.word	0x2000016c
 80011e0:	20000716 	.word	0x20000716
 80011e4:	20000717 	.word	0x20000717
 80011e8:	20000712 	.word	0x20000712

080011ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b094      	sub	sp, #80	; 0x50
 80011f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	2234      	movs	r2, #52	; 0x34
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f005 fa66 	bl	80066cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <SystemClock_Config+0xd0>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	4a28      	ldr	r2, [pc, #160]	; (80012bc <SystemClock_Config+0xd0>)
 800121a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121e:	6413      	str	r3, [r2, #64]	; 0x40
 8001220:	4b26      	ldr	r3, [pc, #152]	; (80012bc <SystemClock_Config+0xd0>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800122c:	2300      	movs	r3, #0
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <SystemClock_Config+0xd4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a22      	ldr	r2, [pc, #136]	; (80012c0 <SystemClock_Config+0xd4>)
 8001236:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <SystemClock_Config+0xd4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001248:	2302      	movs	r3, #2
 800124a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800124c:	2301      	movs	r3, #1
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001250:	2310      	movs	r3, #16
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001254:	2302      	movs	r3, #2
 8001256:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001258:	2300      	movs	r3, #0
 800125a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800125c:	2308      	movs	r3, #8
 800125e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001260:	23a0      	movs	r3, #160	; 0xa0
 8001262:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001264:	2302      	movs	r3, #2
 8001266:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001268:	2302      	movs	r3, #2
 800126a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800126c:	2302      	movs	r3, #2
 800126e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	4618      	mov	r0, r3
 8001276:	f002 fa4f 	bl	8003718 <HAL_RCC_OscConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001280:	f000 fa8c 	bl	800179c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001284:	230f      	movs	r3, #15
 8001286:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001288:	2302      	movs	r3, #2
 800128a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001290:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001294:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	2105      	movs	r1, #5
 80012a2:	4618      	mov	r0, r3
 80012a4:	f001 feee 	bl	8003084 <HAL_RCC_ClockConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012ae:	f000 fa75 	bl	800179c <Error_Handler>
  }
}
 80012b2:	bf00      	nop
 80012b4:	3750      	adds	r7, #80	; 0x50
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40007000 	.word	0x40007000

080012c4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <MX_CAN1_Init+0x68>)
 80012ca:	4a19      	ldr	r2, [pc, #100]	; (8001330 <MX_CAN1_Init+0x6c>)
 80012cc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <MX_CAN1_Init+0x68>)
 80012d0:	2204      	movs	r2, #4
 80012d2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <MX_CAN1_Init+0x68>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <MX_CAN1_Init+0x68>)
 80012dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012e0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <MX_CAN1_Init+0x68>)
 80012e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012e8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <MX_CAN1_Init+0x68>)
 80012ec:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80012f0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_CAN1_Init+0x68>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_CAN1_Init+0x68>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <MX_CAN1_Init+0x68>)
 8001300:	2200      	movs	r2, #0
 8001302:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_CAN1_Init+0x68>)
 8001306:	2200      	movs	r2, #0
 8001308:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <MX_CAN1_Init+0x68>)
 800130c:	2200      	movs	r2, #0
 800130e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_CAN1_Init+0x68>)
 8001312:	2200      	movs	r2, #0
 8001314:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_CAN1_Init+0x68>)
 8001318:	f000 fdbe 	bl	8001e98 <HAL_CAN_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001322:	f000 fa3b 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000090 	.word	0x20000090
 8001330:	40006400 	.word	0x40006400

08001334 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <MX_CAN2_Init+0x68>)
 800133a:	4a19      	ldr	r2, [pc, #100]	; (80013a0 <MX_CAN2_Init+0x6c>)
 800133c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_CAN2_Init+0x68>)
 8001340:	2204      	movs	r2, #4
 8001342:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_CAN2_Init+0x68>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_CAN2_Init+0x68>)
 800134c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001350:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_CAN2_Init+0x68>)
 8001354:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001358:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_7TQ;
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <MX_CAN2_Init+0x68>)
 800135c:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8001360:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_CAN2_Init+0x68>)
 8001364:	2200      	movs	r2, #0
 8001366:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_CAN2_Init+0x68>)
 800136a:	2200      	movs	r2, #0
 800136c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_CAN2_Init+0x68>)
 8001370:	2200      	movs	r2, #0
 8001372:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_CAN2_Init+0x68>)
 8001376:	2200      	movs	r2, #0
 8001378:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <MX_CAN2_Init+0x68>)
 800137c:	2200      	movs	r2, #0
 800137e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_CAN2_Init+0x68>)
 8001382:	2200      	movs	r2, #0
 8001384:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_CAN2_Init+0x68>)
 8001388:	f000 fd86 	bl	8001e98 <HAL_CAN_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8001392:	f000 fa03 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200000b8 	.word	0x200000b8
 80013a0:	40006800 	.word	0x40006800

080013a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08e      	sub	sp, #56	; 0x38
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	f107 0320 	add.w	r3, r7, #32
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	615a      	str	r2, [r3, #20]
 80013d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013d4:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <MX_TIM3_Init+0xe0>)
 80013d6:	4a2c      	ldr	r2, [pc, #176]	; (8001488 <MX_TIM3_Init+0xe4>)
 80013d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 80013da:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <MX_TIM3_Init+0xe0>)
 80013dc:	229f      	movs	r2, #159	; 0x9f
 80013de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e0:	4b28      	ldr	r3, [pc, #160]	; (8001484 <MX_TIM3_Init+0xe0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013e6:	4b27      	ldr	r3, [pc, #156]	; (8001484 <MX_TIM3_Init+0xe0>)
 80013e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <MX_TIM3_Init+0xe0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f4:	4b23      	ldr	r3, [pc, #140]	; (8001484 <MX_TIM3_Init+0xe0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013fa:	4822      	ldr	r0, [pc, #136]	; (8001484 <MX_TIM3_Init+0xe0>)
 80013fc:	f002 fc2a 	bl	8003c54 <HAL_TIM_Base_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001406:	f000 f9c9 	bl	800179c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001410:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001414:	4619      	mov	r1, r3
 8001416:	481b      	ldr	r0, [pc, #108]	; (8001484 <MX_TIM3_Init+0xe0>)
 8001418:	f002 ff3e 	bl	8004298 <HAL_TIM_ConfigClockSource>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001422:	f000 f9bb 	bl	800179c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001426:	4817      	ldr	r0, [pc, #92]	; (8001484 <MX_TIM3_Init+0xe0>)
 8001428:	f002 fc63 	bl	8003cf2 <HAL_TIM_OC_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001432:	f000 f9b3 	bl	800179c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800143e:	f107 0320 	add.w	r3, r7, #32
 8001442:	4619      	mov	r1, r3
 8001444:	480f      	ldr	r0, [pc, #60]	; (8001484 <MX_TIM3_Init+0xe0>)
 8001446:	f003 fb27 	bl	8004a98 <HAL_TIMEx_MasterConfigSynchronization>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001450:	f000 f9a4 	bl	800179c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001454:	2300      	movs	r3, #0
 8001456:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2200      	movs	r2, #0
 8001468:	4619      	mov	r1, r3
 800146a:	4806      	ldr	r0, [pc, #24]	; (8001484 <MX_TIM3_Init+0xe0>)
 800146c:	f002 feb8 	bl	80041e0 <HAL_TIM_OC_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001476:	f000 f991 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	3738      	adds	r7, #56	; 0x38
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200000e0 	.word	0x200000e0
 8001488:	40000400 	.word	0x40000400

0800148c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <MX_USART1_UART_Init+0x48>)
 8001492:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <MX_USART1_UART_Init+0x4c>)
 8001494:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_USART1_UART_Init+0x48>)
 8001498:	4a10      	ldr	r2, [pc, #64]	; (80014dc <MX_USART1_UART_Init+0x50>)
 800149a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <MX_USART1_UART_Init+0x48>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_USART1_UART_Init+0x48>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <MX_USART1_UART_Init+0x48>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_USART1_UART_Init+0x48>)
 80014b0:	220c      	movs	r2, #12
 80014b2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <MX_USART1_UART_Init+0x48>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_USART1_UART_Init+0x48>)
 80014bc:	2200      	movs	r2, #0
 80014be:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <MX_USART1_UART_Init+0x48>)
 80014c2:	f003 fbc6 	bl	8004c52 <HAL_HalfDuplex_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 80014cc:	f000 f966 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000128 	.word	0x20000128
 80014d8:	40011000 	.word	0x40011000
 80014dc:	0007a120 	.word	0x0007a120

080014e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_USART2_UART_Init+0x4c>)
 80014e6:	4a12      	ldr	r2, [pc, #72]	; (8001530 <MX_USART2_UART_Init+0x50>)
 80014e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <MX_USART2_UART_Init+0x4c>)
 80014ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_USART2_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_USART2_UART_Init+0x4c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_USART2_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_USART2_UART_Init+0x4c>)
 8001506:	220c      	movs	r2, #12
 8001508:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <MX_USART2_UART_Init+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_USART2_UART_Init+0x4c>)
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_USART2_UART_Init+0x4c>)
 8001518:	f003 fb4e 	bl	8004bb8 <HAL_UART_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001522:	f000 f93b 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2000016c 	.word	0x2000016c
 8001530:	40004400 	.word	0x40004400

08001534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	4b54      	ldr	r3, [pc, #336]	; (80016a0 <MX_GPIO_Init+0x16c>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a53      	ldr	r2, [pc, #332]	; (80016a0 <MX_GPIO_Init+0x16c>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b51      	ldr	r3, [pc, #324]	; (80016a0 <MX_GPIO_Init+0x16c>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b4d      	ldr	r3, [pc, #308]	; (80016a0 <MX_GPIO_Init+0x16c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a4c      	ldr	r2, [pc, #304]	; (80016a0 <MX_GPIO_Init+0x16c>)
 8001570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <MX_GPIO_Init+0x16c>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	4b46      	ldr	r3, [pc, #280]	; (80016a0 <MX_GPIO_Init+0x16c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a45      	ldr	r2, [pc, #276]	; (80016a0 <MX_GPIO_Init+0x16c>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b43      	ldr	r3, [pc, #268]	; (80016a0 <MX_GPIO_Init+0x16c>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	4b3f      	ldr	r3, [pc, #252]	; (80016a0 <MX_GPIO_Init+0x16c>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a3e      	ldr	r2, [pc, #248]	; (80016a0 <MX_GPIO_Init+0x16c>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b3c      	ldr	r3, [pc, #240]	; (80016a0 <MX_GPIO_Init+0x16c>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2120      	movs	r1, #32
 80015be:	4839      	ldr	r0, [pc, #228]	; (80016a4 <MX_GPIO_Init+0x170>)
 80015c0:	f001 fd2e 	bl	8003020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80015c4:	2200      	movs	r2, #0
 80015c6:	f44f 7144 	mov.w	r1, #784	; 0x310
 80015ca:	4837      	ldr	r0, [pc, #220]	; (80016a8 <MX_GPIO_Init+0x174>)
 80015cc:	f001 fd28 	bl	8003020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4831      	ldr	r0, [pc, #196]	; (80016ac <MX_GPIO_Init+0x178>)
 80015e8:	f001 fb6e 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015ec:	2320      	movs	r3, #32
 80015ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	4828      	ldr	r0, [pc, #160]	; (80016a4 <MX_GPIO_Init+0x170>)
 8001604:	f001 fb60 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800160c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	4821      	ldr	r0, [pc, #132]	; (80016a4 <MX_GPIO_Init+0x170>)
 800161e:	f001 fb53 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001622:	2310      	movs	r3, #16
 8001624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	2301      	movs	r3, #1
 8001628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	481b      	ldr	r0, [pc, #108]	; (80016a8 <MX_GPIO_Init+0x174>)
 800163a:	f001 fb45 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800163e:	2340      	movs	r3, #64	; 0x40
 8001640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001642:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	4815      	ldr	r0, [pc, #84]	; (80016a8 <MX_GPIO_Init+0x174>)
 8001654:	f001 fb38 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001658:	f44f 7340 	mov.w	r3, #768	; 0x300
 800165c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <MX_GPIO_Init+0x174>)
 8001672:	f001 fb29 	bl	8002cc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2101      	movs	r1, #1
 800167a:	2017      	movs	r0, #23
 800167c:	f001 fa5b 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001680:	2017      	movs	r0, #23
 8001682:	f001 fa74 	bl	8002b6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2101      	movs	r1, #1
 800168a:	2028      	movs	r0, #40	; 0x28
 800168c:	f001 fa53 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001690:	2028      	movs	r0, #40	; 0x28
 8001692:	f001 fa6c 	bl	8002b6e <HAL_NVIC_EnableIRQ>

}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	; 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020000 	.word	0x40020000
 80016a8:	40020400 	.word	0x40020400
 80016ac:	40020800 	.word	0x40020800

080016b0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)	//printfに必要
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	b29a      	uxth	r2, r3
 80016c0:	230a      	movs	r3, #10
 80016c2:	68b9      	ldr	r1, [r7, #8]
 80016c4:	4803      	ldr	r0, [pc, #12]	; (80016d4 <_write+0x24>)
 80016c6:	f003 fb19 	bl	8004cfc <HAL_UART_Transmit>
  return len;
 80016ca:	687b      	ldr	r3, [r7, #4]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	2000016c 	.word	0x2000016c

080016d8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	get_uart_flag = 1;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <HAL_UART_RxCpltCallback+0x28>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, (uint8_t *)RxData, buffersize);
 80016e6:	4b07      	ldr	r3, [pc, #28]	; (8001704 <HAL_UART_RxCpltCallback+0x2c>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	4906      	ldr	r1, [pc, #24]	; (8001708 <HAL_UART_RxCpltCallback+0x30>)
 80016f0:	4806      	ldr	r0, [pc, #24]	; (800170c <HAL_UART_RxCpltCallback+0x34>)
 80016f2:	f003 fc7c 	bl	8004fee <HAL_UART_Receive_IT>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000712 	.word	0x20000712
 8001704:	20000000 	.word	0x20000000
 8001708:	200006f0 	.word	0x200006f0
 800170c:	2000016c 	.word	0x2000016c

08001710 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
	  printf("TxCan\n\r");
 8001718:	4804      	ldr	r0, [pc, #16]	; (800172c <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800171a:	f004 ffdf 	bl	80066dc <iprintf>
	  nextcan_flag=1;
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 8001720:	2201      	movs	r2, #1
 8001722:	701a      	strb	r2, [r3, #0]

}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	08007cc8 	.word	0x08007cc8
 8001730:	20000715 	.word	0x20000715

08001734 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	get_can2_flag=1;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
	//	printf("RxCan\r\n");
	HAL_CAN_GetRxMessage(&hcan2,CAN_RX_FIFO0, &RxHeader,can2_data);
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001744:	4a06      	ldr	r2, [pc, #24]	; (8001760 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001746:	2100      	movs	r1, #0
 8001748:	4806      	ldr	r0, [pc, #24]	; (8001764 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800174a:	f000 fdc5 	bl	80022d8 <HAL_CAN_GetRxMessage>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000717 	.word	0x20000717
 800175c:	20000708 	.word	0x20000708
 8001760:	200006c8 	.word	0x200006c8
 8001764:	200000b8 	.word	0x200000b8

08001768 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	get_can1_flag=1;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]

	HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO1, &RxHeader,can1_data);
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 8001778:	4a06      	ldr	r2, [pc, #24]	; (8001794 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 800177a:	2101      	movs	r1, #1
 800177c:	4806      	ldr	r0, [pc, #24]	; (8001798 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 800177e:	f000 fdab 	bl	80022d8 <HAL_CAN_GetRxMessage>

}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000716 	.word	0x20000716
 8001790:	200006fc 	.word	0x200006fc
 8001794:	200006c8 	.word	0x200006c8
 8001798:	20000090 	.word	0x20000090

0800179c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a0:	b672      	cpsid	i
}
 80017a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <Error_Handler+0x8>
	...

080017a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <HAL_MspInit+0x4c>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	4a0f      	ldr	r2, [pc, #60]	; (80017f4 <HAL_MspInit+0x4c>)
 80017b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017bc:	6453      	str	r3, [r2, #68]	; 0x44
 80017be:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <HAL_MspInit+0x4c>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	603b      	str	r3, [r7, #0]
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_MspInit+0x4c>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	4a08      	ldr	r2, [pc, #32]	; (80017f4 <HAL_MspInit+0x4c>)
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d8:	6413      	str	r3, [r2, #64]	; 0x40
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_MspInit+0x4c>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800

080017f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	; 0x30
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 031c 	add.w	r3, r7, #28
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a5b      	ldr	r2, [pc, #364]	; (8001984 <HAL_CAN_MspInit+0x18c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d157      	bne.n	80018ca <HAL_CAN_MspInit+0xd2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800181a:	4b5b      	ldr	r3, [pc, #364]	; (8001988 <HAL_CAN_MspInit+0x190>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	3301      	adds	r3, #1
 8001820:	4a59      	ldr	r2, [pc, #356]	; (8001988 <HAL_CAN_MspInit+0x190>)
 8001822:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001824:	4b58      	ldr	r3, [pc, #352]	; (8001988 <HAL_CAN_MspInit+0x190>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d10d      	bne.n	8001848 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	61bb      	str	r3, [r7, #24]
 8001830:	4b56      	ldr	r3, [pc, #344]	; (800198c <HAL_CAN_MspInit+0x194>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	4a55      	ldr	r2, [pc, #340]	; (800198c <HAL_CAN_MspInit+0x194>)
 8001836:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800183a:	6413      	str	r3, [r2, #64]	; 0x40
 800183c:	4b53      	ldr	r3, [pc, #332]	; (800198c <HAL_CAN_MspInit+0x194>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001844:	61bb      	str	r3, [r7, #24]
 8001846:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	4b4f      	ldr	r3, [pc, #316]	; (800198c <HAL_CAN_MspInit+0x194>)
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	4a4e      	ldr	r2, [pc, #312]	; (800198c <HAL_CAN_MspInit+0x194>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6313      	str	r3, [r2, #48]	; 0x30
 8001858:	4b4c      	ldr	r3, [pc, #304]	; (800198c <HAL_CAN_MspInit+0x194>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001864:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001876:	2309      	movs	r3, #9
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f107 031c 	add.w	r3, r7, #28
 800187e:	4619      	mov	r1, r3
 8001880:	4843      	ldr	r0, [pc, #268]	; (8001990 <HAL_CAN_MspInit+0x198>)
 8001882:	f001 fa21 	bl	8002cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001890:	2301      	movs	r3, #1
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001894:	2303      	movs	r3, #3
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001898:	2309      	movs	r3, #9
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	4619      	mov	r1, r3
 80018a2:	483b      	ldr	r0, [pc, #236]	; (8001990 <HAL_CAN_MspInit+0x198>)
 80018a4:	f001 fa10 	bl	8002cc8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2100      	movs	r1, #0
 80018ac:	2013      	movs	r0, #19
 80018ae:	f001 f942 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80018b2:	2013      	movs	r0, #19
 80018b4:	f001 f95b 	bl	8002b6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2100      	movs	r1, #0
 80018bc:	2014      	movs	r0, #20
 80018be:	f001 f93a 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80018c2:	2014      	movs	r0, #20
 80018c4:	f001 f953 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80018c8:	e058      	b.n	800197c <HAL_CAN_MspInit+0x184>
  else if(hcan->Instance==CAN2)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a31      	ldr	r2, [pc, #196]	; (8001994 <HAL_CAN_MspInit+0x19c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d153      	bne.n	800197c <HAL_CAN_MspInit+0x184>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	4b2c      	ldr	r3, [pc, #176]	; (800198c <HAL_CAN_MspInit+0x194>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	4a2b      	ldr	r2, [pc, #172]	; (800198c <HAL_CAN_MspInit+0x194>)
 80018de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018e2:	6413      	str	r3, [r2, #64]	; 0x40
 80018e4:	4b29      	ldr	r3, [pc, #164]	; (800198c <HAL_CAN_MspInit+0x194>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80018f0:	4b25      	ldr	r3, [pc, #148]	; (8001988 <HAL_CAN_MspInit+0x190>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	3301      	adds	r3, #1
 80018f6:	4a24      	ldr	r2, [pc, #144]	; (8001988 <HAL_CAN_MspInit+0x190>)
 80018f8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80018fa:	4b23      	ldr	r3, [pc, #140]	; (8001988 <HAL_CAN_MspInit+0x190>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d10d      	bne.n	800191e <HAL_CAN_MspInit+0x126>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <HAL_CAN_MspInit+0x194>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a20      	ldr	r2, [pc, #128]	; (800198c <HAL_CAN_MspInit+0x194>)
 800190c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b1e      	ldr	r3, [pc, #120]	; (800198c <HAL_CAN_MspInit+0x194>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	4b1a      	ldr	r3, [pc, #104]	; (800198c <HAL_CAN_MspInit+0x194>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a19      	ldr	r2, [pc, #100]	; (800198c <HAL_CAN_MspInit+0x194>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b17      	ldr	r3, [pc, #92]	; (800198c <HAL_CAN_MspInit+0x194>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800193a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800194c:	2309      	movs	r3, #9
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4619      	mov	r1, r3
 8001956:	4810      	ldr	r0, [pc, #64]	; (8001998 <HAL_CAN_MspInit+0x1a0>)
 8001958:	f001 f9b6 	bl	8002cc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 800195c:	2200      	movs	r2, #0
 800195e:	2100      	movs	r1, #0
 8001960:	203f      	movs	r0, #63	; 0x3f
 8001962:	f001 f8e8 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8001966:	203f      	movs	r0, #63	; 0x3f
 8001968:	f001 f901 	bl	8002b6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	2100      	movs	r1, #0
 8001970:	2040      	movs	r0, #64	; 0x40
 8001972:	f001 f8e0 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001976:	2040      	movs	r0, #64	; 0x40
 8001978:	f001 f8f9 	bl	8002b6e <HAL_NVIC_EnableIRQ>
}
 800197c:	bf00      	nop
 800197e:	3730      	adds	r7, #48	; 0x30
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40006400 	.word	0x40006400
 8001988:	2000071c 	.word	0x2000071c
 800198c:	40023800 	.word	0x40023800
 8001990:	40020000 	.word	0x40020000
 8001994:	40006800 	.word	0x40006800
 8001998:	40020400 	.word	0x40020400

0800199c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0e      	ldr	r2, [pc, #56]	; (80019e4 <HAL_TIM_Base_MspInit+0x48>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d115      	bne.n	80019da <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <HAL_TIM_Base_MspInit+0x4c>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a0c      	ldr	r2, [pc, #48]	; (80019e8 <HAL_TIM_Base_MspInit+0x4c>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_TIM_Base_MspInit+0x4c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2102      	movs	r1, #2
 80019ce:	201d      	movs	r0, #29
 80019d0:	f001 f8b1 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019d4:	201d      	movs	r0, #29
 80019d6:	f001 f8ca 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40000400 	.word	0x40000400
 80019e8:	40023800 	.word	0x40023800

080019ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08c      	sub	sp, #48	; 0x30
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a36      	ldr	r2, [pc, #216]	; (8001ae4 <HAL_UART_MspInit+0xf8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d12d      	bne.n	8001a6a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
 8001a12:	4b35      	ldr	r3, [pc, #212]	; (8001ae8 <HAL_UART_MspInit+0xfc>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	4a34      	ldr	r2, [pc, #208]	; (8001ae8 <HAL_UART_MspInit+0xfc>)
 8001a18:	f043 0310 	orr.w	r3, r3, #16
 8001a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1e:	4b32      	ldr	r3, [pc, #200]	; (8001ae8 <HAL_UART_MspInit+0xfc>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ae8 <HAL_UART_MspInit+0xfc>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a2d      	ldr	r2, [pc, #180]	; (8001ae8 <HAL_UART_MspInit+0xfc>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <HAL_UART_MspInit+0xfc>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a4c:	2312      	movs	r3, #18
 8001a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a54:	2302      	movs	r3, #2
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a58:	2307      	movs	r3, #7
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 031c 	add.w	r3, r7, #28
 8001a60:	4619      	mov	r1, r3
 8001a62:	4822      	ldr	r0, [pc, #136]	; (8001aec <HAL_UART_MspInit+0x100>)
 8001a64:	f001 f930 	bl	8002cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a68:	e038      	b.n	8001adc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a20      	ldr	r2, [pc, #128]	; (8001af0 <HAL_UART_MspInit+0x104>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d133      	bne.n	8001adc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a74:	2300      	movs	r3, #0
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <HAL_UART_MspInit+0xfc>)
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	4a1a      	ldr	r2, [pc, #104]	; (8001ae8 <HAL_UART_MspInit+0xfc>)
 8001a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a82:	6413      	str	r3, [r2, #64]	; 0x40
 8001a84:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <HAL_UART_MspInit+0xfc>)
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <HAL_UART_MspInit+0xfc>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <HAL_UART_MspInit+0xfc>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <HAL_UART_MspInit+0xfc>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001aac:	230c      	movs	r3, #12
 8001aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001abc:	2307      	movs	r3, #7
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac0:	f107 031c 	add.w	r3, r7, #28
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4809      	ldr	r0, [pc, #36]	; (8001aec <HAL_UART_MspInit+0x100>)
 8001ac8:	f001 f8fe 	bl	8002cc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2026      	movs	r0, #38	; 0x26
 8001ad2:	f001 f830 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ad6:	2026      	movs	r0, #38	; 0x26
 8001ad8:	f001 f849 	bl	8002b6e <HAL_NVIC_EnableIRQ>
}
 8001adc:	bf00      	nop
 8001ade:	3730      	adds	r7, #48	; 0x30
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40011000 	.word	0x40011000
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40020000 	.word	0x40020000
 8001af0:	40004400 	.word	0x40004400

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <NMI_Handler+0x4>

08001afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <MemManage_Handler+0x4>

08001b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <BusFault_Handler+0x4>

08001b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <UsageFault_Handler+0x4>

08001b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b40:	f000 f966 	bl	8001e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <CAN1_TX_IRQHandler+0x10>)
 8001b4e:	f000 fcfb 	bl	8002548 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000090 	.word	0x20000090

08001b5c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <CAN1_RX0_IRQHandler+0x10>)
 8001b62:	f000 fcf1 	bl	8002548 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000090 	.word	0x20000090

08001b70 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001b74:	2040      	movs	r0, #64	; 0x40
 8001b76:	f001 fa6d 	bl	8003054 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001b7a:	2080      	movs	r0, #128	; 0x80
 8001b7c:	f001 fa6a 	bl	8003054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <TIM3_IRQHandler+0x10>)
 8001b8a:	f002 fa21 	bl	8003fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200000e0 	.word	0x200000e0

08001b98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b9c:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <USART2_IRQHandler+0x10>)
 8001b9e:	f003 fa57 	bl	8005050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2000016c 	.word	0x2000016c

08001bac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001bb0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bb4:	f001 fa4e 	bl	8003054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <CAN2_TX_IRQHandler+0x10>)
 8001bc2:	f000 fcc1 	bl	8002548 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200000b8 	.word	0x200000b8

08001bd0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <CAN2_RX0_IRQHandler+0x10>)
 8001bd6:	f000 fcb7 	bl	8002548 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200000b8 	.word	0x200000b8

08001be4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	e00a      	b.n	8001c0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bf6:	f3af 8000 	nop.w
 8001bfa:	4601      	mov	r1, r0
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	60ba      	str	r2, [r7, #8]
 8001c02:	b2ca      	uxtb	r2, r1
 8001c04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	dbf0      	blt.n	8001bf6 <_read+0x12>
	}

return len;
 8001c14:	687b      	ldr	r3, [r7, #4]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
	return -1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c46:	605a      	str	r2, [r3, #4]
	return 0;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <_isatty>:

int _isatty(int file)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
	return 0;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c90:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <_sbrk+0x5c>)
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <_sbrk+0x60>)
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c9c:	4b13      	ldr	r3, [pc, #76]	; (8001cec <_sbrk+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d102      	bne.n	8001caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <_sbrk+0x64>)
 8001ca6:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <_sbrk+0x68>)
 8001ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d207      	bcs.n	8001cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb8:	f004 fcde 	bl	8006678 <__errno>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cc6:	e009      	b.n	8001cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <_sbrk+0x64>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <_sbrk+0x64>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	4a05      	ldr	r2, [pc, #20]	; (8001cec <_sbrk+0x64>)
 8001cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cda:	68fb      	ldr	r3, [r7, #12]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20020000 	.word	0x20020000
 8001ce8:	00000400 	.word	0x00000400
 8001cec:	20000720 	.word	0x20000720
 8001cf0:	20000940 	.word	0x20000940

08001cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <SystemInit+0x20>)
 8001cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfe:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <SystemInit+0x20>)
 8001d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d1c:	480d      	ldr	r0, [pc, #52]	; (8001d54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d1e:	490e      	ldr	r1, [pc, #56]	; (8001d58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d20:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d24:	e002      	b.n	8001d2c <LoopCopyDataInit>

08001d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2a:	3304      	adds	r3, #4

08001d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d30:	d3f9      	bcc.n	8001d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d32:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d34:	4c0b      	ldr	r4, [pc, #44]	; (8001d64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d38:	e001      	b.n	8001d3e <LoopFillZerobss>

08001d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d3c:	3204      	adds	r2, #4

08001d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d40:	d3fb      	bcc.n	8001d3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d42:	f7ff ffd7 	bl	8001cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d46:	f004 fc9d 	bl	8006684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d4a:	f7ff f84f 	bl	8000dec <main>
  bx  lr    
 8001d4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d58:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001d5c:	08008010 	.word	0x08008010
  ldr r2, =_sbss
 8001d60:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001d64:	2000093c 	.word	0x2000093c

08001d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d68:	e7fe      	b.n	8001d68 <ADC_IRQHandler>
	...

08001d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0d      	ldr	r2, [pc, #52]	; (8001dac <HAL_Init+0x40>)
 8001d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <HAL_Init+0x40>)
 8001d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <HAL_Init+0x40>)
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d94:	2003      	movs	r0, #3
 8001d96:	f000 fec3 	bl	8002b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f000 f808 	bl	8001db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da0:	f7ff fd02 	bl	80017a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00

08001db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_InitTick+0x54>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_InitTick+0x58>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 fedb 	bl	8002b8a <HAL_SYSTICK_Config>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00e      	b.n	8001dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b0f      	cmp	r3, #15
 8001de2:	d80a      	bhi.n	8001dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de4:	2200      	movs	r2, #0
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dec:	f000 fea3 	bl	8002b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df0:	4a06      	ldr	r2, [pc, #24]	; (8001e0c <HAL_InitTick+0x5c>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	e000      	b.n	8001dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000004 	.word	0x20000004
 8001e08:	2000000c 	.word	0x2000000c
 8001e0c:	20000008 	.word	0x20000008

08001e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	2000000c 	.word	0x2000000c
 8001e34:	20000724 	.word	0x20000724

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000724 	.word	0x20000724

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff ffee 	bl	8001e38 <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e68:	d005      	beq.n	8001e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_Delay+0x44>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e76:	bf00      	nop
 8001e78:	f7ff ffde 	bl	8001e38 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <HAL_Delay+0x28>
  {
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	2000000c 	.word	0x2000000c

08001e98 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e0ed      	b.n	8002086 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d102      	bne.n	8001ebc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff fc9e 	bl	80017f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ecc:	f7ff ffb4 	bl	8001e38 <HAL_GetTick>
 8001ed0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ed2:	e012      	b.n	8001efa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ed4:	f7ff ffb0 	bl	8001e38 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b0a      	cmp	r3, #10
 8001ee0:	d90b      	bls.n	8001efa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2205      	movs	r2, #5
 8001ef2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e0c5      	b.n	8002086 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0e5      	beq.n	8001ed4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0202 	bic.w	r2, r2, #2
 8001f16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f18:	f7ff ff8e 	bl	8001e38 <HAL_GetTick>
 8001f1c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f1e:	e012      	b.n	8001f46 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f20:	f7ff ff8a 	bl	8001e38 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b0a      	cmp	r3, #10
 8001f2c:	d90b      	bls.n	8001f46 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2205      	movs	r2, #5
 8001f3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e09f      	b.n	8002086 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1e5      	bne.n	8001f20 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7e1b      	ldrb	r3, [r3, #24]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d108      	bne.n	8001f6e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	e007      	b.n	8001f7e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	7e5b      	ldrb	r3, [r3, #25]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d108      	bne.n	8001f98 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	e007      	b.n	8001fa8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7e9b      	ldrb	r3, [r3, #26]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d108      	bne.n	8001fc2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0220 	orr.w	r2, r2, #32
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	e007      	b.n	8001fd2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0220 	bic.w	r2, r2, #32
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7edb      	ldrb	r3, [r3, #27]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d108      	bne.n	8001fec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0210 	bic.w	r2, r2, #16
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	e007      	b.n	8001ffc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0210 	orr.w	r2, r2, #16
 8001ffa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	7f1b      	ldrb	r3, [r3, #28]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d108      	bne.n	8002016 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0208 	orr.w	r2, r2, #8
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	e007      	b.n	8002026 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0208 	bic.w	r2, r2, #8
 8002024:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	7f5b      	ldrb	r3, [r3, #29]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d108      	bne.n	8002040 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0204 	orr.w	r2, r2, #4
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	e007      	b.n	8002050 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0204 	bic.w	r2, r2, #4
 800204e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	ea42 0103 	orr.w	r1, r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	1e5a      	subs	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020a6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80020a8:	7cfb      	ldrb	r3, [r7, #19]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d003      	beq.n	80020b6 <HAL_CAN_ConfigFilter+0x26>
 80020ae:	7cfb      	ldrb	r3, [r7, #19]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	f040 80be 	bne.w	8002232 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80020b6:	4b65      	ldr	r3, [pc, #404]	; (800224c <HAL_CAN_ConfigFilter+0x1bc>)
 80020b8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020c0:	f043 0201 	orr.w	r2, r3, #1
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	431a      	orrs	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f003 031f 	and.w	r3, r3, #31
 80020f6:	2201      	movs	r2, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	43db      	mvns	r3, r3
 8002108:	401a      	ands	r2, r3
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d123      	bne.n	8002160 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	43db      	mvns	r3, r3
 8002122:	401a      	ands	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800213a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	3248      	adds	r2, #72	; 0x48
 8002140:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002154:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002156:	6979      	ldr	r1, [r7, #20]
 8002158:	3348      	adds	r3, #72	; 0x48
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	440b      	add	r3, r1
 800215e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d122      	bne.n	80021ae <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	431a      	orrs	r2, r3
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002188:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3248      	adds	r2, #72	; 0x48
 800218e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021a2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021a4:	6979      	ldr	r1, [r7, #20]
 80021a6:	3348      	adds	r3, #72	; 0x48
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	440b      	add	r3, r1
 80021ac:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	43db      	mvns	r3, r3
 80021c0:	401a      	ands	r2, r3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80021c8:	e007      	b.n	80021da <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d109      	bne.n	80021f6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	401a      	ands	r2, r3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80021f4:	e007      	b.n	8002206 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	431a      	orrs	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d107      	bne.n	800221e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	431a      	orrs	r2, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002224:	f023 0201 	bic.w	r2, r3, #1
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e006      	b.n	8002240 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
  }
}
 8002240:	4618      	mov	r0, r3
 8002242:	371c      	adds	r7, #28
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40006400 	.word	0x40006400

08002250 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b01      	cmp	r3, #1
 8002262:	d12e      	bne.n	80022c2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0201 	bic.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800227c:	f7ff fddc 	bl	8001e38 <HAL_GetTick>
 8002280:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002282:	e012      	b.n	80022aa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002284:	f7ff fdd8 	bl	8001e38 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b0a      	cmp	r3, #10
 8002290:	d90b      	bls.n	80022aa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2205      	movs	r2, #5
 80022a2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e012      	b.n	80022d0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1e5      	bne.n	8002284 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e006      	b.n	80022d0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
  }
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ec:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80022ee:	7dfb      	ldrb	r3, [r7, #23]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d003      	beq.n	80022fc <HAL_CAN_GetRxMessage+0x24>
 80022f4:	7dfb      	ldrb	r3, [r7, #23]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	f040 80f3 	bne.w	80024e2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10e      	bne.n	8002320 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d116      	bne.n	800233e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0e7      	b.n	80024f0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d107      	bne.n	800233e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e0d8      	b.n	80024f0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	331b      	adds	r3, #27
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	4413      	add	r3, r2
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0204 	and.w	r2, r3, #4
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10c      	bne.n	8002376 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	331b      	adds	r3, #27
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	4413      	add	r3, r2
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	0d5b      	lsrs	r3, r3, #21
 800236c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	e00b      	b.n	800238e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	331b      	adds	r3, #27
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	4413      	add	r3, r2
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	08db      	lsrs	r3, r3, #3
 8002386:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	331b      	adds	r3, #27
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	4413      	add	r3, r2
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0202 	and.w	r2, r3, #2
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	331b      	adds	r3, #27
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	4413      	add	r3, r2
 80023b0:	3304      	adds	r3, #4
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 020f 	and.w	r2, r3, #15
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	331b      	adds	r3, #27
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	4413      	add	r3, r2
 80023c8:	3304      	adds	r3, #4
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	331b      	adds	r3, #27
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	4413      	add	r3, r2
 80023e0:	3304      	adds	r3, #4
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	0c1b      	lsrs	r3, r3, #16
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	4413      	add	r3, r2
 800240c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0a1a      	lsrs	r2, r3, #8
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	3301      	adds	r3, #1
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	4413      	add	r3, r2
 8002426:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	0c1a      	lsrs	r2, r3, #16
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	3302      	adds	r3, #2
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	4413      	add	r3, r2
 8002440:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	0e1a      	lsrs	r2, r3, #24
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	3303      	adds	r3, #3
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	4413      	add	r3, r2
 800245a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	3304      	adds	r3, #4
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	4413      	add	r3, r2
 8002472:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0a1a      	lsrs	r2, r3, #8
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	3305      	adds	r3, #5
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	4413      	add	r3, r2
 800248c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	0c1a      	lsrs	r2, r3, #16
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	3306      	adds	r3, #6
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	0e1a      	lsrs	r2, r3, #24
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	3307      	adds	r3, #7
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d108      	bne.n	80024ce <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0220 	orr.w	r2, r2, #32
 80024ca:	60da      	str	r2, [r3, #12]
 80024cc:	e007      	b.n	80024de <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0220 	orr.w	r2, r2, #32
 80024dc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e006      	b.n	80024f0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
  }
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	371c      	adds	r7, #28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800250c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d002      	beq.n	800251a <HAL_CAN_ActivateNotification+0x1e>
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d109      	bne.n	800252e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6959      	ldr	r1, [r3, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	e006      	b.n	800253c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
  }
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08a      	sub	sp, #40	; 0x28
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002550:	2300      	movs	r3, #0
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d07c      	beq.n	8002688 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d023      	beq.n	80025e0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2201      	movs	r2, #1
 800259e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff f8b0 	bl	8001710 <HAL_CAN_TxMailbox0CompleteCallback>
 80025b0:	e016      	b.n	80025e0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d004      	beq.n	80025c6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
 80025c4:	e00c      	b.n	80025e0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d004      	beq.n	80025da <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
 80025d8:	e002      	b.n	80025e0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f97f 	bl	80028de <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d024      	beq.n	8002634 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f959 	bl	80028b6 <HAL_CAN_TxMailbox1CompleteCallback>
 8002604:	e016      	b.n	8002634 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260c:	2b00      	cmp	r3, #0
 800260e:	d004      	beq.n	800261a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
 8002618:	e00c      	b.n	8002634 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002620:	2b00      	cmp	r3, #0
 8002622:	d004      	beq.n	800262e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
 800262c:	e002      	b.n	8002634 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f95f 	bl	80028f2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d024      	beq.n	8002688 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002646:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f939 	bl	80028ca <HAL_CAN_TxMailbox2CompleteCallback>
 8002658:	e016      	b.n	8002688 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d004      	beq.n	800266e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
 800266c:	e00c      	b.n	8002688 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d004      	beq.n	8002682 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
 8002680:	e002      	b.n	8002688 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f93f 	bl	8002906 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00c      	beq.n	80026ac <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	2b00      	cmp	r3, #0
 800269a:	d007      	beq.n	80026ac <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2210      	movs	r2, #16
 80026aa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00b      	beq.n	80026ce <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d006      	beq.n	80026ce <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2208      	movs	r2, #8
 80026c6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f926 	bl	800291a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d009      	beq.n	80026ec <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff f824 	bl	8001734 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00c      	beq.n	8002710 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002706:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2210      	movs	r2, #16
 800270e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00b      	beq.n	8002732 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b00      	cmp	r3, #0
 8002722:	d006      	beq.n	8002732 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2208      	movs	r2, #8
 800272a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f8fe 	bl	800292e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b00      	cmp	r3, #0
 800273a:	d009      	beq.n	8002750 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff f80c 	bl	8001768 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b00      	cmp	r3, #0
 8002762:	d006      	beq.n	8002772 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2210      	movs	r2, #16
 800276a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f8e8 	bl	8002942 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00b      	beq.n	8002794 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d006      	beq.n	8002794 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2208      	movs	r2, #8
 800278c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f8e1 	bl	8002956 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d07b      	beq.n	8002896 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d072      	beq.n	800288e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d008      	beq.n	80027c4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d008      	beq.n	80027e0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	f043 0302 	orr.w	r3, r3, #2
 80027de:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d008      	beq.n	80027fc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	f043 0304 	orr.w	r3, r3, #4
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002802:	2b00      	cmp	r3, #0
 8002804:	d043      	beq.n	800288e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800280c:	2b00      	cmp	r3, #0
 800280e:	d03e      	beq.n	800288e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002816:	2b60      	cmp	r3, #96	; 0x60
 8002818:	d02b      	beq.n	8002872 <HAL_CAN_IRQHandler+0x32a>
 800281a:	2b60      	cmp	r3, #96	; 0x60
 800281c:	d82e      	bhi.n	800287c <HAL_CAN_IRQHandler+0x334>
 800281e:	2b50      	cmp	r3, #80	; 0x50
 8002820:	d022      	beq.n	8002868 <HAL_CAN_IRQHandler+0x320>
 8002822:	2b50      	cmp	r3, #80	; 0x50
 8002824:	d82a      	bhi.n	800287c <HAL_CAN_IRQHandler+0x334>
 8002826:	2b40      	cmp	r3, #64	; 0x40
 8002828:	d019      	beq.n	800285e <HAL_CAN_IRQHandler+0x316>
 800282a:	2b40      	cmp	r3, #64	; 0x40
 800282c:	d826      	bhi.n	800287c <HAL_CAN_IRQHandler+0x334>
 800282e:	2b30      	cmp	r3, #48	; 0x30
 8002830:	d010      	beq.n	8002854 <HAL_CAN_IRQHandler+0x30c>
 8002832:	2b30      	cmp	r3, #48	; 0x30
 8002834:	d822      	bhi.n	800287c <HAL_CAN_IRQHandler+0x334>
 8002836:	2b10      	cmp	r3, #16
 8002838:	d002      	beq.n	8002840 <HAL_CAN_IRQHandler+0x2f8>
 800283a:	2b20      	cmp	r3, #32
 800283c:	d005      	beq.n	800284a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800283e:	e01d      	b.n	800287c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	f043 0308 	orr.w	r3, r3, #8
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002848:	e019      	b.n	800287e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	f043 0310 	orr.w	r3, r3, #16
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002852:	e014      	b.n	800287e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	f043 0320 	orr.w	r3, r3, #32
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800285c:	e00f      	b.n	800287e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002866:	e00a      	b.n	800287e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002870:	e005      	b.n	800287e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800287a:	e000      	b.n	800287e <HAL_CAN_IRQHandler+0x336>
            break;
 800287c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699a      	ldr	r2, [r3, #24]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800288c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2204      	movs	r2, #4
 8002894:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f85e 	bl	800296a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80028ae:	bf00      	nop
 80028b0:	3728      	adds	r7, #40	; 0x28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800299c:	4013      	ands	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029b2:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	60d3      	str	r3, [r2, #12]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <__NVIC_GetPriorityGrouping+0x18>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	0a1b      	lsrs	r3, r3, #8
 80029d2:	f003 0307 	and.w	r3, r3, #7
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	db0b      	blt.n	8002a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	4907      	ldr	r1, [pc, #28]	; (8002a1c <__NVIC_EnableIRQ+0x38>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2001      	movs	r0, #1
 8002a06:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000e100 	.word	0xe000e100

08002a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	db0a      	blt.n	8002a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	490c      	ldr	r1, [pc, #48]	; (8002a6c <__NVIC_SetPriority+0x4c>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	0112      	lsls	r2, r2, #4
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	440b      	add	r3, r1
 8002a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a48:	e00a      	b.n	8002a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4908      	ldr	r1, [pc, #32]	; (8002a70 <__NVIC_SetPriority+0x50>)
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	3b04      	subs	r3, #4
 8002a58:	0112      	lsls	r2, r2, #4
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	761a      	strb	r2, [r3, #24]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000e100 	.word	0xe000e100
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f1c3 0307 	rsb	r3, r3, #7
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	bf28      	it	cs
 8002a92:	2304      	movcs	r3, #4
 8002a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d902      	bls.n	8002aa4 <NVIC_EncodePriority+0x30>
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3b03      	subs	r3, #3
 8002aa2:	e000      	b.n	8002aa6 <NVIC_EncodePriority+0x32>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002abc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43d9      	mvns	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	4313      	orrs	r3, r2
         );
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3724      	adds	r7, #36	; 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aec:	d301      	bcc.n	8002af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aee:	2301      	movs	r3, #1
 8002af0:	e00f      	b.n	8002b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af2:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <SysTick_Config+0x40>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afa:	210f      	movs	r1, #15
 8002afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b00:	f7ff ff8e 	bl	8002a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <SysTick_Config+0x40>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0a:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <SysTick_Config+0x40>)
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	e000e010 	.word	0xe000e010

08002b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ff29 	bl	8002980 <__NVIC_SetPriorityGrouping>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b086      	sub	sp, #24
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b48:	f7ff ff3e 	bl	80029c8 <__NVIC_GetPriorityGrouping>
 8002b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	6978      	ldr	r0, [r7, #20]
 8002b54:	f7ff ff8e 	bl	8002a74 <NVIC_EncodePriority>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff5d 	bl	8002a20 <__NVIC_SetPriority>
}
 8002b66:	bf00      	nop
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff31 	bl	80029e4 <__NVIC_EnableIRQ>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ffa2 	bl	8002adc <SysTick_Config>
 8002b98:	4603      	mov	r3, r0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bb0:	f7ff f942 	bl	8001e38 <HAL_GetTick>
 8002bb4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d008      	beq.n	8002bd4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2280      	movs	r2, #128	; 0x80
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e052      	b.n	8002c7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0216 	bic.w	r2, r2, #22
 8002be2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bf2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d103      	bne.n	8002c04 <HAL_DMA_Abort+0x62>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d007      	beq.n	8002c14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0208 	bic.w	r2, r2, #8
 8002c12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0201 	bic.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c24:	e013      	b.n	8002c4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c26:	f7ff f907 	bl	8001e38 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b05      	cmp	r3, #5
 8002c32:	d90c      	bls.n	8002c4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e015      	b.n	8002c7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1e4      	bne.n	8002c26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	223f      	movs	r2, #63	; 0x3f
 8002c62:	409a      	lsls	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d004      	beq.n	8002ca0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2280      	movs	r2, #128	; 0x80
 8002c9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e00c      	b.n	8002cba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2205      	movs	r2, #5
 8002ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0201 	bic.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b089      	sub	sp, #36	; 0x24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	e165      	b.n	8002fb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	f040 8154 	bne.w	8002faa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d005      	beq.n	8002d1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d130      	bne.n	8002d7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	2203      	movs	r2, #3
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d50:	2201      	movs	r2, #1
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 0201 	and.w	r2, r3, #1
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d017      	beq.n	8002db8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	2203      	movs	r2, #3
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d123      	bne.n	8002e0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	08da      	lsrs	r2, r3, #3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3208      	adds	r2, #8
 8002dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	220f      	movs	r2, #15
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	08da      	lsrs	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3208      	adds	r2, #8
 8002e06:	69b9      	ldr	r1, [r7, #24]
 8002e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	2203      	movs	r2, #3
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0203 	and.w	r2, r3, #3
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80ae 	beq.w	8002faa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	4b5d      	ldr	r3, [pc, #372]	; (8002fc8 <HAL_GPIO_Init+0x300>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	4a5c      	ldr	r2, [pc, #368]	; (8002fc8 <HAL_GPIO_Init+0x300>)
 8002e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e5e:	4b5a      	ldr	r3, [pc, #360]	; (8002fc8 <HAL_GPIO_Init+0x300>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e6a:	4a58      	ldr	r2, [pc, #352]	; (8002fcc <HAL_GPIO_Init+0x304>)
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	089b      	lsrs	r3, r3, #2
 8002e70:	3302      	adds	r3, #2
 8002e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	220f      	movs	r2, #15
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a4f      	ldr	r2, [pc, #316]	; (8002fd0 <HAL_GPIO_Init+0x308>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d025      	beq.n	8002ee2 <HAL_GPIO_Init+0x21a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a4e      	ldr	r2, [pc, #312]	; (8002fd4 <HAL_GPIO_Init+0x30c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d01f      	beq.n	8002ede <HAL_GPIO_Init+0x216>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a4d      	ldr	r2, [pc, #308]	; (8002fd8 <HAL_GPIO_Init+0x310>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d019      	beq.n	8002eda <HAL_GPIO_Init+0x212>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a4c      	ldr	r2, [pc, #304]	; (8002fdc <HAL_GPIO_Init+0x314>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d013      	beq.n	8002ed6 <HAL_GPIO_Init+0x20e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a4b      	ldr	r2, [pc, #300]	; (8002fe0 <HAL_GPIO_Init+0x318>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d00d      	beq.n	8002ed2 <HAL_GPIO_Init+0x20a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a4a      	ldr	r2, [pc, #296]	; (8002fe4 <HAL_GPIO_Init+0x31c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d007      	beq.n	8002ece <HAL_GPIO_Init+0x206>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a49      	ldr	r2, [pc, #292]	; (8002fe8 <HAL_GPIO_Init+0x320>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d101      	bne.n	8002eca <HAL_GPIO_Init+0x202>
 8002ec6:	2306      	movs	r3, #6
 8002ec8:	e00c      	b.n	8002ee4 <HAL_GPIO_Init+0x21c>
 8002eca:	2307      	movs	r3, #7
 8002ecc:	e00a      	b.n	8002ee4 <HAL_GPIO_Init+0x21c>
 8002ece:	2305      	movs	r3, #5
 8002ed0:	e008      	b.n	8002ee4 <HAL_GPIO_Init+0x21c>
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	e006      	b.n	8002ee4 <HAL_GPIO_Init+0x21c>
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e004      	b.n	8002ee4 <HAL_GPIO_Init+0x21c>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e002      	b.n	8002ee4 <HAL_GPIO_Init+0x21c>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <HAL_GPIO_Init+0x21c>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	f002 0203 	and.w	r2, r2, #3
 8002eea:	0092      	lsls	r2, r2, #2
 8002eec:	4093      	lsls	r3, r2
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ef4:	4935      	ldr	r1, [pc, #212]	; (8002fcc <HAL_GPIO_Init+0x304>)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	089b      	lsrs	r3, r3, #2
 8002efa:	3302      	adds	r3, #2
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f02:	4b3a      	ldr	r3, [pc, #232]	; (8002fec <HAL_GPIO_Init+0x324>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f26:	4a31      	ldr	r2, [pc, #196]	; (8002fec <HAL_GPIO_Init+0x324>)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f2c:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <HAL_GPIO_Init+0x324>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f50:	4a26      	ldr	r2, [pc, #152]	; (8002fec <HAL_GPIO_Init+0x324>)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f56:	4b25      	ldr	r3, [pc, #148]	; (8002fec <HAL_GPIO_Init+0x324>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f7a:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <HAL_GPIO_Init+0x324>)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f80:	4b1a      	ldr	r3, [pc, #104]	; (8002fec <HAL_GPIO_Init+0x324>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fa4:	4a11      	ldr	r2, [pc, #68]	; (8002fec <HAL_GPIO_Init+0x324>)
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3301      	adds	r3, #1
 8002fae:	61fb      	str	r3, [r7, #28]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	2b0f      	cmp	r3, #15
 8002fb4:	f67f ae96 	bls.w	8002ce4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	3724      	adds	r7, #36	; 0x24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40013800 	.word	0x40013800
 8002fd0:	40020000 	.word	0x40020000
 8002fd4:	40020400 	.word	0x40020400
 8002fd8:	40020800 	.word	0x40020800
 8002fdc:	40020c00 	.word	0x40020c00
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40021400 	.word	0x40021400
 8002fe8:	40021800 	.word	0x40021800
 8002fec:	40013c00 	.word	0x40013c00

08002ff0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	887b      	ldrh	r3, [r7, #2]
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
 800300c:	e001      	b.n	8003012 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800300e:	2300      	movs	r3, #0
 8003010:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003012:	7bfb      	ldrb	r3, [r7, #15]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	807b      	strh	r3, [r7, #2]
 800302c:	4613      	mov	r3, r2
 800302e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003030:	787b      	ldrb	r3, [r7, #1]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003036:	887a      	ldrh	r2, [r7, #2]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800303c:	e003      	b.n	8003046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800303e:	887b      	ldrh	r3, [r7, #2]
 8003040:	041a      	lsls	r2, r3, #16
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	619a      	str	r2, [r3, #24]
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
	...

08003054 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800305e:	4b08      	ldr	r3, [pc, #32]	; (8003080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	4013      	ands	r3, r2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d006      	beq.n	8003078 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800306a:	4a05      	ldr	r2, [pc, #20]	; (8003080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fd fb10 	bl	8000698 <HAL_GPIO_EXTI_Callback>
  }
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40013c00 	.word	0x40013c00

08003084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0cc      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003098:	4b68      	ldr	r3, [pc, #416]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d90c      	bls.n	80030c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b65      	ldr	r3, [pc, #404]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	4b63      	ldr	r3, [pc, #396]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0b8      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d020      	beq.n	800310e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d8:	4b59      	ldr	r3, [pc, #356]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4a58      	ldr	r2, [pc, #352]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f0:	4b53      	ldr	r3, [pc, #332]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4a52      	ldr	r2, [pc, #328]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030fc:	4b50      	ldr	r3, [pc, #320]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	494d      	ldr	r1, [pc, #308]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d044      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	4b47      	ldr	r3, [pc, #284]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d119      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e07f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d003      	beq.n	8003142 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800313e:	2b03      	cmp	r3, #3
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003142:	4b3f      	ldr	r3, [pc, #252]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e06f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003152:	4b3b      	ldr	r3, [pc, #236]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e067      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003162:	4b37      	ldr	r3, [pc, #220]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f023 0203 	bic.w	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4934      	ldr	r1, [pc, #208]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	4313      	orrs	r3, r2
 8003172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003174:	f7fe fe60 	bl	8001e38 <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	e00a      	b.n	8003192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317c:	f7fe fe5c 	bl	8001e38 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e04f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 020c 	and.w	r2, r3, #12
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d1eb      	bne.n	800317c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031a4:	4b25      	ldr	r3, [pc, #148]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d20c      	bcs.n	80031cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b22      	ldr	r3, [pc, #136]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	4b20      	ldr	r3, [pc, #128]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e032      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d8:	4b19      	ldr	r3, [pc, #100]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4916      	ldr	r1, [pc, #88]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	490e      	ldr	r1, [pc, #56]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800320a:	f000 f855 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 800320e:	4602      	mov	r2, r0
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	490a      	ldr	r1, [pc, #40]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 800321c:	5ccb      	ldrb	r3, [r1, r3]
 800321e:	fa22 f303 	lsr.w	r3, r2, r3
 8003222:	4a09      	ldr	r2, [pc, #36]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe fdc0 	bl	8001db0 <HAL_InitTick>

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023c00 	.word	0x40023c00
 8003240:	40023800 	.word	0x40023800
 8003244:	08007ed0 	.word	0x08007ed0
 8003248:	20000004 	.word	0x20000004
 800324c:	20000008 	.word	0x20000008

08003250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <HAL_RCC_GetHCLKFreq+0x14>)
 8003256:	681b      	ldr	r3, [r3, #0]
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000004 	.word	0x20000004

08003268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800326c:	f7ff fff0 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 8003270:	4602      	mov	r2, r0
 8003272:	4b05      	ldr	r3, [pc, #20]	; (8003288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	0a9b      	lsrs	r3, r3, #10
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	4903      	ldr	r1, [pc, #12]	; (800328c <HAL_RCC_GetPCLK1Freq+0x24>)
 800327e:	5ccb      	ldrb	r3, [r1, r3]
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003284:	4618      	mov	r0, r3
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40023800 	.word	0x40023800
 800328c:	08007ee0 	.word	0x08007ee0

08003290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003294:	f7ff ffdc 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 8003298:	4602      	mov	r2, r0
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	0b5b      	lsrs	r3, r3, #13
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	4903      	ldr	r1, [pc, #12]	; (80032b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032a6:	5ccb      	ldrb	r3, [r1, r3]
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40023800 	.word	0x40023800
 80032b4:	08007ee0 	.word	0x08007ee0

080032b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032bc:	b0ae      	sub	sp, #184	; 0xb8
 80032be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032de:	4bcb      	ldr	r3, [pc, #812]	; (800360c <HAL_RCC_GetSysClockFreq+0x354>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b0c      	cmp	r3, #12
 80032e8:	f200 8206 	bhi.w	80036f8 <HAL_RCC_GetSysClockFreq+0x440>
 80032ec:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80032ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f2:	bf00      	nop
 80032f4:	08003329 	.word	0x08003329
 80032f8:	080036f9 	.word	0x080036f9
 80032fc:	080036f9 	.word	0x080036f9
 8003300:	080036f9 	.word	0x080036f9
 8003304:	08003331 	.word	0x08003331
 8003308:	080036f9 	.word	0x080036f9
 800330c:	080036f9 	.word	0x080036f9
 8003310:	080036f9 	.word	0x080036f9
 8003314:	08003339 	.word	0x08003339
 8003318:	080036f9 	.word	0x080036f9
 800331c:	080036f9 	.word	0x080036f9
 8003320:	080036f9 	.word	0x080036f9
 8003324:	08003529 	.word	0x08003529
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003328:	4bb9      	ldr	r3, [pc, #740]	; (8003610 <HAL_RCC_GetSysClockFreq+0x358>)
 800332a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800332e:	e1e7      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003330:	4bb8      	ldr	r3, [pc, #736]	; (8003614 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003332:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003336:	e1e3      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003338:	4bb4      	ldr	r3, [pc, #720]	; (800360c <HAL_RCC_GetSysClockFreq+0x354>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003340:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003344:	4bb1      	ldr	r3, [pc, #708]	; (800360c <HAL_RCC_GetSysClockFreq+0x354>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d071      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003350:	4bae      	ldr	r3, [pc, #696]	; (800360c <HAL_RCC_GetSysClockFreq+0x354>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	099b      	lsrs	r3, r3, #6
 8003356:	2200      	movs	r2, #0
 8003358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800335c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003360:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003368:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800336c:	2300      	movs	r3, #0
 800336e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003372:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003376:	4622      	mov	r2, r4
 8003378:	462b      	mov	r3, r5
 800337a:	f04f 0000 	mov.w	r0, #0
 800337e:	f04f 0100 	mov.w	r1, #0
 8003382:	0159      	lsls	r1, r3, #5
 8003384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003388:	0150      	lsls	r0, r2, #5
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4621      	mov	r1, r4
 8003390:	1a51      	subs	r1, r2, r1
 8003392:	6439      	str	r1, [r7, #64]	; 0x40
 8003394:	4629      	mov	r1, r5
 8003396:	eb63 0301 	sbc.w	r3, r3, r1
 800339a:	647b      	str	r3, [r7, #68]	; 0x44
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80033a8:	4649      	mov	r1, r9
 80033aa:	018b      	lsls	r3, r1, #6
 80033ac:	4641      	mov	r1, r8
 80033ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033b2:	4641      	mov	r1, r8
 80033b4:	018a      	lsls	r2, r1, #6
 80033b6:	4641      	mov	r1, r8
 80033b8:	1a51      	subs	r1, r2, r1
 80033ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80033bc:	4649      	mov	r1, r9
 80033be:	eb63 0301 	sbc.w	r3, r3, r1
 80033c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80033d0:	4649      	mov	r1, r9
 80033d2:	00cb      	lsls	r3, r1, #3
 80033d4:	4641      	mov	r1, r8
 80033d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033da:	4641      	mov	r1, r8
 80033dc:	00ca      	lsls	r2, r1, #3
 80033de:	4610      	mov	r0, r2
 80033e0:	4619      	mov	r1, r3
 80033e2:	4603      	mov	r3, r0
 80033e4:	4622      	mov	r2, r4
 80033e6:	189b      	adds	r3, r3, r2
 80033e8:	633b      	str	r3, [r7, #48]	; 0x30
 80033ea:	462b      	mov	r3, r5
 80033ec:	460a      	mov	r2, r1
 80033ee:	eb42 0303 	adc.w	r3, r2, r3
 80033f2:	637b      	str	r3, [r7, #52]	; 0x34
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003400:	4629      	mov	r1, r5
 8003402:	024b      	lsls	r3, r1, #9
 8003404:	4621      	mov	r1, r4
 8003406:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800340a:	4621      	mov	r1, r4
 800340c:	024a      	lsls	r2, r1, #9
 800340e:	4610      	mov	r0, r2
 8003410:	4619      	mov	r1, r3
 8003412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003416:	2200      	movs	r2, #0
 8003418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800341c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003420:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003424:	f7fc ff44 	bl	80002b0 <__aeabi_uldivmod>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4613      	mov	r3, r2
 800342e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003432:	e067      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003434:	4b75      	ldr	r3, [pc, #468]	; (800360c <HAL_RCC_GetSysClockFreq+0x354>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	099b      	lsrs	r3, r3, #6
 800343a:	2200      	movs	r2, #0
 800343c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003440:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003444:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800344c:	67bb      	str	r3, [r7, #120]	; 0x78
 800344e:	2300      	movs	r3, #0
 8003450:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003452:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003456:	4622      	mov	r2, r4
 8003458:	462b      	mov	r3, r5
 800345a:	f04f 0000 	mov.w	r0, #0
 800345e:	f04f 0100 	mov.w	r1, #0
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003468:	0150      	lsls	r0, r2, #5
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4621      	mov	r1, r4
 8003470:	1a51      	subs	r1, r2, r1
 8003472:	62b9      	str	r1, [r7, #40]	; 0x28
 8003474:	4629      	mov	r1, r5
 8003476:	eb63 0301 	sbc.w	r3, r3, r1
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003488:	4649      	mov	r1, r9
 800348a:	018b      	lsls	r3, r1, #6
 800348c:	4641      	mov	r1, r8
 800348e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003492:	4641      	mov	r1, r8
 8003494:	018a      	lsls	r2, r1, #6
 8003496:	4641      	mov	r1, r8
 8003498:	ebb2 0a01 	subs.w	sl, r2, r1
 800349c:	4649      	mov	r1, r9
 800349e:	eb63 0b01 	sbc.w	fp, r3, r1
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034b6:	4692      	mov	sl, r2
 80034b8:	469b      	mov	fp, r3
 80034ba:	4623      	mov	r3, r4
 80034bc:	eb1a 0303 	adds.w	r3, sl, r3
 80034c0:	623b      	str	r3, [r7, #32]
 80034c2:	462b      	mov	r3, r5
 80034c4:	eb4b 0303 	adc.w	r3, fp, r3
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80034d6:	4629      	mov	r1, r5
 80034d8:	028b      	lsls	r3, r1, #10
 80034da:	4621      	mov	r1, r4
 80034dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034e0:	4621      	mov	r1, r4
 80034e2:	028a      	lsls	r2, r1, #10
 80034e4:	4610      	mov	r0, r2
 80034e6:	4619      	mov	r1, r3
 80034e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034ec:	2200      	movs	r2, #0
 80034ee:	673b      	str	r3, [r7, #112]	; 0x70
 80034f0:	677a      	str	r2, [r7, #116]	; 0x74
 80034f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80034f6:	f7fc fedb 	bl	80002b0 <__aeabi_uldivmod>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4613      	mov	r3, r2
 8003500:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003504:	4b41      	ldr	r3, [pc, #260]	; (800360c <HAL_RCC_GetSysClockFreq+0x354>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	0c1b      	lsrs	r3, r3, #16
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	3301      	adds	r3, #1
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800351a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800351e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003522:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003526:	e0eb      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003528:	4b38      	ldr	r3, [pc, #224]	; (800360c <HAL_RCC_GetSysClockFreq+0x354>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003530:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003534:	4b35      	ldr	r3, [pc, #212]	; (800360c <HAL_RCC_GetSysClockFreq+0x354>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d06b      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003540:	4b32      	ldr	r3, [pc, #200]	; (800360c <HAL_RCC_GetSysClockFreq+0x354>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	099b      	lsrs	r3, r3, #6
 8003546:	2200      	movs	r2, #0
 8003548:	66bb      	str	r3, [r7, #104]	; 0x68
 800354a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800354c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800354e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003552:	663b      	str	r3, [r7, #96]	; 0x60
 8003554:	2300      	movs	r3, #0
 8003556:	667b      	str	r3, [r7, #100]	; 0x64
 8003558:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800355c:	4622      	mov	r2, r4
 800355e:	462b      	mov	r3, r5
 8003560:	f04f 0000 	mov.w	r0, #0
 8003564:	f04f 0100 	mov.w	r1, #0
 8003568:	0159      	lsls	r1, r3, #5
 800356a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800356e:	0150      	lsls	r0, r2, #5
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4621      	mov	r1, r4
 8003576:	1a51      	subs	r1, r2, r1
 8003578:	61b9      	str	r1, [r7, #24]
 800357a:	4629      	mov	r1, r5
 800357c:	eb63 0301 	sbc.w	r3, r3, r1
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800358e:	4659      	mov	r1, fp
 8003590:	018b      	lsls	r3, r1, #6
 8003592:	4651      	mov	r1, sl
 8003594:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003598:	4651      	mov	r1, sl
 800359a:	018a      	lsls	r2, r1, #6
 800359c:	4651      	mov	r1, sl
 800359e:	ebb2 0801 	subs.w	r8, r2, r1
 80035a2:	4659      	mov	r1, fp
 80035a4:	eb63 0901 	sbc.w	r9, r3, r1
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035bc:	4690      	mov	r8, r2
 80035be:	4699      	mov	r9, r3
 80035c0:	4623      	mov	r3, r4
 80035c2:	eb18 0303 	adds.w	r3, r8, r3
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	462b      	mov	r3, r5
 80035ca:	eb49 0303 	adc.w	r3, r9, r3
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80035dc:	4629      	mov	r1, r5
 80035de:	024b      	lsls	r3, r1, #9
 80035e0:	4621      	mov	r1, r4
 80035e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035e6:	4621      	mov	r1, r4
 80035e8:	024a      	lsls	r2, r1, #9
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035f2:	2200      	movs	r2, #0
 80035f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80035f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80035f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035fc:	f7fc fe58 	bl	80002b0 <__aeabi_uldivmod>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4613      	mov	r3, r2
 8003606:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800360a:	e065      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x420>
 800360c:	40023800 	.word	0x40023800
 8003610:	00f42400 	.word	0x00f42400
 8003614:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003618:	4b3d      	ldr	r3, [pc, #244]	; (8003710 <HAL_RCC_GetSysClockFreq+0x458>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	099b      	lsrs	r3, r3, #6
 800361e:	2200      	movs	r2, #0
 8003620:	4618      	mov	r0, r3
 8003622:	4611      	mov	r1, r2
 8003624:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003628:	653b      	str	r3, [r7, #80]	; 0x50
 800362a:	2300      	movs	r3, #0
 800362c:	657b      	str	r3, [r7, #84]	; 0x54
 800362e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003632:	4642      	mov	r2, r8
 8003634:	464b      	mov	r3, r9
 8003636:	f04f 0000 	mov.w	r0, #0
 800363a:	f04f 0100 	mov.w	r1, #0
 800363e:	0159      	lsls	r1, r3, #5
 8003640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003644:	0150      	lsls	r0, r2, #5
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4641      	mov	r1, r8
 800364c:	1a51      	subs	r1, r2, r1
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	4649      	mov	r1, r9
 8003652:	eb63 0301 	sbc.w	r3, r3, r1
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003664:	4659      	mov	r1, fp
 8003666:	018b      	lsls	r3, r1, #6
 8003668:	4651      	mov	r1, sl
 800366a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800366e:	4651      	mov	r1, sl
 8003670:	018a      	lsls	r2, r1, #6
 8003672:	4651      	mov	r1, sl
 8003674:	1a54      	subs	r4, r2, r1
 8003676:	4659      	mov	r1, fp
 8003678:	eb63 0501 	sbc.w	r5, r3, r1
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	00eb      	lsls	r3, r5, #3
 8003686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800368a:	00e2      	lsls	r2, r4, #3
 800368c:	4614      	mov	r4, r2
 800368e:	461d      	mov	r5, r3
 8003690:	4643      	mov	r3, r8
 8003692:	18e3      	adds	r3, r4, r3
 8003694:	603b      	str	r3, [r7, #0]
 8003696:	464b      	mov	r3, r9
 8003698:	eb45 0303 	adc.w	r3, r5, r3
 800369c:	607b      	str	r3, [r7, #4]
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036aa:	4629      	mov	r1, r5
 80036ac:	028b      	lsls	r3, r1, #10
 80036ae:	4621      	mov	r1, r4
 80036b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036b4:	4621      	mov	r1, r4
 80036b6:	028a      	lsls	r2, r1, #10
 80036b8:	4610      	mov	r0, r2
 80036ba:	4619      	mov	r1, r3
 80036bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036c0:	2200      	movs	r2, #0
 80036c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80036c4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80036c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036ca:	f7fc fdf1 	bl	80002b0 <__aeabi_uldivmod>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4613      	mov	r3, r2
 80036d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80036d8:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <HAL_RCC_GetSysClockFreq+0x458>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	0f1b      	lsrs	r3, r3, #28
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80036e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036f6:	e003      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036f8:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_RCC_GetSysClockFreq+0x45c>)
 80036fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003700:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003704:	4618      	mov	r0, r3
 8003706:	37b8      	adds	r7, #184	; 0xb8
 8003708:	46bd      	mov	sp, r7
 800370a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800
 8003714:	00f42400 	.word	0x00f42400

08003718 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e28d      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8083 	beq.w	800383e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003738:	4b94      	ldr	r3, [pc, #592]	; (800398c <HAL_RCC_OscConfig+0x274>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b04      	cmp	r3, #4
 8003742:	d019      	beq.n	8003778 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003744:	4b91      	ldr	r3, [pc, #580]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800374c:	2b08      	cmp	r3, #8
 800374e:	d106      	bne.n	800375e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003750:	4b8e      	ldr	r3, [pc, #568]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003758:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800375c:	d00c      	beq.n	8003778 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800375e:	4b8b      	ldr	r3, [pc, #556]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003766:	2b0c      	cmp	r3, #12
 8003768:	d112      	bne.n	8003790 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800376a:	4b88      	ldr	r3, [pc, #544]	; (800398c <HAL_RCC_OscConfig+0x274>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003776:	d10b      	bne.n	8003790 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003778:	4b84      	ldr	r3, [pc, #528]	; (800398c <HAL_RCC_OscConfig+0x274>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d05b      	beq.n	800383c <HAL_RCC_OscConfig+0x124>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d157      	bne.n	800383c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e25a      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003798:	d106      	bne.n	80037a8 <HAL_RCC_OscConfig+0x90>
 800379a:	4b7c      	ldr	r3, [pc, #496]	; (800398c <HAL_RCC_OscConfig+0x274>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a7b      	ldr	r2, [pc, #492]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80037a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e01d      	b.n	80037e4 <HAL_RCC_OscConfig+0xcc>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b0:	d10c      	bne.n	80037cc <HAL_RCC_OscConfig+0xb4>
 80037b2:	4b76      	ldr	r3, [pc, #472]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a75      	ldr	r2, [pc, #468]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80037b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	4b73      	ldr	r3, [pc, #460]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a72      	ldr	r2, [pc, #456]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80037c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e00b      	b.n	80037e4 <HAL_RCC_OscConfig+0xcc>
 80037cc:	4b6f      	ldr	r3, [pc, #444]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a6e      	ldr	r2, [pc, #440]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80037d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	4b6c      	ldr	r3, [pc, #432]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a6b      	ldr	r2, [pc, #428]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80037de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d013      	beq.n	8003814 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fe fb24 	bl	8001e38 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037f4:	f7fe fb20 	bl	8001e38 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e21f      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	4b61      	ldr	r3, [pc, #388]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCC_OscConfig+0xdc>
 8003812:	e014      	b.n	800383e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fe fb10 	bl	8001e38 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800381c:	f7fe fb0c 	bl	8001e38 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	; 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e20b      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382e:	4b57      	ldr	r3, [pc, #348]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x104>
 800383a:	e000      	b.n	800383e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d06f      	beq.n	800392a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800384a:	4b50      	ldr	r3, [pc, #320]	; (800398c <HAL_RCC_OscConfig+0x274>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
 8003852:	2b00      	cmp	r3, #0
 8003854:	d017      	beq.n	8003886 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003856:	4b4d      	ldr	r3, [pc, #308]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800385e:	2b08      	cmp	r3, #8
 8003860:	d105      	bne.n	800386e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003862:	4b4a      	ldr	r3, [pc, #296]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00b      	beq.n	8003886 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800386e:	4b47      	ldr	r3, [pc, #284]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003876:	2b0c      	cmp	r3, #12
 8003878:	d11c      	bne.n	80038b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800387a:	4b44      	ldr	r3, [pc, #272]	; (800398c <HAL_RCC_OscConfig+0x274>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d116      	bne.n	80038b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003886:	4b41      	ldr	r3, [pc, #260]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_RCC_OscConfig+0x186>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d001      	beq.n	800389e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e1d3      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389e:	4b3b      	ldr	r3, [pc, #236]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4937      	ldr	r1, [pc, #220]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b2:	e03a      	b.n	800392a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d020      	beq.n	80038fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038bc:	4b34      	ldr	r3, [pc, #208]	; (8003990 <HAL_RCC_OscConfig+0x278>)
 80038be:	2201      	movs	r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c2:	f7fe fab9 	bl	8001e38 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ca:	f7fe fab5 	bl	8001e38 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e1b4      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038dc:	4b2b      	ldr	r3, [pc, #172]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0f0      	beq.n	80038ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e8:	4b28      	ldr	r3, [pc, #160]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	4925      	ldr	r1, [pc, #148]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	600b      	str	r3, [r1, #0]
 80038fc:	e015      	b.n	800392a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038fe:	4b24      	ldr	r3, [pc, #144]	; (8003990 <HAL_RCC_OscConfig+0x278>)
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003904:	f7fe fa98 	bl	8001e38 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800390c:	f7fe fa94 	bl	8001e38 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e193      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391e:	4b1b      	ldr	r3, [pc, #108]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d036      	beq.n	80039a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d016      	beq.n	800396c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800393e:	4b15      	ldr	r3, [pc, #84]	; (8003994 <HAL_RCC_OscConfig+0x27c>)
 8003940:	2201      	movs	r2, #1
 8003942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003944:	f7fe fa78 	bl	8001e38 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800394c:	f7fe fa74 	bl	8001e38 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e173      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395e:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCC_OscConfig+0x234>
 800396a:	e01b      	b.n	80039a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800396c:	4b09      	ldr	r3, [pc, #36]	; (8003994 <HAL_RCC_OscConfig+0x27c>)
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003972:	f7fe fa61 	bl	8001e38 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003978:	e00e      	b.n	8003998 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800397a:	f7fe fa5d 	bl	8001e38 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d907      	bls.n	8003998 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e15c      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
 800398c:	40023800 	.word	0x40023800
 8003990:	42470000 	.word	0x42470000
 8003994:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003998:	4b8a      	ldr	r3, [pc, #552]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 800399a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1ea      	bne.n	800397a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 8097 	beq.w	8003ae0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b2:	2300      	movs	r3, #0
 80039b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039b6:	4b83      	ldr	r3, [pc, #524]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10f      	bne.n	80039e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	4b7f      	ldr	r3, [pc, #508]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	4a7e      	ldr	r2, [pc, #504]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 80039cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d0:	6413      	str	r3, [r2, #64]	; 0x40
 80039d2:	4b7c      	ldr	r3, [pc, #496]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039de:	2301      	movs	r3, #1
 80039e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e2:	4b79      	ldr	r3, [pc, #484]	; (8003bc8 <HAL_RCC_OscConfig+0x4b0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d118      	bne.n	8003a20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ee:	4b76      	ldr	r3, [pc, #472]	; (8003bc8 <HAL_RCC_OscConfig+0x4b0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a75      	ldr	r2, [pc, #468]	; (8003bc8 <HAL_RCC_OscConfig+0x4b0>)
 80039f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fa:	f7fe fa1d 	bl	8001e38 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a02:	f7fe fa19 	bl	8001e38 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e118      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a14:	4b6c      	ldr	r3, [pc, #432]	; (8003bc8 <HAL_RCC_OscConfig+0x4b0>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d106      	bne.n	8003a36 <HAL_RCC_OscConfig+0x31e>
 8003a28:	4b66      	ldr	r3, [pc, #408]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2c:	4a65      	ldr	r2, [pc, #404]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	6713      	str	r3, [r2, #112]	; 0x70
 8003a34:	e01c      	b.n	8003a70 <HAL_RCC_OscConfig+0x358>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b05      	cmp	r3, #5
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCC_OscConfig+0x340>
 8003a3e:	4b61      	ldr	r3, [pc, #388]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a42:	4a60      	ldr	r2, [pc, #384]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a44:	f043 0304 	orr.w	r3, r3, #4
 8003a48:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4a:	4b5e      	ldr	r3, [pc, #376]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	4a5d      	ldr	r2, [pc, #372]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	6713      	str	r3, [r2, #112]	; 0x70
 8003a56:	e00b      	b.n	8003a70 <HAL_RCC_OscConfig+0x358>
 8003a58:	4b5a      	ldr	r3, [pc, #360]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5c:	4a59      	ldr	r2, [pc, #356]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a5e:	f023 0301 	bic.w	r3, r3, #1
 8003a62:	6713      	str	r3, [r2, #112]	; 0x70
 8003a64:	4b57      	ldr	r3, [pc, #348]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a68:	4a56      	ldr	r2, [pc, #344]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a6a:	f023 0304 	bic.w	r3, r3, #4
 8003a6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d015      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a78:	f7fe f9de 	bl	8001e38 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a80:	f7fe f9da 	bl	8001e38 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e0d7      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a96:	4b4b      	ldr	r3, [pc, #300]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0ee      	beq.n	8003a80 <HAL_RCC_OscConfig+0x368>
 8003aa2:	e014      	b.n	8003ace <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa4:	f7fe f9c8 	bl	8001e38 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aaa:	e00a      	b.n	8003ac2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aac:	f7fe f9c4 	bl	8001e38 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e0c1      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac2:	4b40      	ldr	r3, [pc, #256]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1ee      	bne.n	8003aac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ace:	7dfb      	ldrb	r3, [r7, #23]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d105      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad4:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	4a3a      	ldr	r2, [pc, #232]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ade:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 80ad 	beq.w	8003c44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aea:	4b36      	ldr	r3, [pc, #216]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d060      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d145      	bne.n	8003b8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afe:	4b33      	ldr	r3, [pc, #204]	; (8003bcc <HAL_RCC_OscConfig+0x4b4>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fe f998 	bl	8001e38 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b0c:	f7fe f994 	bl	8001e38 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e093      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1e:	4b29      	ldr	r3, [pc, #164]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69da      	ldr	r2, [r3, #28]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	019b      	lsls	r3, r3, #6
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	085b      	lsrs	r3, r3, #1
 8003b42:	3b01      	subs	r3, #1
 8003b44:	041b      	lsls	r3, r3, #16
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	061b      	lsls	r3, r3, #24
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	071b      	lsls	r3, r3, #28
 8003b56:	491b      	ldr	r1, [pc, #108]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <HAL_RCC_OscConfig+0x4b4>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b62:	f7fe f969 	bl	8001e38 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6a:	f7fe f965 	bl	8001e38 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e064      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7c:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x452>
 8003b88:	e05c      	b.n	8003c44 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8a:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <HAL_RCC_OscConfig+0x4b4>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b90:	f7fe f952 	bl	8001e38 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b98:	f7fe f94e 	bl	8001e38 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e04d      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x480>
 8003bb6:	e045      	b.n	8003c44 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d107      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e040      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40007000 	.word	0x40007000
 8003bcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bd0:	4b1f      	ldr	r3, [pc, #124]	; (8003c50 <HAL_RCC_OscConfig+0x538>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d030      	beq.n	8003c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d129      	bne.n	8003c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d122      	bne.n	8003c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c00:	4013      	ands	r3, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d119      	bne.n	8003c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	085b      	lsrs	r3, r3, #1
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d10f      	bne.n	8003c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40023800 	.word	0x40023800

08003c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e041      	b.n	8003cea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fd fe8e 	bl	800199c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	4619      	mov	r1, r3
 8003c92:	4610      	mov	r0, r2
 8003c94:	f000 fbf0 	bl	8004478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e041      	b.n	8003d88 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d106      	bne.n	8003d1e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f839 	bl	8003d90 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2202      	movs	r2, #2
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4610      	mov	r0, r2
 8003d32:	f000 fba1 	bl	8004478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d109      	bne.n	8003dcc <HAL_TIM_OC_Start_IT+0x28>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	bf14      	ite	ne
 8003dc4:	2301      	movne	r3, #1
 8003dc6:	2300      	moveq	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	e022      	b.n	8003e12 <HAL_TIM_OC_Start_IT+0x6e>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d109      	bne.n	8003de6 <HAL_TIM_OC_Start_IT+0x42>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	bf14      	ite	ne
 8003dde:	2301      	movne	r3, #1
 8003de0:	2300      	moveq	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	e015      	b.n	8003e12 <HAL_TIM_OC_Start_IT+0x6e>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d109      	bne.n	8003e00 <HAL_TIM_OC_Start_IT+0x5c>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	e008      	b.n	8003e12 <HAL_TIM_OC_Start_IT+0x6e>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	bf14      	ite	ne
 8003e0c:	2301      	movne	r3, #1
 8003e0e:	2300      	moveq	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e0c7      	b.n	8003faa <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d104      	bne.n	8003e2a <HAL_TIM_OC_Start_IT+0x86>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e28:	e013      	b.n	8003e52 <HAL_TIM_OC_Start_IT+0xae>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d104      	bne.n	8003e3a <HAL_TIM_OC_Start_IT+0x96>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e38:	e00b      	b.n	8003e52 <HAL_TIM_OC_Start_IT+0xae>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d104      	bne.n	8003e4a <HAL_TIM_OC_Start_IT+0xa6>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e48:	e003      	b.n	8003e52 <HAL_TIM_OC_Start_IT+0xae>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b0c      	cmp	r3, #12
 8003e56:	d841      	bhi.n	8003edc <HAL_TIM_OC_Start_IT+0x138>
 8003e58:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <HAL_TIM_OC_Start_IT+0xbc>)
 8003e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5e:	bf00      	nop
 8003e60:	08003e95 	.word	0x08003e95
 8003e64:	08003edd 	.word	0x08003edd
 8003e68:	08003edd 	.word	0x08003edd
 8003e6c:	08003edd 	.word	0x08003edd
 8003e70:	08003ea7 	.word	0x08003ea7
 8003e74:	08003edd 	.word	0x08003edd
 8003e78:	08003edd 	.word	0x08003edd
 8003e7c:	08003edd 	.word	0x08003edd
 8003e80:	08003eb9 	.word	0x08003eb9
 8003e84:	08003edd 	.word	0x08003edd
 8003e88:	08003edd 	.word	0x08003edd
 8003e8c:	08003edd 	.word	0x08003edd
 8003e90:	08003ecb 	.word	0x08003ecb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0202 	orr.w	r2, r2, #2
 8003ea2:	60da      	str	r2, [r3, #12]
      break;
 8003ea4:	e01d      	b.n	8003ee2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0204 	orr.w	r2, r2, #4
 8003eb4:	60da      	str	r2, [r3, #12]
      break;
 8003eb6:	e014      	b.n	8003ee2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0208 	orr.w	r2, r2, #8
 8003ec6:	60da      	str	r2, [r3, #12]
      break;
 8003ec8:	e00b      	b.n	8003ee2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0210 	orr.w	r2, r2, #16
 8003ed8:	60da      	str	r2, [r3, #12]
      break;
 8003eda:	e002      	b.n	8003ee2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee0:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d15f      	bne.n	8003fa8 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2201      	movs	r2, #1
 8003eee:	6839      	ldr	r1, [r7, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fdab 	bl	8004a4c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a2e      	ldr	r2, [pc, #184]	; (8003fb4 <HAL_TIM_OC_Start_IT+0x210>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d004      	beq.n	8003f0a <HAL_TIM_OC_Start_IT+0x166>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a2c      	ldr	r2, [pc, #176]	; (8003fb8 <HAL_TIM_OC_Start_IT+0x214>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d101      	bne.n	8003f0e <HAL_TIM_OC_Start_IT+0x16a>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <HAL_TIM_OC_Start_IT+0x16c>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d007      	beq.n	8003f24 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f22:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a22      	ldr	r2, [pc, #136]	; (8003fb4 <HAL_TIM_OC_Start_IT+0x210>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d022      	beq.n	8003f74 <HAL_TIM_OC_Start_IT+0x1d0>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d01d      	beq.n	8003f74 <HAL_TIM_OC_Start_IT+0x1d0>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1f      	ldr	r2, [pc, #124]	; (8003fbc <HAL_TIM_OC_Start_IT+0x218>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d018      	beq.n	8003f74 <HAL_TIM_OC_Start_IT+0x1d0>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1e      	ldr	r2, [pc, #120]	; (8003fc0 <HAL_TIM_OC_Start_IT+0x21c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d013      	beq.n	8003f74 <HAL_TIM_OC_Start_IT+0x1d0>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1c      	ldr	r2, [pc, #112]	; (8003fc4 <HAL_TIM_OC_Start_IT+0x220>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00e      	beq.n	8003f74 <HAL_TIM_OC_Start_IT+0x1d0>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a17      	ldr	r2, [pc, #92]	; (8003fb8 <HAL_TIM_OC_Start_IT+0x214>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d009      	beq.n	8003f74 <HAL_TIM_OC_Start_IT+0x1d0>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a18      	ldr	r2, [pc, #96]	; (8003fc8 <HAL_TIM_OC_Start_IT+0x224>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d004      	beq.n	8003f74 <HAL_TIM_OC_Start_IT+0x1d0>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a17      	ldr	r2, [pc, #92]	; (8003fcc <HAL_TIM_OC_Start_IT+0x228>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d111      	bne.n	8003f98 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b06      	cmp	r3, #6
 8003f84:	d010      	beq.n	8003fa8 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0201 	orr.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f96:	e007      	b.n	8003fa8 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40010000 	.word	0x40010000
 8003fb8:	40010400 	.word	0x40010400
 8003fbc:	40000400 	.word	0x40000400
 8003fc0:	40000800 	.word	0x40000800
 8003fc4:	40000c00 	.word	0x40000c00
 8003fc8:	40014000 	.word	0x40014000
 8003fcc:	40001800 	.word	0x40001800

08003fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d122      	bne.n	800402c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d11b      	bne.n	800402c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0202 	mvn.w	r2, #2
 8003ffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fa11 	bl	800443a <HAL_TIM_IC_CaptureCallback>
 8004018:	e005      	b.n	8004026 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fc fcb8 	bl	8000990 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fa14 	bl	800444e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	2b04      	cmp	r3, #4
 8004038:	d122      	bne.n	8004080 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b04      	cmp	r3, #4
 8004046:	d11b      	bne.n	8004080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0204 	mvn.w	r2, #4
 8004050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2202      	movs	r2, #2
 8004056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f9e7 	bl	800443a <HAL_TIM_IC_CaptureCallback>
 800406c:	e005      	b.n	800407a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fc fc8e 	bl	8000990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f9ea 	bl	800444e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b08      	cmp	r3, #8
 800408c:	d122      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b08      	cmp	r3, #8
 800409a:	d11b      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f06f 0208 	mvn.w	r2, #8
 80040a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2204      	movs	r2, #4
 80040aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f9bd 	bl	800443a <HAL_TIM_IC_CaptureCallback>
 80040c0:	e005      	b.n	80040ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fc fc64 	bl	8000990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f9c0 	bl	800444e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0310 	and.w	r3, r3, #16
 80040de:	2b10      	cmp	r3, #16
 80040e0:	d122      	bne.n	8004128 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b10      	cmp	r3, #16
 80040ee:	d11b      	bne.n	8004128 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0210 	mvn.w	r2, #16
 80040f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2208      	movs	r2, #8
 80040fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f993 	bl	800443a <HAL_TIM_IC_CaptureCallback>
 8004114:	e005      	b.n	8004122 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fc fc3a 	bl	8000990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f996 	bl	800444e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b01      	cmp	r3, #1
 8004134:	d10e      	bne.n	8004154 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b01      	cmp	r3, #1
 8004142:	d107      	bne.n	8004154 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0201 	mvn.w	r2, #1
 800414c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f969 	bl	8004426 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415e:	2b80      	cmp	r3, #128	; 0x80
 8004160:	d10e      	bne.n	8004180 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416c:	2b80      	cmp	r3, #128	; 0x80
 800416e:	d107      	bne.n	8004180 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fd12 	bl	8004ba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418a:	2b40      	cmp	r3, #64	; 0x40
 800418c:	d10e      	bne.n	80041ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004198:	2b40      	cmp	r3, #64	; 0x40
 800419a:	d107      	bne.n	80041ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f95b 	bl	8004462 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b20      	cmp	r3, #32
 80041b8:	d10e      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0320 	and.w	r3, r3, #32
 80041c4:	2b20      	cmp	r3, #32
 80041c6:	d107      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0220 	mvn.w	r2, #32
 80041d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fcdc 	bl	8004b90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041d8:	bf00      	nop
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d101      	bne.n	80041fe <HAL_TIM_OC_ConfigChannel+0x1e>
 80041fa:	2302      	movs	r3, #2
 80041fc:	e048      	b.n	8004290 <HAL_TIM_OC_ConfigChannel+0xb0>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b0c      	cmp	r3, #12
 800420a:	d839      	bhi.n	8004280 <HAL_TIM_OC_ConfigChannel+0xa0>
 800420c:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <HAL_TIM_OC_ConfigChannel+0x34>)
 800420e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004212:	bf00      	nop
 8004214:	08004249 	.word	0x08004249
 8004218:	08004281 	.word	0x08004281
 800421c:	08004281 	.word	0x08004281
 8004220:	08004281 	.word	0x08004281
 8004224:	08004257 	.word	0x08004257
 8004228:	08004281 	.word	0x08004281
 800422c:	08004281 	.word	0x08004281
 8004230:	08004281 	.word	0x08004281
 8004234:	08004265 	.word	0x08004265
 8004238:	08004281 	.word	0x08004281
 800423c:	08004281 	.word	0x08004281
 8004240:	08004281 	.word	0x08004281
 8004244:	08004273 	.word	0x08004273
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68b9      	ldr	r1, [r7, #8]
 800424e:	4618      	mov	r0, r3
 8004250:	f000 f9b2 	bl	80045b8 <TIM_OC1_SetConfig>
      break;
 8004254:	e017      	b.n	8004286 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fa1b 	bl	8004698 <TIM_OC2_SetConfig>
      break;
 8004262:	e010      	b.n	8004286 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fa8a 	bl	8004784 <TIM_OC3_SetConfig>
      break;
 8004270:	e009      	b.n	8004286 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68b9      	ldr	r1, [r7, #8]
 8004278:	4618      	mov	r0, r3
 800427a:	f000 faf7 	bl	800486c <TIM_OC4_SetConfig>
      break;
 800427e:	e002      	b.n	8004286 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	75fb      	strb	r3, [r7, #23]
      break;
 8004284:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800428e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_TIM_ConfigClockSource+0x1c>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e0b4      	b.n	800441e <HAL_TIM_ConfigClockSource+0x186>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ec:	d03e      	beq.n	800436c <HAL_TIM_ConfigClockSource+0xd4>
 80042ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f2:	f200 8087 	bhi.w	8004404 <HAL_TIM_ConfigClockSource+0x16c>
 80042f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fa:	f000 8086 	beq.w	800440a <HAL_TIM_ConfigClockSource+0x172>
 80042fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004302:	d87f      	bhi.n	8004404 <HAL_TIM_ConfigClockSource+0x16c>
 8004304:	2b70      	cmp	r3, #112	; 0x70
 8004306:	d01a      	beq.n	800433e <HAL_TIM_ConfigClockSource+0xa6>
 8004308:	2b70      	cmp	r3, #112	; 0x70
 800430a:	d87b      	bhi.n	8004404 <HAL_TIM_ConfigClockSource+0x16c>
 800430c:	2b60      	cmp	r3, #96	; 0x60
 800430e:	d050      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0x11a>
 8004310:	2b60      	cmp	r3, #96	; 0x60
 8004312:	d877      	bhi.n	8004404 <HAL_TIM_ConfigClockSource+0x16c>
 8004314:	2b50      	cmp	r3, #80	; 0x50
 8004316:	d03c      	beq.n	8004392 <HAL_TIM_ConfigClockSource+0xfa>
 8004318:	2b50      	cmp	r3, #80	; 0x50
 800431a:	d873      	bhi.n	8004404 <HAL_TIM_ConfigClockSource+0x16c>
 800431c:	2b40      	cmp	r3, #64	; 0x40
 800431e:	d058      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x13a>
 8004320:	2b40      	cmp	r3, #64	; 0x40
 8004322:	d86f      	bhi.n	8004404 <HAL_TIM_ConfigClockSource+0x16c>
 8004324:	2b30      	cmp	r3, #48	; 0x30
 8004326:	d064      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004328:	2b30      	cmp	r3, #48	; 0x30
 800432a:	d86b      	bhi.n	8004404 <HAL_TIM_ConfigClockSource+0x16c>
 800432c:	2b20      	cmp	r3, #32
 800432e:	d060      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004330:	2b20      	cmp	r3, #32
 8004332:	d867      	bhi.n	8004404 <HAL_TIM_ConfigClockSource+0x16c>
 8004334:	2b00      	cmp	r3, #0
 8004336:	d05c      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004338:	2b10      	cmp	r3, #16
 800433a:	d05a      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x15a>
 800433c:	e062      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	6899      	ldr	r1, [r3, #8]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f000 fb5d 	bl	8004a0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004360:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	609a      	str	r2, [r3, #8]
      break;
 800436a:	e04f      	b.n	800440c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6818      	ldr	r0, [r3, #0]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	6899      	ldr	r1, [r3, #8]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f000 fb46 	bl	8004a0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800438e:	609a      	str	r2, [r3, #8]
      break;
 8004390:	e03c      	b.n	800440c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6859      	ldr	r1, [r3, #4]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	461a      	mov	r2, r3
 80043a0:	f000 faba 	bl	8004918 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2150      	movs	r1, #80	; 0x50
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fb13 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 80043b0:	e02c      	b.n	800440c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6859      	ldr	r1, [r3, #4]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	461a      	mov	r2, r3
 80043c0:	f000 fad9 	bl	8004976 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2160      	movs	r1, #96	; 0x60
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fb03 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 80043d0:	e01c      	b.n	800440c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6859      	ldr	r1, [r3, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	461a      	mov	r2, r3
 80043e0:	f000 fa9a 	bl	8004918 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2140      	movs	r1, #64	; 0x40
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 faf3 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 80043f0:	e00c      	b.n	800440c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4619      	mov	r1, r3
 80043fc:	4610      	mov	r0, r2
 80043fe:	f000 faea 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 8004402:	e003      	b.n	800440c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
      break;
 8004408:	e000      	b.n	800440c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800440a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800441c:	7bfb      	ldrb	r3, [r7, #15]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
	...

08004478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a40      	ldr	r2, [pc, #256]	; (800458c <TIM_Base_SetConfig+0x114>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d013      	beq.n	80044b8 <TIM_Base_SetConfig+0x40>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004496:	d00f      	beq.n	80044b8 <TIM_Base_SetConfig+0x40>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a3d      	ldr	r2, [pc, #244]	; (8004590 <TIM_Base_SetConfig+0x118>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00b      	beq.n	80044b8 <TIM_Base_SetConfig+0x40>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a3c      	ldr	r2, [pc, #240]	; (8004594 <TIM_Base_SetConfig+0x11c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d007      	beq.n	80044b8 <TIM_Base_SetConfig+0x40>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a3b      	ldr	r2, [pc, #236]	; (8004598 <TIM_Base_SetConfig+0x120>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d003      	beq.n	80044b8 <TIM_Base_SetConfig+0x40>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a3a      	ldr	r2, [pc, #232]	; (800459c <TIM_Base_SetConfig+0x124>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d108      	bne.n	80044ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a2f      	ldr	r2, [pc, #188]	; (800458c <TIM_Base_SetConfig+0x114>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d02b      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d8:	d027      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a2c      	ldr	r2, [pc, #176]	; (8004590 <TIM_Base_SetConfig+0x118>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d023      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a2b      	ldr	r2, [pc, #172]	; (8004594 <TIM_Base_SetConfig+0x11c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d01f      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a2a      	ldr	r2, [pc, #168]	; (8004598 <TIM_Base_SetConfig+0x120>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01b      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a29      	ldr	r2, [pc, #164]	; (800459c <TIM_Base_SetConfig+0x124>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d017      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a28      	ldr	r2, [pc, #160]	; (80045a0 <TIM_Base_SetConfig+0x128>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d013      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a27      	ldr	r2, [pc, #156]	; (80045a4 <TIM_Base_SetConfig+0x12c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d00f      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a26      	ldr	r2, [pc, #152]	; (80045a8 <TIM_Base_SetConfig+0x130>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00b      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a25      	ldr	r2, [pc, #148]	; (80045ac <TIM_Base_SetConfig+0x134>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d007      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a24      	ldr	r2, [pc, #144]	; (80045b0 <TIM_Base_SetConfig+0x138>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d003      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a23      	ldr	r2, [pc, #140]	; (80045b4 <TIM_Base_SetConfig+0x13c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d108      	bne.n	800453c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4313      	orrs	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a0a      	ldr	r2, [pc, #40]	; (800458c <TIM_Base_SetConfig+0x114>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d003      	beq.n	8004570 <TIM_Base_SetConfig+0xf8>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a0c      	ldr	r2, [pc, #48]	; (800459c <TIM_Base_SetConfig+0x124>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d103      	bne.n	8004578 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	691a      	ldr	r2, [r3, #16]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	615a      	str	r2, [r3, #20]
}
 800457e:	bf00      	nop
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40010000 	.word	0x40010000
 8004590:	40000400 	.word	0x40000400
 8004594:	40000800 	.word	0x40000800
 8004598:	40000c00 	.word	0x40000c00
 800459c:	40010400 	.word	0x40010400
 80045a0:	40014000 	.word	0x40014000
 80045a4:	40014400 	.word	0x40014400
 80045a8:	40014800 	.word	0x40014800
 80045ac:	40001800 	.word	0x40001800
 80045b0:	40001c00 	.word	0x40001c00
 80045b4:	40002000 	.word	0x40002000

080045b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f023 0201 	bic.w	r2, r3, #1
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0303 	bic.w	r3, r3, #3
 80045ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f023 0302 	bic.w	r3, r3, #2
 8004600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a20      	ldr	r2, [pc, #128]	; (8004690 <TIM_OC1_SetConfig+0xd8>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d003      	beq.n	800461c <TIM_OC1_SetConfig+0x64>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a1f      	ldr	r2, [pc, #124]	; (8004694 <TIM_OC1_SetConfig+0xdc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d10c      	bne.n	8004636 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f023 0308 	bic.w	r3, r3, #8
 8004622:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f023 0304 	bic.w	r3, r3, #4
 8004634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a15      	ldr	r2, [pc, #84]	; (8004690 <TIM_OC1_SetConfig+0xd8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d003      	beq.n	8004646 <TIM_OC1_SetConfig+0x8e>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a14      	ldr	r2, [pc, #80]	; (8004694 <TIM_OC1_SetConfig+0xdc>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d111      	bne.n	800466a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800464c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	621a      	str	r2, [r3, #32]
}
 8004684:	bf00      	nop
 8004686:	371c      	adds	r7, #28
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	40010000 	.word	0x40010000
 8004694:	40010400 	.word	0x40010400

08004698 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	f023 0210 	bic.w	r2, r3, #16
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	021b      	lsls	r3, r3, #8
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f023 0320 	bic.w	r3, r3, #32
 80046e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a22      	ldr	r2, [pc, #136]	; (800477c <TIM_OC2_SetConfig+0xe4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d003      	beq.n	8004700 <TIM_OC2_SetConfig+0x68>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a21      	ldr	r2, [pc, #132]	; (8004780 <TIM_OC2_SetConfig+0xe8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d10d      	bne.n	800471c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800471a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a17      	ldr	r2, [pc, #92]	; (800477c <TIM_OC2_SetConfig+0xe4>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d003      	beq.n	800472c <TIM_OC2_SetConfig+0x94>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a16      	ldr	r2, [pc, #88]	; (8004780 <TIM_OC2_SetConfig+0xe8>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d113      	bne.n	8004754 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004732:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800473a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	621a      	str	r2, [r3, #32]
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40010000 	.word	0x40010000
 8004780:	40010400 	.word	0x40010400

08004784 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0303 	bic.w	r3, r3, #3
 80047ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	021b      	lsls	r3, r3, #8
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a21      	ldr	r2, [pc, #132]	; (8004864 <TIM_OC3_SetConfig+0xe0>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d003      	beq.n	80047ea <TIM_OC3_SetConfig+0x66>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a20      	ldr	r2, [pc, #128]	; (8004868 <TIM_OC3_SetConfig+0xe4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d10d      	bne.n	8004806 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a16      	ldr	r2, [pc, #88]	; (8004864 <TIM_OC3_SetConfig+0xe0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d003      	beq.n	8004816 <TIM_OC3_SetConfig+0x92>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a15      	ldr	r2, [pc, #84]	; (8004868 <TIM_OC3_SetConfig+0xe4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d113      	bne.n	800483e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800481c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	4313      	orrs	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	621a      	str	r2, [r3, #32]
}
 8004858:	bf00      	nop
 800485a:	371c      	adds	r7, #28
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	40010000 	.word	0x40010000
 8004868:	40010400 	.word	0x40010400

0800486c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800489a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	031b      	lsls	r3, r3, #12
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a12      	ldr	r2, [pc, #72]	; (8004910 <TIM_OC4_SetConfig+0xa4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d003      	beq.n	80048d4 <TIM_OC4_SetConfig+0x68>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a11      	ldr	r2, [pc, #68]	; (8004914 <TIM_OC4_SetConfig+0xa8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d109      	bne.n	80048e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	019b      	lsls	r3, r3, #6
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	621a      	str	r2, [r3, #32]
}
 8004902:	bf00      	nop
 8004904:	371c      	adds	r7, #28
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40010000 	.word	0x40010000
 8004914:	40010400 	.word	0x40010400

08004918 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	f023 0201 	bic.w	r2, r3, #1
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004942:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f023 030a 	bic.w	r3, r3, #10
 8004954:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	4313      	orrs	r3, r2
 800495c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	621a      	str	r2, [r3, #32]
}
 800496a:	bf00      	nop
 800496c:	371c      	adds	r7, #28
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004976:	b480      	push	{r7}
 8004978:	b087      	sub	sp, #28
 800497a:	af00      	add	r7, sp, #0
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	f023 0210 	bic.w	r2, r3, #16
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	031b      	lsls	r3, r3, #12
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	621a      	str	r2, [r3, #32]
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b085      	sub	sp, #20
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f043 0307 	orr.w	r3, r3, #7
 80049f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	609a      	str	r2, [r3, #8]
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	021a      	lsls	r2, r3, #8
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	609a      	str	r2, [r3, #8]
}
 8004a40:	bf00      	nop
 8004a42:	371c      	adds	r7, #28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f003 031f 	and.w	r3, r3, #31
 8004a5e:	2201      	movs	r2, #1
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a1a      	ldr	r2, [r3, #32]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	401a      	ands	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6a1a      	ldr	r2, [r3, #32]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	fa01 f303 	lsl.w	r3, r1, r3
 8004a84:	431a      	orrs	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	621a      	str	r2, [r3, #32]
}
 8004a8a:	bf00      	nop
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e05a      	b.n	8004b66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d022      	beq.n	8004b3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afc:	d01d      	beq.n	8004b3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a1d      	ldr	r2, [pc, #116]	; (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d018      	beq.n	8004b3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a1b      	ldr	r2, [pc, #108]	; (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d013      	beq.n	8004b3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a1a      	ldr	r2, [pc, #104]	; (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d00e      	beq.n	8004b3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a18      	ldr	r2, [pc, #96]	; (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d009      	beq.n	8004b3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a17      	ldr	r2, [pc, #92]	; (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d004      	beq.n	8004b3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d10c      	bne.n	8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40010000 	.word	0x40010000
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40000800 	.word	0x40000800
 8004b80:	40000c00 	.word	0x40000c00
 8004b84:	40010400 	.word	0x40010400
 8004b88:	40014000 	.word	0x40014000
 8004b8c:	40001800 	.word	0x40001800

08004b90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e03f      	b.n	8004c4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d106      	bne.n	8004be4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7fc ff04 	bl	80019ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2224      	movs	r2, #36	; 0x24
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 ff83 	bl	8005b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	695a      	ldr	r2, [r3, #20]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e047      	b.n	8004cf4 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d106      	bne.n	8004c7e <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7fc feb7 	bl	80019ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2224      	movs	r2, #36	; 0x24
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c94:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 ff36 	bl	8005b08 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004caa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695a      	ldr	r2, [r3, #20]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004cba:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695a      	ldr	r2, [r3, #20]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0208 	orr.w	r2, r2, #8
 8004cca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cda:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08a      	sub	sp, #40	; 0x28
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	d17c      	bne.n	8004e16 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <HAL_UART_Transmit+0x2c>
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e075      	b.n	8004e18 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <HAL_UART_Transmit+0x3e>
 8004d36:	2302      	movs	r3, #2
 8004d38:	e06e      	b.n	8004e18 <HAL_UART_Transmit+0x11c>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2221      	movs	r2, #33	; 0x21
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d50:	f7fd f872 	bl	8001e38 <HAL_GetTick>
 8004d54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	88fa      	ldrh	r2, [r7, #6]
 8004d5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	88fa      	ldrh	r2, [r7, #6]
 8004d60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6a:	d108      	bne.n	8004d7e <HAL_UART_Transmit+0x82>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d104      	bne.n	8004d7e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d74:	2300      	movs	r3, #0
 8004d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	61bb      	str	r3, [r7, #24]
 8004d7c:	e003      	b.n	8004d86 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d8e:	e02a      	b.n	8004de6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	2200      	movs	r2, #0
 8004d98:	2180      	movs	r1, #128	; 0x80
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 fc6e 	bl	800567c <UART_WaitOnFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e036      	b.n	8004e18 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10b      	bne.n	8004dc8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dbe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	3302      	adds	r3, #2
 8004dc4:	61bb      	str	r3, [r7, #24]
 8004dc6:	e007      	b.n	8004dd8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	781a      	ldrb	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1cf      	bne.n	8004d90 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	2200      	movs	r2, #0
 8004df8:	2140      	movs	r1, #64	; 0x40
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 fc3e 	bl	800567c <UART_WaitOnFlagUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e006      	b.n	8004e18 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	e000      	b.n	8004e18 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e16:	2302      	movs	r3, #2
  }
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3720      	adds	r7, #32
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08a      	sub	sp, #40	; 0x28
 8004e24:	af02      	add	r7, sp, #8
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	f040 808c 	bne.w	8004f5a <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <HAL_UART_Receive+0x2e>
 8004e48:	88fb      	ldrh	r3, [r7, #6]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e084      	b.n	8004f5c <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_UART_Receive+0x40>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e07d      	b.n	8004f5c <HAL_UART_Receive+0x13c>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2222      	movs	r2, #34	; 0x22
 8004e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e7c:	f7fc ffdc 	bl	8001e38 <HAL_GetTick>
 8004e80:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	88fa      	ldrh	r2, [r7, #6]
 8004e86:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	88fa      	ldrh	r2, [r7, #6]
 8004e8c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e96:	d108      	bne.n	8004eaa <HAL_UART_Receive+0x8a>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d104      	bne.n	8004eaa <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	61bb      	str	r3, [r7, #24]
 8004ea8:	e003      	b.n	8004eb2 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004eba:	e043      	b.n	8004f44 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2120      	movs	r1, #32
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 fbd8 	bl	800567c <UART_WaitOnFlagUntilTimeout>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e042      	b.n	8004f5c <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10c      	bne.n	8004ef6 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	3302      	adds	r3, #2
 8004ef2:	61bb      	str	r3, [r7, #24]
 8004ef4:	e01f      	b.n	8004f36 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004efe:	d007      	beq.n	8004f10 <HAL_UART_Receive+0xf0>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10a      	bne.n	8004f1e <HAL_UART_Receive+0xfe>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d106      	bne.n	8004f1e <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	701a      	strb	r2, [r3, #0]
 8004f1c:	e008      	b.n	8004f30 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	3301      	adds	r3, #1
 8004f34:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1b6      	bne.n	8004ebc <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	e000      	b.n	8004f5c <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004f5a:	2302      	movs	r3, #2
  }
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3720      	adds	r7, #32
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d130      	bne.n	8004fe0 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <HAL_UART_Transmit_IT+0x26>
 8004f84:	88fb      	ldrh	r3, [r7, #6]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e029      	b.n	8004fe2 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_UART_Transmit_IT+0x38>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e022      	b.n	8004fe2 <HAL_UART_Transmit_IT+0x7e>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	88fa      	ldrh	r2, [r7, #6]
 8004fae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	88fa      	ldrh	r2, [r7, #6]
 8004fb4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2221      	movs	r2, #33	; 0x21
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fda:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	e000      	b.n	8004fe2 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004fe0:	2302      	movs	r3, #2
  }
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b084      	sub	sp, #16
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	60f8      	str	r0, [r7, #12]
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b20      	cmp	r3, #32
 8005006:	d11d      	bne.n	8005044 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <HAL_UART_Receive_IT+0x26>
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e016      	b.n	8005046 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_UART_Receive_IT+0x38>
 8005022:	2302      	movs	r3, #2
 8005024:	e00f      	b.n	8005046 <HAL_UART_Receive_IT+0x58>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005034:	88fb      	ldrh	r3, [r7, #6]
 8005036:	461a      	mov	r2, r3
 8005038:	68b9      	ldr	r1, [r7, #8]
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 fb8c 	bl	8005758 <UART_Start_Receive_IT>
 8005040:	4603      	mov	r3, r0
 8005042:	e000      	b.n	8005046 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005044:	2302      	movs	r3, #2
  }
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b0ba      	sub	sp, #232	; 0xe8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005076:	2300      	movs	r3, #0
 8005078:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800507c:	2300      	movs	r3, #0
 800507e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800508e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10f      	bne.n	80050b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d009      	beq.n	80050b6 <HAL_UART_IRQHandler+0x66>
 80050a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fc6f 	bl	8005992 <UART_Receive_IT>
      return;
 80050b4:	e256      	b.n	8005564 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80050b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 80de 	beq.w	800527c <HAL_UART_IRQHandler+0x22c>
 80050c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d106      	bne.n	80050da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80d1 	beq.w	800527c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00b      	beq.n	80050fe <HAL_UART_IRQHandler+0xae>
 80050e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	f043 0201 	orr.w	r2, r3, #1
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005102:	f003 0304 	and.w	r3, r3, #4
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00b      	beq.n	8005122 <HAL_UART_IRQHandler+0xd2>
 800510a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f043 0202 	orr.w	r2, r3, #2
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <HAL_UART_IRQHandler+0xf6>
 800512e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	f043 0204 	orr.w	r2, r3, #4
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b00      	cmp	r3, #0
 8005150:	d011      	beq.n	8005176 <HAL_UART_IRQHandler+0x126>
 8005152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005156:	f003 0320 	and.w	r3, r3, #32
 800515a:	2b00      	cmp	r3, #0
 800515c:	d105      	bne.n	800516a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800515e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d005      	beq.n	8005176 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	f043 0208 	orr.w	r2, r3, #8
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 81ed 	beq.w	800555a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	2b00      	cmp	r3, #0
 800518a:	d008      	beq.n	800519e <HAL_UART_IRQHandler+0x14e>
 800518c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fbfa 	bl	8005992 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a8:	2b40      	cmp	r3, #64	; 0x40
 80051aa:	bf0c      	ite	eq
 80051ac:	2301      	moveq	r3, #1
 80051ae:	2300      	movne	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d103      	bne.n	80051ca <HAL_UART_IRQHandler+0x17a>
 80051c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d04f      	beq.n	800526a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fb02 	bl	80057d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051da:	2b40      	cmp	r3, #64	; 0x40
 80051dc:	d141      	bne.n	8005262 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3314      	adds	r3, #20
 80051e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051ec:	e853 3f00 	ldrex	r3, [r3]
 80051f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3314      	adds	r3, #20
 8005206:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800520a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800520e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005216:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800521a:	e841 2300 	strex	r3, r2, [r1]
 800521e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1d9      	bne.n	80051de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	2b00      	cmp	r3, #0
 8005230:	d013      	beq.n	800525a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005236:	4a7d      	ldr	r2, [pc, #500]	; (800542c <HAL_UART_IRQHandler+0x3dc>)
 8005238:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523e:	4618      	mov	r0, r3
 8005240:	f7fd fd1f 	bl	8002c82 <HAL_DMA_Abort_IT>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d016      	beq.n	8005278 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005254:	4610      	mov	r0, r2
 8005256:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005258:	e00e      	b.n	8005278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f990 	bl	8005580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005260:	e00a      	b.n	8005278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f98c 	bl	8005580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005268:	e006      	b.n	8005278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f988 	bl	8005580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005276:	e170      	b.n	800555a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005278:	bf00      	nop
    return;
 800527a:	e16e      	b.n	800555a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005280:	2b01      	cmp	r3, #1
 8005282:	f040 814a 	bne.w	800551a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528a:	f003 0310 	and.w	r3, r3, #16
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 8143 	beq.w	800551a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005298:	f003 0310 	and.w	r3, r3, #16
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 813c 	beq.w	800551a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052a2:	2300      	movs	r3, #0
 80052a4:	60bb      	str	r3, [r7, #8]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60bb      	str	r3, [r7, #8]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c2:	2b40      	cmp	r3, #64	; 0x40
 80052c4:	f040 80b4 	bne.w	8005430 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8140 	beq.w	800555e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052e6:	429a      	cmp	r2, r3
 80052e8:	f080 8139 	bcs.w	800555e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fe:	f000 8088 	beq.w	8005412 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	330c      	adds	r3, #12
 8005308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800531c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	330c      	adds	r3, #12
 800532a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800532e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005336:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800533a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005346:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1d9      	bne.n	8005302 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3314      	adds	r3, #20
 8005354:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800535e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005360:	f023 0301 	bic.w	r3, r3, #1
 8005364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3314      	adds	r3, #20
 800536e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005372:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005376:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005378:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800537a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800537e:	e841 2300 	strex	r3, r2, [r1]
 8005382:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1e1      	bne.n	800534e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3314      	adds	r3, #20
 8005390:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005394:	e853 3f00 	ldrex	r3, [r3]
 8005398:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800539a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800539c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3314      	adds	r3, #20
 80053aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80053ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80053b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80053bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e3      	bne.n	800538a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	330c      	adds	r3, #12
 80053d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053da:	e853 3f00 	ldrex	r3, [r3]
 80053de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053e2:	f023 0310 	bic.w	r3, r3, #16
 80053e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	330c      	adds	r3, #12
 80053f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80053f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80053f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053fc:	e841 2300 	strex	r3, r2, [r1]
 8005400:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e3      	bne.n	80053d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	4618      	mov	r0, r3
 800540e:	f7fd fbc8 	bl	8002ba2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800541a:	b29b      	uxth	r3, r3
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	b29b      	uxth	r3, r3
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f8b6 	bl	8005594 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005428:	e099      	b.n	800555e <HAL_UART_IRQHandler+0x50e>
 800542a:	bf00      	nop
 800542c:	0800589b 	.word	0x0800589b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005438:	b29b      	uxth	r3, r3
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 808b 	beq.w	8005562 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800544c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 8086 	beq.w	8005562 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	330c      	adds	r3, #12
 800545c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005468:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800546c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	330c      	adds	r3, #12
 8005476:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800547a:	647a      	str	r2, [r7, #68]	; 0x44
 800547c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005480:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e3      	bne.n	8005456 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3314      	adds	r3, #20
 8005494:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	623b      	str	r3, [r7, #32]
   return(result);
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	f023 0301 	bic.w	r3, r3, #1
 80054a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3314      	adds	r3, #20
 80054ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054b2:	633a      	str	r2, [r7, #48]	; 0x30
 80054b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e3      	bne.n	800548e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	330c      	adds	r3, #12
 80054da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	e853 3f00 	ldrex	r3, [r3]
 80054e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0310 	bic.w	r3, r3, #16
 80054ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	330c      	adds	r3, #12
 80054f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80054f8:	61fa      	str	r2, [r7, #28]
 80054fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	69b9      	ldr	r1, [r7, #24]
 80054fe:	69fa      	ldr	r2, [r7, #28]
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	617b      	str	r3, [r7, #20]
   return(result);
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e3      	bne.n	80054d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800550c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005510:	4619      	mov	r1, r3
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f83e 	bl	8005594 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005518:	e023      	b.n	8005562 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800551a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800551e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005522:	2b00      	cmp	r3, #0
 8005524:	d009      	beq.n	800553a <HAL_UART_IRQHandler+0x4ea>
 8005526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800552a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f9c5 	bl	80058c2 <UART_Transmit_IT>
    return;
 8005538:	e014      	b.n	8005564 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800553a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800553e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00e      	beq.n	8005564 <HAL_UART_IRQHandler+0x514>
 8005546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800554a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554e:	2b00      	cmp	r3, #0
 8005550:	d008      	beq.n	8005564 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fa05 	bl	8005962 <UART_EndTransmit_IT>
    return;
 8005558:	e004      	b.n	8005564 <HAL_UART_IRQHandler+0x514>
    return;
 800555a:	bf00      	nop
 800555c:	e002      	b.n	8005564 <HAL_UART_IRQHandler+0x514>
      return;
 800555e:	bf00      	nop
 8005560:	e000      	b.n	8005564 <HAL_UART_IRQHandler+0x514>
      return;
 8005562:	bf00      	nop
  }
}
 8005564:	37e8      	adds	r7, #232	; 0xe8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop

0800556c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	460b      	mov	r3, r1
 800559e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d101      	bne.n	80055c6 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 80055c2:	2302      	movs	r3, #2
 80055c4:	e020      	b.n	8005608 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2224      	movs	r2, #36	; 0x24
 80055d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f023 030c 	bic.w	r3, r3, #12
 80055e4:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f043 0308 	orr.w	r3, r3, #8
 80055ec:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800561c:	2300      	movs	r3, #0
 800561e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_HalfDuplex_EnableReceiver+0x1a>
 800562a:	2302      	movs	r3, #2
 800562c:	e020      	b.n	8005670 <HAL_HalfDuplex_EnableReceiver+0x5c>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2224      	movs	r2, #36	; 0x24
 800563a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f023 030c 	bic.w	r3, r3, #12
 800564c:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f043 0304 	orr.w	r3, r3, #4
 8005654:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b090      	sub	sp, #64	; 0x40
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	4613      	mov	r3, r2
 800568a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800568c:	e050      	b.n	8005730 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800568e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005694:	d04c      	beq.n	8005730 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005698:	2b00      	cmp	r3, #0
 800569a:	d007      	beq.n	80056ac <UART_WaitOnFlagUntilTimeout+0x30>
 800569c:	f7fc fbcc 	bl	8001e38 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d241      	bcs.n	8005730 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	330c      	adds	r3, #12
 80056b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	330c      	adds	r3, #12
 80056ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056cc:	637a      	str	r2, [r7, #52]	; 0x34
 80056ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056d4:	e841 2300 	strex	r3, r2, [r1]
 80056d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e5      	bne.n	80056ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3314      	adds	r3, #20
 80056e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	e853 3f00 	ldrex	r3, [r3]
 80056ee:	613b      	str	r3, [r7, #16]
   return(result);
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f023 0301 	bic.w	r3, r3, #1
 80056f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3314      	adds	r3, #20
 80056fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005700:	623a      	str	r2, [r7, #32]
 8005702:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005704:	69f9      	ldr	r1, [r7, #28]
 8005706:	6a3a      	ldr	r2, [r7, #32]
 8005708:	e841 2300 	strex	r3, r2, [r1]
 800570c:	61bb      	str	r3, [r7, #24]
   return(result);
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1e5      	bne.n	80056e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2220      	movs	r2, #32
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2220      	movs	r2, #32
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e00f      	b.n	8005750 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	4013      	ands	r3, r2
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	429a      	cmp	r2, r3
 800573e:	bf0c      	ite	eq
 8005740:	2301      	moveq	r3, #1
 8005742:	2300      	movne	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	461a      	mov	r2, r3
 8005748:	79fb      	ldrb	r3, [r7, #7]
 800574a:	429a      	cmp	r2, r3
 800574c:	d09f      	beq.n	800568e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3740      	adds	r7, #64	; 0x40
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	4613      	mov	r3, r2
 8005764:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	88fa      	ldrh	r2, [r7, #6]
 8005770:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	88fa      	ldrh	r2, [r7, #6]
 8005776:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2222      	movs	r2, #34	; 0x22
 8005782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d007      	beq.n	80057a6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68da      	ldr	r2, [r3, #12]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	695a      	ldr	r2, [r3, #20]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f042 0201 	orr.w	r2, r2, #1
 80057b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f042 0220 	orr.w	r2, r2, #32
 80057c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b095      	sub	sp, #84	; 0x54
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	330c      	adds	r3, #12
 80057e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e6:	e853 3f00 	ldrex	r3, [r3]
 80057ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	330c      	adds	r3, #12
 80057fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057fc:	643a      	str	r2, [r7, #64]	; 0x40
 80057fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005800:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005802:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005804:	e841 2300 	strex	r3, r2, [r1]
 8005808:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800580a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e5      	bne.n	80057dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3314      	adds	r3, #20
 8005816:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	e853 3f00 	ldrex	r3, [r3]
 800581e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	f023 0301 	bic.w	r3, r3, #1
 8005826:	64bb      	str	r3, [r7, #72]	; 0x48
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3314      	adds	r3, #20
 800582e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005830:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005832:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005834:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005838:	e841 2300 	strex	r3, r2, [r1]
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1e5      	bne.n	8005810 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	2b01      	cmp	r3, #1
 800584a:	d119      	bne.n	8005880 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	330c      	adds	r3, #12
 8005852:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	60bb      	str	r3, [r7, #8]
   return(result);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f023 0310 	bic.w	r3, r3, #16
 8005862:	647b      	str	r3, [r7, #68]	; 0x44
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	330c      	adds	r3, #12
 800586a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800586c:	61ba      	str	r2, [r7, #24]
 800586e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	6979      	ldr	r1, [r7, #20]
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	e841 2300 	strex	r3, r2, [r1]
 8005878:	613b      	str	r3, [r7, #16]
   return(result);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e5      	bne.n	800584c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800588e:	bf00      	nop
 8005890:	3754      	adds	r7, #84	; 0x54
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f7ff fe63 	bl	8005580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058ba:	bf00      	nop
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b085      	sub	sp, #20
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b21      	cmp	r3, #33	; 0x21
 80058d4:	d13e      	bne.n	8005954 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058de:	d114      	bne.n	800590a <UART_Transmit_IT+0x48>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d110      	bne.n	800590a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	1c9a      	adds	r2, r3, #2
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	621a      	str	r2, [r3, #32]
 8005908:	e008      	b.n	800591c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	1c59      	adds	r1, r3, #1
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6211      	str	r1, [r2, #32]
 8005914:	781a      	ldrb	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005920:	b29b      	uxth	r3, r3
 8005922:	3b01      	subs	r3, #1
 8005924:	b29b      	uxth	r3, r3
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	4619      	mov	r1, r3
 800592a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10f      	bne.n	8005950 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800593e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800594e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	e000      	b.n	8005956 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005954:	2302      	movs	r3, #2
  }
}
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b082      	sub	sp, #8
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005978:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff fdf2 	bl	800556c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b08c      	sub	sp, #48	; 0x30
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b22      	cmp	r3, #34	; 0x22
 80059a4:	f040 80ab 	bne.w	8005afe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b0:	d117      	bne.n	80059e2 <UART_Receive_IT+0x50>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d113      	bne.n	80059e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	1c9a      	adds	r2, r3, #2
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	629a      	str	r2, [r3, #40]	; 0x28
 80059e0:	e026      	b.n	8005a30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80059e8:	2300      	movs	r3, #0
 80059ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f4:	d007      	beq.n	8005a06 <UART_Receive_IT+0x74>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <UART_Receive_IT+0x82>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	e008      	b.n	8005a26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d15a      	bne.n	8005afa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0220 	bic.w	r2, r2, #32
 8005a52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695a      	ldr	r2, [r3, #20]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0201 	bic.w	r2, r2, #1
 8005a72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d135      	bne.n	8005af0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	330c      	adds	r3, #12
 8005a90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	e853 3f00 	ldrex	r3, [r3]
 8005a98:	613b      	str	r3, [r7, #16]
   return(result);
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f023 0310 	bic.w	r3, r3, #16
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	330c      	adds	r3, #12
 8005aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aaa:	623a      	str	r2, [r7, #32]
 8005aac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aae:	69f9      	ldr	r1, [r7, #28]
 8005ab0:	6a3a      	ldr	r2, [r7, #32]
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e5      	bne.n	8005a8a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0310 	and.w	r3, r3, #16
 8005ac8:	2b10      	cmp	r3, #16
 8005aca:	d10a      	bne.n	8005ae2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7ff fd53 	bl	8005594 <HAL_UARTEx_RxEventCallback>
 8005aee:	e002      	b.n	8005af6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7fb fdf1 	bl	80016d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005af6:	2300      	movs	r3, #0
 8005af8:	e002      	b.n	8005b00 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	e000      	b.n	8005b00 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005afe:	2302      	movs	r3, #2
  }
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3730      	adds	r7, #48	; 0x30
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b0c:	b0c0      	sub	sp, #256	; 0x100
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b24:	68d9      	ldr	r1, [r3, #12]
 8005b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	ea40 0301 	orr.w	r3, r0, r1
 8005b30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b60:	f021 010c 	bic.w	r1, r1, #12
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b82:	6999      	ldr	r1, [r3, #24]
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	ea40 0301 	orr.w	r3, r0, r1
 8005b8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	4b8f      	ldr	r3, [pc, #572]	; (8005dd4 <UART_SetConfig+0x2cc>)
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d005      	beq.n	8005ba8 <UART_SetConfig+0xa0>
 8005b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	4b8d      	ldr	r3, [pc, #564]	; (8005dd8 <UART_SetConfig+0x2d0>)
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d104      	bne.n	8005bb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ba8:	f7fd fb72 	bl	8003290 <HAL_RCC_GetPCLK2Freq>
 8005bac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005bb0:	e003      	b.n	8005bba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bb2:	f7fd fb59 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8005bb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bc4:	f040 810c 	bne.w	8005de0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005bd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005bd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005bda:	4622      	mov	r2, r4
 8005bdc:	462b      	mov	r3, r5
 8005bde:	1891      	adds	r1, r2, r2
 8005be0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005be2:	415b      	adcs	r3, r3
 8005be4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005be6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005bea:	4621      	mov	r1, r4
 8005bec:	eb12 0801 	adds.w	r8, r2, r1
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	eb43 0901 	adc.w	r9, r3, r1
 8005bf6:	f04f 0200 	mov.w	r2, #0
 8005bfa:	f04f 0300 	mov.w	r3, #0
 8005bfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c0a:	4690      	mov	r8, r2
 8005c0c:	4699      	mov	r9, r3
 8005c0e:	4623      	mov	r3, r4
 8005c10:	eb18 0303 	adds.w	r3, r8, r3
 8005c14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c18:	462b      	mov	r3, r5
 8005c1a:	eb49 0303 	adc.w	r3, r9, r3
 8005c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c36:	460b      	mov	r3, r1
 8005c38:	18db      	adds	r3, r3, r3
 8005c3a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	eb42 0303 	adc.w	r3, r2, r3
 8005c42:	657b      	str	r3, [r7, #84]	; 0x54
 8005c44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c4c:	f7fa fb30 	bl	80002b0 <__aeabi_uldivmod>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4b61      	ldr	r3, [pc, #388]	; (8005ddc <UART_SetConfig+0x2d4>)
 8005c56:	fba3 2302 	umull	r2, r3, r3, r2
 8005c5a:	095b      	lsrs	r3, r3, #5
 8005c5c:	011c      	lsls	r4, r3, #4
 8005c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c62:	2200      	movs	r2, #0
 8005c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c70:	4642      	mov	r2, r8
 8005c72:	464b      	mov	r3, r9
 8005c74:	1891      	adds	r1, r2, r2
 8005c76:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c78:	415b      	adcs	r3, r3
 8005c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c80:	4641      	mov	r1, r8
 8005c82:	eb12 0a01 	adds.w	sl, r2, r1
 8005c86:	4649      	mov	r1, r9
 8005c88:	eb43 0b01 	adc.w	fp, r3, r1
 8005c8c:	f04f 0200 	mov.w	r2, #0
 8005c90:	f04f 0300 	mov.w	r3, #0
 8005c94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ca0:	4692      	mov	sl, r2
 8005ca2:	469b      	mov	fp, r3
 8005ca4:	4643      	mov	r3, r8
 8005ca6:	eb1a 0303 	adds.w	r3, sl, r3
 8005caa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cae:	464b      	mov	r3, r9
 8005cb0:	eb4b 0303 	adc.w	r3, fp, r3
 8005cb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cc4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005cc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	18db      	adds	r3, r3, r3
 8005cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	eb42 0303 	adc.w	r3, r2, r3
 8005cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8005cda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005cde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005ce2:	f7fa fae5 	bl	80002b0 <__aeabi_uldivmod>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	4611      	mov	r1, r2
 8005cec:	4b3b      	ldr	r3, [pc, #236]	; (8005ddc <UART_SetConfig+0x2d4>)
 8005cee:	fba3 2301 	umull	r2, r3, r3, r1
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	2264      	movs	r2, #100	; 0x64
 8005cf6:	fb02 f303 	mul.w	r3, r2, r3
 8005cfa:	1acb      	subs	r3, r1, r3
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d02:	4b36      	ldr	r3, [pc, #216]	; (8005ddc <UART_SetConfig+0x2d4>)
 8005d04:	fba3 2302 	umull	r2, r3, r3, r2
 8005d08:	095b      	lsrs	r3, r3, #5
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d10:	441c      	add	r4, r3
 8005d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d16:	2200      	movs	r2, #0
 8005d18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d24:	4642      	mov	r2, r8
 8005d26:	464b      	mov	r3, r9
 8005d28:	1891      	adds	r1, r2, r2
 8005d2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d2c:	415b      	adcs	r3, r3
 8005d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d34:	4641      	mov	r1, r8
 8005d36:	1851      	adds	r1, r2, r1
 8005d38:	6339      	str	r1, [r7, #48]	; 0x30
 8005d3a:	4649      	mov	r1, r9
 8005d3c:	414b      	adcs	r3, r1
 8005d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d40:	f04f 0200 	mov.w	r2, #0
 8005d44:	f04f 0300 	mov.w	r3, #0
 8005d48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d4c:	4659      	mov	r1, fp
 8005d4e:	00cb      	lsls	r3, r1, #3
 8005d50:	4651      	mov	r1, sl
 8005d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d56:	4651      	mov	r1, sl
 8005d58:	00ca      	lsls	r2, r1, #3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4603      	mov	r3, r0
 8005d60:	4642      	mov	r2, r8
 8005d62:	189b      	adds	r3, r3, r2
 8005d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d68:	464b      	mov	r3, r9
 8005d6a:	460a      	mov	r2, r1
 8005d6c:	eb42 0303 	adc.w	r3, r2, r3
 8005d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d88:	460b      	mov	r3, r1
 8005d8a:	18db      	adds	r3, r3, r3
 8005d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d8e:	4613      	mov	r3, r2
 8005d90:	eb42 0303 	adc.w	r3, r2, r3
 8005d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d9e:	f7fa fa87 	bl	80002b0 <__aeabi_uldivmod>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	4b0d      	ldr	r3, [pc, #52]	; (8005ddc <UART_SetConfig+0x2d4>)
 8005da8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dac:	095b      	lsrs	r3, r3, #5
 8005dae:	2164      	movs	r1, #100	; 0x64
 8005db0:	fb01 f303 	mul.w	r3, r1, r3
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	3332      	adds	r3, #50	; 0x32
 8005dba:	4a08      	ldr	r2, [pc, #32]	; (8005ddc <UART_SetConfig+0x2d4>)
 8005dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc0:	095b      	lsrs	r3, r3, #5
 8005dc2:	f003 0207 	and.w	r2, r3, #7
 8005dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4422      	add	r2, r4
 8005dce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005dd0:	e105      	b.n	8005fde <UART_SetConfig+0x4d6>
 8005dd2:	bf00      	nop
 8005dd4:	40011000 	.word	0x40011000
 8005dd8:	40011400 	.word	0x40011400
 8005ddc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005de4:	2200      	movs	r2, #0
 8005de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005dea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005dee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005df2:	4642      	mov	r2, r8
 8005df4:	464b      	mov	r3, r9
 8005df6:	1891      	adds	r1, r2, r2
 8005df8:	6239      	str	r1, [r7, #32]
 8005dfa:	415b      	adcs	r3, r3
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8005dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e02:	4641      	mov	r1, r8
 8005e04:	1854      	adds	r4, r2, r1
 8005e06:	4649      	mov	r1, r9
 8005e08:	eb43 0501 	adc.w	r5, r3, r1
 8005e0c:	f04f 0200 	mov.w	r2, #0
 8005e10:	f04f 0300 	mov.w	r3, #0
 8005e14:	00eb      	lsls	r3, r5, #3
 8005e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e1a:	00e2      	lsls	r2, r4, #3
 8005e1c:	4614      	mov	r4, r2
 8005e1e:	461d      	mov	r5, r3
 8005e20:	4643      	mov	r3, r8
 8005e22:	18e3      	adds	r3, r4, r3
 8005e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e28:	464b      	mov	r3, r9
 8005e2a:	eb45 0303 	adc.w	r3, r5, r3
 8005e2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e42:	f04f 0200 	mov.w	r2, #0
 8005e46:	f04f 0300 	mov.w	r3, #0
 8005e4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e4e:	4629      	mov	r1, r5
 8005e50:	008b      	lsls	r3, r1, #2
 8005e52:	4621      	mov	r1, r4
 8005e54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e58:	4621      	mov	r1, r4
 8005e5a:	008a      	lsls	r2, r1, #2
 8005e5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e60:	f7fa fa26 	bl	80002b0 <__aeabi_uldivmod>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4b60      	ldr	r3, [pc, #384]	; (8005fec <UART_SetConfig+0x4e4>)
 8005e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e6e:	095b      	lsrs	r3, r3, #5
 8005e70:	011c      	lsls	r4, r3, #4
 8005e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e76:	2200      	movs	r2, #0
 8005e78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e84:	4642      	mov	r2, r8
 8005e86:	464b      	mov	r3, r9
 8005e88:	1891      	adds	r1, r2, r2
 8005e8a:	61b9      	str	r1, [r7, #24]
 8005e8c:	415b      	adcs	r3, r3
 8005e8e:	61fb      	str	r3, [r7, #28]
 8005e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e94:	4641      	mov	r1, r8
 8005e96:	1851      	adds	r1, r2, r1
 8005e98:	6139      	str	r1, [r7, #16]
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	414b      	adcs	r3, r1
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	f04f 0200 	mov.w	r2, #0
 8005ea4:	f04f 0300 	mov.w	r3, #0
 8005ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005eac:	4659      	mov	r1, fp
 8005eae:	00cb      	lsls	r3, r1, #3
 8005eb0:	4651      	mov	r1, sl
 8005eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eb6:	4651      	mov	r1, sl
 8005eb8:	00ca      	lsls	r2, r1, #3
 8005eba:	4610      	mov	r0, r2
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	4642      	mov	r2, r8
 8005ec2:	189b      	adds	r3, r3, r2
 8005ec4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ec8:	464b      	mov	r3, r9
 8005eca:	460a      	mov	r2, r1
 8005ecc:	eb42 0303 	adc.w	r3, r2, r3
 8005ed0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ede:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ee0:	f04f 0200 	mov.w	r2, #0
 8005ee4:	f04f 0300 	mov.w	r3, #0
 8005ee8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005eec:	4649      	mov	r1, r9
 8005eee:	008b      	lsls	r3, r1, #2
 8005ef0:	4641      	mov	r1, r8
 8005ef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ef6:	4641      	mov	r1, r8
 8005ef8:	008a      	lsls	r2, r1, #2
 8005efa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005efe:	f7fa f9d7 	bl	80002b0 <__aeabi_uldivmod>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4b39      	ldr	r3, [pc, #228]	; (8005fec <UART_SetConfig+0x4e4>)
 8005f08:	fba3 1302 	umull	r1, r3, r3, r2
 8005f0c:	095b      	lsrs	r3, r3, #5
 8005f0e:	2164      	movs	r1, #100	; 0x64
 8005f10:	fb01 f303 	mul.w	r3, r1, r3
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	3332      	adds	r3, #50	; 0x32
 8005f1a:	4a34      	ldr	r2, [pc, #208]	; (8005fec <UART_SetConfig+0x4e4>)
 8005f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f20:	095b      	lsrs	r3, r3, #5
 8005f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f26:	441c      	add	r4, r3
 8005f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	673b      	str	r3, [r7, #112]	; 0x70
 8005f30:	677a      	str	r2, [r7, #116]	; 0x74
 8005f32:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f36:	4642      	mov	r2, r8
 8005f38:	464b      	mov	r3, r9
 8005f3a:	1891      	adds	r1, r2, r2
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	415b      	adcs	r3, r3
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f46:	4641      	mov	r1, r8
 8005f48:	1851      	adds	r1, r2, r1
 8005f4a:	6039      	str	r1, [r7, #0]
 8005f4c:	4649      	mov	r1, r9
 8005f4e:	414b      	adcs	r3, r1
 8005f50:	607b      	str	r3, [r7, #4]
 8005f52:	f04f 0200 	mov.w	r2, #0
 8005f56:	f04f 0300 	mov.w	r3, #0
 8005f5a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f5e:	4659      	mov	r1, fp
 8005f60:	00cb      	lsls	r3, r1, #3
 8005f62:	4651      	mov	r1, sl
 8005f64:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f68:	4651      	mov	r1, sl
 8005f6a:	00ca      	lsls	r2, r1, #3
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4603      	mov	r3, r0
 8005f72:	4642      	mov	r2, r8
 8005f74:	189b      	adds	r3, r3, r2
 8005f76:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f78:	464b      	mov	r3, r9
 8005f7a:	460a      	mov	r2, r1
 8005f7c:	eb42 0303 	adc.w	r3, r2, r3
 8005f80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	663b      	str	r3, [r7, #96]	; 0x60
 8005f8c:	667a      	str	r2, [r7, #100]	; 0x64
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	f04f 0300 	mov.w	r3, #0
 8005f96:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	008b      	lsls	r3, r1, #2
 8005f9e:	4641      	mov	r1, r8
 8005fa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fa4:	4641      	mov	r1, r8
 8005fa6:	008a      	lsls	r2, r1, #2
 8005fa8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005fac:	f7fa f980 	bl	80002b0 <__aeabi_uldivmod>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4b0d      	ldr	r3, [pc, #52]	; (8005fec <UART_SetConfig+0x4e4>)
 8005fb6:	fba3 1302 	umull	r1, r3, r3, r2
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	2164      	movs	r1, #100	; 0x64
 8005fbe:	fb01 f303 	mul.w	r3, r1, r3
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	3332      	adds	r3, #50	; 0x32
 8005fc8:	4a08      	ldr	r2, [pc, #32]	; (8005fec <UART_SetConfig+0x4e4>)
 8005fca:	fba2 2303 	umull	r2, r3, r2, r3
 8005fce:	095b      	lsrs	r3, r3, #5
 8005fd0:	f003 020f 	and.w	r2, r3, #15
 8005fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4422      	add	r2, r4
 8005fdc:	609a      	str	r2, [r3, #8]
}
 8005fde:	bf00      	nop
 8005fe0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fea:	bf00      	nop
 8005fec:	51eb851f 	.word	0x51eb851f

08005ff0 <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b088      	sub	sp, #32
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	71fb      	strb	r3, [r7, #7]
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	71bb      	strb	r3, [r7, #6]
 8005ffe:	4613      	mov	r3, r2
 8006000:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8006002:	797b      	ldrb	r3, [r7, #5]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d901      	bls.n	800600c <tmc_fillCRC8Table+0x1c>
		return 0;
 8006008:	2300      	movs	r3, #0
 800600a:	e09e      	b.n	800614a <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 800600c:	797a      	ldrb	r2, [r7, #5]
 800600e:	4951      	ldr	r1, [pc, #324]	; (8006154 <tmc_fillCRC8Table+0x164>)
 8006010:	4613      	mov	r3, r2
 8006012:	01db      	lsls	r3, r3, #7
 8006014:	4413      	add	r3, r2
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	440b      	add	r3, r1
 800601a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800601e:	79fa      	ldrb	r2, [r7, #7]
 8006020:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 8006022:	797a      	ldrb	r2, [r7, #5]
 8006024:	494b      	ldr	r1, [pc, #300]	; (8006154 <tmc_fillCRC8Table+0x164>)
 8006026:	4613      	mov	r3, r2
 8006028:	01db      	lsls	r3, r3, #7
 800602a:	4413      	add	r3, r2
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	440b      	add	r3, r1
 8006030:	f203 1301 	addw	r3, r3, #257	; 0x101
 8006034:	79ba      	ldrb	r2, [r7, #6]
 8006036:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 8006038:	797a      	ldrb	r2, [r7, #5]
 800603a:	4613      	mov	r3, r2
 800603c:	01db      	lsls	r3, r3, #7
 800603e:	4413      	add	r3, r2
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	4a44      	ldr	r2, [pc, #272]	; (8006154 <tmc_fillCRC8Table+0x164>)
 8006044:	4413      	add	r3, r2
 8006046:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 8006048:	79fb      	ldrb	r3, [r7, #7]
 800604a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800604e:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8006050:	4b41      	ldr	r3, [pc, #260]	; (8006158 <tmc_fillCRC8Table+0x168>)
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	e074      	b.n	8006140 <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 8006056:	79bb      	ldrb	r3, [r7, #6]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d004      	beq.n	8006066 <tmc_fillCRC8Table+0x76>
 800605c:	6978      	ldr	r0, [r7, #20]
 800605e:	f000 f8f7 	bl	8006250 <flipBitsInBytes>
 8006062:	4603      	mov	r3, r0
 8006064:	e000      	b.n	8006068 <tmc_fillCRC8Table+0x78>
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 800606a:	2300      	movs	r3, #0
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	e035      	b.n	80060dc <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	0fdb      	lsrs	r3, r3, #31
 8006074:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <tmc_fillCRC8Table+0x9a>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	e000      	b.n	800608c <tmc_fillCRC8Table+0x9c>
 800608a:	2300      	movs	r3, #0
 800608c:	69fa      	ldr	r2, [r7, #28]
 800608e:	4053      	eors	r3, r2
 8006090:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <tmc_fillCRC8Table+0xb2>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	e000      	b.n	80060a4 <tmc_fillCRC8Table+0xb4>
 80060a2:	2300      	movs	r3, #0
 80060a4:	69fa      	ldr	r2, [r7, #28]
 80060a6:	4053      	eors	r3, r2
 80060a8:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <tmc_fillCRC8Table+0xca>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	041b      	lsls	r3, r3, #16
 80060b8:	e000      	b.n	80060bc <tmc_fillCRC8Table+0xcc>
 80060ba:	2300      	movs	r3, #0
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	4053      	eors	r3, r2
 80060c0:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 80060c2:	7afb      	ldrb	r3, [r7, #11]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d002      	beq.n	80060ce <tmc_fillCRC8Table+0xde>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	061b      	lsls	r3, r3, #24
 80060cc:	e000      	b.n	80060d0 <tmc_fillCRC8Table+0xe0>
 80060ce:	2300      	movs	r3, #0
 80060d0:	69fa      	ldr	r2, [r7, #28]
 80060d2:	4053      	eors	r3, r2
 80060d4:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	3301      	adds	r3, #1
 80060da:	613b      	str	r3, [r7, #16]
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2b07      	cmp	r3, #7
 80060e0:	ddc6      	ble.n	8006070 <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 80060e2:	79bb      	ldrb	r3, [r7, #6]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d004      	beq.n	80060f2 <tmc_fillCRC8Table+0x102>
 80060e8:	69f8      	ldr	r0, [r7, #28]
 80060ea:	f000 f8b1 	bl	8006250 <flipBitsInBytes>
 80060ee:	4603      	mov	r3, r0
 80060f0:	e000      	b.n	80060f4 <tmc_fillCRC8Table+0x104>
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	61ba      	str	r2, [r7, #24]
 80060fc:	69fa      	ldr	r2, [r7, #28]
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	0a1b      	lsrs	r3, r3, #8
 8006106:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	61ba      	str	r2, [r7, #24]
 800610e:	69fa      	ldr	r2, [r7, #28]
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	0a1b      	lsrs	r3, r3, #8
 8006118:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	61ba      	str	r2, [r7, #24]
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	0a1b      	lsrs	r3, r3, #8
 800612a:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	61ba      	str	r2, [r7, #24]
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	b2d2      	uxtb	r2, r2
 8006136:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	4a06      	ldr	r2, [pc, #24]	; (800615c <tmc_fillCRC8Table+0x16c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d186      	bne.n	8006056 <tmc_fillCRC8Table+0x66>
	}

	return 1;
 8006148:	2301      	movs	r3, #1
}
 800614a:	4618      	mov	r0, r3
 800614c:	3720      	adds	r7, #32
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	20000728 	.word	0x20000728
 8006158:	03020100 	.word	0x03020100
 800615c:	04030200 	.word	0x04030200

08006160 <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	4613      	mov	r3, r2
 800616c:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 800616e:	2300      	movs	r3, #0
 8006170:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d901      	bls.n	800617c <tmc_CRC8+0x1c>
		return 0;
 8006178:	2300      	movs	r3, #0
 800617a:	e02c      	b.n	80061d6 <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 800617c:	79fa      	ldrb	r2, [r7, #7]
 800617e:	4613      	mov	r3, r2
 8006180:	01db      	lsls	r3, r3, #7
 8006182:	4413      	add	r3, r2
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	4a16      	ldr	r2, [pc, #88]	; (80061e0 <tmc_CRC8+0x80>)
 8006188:	4413      	add	r3, r2
 800618a:	613b      	str	r3, [r7, #16]

	while(bytes--)
 800618c:	e00b      	b.n	80061a6 <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	60fa      	str	r2, [r7, #12]
 8006194:	781a      	ldrb	r2, [r3, #0]
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	4053      	eors	r3, r2
 800619a:	b2db      	uxtb	r3, r3
 800619c:	461a      	mov	r2, r3
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	4413      	add	r3, r2
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	1e5a      	subs	r2, r3, #1
 80061aa:	60ba      	str	r2, [r7, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1ee      	bne.n	800618e <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 80061b0:	79fa      	ldrb	r2, [r7, #7]
 80061b2:	490b      	ldr	r1, [pc, #44]	; (80061e0 <tmc_CRC8+0x80>)
 80061b4:	4613      	mov	r3, r2
 80061b6:	01db      	lsls	r3, r3, #7
 80061b8:	4413      	add	r3, r2
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	440b      	add	r3, r1
 80061be:	f203 1301 	addw	r3, r3, #257	; 0x101
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d005      	beq.n	80061d4 <tmc_CRC8+0x74>
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 f80a 	bl	80061e4 <flipByte>
 80061d0:	4603      	mov	r3, r0
 80061d2:	e000      	b.n	80061d6 <tmc_CRC8+0x76>
 80061d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000728 	.word	0x20000728

080061e4 <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	4603      	mov	r3, r0
 80061ec:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	085b      	lsrs	r3, r3, #1
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	b25b      	sxtb	r3, r3
 80061f6:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80061fa:	b25a      	sxtb	r2, r3
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	b25b      	sxtb	r3, r3
 8006202:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8006206:	b25b      	sxtb	r3, r3
 8006208:	4313      	orrs	r3, r2
 800620a:	b25b      	sxtb	r3, r3
 800620c:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	089b      	lsrs	r3, r3, #2
 8006212:	b2db      	uxtb	r3, r3
 8006214:	b25b      	sxtb	r3, r3
 8006216:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800621a:	b25a      	sxtb	r2, r3
 800621c:	79fb      	ldrb	r3, [r7, #7]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	b25b      	sxtb	r3, r3
 8006222:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8006226:	b25b      	sxtb	r3, r3
 8006228:	4313      	orrs	r3, r2
 800622a:	b25b      	sxtb	r3, r3
 800622c:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 800622e:	79fb      	ldrb	r3, [r7, #7]
 8006230:	091b      	lsrs	r3, r3, #4
 8006232:	b2db      	uxtb	r3, r3
 8006234:	b25a      	sxtb	r2, r3
 8006236:	79fb      	ldrb	r3, [r7, #7]
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	b25b      	sxtb	r3, r3
 800623c:	4313      	orrs	r3, r2
 800623e:	b25b      	sxtb	r3, r3
 8006240:	71fb      	strb	r3, [r7, #7]

	return value;
 8006242:	79fb      	ldrb	r3, [r7, #7]
}
 8006244:	4618      	mov	r0, r3
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	085b      	lsrs	r3, r3, #1
 800625c:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8006268:	4313      	orrs	r3, r2
 800626a:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	089b      	lsrs	r3, r3, #2
 8006270:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 800627c:	4313      	orrs	r3, r2
 800627e:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	091b      	lsrs	r3, r3, #4
 8006284:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	011b      	lsls	r3, r3, #4
 800628c:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8006290:	4313      	orrs	r3, r2
 8006292:	607b      	str	r3, [r7, #4]

	return value;
 8006294:	687b      	ldr	r3, [r7, #4]
}
 8006296:	4618      	mov	r0, r3
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b086      	sub	sp, #24
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	460b      	mov	r3, r1
 80062ac:	607a      	str	r2, [r7, #4]
 80062ae:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];

	data[0] = 0x05;
 80062b0:	2305      	movs	r3, #5
 80062b2:	743b      	strb	r3, [r7, #16]
	data[1] = tmc2209->slaveAddress;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 80062ba:	747b      	strb	r3, [r7, #17]
	data[2] = address | TMC_WRITE_BIT;
 80062bc:	7afb      	ldrb	r3, [r7, #11]
 80062be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	74bb      	strb	r3, [r7, #18]
	data[3] = (value >> 24) & 0xFF;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	0e1b      	lsrs	r3, r3, #24
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	74fb      	strb	r3, [r7, #19]
	data[4] = (value >> 16) & 0xFF;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	141b      	asrs	r3, r3, #16
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	753b      	strb	r3, [r7, #20]
	data[5] = (value >> 8 ) & 0xFF;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	121b      	asrs	r3, r3, #8
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	757b      	strb	r3, [r7, #21]
	data[6] = (value      ) & 0xFF;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	75bb      	strb	r3, [r7, #22]
	data[7] = tmc2209_CRC8(data, 7);
 80062e4:	f107 0310 	add.w	r3, r7, #16
 80062e8:	2107      	movs	r1, #7
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fa f98a 	bl	8000604 <tmc2209_CRC8>
 80062f0:	4603      	mov	r3, r0
 80062f2:	75fb      	strb	r3, [r7, #23]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 80062fc:	f107 0110 	add.w	r1, r7, #16
 8006300:	2300      	movs	r3, #0
 8006302:	2208      	movs	r2, #8
 8006304:	f7fa f956 	bl	80005b4 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
 8006308:	7afb      	ldrb	r3, [r7, #11]
 800630a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800630e:	72fb      	strb	r3, [r7, #11]
	tmc2209->config->shadowRegister[address] = value;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	7afb      	ldrb	r3, [r7, #11]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	605a      	str	r2, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
 800631e:	7afb      	ldrb	r3, [r7, #11]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4413      	add	r3, r2
 8006324:	f893 2204 	ldrb.w	r2, [r3, #516]	; 0x204
 8006328:	7afb      	ldrb	r3, [r7, #11]
 800632a:	f042 0208 	orr.w	r2, r2, #8
 800632e:	b2d1      	uxtb	r1, r2
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4413      	add	r3, r2
 8006334:	460a      	mov	r2, r1
 8006336:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 800633a:	bf00      	nop
 800633c:	3718      	adds	r7, #24
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 8006342:	b590      	push	{r4, r7, lr}
 8006344:	b085      	sub	sp, #20
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	460b      	mov	r3, r1
 800634c:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 800634e:	2300      	movs	r3, #0
 8006350:	60bb      	str	r3, [r7, #8]
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 8006356:	78fb      	ldrb	r3, [r7, #3]
 8006358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800635c:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 800635e:	78fb      	ldrb	r3, [r7, #3]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	4413      	add	r3, r2
 8006364:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b00      	cmp	r3, #0
 800636e:	d106      	bne.n	800637e <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	78fb      	ldrb	r3, [r7, #3]
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	e03f      	b.n	80063fe <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 800637e:	2305      	movs	r3, #5
 8006380:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8006388:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 800638a:	78fb      	ldrb	r3, [r7, #3]
 800638c:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 800638e:	f107 0308 	add.w	r3, r7, #8
 8006392:	2103      	movs	r1, #3
 8006394:	4618      	mov	r0, r3
 8006396:	f7fa f935 	bl	8000604 <tmc2209_CRC8>
 800639a:	4603      	mov	r3, r0
 800639c:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 80063a6:	f107 0108 	add.w	r1, r7, #8
 80063aa:	2308      	movs	r3, #8
 80063ac:	2204      	movs	r2, #4
 80063ae:	f7fa f901 	bl	80005b4 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 80063b2:	7a3b      	ldrb	r3, [r7, #8]
 80063b4:	2b05      	cmp	r3, #5
 80063b6:	d001      	beq.n	80063bc <tmc2209_readInt+0x7a>
		return 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	e020      	b.n	80063fe <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 80063bc:	7a7b      	ldrb	r3, [r7, #9]
 80063be:	2bff      	cmp	r3, #255	; 0xff
 80063c0:	d001      	beq.n	80063c6 <tmc2209_readInt+0x84>
		return 0;
 80063c2:	2300      	movs	r3, #0
 80063c4:	e01b      	b.n	80063fe <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 80063c6:	7abb      	ldrb	r3, [r7, #10]
 80063c8:	78fa      	ldrb	r2, [r7, #3]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d001      	beq.n	80063d2 <tmc2209_readInt+0x90>
		return 0;
 80063ce:	2300      	movs	r3, #0
 80063d0:	e015      	b.n	80063fe <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 80063d2:	7bfc      	ldrb	r4, [r7, #15]
 80063d4:	f107 0308 	add.w	r3, r7, #8
 80063d8:	2107      	movs	r1, #7
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fa f912 	bl	8000604 <tmc2209_CRC8>
 80063e0:	4603      	mov	r3, r0
 80063e2:	429c      	cmp	r4, r3
 80063e4:	d001      	beq.n	80063ea <tmc2209_readInt+0xa8>
		return 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	e009      	b.n	80063fe <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 80063ea:	7afb      	ldrb	r3, [r7, #11]
 80063ec:	061a      	lsls	r2, r3, #24
 80063ee:	7b3b      	ldrb	r3, [r7, #12]
 80063f0:	041b      	lsls	r3, r3, #16
 80063f2:	4313      	orrs	r3, r2
 80063f4:	7b7a      	ldrb	r2, [r7, #13]
 80063f6:	0212      	lsls	r2, r2, #8
 80063f8:	4313      	orrs	r3, r2
 80063fa:	7bba      	ldrb	r2, [r7, #14]
 80063fc:	4313      	orrs	r3, r2
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	bd90      	pop	{r4, r7, pc}
	...

08006408 <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	607b      	str	r3, [r7, #4]
 8006412:	460b      	mov	r3, r1
 8006414:	72fb      	strb	r3, [r7, #11]
 8006416:	4613      	mov	r3, r2
 8006418:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	7aba      	ldrb	r2, [r7, #10]
 800641e:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2200      	movs	r2, #0
 800642e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	7afa      	ldrb	r2, [r7, #11]
 8006438:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2200      	movs	r2, #0
 8006442:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2200      	movs	r2, #0
 800644a:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 800644c:	2300      	movs	r3, #0
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	e017      	b.n	8006482 <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 8006452:	4a11      	ldr	r2, [pc, #68]	; (8006498 <tmc2209_init+0x90>)
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	4413      	add	r3, r2
 8006458:	7819      	ldrb	r1, [r3, #0]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	4413      	add	r3, r2
 8006460:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006464:	460a      	mov	r2, r1
 8006466:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	6a3a      	ldr	r2, [r7, #32]
 800646e:	4413      	add	r3, r2
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68f9      	ldr	r1, [r7, #12]
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	440b      	add	r3, r1
 800647a:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	3301      	adds	r3, #1
 8006480:	617b      	str	r3, [r7, #20]
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b7f      	cmp	r3, #127	; 0x7f
 8006486:	d9e4      	bls.n	8006452 <tmc2209_init+0x4a>
	}
}
 8006488:	bf00      	nop
 800648a:	bf00      	nop
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	08007ee8 	.word	0x08007ee8

0800649c <writeConfiguration>:

static void writeConfiguration(TMC2209TypeDef *tmc2209)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = &tmc2209->config->configIndex;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3301      	adds	r3, #1
 80064aa:	60bb      	str	r3, [r7, #8]
	const int32_t *settings;

	if(tmc2209->config->state == CONFIG_RESTORE)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d131      	bne.n	800651a <writeConfiguration+0x7e>
	{
		settings = tmc2209->config->shadowRegister;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3304      	adds	r3, #4
 80064bc:	60fb      	str	r3, [r7, #12]
		// Find the next restorable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 80064be:	e005      	b.n	80064cc <writeConfiguration+0x30>
		{
			(*ptr)++;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	3301      	adds	r3, #1
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	b25b      	sxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	db3b      	blt.n	800654e <writeConfiguration+0xb2>
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	461a      	mov	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4413      	add	r3, r2
 80064e0:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0e9      	beq.n	80064c0 <writeConfiguration+0x24>
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	461a      	mov	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4413      	add	r3, r2
 80064f6:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80064fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d025      	beq.n	800654e <writeConfiguration+0xb2>
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4413      	add	r3, r2
 800650c:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006510:	f003 0308 	and.w	r3, r3, #8
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0d3      	beq.n	80064c0 <writeConfiguration+0x24>
 8006518:	e019      	b.n	800654e <writeConfiguration+0xb2>
		}
	}
	else
	{
		settings = tmc2209->registerResetState;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3304      	adds	r3, #4
 800651e:	60fb      	str	r3, [r7, #12]
		// Find the next resettable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8006520:	e005      	b.n	800652e <writeConfiguration+0x92>
		{
			(*ptr)++;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	3301      	adds	r3, #1
 8006528:	b2da      	uxtb	r2, r3
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	b25b      	sxtb	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	db0a      	blt.n	800654e <writeConfiguration+0xb2>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4413      	add	r3, r2
 8006542:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006546:	f003 0342 	and.w	r3, r3, #66	; 0x42
 800654a:	2b02      	cmp	r3, #2
 800654c:	d1e9      	bne.n	8006522 <writeConfiguration+0x86>
		}
	}

	if(*ptr < TMC2209_REGISTER_COUNT)
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	b25b      	sxtb	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	db12      	blt.n	800657e <writeConfiguration+0xe2>
	{
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	7819      	ldrb	r1, [r3, #0]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4413      	add	r3, r2
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7ff fe99 	bl	80062a2 <tmc2209_writeInt>
		(*ptr)++;
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	3301      	adds	r3, #1
 8006576:	b2da      	uxtb	r2, r3
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	701a      	strb	r2, [r3, #0]
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
		}

		tmc2209->config->state = CONFIG_READY;
	}
}
 800657c:	e013      	b.n	80065a6 <writeConfiguration+0x10a>
		if(tmc2209->config->callback)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006586:	2b00      	cmp	r3, #0
 8006588:	d009      	beq.n	800659e <writeConfiguration+0x102>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6812      	ldr	r2, [r2, #0]
 8006596:	7812      	ldrb	r2, [r2, #0]
 8006598:	4611      	mov	r1, r2
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2200      	movs	r2, #0
 80065a4:	701a      	strb	r2, [r3, #0]
}
 80065a6:	bf00      	nop
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <tmc2209_periodicJob>:

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b082      	sub	sp, #8
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	6039      	str	r1, [r7, #0]
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <tmc2209_periodicJob+0x1c>
	{
		writeConfiguration(tmc2209);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff ff6a 	bl	800649c <writeConfiguration>
		return;
 80065c8:	bf00      	nop
	}
}
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <tmc2209_reset+0x16>
		return false;
 80065e2:	2300      	movs	r3, #0
 80065e4:	e028      	b.n	8006638 <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	e019      	b.n	8006620 <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	f023 0308 	bic.w	r3, r3, #8
 80065fc:	b2d9      	uxtb	r1, r3
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006608:	460a      	mov	r2, r1
 800660a:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	2200      	movs	r2, #0
 8006618:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3301      	adds	r3, #1
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b7f      	cmp	r3, #127	; 0x7f
 8006624:	d9e2      	bls.n	80065ec <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2201      	movs	r2, #1
 800662c:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2200      	movs	r2, #0
 8006634:	705a      	strb	r2, [r3, #1]

	return true;
 8006636:	2301      	movs	r3, #1
}
 8006638:	4618      	mov	r0, r3
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <tmc2209_restore+0x16>
		return false;
 8006656:	2300      	movs	r3, #0
 8006658:	e008      	b.n	800666c <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2202      	movs	r2, #2
 8006660:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2200      	movs	r2, #0
 8006668:	705a      	strb	r2, [r3, #1]

	return true;
 800666a:	2301      	movs	r3, #1
}
 800666c:	4618      	mov	r0, r3
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <__errno>:
 8006678:	4b01      	ldr	r3, [pc, #4]	; (8006680 <__errno+0x8>)
 800667a:	6818      	ldr	r0, [r3, #0]
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	20000010 	.word	0x20000010

08006684 <__libc_init_array>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	4d0d      	ldr	r5, [pc, #52]	; (80066bc <__libc_init_array+0x38>)
 8006688:	4c0d      	ldr	r4, [pc, #52]	; (80066c0 <__libc_init_array+0x3c>)
 800668a:	1b64      	subs	r4, r4, r5
 800668c:	10a4      	asrs	r4, r4, #2
 800668e:	2600      	movs	r6, #0
 8006690:	42a6      	cmp	r6, r4
 8006692:	d109      	bne.n	80066a8 <__libc_init_array+0x24>
 8006694:	4d0b      	ldr	r5, [pc, #44]	; (80066c4 <__libc_init_array+0x40>)
 8006696:	4c0c      	ldr	r4, [pc, #48]	; (80066c8 <__libc_init_array+0x44>)
 8006698:	f001 f8fa 	bl	8007890 <_init>
 800669c:	1b64      	subs	r4, r4, r5
 800669e:	10a4      	asrs	r4, r4, #2
 80066a0:	2600      	movs	r6, #0
 80066a2:	42a6      	cmp	r6, r4
 80066a4:	d105      	bne.n	80066b2 <__libc_init_array+0x2e>
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ac:	4798      	blx	r3
 80066ae:	3601      	adds	r6, #1
 80066b0:	e7ee      	b.n	8006690 <__libc_init_array+0xc>
 80066b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b6:	4798      	blx	r3
 80066b8:	3601      	adds	r6, #1
 80066ba:	e7f2      	b.n	80066a2 <__libc_init_array+0x1e>
 80066bc:	08008008 	.word	0x08008008
 80066c0:	08008008 	.word	0x08008008
 80066c4:	08008008 	.word	0x08008008
 80066c8:	0800800c 	.word	0x0800800c

080066cc <memset>:
 80066cc:	4402      	add	r2, r0
 80066ce:	4603      	mov	r3, r0
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d100      	bne.n	80066d6 <memset+0xa>
 80066d4:	4770      	bx	lr
 80066d6:	f803 1b01 	strb.w	r1, [r3], #1
 80066da:	e7f9      	b.n	80066d0 <memset+0x4>

080066dc <iprintf>:
 80066dc:	b40f      	push	{r0, r1, r2, r3}
 80066de:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <iprintf+0x2c>)
 80066e0:	b513      	push	{r0, r1, r4, lr}
 80066e2:	681c      	ldr	r4, [r3, #0]
 80066e4:	b124      	cbz	r4, 80066f0 <iprintf+0x14>
 80066e6:	69a3      	ldr	r3, [r4, #24]
 80066e8:	b913      	cbnz	r3, 80066f0 <iprintf+0x14>
 80066ea:	4620      	mov	r0, r4
 80066ec:	f000 fb2c 	bl	8006d48 <__sinit>
 80066f0:	ab05      	add	r3, sp, #20
 80066f2:	9a04      	ldr	r2, [sp, #16]
 80066f4:	68a1      	ldr	r1, [r4, #8]
 80066f6:	9301      	str	r3, [sp, #4]
 80066f8:	4620      	mov	r0, r4
 80066fa:	f000 fd3d 	bl	8007178 <_vfiprintf_r>
 80066fe:	b002      	add	sp, #8
 8006700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006704:	b004      	add	sp, #16
 8006706:	4770      	bx	lr
 8006708:	20000010 	.word	0x20000010

0800670c <_puts_r>:
 800670c:	b570      	push	{r4, r5, r6, lr}
 800670e:	460e      	mov	r6, r1
 8006710:	4605      	mov	r5, r0
 8006712:	b118      	cbz	r0, 800671c <_puts_r+0x10>
 8006714:	6983      	ldr	r3, [r0, #24]
 8006716:	b90b      	cbnz	r3, 800671c <_puts_r+0x10>
 8006718:	f000 fb16 	bl	8006d48 <__sinit>
 800671c:	69ab      	ldr	r3, [r5, #24]
 800671e:	68ac      	ldr	r4, [r5, #8]
 8006720:	b913      	cbnz	r3, 8006728 <_puts_r+0x1c>
 8006722:	4628      	mov	r0, r5
 8006724:	f000 fb10 	bl	8006d48 <__sinit>
 8006728:	4b2c      	ldr	r3, [pc, #176]	; (80067dc <_puts_r+0xd0>)
 800672a:	429c      	cmp	r4, r3
 800672c:	d120      	bne.n	8006770 <_puts_r+0x64>
 800672e:	686c      	ldr	r4, [r5, #4]
 8006730:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006732:	07db      	lsls	r3, r3, #31
 8006734:	d405      	bmi.n	8006742 <_puts_r+0x36>
 8006736:	89a3      	ldrh	r3, [r4, #12]
 8006738:	0598      	lsls	r0, r3, #22
 800673a:	d402      	bmi.n	8006742 <_puts_r+0x36>
 800673c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800673e:	f000 fba1 	bl	8006e84 <__retarget_lock_acquire_recursive>
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	0719      	lsls	r1, r3, #28
 8006746:	d51d      	bpl.n	8006784 <_puts_r+0x78>
 8006748:	6923      	ldr	r3, [r4, #16]
 800674a:	b1db      	cbz	r3, 8006784 <_puts_r+0x78>
 800674c:	3e01      	subs	r6, #1
 800674e:	68a3      	ldr	r3, [r4, #8]
 8006750:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006754:	3b01      	subs	r3, #1
 8006756:	60a3      	str	r3, [r4, #8]
 8006758:	bb39      	cbnz	r1, 80067aa <_puts_r+0x9e>
 800675a:	2b00      	cmp	r3, #0
 800675c:	da38      	bge.n	80067d0 <_puts_r+0xc4>
 800675e:	4622      	mov	r2, r4
 8006760:	210a      	movs	r1, #10
 8006762:	4628      	mov	r0, r5
 8006764:	f000 f916 	bl	8006994 <__swbuf_r>
 8006768:	3001      	adds	r0, #1
 800676a:	d011      	beq.n	8006790 <_puts_r+0x84>
 800676c:	250a      	movs	r5, #10
 800676e:	e011      	b.n	8006794 <_puts_r+0x88>
 8006770:	4b1b      	ldr	r3, [pc, #108]	; (80067e0 <_puts_r+0xd4>)
 8006772:	429c      	cmp	r4, r3
 8006774:	d101      	bne.n	800677a <_puts_r+0x6e>
 8006776:	68ac      	ldr	r4, [r5, #8]
 8006778:	e7da      	b.n	8006730 <_puts_r+0x24>
 800677a:	4b1a      	ldr	r3, [pc, #104]	; (80067e4 <_puts_r+0xd8>)
 800677c:	429c      	cmp	r4, r3
 800677e:	bf08      	it	eq
 8006780:	68ec      	ldreq	r4, [r5, #12]
 8006782:	e7d5      	b.n	8006730 <_puts_r+0x24>
 8006784:	4621      	mov	r1, r4
 8006786:	4628      	mov	r0, r5
 8006788:	f000 f956 	bl	8006a38 <__swsetup_r>
 800678c:	2800      	cmp	r0, #0
 800678e:	d0dd      	beq.n	800674c <_puts_r+0x40>
 8006790:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006794:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006796:	07da      	lsls	r2, r3, #31
 8006798:	d405      	bmi.n	80067a6 <_puts_r+0x9a>
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	059b      	lsls	r3, r3, #22
 800679e:	d402      	bmi.n	80067a6 <_puts_r+0x9a>
 80067a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067a2:	f000 fb70 	bl	8006e86 <__retarget_lock_release_recursive>
 80067a6:	4628      	mov	r0, r5
 80067a8:	bd70      	pop	{r4, r5, r6, pc}
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	da04      	bge.n	80067b8 <_puts_r+0xac>
 80067ae:	69a2      	ldr	r2, [r4, #24]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	dc06      	bgt.n	80067c2 <_puts_r+0xb6>
 80067b4:	290a      	cmp	r1, #10
 80067b6:	d004      	beq.n	80067c2 <_puts_r+0xb6>
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	6022      	str	r2, [r4, #0]
 80067be:	7019      	strb	r1, [r3, #0]
 80067c0:	e7c5      	b.n	800674e <_puts_r+0x42>
 80067c2:	4622      	mov	r2, r4
 80067c4:	4628      	mov	r0, r5
 80067c6:	f000 f8e5 	bl	8006994 <__swbuf_r>
 80067ca:	3001      	adds	r0, #1
 80067cc:	d1bf      	bne.n	800674e <_puts_r+0x42>
 80067ce:	e7df      	b.n	8006790 <_puts_r+0x84>
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	250a      	movs	r5, #10
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	6022      	str	r2, [r4, #0]
 80067d8:	701d      	strb	r5, [r3, #0]
 80067da:	e7db      	b.n	8006794 <_puts_r+0x88>
 80067dc:	08007f8c 	.word	0x08007f8c
 80067e0:	08007fac 	.word	0x08007fac
 80067e4:	08007f6c 	.word	0x08007f6c

080067e8 <puts>:
 80067e8:	4b02      	ldr	r3, [pc, #8]	; (80067f4 <puts+0xc>)
 80067ea:	4601      	mov	r1, r0
 80067ec:	6818      	ldr	r0, [r3, #0]
 80067ee:	f7ff bf8d 	b.w	800670c <_puts_r>
 80067f2:	bf00      	nop
 80067f4:	20000010 	.word	0x20000010

080067f8 <setbuf>:
 80067f8:	2900      	cmp	r1, #0
 80067fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067fe:	bf0c      	ite	eq
 8006800:	2202      	moveq	r2, #2
 8006802:	2200      	movne	r2, #0
 8006804:	f000 b800 	b.w	8006808 <setvbuf>

08006808 <setvbuf>:
 8006808:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800680c:	461d      	mov	r5, r3
 800680e:	4b5d      	ldr	r3, [pc, #372]	; (8006984 <setvbuf+0x17c>)
 8006810:	681f      	ldr	r7, [r3, #0]
 8006812:	4604      	mov	r4, r0
 8006814:	460e      	mov	r6, r1
 8006816:	4690      	mov	r8, r2
 8006818:	b127      	cbz	r7, 8006824 <setvbuf+0x1c>
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	b913      	cbnz	r3, 8006824 <setvbuf+0x1c>
 800681e:	4638      	mov	r0, r7
 8006820:	f000 fa92 	bl	8006d48 <__sinit>
 8006824:	4b58      	ldr	r3, [pc, #352]	; (8006988 <setvbuf+0x180>)
 8006826:	429c      	cmp	r4, r3
 8006828:	d167      	bne.n	80068fa <setvbuf+0xf2>
 800682a:	687c      	ldr	r4, [r7, #4]
 800682c:	f1b8 0f02 	cmp.w	r8, #2
 8006830:	d006      	beq.n	8006840 <setvbuf+0x38>
 8006832:	f1b8 0f01 	cmp.w	r8, #1
 8006836:	f200 809f 	bhi.w	8006978 <setvbuf+0x170>
 800683a:	2d00      	cmp	r5, #0
 800683c:	f2c0 809c 	blt.w	8006978 <setvbuf+0x170>
 8006840:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006842:	07db      	lsls	r3, r3, #31
 8006844:	d405      	bmi.n	8006852 <setvbuf+0x4a>
 8006846:	89a3      	ldrh	r3, [r4, #12]
 8006848:	0598      	lsls	r0, r3, #22
 800684a:	d402      	bmi.n	8006852 <setvbuf+0x4a>
 800684c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800684e:	f000 fb19 	bl	8006e84 <__retarget_lock_acquire_recursive>
 8006852:	4621      	mov	r1, r4
 8006854:	4638      	mov	r0, r7
 8006856:	f000 f9e3 	bl	8006c20 <_fflush_r>
 800685a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800685c:	b141      	cbz	r1, 8006870 <setvbuf+0x68>
 800685e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006862:	4299      	cmp	r1, r3
 8006864:	d002      	beq.n	800686c <setvbuf+0x64>
 8006866:	4638      	mov	r0, r7
 8006868:	f000 fb7c 	bl	8006f64 <_free_r>
 800686c:	2300      	movs	r3, #0
 800686e:	6363      	str	r3, [r4, #52]	; 0x34
 8006870:	2300      	movs	r3, #0
 8006872:	61a3      	str	r3, [r4, #24]
 8006874:	6063      	str	r3, [r4, #4]
 8006876:	89a3      	ldrh	r3, [r4, #12]
 8006878:	0619      	lsls	r1, r3, #24
 800687a:	d503      	bpl.n	8006884 <setvbuf+0x7c>
 800687c:	6921      	ldr	r1, [r4, #16]
 800687e:	4638      	mov	r0, r7
 8006880:	f000 fb70 	bl	8006f64 <_free_r>
 8006884:	89a3      	ldrh	r3, [r4, #12]
 8006886:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800688a:	f023 0303 	bic.w	r3, r3, #3
 800688e:	f1b8 0f02 	cmp.w	r8, #2
 8006892:	81a3      	strh	r3, [r4, #12]
 8006894:	d06c      	beq.n	8006970 <setvbuf+0x168>
 8006896:	ab01      	add	r3, sp, #4
 8006898:	466a      	mov	r2, sp
 800689a:	4621      	mov	r1, r4
 800689c:	4638      	mov	r0, r7
 800689e:	f000 faf3 	bl	8006e88 <__swhatbuf_r>
 80068a2:	89a3      	ldrh	r3, [r4, #12]
 80068a4:	4318      	orrs	r0, r3
 80068a6:	81a0      	strh	r0, [r4, #12]
 80068a8:	2d00      	cmp	r5, #0
 80068aa:	d130      	bne.n	800690e <setvbuf+0x106>
 80068ac:	9d00      	ldr	r5, [sp, #0]
 80068ae:	4628      	mov	r0, r5
 80068b0:	f000 fb50 	bl	8006f54 <malloc>
 80068b4:	4606      	mov	r6, r0
 80068b6:	2800      	cmp	r0, #0
 80068b8:	d155      	bne.n	8006966 <setvbuf+0x15e>
 80068ba:	f8dd 9000 	ldr.w	r9, [sp]
 80068be:	45a9      	cmp	r9, r5
 80068c0:	d14a      	bne.n	8006958 <setvbuf+0x150>
 80068c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80068c6:	2200      	movs	r2, #0
 80068c8:	60a2      	str	r2, [r4, #8]
 80068ca:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80068ce:	6022      	str	r2, [r4, #0]
 80068d0:	6122      	str	r2, [r4, #16]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068d8:	6162      	str	r2, [r4, #20]
 80068da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068dc:	f043 0302 	orr.w	r3, r3, #2
 80068e0:	07d2      	lsls	r2, r2, #31
 80068e2:	81a3      	strh	r3, [r4, #12]
 80068e4:	d405      	bmi.n	80068f2 <setvbuf+0xea>
 80068e6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80068ea:	d102      	bne.n	80068f2 <setvbuf+0xea>
 80068ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ee:	f000 faca 	bl	8006e86 <__retarget_lock_release_recursive>
 80068f2:	4628      	mov	r0, r5
 80068f4:	b003      	add	sp, #12
 80068f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068fa:	4b24      	ldr	r3, [pc, #144]	; (800698c <setvbuf+0x184>)
 80068fc:	429c      	cmp	r4, r3
 80068fe:	d101      	bne.n	8006904 <setvbuf+0xfc>
 8006900:	68bc      	ldr	r4, [r7, #8]
 8006902:	e793      	b.n	800682c <setvbuf+0x24>
 8006904:	4b22      	ldr	r3, [pc, #136]	; (8006990 <setvbuf+0x188>)
 8006906:	429c      	cmp	r4, r3
 8006908:	bf08      	it	eq
 800690a:	68fc      	ldreq	r4, [r7, #12]
 800690c:	e78e      	b.n	800682c <setvbuf+0x24>
 800690e:	2e00      	cmp	r6, #0
 8006910:	d0cd      	beq.n	80068ae <setvbuf+0xa6>
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	b913      	cbnz	r3, 800691c <setvbuf+0x114>
 8006916:	4638      	mov	r0, r7
 8006918:	f000 fa16 	bl	8006d48 <__sinit>
 800691c:	f1b8 0f01 	cmp.w	r8, #1
 8006920:	bf08      	it	eq
 8006922:	89a3      	ldrheq	r3, [r4, #12]
 8006924:	6026      	str	r6, [r4, #0]
 8006926:	bf04      	itt	eq
 8006928:	f043 0301 	orreq.w	r3, r3, #1
 800692c:	81a3      	strheq	r3, [r4, #12]
 800692e:	89a2      	ldrh	r2, [r4, #12]
 8006930:	f012 0308 	ands.w	r3, r2, #8
 8006934:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006938:	d01c      	beq.n	8006974 <setvbuf+0x16c>
 800693a:	07d3      	lsls	r3, r2, #31
 800693c:	bf41      	itttt	mi
 800693e:	2300      	movmi	r3, #0
 8006940:	426d      	negmi	r5, r5
 8006942:	60a3      	strmi	r3, [r4, #8]
 8006944:	61a5      	strmi	r5, [r4, #24]
 8006946:	bf58      	it	pl
 8006948:	60a5      	strpl	r5, [r4, #8]
 800694a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800694c:	f015 0501 	ands.w	r5, r5, #1
 8006950:	d115      	bne.n	800697e <setvbuf+0x176>
 8006952:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006956:	e7c8      	b.n	80068ea <setvbuf+0xe2>
 8006958:	4648      	mov	r0, r9
 800695a:	f000 fafb 	bl	8006f54 <malloc>
 800695e:	4606      	mov	r6, r0
 8006960:	2800      	cmp	r0, #0
 8006962:	d0ae      	beq.n	80068c2 <setvbuf+0xba>
 8006964:	464d      	mov	r5, r9
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800696c:	81a3      	strh	r3, [r4, #12]
 800696e:	e7d0      	b.n	8006912 <setvbuf+0x10a>
 8006970:	2500      	movs	r5, #0
 8006972:	e7a8      	b.n	80068c6 <setvbuf+0xbe>
 8006974:	60a3      	str	r3, [r4, #8]
 8006976:	e7e8      	b.n	800694a <setvbuf+0x142>
 8006978:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800697c:	e7b9      	b.n	80068f2 <setvbuf+0xea>
 800697e:	2500      	movs	r5, #0
 8006980:	e7b7      	b.n	80068f2 <setvbuf+0xea>
 8006982:	bf00      	nop
 8006984:	20000010 	.word	0x20000010
 8006988:	08007f8c 	.word	0x08007f8c
 800698c:	08007fac 	.word	0x08007fac
 8006990:	08007f6c 	.word	0x08007f6c

08006994 <__swbuf_r>:
 8006994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006996:	460e      	mov	r6, r1
 8006998:	4614      	mov	r4, r2
 800699a:	4605      	mov	r5, r0
 800699c:	b118      	cbz	r0, 80069a6 <__swbuf_r+0x12>
 800699e:	6983      	ldr	r3, [r0, #24]
 80069a0:	b90b      	cbnz	r3, 80069a6 <__swbuf_r+0x12>
 80069a2:	f000 f9d1 	bl	8006d48 <__sinit>
 80069a6:	4b21      	ldr	r3, [pc, #132]	; (8006a2c <__swbuf_r+0x98>)
 80069a8:	429c      	cmp	r4, r3
 80069aa:	d12b      	bne.n	8006a04 <__swbuf_r+0x70>
 80069ac:	686c      	ldr	r4, [r5, #4]
 80069ae:	69a3      	ldr	r3, [r4, #24]
 80069b0:	60a3      	str	r3, [r4, #8]
 80069b2:	89a3      	ldrh	r3, [r4, #12]
 80069b4:	071a      	lsls	r2, r3, #28
 80069b6:	d52f      	bpl.n	8006a18 <__swbuf_r+0x84>
 80069b8:	6923      	ldr	r3, [r4, #16]
 80069ba:	b36b      	cbz	r3, 8006a18 <__swbuf_r+0x84>
 80069bc:	6923      	ldr	r3, [r4, #16]
 80069be:	6820      	ldr	r0, [r4, #0]
 80069c0:	1ac0      	subs	r0, r0, r3
 80069c2:	6963      	ldr	r3, [r4, #20]
 80069c4:	b2f6      	uxtb	r6, r6
 80069c6:	4283      	cmp	r3, r0
 80069c8:	4637      	mov	r7, r6
 80069ca:	dc04      	bgt.n	80069d6 <__swbuf_r+0x42>
 80069cc:	4621      	mov	r1, r4
 80069ce:	4628      	mov	r0, r5
 80069d0:	f000 f926 	bl	8006c20 <_fflush_r>
 80069d4:	bb30      	cbnz	r0, 8006a24 <__swbuf_r+0x90>
 80069d6:	68a3      	ldr	r3, [r4, #8]
 80069d8:	3b01      	subs	r3, #1
 80069da:	60a3      	str	r3, [r4, #8]
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	6022      	str	r2, [r4, #0]
 80069e2:	701e      	strb	r6, [r3, #0]
 80069e4:	6963      	ldr	r3, [r4, #20]
 80069e6:	3001      	adds	r0, #1
 80069e8:	4283      	cmp	r3, r0
 80069ea:	d004      	beq.n	80069f6 <__swbuf_r+0x62>
 80069ec:	89a3      	ldrh	r3, [r4, #12]
 80069ee:	07db      	lsls	r3, r3, #31
 80069f0:	d506      	bpl.n	8006a00 <__swbuf_r+0x6c>
 80069f2:	2e0a      	cmp	r6, #10
 80069f4:	d104      	bne.n	8006a00 <__swbuf_r+0x6c>
 80069f6:	4621      	mov	r1, r4
 80069f8:	4628      	mov	r0, r5
 80069fa:	f000 f911 	bl	8006c20 <_fflush_r>
 80069fe:	b988      	cbnz	r0, 8006a24 <__swbuf_r+0x90>
 8006a00:	4638      	mov	r0, r7
 8006a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a04:	4b0a      	ldr	r3, [pc, #40]	; (8006a30 <__swbuf_r+0x9c>)
 8006a06:	429c      	cmp	r4, r3
 8006a08:	d101      	bne.n	8006a0e <__swbuf_r+0x7a>
 8006a0a:	68ac      	ldr	r4, [r5, #8]
 8006a0c:	e7cf      	b.n	80069ae <__swbuf_r+0x1a>
 8006a0e:	4b09      	ldr	r3, [pc, #36]	; (8006a34 <__swbuf_r+0xa0>)
 8006a10:	429c      	cmp	r4, r3
 8006a12:	bf08      	it	eq
 8006a14:	68ec      	ldreq	r4, [r5, #12]
 8006a16:	e7ca      	b.n	80069ae <__swbuf_r+0x1a>
 8006a18:	4621      	mov	r1, r4
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	f000 f80c 	bl	8006a38 <__swsetup_r>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	d0cb      	beq.n	80069bc <__swbuf_r+0x28>
 8006a24:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006a28:	e7ea      	b.n	8006a00 <__swbuf_r+0x6c>
 8006a2a:	bf00      	nop
 8006a2c:	08007f8c 	.word	0x08007f8c
 8006a30:	08007fac 	.word	0x08007fac
 8006a34:	08007f6c 	.word	0x08007f6c

08006a38 <__swsetup_r>:
 8006a38:	4b32      	ldr	r3, [pc, #200]	; (8006b04 <__swsetup_r+0xcc>)
 8006a3a:	b570      	push	{r4, r5, r6, lr}
 8006a3c:	681d      	ldr	r5, [r3, #0]
 8006a3e:	4606      	mov	r6, r0
 8006a40:	460c      	mov	r4, r1
 8006a42:	b125      	cbz	r5, 8006a4e <__swsetup_r+0x16>
 8006a44:	69ab      	ldr	r3, [r5, #24]
 8006a46:	b913      	cbnz	r3, 8006a4e <__swsetup_r+0x16>
 8006a48:	4628      	mov	r0, r5
 8006a4a:	f000 f97d 	bl	8006d48 <__sinit>
 8006a4e:	4b2e      	ldr	r3, [pc, #184]	; (8006b08 <__swsetup_r+0xd0>)
 8006a50:	429c      	cmp	r4, r3
 8006a52:	d10f      	bne.n	8006a74 <__swsetup_r+0x3c>
 8006a54:	686c      	ldr	r4, [r5, #4]
 8006a56:	89a3      	ldrh	r3, [r4, #12]
 8006a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a5c:	0719      	lsls	r1, r3, #28
 8006a5e:	d42c      	bmi.n	8006aba <__swsetup_r+0x82>
 8006a60:	06dd      	lsls	r5, r3, #27
 8006a62:	d411      	bmi.n	8006a88 <__swsetup_r+0x50>
 8006a64:	2309      	movs	r3, #9
 8006a66:	6033      	str	r3, [r6, #0]
 8006a68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a6c:	81a3      	strh	r3, [r4, #12]
 8006a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a72:	e03e      	b.n	8006af2 <__swsetup_r+0xba>
 8006a74:	4b25      	ldr	r3, [pc, #148]	; (8006b0c <__swsetup_r+0xd4>)
 8006a76:	429c      	cmp	r4, r3
 8006a78:	d101      	bne.n	8006a7e <__swsetup_r+0x46>
 8006a7a:	68ac      	ldr	r4, [r5, #8]
 8006a7c:	e7eb      	b.n	8006a56 <__swsetup_r+0x1e>
 8006a7e:	4b24      	ldr	r3, [pc, #144]	; (8006b10 <__swsetup_r+0xd8>)
 8006a80:	429c      	cmp	r4, r3
 8006a82:	bf08      	it	eq
 8006a84:	68ec      	ldreq	r4, [r5, #12]
 8006a86:	e7e6      	b.n	8006a56 <__swsetup_r+0x1e>
 8006a88:	0758      	lsls	r0, r3, #29
 8006a8a:	d512      	bpl.n	8006ab2 <__swsetup_r+0x7a>
 8006a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a8e:	b141      	cbz	r1, 8006aa2 <__swsetup_r+0x6a>
 8006a90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a94:	4299      	cmp	r1, r3
 8006a96:	d002      	beq.n	8006a9e <__swsetup_r+0x66>
 8006a98:	4630      	mov	r0, r6
 8006a9a:	f000 fa63 	bl	8006f64 <_free_r>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	6363      	str	r3, [r4, #52]	; 0x34
 8006aa2:	89a3      	ldrh	r3, [r4, #12]
 8006aa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006aa8:	81a3      	strh	r3, [r4, #12]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	6063      	str	r3, [r4, #4]
 8006aae:	6923      	ldr	r3, [r4, #16]
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	89a3      	ldrh	r3, [r4, #12]
 8006ab4:	f043 0308 	orr.w	r3, r3, #8
 8006ab8:	81a3      	strh	r3, [r4, #12]
 8006aba:	6923      	ldr	r3, [r4, #16]
 8006abc:	b94b      	cbnz	r3, 8006ad2 <__swsetup_r+0x9a>
 8006abe:	89a3      	ldrh	r3, [r4, #12]
 8006ac0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ac8:	d003      	beq.n	8006ad2 <__swsetup_r+0x9a>
 8006aca:	4621      	mov	r1, r4
 8006acc:	4630      	mov	r0, r6
 8006ace:	f000 fa01 	bl	8006ed4 <__smakebuf_r>
 8006ad2:	89a0      	ldrh	r0, [r4, #12]
 8006ad4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ad8:	f010 0301 	ands.w	r3, r0, #1
 8006adc:	d00a      	beq.n	8006af4 <__swsetup_r+0xbc>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60a3      	str	r3, [r4, #8]
 8006ae2:	6963      	ldr	r3, [r4, #20]
 8006ae4:	425b      	negs	r3, r3
 8006ae6:	61a3      	str	r3, [r4, #24]
 8006ae8:	6923      	ldr	r3, [r4, #16]
 8006aea:	b943      	cbnz	r3, 8006afe <__swsetup_r+0xc6>
 8006aec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006af0:	d1ba      	bne.n	8006a68 <__swsetup_r+0x30>
 8006af2:	bd70      	pop	{r4, r5, r6, pc}
 8006af4:	0781      	lsls	r1, r0, #30
 8006af6:	bf58      	it	pl
 8006af8:	6963      	ldrpl	r3, [r4, #20]
 8006afa:	60a3      	str	r3, [r4, #8]
 8006afc:	e7f4      	b.n	8006ae8 <__swsetup_r+0xb0>
 8006afe:	2000      	movs	r0, #0
 8006b00:	e7f7      	b.n	8006af2 <__swsetup_r+0xba>
 8006b02:	bf00      	nop
 8006b04:	20000010 	.word	0x20000010
 8006b08:	08007f8c 	.word	0x08007f8c
 8006b0c:	08007fac 	.word	0x08007fac
 8006b10:	08007f6c 	.word	0x08007f6c

08006b14 <__sflush_r>:
 8006b14:	898a      	ldrh	r2, [r1, #12]
 8006b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	0710      	lsls	r0, r2, #28
 8006b1e:	460c      	mov	r4, r1
 8006b20:	d458      	bmi.n	8006bd4 <__sflush_r+0xc0>
 8006b22:	684b      	ldr	r3, [r1, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	dc05      	bgt.n	8006b34 <__sflush_r+0x20>
 8006b28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	dc02      	bgt.n	8006b34 <__sflush_r+0x20>
 8006b2e:	2000      	movs	r0, #0
 8006b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b36:	2e00      	cmp	r6, #0
 8006b38:	d0f9      	beq.n	8006b2e <__sflush_r+0x1a>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b40:	682f      	ldr	r7, [r5, #0]
 8006b42:	602b      	str	r3, [r5, #0]
 8006b44:	d032      	beq.n	8006bac <__sflush_r+0x98>
 8006b46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b48:	89a3      	ldrh	r3, [r4, #12]
 8006b4a:	075a      	lsls	r2, r3, #29
 8006b4c:	d505      	bpl.n	8006b5a <__sflush_r+0x46>
 8006b4e:	6863      	ldr	r3, [r4, #4]
 8006b50:	1ac0      	subs	r0, r0, r3
 8006b52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b54:	b10b      	cbz	r3, 8006b5a <__sflush_r+0x46>
 8006b56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b58:	1ac0      	subs	r0, r0, r3
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b60:	6a21      	ldr	r1, [r4, #32]
 8006b62:	4628      	mov	r0, r5
 8006b64:	47b0      	blx	r6
 8006b66:	1c43      	adds	r3, r0, #1
 8006b68:	89a3      	ldrh	r3, [r4, #12]
 8006b6a:	d106      	bne.n	8006b7a <__sflush_r+0x66>
 8006b6c:	6829      	ldr	r1, [r5, #0]
 8006b6e:	291d      	cmp	r1, #29
 8006b70:	d82c      	bhi.n	8006bcc <__sflush_r+0xb8>
 8006b72:	4a2a      	ldr	r2, [pc, #168]	; (8006c1c <__sflush_r+0x108>)
 8006b74:	40ca      	lsrs	r2, r1
 8006b76:	07d6      	lsls	r6, r2, #31
 8006b78:	d528      	bpl.n	8006bcc <__sflush_r+0xb8>
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	6062      	str	r2, [r4, #4]
 8006b7e:	04d9      	lsls	r1, r3, #19
 8006b80:	6922      	ldr	r2, [r4, #16]
 8006b82:	6022      	str	r2, [r4, #0]
 8006b84:	d504      	bpl.n	8006b90 <__sflush_r+0x7c>
 8006b86:	1c42      	adds	r2, r0, #1
 8006b88:	d101      	bne.n	8006b8e <__sflush_r+0x7a>
 8006b8a:	682b      	ldr	r3, [r5, #0]
 8006b8c:	b903      	cbnz	r3, 8006b90 <__sflush_r+0x7c>
 8006b8e:	6560      	str	r0, [r4, #84]	; 0x54
 8006b90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b92:	602f      	str	r7, [r5, #0]
 8006b94:	2900      	cmp	r1, #0
 8006b96:	d0ca      	beq.n	8006b2e <__sflush_r+0x1a>
 8006b98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b9c:	4299      	cmp	r1, r3
 8006b9e:	d002      	beq.n	8006ba6 <__sflush_r+0x92>
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	f000 f9df 	bl	8006f64 <_free_r>
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	6360      	str	r0, [r4, #52]	; 0x34
 8006baa:	e7c1      	b.n	8006b30 <__sflush_r+0x1c>
 8006bac:	6a21      	ldr	r1, [r4, #32]
 8006bae:	2301      	movs	r3, #1
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	47b0      	blx	r6
 8006bb4:	1c41      	adds	r1, r0, #1
 8006bb6:	d1c7      	bne.n	8006b48 <__sflush_r+0x34>
 8006bb8:	682b      	ldr	r3, [r5, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0c4      	beq.n	8006b48 <__sflush_r+0x34>
 8006bbe:	2b1d      	cmp	r3, #29
 8006bc0:	d001      	beq.n	8006bc6 <__sflush_r+0xb2>
 8006bc2:	2b16      	cmp	r3, #22
 8006bc4:	d101      	bne.n	8006bca <__sflush_r+0xb6>
 8006bc6:	602f      	str	r7, [r5, #0]
 8006bc8:	e7b1      	b.n	8006b2e <__sflush_r+0x1a>
 8006bca:	89a3      	ldrh	r3, [r4, #12]
 8006bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bd0:	81a3      	strh	r3, [r4, #12]
 8006bd2:	e7ad      	b.n	8006b30 <__sflush_r+0x1c>
 8006bd4:	690f      	ldr	r7, [r1, #16]
 8006bd6:	2f00      	cmp	r7, #0
 8006bd8:	d0a9      	beq.n	8006b2e <__sflush_r+0x1a>
 8006bda:	0793      	lsls	r3, r2, #30
 8006bdc:	680e      	ldr	r6, [r1, #0]
 8006bde:	bf08      	it	eq
 8006be0:	694b      	ldreq	r3, [r1, #20]
 8006be2:	600f      	str	r7, [r1, #0]
 8006be4:	bf18      	it	ne
 8006be6:	2300      	movne	r3, #0
 8006be8:	eba6 0807 	sub.w	r8, r6, r7
 8006bec:	608b      	str	r3, [r1, #8]
 8006bee:	f1b8 0f00 	cmp.w	r8, #0
 8006bf2:	dd9c      	ble.n	8006b2e <__sflush_r+0x1a>
 8006bf4:	6a21      	ldr	r1, [r4, #32]
 8006bf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bf8:	4643      	mov	r3, r8
 8006bfa:	463a      	mov	r2, r7
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	47b0      	blx	r6
 8006c00:	2800      	cmp	r0, #0
 8006c02:	dc06      	bgt.n	8006c12 <__sflush_r+0xfe>
 8006c04:	89a3      	ldrh	r3, [r4, #12]
 8006c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c0a:	81a3      	strh	r3, [r4, #12]
 8006c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c10:	e78e      	b.n	8006b30 <__sflush_r+0x1c>
 8006c12:	4407      	add	r7, r0
 8006c14:	eba8 0800 	sub.w	r8, r8, r0
 8006c18:	e7e9      	b.n	8006bee <__sflush_r+0xda>
 8006c1a:	bf00      	nop
 8006c1c:	20400001 	.word	0x20400001

08006c20 <_fflush_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	690b      	ldr	r3, [r1, #16]
 8006c24:	4605      	mov	r5, r0
 8006c26:	460c      	mov	r4, r1
 8006c28:	b913      	cbnz	r3, 8006c30 <_fflush_r+0x10>
 8006c2a:	2500      	movs	r5, #0
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	bd38      	pop	{r3, r4, r5, pc}
 8006c30:	b118      	cbz	r0, 8006c3a <_fflush_r+0x1a>
 8006c32:	6983      	ldr	r3, [r0, #24]
 8006c34:	b90b      	cbnz	r3, 8006c3a <_fflush_r+0x1a>
 8006c36:	f000 f887 	bl	8006d48 <__sinit>
 8006c3a:	4b14      	ldr	r3, [pc, #80]	; (8006c8c <_fflush_r+0x6c>)
 8006c3c:	429c      	cmp	r4, r3
 8006c3e:	d11b      	bne.n	8006c78 <_fflush_r+0x58>
 8006c40:	686c      	ldr	r4, [r5, #4]
 8006c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0ef      	beq.n	8006c2a <_fflush_r+0xa>
 8006c4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c4c:	07d0      	lsls	r0, r2, #31
 8006c4e:	d404      	bmi.n	8006c5a <_fflush_r+0x3a>
 8006c50:	0599      	lsls	r1, r3, #22
 8006c52:	d402      	bmi.n	8006c5a <_fflush_r+0x3a>
 8006c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c56:	f000 f915 	bl	8006e84 <__retarget_lock_acquire_recursive>
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	4621      	mov	r1, r4
 8006c5e:	f7ff ff59 	bl	8006b14 <__sflush_r>
 8006c62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c64:	07da      	lsls	r2, r3, #31
 8006c66:	4605      	mov	r5, r0
 8006c68:	d4e0      	bmi.n	8006c2c <_fflush_r+0xc>
 8006c6a:	89a3      	ldrh	r3, [r4, #12]
 8006c6c:	059b      	lsls	r3, r3, #22
 8006c6e:	d4dd      	bmi.n	8006c2c <_fflush_r+0xc>
 8006c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c72:	f000 f908 	bl	8006e86 <__retarget_lock_release_recursive>
 8006c76:	e7d9      	b.n	8006c2c <_fflush_r+0xc>
 8006c78:	4b05      	ldr	r3, [pc, #20]	; (8006c90 <_fflush_r+0x70>)
 8006c7a:	429c      	cmp	r4, r3
 8006c7c:	d101      	bne.n	8006c82 <_fflush_r+0x62>
 8006c7e:	68ac      	ldr	r4, [r5, #8]
 8006c80:	e7df      	b.n	8006c42 <_fflush_r+0x22>
 8006c82:	4b04      	ldr	r3, [pc, #16]	; (8006c94 <_fflush_r+0x74>)
 8006c84:	429c      	cmp	r4, r3
 8006c86:	bf08      	it	eq
 8006c88:	68ec      	ldreq	r4, [r5, #12]
 8006c8a:	e7da      	b.n	8006c42 <_fflush_r+0x22>
 8006c8c:	08007f8c 	.word	0x08007f8c
 8006c90:	08007fac 	.word	0x08007fac
 8006c94:	08007f6c 	.word	0x08007f6c

08006c98 <std>:
 8006c98:	2300      	movs	r3, #0
 8006c9a:	b510      	push	{r4, lr}
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8006ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ca6:	6083      	str	r3, [r0, #8]
 8006ca8:	8181      	strh	r1, [r0, #12]
 8006caa:	6643      	str	r3, [r0, #100]	; 0x64
 8006cac:	81c2      	strh	r2, [r0, #14]
 8006cae:	6183      	str	r3, [r0, #24]
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	2208      	movs	r2, #8
 8006cb4:	305c      	adds	r0, #92	; 0x5c
 8006cb6:	f7ff fd09 	bl	80066cc <memset>
 8006cba:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <std+0x38>)
 8006cbc:	6263      	str	r3, [r4, #36]	; 0x24
 8006cbe:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <std+0x3c>)
 8006cc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cc2:	4b05      	ldr	r3, [pc, #20]	; (8006cd8 <std+0x40>)
 8006cc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cc6:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <std+0x44>)
 8006cc8:	6224      	str	r4, [r4, #32]
 8006cca:	6323      	str	r3, [r4, #48]	; 0x30
 8006ccc:	bd10      	pop	{r4, pc}
 8006cce:	bf00      	nop
 8006cd0:	08007721 	.word	0x08007721
 8006cd4:	08007743 	.word	0x08007743
 8006cd8:	0800777b 	.word	0x0800777b
 8006cdc:	0800779f 	.word	0x0800779f

08006ce0 <_cleanup_r>:
 8006ce0:	4901      	ldr	r1, [pc, #4]	; (8006ce8 <_cleanup_r+0x8>)
 8006ce2:	f000 b8af 	b.w	8006e44 <_fwalk_reent>
 8006ce6:	bf00      	nop
 8006ce8:	08006c21 	.word	0x08006c21

08006cec <__sfmoreglue>:
 8006cec:	b570      	push	{r4, r5, r6, lr}
 8006cee:	2268      	movs	r2, #104	; 0x68
 8006cf0:	1e4d      	subs	r5, r1, #1
 8006cf2:	4355      	muls	r5, r2
 8006cf4:	460e      	mov	r6, r1
 8006cf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cfa:	f000 f99f 	bl	800703c <_malloc_r>
 8006cfe:	4604      	mov	r4, r0
 8006d00:	b140      	cbz	r0, 8006d14 <__sfmoreglue+0x28>
 8006d02:	2100      	movs	r1, #0
 8006d04:	e9c0 1600 	strd	r1, r6, [r0]
 8006d08:	300c      	adds	r0, #12
 8006d0a:	60a0      	str	r0, [r4, #8]
 8006d0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d10:	f7ff fcdc 	bl	80066cc <memset>
 8006d14:	4620      	mov	r0, r4
 8006d16:	bd70      	pop	{r4, r5, r6, pc}

08006d18 <__sfp_lock_acquire>:
 8006d18:	4801      	ldr	r0, [pc, #4]	; (8006d20 <__sfp_lock_acquire+0x8>)
 8006d1a:	f000 b8b3 	b.w	8006e84 <__retarget_lock_acquire_recursive>
 8006d1e:	bf00      	nop
 8006d20:	2000092d 	.word	0x2000092d

08006d24 <__sfp_lock_release>:
 8006d24:	4801      	ldr	r0, [pc, #4]	; (8006d2c <__sfp_lock_release+0x8>)
 8006d26:	f000 b8ae 	b.w	8006e86 <__retarget_lock_release_recursive>
 8006d2a:	bf00      	nop
 8006d2c:	2000092d 	.word	0x2000092d

08006d30 <__sinit_lock_acquire>:
 8006d30:	4801      	ldr	r0, [pc, #4]	; (8006d38 <__sinit_lock_acquire+0x8>)
 8006d32:	f000 b8a7 	b.w	8006e84 <__retarget_lock_acquire_recursive>
 8006d36:	bf00      	nop
 8006d38:	2000092e 	.word	0x2000092e

08006d3c <__sinit_lock_release>:
 8006d3c:	4801      	ldr	r0, [pc, #4]	; (8006d44 <__sinit_lock_release+0x8>)
 8006d3e:	f000 b8a2 	b.w	8006e86 <__retarget_lock_release_recursive>
 8006d42:	bf00      	nop
 8006d44:	2000092e 	.word	0x2000092e

08006d48 <__sinit>:
 8006d48:	b510      	push	{r4, lr}
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	f7ff fff0 	bl	8006d30 <__sinit_lock_acquire>
 8006d50:	69a3      	ldr	r3, [r4, #24]
 8006d52:	b11b      	cbz	r3, 8006d5c <__sinit+0x14>
 8006d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d58:	f7ff bff0 	b.w	8006d3c <__sinit_lock_release>
 8006d5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d60:	6523      	str	r3, [r4, #80]	; 0x50
 8006d62:	4b13      	ldr	r3, [pc, #76]	; (8006db0 <__sinit+0x68>)
 8006d64:	4a13      	ldr	r2, [pc, #76]	; (8006db4 <__sinit+0x6c>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d6a:	42a3      	cmp	r3, r4
 8006d6c:	bf04      	itt	eq
 8006d6e:	2301      	moveq	r3, #1
 8006d70:	61a3      	streq	r3, [r4, #24]
 8006d72:	4620      	mov	r0, r4
 8006d74:	f000 f820 	bl	8006db8 <__sfp>
 8006d78:	6060      	str	r0, [r4, #4]
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	f000 f81c 	bl	8006db8 <__sfp>
 8006d80:	60a0      	str	r0, [r4, #8]
 8006d82:	4620      	mov	r0, r4
 8006d84:	f000 f818 	bl	8006db8 <__sfp>
 8006d88:	2200      	movs	r2, #0
 8006d8a:	60e0      	str	r0, [r4, #12]
 8006d8c:	2104      	movs	r1, #4
 8006d8e:	6860      	ldr	r0, [r4, #4]
 8006d90:	f7ff ff82 	bl	8006c98 <std>
 8006d94:	68a0      	ldr	r0, [r4, #8]
 8006d96:	2201      	movs	r2, #1
 8006d98:	2109      	movs	r1, #9
 8006d9a:	f7ff ff7d 	bl	8006c98 <std>
 8006d9e:	68e0      	ldr	r0, [r4, #12]
 8006da0:	2202      	movs	r2, #2
 8006da2:	2112      	movs	r1, #18
 8006da4:	f7ff ff78 	bl	8006c98 <std>
 8006da8:	2301      	movs	r3, #1
 8006daa:	61a3      	str	r3, [r4, #24]
 8006dac:	e7d2      	b.n	8006d54 <__sinit+0xc>
 8006dae:	bf00      	nop
 8006db0:	08007f68 	.word	0x08007f68
 8006db4:	08006ce1 	.word	0x08006ce1

08006db8 <__sfp>:
 8006db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dba:	4607      	mov	r7, r0
 8006dbc:	f7ff ffac 	bl	8006d18 <__sfp_lock_acquire>
 8006dc0:	4b1e      	ldr	r3, [pc, #120]	; (8006e3c <__sfp+0x84>)
 8006dc2:	681e      	ldr	r6, [r3, #0]
 8006dc4:	69b3      	ldr	r3, [r6, #24]
 8006dc6:	b913      	cbnz	r3, 8006dce <__sfp+0x16>
 8006dc8:	4630      	mov	r0, r6
 8006dca:	f7ff ffbd 	bl	8006d48 <__sinit>
 8006dce:	3648      	adds	r6, #72	; 0x48
 8006dd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	d503      	bpl.n	8006de0 <__sfp+0x28>
 8006dd8:	6833      	ldr	r3, [r6, #0]
 8006dda:	b30b      	cbz	r3, 8006e20 <__sfp+0x68>
 8006ddc:	6836      	ldr	r6, [r6, #0]
 8006dde:	e7f7      	b.n	8006dd0 <__sfp+0x18>
 8006de0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006de4:	b9d5      	cbnz	r5, 8006e1c <__sfp+0x64>
 8006de6:	4b16      	ldr	r3, [pc, #88]	; (8006e40 <__sfp+0x88>)
 8006de8:	60e3      	str	r3, [r4, #12]
 8006dea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006dee:	6665      	str	r5, [r4, #100]	; 0x64
 8006df0:	f000 f847 	bl	8006e82 <__retarget_lock_init_recursive>
 8006df4:	f7ff ff96 	bl	8006d24 <__sfp_lock_release>
 8006df8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006dfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e00:	6025      	str	r5, [r4, #0]
 8006e02:	61a5      	str	r5, [r4, #24]
 8006e04:	2208      	movs	r2, #8
 8006e06:	4629      	mov	r1, r5
 8006e08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e0c:	f7ff fc5e 	bl	80066cc <memset>
 8006e10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e18:	4620      	mov	r0, r4
 8006e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e1c:	3468      	adds	r4, #104	; 0x68
 8006e1e:	e7d9      	b.n	8006dd4 <__sfp+0x1c>
 8006e20:	2104      	movs	r1, #4
 8006e22:	4638      	mov	r0, r7
 8006e24:	f7ff ff62 	bl	8006cec <__sfmoreglue>
 8006e28:	4604      	mov	r4, r0
 8006e2a:	6030      	str	r0, [r6, #0]
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d1d5      	bne.n	8006ddc <__sfp+0x24>
 8006e30:	f7ff ff78 	bl	8006d24 <__sfp_lock_release>
 8006e34:	230c      	movs	r3, #12
 8006e36:	603b      	str	r3, [r7, #0]
 8006e38:	e7ee      	b.n	8006e18 <__sfp+0x60>
 8006e3a:	bf00      	nop
 8006e3c:	08007f68 	.word	0x08007f68
 8006e40:	ffff0001 	.word	0xffff0001

08006e44 <_fwalk_reent>:
 8006e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e48:	4606      	mov	r6, r0
 8006e4a:	4688      	mov	r8, r1
 8006e4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e50:	2700      	movs	r7, #0
 8006e52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e56:	f1b9 0901 	subs.w	r9, r9, #1
 8006e5a:	d505      	bpl.n	8006e68 <_fwalk_reent+0x24>
 8006e5c:	6824      	ldr	r4, [r4, #0]
 8006e5e:	2c00      	cmp	r4, #0
 8006e60:	d1f7      	bne.n	8006e52 <_fwalk_reent+0xe>
 8006e62:	4638      	mov	r0, r7
 8006e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e68:	89ab      	ldrh	r3, [r5, #12]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d907      	bls.n	8006e7e <_fwalk_reent+0x3a>
 8006e6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e72:	3301      	adds	r3, #1
 8006e74:	d003      	beq.n	8006e7e <_fwalk_reent+0x3a>
 8006e76:	4629      	mov	r1, r5
 8006e78:	4630      	mov	r0, r6
 8006e7a:	47c0      	blx	r8
 8006e7c:	4307      	orrs	r7, r0
 8006e7e:	3568      	adds	r5, #104	; 0x68
 8006e80:	e7e9      	b.n	8006e56 <_fwalk_reent+0x12>

08006e82 <__retarget_lock_init_recursive>:
 8006e82:	4770      	bx	lr

08006e84 <__retarget_lock_acquire_recursive>:
 8006e84:	4770      	bx	lr

08006e86 <__retarget_lock_release_recursive>:
 8006e86:	4770      	bx	lr

08006e88 <__swhatbuf_r>:
 8006e88:	b570      	push	{r4, r5, r6, lr}
 8006e8a:	460e      	mov	r6, r1
 8006e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e90:	2900      	cmp	r1, #0
 8006e92:	b096      	sub	sp, #88	; 0x58
 8006e94:	4614      	mov	r4, r2
 8006e96:	461d      	mov	r5, r3
 8006e98:	da08      	bge.n	8006eac <__swhatbuf_r+0x24>
 8006e9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	602a      	str	r2, [r5, #0]
 8006ea2:	061a      	lsls	r2, r3, #24
 8006ea4:	d410      	bmi.n	8006ec8 <__swhatbuf_r+0x40>
 8006ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eaa:	e00e      	b.n	8006eca <__swhatbuf_r+0x42>
 8006eac:	466a      	mov	r2, sp
 8006eae:	f000 fc9d 	bl	80077ec <_fstat_r>
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	dbf1      	blt.n	8006e9a <__swhatbuf_r+0x12>
 8006eb6:	9a01      	ldr	r2, [sp, #4]
 8006eb8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ebc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ec0:	425a      	negs	r2, r3
 8006ec2:	415a      	adcs	r2, r3
 8006ec4:	602a      	str	r2, [r5, #0]
 8006ec6:	e7ee      	b.n	8006ea6 <__swhatbuf_r+0x1e>
 8006ec8:	2340      	movs	r3, #64	; 0x40
 8006eca:	2000      	movs	r0, #0
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	b016      	add	sp, #88	; 0x58
 8006ed0:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ed4 <__smakebuf_r>:
 8006ed4:	898b      	ldrh	r3, [r1, #12]
 8006ed6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ed8:	079d      	lsls	r5, r3, #30
 8006eda:	4606      	mov	r6, r0
 8006edc:	460c      	mov	r4, r1
 8006ede:	d507      	bpl.n	8006ef0 <__smakebuf_r+0x1c>
 8006ee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	6123      	str	r3, [r4, #16]
 8006ee8:	2301      	movs	r3, #1
 8006eea:	6163      	str	r3, [r4, #20]
 8006eec:	b002      	add	sp, #8
 8006eee:	bd70      	pop	{r4, r5, r6, pc}
 8006ef0:	ab01      	add	r3, sp, #4
 8006ef2:	466a      	mov	r2, sp
 8006ef4:	f7ff ffc8 	bl	8006e88 <__swhatbuf_r>
 8006ef8:	9900      	ldr	r1, [sp, #0]
 8006efa:	4605      	mov	r5, r0
 8006efc:	4630      	mov	r0, r6
 8006efe:	f000 f89d 	bl	800703c <_malloc_r>
 8006f02:	b948      	cbnz	r0, 8006f18 <__smakebuf_r+0x44>
 8006f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f08:	059a      	lsls	r2, r3, #22
 8006f0a:	d4ef      	bmi.n	8006eec <__smakebuf_r+0x18>
 8006f0c:	f023 0303 	bic.w	r3, r3, #3
 8006f10:	f043 0302 	orr.w	r3, r3, #2
 8006f14:	81a3      	strh	r3, [r4, #12]
 8006f16:	e7e3      	b.n	8006ee0 <__smakebuf_r+0xc>
 8006f18:	4b0d      	ldr	r3, [pc, #52]	; (8006f50 <__smakebuf_r+0x7c>)
 8006f1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	6020      	str	r0, [r4, #0]
 8006f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f24:	81a3      	strh	r3, [r4, #12]
 8006f26:	9b00      	ldr	r3, [sp, #0]
 8006f28:	6163      	str	r3, [r4, #20]
 8006f2a:	9b01      	ldr	r3, [sp, #4]
 8006f2c:	6120      	str	r0, [r4, #16]
 8006f2e:	b15b      	cbz	r3, 8006f48 <__smakebuf_r+0x74>
 8006f30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f34:	4630      	mov	r0, r6
 8006f36:	f000 fc6b 	bl	8007810 <_isatty_r>
 8006f3a:	b128      	cbz	r0, 8006f48 <__smakebuf_r+0x74>
 8006f3c:	89a3      	ldrh	r3, [r4, #12]
 8006f3e:	f023 0303 	bic.w	r3, r3, #3
 8006f42:	f043 0301 	orr.w	r3, r3, #1
 8006f46:	81a3      	strh	r3, [r4, #12]
 8006f48:	89a0      	ldrh	r0, [r4, #12]
 8006f4a:	4305      	orrs	r5, r0
 8006f4c:	81a5      	strh	r5, [r4, #12]
 8006f4e:	e7cd      	b.n	8006eec <__smakebuf_r+0x18>
 8006f50:	08006ce1 	.word	0x08006ce1

08006f54 <malloc>:
 8006f54:	4b02      	ldr	r3, [pc, #8]	; (8006f60 <malloc+0xc>)
 8006f56:	4601      	mov	r1, r0
 8006f58:	6818      	ldr	r0, [r3, #0]
 8006f5a:	f000 b86f 	b.w	800703c <_malloc_r>
 8006f5e:	bf00      	nop
 8006f60:	20000010 	.word	0x20000010

08006f64 <_free_r>:
 8006f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f66:	2900      	cmp	r1, #0
 8006f68:	d044      	beq.n	8006ff4 <_free_r+0x90>
 8006f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f6e:	9001      	str	r0, [sp, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f1a1 0404 	sub.w	r4, r1, #4
 8006f76:	bfb8      	it	lt
 8006f78:	18e4      	addlt	r4, r4, r3
 8006f7a:	f000 fc6b 	bl	8007854 <__malloc_lock>
 8006f7e:	4a1e      	ldr	r2, [pc, #120]	; (8006ff8 <_free_r+0x94>)
 8006f80:	9801      	ldr	r0, [sp, #4]
 8006f82:	6813      	ldr	r3, [r2, #0]
 8006f84:	b933      	cbnz	r3, 8006f94 <_free_r+0x30>
 8006f86:	6063      	str	r3, [r4, #4]
 8006f88:	6014      	str	r4, [r2, #0]
 8006f8a:	b003      	add	sp, #12
 8006f8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f90:	f000 bc66 	b.w	8007860 <__malloc_unlock>
 8006f94:	42a3      	cmp	r3, r4
 8006f96:	d908      	bls.n	8006faa <_free_r+0x46>
 8006f98:	6825      	ldr	r5, [r4, #0]
 8006f9a:	1961      	adds	r1, r4, r5
 8006f9c:	428b      	cmp	r3, r1
 8006f9e:	bf01      	itttt	eq
 8006fa0:	6819      	ldreq	r1, [r3, #0]
 8006fa2:	685b      	ldreq	r3, [r3, #4]
 8006fa4:	1949      	addeq	r1, r1, r5
 8006fa6:	6021      	streq	r1, [r4, #0]
 8006fa8:	e7ed      	b.n	8006f86 <_free_r+0x22>
 8006faa:	461a      	mov	r2, r3
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	b10b      	cbz	r3, 8006fb4 <_free_r+0x50>
 8006fb0:	42a3      	cmp	r3, r4
 8006fb2:	d9fa      	bls.n	8006faa <_free_r+0x46>
 8006fb4:	6811      	ldr	r1, [r2, #0]
 8006fb6:	1855      	adds	r5, r2, r1
 8006fb8:	42a5      	cmp	r5, r4
 8006fba:	d10b      	bne.n	8006fd4 <_free_r+0x70>
 8006fbc:	6824      	ldr	r4, [r4, #0]
 8006fbe:	4421      	add	r1, r4
 8006fc0:	1854      	adds	r4, r2, r1
 8006fc2:	42a3      	cmp	r3, r4
 8006fc4:	6011      	str	r1, [r2, #0]
 8006fc6:	d1e0      	bne.n	8006f8a <_free_r+0x26>
 8006fc8:	681c      	ldr	r4, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	6053      	str	r3, [r2, #4]
 8006fce:	4421      	add	r1, r4
 8006fd0:	6011      	str	r1, [r2, #0]
 8006fd2:	e7da      	b.n	8006f8a <_free_r+0x26>
 8006fd4:	d902      	bls.n	8006fdc <_free_r+0x78>
 8006fd6:	230c      	movs	r3, #12
 8006fd8:	6003      	str	r3, [r0, #0]
 8006fda:	e7d6      	b.n	8006f8a <_free_r+0x26>
 8006fdc:	6825      	ldr	r5, [r4, #0]
 8006fde:	1961      	adds	r1, r4, r5
 8006fe0:	428b      	cmp	r3, r1
 8006fe2:	bf04      	itt	eq
 8006fe4:	6819      	ldreq	r1, [r3, #0]
 8006fe6:	685b      	ldreq	r3, [r3, #4]
 8006fe8:	6063      	str	r3, [r4, #4]
 8006fea:	bf04      	itt	eq
 8006fec:	1949      	addeq	r1, r1, r5
 8006fee:	6021      	streq	r1, [r4, #0]
 8006ff0:	6054      	str	r4, [r2, #4]
 8006ff2:	e7ca      	b.n	8006f8a <_free_r+0x26>
 8006ff4:	b003      	add	sp, #12
 8006ff6:	bd30      	pop	{r4, r5, pc}
 8006ff8:	20000930 	.word	0x20000930

08006ffc <sbrk_aligned>:
 8006ffc:	b570      	push	{r4, r5, r6, lr}
 8006ffe:	4e0e      	ldr	r6, [pc, #56]	; (8007038 <sbrk_aligned+0x3c>)
 8007000:	460c      	mov	r4, r1
 8007002:	6831      	ldr	r1, [r6, #0]
 8007004:	4605      	mov	r5, r0
 8007006:	b911      	cbnz	r1, 800700e <sbrk_aligned+0x12>
 8007008:	f000 fb7a 	bl	8007700 <_sbrk_r>
 800700c:	6030      	str	r0, [r6, #0]
 800700e:	4621      	mov	r1, r4
 8007010:	4628      	mov	r0, r5
 8007012:	f000 fb75 	bl	8007700 <_sbrk_r>
 8007016:	1c43      	adds	r3, r0, #1
 8007018:	d00a      	beq.n	8007030 <sbrk_aligned+0x34>
 800701a:	1cc4      	adds	r4, r0, #3
 800701c:	f024 0403 	bic.w	r4, r4, #3
 8007020:	42a0      	cmp	r0, r4
 8007022:	d007      	beq.n	8007034 <sbrk_aligned+0x38>
 8007024:	1a21      	subs	r1, r4, r0
 8007026:	4628      	mov	r0, r5
 8007028:	f000 fb6a 	bl	8007700 <_sbrk_r>
 800702c:	3001      	adds	r0, #1
 800702e:	d101      	bne.n	8007034 <sbrk_aligned+0x38>
 8007030:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007034:	4620      	mov	r0, r4
 8007036:	bd70      	pop	{r4, r5, r6, pc}
 8007038:	20000934 	.word	0x20000934

0800703c <_malloc_r>:
 800703c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007040:	1ccd      	adds	r5, r1, #3
 8007042:	f025 0503 	bic.w	r5, r5, #3
 8007046:	3508      	adds	r5, #8
 8007048:	2d0c      	cmp	r5, #12
 800704a:	bf38      	it	cc
 800704c:	250c      	movcc	r5, #12
 800704e:	2d00      	cmp	r5, #0
 8007050:	4607      	mov	r7, r0
 8007052:	db01      	blt.n	8007058 <_malloc_r+0x1c>
 8007054:	42a9      	cmp	r1, r5
 8007056:	d905      	bls.n	8007064 <_malloc_r+0x28>
 8007058:	230c      	movs	r3, #12
 800705a:	603b      	str	r3, [r7, #0]
 800705c:	2600      	movs	r6, #0
 800705e:	4630      	mov	r0, r6
 8007060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007064:	4e2e      	ldr	r6, [pc, #184]	; (8007120 <_malloc_r+0xe4>)
 8007066:	f000 fbf5 	bl	8007854 <__malloc_lock>
 800706a:	6833      	ldr	r3, [r6, #0]
 800706c:	461c      	mov	r4, r3
 800706e:	bb34      	cbnz	r4, 80070be <_malloc_r+0x82>
 8007070:	4629      	mov	r1, r5
 8007072:	4638      	mov	r0, r7
 8007074:	f7ff ffc2 	bl	8006ffc <sbrk_aligned>
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	4604      	mov	r4, r0
 800707c:	d14d      	bne.n	800711a <_malloc_r+0xde>
 800707e:	6834      	ldr	r4, [r6, #0]
 8007080:	4626      	mov	r6, r4
 8007082:	2e00      	cmp	r6, #0
 8007084:	d140      	bne.n	8007108 <_malloc_r+0xcc>
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	4631      	mov	r1, r6
 800708a:	4638      	mov	r0, r7
 800708c:	eb04 0803 	add.w	r8, r4, r3
 8007090:	f000 fb36 	bl	8007700 <_sbrk_r>
 8007094:	4580      	cmp	r8, r0
 8007096:	d13a      	bne.n	800710e <_malloc_r+0xd2>
 8007098:	6821      	ldr	r1, [r4, #0]
 800709a:	3503      	adds	r5, #3
 800709c:	1a6d      	subs	r5, r5, r1
 800709e:	f025 0503 	bic.w	r5, r5, #3
 80070a2:	3508      	adds	r5, #8
 80070a4:	2d0c      	cmp	r5, #12
 80070a6:	bf38      	it	cc
 80070a8:	250c      	movcc	r5, #12
 80070aa:	4629      	mov	r1, r5
 80070ac:	4638      	mov	r0, r7
 80070ae:	f7ff ffa5 	bl	8006ffc <sbrk_aligned>
 80070b2:	3001      	adds	r0, #1
 80070b4:	d02b      	beq.n	800710e <_malloc_r+0xd2>
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	442b      	add	r3, r5
 80070ba:	6023      	str	r3, [r4, #0]
 80070bc:	e00e      	b.n	80070dc <_malloc_r+0xa0>
 80070be:	6822      	ldr	r2, [r4, #0]
 80070c0:	1b52      	subs	r2, r2, r5
 80070c2:	d41e      	bmi.n	8007102 <_malloc_r+0xc6>
 80070c4:	2a0b      	cmp	r2, #11
 80070c6:	d916      	bls.n	80070f6 <_malloc_r+0xba>
 80070c8:	1961      	adds	r1, r4, r5
 80070ca:	42a3      	cmp	r3, r4
 80070cc:	6025      	str	r5, [r4, #0]
 80070ce:	bf18      	it	ne
 80070d0:	6059      	strne	r1, [r3, #4]
 80070d2:	6863      	ldr	r3, [r4, #4]
 80070d4:	bf08      	it	eq
 80070d6:	6031      	streq	r1, [r6, #0]
 80070d8:	5162      	str	r2, [r4, r5]
 80070da:	604b      	str	r3, [r1, #4]
 80070dc:	4638      	mov	r0, r7
 80070de:	f104 060b 	add.w	r6, r4, #11
 80070e2:	f000 fbbd 	bl	8007860 <__malloc_unlock>
 80070e6:	f026 0607 	bic.w	r6, r6, #7
 80070ea:	1d23      	adds	r3, r4, #4
 80070ec:	1af2      	subs	r2, r6, r3
 80070ee:	d0b6      	beq.n	800705e <_malloc_r+0x22>
 80070f0:	1b9b      	subs	r3, r3, r6
 80070f2:	50a3      	str	r3, [r4, r2]
 80070f4:	e7b3      	b.n	800705e <_malloc_r+0x22>
 80070f6:	6862      	ldr	r2, [r4, #4]
 80070f8:	42a3      	cmp	r3, r4
 80070fa:	bf0c      	ite	eq
 80070fc:	6032      	streq	r2, [r6, #0]
 80070fe:	605a      	strne	r2, [r3, #4]
 8007100:	e7ec      	b.n	80070dc <_malloc_r+0xa0>
 8007102:	4623      	mov	r3, r4
 8007104:	6864      	ldr	r4, [r4, #4]
 8007106:	e7b2      	b.n	800706e <_malloc_r+0x32>
 8007108:	4634      	mov	r4, r6
 800710a:	6876      	ldr	r6, [r6, #4]
 800710c:	e7b9      	b.n	8007082 <_malloc_r+0x46>
 800710e:	230c      	movs	r3, #12
 8007110:	603b      	str	r3, [r7, #0]
 8007112:	4638      	mov	r0, r7
 8007114:	f000 fba4 	bl	8007860 <__malloc_unlock>
 8007118:	e7a1      	b.n	800705e <_malloc_r+0x22>
 800711a:	6025      	str	r5, [r4, #0]
 800711c:	e7de      	b.n	80070dc <_malloc_r+0xa0>
 800711e:	bf00      	nop
 8007120:	20000930 	.word	0x20000930

08007124 <__sfputc_r>:
 8007124:	6893      	ldr	r3, [r2, #8]
 8007126:	3b01      	subs	r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	b410      	push	{r4}
 800712c:	6093      	str	r3, [r2, #8]
 800712e:	da08      	bge.n	8007142 <__sfputc_r+0x1e>
 8007130:	6994      	ldr	r4, [r2, #24]
 8007132:	42a3      	cmp	r3, r4
 8007134:	db01      	blt.n	800713a <__sfputc_r+0x16>
 8007136:	290a      	cmp	r1, #10
 8007138:	d103      	bne.n	8007142 <__sfputc_r+0x1e>
 800713a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800713e:	f7ff bc29 	b.w	8006994 <__swbuf_r>
 8007142:	6813      	ldr	r3, [r2, #0]
 8007144:	1c58      	adds	r0, r3, #1
 8007146:	6010      	str	r0, [r2, #0]
 8007148:	7019      	strb	r1, [r3, #0]
 800714a:	4608      	mov	r0, r1
 800714c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007150:	4770      	bx	lr

08007152 <__sfputs_r>:
 8007152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007154:	4606      	mov	r6, r0
 8007156:	460f      	mov	r7, r1
 8007158:	4614      	mov	r4, r2
 800715a:	18d5      	adds	r5, r2, r3
 800715c:	42ac      	cmp	r4, r5
 800715e:	d101      	bne.n	8007164 <__sfputs_r+0x12>
 8007160:	2000      	movs	r0, #0
 8007162:	e007      	b.n	8007174 <__sfputs_r+0x22>
 8007164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007168:	463a      	mov	r2, r7
 800716a:	4630      	mov	r0, r6
 800716c:	f7ff ffda 	bl	8007124 <__sfputc_r>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d1f3      	bne.n	800715c <__sfputs_r+0xa>
 8007174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007178 <_vfiprintf_r>:
 8007178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717c:	460d      	mov	r5, r1
 800717e:	b09d      	sub	sp, #116	; 0x74
 8007180:	4614      	mov	r4, r2
 8007182:	4698      	mov	r8, r3
 8007184:	4606      	mov	r6, r0
 8007186:	b118      	cbz	r0, 8007190 <_vfiprintf_r+0x18>
 8007188:	6983      	ldr	r3, [r0, #24]
 800718a:	b90b      	cbnz	r3, 8007190 <_vfiprintf_r+0x18>
 800718c:	f7ff fddc 	bl	8006d48 <__sinit>
 8007190:	4b89      	ldr	r3, [pc, #548]	; (80073b8 <_vfiprintf_r+0x240>)
 8007192:	429d      	cmp	r5, r3
 8007194:	d11b      	bne.n	80071ce <_vfiprintf_r+0x56>
 8007196:	6875      	ldr	r5, [r6, #4]
 8007198:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800719a:	07d9      	lsls	r1, r3, #31
 800719c:	d405      	bmi.n	80071aa <_vfiprintf_r+0x32>
 800719e:	89ab      	ldrh	r3, [r5, #12]
 80071a0:	059a      	lsls	r2, r3, #22
 80071a2:	d402      	bmi.n	80071aa <_vfiprintf_r+0x32>
 80071a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071a6:	f7ff fe6d 	bl	8006e84 <__retarget_lock_acquire_recursive>
 80071aa:	89ab      	ldrh	r3, [r5, #12]
 80071ac:	071b      	lsls	r3, r3, #28
 80071ae:	d501      	bpl.n	80071b4 <_vfiprintf_r+0x3c>
 80071b0:	692b      	ldr	r3, [r5, #16]
 80071b2:	b9eb      	cbnz	r3, 80071f0 <_vfiprintf_r+0x78>
 80071b4:	4629      	mov	r1, r5
 80071b6:	4630      	mov	r0, r6
 80071b8:	f7ff fc3e 	bl	8006a38 <__swsetup_r>
 80071bc:	b1c0      	cbz	r0, 80071f0 <_vfiprintf_r+0x78>
 80071be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071c0:	07dc      	lsls	r4, r3, #31
 80071c2:	d50e      	bpl.n	80071e2 <_vfiprintf_r+0x6a>
 80071c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071c8:	b01d      	add	sp, #116	; 0x74
 80071ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ce:	4b7b      	ldr	r3, [pc, #492]	; (80073bc <_vfiprintf_r+0x244>)
 80071d0:	429d      	cmp	r5, r3
 80071d2:	d101      	bne.n	80071d8 <_vfiprintf_r+0x60>
 80071d4:	68b5      	ldr	r5, [r6, #8]
 80071d6:	e7df      	b.n	8007198 <_vfiprintf_r+0x20>
 80071d8:	4b79      	ldr	r3, [pc, #484]	; (80073c0 <_vfiprintf_r+0x248>)
 80071da:	429d      	cmp	r5, r3
 80071dc:	bf08      	it	eq
 80071de:	68f5      	ldreq	r5, [r6, #12]
 80071e0:	e7da      	b.n	8007198 <_vfiprintf_r+0x20>
 80071e2:	89ab      	ldrh	r3, [r5, #12]
 80071e4:	0598      	lsls	r0, r3, #22
 80071e6:	d4ed      	bmi.n	80071c4 <_vfiprintf_r+0x4c>
 80071e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071ea:	f7ff fe4c 	bl	8006e86 <__retarget_lock_release_recursive>
 80071ee:	e7e9      	b.n	80071c4 <_vfiprintf_r+0x4c>
 80071f0:	2300      	movs	r3, #0
 80071f2:	9309      	str	r3, [sp, #36]	; 0x24
 80071f4:	2320      	movs	r3, #32
 80071f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80071fe:	2330      	movs	r3, #48	; 0x30
 8007200:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80073c4 <_vfiprintf_r+0x24c>
 8007204:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007208:	f04f 0901 	mov.w	r9, #1
 800720c:	4623      	mov	r3, r4
 800720e:	469a      	mov	sl, r3
 8007210:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007214:	b10a      	cbz	r2, 800721a <_vfiprintf_r+0xa2>
 8007216:	2a25      	cmp	r2, #37	; 0x25
 8007218:	d1f9      	bne.n	800720e <_vfiprintf_r+0x96>
 800721a:	ebba 0b04 	subs.w	fp, sl, r4
 800721e:	d00b      	beq.n	8007238 <_vfiprintf_r+0xc0>
 8007220:	465b      	mov	r3, fp
 8007222:	4622      	mov	r2, r4
 8007224:	4629      	mov	r1, r5
 8007226:	4630      	mov	r0, r6
 8007228:	f7ff ff93 	bl	8007152 <__sfputs_r>
 800722c:	3001      	adds	r0, #1
 800722e:	f000 80aa 	beq.w	8007386 <_vfiprintf_r+0x20e>
 8007232:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007234:	445a      	add	r2, fp
 8007236:	9209      	str	r2, [sp, #36]	; 0x24
 8007238:	f89a 3000 	ldrb.w	r3, [sl]
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 80a2 	beq.w	8007386 <_vfiprintf_r+0x20e>
 8007242:	2300      	movs	r3, #0
 8007244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800724c:	f10a 0a01 	add.w	sl, sl, #1
 8007250:	9304      	str	r3, [sp, #16]
 8007252:	9307      	str	r3, [sp, #28]
 8007254:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007258:	931a      	str	r3, [sp, #104]	; 0x68
 800725a:	4654      	mov	r4, sl
 800725c:	2205      	movs	r2, #5
 800725e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007262:	4858      	ldr	r0, [pc, #352]	; (80073c4 <_vfiprintf_r+0x24c>)
 8007264:	f7f8 ffd4 	bl	8000210 <memchr>
 8007268:	9a04      	ldr	r2, [sp, #16]
 800726a:	b9d8      	cbnz	r0, 80072a4 <_vfiprintf_r+0x12c>
 800726c:	06d1      	lsls	r1, r2, #27
 800726e:	bf44      	itt	mi
 8007270:	2320      	movmi	r3, #32
 8007272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007276:	0713      	lsls	r3, r2, #28
 8007278:	bf44      	itt	mi
 800727a:	232b      	movmi	r3, #43	; 0x2b
 800727c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007280:	f89a 3000 	ldrb.w	r3, [sl]
 8007284:	2b2a      	cmp	r3, #42	; 0x2a
 8007286:	d015      	beq.n	80072b4 <_vfiprintf_r+0x13c>
 8007288:	9a07      	ldr	r2, [sp, #28]
 800728a:	4654      	mov	r4, sl
 800728c:	2000      	movs	r0, #0
 800728e:	f04f 0c0a 	mov.w	ip, #10
 8007292:	4621      	mov	r1, r4
 8007294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007298:	3b30      	subs	r3, #48	; 0x30
 800729a:	2b09      	cmp	r3, #9
 800729c:	d94e      	bls.n	800733c <_vfiprintf_r+0x1c4>
 800729e:	b1b0      	cbz	r0, 80072ce <_vfiprintf_r+0x156>
 80072a0:	9207      	str	r2, [sp, #28]
 80072a2:	e014      	b.n	80072ce <_vfiprintf_r+0x156>
 80072a4:	eba0 0308 	sub.w	r3, r0, r8
 80072a8:	fa09 f303 	lsl.w	r3, r9, r3
 80072ac:	4313      	orrs	r3, r2
 80072ae:	9304      	str	r3, [sp, #16]
 80072b0:	46a2      	mov	sl, r4
 80072b2:	e7d2      	b.n	800725a <_vfiprintf_r+0xe2>
 80072b4:	9b03      	ldr	r3, [sp, #12]
 80072b6:	1d19      	adds	r1, r3, #4
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	9103      	str	r1, [sp, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	bfbb      	ittet	lt
 80072c0:	425b      	neglt	r3, r3
 80072c2:	f042 0202 	orrlt.w	r2, r2, #2
 80072c6:	9307      	strge	r3, [sp, #28]
 80072c8:	9307      	strlt	r3, [sp, #28]
 80072ca:	bfb8      	it	lt
 80072cc:	9204      	strlt	r2, [sp, #16]
 80072ce:	7823      	ldrb	r3, [r4, #0]
 80072d0:	2b2e      	cmp	r3, #46	; 0x2e
 80072d2:	d10c      	bne.n	80072ee <_vfiprintf_r+0x176>
 80072d4:	7863      	ldrb	r3, [r4, #1]
 80072d6:	2b2a      	cmp	r3, #42	; 0x2a
 80072d8:	d135      	bne.n	8007346 <_vfiprintf_r+0x1ce>
 80072da:	9b03      	ldr	r3, [sp, #12]
 80072dc:	1d1a      	adds	r2, r3, #4
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	9203      	str	r2, [sp, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	bfb8      	it	lt
 80072e6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80072ea:	3402      	adds	r4, #2
 80072ec:	9305      	str	r3, [sp, #20]
 80072ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80073d4 <_vfiprintf_r+0x25c>
 80072f2:	7821      	ldrb	r1, [r4, #0]
 80072f4:	2203      	movs	r2, #3
 80072f6:	4650      	mov	r0, sl
 80072f8:	f7f8 ff8a 	bl	8000210 <memchr>
 80072fc:	b140      	cbz	r0, 8007310 <_vfiprintf_r+0x198>
 80072fe:	2340      	movs	r3, #64	; 0x40
 8007300:	eba0 000a 	sub.w	r0, r0, sl
 8007304:	fa03 f000 	lsl.w	r0, r3, r0
 8007308:	9b04      	ldr	r3, [sp, #16]
 800730a:	4303      	orrs	r3, r0
 800730c:	3401      	adds	r4, #1
 800730e:	9304      	str	r3, [sp, #16]
 8007310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007314:	482c      	ldr	r0, [pc, #176]	; (80073c8 <_vfiprintf_r+0x250>)
 8007316:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800731a:	2206      	movs	r2, #6
 800731c:	f7f8 ff78 	bl	8000210 <memchr>
 8007320:	2800      	cmp	r0, #0
 8007322:	d03f      	beq.n	80073a4 <_vfiprintf_r+0x22c>
 8007324:	4b29      	ldr	r3, [pc, #164]	; (80073cc <_vfiprintf_r+0x254>)
 8007326:	bb1b      	cbnz	r3, 8007370 <_vfiprintf_r+0x1f8>
 8007328:	9b03      	ldr	r3, [sp, #12]
 800732a:	3307      	adds	r3, #7
 800732c:	f023 0307 	bic.w	r3, r3, #7
 8007330:	3308      	adds	r3, #8
 8007332:	9303      	str	r3, [sp, #12]
 8007334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007336:	443b      	add	r3, r7
 8007338:	9309      	str	r3, [sp, #36]	; 0x24
 800733a:	e767      	b.n	800720c <_vfiprintf_r+0x94>
 800733c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007340:	460c      	mov	r4, r1
 8007342:	2001      	movs	r0, #1
 8007344:	e7a5      	b.n	8007292 <_vfiprintf_r+0x11a>
 8007346:	2300      	movs	r3, #0
 8007348:	3401      	adds	r4, #1
 800734a:	9305      	str	r3, [sp, #20]
 800734c:	4619      	mov	r1, r3
 800734e:	f04f 0c0a 	mov.w	ip, #10
 8007352:	4620      	mov	r0, r4
 8007354:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007358:	3a30      	subs	r2, #48	; 0x30
 800735a:	2a09      	cmp	r2, #9
 800735c:	d903      	bls.n	8007366 <_vfiprintf_r+0x1ee>
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0c5      	beq.n	80072ee <_vfiprintf_r+0x176>
 8007362:	9105      	str	r1, [sp, #20]
 8007364:	e7c3      	b.n	80072ee <_vfiprintf_r+0x176>
 8007366:	fb0c 2101 	mla	r1, ip, r1, r2
 800736a:	4604      	mov	r4, r0
 800736c:	2301      	movs	r3, #1
 800736e:	e7f0      	b.n	8007352 <_vfiprintf_r+0x1da>
 8007370:	ab03      	add	r3, sp, #12
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	462a      	mov	r2, r5
 8007376:	4b16      	ldr	r3, [pc, #88]	; (80073d0 <_vfiprintf_r+0x258>)
 8007378:	a904      	add	r1, sp, #16
 800737a:	4630      	mov	r0, r6
 800737c:	f3af 8000 	nop.w
 8007380:	4607      	mov	r7, r0
 8007382:	1c78      	adds	r0, r7, #1
 8007384:	d1d6      	bne.n	8007334 <_vfiprintf_r+0x1bc>
 8007386:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007388:	07d9      	lsls	r1, r3, #31
 800738a:	d405      	bmi.n	8007398 <_vfiprintf_r+0x220>
 800738c:	89ab      	ldrh	r3, [r5, #12]
 800738e:	059a      	lsls	r2, r3, #22
 8007390:	d402      	bmi.n	8007398 <_vfiprintf_r+0x220>
 8007392:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007394:	f7ff fd77 	bl	8006e86 <__retarget_lock_release_recursive>
 8007398:	89ab      	ldrh	r3, [r5, #12]
 800739a:	065b      	lsls	r3, r3, #25
 800739c:	f53f af12 	bmi.w	80071c4 <_vfiprintf_r+0x4c>
 80073a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073a2:	e711      	b.n	80071c8 <_vfiprintf_r+0x50>
 80073a4:	ab03      	add	r3, sp, #12
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	462a      	mov	r2, r5
 80073aa:	4b09      	ldr	r3, [pc, #36]	; (80073d0 <_vfiprintf_r+0x258>)
 80073ac:	a904      	add	r1, sp, #16
 80073ae:	4630      	mov	r0, r6
 80073b0:	f000 f880 	bl	80074b4 <_printf_i>
 80073b4:	e7e4      	b.n	8007380 <_vfiprintf_r+0x208>
 80073b6:	bf00      	nop
 80073b8:	08007f8c 	.word	0x08007f8c
 80073bc:	08007fac 	.word	0x08007fac
 80073c0:	08007f6c 	.word	0x08007f6c
 80073c4:	08007fcc 	.word	0x08007fcc
 80073c8:	08007fd6 	.word	0x08007fd6
 80073cc:	00000000 	.word	0x00000000
 80073d0:	08007153 	.word	0x08007153
 80073d4:	08007fd2 	.word	0x08007fd2

080073d8 <_printf_common>:
 80073d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073dc:	4616      	mov	r6, r2
 80073de:	4699      	mov	r9, r3
 80073e0:	688a      	ldr	r2, [r1, #8]
 80073e2:	690b      	ldr	r3, [r1, #16]
 80073e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073e8:	4293      	cmp	r3, r2
 80073ea:	bfb8      	it	lt
 80073ec:	4613      	movlt	r3, r2
 80073ee:	6033      	str	r3, [r6, #0]
 80073f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073f4:	4607      	mov	r7, r0
 80073f6:	460c      	mov	r4, r1
 80073f8:	b10a      	cbz	r2, 80073fe <_printf_common+0x26>
 80073fa:	3301      	adds	r3, #1
 80073fc:	6033      	str	r3, [r6, #0]
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	0699      	lsls	r1, r3, #26
 8007402:	bf42      	ittt	mi
 8007404:	6833      	ldrmi	r3, [r6, #0]
 8007406:	3302      	addmi	r3, #2
 8007408:	6033      	strmi	r3, [r6, #0]
 800740a:	6825      	ldr	r5, [r4, #0]
 800740c:	f015 0506 	ands.w	r5, r5, #6
 8007410:	d106      	bne.n	8007420 <_printf_common+0x48>
 8007412:	f104 0a19 	add.w	sl, r4, #25
 8007416:	68e3      	ldr	r3, [r4, #12]
 8007418:	6832      	ldr	r2, [r6, #0]
 800741a:	1a9b      	subs	r3, r3, r2
 800741c:	42ab      	cmp	r3, r5
 800741e:	dc26      	bgt.n	800746e <_printf_common+0x96>
 8007420:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007424:	1e13      	subs	r3, r2, #0
 8007426:	6822      	ldr	r2, [r4, #0]
 8007428:	bf18      	it	ne
 800742a:	2301      	movne	r3, #1
 800742c:	0692      	lsls	r2, r2, #26
 800742e:	d42b      	bmi.n	8007488 <_printf_common+0xb0>
 8007430:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007434:	4649      	mov	r1, r9
 8007436:	4638      	mov	r0, r7
 8007438:	47c0      	blx	r8
 800743a:	3001      	adds	r0, #1
 800743c:	d01e      	beq.n	800747c <_printf_common+0xa4>
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	68e5      	ldr	r5, [r4, #12]
 8007442:	6832      	ldr	r2, [r6, #0]
 8007444:	f003 0306 	and.w	r3, r3, #6
 8007448:	2b04      	cmp	r3, #4
 800744a:	bf08      	it	eq
 800744c:	1aad      	subeq	r5, r5, r2
 800744e:	68a3      	ldr	r3, [r4, #8]
 8007450:	6922      	ldr	r2, [r4, #16]
 8007452:	bf0c      	ite	eq
 8007454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007458:	2500      	movne	r5, #0
 800745a:	4293      	cmp	r3, r2
 800745c:	bfc4      	itt	gt
 800745e:	1a9b      	subgt	r3, r3, r2
 8007460:	18ed      	addgt	r5, r5, r3
 8007462:	2600      	movs	r6, #0
 8007464:	341a      	adds	r4, #26
 8007466:	42b5      	cmp	r5, r6
 8007468:	d11a      	bne.n	80074a0 <_printf_common+0xc8>
 800746a:	2000      	movs	r0, #0
 800746c:	e008      	b.n	8007480 <_printf_common+0xa8>
 800746e:	2301      	movs	r3, #1
 8007470:	4652      	mov	r2, sl
 8007472:	4649      	mov	r1, r9
 8007474:	4638      	mov	r0, r7
 8007476:	47c0      	blx	r8
 8007478:	3001      	adds	r0, #1
 800747a:	d103      	bne.n	8007484 <_printf_common+0xac>
 800747c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007484:	3501      	adds	r5, #1
 8007486:	e7c6      	b.n	8007416 <_printf_common+0x3e>
 8007488:	18e1      	adds	r1, r4, r3
 800748a:	1c5a      	adds	r2, r3, #1
 800748c:	2030      	movs	r0, #48	; 0x30
 800748e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007492:	4422      	add	r2, r4
 8007494:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007498:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800749c:	3302      	adds	r3, #2
 800749e:	e7c7      	b.n	8007430 <_printf_common+0x58>
 80074a0:	2301      	movs	r3, #1
 80074a2:	4622      	mov	r2, r4
 80074a4:	4649      	mov	r1, r9
 80074a6:	4638      	mov	r0, r7
 80074a8:	47c0      	blx	r8
 80074aa:	3001      	adds	r0, #1
 80074ac:	d0e6      	beq.n	800747c <_printf_common+0xa4>
 80074ae:	3601      	adds	r6, #1
 80074b0:	e7d9      	b.n	8007466 <_printf_common+0x8e>
	...

080074b4 <_printf_i>:
 80074b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074b8:	7e0f      	ldrb	r7, [r1, #24]
 80074ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074bc:	2f78      	cmp	r7, #120	; 0x78
 80074be:	4691      	mov	r9, r2
 80074c0:	4680      	mov	r8, r0
 80074c2:	460c      	mov	r4, r1
 80074c4:	469a      	mov	sl, r3
 80074c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074ca:	d807      	bhi.n	80074dc <_printf_i+0x28>
 80074cc:	2f62      	cmp	r7, #98	; 0x62
 80074ce:	d80a      	bhi.n	80074e6 <_printf_i+0x32>
 80074d0:	2f00      	cmp	r7, #0
 80074d2:	f000 80d8 	beq.w	8007686 <_printf_i+0x1d2>
 80074d6:	2f58      	cmp	r7, #88	; 0x58
 80074d8:	f000 80a3 	beq.w	8007622 <_printf_i+0x16e>
 80074dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074e4:	e03a      	b.n	800755c <_printf_i+0xa8>
 80074e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074ea:	2b15      	cmp	r3, #21
 80074ec:	d8f6      	bhi.n	80074dc <_printf_i+0x28>
 80074ee:	a101      	add	r1, pc, #4	; (adr r1, 80074f4 <_printf_i+0x40>)
 80074f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074f4:	0800754d 	.word	0x0800754d
 80074f8:	08007561 	.word	0x08007561
 80074fc:	080074dd 	.word	0x080074dd
 8007500:	080074dd 	.word	0x080074dd
 8007504:	080074dd 	.word	0x080074dd
 8007508:	080074dd 	.word	0x080074dd
 800750c:	08007561 	.word	0x08007561
 8007510:	080074dd 	.word	0x080074dd
 8007514:	080074dd 	.word	0x080074dd
 8007518:	080074dd 	.word	0x080074dd
 800751c:	080074dd 	.word	0x080074dd
 8007520:	0800766d 	.word	0x0800766d
 8007524:	08007591 	.word	0x08007591
 8007528:	0800764f 	.word	0x0800764f
 800752c:	080074dd 	.word	0x080074dd
 8007530:	080074dd 	.word	0x080074dd
 8007534:	0800768f 	.word	0x0800768f
 8007538:	080074dd 	.word	0x080074dd
 800753c:	08007591 	.word	0x08007591
 8007540:	080074dd 	.word	0x080074dd
 8007544:	080074dd 	.word	0x080074dd
 8007548:	08007657 	.word	0x08007657
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	1d1a      	adds	r2, r3, #4
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	602a      	str	r2, [r5, #0]
 8007554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800755c:	2301      	movs	r3, #1
 800755e:	e0a3      	b.n	80076a8 <_printf_i+0x1f4>
 8007560:	6820      	ldr	r0, [r4, #0]
 8007562:	6829      	ldr	r1, [r5, #0]
 8007564:	0606      	lsls	r6, r0, #24
 8007566:	f101 0304 	add.w	r3, r1, #4
 800756a:	d50a      	bpl.n	8007582 <_printf_i+0xce>
 800756c:	680e      	ldr	r6, [r1, #0]
 800756e:	602b      	str	r3, [r5, #0]
 8007570:	2e00      	cmp	r6, #0
 8007572:	da03      	bge.n	800757c <_printf_i+0xc8>
 8007574:	232d      	movs	r3, #45	; 0x2d
 8007576:	4276      	negs	r6, r6
 8007578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800757c:	485e      	ldr	r0, [pc, #376]	; (80076f8 <_printf_i+0x244>)
 800757e:	230a      	movs	r3, #10
 8007580:	e019      	b.n	80075b6 <_printf_i+0x102>
 8007582:	680e      	ldr	r6, [r1, #0]
 8007584:	602b      	str	r3, [r5, #0]
 8007586:	f010 0f40 	tst.w	r0, #64	; 0x40
 800758a:	bf18      	it	ne
 800758c:	b236      	sxthne	r6, r6
 800758e:	e7ef      	b.n	8007570 <_printf_i+0xbc>
 8007590:	682b      	ldr	r3, [r5, #0]
 8007592:	6820      	ldr	r0, [r4, #0]
 8007594:	1d19      	adds	r1, r3, #4
 8007596:	6029      	str	r1, [r5, #0]
 8007598:	0601      	lsls	r1, r0, #24
 800759a:	d501      	bpl.n	80075a0 <_printf_i+0xec>
 800759c:	681e      	ldr	r6, [r3, #0]
 800759e:	e002      	b.n	80075a6 <_printf_i+0xf2>
 80075a0:	0646      	lsls	r6, r0, #25
 80075a2:	d5fb      	bpl.n	800759c <_printf_i+0xe8>
 80075a4:	881e      	ldrh	r6, [r3, #0]
 80075a6:	4854      	ldr	r0, [pc, #336]	; (80076f8 <_printf_i+0x244>)
 80075a8:	2f6f      	cmp	r7, #111	; 0x6f
 80075aa:	bf0c      	ite	eq
 80075ac:	2308      	moveq	r3, #8
 80075ae:	230a      	movne	r3, #10
 80075b0:	2100      	movs	r1, #0
 80075b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075b6:	6865      	ldr	r5, [r4, #4]
 80075b8:	60a5      	str	r5, [r4, #8]
 80075ba:	2d00      	cmp	r5, #0
 80075bc:	bfa2      	ittt	ge
 80075be:	6821      	ldrge	r1, [r4, #0]
 80075c0:	f021 0104 	bicge.w	r1, r1, #4
 80075c4:	6021      	strge	r1, [r4, #0]
 80075c6:	b90e      	cbnz	r6, 80075cc <_printf_i+0x118>
 80075c8:	2d00      	cmp	r5, #0
 80075ca:	d04d      	beq.n	8007668 <_printf_i+0x1b4>
 80075cc:	4615      	mov	r5, r2
 80075ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80075d2:	fb03 6711 	mls	r7, r3, r1, r6
 80075d6:	5dc7      	ldrb	r7, [r0, r7]
 80075d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075dc:	4637      	mov	r7, r6
 80075de:	42bb      	cmp	r3, r7
 80075e0:	460e      	mov	r6, r1
 80075e2:	d9f4      	bls.n	80075ce <_printf_i+0x11a>
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d10b      	bne.n	8007600 <_printf_i+0x14c>
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	07de      	lsls	r6, r3, #31
 80075ec:	d508      	bpl.n	8007600 <_printf_i+0x14c>
 80075ee:	6923      	ldr	r3, [r4, #16]
 80075f0:	6861      	ldr	r1, [r4, #4]
 80075f2:	4299      	cmp	r1, r3
 80075f4:	bfde      	ittt	le
 80075f6:	2330      	movle	r3, #48	; 0x30
 80075f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007600:	1b52      	subs	r2, r2, r5
 8007602:	6122      	str	r2, [r4, #16]
 8007604:	f8cd a000 	str.w	sl, [sp]
 8007608:	464b      	mov	r3, r9
 800760a:	aa03      	add	r2, sp, #12
 800760c:	4621      	mov	r1, r4
 800760e:	4640      	mov	r0, r8
 8007610:	f7ff fee2 	bl	80073d8 <_printf_common>
 8007614:	3001      	adds	r0, #1
 8007616:	d14c      	bne.n	80076b2 <_printf_i+0x1fe>
 8007618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800761c:	b004      	add	sp, #16
 800761e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007622:	4835      	ldr	r0, [pc, #212]	; (80076f8 <_printf_i+0x244>)
 8007624:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007628:	6829      	ldr	r1, [r5, #0]
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007630:	6029      	str	r1, [r5, #0]
 8007632:	061d      	lsls	r5, r3, #24
 8007634:	d514      	bpl.n	8007660 <_printf_i+0x1ac>
 8007636:	07df      	lsls	r7, r3, #31
 8007638:	bf44      	itt	mi
 800763a:	f043 0320 	orrmi.w	r3, r3, #32
 800763e:	6023      	strmi	r3, [r4, #0]
 8007640:	b91e      	cbnz	r6, 800764a <_printf_i+0x196>
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	f023 0320 	bic.w	r3, r3, #32
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	2310      	movs	r3, #16
 800764c:	e7b0      	b.n	80075b0 <_printf_i+0xfc>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	f043 0320 	orr.w	r3, r3, #32
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	2378      	movs	r3, #120	; 0x78
 8007658:	4828      	ldr	r0, [pc, #160]	; (80076fc <_printf_i+0x248>)
 800765a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800765e:	e7e3      	b.n	8007628 <_printf_i+0x174>
 8007660:	0659      	lsls	r1, r3, #25
 8007662:	bf48      	it	mi
 8007664:	b2b6      	uxthmi	r6, r6
 8007666:	e7e6      	b.n	8007636 <_printf_i+0x182>
 8007668:	4615      	mov	r5, r2
 800766a:	e7bb      	b.n	80075e4 <_printf_i+0x130>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	6826      	ldr	r6, [r4, #0]
 8007670:	6961      	ldr	r1, [r4, #20]
 8007672:	1d18      	adds	r0, r3, #4
 8007674:	6028      	str	r0, [r5, #0]
 8007676:	0635      	lsls	r5, r6, #24
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	d501      	bpl.n	8007680 <_printf_i+0x1cc>
 800767c:	6019      	str	r1, [r3, #0]
 800767e:	e002      	b.n	8007686 <_printf_i+0x1d2>
 8007680:	0670      	lsls	r0, r6, #25
 8007682:	d5fb      	bpl.n	800767c <_printf_i+0x1c8>
 8007684:	8019      	strh	r1, [r3, #0]
 8007686:	2300      	movs	r3, #0
 8007688:	6123      	str	r3, [r4, #16]
 800768a:	4615      	mov	r5, r2
 800768c:	e7ba      	b.n	8007604 <_printf_i+0x150>
 800768e:	682b      	ldr	r3, [r5, #0]
 8007690:	1d1a      	adds	r2, r3, #4
 8007692:	602a      	str	r2, [r5, #0]
 8007694:	681d      	ldr	r5, [r3, #0]
 8007696:	6862      	ldr	r2, [r4, #4]
 8007698:	2100      	movs	r1, #0
 800769a:	4628      	mov	r0, r5
 800769c:	f7f8 fdb8 	bl	8000210 <memchr>
 80076a0:	b108      	cbz	r0, 80076a6 <_printf_i+0x1f2>
 80076a2:	1b40      	subs	r0, r0, r5
 80076a4:	6060      	str	r0, [r4, #4]
 80076a6:	6863      	ldr	r3, [r4, #4]
 80076a8:	6123      	str	r3, [r4, #16]
 80076aa:	2300      	movs	r3, #0
 80076ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076b0:	e7a8      	b.n	8007604 <_printf_i+0x150>
 80076b2:	6923      	ldr	r3, [r4, #16]
 80076b4:	462a      	mov	r2, r5
 80076b6:	4649      	mov	r1, r9
 80076b8:	4640      	mov	r0, r8
 80076ba:	47d0      	blx	sl
 80076bc:	3001      	adds	r0, #1
 80076be:	d0ab      	beq.n	8007618 <_printf_i+0x164>
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	079b      	lsls	r3, r3, #30
 80076c4:	d413      	bmi.n	80076ee <_printf_i+0x23a>
 80076c6:	68e0      	ldr	r0, [r4, #12]
 80076c8:	9b03      	ldr	r3, [sp, #12]
 80076ca:	4298      	cmp	r0, r3
 80076cc:	bfb8      	it	lt
 80076ce:	4618      	movlt	r0, r3
 80076d0:	e7a4      	b.n	800761c <_printf_i+0x168>
 80076d2:	2301      	movs	r3, #1
 80076d4:	4632      	mov	r2, r6
 80076d6:	4649      	mov	r1, r9
 80076d8:	4640      	mov	r0, r8
 80076da:	47d0      	blx	sl
 80076dc:	3001      	adds	r0, #1
 80076de:	d09b      	beq.n	8007618 <_printf_i+0x164>
 80076e0:	3501      	adds	r5, #1
 80076e2:	68e3      	ldr	r3, [r4, #12]
 80076e4:	9903      	ldr	r1, [sp, #12]
 80076e6:	1a5b      	subs	r3, r3, r1
 80076e8:	42ab      	cmp	r3, r5
 80076ea:	dcf2      	bgt.n	80076d2 <_printf_i+0x21e>
 80076ec:	e7eb      	b.n	80076c6 <_printf_i+0x212>
 80076ee:	2500      	movs	r5, #0
 80076f0:	f104 0619 	add.w	r6, r4, #25
 80076f4:	e7f5      	b.n	80076e2 <_printf_i+0x22e>
 80076f6:	bf00      	nop
 80076f8:	08007fdd 	.word	0x08007fdd
 80076fc:	08007fee 	.word	0x08007fee

08007700 <_sbrk_r>:
 8007700:	b538      	push	{r3, r4, r5, lr}
 8007702:	4d06      	ldr	r5, [pc, #24]	; (800771c <_sbrk_r+0x1c>)
 8007704:	2300      	movs	r3, #0
 8007706:	4604      	mov	r4, r0
 8007708:	4608      	mov	r0, r1
 800770a:	602b      	str	r3, [r5, #0]
 800770c:	f7fa fabc 	bl	8001c88 <_sbrk>
 8007710:	1c43      	adds	r3, r0, #1
 8007712:	d102      	bne.n	800771a <_sbrk_r+0x1a>
 8007714:	682b      	ldr	r3, [r5, #0]
 8007716:	b103      	cbz	r3, 800771a <_sbrk_r+0x1a>
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	bd38      	pop	{r3, r4, r5, pc}
 800771c:	20000938 	.word	0x20000938

08007720 <__sread>:
 8007720:	b510      	push	{r4, lr}
 8007722:	460c      	mov	r4, r1
 8007724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007728:	f000 f8a0 	bl	800786c <_read_r>
 800772c:	2800      	cmp	r0, #0
 800772e:	bfab      	itete	ge
 8007730:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007732:	89a3      	ldrhlt	r3, [r4, #12]
 8007734:	181b      	addge	r3, r3, r0
 8007736:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800773a:	bfac      	ite	ge
 800773c:	6563      	strge	r3, [r4, #84]	; 0x54
 800773e:	81a3      	strhlt	r3, [r4, #12]
 8007740:	bd10      	pop	{r4, pc}

08007742 <__swrite>:
 8007742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007746:	461f      	mov	r7, r3
 8007748:	898b      	ldrh	r3, [r1, #12]
 800774a:	05db      	lsls	r3, r3, #23
 800774c:	4605      	mov	r5, r0
 800774e:	460c      	mov	r4, r1
 8007750:	4616      	mov	r6, r2
 8007752:	d505      	bpl.n	8007760 <__swrite+0x1e>
 8007754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007758:	2302      	movs	r3, #2
 800775a:	2200      	movs	r2, #0
 800775c:	f000 f868 	bl	8007830 <_lseek_r>
 8007760:	89a3      	ldrh	r3, [r4, #12]
 8007762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007766:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800776a:	81a3      	strh	r3, [r4, #12]
 800776c:	4632      	mov	r2, r6
 800776e:	463b      	mov	r3, r7
 8007770:	4628      	mov	r0, r5
 8007772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007776:	f000 b817 	b.w	80077a8 <_write_r>

0800777a <__sseek>:
 800777a:	b510      	push	{r4, lr}
 800777c:	460c      	mov	r4, r1
 800777e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007782:	f000 f855 	bl	8007830 <_lseek_r>
 8007786:	1c43      	adds	r3, r0, #1
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	bf15      	itete	ne
 800778c:	6560      	strne	r0, [r4, #84]	; 0x54
 800778e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007792:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007796:	81a3      	strheq	r3, [r4, #12]
 8007798:	bf18      	it	ne
 800779a:	81a3      	strhne	r3, [r4, #12]
 800779c:	bd10      	pop	{r4, pc}

0800779e <__sclose>:
 800779e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a2:	f000 b813 	b.w	80077cc <_close_r>
	...

080077a8 <_write_r>:
 80077a8:	b538      	push	{r3, r4, r5, lr}
 80077aa:	4d07      	ldr	r5, [pc, #28]	; (80077c8 <_write_r+0x20>)
 80077ac:	4604      	mov	r4, r0
 80077ae:	4608      	mov	r0, r1
 80077b0:	4611      	mov	r1, r2
 80077b2:	2200      	movs	r2, #0
 80077b4:	602a      	str	r2, [r5, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	f7f9 ff7a 	bl	80016b0 <_write>
 80077bc:	1c43      	adds	r3, r0, #1
 80077be:	d102      	bne.n	80077c6 <_write_r+0x1e>
 80077c0:	682b      	ldr	r3, [r5, #0]
 80077c2:	b103      	cbz	r3, 80077c6 <_write_r+0x1e>
 80077c4:	6023      	str	r3, [r4, #0]
 80077c6:	bd38      	pop	{r3, r4, r5, pc}
 80077c8:	20000938 	.word	0x20000938

080077cc <_close_r>:
 80077cc:	b538      	push	{r3, r4, r5, lr}
 80077ce:	4d06      	ldr	r5, [pc, #24]	; (80077e8 <_close_r+0x1c>)
 80077d0:	2300      	movs	r3, #0
 80077d2:	4604      	mov	r4, r0
 80077d4:	4608      	mov	r0, r1
 80077d6:	602b      	str	r3, [r5, #0]
 80077d8:	f7fa fa21 	bl	8001c1e <_close>
 80077dc:	1c43      	adds	r3, r0, #1
 80077de:	d102      	bne.n	80077e6 <_close_r+0x1a>
 80077e0:	682b      	ldr	r3, [r5, #0]
 80077e2:	b103      	cbz	r3, 80077e6 <_close_r+0x1a>
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	bd38      	pop	{r3, r4, r5, pc}
 80077e8:	20000938 	.word	0x20000938

080077ec <_fstat_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	4d07      	ldr	r5, [pc, #28]	; (800780c <_fstat_r+0x20>)
 80077f0:	2300      	movs	r3, #0
 80077f2:	4604      	mov	r4, r0
 80077f4:	4608      	mov	r0, r1
 80077f6:	4611      	mov	r1, r2
 80077f8:	602b      	str	r3, [r5, #0]
 80077fa:	f7fa fa1c 	bl	8001c36 <_fstat>
 80077fe:	1c43      	adds	r3, r0, #1
 8007800:	d102      	bne.n	8007808 <_fstat_r+0x1c>
 8007802:	682b      	ldr	r3, [r5, #0]
 8007804:	b103      	cbz	r3, 8007808 <_fstat_r+0x1c>
 8007806:	6023      	str	r3, [r4, #0]
 8007808:	bd38      	pop	{r3, r4, r5, pc}
 800780a:	bf00      	nop
 800780c:	20000938 	.word	0x20000938

08007810 <_isatty_r>:
 8007810:	b538      	push	{r3, r4, r5, lr}
 8007812:	4d06      	ldr	r5, [pc, #24]	; (800782c <_isatty_r+0x1c>)
 8007814:	2300      	movs	r3, #0
 8007816:	4604      	mov	r4, r0
 8007818:	4608      	mov	r0, r1
 800781a:	602b      	str	r3, [r5, #0]
 800781c:	f7fa fa1b 	bl	8001c56 <_isatty>
 8007820:	1c43      	adds	r3, r0, #1
 8007822:	d102      	bne.n	800782a <_isatty_r+0x1a>
 8007824:	682b      	ldr	r3, [r5, #0]
 8007826:	b103      	cbz	r3, 800782a <_isatty_r+0x1a>
 8007828:	6023      	str	r3, [r4, #0]
 800782a:	bd38      	pop	{r3, r4, r5, pc}
 800782c:	20000938 	.word	0x20000938

08007830 <_lseek_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4d07      	ldr	r5, [pc, #28]	; (8007850 <_lseek_r+0x20>)
 8007834:	4604      	mov	r4, r0
 8007836:	4608      	mov	r0, r1
 8007838:	4611      	mov	r1, r2
 800783a:	2200      	movs	r2, #0
 800783c:	602a      	str	r2, [r5, #0]
 800783e:	461a      	mov	r2, r3
 8007840:	f7fa fa14 	bl	8001c6c <_lseek>
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	d102      	bne.n	800784e <_lseek_r+0x1e>
 8007848:	682b      	ldr	r3, [r5, #0]
 800784a:	b103      	cbz	r3, 800784e <_lseek_r+0x1e>
 800784c:	6023      	str	r3, [r4, #0]
 800784e:	bd38      	pop	{r3, r4, r5, pc}
 8007850:	20000938 	.word	0x20000938

08007854 <__malloc_lock>:
 8007854:	4801      	ldr	r0, [pc, #4]	; (800785c <__malloc_lock+0x8>)
 8007856:	f7ff bb15 	b.w	8006e84 <__retarget_lock_acquire_recursive>
 800785a:	bf00      	nop
 800785c:	2000092c 	.word	0x2000092c

08007860 <__malloc_unlock>:
 8007860:	4801      	ldr	r0, [pc, #4]	; (8007868 <__malloc_unlock+0x8>)
 8007862:	f7ff bb10 	b.w	8006e86 <__retarget_lock_release_recursive>
 8007866:	bf00      	nop
 8007868:	2000092c 	.word	0x2000092c

0800786c <_read_r>:
 800786c:	b538      	push	{r3, r4, r5, lr}
 800786e:	4d07      	ldr	r5, [pc, #28]	; (800788c <_read_r+0x20>)
 8007870:	4604      	mov	r4, r0
 8007872:	4608      	mov	r0, r1
 8007874:	4611      	mov	r1, r2
 8007876:	2200      	movs	r2, #0
 8007878:	602a      	str	r2, [r5, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	f7fa f9b2 	bl	8001be4 <_read>
 8007880:	1c43      	adds	r3, r0, #1
 8007882:	d102      	bne.n	800788a <_read_r+0x1e>
 8007884:	682b      	ldr	r3, [r5, #0]
 8007886:	b103      	cbz	r3, 800788a <_read_r+0x1e>
 8007888:	6023      	str	r3, [r4, #0]
 800788a:	bd38      	pop	{r3, r4, r5, pc}
 800788c:	20000938 	.word	0x20000938

08007890 <_init>:
 8007890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007892:	bf00      	nop
 8007894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007896:	bc08      	pop	{r3}
 8007898:	469e      	mov	lr, r3
 800789a:	4770      	bx	lr

0800789c <_fini>:
 800789c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789e:	bf00      	nop
 80078a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078a2:	bc08      	pop	{r3}
 80078a4:	469e      	mov	lr, r3
 80078a6:	4770      	bx	lr
