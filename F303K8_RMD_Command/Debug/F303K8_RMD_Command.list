
F303K8_RMD_Command.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c20  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003da8  08003da8  00013da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de0  08003de0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003de0  08003de0  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003de0  08003de0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003de0  08003de0  00013de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003de4  08003de4  00013de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00000138  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000154  20000154  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bf8f  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a69  00000000  00000000  0002bfdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  0002da48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007e0  00000000  00000000  0002e2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a021  00000000  00000000  0002eaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ad1f  00000000  00000000  00048ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000995ff  00000000  00000000  000537e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000ecddf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021ec  00000000  00000000  000ece30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d90 	.word	0x08003d90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08003d90 	.word	0x08003d90

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fae6 	bl	800079c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f86e 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f90c 	bl	80003f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f8da 	bl	8000390 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80001dc:	f000 f8a4 	bl	8000328 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  sFilterConfig.FilterBank = 0;
 80001e0:	4b2f      	ldr	r3, [pc, #188]	; (80002a0 <main+0xd8>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80001e6:	4b2e      	ldr	r3, [pc, #184]	; (80002a0 <main+0xd8>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001ec:	4b2c      	ldr	r3, [pc, #176]	; (80002a0 <main+0xd8>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80001f2:	4b2b      	ldr	r3, [pc, #172]	; (80002a0 <main+0xd8>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80001f8:	4b29      	ldr	r3, [pc, #164]	; (80002a0 <main+0xd8>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80001fe:	4b28      	ldr	r3, [pc, #160]	; (80002a0 <main+0xd8>)
 8000200:	2200      	movs	r2, #0
 8000202:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000204:	4b26      	ldr	r3, [pc, #152]	; (80002a0 <main+0xd8>)
 8000206:	2200      	movs	r2, #0
 8000208:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800020a:	4b25      	ldr	r3, [pc, #148]	; (80002a0 <main+0xd8>)
 800020c:	2200      	movs	r2, #0
 800020e:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation=ENABLE;
 8000210:	4b23      	ldr	r3, [pc, #140]	; (80002a0 <main+0xd8>)
 8000212:	2201      	movs	r2, #1
 8000214:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank=14;
 8000216:	4b22      	ldr	r3, [pc, #136]	; (80002a0 <main+0xd8>)
 8000218:	220e      	movs	r2, #14
 800021a:	625a      	str	r2, [r3, #36]	; 0x24
  if(HAL_CAN_ConfigFilter(&hcan,&sFilterConfig) != HAL_OK)
 800021c:	4920      	ldr	r1, [pc, #128]	; (80002a0 <main+0xd8>)
 800021e:	4821      	ldr	r0, [pc, #132]	; (80002a4 <main+0xdc>)
 8000220:	f000 fc1d 	bl	8000a5e <HAL_CAN_ConfigFilter>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <main+0x66>
  {
	  Error_Handler();
 800022a:	f000 f969 	bl	8000500 <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan)!=HAL_OK)
 800022e:	481d      	ldr	r0, [pc, #116]	; (80002a4 <main+0xdc>)
 8000230:	f000 fcdf 	bl	8000bf2 <HAL_CAN_Start>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <main+0x76>
  {
	  Error_Handler();
 800023a:	f000 f961 	bl	8000500 <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800023e:	2103      	movs	r1, #3
 8000240:	4818      	ldr	r0, [pc, #96]	; (80002a4 <main+0xdc>)
 8000242:	f000 fe2c 	bl	8000e9e <HAL_CAN_ActivateNotification>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <main+0x88>
  {
	  Error_Handler();
 800024c:	f000 f958 	bl	8000500 <Error_Handler>
  }
  TxHeader.StdId=0x01;
 8000250:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <main+0xe0>)
 8000252:	2201      	movs	r2, #1
 8000254:	601a      	str	r2, [r3, #0]
  //TxHeader.ExtId=0x01;
  TxHeader.RTR = CAN_RTR_DATA;
 8000256:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <main+0xe0>)
 8000258:	2200      	movs	r2, #0
 800025a:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <main+0xe0>)
 800025e:	2200      	movs	r2, #0
 8000260:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 8000262:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <main+0xe0>)
 8000264:	2208      	movs	r2, #8
 8000266:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <main+0xe0>)
 800026a:	2200      	movs	r2, #0
 800026c:	751a      	strb	r2, [r3, #20]
  TxData[0] = 0xA4;
 800026e:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <main+0xe4>)
 8000270:	22a4      	movs	r2, #164	; 0xa4
 8000272:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x0F;
 8000274:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <main+0xe4>)
 8000276:	220f      	movs	r2, #15
 8000278:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0x00;
 800027a:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <main+0xe4>)
 800027c:	2200      	movs	r2, #0
 800027e:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0x64;
 8000280:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <main+0xe4>)
 8000282:	2264      	movs	r2, #100	; 0x64
 8000284:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0x50;
 8000286:	4b09      	ldr	r3, [pc, #36]	; (80002ac <main+0xe4>)
 8000288:	2250      	movs	r2, #80	; 0x50
 800028a:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0x46;
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <main+0xe4>)
 800028e:	2246      	movs	r2, #70	; 0x46
 8000290:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0x00;
 8000292:	4b06      	ldr	r3, [pc, #24]	; (80002ac <main+0xe4>)
 8000294:	2200      	movs	r2, #0
 8000296:	719a      	strb	r2, [r3, #6]
  TxData[7] = 0x00;
 8000298:	4b04      	ldr	r3, [pc, #16]	; (80002ac <main+0xe4>)
 800029a:	2200      	movs	r2, #0
 800029c:	71da      	strb	r2, [r3, #7]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800029e:	e7fe      	b.n	800029e <main+0xd6>
 80002a0:	200000e4 	.word	0x200000e4
 80002a4:	20000038 	.word	0x20000038
 80002a8:	2000010c 	.word	0x2000010c
 80002ac:	20000140 	.word	0x20000140

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b090      	sub	sp, #64	; 0x40
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	f107 0318 	add.w	r3, r7, #24
 80002ba:	2228      	movs	r2, #40	; 0x28
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f003 fd5e 	bl	8003d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
 80002d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d2:	2302      	movs	r3, #2
 80002d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d6:	2301      	movs	r3, #1
 80002d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002da:	2310      	movs	r3, #16
 80002dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002de:	2300      	movs	r3, #0
 80002e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e2:	f107 0318 	add.w	r3, r7, #24
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 fb40 	bl	800196c <HAL_RCC_OscConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002f2:	f000 f905 	bl	8000500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f6:	230f      	movs	r3, #15
 80002f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f002 fb6a 	bl	80029e8 <HAL_RCC_ClockConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800031a:	f000 f8f1 	bl	8000500 <Error_Handler>
  }
}
 800031e:	bf00      	nop
 8000320:	3740      	adds	r7, #64	; 0x40
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800032c:	4b16      	ldr	r3, [pc, #88]	; (8000388 <MX_CAN_Init+0x60>)
 800032e:	4a17      	ldr	r2, [pc, #92]	; (800038c <MX_CAN_Init+0x64>)
 8000330:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 15;
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <MX_CAN_Init+0x60>)
 8000334:	220f      	movs	r2, #15
 8000336:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000338:	4b13      	ldr	r3, [pc, #76]	; (8000388 <MX_CAN_Init+0x60>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800033e:	4b12      	ldr	r3, [pc, #72]	; (8000388 <MX_CAN_Init+0x60>)
 8000340:	2200      	movs	r2, #0
 8000342:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000344:	4b10      	ldr	r3, [pc, #64]	; (8000388 <MX_CAN_Init+0x60>)
 8000346:	2200      	movs	r2, #0
 8000348:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800034a:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <MX_CAN_Init+0x60>)
 800034c:	2200      	movs	r2, #0
 800034e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000350:	4b0d      	ldr	r3, [pc, #52]	; (8000388 <MX_CAN_Init+0x60>)
 8000352:	2200      	movs	r2, #0
 8000354:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000356:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <MX_CAN_Init+0x60>)
 8000358:	2200      	movs	r2, #0
 800035a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800035c:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <MX_CAN_Init+0x60>)
 800035e:	2200      	movs	r2, #0
 8000360:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000362:	4b09      	ldr	r3, [pc, #36]	; (8000388 <MX_CAN_Init+0x60>)
 8000364:	2200      	movs	r2, #0
 8000366:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000368:	4b07      	ldr	r3, [pc, #28]	; (8000388 <MX_CAN_Init+0x60>)
 800036a:	2200      	movs	r2, #0
 800036c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <MX_CAN_Init+0x60>)
 8000370:	2200      	movs	r2, #0
 8000372:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000374:	4804      	ldr	r0, [pc, #16]	; (8000388 <MX_CAN_Init+0x60>)
 8000376:	f000 fa77 	bl	8000868 <HAL_CAN_Init>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000380:	f000 f8be 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000038 	.word	0x20000038
 800038c:	40006400 	.word	0x40006400

08000390 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000394:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 8000396:	4a15      	ldr	r2, [pc, #84]	; (80003ec <MX_USART2_UART_Init+0x5c>)
 8000398:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800039a:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 800039c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003a2:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003b6:	220c      	movs	r2, #12
 80003b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003d2:	4805      	ldr	r0, [pc, #20]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003d4:	f002 fd3e 	bl	8002e54 <HAL_UART_Init>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003de:	f000 f88f 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000060 	.word	0x20000060
 80003ec:	40004400 	.word	0x40004400

080003f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f6:	f107 030c 	add.w	r3, r7, #12
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
 8000404:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000406:	4b1d      	ldr	r3, [pc, #116]	; (800047c <MX_GPIO_Init+0x8c>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a1c      	ldr	r2, [pc, #112]	; (800047c <MX_GPIO_Init+0x8c>)
 800040c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b1a      	ldr	r3, [pc, #104]	; (800047c <MX_GPIO_Init+0x8c>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800041a:	60bb      	str	r3, [r7, #8]
 800041c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4b17      	ldr	r3, [pc, #92]	; (800047c <MX_GPIO_Init+0x8c>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a16      	ldr	r2, [pc, #88]	; (800047c <MX_GPIO_Init+0x8c>)
 8000424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b14      	ldr	r3, [pc, #80]	; (800047c <MX_GPIO_Init+0x8c>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000436:	4b11      	ldr	r3, [pc, #68]	; (800047c <MX_GPIO_Init+0x8c>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a10      	ldr	r2, [pc, #64]	; (800047c <MX_GPIO_Init+0x8c>)
 800043c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000440:	6153      	str	r3, [r2, #20]
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_GPIO_Init+0x8c>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2108      	movs	r1, #8
 8000452:	480b      	ldr	r0, [pc, #44]	; (8000480 <MX_GPIO_Init+0x90>)
 8000454:	f001 fa72 	bl	800193c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000458:	2308      	movs	r3, #8
 800045a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045c:	2301      	movs	r3, #1
 800045e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	2300      	movs	r3, #0
 8000466:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000468:	f107 030c 	add.w	r3, r7, #12
 800046c:	4619      	mov	r1, r3
 800046e:	4804      	ldr	r0, [pc, #16]	; (8000480 <MX_GPIO_Init+0x90>)
 8000470:	f001 f8f2 	bl	8001658 <HAL_GPIO_Init>

}
 8000474:	bf00      	nop
 8000476:	3720      	adds	r7, #32
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40021000 	.word	0x40021000
 8000480:	48000400 	.word	0x48000400

08000484 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, tx_data, 3,0xFFFF);
 800048c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000490:	2203      	movs	r2, #3
 8000492:	4914      	ldr	r1, [pc, #80]	; (80004e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000494:	4814      	ldr	r0, [pc, #80]	; (80004e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000496:	f002 fd2b 	bl	8002ef0 <HAL_UART_Transmit>
  HAL_CAN_GetRxMessage(&hcan,CAN_RX_FIFO0, &RxHeader,RxData);
 800049a:	4b14      	ldr	r3, [pc, #80]	; (80004ec <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800049c:	4a14      	ldr	r2, [pc, #80]	; (80004f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800049e:	2100      	movs	r1, #0
 80004a0:	4814      	ldr	r0, [pc, #80]	; (80004f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80004a2:	f000 fbea 	bl	8000c7a <HAL_CAN_GetRxMessage>
  HAL_UART_Transmit(&huart2,RxData,1,0xFFFF);
 80004a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004aa:	2201      	movs	r2, #1
 80004ac:	490f      	ldr	r1, [pc, #60]	; (80004ec <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80004ae:	480e      	ldr	r0, [pc, #56]	; (80004e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80004b0:	f002 fd1e 	bl	8002ef0 <HAL_UART_Transmit>
  flag *= -1;
 80004b4:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	425b      	negs	r3, r3
 80004ba:	4a0f      	ldr	r2, [pc, #60]	; (80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80004bc:	6013      	str	r3, [r2, #0]
  if(flag >0){
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	dd05      	ble.n	80004d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
 80004c6:	2201      	movs	r2, #1
 80004c8:	2108      	movs	r1, #8
 80004ca:	480c      	ldr	r0, [pc, #48]	; (80004fc <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80004cc:	f001 fa36 	bl	800193c <HAL_GPIO_WritePin>
  }else{
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0);
  }
}
 80004d0:	e004      	b.n	80004dc <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2108      	movs	r1, #8
 80004d6:	4809      	ldr	r0, [pc, #36]	; (80004fc <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80004d8:	f001 fa30 	bl	800193c <HAL_GPIO_WritePin>
}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20000000 	.word	0x20000000
 80004e8:	20000060 	.word	0x20000060
 80004ec:	20000148 	.word	0x20000148
 80004f0:	20000124 	.word	0x20000124
 80004f4:	20000038 	.word	0x20000038
 80004f8:	2000000c 	.word	0x2000000c
 80004fc:	48000400 	.word	0x48000400

08000500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000504:	b672      	cpsid	i
}
 8000506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000508:	e7fe      	b.n	8000508 <Error_Handler+0x8>
	...

0800050c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <HAL_MspInit+0x44>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_MspInit+0x44>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6193      	str	r3, [r2, #24]
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <HAL_MspInit+0x44>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <HAL_MspInit+0x44>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	4a08      	ldr	r2, [pc, #32]	; (8000550 <HAL_MspInit+0x44>)
 8000530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000534:	61d3      	str	r3, [r2, #28]
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <HAL_MspInit+0x44>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000

08000554 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	; 0x28
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a20      	ldr	r2, [pc, #128]	; (80005f4 <HAL_CAN_MspInit+0xa0>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d139      	bne.n	80005ea <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000576:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <HAL_CAN_MspInit+0xa4>)
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	4a1f      	ldr	r2, [pc, #124]	; (80005f8 <HAL_CAN_MspInit+0xa4>)
 800057c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000580:	61d3      	str	r3, [r2, #28]
 8000582:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <HAL_CAN_MspInit+0xa4>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <HAL_CAN_MspInit+0xa4>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a19      	ldr	r2, [pc, #100]	; (80005f8 <HAL_CAN_MspInit+0xa4>)
 8000594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <HAL_CAN_MspInit+0xa4>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ac:	2302      	movs	r3, #2
 80005ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b4:	2303      	movs	r3, #3
 80005b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80005b8:	2309      	movs	r3, #9
 80005ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	4619      	mov	r1, r3
 80005c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c6:	f001 f847 	bl	8001658 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 1, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2101      	movs	r1, #1
 80005ce:	2013      	movs	r0, #19
 80005d0:	f000 ff95 	bl	80014fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 80005d4:	2013      	movs	r0, #19
 80005d6:	f000 ffae 	bl	8001536 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 1, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2101      	movs	r1, #1
 80005de:	2014      	movs	r0, #20
 80005e0:	f000 ff8d 	bl	80014fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80005e4:	2014      	movs	r0, #20
 80005e6:	f000 ffa6 	bl	8001536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80005ea:	bf00      	nop
 80005ec:	3728      	adds	r7, #40	; 0x28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40006400 	.word	0x40006400
 80005f8:	40021000 	.word	0x40021000

080005fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	; 0x28
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a1c      	ldr	r2, [pc, #112]	; (800068c <HAL_UART_MspInit+0x90>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d131      	bne.n	8000682 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800061e:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <HAL_UART_MspInit+0x94>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a1b      	ldr	r2, [pc, #108]	; (8000690 <HAL_UART_MspInit+0x94>)
 8000624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <HAL_UART_MspInit+0x94>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <HAL_UART_MspInit+0x94>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a15      	ldr	r2, [pc, #84]	; (8000690 <HAL_UART_MspInit+0x94>)
 800063c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <HAL_UART_MspInit+0x94>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800064e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000654:	2302      	movs	r3, #2
 8000656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065c:	2303      	movs	r3, #3
 800065e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000660:	2307      	movs	r3, #7
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066e:	f000 fff3 	bl	8001658 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	2026      	movs	r0, #38	; 0x26
 8000678:	f000 ff41 	bl	80014fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800067c:	2026      	movs	r0, #38	; 0x26
 800067e:	f000 ff5a 	bl	8001536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000682:	bf00      	nop
 8000684:	3728      	adds	r7, #40	; 0x28
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40004400 	.word	0x40004400
 8000690:	40021000 	.word	0x40021000

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <NMI_Handler+0x4>

0800069a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <HardFault_Handler+0x4>

080006a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <MemManage_Handler+0x4>

080006a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <BusFault_Handler+0x4>

080006ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <UsageFault_Handler+0x4>

080006b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e0:	f000 f8a2 	bl	8000828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006ec:	4802      	ldr	r0, [pc, #8]	; (80006f8 <CAN_TX_IRQHandler+0x10>)
 80006ee:	f000 fbfc 	bl	8000eea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000038 	.word	0x20000038

080006fc <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000700:	4802      	ldr	r0, [pc, #8]	; (800070c <CAN_RX0_IRQHandler+0x10>)
 8000702:	f000 fbf2 	bl	8000eea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000038 	.word	0x20000038

08000710 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000714:	4802      	ldr	r0, [pc, #8]	; (8000720 <USART2_IRQHandler+0x10>)
 8000716:	f002 fc7f 	bl	8003018 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000060 	.word	0x20000060

08000724 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <SystemInit+0x20>)
 800072a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800072e:	4a05      	ldr	r2, [pc, #20]	; (8000744 <SystemInit+0x20>)
 8000730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000780 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <LoopForever+0x6>)
  ldr r1, =_edata
 800074e:	490e      	ldr	r1, [pc, #56]	; (8000788 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000750:	4a0e      	ldr	r2, [pc, #56]	; (800078c <LoopForever+0xe>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000754:	e002      	b.n	800075c <LoopCopyDataInit>

08000756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075a:	3304      	adds	r3, #4

0800075c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800075c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000760:	d3f9      	bcc.n	8000756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000764:	4c0b      	ldr	r4, [pc, #44]	; (8000794 <LoopForever+0x16>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000768:	e001      	b.n	800076e <LoopFillZerobss>

0800076a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800076c:	3204      	adds	r2, #4

0800076e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000770:	d3fb      	bcc.n	800076a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000772:	f7ff ffd7 	bl	8000724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000776:	f003 fadf 	bl	8003d38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800077a:	f7ff fd25 	bl	80001c8 <main>

0800077e <LoopForever>:

LoopForever:
    b LoopForever
 800077e:	e7fe      	b.n	800077e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000780:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800078c:	08003de8 	.word	0x08003de8
  ldr r2, =_sbss
 8000790:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000794:	20000154 	.word	0x20000154

08000798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC1_2_IRQHandler>
	...

0800079c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_Init+0x28>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <HAL_Init+0x28>)
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 fe9b 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b2:	2000      	movs	r0, #0
 80007b4:	f000 f808 	bl	80007c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b8:	f7ff fea8 	bl	800050c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40022000 	.word	0x40022000

080007c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_InitTick+0x54>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_InitTick+0x58>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007de:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 feb3 	bl	8001552 <HAL_SYSTICK_Config>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00e      	b.n	8000814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	d80a      	bhi.n	8000812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fc:	2200      	movs	r2, #0
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000804:	f000 fe7b 	bl	80014fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000808:	4a06      	ldr	r2, [pc, #24]	; (8000824 <HAL_InitTick+0x5c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000010 	.word	0x20000010
 8000820:	20000018 	.word	0x20000018
 8000824:	20000014 	.word	0x20000014

08000828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_IncTick+0x20>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_IncTick+0x24>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <HAL_IncTick+0x24>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000018 	.word	0x20000018
 800084c:	20000150 	.word	0x20000150

08000850 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return uwTick;  
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <HAL_GetTick+0x14>)
 8000856:	681b      	ldr	r3, [r3, #0]
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20000150 	.word	0x20000150

08000868 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d101      	bne.n	800087a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	e0ed      	b.n	8000a56 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d102      	bne.n	800088c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff fe64 	bl	8000554 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f042 0201 	orr.w	r2, r2, #1
 800089a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800089c:	f7ff ffd8 	bl	8000850 <HAL_GetTick>
 80008a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008a2:	e012      	b.n	80008ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008a4:	f7ff ffd4 	bl	8000850 <HAL_GetTick>
 80008a8:	4602      	mov	r2, r0
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	2b0a      	cmp	r3, #10
 80008b0:	d90b      	bls.n	80008ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2205      	movs	r2, #5
 80008c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e0c5      	b.n	8000a56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d0e5      	beq.n	80008a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f022 0202 	bic.w	r2, r2, #2
 80008e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008e8:	f7ff ffb2 	bl	8000850 <HAL_GetTick>
 80008ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008ee:	e012      	b.n	8000916 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008f0:	f7ff ffae 	bl	8000850 <HAL_GetTick>
 80008f4:	4602      	mov	r2, r0
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	2b0a      	cmp	r3, #10
 80008fc:	d90b      	bls.n	8000916 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000902:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2205      	movs	r2, #5
 800090e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e09f      	b.n	8000a56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f003 0302 	and.w	r3, r3, #2
 8000920:	2b00      	cmp	r3, #0
 8000922:	d1e5      	bne.n	80008f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	7e1b      	ldrb	r3, [r3, #24]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d108      	bne.n	800093e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	e007      	b.n	800094e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7e5b      	ldrb	r3, [r3, #25]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d108      	bne.n	8000968 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	e007      	b.n	8000978 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000976:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	7e9b      	ldrb	r3, [r3, #26]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d108      	bne.n	8000992 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f042 0220 	orr.w	r2, r2, #32
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	e007      	b.n	80009a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f022 0220 	bic.w	r2, r2, #32
 80009a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	7edb      	ldrb	r3, [r3, #27]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d108      	bne.n	80009bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f022 0210 	bic.w	r2, r2, #16
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	e007      	b.n	80009cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f042 0210 	orr.w	r2, r2, #16
 80009ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	7f1b      	ldrb	r3, [r3, #28]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d108      	bne.n	80009e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f042 0208 	orr.w	r2, r2, #8
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	e007      	b.n	80009f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f022 0208 	bic.w	r2, r2, #8
 80009f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	7f5b      	ldrb	r3, [r3, #29]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d108      	bne.n	8000a10 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f042 0204 	orr.w	r2, r2, #4
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	e007      	b.n	8000a20 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f022 0204 	bic.w	r2, r2, #4
 8000a1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	689a      	ldr	r2, [r3, #8]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	691b      	ldr	r3, [r3, #16]
 8000a2e:	431a      	orrs	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	ea42 0103 	orr.w	r1, r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	1e5a      	subs	r2, r3, #1
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	430a      	orrs	r2, r1
 8000a44:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b087      	sub	sp, #28
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a74:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000a76:	7cfb      	ldrb	r3, [r7, #19]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d003      	beq.n	8000a84 <HAL_CAN_ConfigFilter+0x26>
 8000a7c:	7cfb      	ldrb	r3, [r7, #19]
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	f040 80aa 	bne.w	8000bd8 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a8a:	f043 0201 	orr.w	r2, r3, #1
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	f003 031f 	and.w	r3, r3, #31
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	401a      	ands	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d123      	bne.n	8000b06 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	401a      	ands	r2, r3
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ae0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3248      	adds	r2, #72	; 0x48
 8000ae6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000afa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000afc:	6979      	ldr	r1, [r7, #20]
 8000afe:	3348      	adds	r3, #72	; 0x48
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	440b      	add	r3, r1
 8000b04:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d122      	bne.n	8000b54 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	431a      	orrs	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b2a:	683a      	ldr	r2, [r7, #0]
 8000b2c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b2e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	3248      	adds	r2, #72	; 0x48
 8000b34:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b48:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b4a:	6979      	ldr	r1, [r7, #20]
 8000b4c:	3348      	adds	r3, #72	; 0x48
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	440b      	add	r3, r1
 8000b52:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d109      	bne.n	8000b70 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	401a      	ands	r2, r3
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000b6e:	e007      	b.n	8000b80 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	431a      	orrs	r2, r3
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	691b      	ldr	r3, [r3, #16]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d109      	bne.n	8000b9c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	401a      	ands	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000b9a:	e007      	b.n	8000bac <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	6a1b      	ldr	r3, [r3, #32]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d107      	bne.n	8000bc4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000bca:	f023 0201 	bic.w	r2, r3, #1
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e006      	b.n	8000be6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bdc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
  }
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	371c      	adds	r7, #28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b084      	sub	sp, #16
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d12e      	bne.n	8000c64 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2202      	movs	r2, #2
 8000c0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f022 0201 	bic.w	r2, r2, #1
 8000c1c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c1e:	f7ff fe17 	bl	8000850 <HAL_GetTick>
 8000c22:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c24:	e012      	b.n	8000c4c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c26:	f7ff fe13 	bl	8000850 <HAL_GetTick>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	2b0a      	cmp	r3, #10
 8000c32:	d90b      	bls.n	8000c4c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c38:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2205      	movs	r2, #5
 8000c44:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e012      	b.n	8000c72 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1e5      	bne.n	8000c26 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	e006      	b.n	8000c72 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c68:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
  }
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b087      	sub	sp, #28
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	60f8      	str	r0, [r7, #12]
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
 8000c86:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c8e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c90:	7dfb      	ldrb	r3, [r7, #23]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d003      	beq.n	8000c9e <HAL_CAN_GetRxMessage+0x24>
 8000c96:	7dfb      	ldrb	r3, [r7, #23]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	f040 80f3 	bne.w	8000e84 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d10e      	bne.n	8000cc2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d116      	bne.n	8000ce0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e0e7      	b.n	8000e92 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d107      	bne.n	8000ce0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e0d8      	b.n	8000e92 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	331b      	adds	r3, #27
 8000ce8:	011b      	lsls	r3, r3, #4
 8000cea:	4413      	add	r3, r2
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0204 	and.w	r2, r3, #4
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d10c      	bne.n	8000d18 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	331b      	adds	r3, #27
 8000d06:	011b      	lsls	r3, r3, #4
 8000d08:	4413      	add	r3, r2
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	0d5b      	lsrs	r3, r3, #21
 8000d0e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	e00b      	b.n	8000d30 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	331b      	adds	r3, #27
 8000d20:	011b      	lsls	r3, r3, #4
 8000d22:	4413      	add	r3, r2
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	08db      	lsrs	r3, r3, #3
 8000d28:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	331b      	adds	r3, #27
 8000d38:	011b      	lsls	r3, r3, #4
 8000d3a:	4413      	add	r3, r2
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0202 	and.w	r2, r3, #2
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	331b      	adds	r3, #27
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	4413      	add	r3, r2
 8000d52:	3304      	adds	r3, #4
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 020f 	and.w	r2, r3, #15
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	331b      	adds	r3, #27
 8000d66:	011b      	lsls	r3, r3, #4
 8000d68:	4413      	add	r3, r2
 8000d6a:	3304      	adds	r3, #4
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	0a1b      	lsrs	r3, r3, #8
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	331b      	adds	r3, #27
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	4413      	add	r3, r2
 8000d82:	3304      	adds	r3, #4
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	0c1b      	lsrs	r3, r3, #16
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	4413      	add	r3, r2
 8000d98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	4413      	add	r3, r2
 8000dae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	0a1a      	lsrs	r2, r3, #8
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	3301      	adds	r3, #1
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	011b      	lsls	r3, r3, #4
 8000dc6:	4413      	add	r3, r2
 8000dc8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	0c1a      	lsrs	r2, r3, #16
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	011b      	lsls	r3, r3, #4
 8000de0:	4413      	add	r3, r2
 8000de2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	0e1a      	lsrs	r2, r3, #24
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	3303      	adds	r3, #3
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	011b      	lsls	r3, r3, #4
 8000dfa:	4413      	add	r3, r2
 8000dfc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	3304      	adds	r3, #4
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	011b      	lsls	r3, r3, #4
 8000e12:	4413      	add	r3, r2
 8000e14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	0a1a      	lsrs	r2, r3, #8
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	3305      	adds	r3, #5
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	4413      	add	r3, r2
 8000e2e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	0c1a      	lsrs	r2, r3, #16
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	3306      	adds	r3, #6
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	011b      	lsls	r3, r3, #4
 8000e46:	4413      	add	r3, r2
 8000e48:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	0e1a      	lsrs	r2, r3, #24
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	3307      	adds	r3, #7
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d108      	bne.n	8000e70 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f042 0220 	orr.w	r2, r2, #32
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	e007      	b.n	8000e80 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	691a      	ldr	r2, [r3, #16]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 0220 	orr.w	r2, r2, #32
 8000e7e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	e006      	b.n	8000e92 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
  }
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	371c      	adds	r7, #28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b085      	sub	sp, #20
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eae:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d002      	beq.n	8000ebc <HAL_CAN_ActivateNotification+0x1e>
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d109      	bne.n	8000ed0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6959      	ldr	r1, [r3, #20]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	e006      	b.n	8000ede <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
  }
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b08a      	sub	sp, #40	; 0x28
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000f26:	6a3b      	ldr	r3, [r7, #32]
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d07c      	beq.n	800102a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d023      	beq.n	8000f82 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 f983 	bl	8001258 <HAL_CAN_TxMailbox0CompleteCallback>
 8000f52:	e016      	b.n	8000f82 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d004      	beq.n	8000f68 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
 8000f66:	e00c      	b.n	8000f82 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d004      	beq.n	8000f7c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
 8000f7a:	e002      	b.n	8000f82 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f000 f989 	bl	8001294 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d024      	beq.n	8000fd6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 f963 	bl	800126c <HAL_CAN_TxMailbox1CompleteCallback>
 8000fa6:	e016      	b.n	8000fd6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d004      	beq.n	8000fbc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fba:	e00c      	b.n	8000fd6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d004      	beq.n	8000fd0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8000fce:	e002      	b.n	8000fd6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f969 	bl	80012a8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d024      	beq.n	800102a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fe8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f943 	bl	8001280 <HAL_CAN_TxMailbox2CompleteCallback>
 8000ffa:	e016      	b.n	800102a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d004      	beq.n	8001010 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
 800100e:	e00c      	b.n	800102a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d004      	beq.n	8001024 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
 8001022:	e002      	b.n	800102a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f949 	bl	80012bc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800102a:	6a3b      	ldr	r3, [r7, #32]
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00c      	beq.n	800104e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f003 0310 	and.w	r3, r3, #16
 800103a:	2b00      	cmp	r3, #0
 800103c:	d007      	beq.n	800104e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001044:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2210      	movs	r2, #16
 800104c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800104e:	6a3b      	ldr	r3, [r7, #32]
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	2b00      	cmp	r3, #0
 8001060:	d006      	beq.n	8001070 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2208      	movs	r2, #8
 8001068:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f930 	bl	80012d0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001070:	6a3b      	ldr	r3, [r7, #32]
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d009      	beq.n	800108e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff f9fb 	bl	8000484 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800108e:	6a3b      	ldr	r3, [r7, #32]
 8001090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00c      	beq.n	80010b2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	f003 0310 	and.w	r3, r3, #16
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d007      	beq.n	80010b2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2210      	movs	r2, #16
 80010b0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80010b2:	6a3b      	ldr	r3, [r7, #32]
 80010b4:	f003 0320 	and.w	r3, r3, #32
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00b      	beq.n	80010d4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d006      	beq.n	80010d4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2208      	movs	r2, #8
 80010cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f912 	bl	80012f8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80010d4:	6a3b      	ldr	r3, [r7, #32]
 80010d6:	f003 0310 	and.w	r3, r3, #16
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d009      	beq.n	80010f2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f8f9 	bl	80012e4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80010f2:	6a3b      	ldr	r3, [r7, #32]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00b      	beq.n	8001114 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	2b00      	cmp	r3, #0
 8001104:	d006      	beq.n	8001114 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2210      	movs	r2, #16
 800110c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f8fc 	bl	800130c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001114:	6a3b      	ldr	r3, [r7, #32]
 8001116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00b      	beq.n	8001136 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	f003 0308 	and.w	r3, r3, #8
 8001124:	2b00      	cmp	r3, #0
 8001126:	d006      	beq.n	8001136 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2208      	movs	r2, #8
 800112e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 f8f5 	bl	8001320 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d07b      	beq.n	8001238 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	2b00      	cmp	r3, #0
 8001148:	d072      	beq.n	8001230 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800114a:	6a3b      	ldr	r3, [r7, #32]
 800114c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001150:	2b00      	cmp	r3, #0
 8001152:	d008      	beq.n	8001166 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001166:	6a3b      	ldr	r3, [r7, #32]
 8001168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800116c:	2b00      	cmp	r3, #0
 800116e:	d008      	beq.n	8001182 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001182:	6a3b      	ldr	r3, [r7, #32]
 8001184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001188:	2b00      	cmp	r3, #0
 800118a:	d008      	beq.n	800119e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d043      	beq.n	8001230 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d03e      	beq.n	8001230 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80011b8:	2b60      	cmp	r3, #96	; 0x60
 80011ba:	d02b      	beq.n	8001214 <HAL_CAN_IRQHandler+0x32a>
 80011bc:	2b60      	cmp	r3, #96	; 0x60
 80011be:	d82e      	bhi.n	800121e <HAL_CAN_IRQHandler+0x334>
 80011c0:	2b50      	cmp	r3, #80	; 0x50
 80011c2:	d022      	beq.n	800120a <HAL_CAN_IRQHandler+0x320>
 80011c4:	2b50      	cmp	r3, #80	; 0x50
 80011c6:	d82a      	bhi.n	800121e <HAL_CAN_IRQHandler+0x334>
 80011c8:	2b40      	cmp	r3, #64	; 0x40
 80011ca:	d019      	beq.n	8001200 <HAL_CAN_IRQHandler+0x316>
 80011cc:	2b40      	cmp	r3, #64	; 0x40
 80011ce:	d826      	bhi.n	800121e <HAL_CAN_IRQHandler+0x334>
 80011d0:	2b30      	cmp	r3, #48	; 0x30
 80011d2:	d010      	beq.n	80011f6 <HAL_CAN_IRQHandler+0x30c>
 80011d4:	2b30      	cmp	r3, #48	; 0x30
 80011d6:	d822      	bhi.n	800121e <HAL_CAN_IRQHandler+0x334>
 80011d8:	2b10      	cmp	r3, #16
 80011da:	d002      	beq.n	80011e2 <HAL_CAN_IRQHandler+0x2f8>
 80011dc:	2b20      	cmp	r3, #32
 80011de:	d005      	beq.n	80011ec <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80011e0:	e01d      	b.n	800121e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	f043 0308 	orr.w	r3, r3, #8
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011ea:	e019      	b.n	8001220 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	f043 0310 	orr.w	r3, r3, #16
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011f4:	e014      	b.n	8001220 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	f043 0320 	orr.w	r3, r3, #32
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011fe:	e00f      	b.n	8001220 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001208:	e00a      	b.n	8001220 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001212:	e005      	b.n	8001220 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800121c:	e000      	b.n	8001220 <HAL_CAN_IRQHandler+0x336>
            break;
 800121e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	699a      	ldr	r2, [r3, #24]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800122e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2204      	movs	r2, #4
 8001236:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	2b00      	cmp	r3, #0
 800123c:	d008      	beq.n	8001250 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	431a      	orrs	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f872 	bl	8001334 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137a:	4a04      	ldr	r2, [pc, #16]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	60d3      	str	r3, [r2, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	f003 0307 	and.w	r3, r3, #7
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	db0b      	blt.n	80013d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 021f 	and.w	r2, r3, #31
 80013c4:	4907      	ldr	r1, [pc, #28]	; (80013e4 <__NVIC_EnableIRQ+0x38>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	2001      	movs	r0, #1
 80013ce:	fa00 f202 	lsl.w	r2, r0, r2
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000e100 	.word	0xe000e100

080013e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	db0a      	blt.n	8001412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	490c      	ldr	r1, [pc, #48]	; (8001434 <__NVIC_SetPriority+0x4c>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	440b      	add	r3, r1
 800140c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001410:	e00a      	b.n	8001428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4908      	ldr	r1, [pc, #32]	; (8001438 <__NVIC_SetPriority+0x50>)
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	3b04      	subs	r3, #4
 8001420:	0112      	lsls	r2, r2, #4
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	440b      	add	r3, r1
 8001426:	761a      	strb	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000e100 	.word	0xe000e100
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	; 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f1c3 0307 	rsb	r3, r3, #7
 8001456:	2b04      	cmp	r3, #4
 8001458:	bf28      	it	cs
 800145a:	2304      	movcs	r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3304      	adds	r3, #4
 8001462:	2b06      	cmp	r3, #6
 8001464:	d902      	bls.n	800146c <NVIC_EncodePriority+0x30>
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3b03      	subs	r3, #3
 800146a:	e000      	b.n	800146e <NVIC_EncodePriority+0x32>
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43da      	mvns	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	401a      	ands	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001484:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43d9      	mvns	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	4313      	orrs	r3, r2
         );
}
 8001496:	4618      	mov	r0, r3
 8001498:	3724      	adds	r7, #36	; 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b4:	d301      	bcc.n	80014ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00f      	b.n	80014da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <SysTick_Config+0x40>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c2:	210f      	movs	r1, #15
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014c8:	f7ff ff8e 	bl	80013e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <SysTick_Config+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <SysTick_Config+0x40>)
 80014d4:	2207      	movs	r2, #7
 80014d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	e000e010 	.word	0xe000e010

080014e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff29 	bl	8001348 <__NVIC_SetPriorityGrouping>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001510:	f7ff ff3e 	bl	8001390 <__NVIC_GetPriorityGrouping>
 8001514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f7ff ff8e 	bl	800143c <NVIC_EncodePriority>
 8001520:	4602      	mov	r2, r0
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff5d 	bl	80013e8 <__NVIC_SetPriority>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff31 	bl	80013ac <__NVIC_EnableIRQ>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ffa2 	bl	80014a4 <SysTick_Config>
 8001560:	4603      	mov	r3, r0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001578:	2b02      	cmp	r3, #2
 800157a:	d008      	beq.n	800158e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2204      	movs	r2, #4
 8001580:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e020      	b.n	80015d0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 020e 	bic.w	r2, r2, #14
 800159c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0201 	bic.w	r2, r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b6:	2101      	movs	r1, #1
 80015b8:	fa01 f202 	lsl.w	r2, r1, r2
 80015bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d005      	beq.n	80015fe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2204      	movs	r2, #4
 80015f6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	e027      	b.n	800164e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 020e 	bic.w	r2, r2, #14
 800160c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	4798      	blx	r3
    } 
  }
  return status;
 800164e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001666:	e14e      	b.n	8001906 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2101      	movs	r1, #1
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	4013      	ands	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8140 	beq.w	8001900 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b01      	cmp	r3, #1
 800168a:	d005      	beq.n	8001698 <HAL_GPIO_Init+0x40>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d130      	bne.n	80016fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	2203      	movs	r2, #3
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ce:	2201      	movs	r2, #1
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	f003 0201 	and.w	r2, r3, #1
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	2b03      	cmp	r3, #3
 8001704:	d017      	beq.n	8001736 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	2203      	movs	r2, #3
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d123      	bne.n	800178a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	08da      	lsrs	r2, r3, #3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3208      	adds	r2, #8
 800174a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800174e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	220f      	movs	r2, #15
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	691a      	ldr	r2, [r3, #16]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	08da      	lsrs	r2, r3, #3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3208      	adds	r2, #8
 8001784:	6939      	ldr	r1, [r7, #16]
 8001786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	2203      	movs	r2, #3
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 0203 	and.w	r2, r3, #3
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 809a 	beq.w	8001900 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017cc:	4b55      	ldr	r3, [pc, #340]	; (8001924 <HAL_GPIO_Init+0x2cc>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a54      	ldr	r2, [pc, #336]	; (8001924 <HAL_GPIO_Init+0x2cc>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b52      	ldr	r3, [pc, #328]	; (8001924 <HAL_GPIO_Init+0x2cc>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017e4:	4a50      	ldr	r2, [pc, #320]	; (8001928 <HAL_GPIO_Init+0x2d0>)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	089b      	lsrs	r3, r3, #2
 80017ea:	3302      	adds	r3, #2
 80017ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	220f      	movs	r2, #15
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800180e:	d013      	beq.n	8001838 <HAL_GPIO_Init+0x1e0>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a46      	ldr	r2, [pc, #280]	; (800192c <HAL_GPIO_Init+0x2d4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d00d      	beq.n	8001834 <HAL_GPIO_Init+0x1dc>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a45      	ldr	r2, [pc, #276]	; (8001930 <HAL_GPIO_Init+0x2d8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d007      	beq.n	8001830 <HAL_GPIO_Init+0x1d8>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a44      	ldr	r2, [pc, #272]	; (8001934 <HAL_GPIO_Init+0x2dc>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d101      	bne.n	800182c <HAL_GPIO_Init+0x1d4>
 8001828:	2303      	movs	r3, #3
 800182a:	e006      	b.n	800183a <HAL_GPIO_Init+0x1e2>
 800182c:	2305      	movs	r3, #5
 800182e:	e004      	b.n	800183a <HAL_GPIO_Init+0x1e2>
 8001830:	2302      	movs	r3, #2
 8001832:	e002      	b.n	800183a <HAL_GPIO_Init+0x1e2>
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <HAL_GPIO_Init+0x1e2>
 8001838:	2300      	movs	r3, #0
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	f002 0203 	and.w	r2, r2, #3
 8001840:	0092      	lsls	r2, r2, #2
 8001842:	4093      	lsls	r3, r2
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800184a:	4937      	ldr	r1, [pc, #220]	; (8001928 <HAL_GPIO_Init+0x2d0>)
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	3302      	adds	r3, #2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001858:	4b37      	ldr	r3, [pc, #220]	; (8001938 <HAL_GPIO_Init+0x2e0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	43db      	mvns	r3, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800187c:	4a2e      	ldr	r2, [pc, #184]	; (8001938 <HAL_GPIO_Init+0x2e0>)
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001882:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <HAL_GPIO_Init+0x2e0>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	43db      	mvns	r3, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018a6:	4a24      	ldr	r2, [pc, #144]	; (8001938 <HAL_GPIO_Init+0x2e0>)
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <HAL_GPIO_Init+0x2e0>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018d0:	4a19      	ldr	r2, [pc, #100]	; (8001938 <HAL_GPIO_Init+0x2e0>)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <HAL_GPIO_Init+0x2e0>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018fa:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <HAL_GPIO_Init+0x2e0>)
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	3301      	adds	r3, #1
 8001904:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	f47f aea9 	bne.w	8001668 <HAL_GPIO_Init+0x10>
  }
}
 8001916:	bf00      	nop
 8001918:	bf00      	nop
 800191a:	371c      	adds	r7, #28
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	40021000 	.word	0x40021000
 8001928:	40010000 	.word	0x40010000
 800192c:	48000400 	.word	0x48000400
 8001930:	48000800 	.word	0x48000800
 8001934:	48000c00 	.word	0x48000c00
 8001938:	40010400 	.word	0x40010400

0800193c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	807b      	strh	r3, [r7, #2]
 8001948:	4613      	mov	r3, r2
 800194a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800194c:	787b      	ldrb	r3, [r7, #1]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001952:	887a      	ldrh	r2, [r7, #2]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001958:	e002      	b.n	8001960 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800195a:	887a      	ldrh	r2, [r7, #2]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001972:	af00      	add	r7, sp, #0
 8001974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001978:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800197c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800197e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001982:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	f001 b823 	b.w	80029d8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001996:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 817d 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019a8:	4bbc      	ldr	r3, [pc, #752]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d00c      	beq.n	80019ce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019b4:	4bb9      	ldr	r3, [pc, #740]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d15c      	bne.n	8001a7a <HAL_RCC_OscConfig+0x10e>
 80019c0:	4bb6      	ldr	r3, [pc, #728]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019cc:	d155      	bne.n	8001a7a <HAL_RCC_OscConfig+0x10e>
 80019ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019d2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80019da:	fa93 f3a3 	rbit	r3, r3
 80019de:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	095b      	lsrs	r3, r3, #5
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d102      	bne.n	8001a00 <HAL_RCC_OscConfig+0x94>
 80019fa:	4ba8      	ldr	r3, [pc, #672]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	e015      	b.n	8001a2c <HAL_RCC_OscConfig+0xc0>
 8001a00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a04:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a0c:	fa93 f3a3 	rbit	r3, r3
 8001a10:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a18:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a1c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001a28:	4b9c      	ldr	r3, [pc, #624]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a30:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001a34:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a38:	fa92 f2a2 	rbit	r2, r2
 8001a3c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001a40:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001a44:	fab2 f282 	clz	r2, r2
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	f042 0220 	orr.w	r2, r2, #32
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	f002 021f 	and.w	r2, r2, #31
 8001a54:	2101      	movs	r1, #1
 8001a56:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 811f 	beq.w	8001ca0 <HAL_RCC_OscConfig+0x334>
 8001a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f040 8116 	bne.w	8001ca0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	f000 bfaf 	b.w	80029d8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8a:	d106      	bne.n	8001a9a <HAL_RCC_OscConfig+0x12e>
 8001a8c:	4b83      	ldr	r3, [pc, #524]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a82      	ldr	r2, [pc, #520]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	e036      	b.n	8001b08 <HAL_RCC_OscConfig+0x19c>
 8001a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x158>
 8001aaa:	4b7c      	ldr	r3, [pc, #496]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a7b      	ldr	r2, [pc, #492]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	4b79      	ldr	r3, [pc, #484]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a78      	ldr	r2, [pc, #480]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e021      	b.n	8001b08 <HAL_RCC_OscConfig+0x19c>
 8001ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad4:	d10c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x184>
 8001ad6:	4b71      	ldr	r3, [pc, #452]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a70      	ldr	r2, [pc, #448]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	4b6e      	ldr	r3, [pc, #440]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a6d      	ldr	r2, [pc, #436]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e00b      	b.n	8001b08 <HAL_RCC_OscConfig+0x19c>
 8001af0:	4b6a      	ldr	r3, [pc, #424]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a69      	ldr	r2, [pc, #420]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	4b67      	ldr	r3, [pc, #412]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a66      	ldr	r2, [pc, #408]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b06:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b08:	4b64      	ldr	r3, [pc, #400]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	f023 020f 	bic.w	r2, r3, #15
 8001b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	495f      	ldr	r1, [pc, #380]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d059      	beq.n	8001be6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7fe fe8d 	bl	8000850 <HAL_GetTick>
 8001b36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7fe fe88 	bl	8000850 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b64      	cmp	r3, #100	; 0x64
 8001b4a:	d902      	bls.n	8001b52 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	f000 bf43 	b.w	80029d8 <HAL_RCC_OscConfig+0x106c>
 8001b52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b56:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001b66:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	095b      	lsrs	r3, r3, #5
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d102      	bne.n	8001b84 <HAL_RCC_OscConfig+0x218>
 8001b7e:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	e015      	b.n	8001bb0 <HAL_RCC_OscConfig+0x244>
 8001b84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b88:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001b90:	fa93 f3a3 	rbit	r3, r3
 8001b94:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b9c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001ba0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001ba4:	fa93 f3a3 	rbit	r3, r3
 8001ba8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001bac:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bb4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001bb8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001bbc:	fa92 f2a2 	rbit	r2, r2
 8001bc0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001bc4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001bc8:	fab2 f282 	clz	r2, r2
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	f042 0220 	orr.w	r2, r2, #32
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	f002 021f 	and.w	r2, r2, #31
 8001bd8:	2101      	movs	r1, #1
 8001bda:	fa01 f202 	lsl.w	r2, r1, r2
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0ab      	beq.n	8001b3c <HAL_RCC_OscConfig+0x1d0>
 8001be4:	e05d      	b.n	8001ca2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7fe fe33 	bl	8000850 <HAL_GetTick>
 8001bea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bee:	e00a      	b.n	8001c06 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7fe fe2e 	bl	8000850 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b64      	cmp	r3, #100	; 0x64
 8001bfe:	d902      	bls.n	8001c06 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	f000 bee9 	b.w	80029d8 <HAL_RCC_OscConfig+0x106c>
 8001c06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c0a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001c12:	fa93 f3a3 	rbit	r3, r3
 8001c16:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001c1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	095b      	lsrs	r3, r3, #5
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d102      	bne.n	8001c38 <HAL_RCC_OscConfig+0x2cc>
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	e015      	b.n	8001c64 <HAL_RCC_OscConfig+0x2f8>
 8001c38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c3c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c44:	fa93 f3a3 	rbit	r3, r3
 8001c48:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c50:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c54:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c60:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <HAL_RCC_OscConfig+0x330>)
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c68:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001c6c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c70:	fa92 f2a2 	rbit	r2, r2
 8001c74:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001c78:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001c7c:	fab2 f282 	clz	r2, r2
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	f042 0220 	orr.w	r2, r2, #32
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	f002 021f 	and.w	r2, r2, #31
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1ab      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x284>
 8001c98:	e003      	b.n	8001ca2 <HAL_RCC_OscConfig+0x336>
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 817d 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cb8:	4ba6      	ldr	r3, [pc, #664]	; (8001f54 <HAL_RCC_OscConfig+0x5e8>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00b      	beq.n	8001cdc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cc4:	4ba3      	ldr	r3, [pc, #652]	; (8001f54 <HAL_RCC_OscConfig+0x5e8>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d172      	bne.n	8001db6 <HAL_RCC_OscConfig+0x44a>
 8001cd0:	4ba0      	ldr	r3, [pc, #640]	; (8001f54 <HAL_RCC_OscConfig+0x5e8>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d16c      	bne.n	8001db6 <HAL_RCC_OscConfig+0x44a>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001cee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	095b      	lsrs	r3, r3, #5
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d102      	bne.n	8001d0c <HAL_RCC_OscConfig+0x3a0>
 8001d06:	4b93      	ldr	r3, [pc, #588]	; (8001f54 <HAL_RCC_OscConfig+0x5e8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	e013      	b.n	8001d34 <HAL_RCC_OscConfig+0x3c8>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001d1e:	2302      	movs	r3, #2
 8001d20:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d24:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001d30:	4b88      	ldr	r3, [pc, #544]	; (8001f54 <HAL_RCC_OscConfig+0x5e8>)
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	2202      	movs	r2, #2
 8001d36:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001d3a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d3e:	fa92 f2a2 	rbit	r2, r2
 8001d42:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d46:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d4a:	fab2 f282 	clz	r2, r2
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	f042 0220 	orr.w	r2, r2, #32
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	f002 021f 	and.w	r2, r2, #31
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00a      	beq.n	8001d7c <HAL_RCC_OscConfig+0x410>
 8001d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d002      	beq.n	8001d7c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	f000 be2e 	b.w	80029d8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7c:	4b75      	ldr	r3, [pc, #468]	; (8001f54 <HAL_RCC_OscConfig+0x5e8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	21f8      	movs	r1, #248	; 0xf8
 8001d92:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001d9a:	fa91 f1a1 	rbit	r1, r1
 8001d9e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001da2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001da6:	fab1 f181 	clz	r1, r1
 8001daa:	b2c9      	uxtb	r1, r1
 8001dac:	408b      	lsls	r3, r1
 8001dae:	4969      	ldr	r1, [pc, #420]	; (8001f54 <HAL_RCC_OscConfig+0x5e8>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db4:	e0fd      	b.n	8001fb2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 8088 	beq.w	8001ed8 <HAL_RCC_OscConfig+0x56c>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001dda:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001de8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	461a      	mov	r2, r3
 8001df0:	2301      	movs	r3, #1
 8001df2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7fe fd2c 	bl	8000850 <HAL_GetTick>
 8001df8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfc:	e00a      	b.n	8001e14 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfe:	f7fe fd27 	bl	8000850 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d902      	bls.n	8001e14 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	f000 bde2 	b.w	80029d8 <HAL_RCC_OscConfig+0x106c>
 8001e14:	2302      	movs	r3, #2
 8001e16:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001e1e:	fa93 f3a3 	rbit	r3, r3
 8001e22:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001e26:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	095b      	lsrs	r3, r3, #5
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d102      	bne.n	8001e44 <HAL_RCC_OscConfig+0x4d8>
 8001e3e:	4b45      	ldr	r3, [pc, #276]	; (8001f54 <HAL_RCC_OscConfig+0x5e8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	e013      	b.n	8001e6c <HAL_RCC_OscConfig+0x500>
 8001e44:	2302      	movs	r3, #2
 8001e46:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e56:	2302      	movs	r3, #2
 8001e58:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e5c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e68:	4b3a      	ldr	r3, [pc, #232]	; (8001f54 <HAL_RCC_OscConfig+0x5e8>)
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001e72:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e76:	fa92 f2a2 	rbit	r2, r2
 8001e7a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001e7e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e82:	fab2 f282 	clz	r2, r2
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	f042 0220 	orr.w	r2, r2, #32
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	f002 021f 	and.w	r2, r2, #31
 8001e92:	2101      	movs	r1, #1
 8001e94:	fa01 f202 	lsl.w	r2, r1, r2
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0af      	beq.n	8001dfe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9e:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <HAL_RCC_OscConfig+0x5e8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	21f8      	movs	r1, #248	; 0xf8
 8001eb4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ebc:	fa91 f1a1 	rbit	r1, r1
 8001ec0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001ec4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001ec8:	fab1 f181 	clz	r1, r1
 8001ecc:	b2c9      	uxtb	r1, r1
 8001ece:	408b      	lsls	r3, r1
 8001ed0:	4920      	ldr	r1, [pc, #128]	; (8001f54 <HAL_RCC_OscConfig+0x5e8>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]
 8001ed6:	e06c      	b.n	8001fb2 <HAL_RCC_OscConfig+0x646>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001eea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ef8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	461a      	mov	r2, r3
 8001f00:	2300      	movs	r3, #0
 8001f02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7fe fca4 	bl	8000850 <HAL_GetTick>
 8001f08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0e:	f7fe fc9f 	bl	8000850 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d902      	bls.n	8001f24 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	f000 bd5a 	b.w	80029d8 <HAL_RCC_OscConfig+0x106c>
 8001f24:	2302      	movs	r3, #2
 8001f26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001f36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	095b      	lsrs	r3, r3, #5
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d104      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5ec>
 8001f4e:	4b01      	ldr	r3, [pc, #4]	; (8001f54 <HAL_RCC_OscConfig+0x5e8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	e015      	b.n	8001f80 <HAL_RCC_OscConfig+0x614>
 8001f54:	40021000 	.word	0x40021000
 8001f58:	2302      	movs	r3, #2
 8001f5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f70:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001f7c:	4bc8      	ldr	r3, [pc, #800]	; (80022a0 <HAL_RCC_OscConfig+0x934>)
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	2202      	movs	r2, #2
 8001f82:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001f86:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f8a:	fa92 f2a2 	rbit	r2, r2
 8001f8e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001f92:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001f96:	fab2 f282 	clz	r2, r2
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	f042 0220 	orr.w	r2, r2, #32
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	f002 021f 	and.w	r2, r2, #31
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1ad      	bne.n	8001f0e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8110 	beq.w	80021e8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d079      	beq.n	80020cc <HAL_RCC_OscConfig+0x760>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4bab      	ldr	r3, [pc, #684]	; (80022a4 <HAL_RCC_OscConfig+0x938>)
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	2301      	movs	r3, #1
 8002000:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002002:	f7fe fc25 	bl	8000850 <HAL_GetTick>
 8002006:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200a:	e00a      	b.n	8002022 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800200c:	f7fe fc20 	bl	8000850 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d902      	bls.n	8002022 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	f000 bcdb 	b.w	80029d8 <HAL_RCC_OscConfig+0x106c>
 8002022:	2302      	movs	r3, #2
 8002024:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002038:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800203c:	2202      	movs	r2, #2
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002044:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	fa93 f2a3 	rbit	r2, r3
 800204e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002060:	2202      	movs	r2, #2
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	fa93 f2a3 	rbit	r2, r3
 8002072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002076:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800207a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207c:	4b88      	ldr	r3, [pc, #544]	; (80022a0 <HAL_RCC_OscConfig+0x934>)
 800207e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002084:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002088:	2102      	movs	r1, #2
 800208a:	6019      	str	r1, [r3, #0]
 800208c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002090:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	fa93 f1a3 	rbit	r1, r3
 800209a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020a2:	6019      	str	r1, [r3, #0]
  return result;
 80020a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	2101      	movs	r1, #1
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0a0      	beq.n	800200c <HAL_RCC_OscConfig+0x6a0>
 80020ca:	e08d      	b.n	80021e8 <HAL_RCC_OscConfig+0x87c>
 80020cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020d4:	2201      	movs	r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	fa93 f2a3 	rbit	r2, r3
 80020e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80020ee:	601a      	str	r2, [r3, #0]
  return result;
 80020f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80020f8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	461a      	mov	r2, r3
 8002102:	4b68      	ldr	r3, [pc, #416]	; (80022a4 <HAL_RCC_OscConfig+0x938>)
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	461a      	mov	r2, r3
 800210a:	2300      	movs	r3, #0
 800210c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210e:	f7fe fb9f 	bl	8000850 <HAL_GetTick>
 8002112:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002116:	e00a      	b.n	800212e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002118:	f7fe fb9a 	bl	8000850 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d902      	bls.n	800212e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	f000 bc55 	b.w	80029d8 <HAL_RCC_OscConfig+0x106c>
 800212e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002132:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002136:	2202      	movs	r2, #2
 8002138:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	fa93 f2a3 	rbit	r2, r3
 8002148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002156:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800215a:	2202      	movs	r2, #2
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002162:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	fa93 f2a3 	rbit	r2, r3
 800216c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002170:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800217e:	2202      	movs	r2, #2
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002186:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	fa93 f2a3 	rbit	r2, r3
 8002190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002194:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002198:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219a:	4b41      	ldr	r3, [pc, #260]	; (80022a0 <HAL_RCC_OscConfig+0x934>)
 800219c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800219e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80021a6:	2102      	movs	r1, #2
 80021a8:	6019      	str	r1, [r3, #0]
 80021aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	fa93 f1a3 	rbit	r1, r3
 80021b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021bc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80021c0:	6019      	str	r1, [r3, #0]
  return result;
 80021c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	fab3 f383 	clz	r3, r3
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	2101      	movs	r1, #1
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d197      	bne.n	8002118 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 81a1 	beq.w	8002540 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002204:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <HAL_RCC_OscConfig+0x934>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d116      	bne.n	800223e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002210:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <HAL_RCC_OscConfig+0x934>)
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	4a22      	ldr	r2, [pc, #136]	; (80022a0 <HAL_RCC_OscConfig+0x934>)
 8002216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221a:	61d3      	str	r3, [r2, #28]
 800221c:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <HAL_RCC_OscConfig+0x934>)
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002228:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002232:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002236:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002238:	2301      	movs	r3, #1
 800223a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223e:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <HAL_RCC_OscConfig+0x93c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d11a      	bne.n	8002280 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800224a:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <HAL_RCC_OscConfig+0x93c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a16      	ldr	r2, [pc, #88]	; (80022a8 <HAL_RCC_OscConfig+0x93c>)
 8002250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002254:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002256:	f7fe fafb 	bl	8000850 <HAL_GetTick>
 800225a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225e:	e009      	b.n	8002274 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002260:	f7fe faf6 	bl	8000850 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b64      	cmp	r3, #100	; 0x64
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e3b1      	b.n	80029d8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <HAL_RCC_OscConfig+0x93c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0ef      	beq.n	8002260 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002284:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d10d      	bne.n	80022ac <HAL_RCC_OscConfig+0x940>
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <HAL_RCC_OscConfig+0x934>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4a02      	ldr	r2, [pc, #8]	; (80022a0 <HAL_RCC_OscConfig+0x934>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6213      	str	r3, [r2, #32]
 800229c:	e03c      	b.n	8002318 <HAL_RCC_OscConfig+0x9ac>
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	10908120 	.word	0x10908120
 80022a8:	40007000 	.word	0x40007000
 80022ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10c      	bne.n	80022d6 <HAL_RCC_OscConfig+0x96a>
 80022bc:	4bc1      	ldr	r3, [pc, #772]	; (80025c4 <HAL_RCC_OscConfig+0xc58>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4ac0      	ldr	r2, [pc, #768]	; (80025c4 <HAL_RCC_OscConfig+0xc58>)
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	6213      	str	r3, [r2, #32]
 80022c8:	4bbe      	ldr	r3, [pc, #760]	; (80025c4 <HAL_RCC_OscConfig+0xc58>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	4abd      	ldr	r2, [pc, #756]	; (80025c4 <HAL_RCC_OscConfig+0xc58>)
 80022ce:	f023 0304 	bic.w	r3, r3, #4
 80022d2:	6213      	str	r3, [r2, #32]
 80022d4:	e020      	b.n	8002318 <HAL_RCC_OscConfig+0x9ac>
 80022d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b05      	cmp	r3, #5
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x994>
 80022e6:	4bb7      	ldr	r3, [pc, #732]	; (80025c4 <HAL_RCC_OscConfig+0xc58>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4ab6      	ldr	r2, [pc, #728]	; (80025c4 <HAL_RCC_OscConfig+0xc58>)
 80022ec:	f043 0304 	orr.w	r3, r3, #4
 80022f0:	6213      	str	r3, [r2, #32]
 80022f2:	4bb4      	ldr	r3, [pc, #720]	; (80025c4 <HAL_RCC_OscConfig+0xc58>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4ab3      	ldr	r2, [pc, #716]	; (80025c4 <HAL_RCC_OscConfig+0xc58>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6213      	str	r3, [r2, #32]
 80022fe:	e00b      	b.n	8002318 <HAL_RCC_OscConfig+0x9ac>
 8002300:	4bb0      	ldr	r3, [pc, #704]	; (80025c4 <HAL_RCC_OscConfig+0xc58>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4aaf      	ldr	r2, [pc, #700]	; (80025c4 <HAL_RCC_OscConfig+0xc58>)
 8002306:	f023 0301 	bic.w	r3, r3, #1
 800230a:	6213      	str	r3, [r2, #32]
 800230c:	4bad      	ldr	r3, [pc, #692]	; (80025c4 <HAL_RCC_OscConfig+0xc58>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4aac      	ldr	r2, [pc, #688]	; (80025c4 <HAL_RCC_OscConfig+0xc58>)
 8002312:	f023 0304 	bic.w	r3, r3, #4
 8002316:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 8081 	beq.w	800242c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232a:	f7fe fa91 	bl	8000850 <HAL_GetTick>
 800232e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002334:	f7fe fa8c 	bl	8000850 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	f241 3288 	movw	r2, #5000	; 0x1388
 8002344:	4293      	cmp	r3, r2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e345      	b.n	80029d8 <HAL_RCC_OscConfig+0x106c>
 800234c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002350:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002354:	2202      	movs	r2, #2
 8002356:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	fa93 f2a3 	rbit	r2, r3
 8002366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002374:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002378:	2202      	movs	r2, #2
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002380:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	fa93 f2a3 	rbit	r2, r3
 800238a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002392:	601a      	str	r2, [r3, #0]
  return result;
 8002394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002398:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800239c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239e:	fab3 f383 	clz	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	095b      	lsrs	r3, r3, #5
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	f043 0302 	orr.w	r3, r3, #2
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d102      	bne.n	80023b8 <HAL_RCC_OscConfig+0xa4c>
 80023b2:	4b84      	ldr	r3, [pc, #528]	; (80025c4 <HAL_RCC_OscConfig+0xc58>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	e013      	b.n	80023e0 <HAL_RCC_OscConfig+0xa74>
 80023b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023bc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80023c0:	2202      	movs	r2, #2
 80023c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	fa93 f2a3 	rbit	r2, r3
 80023d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	4b79      	ldr	r3, [pc, #484]	; (80025c4 <HAL_RCC_OscConfig+0xc58>)
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023e4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80023e8:	2102      	movs	r1, #2
 80023ea:	6011      	str	r1, [r2, #0]
 80023ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023f0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	fa92 f1a2 	rbit	r1, r2
 80023fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023fe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002402:	6011      	str	r1, [r2, #0]
  return result;
 8002404:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002408:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	fab2 f282 	clz	r2, r2
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	f002 021f 	and.w	r2, r2, #31
 800241e:	2101      	movs	r1, #1
 8002420:	fa01 f202 	lsl.w	r2, r1, r2
 8002424:	4013      	ands	r3, r2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d084      	beq.n	8002334 <HAL_RCC_OscConfig+0x9c8>
 800242a:	e07f      	b.n	800252c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242c:	f7fe fa10 	bl	8000850 <HAL_GetTick>
 8002430:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002434:	e00b      	b.n	800244e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002436:	f7fe fa0b 	bl	8000850 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f241 3288 	movw	r2, #5000	; 0x1388
 8002446:	4293      	cmp	r3, r2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e2c4      	b.n	80029d8 <HAL_RCC_OscConfig+0x106c>
 800244e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002452:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002456:	2202      	movs	r2, #2
 8002458:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	fa93 f2a3 	rbit	r2, r3
 8002468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002476:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800247a:	2202      	movs	r2, #2
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002482:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	fa93 f2a3 	rbit	r2, r3
 800248c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002490:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002494:	601a      	str	r2, [r3, #0]
  return result;
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800249e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f043 0302 	orr.w	r3, r3, #2
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d102      	bne.n	80024ba <HAL_RCC_OscConfig+0xb4e>
 80024b4:	4b43      	ldr	r3, [pc, #268]	; (80025c4 <HAL_RCC_OscConfig+0xc58>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	e013      	b.n	80024e2 <HAL_RCC_OscConfig+0xb76>
 80024ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80024c2:	2202      	movs	r2, #2
 80024c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	fa93 f2a3 	rbit	r2, r3
 80024d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	4b39      	ldr	r3, [pc, #228]	; (80025c4 <HAL_RCC_OscConfig+0xc58>)
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024e6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80024ea:	2102      	movs	r1, #2
 80024ec:	6011      	str	r1, [r2, #0]
 80024ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024f2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	fa92 f1a2 	rbit	r1, r2
 80024fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002500:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002504:	6011      	str	r1, [r2, #0]
  return result;
 8002506:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800250a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	fab2 f282 	clz	r2, r2
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	f002 021f 	and.w	r2, r2, #31
 8002520:	2101      	movs	r1, #1
 8002522:	fa01 f202 	lsl.w	r2, r1, r2
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d184      	bne.n	8002436 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800252c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002530:	2b01      	cmp	r3, #1
 8002532:	d105      	bne.n	8002540 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002534:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <HAL_RCC_OscConfig+0xc58>)
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	4a22      	ldr	r2, [pc, #136]	; (80025c4 <HAL_RCC_OscConfig+0xc58>)
 800253a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800253e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002544:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8242 	beq.w	80029d6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002552:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <HAL_RCC_OscConfig+0xc58>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b08      	cmp	r3, #8
 800255c:	f000 8213 	beq.w	8002986 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002564:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	2b02      	cmp	r3, #2
 800256e:	f040 8162 	bne.w	8002836 <HAL_RCC_OscConfig+0xeca>
 8002572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002576:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800257a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800257e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002584:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	fa93 f2a3 	rbit	r2, r3
 800258e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002592:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002596:	601a      	str	r2, [r3, #0]
  return result;
 8002598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80025a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a2:	fab3 f383 	clz	r3, r3
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	461a      	mov	r2, r3
 80025b4:	2300      	movs	r3, #0
 80025b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7fe f94a 	bl	8000850 <HAL_GetTick>
 80025bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c0:	e00c      	b.n	80025dc <HAL_RCC_OscConfig+0xc70>
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe f942 	bl	8000850 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e1fd      	b.n	80029d8 <HAL_RCC_OscConfig+0x106c>
 80025dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80025e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	fa93 f2a3 	rbit	r2, r3
 80025f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002600:	601a      	str	r2, [r3, #0]
  return result;
 8002602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002606:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800260a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260c:	fab3 f383 	clz	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	b2db      	uxtb	r3, r3
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d102      	bne.n	8002626 <HAL_RCC_OscConfig+0xcba>
 8002620:	4bb0      	ldr	r3, [pc, #704]	; (80028e4 <HAL_RCC_OscConfig+0xf78>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	e027      	b.n	8002676 <HAL_RCC_OscConfig+0xd0a>
 8002626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800262e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002638:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	fa93 f2a3 	rbit	r2, r3
 8002642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002646:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002650:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002654:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	fa93 f2a3 	rbit	r2, r3
 8002668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	4b9c      	ldr	r3, [pc, #624]	; (80028e4 <HAL_RCC_OscConfig+0xf78>)
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800267a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800267e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002682:	6011      	str	r1, [r2, #0]
 8002684:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002688:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	fa92 f1a2 	rbit	r1, r2
 8002692:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002696:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800269a:	6011      	str	r1, [r2, #0]
  return result;
 800269c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026a0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	fab2 f282 	clz	r2, r2
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	f042 0220 	orr.w	r2, r2, #32
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	f002 021f 	and.w	r2, r2, #31
 80026b6:	2101      	movs	r1, #1
 80026b8:	fa01 f202 	lsl.w	r2, r1, r2
 80026bc:	4013      	ands	r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d182      	bne.n	80025c8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026c2:	4b88      	ldr	r3, [pc, #544]	; (80028e4 <HAL_RCC_OscConfig+0xf78>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	430b      	orrs	r3, r1
 80026e4:	497f      	ldr	r1, [pc, #508]	; (80028e4 <HAL_RCC_OscConfig+0xf78>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]
 80026ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ee:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80026f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	fa93 f2a3 	rbit	r2, r3
 8002706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800270e:	601a      	str	r2, [r3, #0]
  return result;
 8002710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002714:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002718:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002724:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	461a      	mov	r2, r3
 800272c:	2301      	movs	r3, #1
 800272e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe f88e 	bl	8000850 <HAL_GetTick>
 8002734:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002738:	e009      	b.n	800274e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273a:	f7fe f889 	bl	8000850 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e144      	b.n	80029d8 <HAL_RCC_OscConfig+0x106c>
 800274e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002752:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002756:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800275a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002760:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	fa93 f2a3 	rbit	r2, r3
 800276a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002772:	601a      	str	r2, [r3, #0]
  return result;
 8002774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002778:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800277c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b01      	cmp	r3, #1
 8002790:	d102      	bne.n	8002798 <HAL_RCC_OscConfig+0xe2c>
 8002792:	4b54      	ldr	r3, [pc, #336]	; (80028e4 <HAL_RCC_OscConfig+0xf78>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	e027      	b.n	80027e8 <HAL_RCC_OscConfig+0xe7c>
 8002798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80027a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027aa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	fa93 f2a3 	rbit	r2, r3
 80027b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80027c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	fa93 f2a3 	rbit	r2, r3
 80027da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027de:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	4b3f      	ldr	r3, [pc, #252]	; (80028e4 <HAL_RCC_OscConfig+0xf78>)
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ec:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80027f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027f4:	6011      	str	r1, [r2, #0]
 80027f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027fa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	fa92 f1a2 	rbit	r1, r2
 8002804:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002808:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800280c:	6011      	str	r1, [r2, #0]
  return result;
 800280e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002812:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	fab2 f282 	clz	r2, r2
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	f042 0220 	orr.w	r2, r2, #32
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	f002 021f 	and.w	r2, r2, #31
 8002828:	2101      	movs	r1, #1
 800282a:	fa01 f202 	lsl.w	r2, r1, r2
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d082      	beq.n	800273a <HAL_RCC_OscConfig+0xdce>
 8002834:	e0cf      	b.n	80029d6 <HAL_RCC_OscConfig+0x106a>
 8002836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800283e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002842:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002848:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	fa93 f2a3 	rbit	r2, r3
 8002852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002856:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800285a:	601a      	str	r2, [r3, #0]
  return result;
 800285c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002860:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002864:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002870:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	461a      	mov	r2, r3
 8002878:	2300      	movs	r3, #0
 800287a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7fd ffe8 	bl	8000850 <HAL_GetTick>
 8002880:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002884:	e009      	b.n	800289a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002886:	f7fd ffe3 	bl	8000850 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e09e      	b.n	80029d8 <HAL_RCC_OscConfig+0x106c>
 800289a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80028a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ac:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	fa93 f2a3 	rbit	r2, r3
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80028be:	601a      	str	r2, [r3, #0]
  return result;
 80028c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80028c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d104      	bne.n	80028e8 <HAL_RCC_OscConfig+0xf7c>
 80028de:	4b01      	ldr	r3, [pc, #4]	; (80028e4 <HAL_RCC_OscConfig+0xf78>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	e029      	b.n	8002938 <HAL_RCC_OscConfig+0xfcc>
 80028e4:	40021000 	.word	0x40021000
 80028e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ec:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80028f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	fa93 f2a3 	rbit	r2, r3
 8002904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002908:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002912:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002916:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002920:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	fa93 f2a3 	rbit	r2, r3
 800292a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <HAL_RCC_OscConfig+0x1078>)
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800293c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002940:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002944:	6011      	str	r1, [r2, #0]
 8002946:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800294a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	fa92 f1a2 	rbit	r1, r2
 8002954:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002958:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800295c:	6011      	str	r1, [r2, #0]
  return result;
 800295e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002962:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	fab2 f282 	clz	r2, r2
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	f042 0220 	orr.w	r2, r2, #32
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	f002 021f 	and.w	r2, r2, #31
 8002978:	2101      	movs	r1, #1
 800297a:	fa01 f202 	lsl.w	r2, r1, r2
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d180      	bne.n	8002886 <HAL_RCC_OscConfig+0xf1a>
 8002984:	e027      	b.n	80029d6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e01e      	b.n	80029d8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_RCC_OscConfig+0x1078>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80029a6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d10b      	bne.n	80029d2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80029ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80029be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d001      	beq.n	80029d6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000

080029e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b09e      	sub	sp, #120	; 0x78
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e162      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a00:	4b90      	ldr	r3, [pc, #576]	; (8002c44 <HAL_RCC_ClockConfig+0x25c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d910      	bls.n	8002a30 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b8d      	ldr	r3, [pc, #564]	; (8002c44 <HAL_RCC_ClockConfig+0x25c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 0207 	bic.w	r2, r3, #7
 8002a16:	498b      	ldr	r1, [pc, #556]	; (8002c44 <HAL_RCC_ClockConfig+0x25c>)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b89      	ldr	r3, [pc, #548]	; (8002c44 <HAL_RCC_ClockConfig+0x25c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e14a      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a3c:	4b82      	ldr	r3, [pc, #520]	; (8002c48 <HAL_RCC_ClockConfig+0x260>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	497f      	ldr	r1, [pc, #508]	; (8002c48 <HAL_RCC_ClockConfig+0x260>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 80dc 	beq.w	8002c14 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d13c      	bne.n	8002ade <HAL_RCC_ClockConfig+0xf6>
 8002a64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a68:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a6c:	fa93 f3a3 	rbit	r3, r3
 8002a70:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a74:	fab3 f383 	clz	r3, r3
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d102      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xa6>
 8002a88:	4b6f      	ldr	r3, [pc, #444]	; (8002c48 <HAL_RCC_ClockConfig+0x260>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	e00f      	b.n	8002aae <HAL_RCC_ClockConfig+0xc6>
 8002a8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	667b      	str	r3, [r7, #100]	; 0x64
 8002a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aa0:	663b      	str	r3, [r7, #96]	; 0x60
 8002aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aa4:	fa93 f3a3 	rbit	r3, r3
 8002aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002aaa:	4b67      	ldr	r3, [pc, #412]	; (8002c48 <HAL_RCC_ClockConfig+0x260>)
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ab2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ab4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ab6:	fa92 f2a2 	rbit	r2, r2
 8002aba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002abc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002abe:	fab2 f282 	clz	r2, r2
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	f042 0220 	orr.w	r2, r2, #32
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	f002 021f 	and.w	r2, r2, #31
 8002ace:	2101      	movs	r1, #1
 8002ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d17b      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e0f3      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d13c      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x178>
 8002ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aee:	fa93 f3a3 	rbit	r3, r3
 8002af2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d102      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x128>
 8002b0a:	4b4f      	ldr	r3, [pc, #316]	; (8002c48 <HAL_RCC_ClockConfig+0x260>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	e00f      	b.n	8002b30 <HAL_RCC_ClockConfig+0x148>
 8002b10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b18:	fa93 f3a3 	rbit	r3, r3
 8002b1c:	647b      	str	r3, [r7, #68]	; 0x44
 8002b1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b22:	643b      	str	r3, [r7, #64]	; 0x40
 8002b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b26:	fa93 f3a3 	rbit	r3, r3
 8002b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b2c:	4b46      	ldr	r3, [pc, #280]	; (8002c48 <HAL_RCC_ClockConfig+0x260>)
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b34:	63ba      	str	r2, [r7, #56]	; 0x38
 8002b36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b38:	fa92 f2a2 	rbit	r2, r2
 8002b3c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b40:	fab2 f282 	clz	r2, r2
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	f042 0220 	orr.w	r2, r2, #32
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	f002 021f 	and.w	r2, r2, #31
 8002b50:	2101      	movs	r1, #1
 8002b52:	fa01 f202 	lsl.w	r2, r1, r2
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d13a      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0b2      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x2de>
 8002b60:	2302      	movs	r3, #2
 8002b62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d102      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x1a0>
 8002b82:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <HAL_RCC_ClockConfig+0x260>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	e00d      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1bc>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	fa93 f3a3 	rbit	r3, r3
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
 8002b94:	2302      	movs	r3, #2
 8002b96:	623b      	str	r3, [r7, #32]
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	61fb      	str	r3, [r7, #28]
 8002ba0:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <HAL_RCC_ClockConfig+0x260>)
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	61ba      	str	r2, [r7, #24]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	fa92 f2a2 	rbit	r2, r2
 8002bae:	617a      	str	r2, [r7, #20]
  return result;
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	fab2 f282 	clz	r2, r2
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	f042 0220 	orr.w	r2, r2, #32
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	f002 021f 	and.w	r2, r2, #31
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e079      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <HAL_RCC_ClockConfig+0x260>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f023 0203 	bic.w	r2, r3, #3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	491a      	ldr	r1, [pc, #104]	; (8002c48 <HAL_RCC_ClockConfig+0x260>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be4:	f7fd fe34 	bl	8000850 <HAL_GetTick>
 8002be8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bea:	e00a      	b.n	8002c02 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bec:	f7fd fe30 	bl	8000850 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e061      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c02:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <HAL_RCC_ClockConfig+0x260>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 020c 	and.w	r2, r3, #12
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d1eb      	bne.n	8002bec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_RCC_ClockConfig+0x25c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d214      	bcs.n	8002c4c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <HAL_RCC_ClockConfig+0x25c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 0207 	bic.w	r2, r3, #7
 8002c2a:	4906      	ldr	r1, [pc, #24]	; (8002c44 <HAL_RCC_ClockConfig+0x25c>)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <HAL_RCC_ClockConfig+0x25c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e040      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x2de>
 8002c44:	40022000 	.word	0x40022000
 8002c48:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c58:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <HAL_RCC_ClockConfig+0x2e8>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	491a      	ldr	r1, [pc, #104]	; (8002cd0 <HAL_RCC_ClockConfig+0x2e8>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d009      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c76:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <HAL_RCC_ClockConfig+0x2e8>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4912      	ldr	r1, [pc, #72]	; (8002cd0 <HAL_RCC_ClockConfig+0x2e8>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c8a:	f000 f829 	bl	8002ce0 <HAL_RCC_GetSysClockFreq>
 8002c8e:	4601      	mov	r1, r0
 8002c90:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <HAL_RCC_ClockConfig+0x2e8>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c98:	22f0      	movs	r2, #240	; 0xf0
 8002c9a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	fa92 f2a2 	rbit	r2, r2
 8002ca2:	60fa      	str	r2, [r7, #12]
  return result;
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	fab2 f282 	clz	r2, r2
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	40d3      	lsrs	r3, r2
 8002cae:	4a09      	ldr	r2, [pc, #36]	; (8002cd4 <HAL_RCC_ClockConfig+0x2ec>)
 8002cb0:	5cd3      	ldrb	r3, [r2, r3]
 8002cb2:	fa21 f303 	lsr.w	r3, r1, r3
 8002cb6:	4a08      	ldr	r2, [pc, #32]	; (8002cd8 <HAL_RCC_ClockConfig+0x2f0>)
 8002cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002cba:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <HAL_RCC_ClockConfig+0x2f4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd fd82 	bl	80007c8 <HAL_InitTick>
  
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3778      	adds	r7, #120	; 0x78
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	08003da8 	.word	0x08003da8
 8002cd8:	20000010 	.word	0x20000010
 8002cdc:	20000014 	.word	0x20000014

08002ce0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b08b      	sub	sp, #44	; 0x2c
 8002ce4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	2300      	movs	r3, #0
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002cfa:	4b29      	ldr	r3, [pc, #164]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d002      	beq.n	8002d10 <HAL_RCC_GetSysClockFreq+0x30>
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d003      	beq.n	8002d16 <HAL_RCC_GetSysClockFreq+0x36>
 8002d0e:	e03c      	b.n	8002d8a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d10:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d12:	623b      	str	r3, [r7, #32]
      break;
 8002d14:	e03c      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d1c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002d20:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	fa92 f2a2 	rbit	r2, r2
 8002d28:	607a      	str	r2, [r7, #4]
  return result;
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	fab2 f282 	clz	r2, r2
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	40d3      	lsrs	r3, r2
 8002d34:	4a1c      	ldr	r2, [pc, #112]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d36:	5cd3      	ldrb	r3, [r2, r3]
 8002d38:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d3a:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	220f      	movs	r2, #15
 8002d44:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	fa92 f2a2 	rbit	r2, r2
 8002d4c:	60fa      	str	r2, [r7, #12]
  return result;
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	fab2 f282 	clz	r2, r2
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	40d3      	lsrs	r3, r2
 8002d58:	4a14      	ldr	r2, [pc, #80]	; (8002dac <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d5a:	5cd3      	ldrb	r3, [r2, r3]
 8002d5c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d68:	4a0e      	ldr	r2, [pc, #56]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	fb02 f303 	mul.w	r3, r2, r3
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
 8002d78:	e004      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	4a0c      	ldr	r2, [pc, #48]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d7e:	fb02 f303 	mul.w	r3, r2, r3
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	623b      	str	r3, [r7, #32]
      break;
 8002d88:	e002      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d8c:	623b      	str	r3, [r7, #32]
      break;
 8002d8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d90:	6a3b      	ldr	r3, [r7, #32]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	372c      	adds	r7, #44	; 0x2c
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40021000 	.word	0x40021000
 8002da4:	007a1200 	.word	0x007a1200
 8002da8:	08003dc0 	.word	0x08003dc0
 8002dac:	08003dd0 	.word	0x08003dd0
 8002db0:	003d0900 	.word	0x003d0900

08002db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db8:	4b03      	ldr	r3, [pc, #12]	; (8002dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dba:	681b      	ldr	r3, [r3, #0]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000010 	.word	0x20000010

08002dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002dd2:	f7ff ffef 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002dd6:	4601      	mov	r1, r0
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002de0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002de4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	fa92 f2a2 	rbit	r2, r2
 8002dec:	603a      	str	r2, [r7, #0]
  return result;
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	fab2 f282 	clz	r2, r2
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	40d3      	lsrs	r3, r2
 8002df8:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002dfa:	5cd3      	ldrb	r3, [r2, r3]
 8002dfc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	08003db8 	.word	0x08003db8

08002e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e16:	f7ff ffcd 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002e1a:	4601      	mov	r1, r0
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002e24:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002e28:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	fa92 f2a2 	rbit	r2, r2
 8002e30:	603a      	str	r2, [r7, #0]
  return result;
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	fab2 f282 	clz	r2, r2
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	40d3      	lsrs	r3, r2
 8002e3c:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e3e:	5cd3      	ldrb	r3, [r2, r3]
 8002e40:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	08003db8 	.word	0x08003db8

08002e54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e040      	b.n	8002ee8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fd fbc0 	bl	80005fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2224      	movs	r2, #36	; 0x24
 8002e80:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0201 	bic.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fbbe 	bl	8003614 <UART_SetConfig>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e022      	b.n	8002ee8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fce8 	bl	8003880 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ebe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ece:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0201 	orr.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fd6f 	bl	80039c4 <UART_CheckIdleState>
 8002ee6:	4603      	mov	r3, r0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	; 0x28
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	4613      	mov	r3, r2
 8002efe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	f040 8082 	bne.w	800300e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HAL_UART_Transmit+0x26>
 8002f10:	88fb      	ldrh	r3, [r7, #6]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e07a      	b.n	8003010 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_UART_Transmit+0x38>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e073      	b.n	8003010 <HAL_UART_Transmit+0x120>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2221      	movs	r2, #33	; 0x21
 8002f3c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f3e:	f7fd fc87 	bl	8000850 <HAL_GetTick>
 8002f42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	88fa      	ldrh	r2, [r7, #6]
 8002f48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	88fa      	ldrh	r2, [r7, #6]
 8002f50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5c:	d108      	bne.n	8002f70 <HAL_UART_Transmit+0x80>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d104      	bne.n	8002f70 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	e003      	b.n	8002f78 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f80:	e02d      	b.n	8002fde <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2180      	movs	r1, #128	; 0x80
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 fd62 	bl	8003a56 <UART_WaitOnFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e039      	b.n	8003010 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10b      	bne.n	8002fba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	881a      	ldrh	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fae:	b292      	uxth	r2, r2
 8002fb0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	e008      	b.n	8002fcc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	781a      	ldrb	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	b292      	uxth	r2, r2
 8002fc4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1cb      	bne.n	8002f82 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2140      	movs	r1, #64	; 0x40
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 fd2e 	bl	8003a56 <UART_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e005      	b.n	8003010 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	e000      	b.n	8003010 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800300e:	2302      	movs	r3, #2
  }
}
 8003010:	4618      	mov	r0, r3
 8003012:	3720      	adds	r7, #32
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b0ba      	sub	sp, #232	; 0xe8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800303e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003042:	f640 030f 	movw	r3, #2063	; 0x80f
 8003046:	4013      	ands	r3, r2
 8003048:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800304c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d115      	bne.n	8003080 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00f      	beq.n	8003080 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d009      	beq.n	8003080 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 82a3 	beq.w	80035bc <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
      }
      return;
 800307e:	e29d      	b.n	80035bc <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003080:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8117 	beq.w	80032b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800308a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003096:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800309a:	4b85      	ldr	r3, [pc, #532]	; (80032b0 <HAL_UART_IRQHandler+0x298>)
 800309c:	4013      	ands	r3, r2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 810a 	beq.w	80032b8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d011      	beq.n	80030d4 <HAL_UART_IRQHandler+0xbc>
 80030b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00b      	beq.n	80030d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2201      	movs	r2, #1
 80030c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ca:	f043 0201 	orr.w	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d011      	beq.n	8003104 <HAL_UART_IRQHandler+0xec>
 80030e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00b      	beq.n	8003104 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2202      	movs	r2, #2
 80030f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030fa:	f043 0204 	orr.w	r2, r3, #4
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d011      	beq.n	8003134 <HAL_UART_IRQHandler+0x11c>
 8003110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00b      	beq.n	8003134 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2204      	movs	r2, #4
 8003122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800312a:	f043 0202 	orr.w	r2, r3, #2
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	d017      	beq.n	8003170 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b00      	cmp	r3, #0
 800314a:	d105      	bne.n	8003158 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800314c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003150:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00b      	beq.n	8003170 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2208      	movs	r2, #8
 800315e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003166:	f043 0208 	orr.w	r2, r3, #8
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003178:	2b00      	cmp	r3, #0
 800317a:	d012      	beq.n	80031a2 <HAL_UART_IRQHandler+0x18a>
 800317c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003180:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00c      	beq.n	80031a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003190:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003198:	f043 0220 	orr.w	r2, r3, #32
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 8209 	beq.w	80035c0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00d      	beq.n	80031d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b40      	cmp	r3, #64	; 0x40
 80031ec:	d005      	beq.n	80031fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d04f      	beq.n	800329a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fcef 	bl	8003bde <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320a:	2b40      	cmp	r3, #64	; 0x40
 800320c:	d141      	bne.n	8003292 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3308      	adds	r3, #8
 8003214:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003218:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800321c:	e853 3f00 	ldrex	r3, [r3]
 8003220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003224:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800322c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3308      	adds	r3, #8
 8003236:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800323a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800323e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003242:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003246:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800324a:	e841 2300 	strex	r3, r2, [r1]
 800324e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1d9      	bne.n	800320e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	2b00      	cmp	r3, #0
 8003260:	d013      	beq.n	800328a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003266:	4a13      	ldr	r2, [pc, #76]	; (80032b4 <HAL_UART_IRQHandler+0x29c>)
 8003268:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe f9b4 	bl	80015dc <HAL_DMA_Abort_IT>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d017      	beq.n	80032aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003284:	4610      	mov	r0, r2
 8003286:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003288:	e00f      	b.n	80032aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f9ac 	bl	80035e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003290:	e00b      	b.n	80032aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f9a8 	bl	80035e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003298:	e007      	b.n	80032aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f9a4 	bl	80035e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80032a8:	e18a      	b.n	80035c0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032aa:	bf00      	nop
    return;
 80032ac:	e188      	b.n	80035c0 <HAL_UART_IRQHandler+0x5a8>
 80032ae:	bf00      	nop
 80032b0:	04000120 	.word	0x04000120
 80032b4:	08003ca5 	.word	0x08003ca5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032bc:	2b01      	cmp	r3, #1
 80032be:	f040 8143 	bne.w	8003548 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 813c 	beq.w	8003548 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8135 	beq.w	8003548 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2210      	movs	r2, #16
 80032e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	f040 80b1 	bne.w	8003458 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003302:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 815c 	beq.w	80035c4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003316:	429a      	cmp	r2, r3
 8003318:	f080 8154 	bcs.w	80035c4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003322:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	2b20      	cmp	r3, #32
 800332e:	f000 8085 	beq.w	800343c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800333e:	e853 3f00 	ldrex	r3, [r3]
 8003342:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003346:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800334a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800334e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800335c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003360:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003364:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003368:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800336c:	e841 2300 	strex	r3, r2, [r1]
 8003370:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003374:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1da      	bne.n	8003332 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3308      	adds	r3, #8
 8003382:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003386:	e853 3f00 	ldrex	r3, [r3]
 800338a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800338c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800338e:	f023 0301 	bic.w	r3, r3, #1
 8003392:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3308      	adds	r3, #8
 800339c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033a0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033a4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033ac:	e841 2300 	strex	r3, r2, [r1]
 80033b0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e1      	bne.n	800337c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3308      	adds	r3, #8
 80033be:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033c2:	e853 3f00 	ldrex	r3, [r3]
 80033c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3308      	adds	r3, #8
 80033d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033dc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033e4:	e841 2300 	strex	r3, r2, [r1]
 80033e8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e3      	bne.n	80033b8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003404:	e853 3f00 	ldrex	r3, [r3]
 8003408:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800340a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800340c:	f023 0310 	bic.w	r3, r3, #16
 8003410:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800341e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003420:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003422:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003424:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003426:	e841 2300 	strex	r3, r2, [r1]
 800342a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800342c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1e4      	bne.n	80033fc <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	4618      	mov	r0, r3
 8003438:	f7fe f897 	bl	800156a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003448:	b29b      	uxth	r3, r3
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	b29b      	uxth	r3, r3
 800344e:	4619      	mov	r1, r3
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f8d3 	bl	80035fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003456:	e0b5      	b.n	80035c4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003464:	b29b      	uxth	r3, r3
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80a7 	beq.w	80035c8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800347a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 80a2 	beq.w	80035c8 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348c:	e853 3f00 	ldrex	r3, [r3]
 8003490:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003494:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003498:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034a6:	647b      	str	r3, [r7, #68]	; 0x44
 80034a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034ae:	e841 2300 	strex	r3, r2, [r1]
 80034b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1e4      	bne.n	8003484 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3308      	adds	r3, #8
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	623b      	str	r3, [r7, #32]
   return(result);
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	3308      	adds	r3, #8
 80034da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034de:	633a      	str	r2, [r7, #48]	; 0x30
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e6:	e841 2300 	strex	r3, r2, [r1]
 80034ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1e3      	bne.n	80034ba <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2220      	movs	r2, #32
 80034f6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	e853 3f00 	ldrex	r3, [r3]
 8003510:	60fb      	str	r3, [r7, #12]
   return(result);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f023 0310 	bic.w	r3, r3, #16
 8003518:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003526:	61fb      	str	r3, [r7, #28]
 8003528:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352a:	69b9      	ldr	r1, [r7, #24]
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	e841 2300 	strex	r3, r2, [r1]
 8003532:	617b      	str	r3, [r7, #20]
   return(result);
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1e4      	bne.n	8003504 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800353a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800353e:	4619      	mov	r1, r3
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f85b 	bl	80035fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003546:	e03f      	b.n	80035c8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800354c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00e      	beq.n	8003572 <HAL_UART_IRQHandler+0x55a>
 8003554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003568:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fbda 	bl	8003d24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003570:	e02d      	b.n	80035ce <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00e      	beq.n	800359c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800357e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003586:	2b00      	cmp	r3, #0
 8003588:	d008      	beq.n	800359c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800358e:	2b00      	cmp	r3, #0
 8003590:	d01c      	beq.n	80035cc <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	4798      	blx	r3
    }
    return;
 800359a:	e017      	b.n	80035cc <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800359c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d012      	beq.n	80035ce <HAL_UART_IRQHandler+0x5b6>
 80035a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00c      	beq.n	80035ce <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fb8b 	bl	8003cd0 <UART_EndTransmit_IT>
    return;
 80035ba:	e008      	b.n	80035ce <HAL_UART_IRQHandler+0x5b6>
      return;
 80035bc:	bf00      	nop
 80035be:	e006      	b.n	80035ce <HAL_UART_IRQHandler+0x5b6>
    return;
 80035c0:	bf00      	nop
 80035c2:	e004      	b.n	80035ce <HAL_UART_IRQHandler+0x5b6>
      return;
 80035c4:	bf00      	nop
 80035c6:	e002      	b.n	80035ce <HAL_UART_IRQHandler+0x5b6>
      return;
 80035c8:	bf00      	nop
 80035ca:	e000      	b.n	80035ce <HAL_UART_IRQHandler+0x5b6>
    return;
 80035cc:	bf00      	nop
  }

}
 80035ce:	37e8      	adds	r7, #232	; 0xe8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	4b8a      	ldr	r3, [pc, #552]	; (8003868 <UART_SetConfig+0x254>)
 8003640:	4013      	ands	r3, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6812      	ldr	r2, [r2, #0]
 8003646:	6979      	ldr	r1, [r7, #20]
 8003648:	430b      	orrs	r3, r1
 800364a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	430a      	orrs	r2, r1
 8003684:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a78      	ldr	r2, [pc, #480]	; (800386c <UART_SetConfig+0x258>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d120      	bne.n	80036d2 <UART_SetConfig+0xbe>
 8003690:	4b77      	ldr	r3, [pc, #476]	; (8003870 <UART_SetConfig+0x25c>)
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	2b03      	cmp	r3, #3
 800369a:	d817      	bhi.n	80036cc <UART_SetConfig+0xb8>
 800369c:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <UART_SetConfig+0x90>)
 800369e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a2:	bf00      	nop
 80036a4:	080036b5 	.word	0x080036b5
 80036a8:	080036c1 	.word	0x080036c1
 80036ac:	080036c7 	.word	0x080036c7
 80036b0:	080036bb 	.word	0x080036bb
 80036b4:	2300      	movs	r3, #0
 80036b6:	77fb      	strb	r3, [r7, #31]
 80036b8:	e01d      	b.n	80036f6 <UART_SetConfig+0xe2>
 80036ba:	2302      	movs	r3, #2
 80036bc:	77fb      	strb	r3, [r7, #31]
 80036be:	e01a      	b.n	80036f6 <UART_SetConfig+0xe2>
 80036c0:	2304      	movs	r3, #4
 80036c2:	77fb      	strb	r3, [r7, #31]
 80036c4:	e017      	b.n	80036f6 <UART_SetConfig+0xe2>
 80036c6:	2308      	movs	r3, #8
 80036c8:	77fb      	strb	r3, [r7, #31]
 80036ca:	e014      	b.n	80036f6 <UART_SetConfig+0xe2>
 80036cc:	2310      	movs	r3, #16
 80036ce:	77fb      	strb	r3, [r7, #31]
 80036d0:	e011      	b.n	80036f6 <UART_SetConfig+0xe2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a67      	ldr	r2, [pc, #412]	; (8003874 <UART_SetConfig+0x260>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d102      	bne.n	80036e2 <UART_SetConfig+0xce>
 80036dc:	2300      	movs	r3, #0
 80036de:	77fb      	strb	r3, [r7, #31]
 80036e0:	e009      	b.n	80036f6 <UART_SetConfig+0xe2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a64      	ldr	r2, [pc, #400]	; (8003878 <UART_SetConfig+0x264>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d102      	bne.n	80036f2 <UART_SetConfig+0xde>
 80036ec:	2300      	movs	r3, #0
 80036ee:	77fb      	strb	r3, [r7, #31]
 80036f0:	e001      	b.n	80036f6 <UART_SetConfig+0xe2>
 80036f2:	2310      	movs	r3, #16
 80036f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036fe:	d15b      	bne.n	80037b8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003700:	7ffb      	ldrb	r3, [r7, #31]
 8003702:	2b08      	cmp	r3, #8
 8003704:	d827      	bhi.n	8003756 <UART_SetConfig+0x142>
 8003706:	a201      	add	r2, pc, #4	; (adr r2, 800370c <UART_SetConfig+0xf8>)
 8003708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370c:	08003731 	.word	0x08003731
 8003710:	08003739 	.word	0x08003739
 8003714:	08003741 	.word	0x08003741
 8003718:	08003757 	.word	0x08003757
 800371c:	08003747 	.word	0x08003747
 8003720:	08003757 	.word	0x08003757
 8003724:	08003757 	.word	0x08003757
 8003728:	08003757 	.word	0x08003757
 800372c:	0800374f 	.word	0x0800374f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003730:	f7ff fb4c 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 8003734:	61b8      	str	r0, [r7, #24]
        break;
 8003736:	e013      	b.n	8003760 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003738:	f7ff fb6a 	bl	8002e10 <HAL_RCC_GetPCLK2Freq>
 800373c:	61b8      	str	r0, [r7, #24]
        break;
 800373e:	e00f      	b.n	8003760 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003740:	4b4e      	ldr	r3, [pc, #312]	; (800387c <UART_SetConfig+0x268>)
 8003742:	61bb      	str	r3, [r7, #24]
        break;
 8003744:	e00c      	b.n	8003760 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003746:	f7ff facb 	bl	8002ce0 <HAL_RCC_GetSysClockFreq>
 800374a:	61b8      	str	r0, [r7, #24]
        break;
 800374c:	e008      	b.n	8003760 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800374e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003752:	61bb      	str	r3, [r7, #24]
        break;
 8003754:	e004      	b.n	8003760 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003756:	2300      	movs	r3, #0
 8003758:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	77bb      	strb	r3, [r7, #30]
        break;
 800375e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d074      	beq.n	8003850 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	005a      	lsls	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	441a      	add	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	fbb2 f3f3 	udiv	r3, r2, r3
 800377a:	b29b      	uxth	r3, r3
 800377c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b0f      	cmp	r3, #15
 8003782:	d916      	bls.n	80037b2 <UART_SetConfig+0x19e>
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378a:	d212      	bcs.n	80037b2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	b29b      	uxth	r3, r3
 8003790:	f023 030f 	bic.w	r3, r3, #15
 8003794:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	085b      	lsrs	r3, r3, #1
 800379a:	b29b      	uxth	r3, r3
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	89fb      	ldrh	r3, [r7, #14]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	89fa      	ldrh	r2, [r7, #14]
 80037ae:	60da      	str	r2, [r3, #12]
 80037b0:	e04e      	b.n	8003850 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	77bb      	strb	r3, [r7, #30]
 80037b6:	e04b      	b.n	8003850 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037b8:	7ffb      	ldrb	r3, [r7, #31]
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d827      	bhi.n	800380e <UART_SetConfig+0x1fa>
 80037be:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <UART_SetConfig+0x1b0>)
 80037c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c4:	080037e9 	.word	0x080037e9
 80037c8:	080037f1 	.word	0x080037f1
 80037cc:	080037f9 	.word	0x080037f9
 80037d0:	0800380f 	.word	0x0800380f
 80037d4:	080037ff 	.word	0x080037ff
 80037d8:	0800380f 	.word	0x0800380f
 80037dc:	0800380f 	.word	0x0800380f
 80037e0:	0800380f 	.word	0x0800380f
 80037e4:	08003807 	.word	0x08003807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037e8:	f7ff faf0 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 80037ec:	61b8      	str	r0, [r7, #24]
        break;
 80037ee:	e013      	b.n	8003818 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037f0:	f7ff fb0e 	bl	8002e10 <HAL_RCC_GetPCLK2Freq>
 80037f4:	61b8      	str	r0, [r7, #24]
        break;
 80037f6:	e00f      	b.n	8003818 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f8:	4b20      	ldr	r3, [pc, #128]	; (800387c <UART_SetConfig+0x268>)
 80037fa:	61bb      	str	r3, [r7, #24]
        break;
 80037fc:	e00c      	b.n	8003818 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037fe:	f7ff fa6f 	bl	8002ce0 <HAL_RCC_GetSysClockFreq>
 8003802:	61b8      	str	r0, [r7, #24]
        break;
 8003804:	e008      	b.n	8003818 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800380a:	61bb      	str	r3, [r7, #24]
        break;
 800380c:	e004      	b.n	8003818 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	77bb      	strb	r3, [r7, #30]
        break;
 8003816:	bf00      	nop
    }

    if (pclk != 0U)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d018      	beq.n	8003850 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	085a      	lsrs	r2, r3, #1
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	441a      	add	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003830:	b29b      	uxth	r3, r3
 8003832:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	2b0f      	cmp	r3, #15
 8003838:	d908      	bls.n	800384c <UART_SetConfig+0x238>
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003840:	d204      	bcs.n	800384c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	60da      	str	r2, [r3, #12]
 800384a:	e001      	b.n	8003850 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800385c:	7fbb      	ldrb	r3, [r7, #30]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3720      	adds	r7, #32
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	efff69f3 	.word	0xefff69f3
 800386c:	40013800 	.word	0x40013800
 8003870:	40021000 	.word	0x40021000
 8003874:	40004400 	.word	0x40004400
 8003878:	40004800 	.word	0x40004800
 800387c:	007a1200 	.word	0x007a1200

08003880 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395c:	2b00      	cmp	r3, #0
 800395e:	d01a      	beq.n	8003996 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800397e:	d10a      	bne.n	8003996 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	605a      	str	r2, [r3, #4]
  }
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039d4:	f7fc ff3c 	bl	8000850 <HAL_GetTick>
 80039d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d10e      	bne.n	8003a06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f82d 	bl	8003a56 <UART_WaitOnFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e023      	b.n	8003a4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d10e      	bne.n	8003a32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f817 	bl	8003a56 <UART_WaitOnFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e00d      	b.n	8003a4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b09c      	sub	sp, #112	; 0x70
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	4613      	mov	r3, r2
 8003a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a66:	e0a5      	b.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a6e:	f000 80a1 	beq.w	8003bb4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a72:	f7fc feed 	bl	8000850 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d302      	bcc.n	8003a88 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d13e      	bne.n	8003b06 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a90:	e853 3f00 	ldrex	r3, [r3]
 8003a94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a9c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aa8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003aac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e6      	bne.n	8003a88 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3308      	adds	r3, #8
 8003ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003acc:	f023 0301 	bic.w	r3, r3, #1
 8003ad0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ada:	64ba      	str	r2, [r7, #72]	; 0x48
 8003adc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ade:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ae0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ae2:	e841 2300 	strex	r3, r2, [r1]
 8003ae6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1e5      	bne.n	8003aba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2220      	movs	r2, #32
 8003af2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e067      	b.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d04f      	beq.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b22:	d147      	bne.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	e853 3f00 	ldrex	r3, [r3]
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b54:	e841 2300 	strex	r3, r2, [r1]
 8003b58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1e6      	bne.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3308      	adds	r3, #8
 8003b66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	e853 3f00 	ldrex	r3, [r3]
 8003b6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f023 0301 	bic.w	r3, r3, #1
 8003b76:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b80:	623a      	str	r2, [r7, #32]
 8003b82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b84:	69f9      	ldr	r1, [r7, #28]
 8003b86:	6a3a      	ldr	r2, [r7, #32]
 8003b88:	e841 2300 	strex	r3, r2, [r1]
 8003b8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1e5      	bne.n	8003b60 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e010      	b.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	69da      	ldr	r2, [r3, #28]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	461a      	mov	r2, r3
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	f43f af4a 	beq.w	8003a68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3770      	adds	r7, #112	; 0x70
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b095      	sub	sp, #84	; 0x54
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bee:	e853 3f00 	ldrex	r3, [r3]
 8003bf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	461a      	mov	r2, r3
 8003c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c04:	643b      	str	r3, [r7, #64]	; 0x40
 8003c06:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c0c:	e841 2300 	strex	r3, r2, [r1]
 8003c10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1e6      	bne.n	8003be6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3308      	adds	r3, #8
 8003c1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	e853 3f00 	ldrex	r3, [r3]
 8003c26:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3308      	adds	r3, #8
 8003c36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e5      	bne.n	8003c18 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d118      	bne.n	8003c86 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f023 0310 	bic.w	r3, r3, #16
 8003c68:	647b      	str	r3, [r7, #68]	; 0x44
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c72:	61bb      	str	r3, [r7, #24]
 8003c74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	6979      	ldr	r1, [r7, #20]
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	e841 2300 	strex	r3, r2, [r1]
 8003c7e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1e6      	bne.n	8003c54 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003c98:	bf00      	nop
 8003c9a:	3754      	adds	r7, #84	; 0x54
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f7ff fc90 	bl	80035e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	6979      	ldr	r1, [r7, #20]
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	613b      	str	r3, [r7, #16]
   return(result);
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1e6      	bne.n	8003cd8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff fc5c 	bl	80035d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d1c:	bf00      	nop
 8003d1e:	3720      	adds	r7, #32
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <__libc_init_array>:
 8003d38:	b570      	push	{r4, r5, r6, lr}
 8003d3a:	4d0d      	ldr	r5, [pc, #52]	; (8003d70 <__libc_init_array+0x38>)
 8003d3c:	4c0d      	ldr	r4, [pc, #52]	; (8003d74 <__libc_init_array+0x3c>)
 8003d3e:	1b64      	subs	r4, r4, r5
 8003d40:	10a4      	asrs	r4, r4, #2
 8003d42:	2600      	movs	r6, #0
 8003d44:	42a6      	cmp	r6, r4
 8003d46:	d109      	bne.n	8003d5c <__libc_init_array+0x24>
 8003d48:	4d0b      	ldr	r5, [pc, #44]	; (8003d78 <__libc_init_array+0x40>)
 8003d4a:	4c0c      	ldr	r4, [pc, #48]	; (8003d7c <__libc_init_array+0x44>)
 8003d4c:	f000 f820 	bl	8003d90 <_init>
 8003d50:	1b64      	subs	r4, r4, r5
 8003d52:	10a4      	asrs	r4, r4, #2
 8003d54:	2600      	movs	r6, #0
 8003d56:	42a6      	cmp	r6, r4
 8003d58:	d105      	bne.n	8003d66 <__libc_init_array+0x2e>
 8003d5a:	bd70      	pop	{r4, r5, r6, pc}
 8003d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d60:	4798      	blx	r3
 8003d62:	3601      	adds	r6, #1
 8003d64:	e7ee      	b.n	8003d44 <__libc_init_array+0xc>
 8003d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d6a:	4798      	blx	r3
 8003d6c:	3601      	adds	r6, #1
 8003d6e:	e7f2      	b.n	8003d56 <__libc_init_array+0x1e>
 8003d70:	08003de0 	.word	0x08003de0
 8003d74:	08003de0 	.word	0x08003de0
 8003d78:	08003de0 	.word	0x08003de0
 8003d7c:	08003de4 	.word	0x08003de4

08003d80 <memset>:
 8003d80:	4402      	add	r2, r0
 8003d82:	4603      	mov	r3, r0
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d100      	bne.n	8003d8a <memset+0xa>
 8003d88:	4770      	bx	lr
 8003d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d8e:	e7f9      	b.n	8003d84 <memset+0x4>

08003d90 <_init>:
 8003d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d92:	bf00      	nop
 8003d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d96:	bc08      	pop	{r3}
 8003d98:	469e      	mov	lr, r3
 8003d9a:	4770      	bx	lr

08003d9c <_fini>:
 8003d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9e:	bf00      	nop
 8003da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da2:	bc08      	pop	{r3}
 8003da4:	469e      	mov	lr, r3
 8003da6:	4770      	bx	lr
