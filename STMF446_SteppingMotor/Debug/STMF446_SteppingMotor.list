
STMF446_SteppingMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ab4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08006c84  08006c84  00016c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071c0  080071c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080071c0  080071c0  000171c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071c8  080071c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071c8  080071c8  000171c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071cc  080071cc  000171cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080071d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  20000070  08007240  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000086c  08007240  0002086c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106ce  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000242e  00000000  00000000  0003076e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  00032ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  00033a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003fac  00000000  00000000  00034828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011490  00000000  00000000  000387d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5c00  00000000  00000000  00049c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f864  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045fc  00000000  00000000  0011f8b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006c6c 	.word	0x08006c6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08006c6c 	.word	0x08006c6c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <tmc2209_readWriteArray>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60b9      	str	r1, [r7, #8]
 80005bc:	607a      	str	r2, [r7, #4]
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	4603      	mov	r3, r0
 80005c2:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 80005c4:	480e      	ldr	r0, [pc, #56]	; (8000600 <tmc2209_readWriteArray+0x4c>)
 80005c6:	f004 f9df 	bl	8004988 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, data, writeLength,3000);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005d2:	68b9      	ldr	r1, [r7, #8]
 80005d4:	480a      	ldr	r0, [pc, #40]	; (8000600 <tmc2209_readWriteArray+0x4c>)
 80005d6:	f003 fd7f 	bl	80040d8 <HAL_UART_Transmit>

	if(readLength > 0){
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00a      	beq.n	80005f6 <tmc2209_readWriteArray+0x42>
		HAL_HalfDuplex_EnableReceiver(&huart1);
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <tmc2209_readWriteArray+0x4c>)
 80005e2:	f004 fa05 	bl	80049f0 <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart1, data, readLength, 3000);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005ee:	68b9      	ldr	r1, [r7, #8]
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <tmc2209_readWriteArray+0x4c>)
 80005f2:	f003 fe03 	bl	80041fc <HAL_UART_Receive>
	}
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000d4 	.word	0x200000d4

08000604 <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 800060e:	2201      	movs	r2, #1
 8000610:	6839      	ldr	r1, [r7, #0]
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f004 ff92 	bl	800553c <tmc_CRC8>
 8000618:	4603      	mov	r3, r0
}
 800061a:	4618      	mov	r0, r3
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <reset>:

static uint8_t reset()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	//StepDir_init(STEPDIR_PRECISION);
	//StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);

	return tmc2209_reset(&TMC2209);
 8000628:	4802      	ldr	r0, [pc, #8]	; (8000634 <reset+0x10>)
 800062a:	f005 f9bf 	bl	80059ac <tmc2209_reset>
 800062e:	4603      	mov	r3, r0
}
 8000630:	4618      	mov	r0, r3
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000015c 	.word	0x2000015c

08000638 <restore>:

static uint8_t restore()
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 800063c:	4802      	ldr	r0, [pc, #8]	; (8000648 <restore+0x10>)
 800063e:	f005 f9ef 	bl	8005a20 <tmc2209_restore>
 8000642:	4603      	mov	r3, r0
}
 8000644:	4618      	mov	r0, r3
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2000015c 	.word	0x2000015c

0800064c <TMC2209_INIT>:


void TMC2209_INIT()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 8000652:	2201      	movs	r2, #1
 8000654:	2101      	movs	r1, #1
 8000656:	2007      	movs	r0, #7
 8000658:	f004 feb8 	bl	80053cc <tmc_fillCRC8Table>

	TMC2209_config.reset = reset;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <TMC2209_INIT+0x38>)
 800065e:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <TMC2209_INIT+0x3c>)
 8000660:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config.restore = restore;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <TMC2209_INIT+0x38>)
 8000666:	4a09      	ldr	r2, [pc, #36]	; (800068c <TMC2209_INIT+0x40>)
 8000668:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <TMC2209_INIT+0x44>)
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <TMC2209_INIT+0x38>)
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	4807      	ldr	r0, [pc, #28]	; (8000694 <TMC2209_INIT+0x48>)
 8000678:	f005 f8b4 	bl	80057e4 <tmc2209_init>


	//restore();
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200003e4 	.word	0x200003e4
 8000688:	08000625 	.word	0x08000625
 800068c:	08000639 	.word	0x08000639
 8000690:	08006e90 	.word	0x08006e90
 8000694:	2000015c 	.word	0x2000015c

08000698 <HAL_GPIO_EXTI_Callback>:
	return &TMC2209;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
	//stepper 0 end stop senssor
	if(GPIO_Pin == GPIO_PIN_6 ){
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	2b40      	cmp	r3, #64	; 0x40
 80006a6:	d11b      	bne.n	80006e0 <HAL_GPIO_EXTI_Callback+0x48>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 80006a8:	2140      	movs	r1, #64	; 0x40
 80006aa:	481b      	ldr	r0, [pc, #108]	; (8000718 <HAL_GPIO_EXTI_Callback+0x80>)
 80006ac:	f001 fe8e 	bl	80023cc <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d106      	bne.n	80006c4 <HAL_GPIO_EXTI_Callback+0x2c>
			end_stop_state |= 1;
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <HAL_GPIO_EXTI_Callback+0x84>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <HAL_GPIO_EXTI_Callback+0x84>)
 80006c2:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 80006c4:	2140      	movs	r1, #64	; 0x40
 80006c6:	4814      	ldr	r0, [pc, #80]	; (8000718 <HAL_GPIO_EXTI_Callback+0x80>)
 80006c8:	f001 fe80 	bl	80023cc <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d006      	beq.n	80006e0 <HAL_GPIO_EXTI_Callback+0x48>
			end_stop_state &= ~1;
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <HAL_GPIO_EXTI_Callback+0x84>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	f023 0301 	bic.w	r3, r3, #1
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_GPIO_EXTI_Callback+0x84>)
 80006de:	701a      	strb	r2, [r3, #0]
		}
	}
	if(GPIO_Pin == GPIO_PIN_7 ){
 80006e0:	88fb      	ldrh	r3, [r7, #6]
 80006e2:	2b80      	cmp	r3, #128	; 0x80
 80006e4:	d114      	bne.n	8000710 <HAL_GPIO_EXTI_Callback+0x78>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)){
 80006e6:	2180      	movs	r1, #128	; 0x80
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <HAL_GPIO_EXTI_Callback+0x80>)
 80006ea:	f001 fe6f 	bl	80023cc <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d103      	bne.n	80006fc <HAL_GPIO_EXTI_Callback+0x64>
			current_stall|= 0;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <HAL_GPIO_EXTI_Callback+0x88>)
 80006f6:	781a      	ldrb	r2, [r3, #0]
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_GPIO_EXTI_Callback+0x88>)
 80006fa:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)){
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	4806      	ldr	r0, [pc, #24]	; (8000718 <HAL_GPIO_EXTI_Callback+0x80>)
 8000700:	f001 fe64 	bl	80023cc <HAL_GPIO_ReadPin>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d002      	beq.n	8000710 <HAL_GPIO_EXTI_Callback+0x78>
			current_stall = 1;
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <HAL_GPIO_EXTI_Callback+0x88>)
 800070c:	2201      	movs	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40020400 	.word	0x40020400
 800071c:	20000648 	.word	0x20000648
 8000720:	2000064a 	.word	0x2000064a

08000724 <Step0>:
void Step0(){                                       //step pin
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	//pull+

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <Step0+0x20>)
 8000730:	f001 fe64 	bl	80023fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073a:	4802      	ldr	r0, [pc, #8]	; (8000744 <Step0+0x20>)
 800073c:	f001 fe5e 	bl	80023fc <HAL_GPIO_WritePin>
	/*
	 * pull-
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
	 */
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40020400 	.word	0x40020400

08000748 <Dir0>:

void Dir0(int dir){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, dir); //Dir0関数にdirピンを指定して格納
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	461a      	mov	r2, r3
 8000756:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075a:	4803      	ldr	r0, [pc, #12]	; (8000768 <Dir0+0x20>)
 800075c:	f001 fe4e 	bl	80023fc <HAL_GPIO_WritePin>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40020400 	.word	0x40020400

0800076c <resetStepper>:
	si->stepPosition = 0;
	si->movementDone = 0;
}


void resetStepper(volatile stepperInfo* si){    //resetStepper関数に引数をstepperInfo構造隊にポイント型変数siとして与える
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	si->c0 = si->acceleration;      //変数*siがメンバc0にアクセス.した値に変数*siがメンバaccelerationにアクセス.した値を代入する
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	edd3 7a00 	vldr	s15, [r3]
 800077a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800077e:	ee17 2a90 	vmov	r2, s15
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	615a      	str	r2, [r3, #20]
	si->d = si->c0;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	ee07 3a90 	vmov	s15, r3
 800078e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	si->di = si->d;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800079e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007a2:	ee17 2a90 	vmov	r2, s15
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	649a      	str	r2, [r3, #72]	; 0x48
	si->stepCount = 0;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	64da      	str	r2, [r3, #76]	; 0x4c
	si->n = 0;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2200      	movs	r2, #0
 80007b4:	641a      	str	r2, [r3, #64]	; 0x40
	si->rampUpStepCount = 0;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2200      	movs	r2, #0
 80007ba:	63da      	str	r2, [r3, #60]	; 0x3c
	si->movementDone = 0;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <prepareMovement>:

volatile uint8_t remainingSteppersFlag = 0; //remainingSteppersFlagをuint8_t型で定義し、初期化

void prepareMovement(int steps){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	if(steps == 0){
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d039      	beq.n	8000852 <prepareMovement+0x82>
		return;
	}
	volatile stepperInfo* si = &steppers[0];
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <prepareMovement+0x8c>)
 80007e0:	60fb      	str	r3, [r7, #12]
	if(si->dir_inv){
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	6a1b      	ldr	r3, [r3, #32]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d011      	beq.n	800080e <prepareMovement+0x3e>
		si->dirFunc( steps < 0 ? 0 : 1);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	43d2      	mvns	r2, r2
 80007f2:	0fd2      	lsrs	r2, r2, #31
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	4610      	mov	r0, r2
 80007f8:	4798      	blx	r3
		si->dir = steps > 0 ? -1:1;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	dd02      	ble.n	8000806 <prepareMovement+0x36>
 8000800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000804:	e000      	b.n	8000808 <prepareMovement+0x38>
 8000806:	2201      	movs	r2, #1
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	61da      	str	r2, [r3, #28]
 800080c:	e00e      	b.n	800082c <prepareMovement+0x5c>
	}else{
		si->dirFunc( steps < 0 ? 1 : 0);
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	0fd2      	lsrs	r2, r2, #31
 8000816:	4610      	mov	r0, r2
 8000818:	4798      	blx	r3
		si->dir = steps > 0 ? 1:-1;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2b00      	cmp	r3, #0
 800081e:	dd01      	ble.n	8000824 <prepareMovement+0x54>
 8000820:	2201      	movs	r2, #1
 8000822:	e001      	b.n	8000828 <prepareMovement+0x58>
 8000824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	61da      	str	r2, [r3, #28]
	}
		si->totalSteps = abs(steps);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	bfb8      	it	lt
 8000832:	425b      	neglt	r3, r3
 8000834:	461a      	mov	r2, r3
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	635a      	str	r2, [r3, #52]	; 0x34
		resetStepper(si);
 800083a:	68f8      	ldr	r0, [r7, #12]
 800083c:	f7ff ff96 	bl	800076c <resetStepper>
		remainingSteppersFlag |= (1 << 0);
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <prepareMovement+0x90>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	b2da      	uxtb	r2, r3
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <prepareMovement+0x90>)
 800084e:	701a      	strb	r2, [r3, #0]
 8000850:	e000      	b.n	8000854 <prepareMovement+0x84>
		return;
 8000852:	bf00      	nop

}
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200005f8 	.word	0x200005f8
 8000860:	2000064c 	.word	0x2000064c

08000864 <prepareAbsoluteMovement>:

void prepareAbsoluteMovement(int absolute_steps){   //prepareAbsoluteMovementで与えられたステップ数だけモータを回す(main文から）
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	printf("absolute_steps:%d\r\n",absolute_steps);
 800086c:	6879      	ldr	r1, [r7, #4]
 800086e:	4820      	ldr	r0, [pc, #128]	; (80008f0 <prepareAbsoluteMovement+0x8c>)
 8000870:	f005 f922 	bl	8005ab8 <iprintf>
	volatile stepperInfo* si = &steppers[0];	//steppers[0]のアドレスをstepperInfo* si に代入
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <prepareAbsoluteMovement+0x90>)
 8000876:	60fb      	str	r3, [r7, #12]
	int steps = absolute_steps - si->stepPosition;	//目標値からstepPositionを引いた値（stepposition=毎ステップカウントされるdirの値)
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	60bb      	str	r3, [r7, #8]
	printf("steps:%d\r\n",steps);
 8000882:	68b9      	ldr	r1, [r7, #8]
 8000884:	481c      	ldr	r0, [pc, #112]	; (80008f8 <prepareAbsoluteMovement+0x94>)
 8000886:	f005 f917 	bl	8005ab8 <iprintf>
	if(steps == 0){
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d02b      	beq.n	80008e8 <prepareAbsoluteMovement+0x84>
					return;
				}
	si->dirFunc( steps < 0 ? 1 : 0);
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	68ba      	ldr	r2, [r7, #8]
 8000896:	0fd2      	lsrs	r2, r2, #31
 8000898:	4610      	mov	r0, r2
 800089a:	4798      	blx	r3
	si->dir = steps > 0 ? 1:-1;
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	dd01      	ble.n	80008a6 <prepareAbsoluteMovement+0x42>
 80008a2:	2201      	movs	r2, #1
 80008a4:	e001      	b.n	80008aa <prepareAbsoluteMovement+0x46>
 80008a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	61da      	str	r2, [r3, #28]
	//printf("prepareAbsoluteMovement\r\n");
	si->totalSteps = abs(steps);	//stepsの値をアブソリュートでtotalstepsに格納
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	bfb8      	it	lt
 80008b4:	425b      	neglt	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	635a      	str	r2, [r3, #52]	; 0x34
	printf("steps:%d\r\n",si->totalSteps);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008c0:	4619      	mov	r1, r3
 80008c2:	480d      	ldr	r0, [pc, #52]	; (80008f8 <prepareAbsoluteMovement+0x94>)
 80008c4:	f005 f8f8 	bl	8005ab8 <iprintf>

	resetStepper(si);
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f7ff ff4f 	bl	800076c <resetStepper>
	printf("steps:%d\r\n",steps);
 80008ce:	68b9      	ldr	r1, [r7, #8]
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <prepareAbsoluteMovement+0x94>)
 80008d2:	f005 f8f1 	bl	8005ab8 <iprintf>
	remainingSteppersFlag |= (1 << 0);
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <prepareAbsoluteMovement+0x98>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <prepareAbsoluteMovement+0x98>)
 80008e4:	701a      	strb	r2, [r3, #0]
 80008e6:	e000      	b.n	80008ea <prepareAbsoluteMovement+0x86>
					return;
 80008e8:	bf00      	nop
}
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	08006c84 	.word	0x08006c84
 80008f4:	200005f8 	.word	0x200005f8
 80008f8:	08006c98 	.word	0x08006c98
 80008fc:	2000064c 	.word	0x2000064c

08000900 <setNextInterruptInterval>:
volatile uint8_t nextStepperFlag = 0;

void setNextInterruptInterval(){
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0

	unsigned int mind = 999999;
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <setNextInterruptInterval+0x7c>)
 8000908:	607b      	str	r3, [r7, #4]

		if( ((1 << 0)& remainingSteppersFlag) && steppers[0].di < mind ){
 800090a:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <setNextInterruptInterval+0x80>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d007      	beq.n	800092a <setNextInterruptInterval+0x2a>
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <setNextInterruptInterval+0x84>)
 800091c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	429a      	cmp	r2, r3
 8000922:	d902      	bls.n	800092a <setNextInterruptInterval+0x2a>
			mind = steppers[0].di;
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <setNextInterruptInterval+0x84>)
 8000926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000928:	607b      	str	r3, [r7, #4]
		}
		nextStepperFlag = 0;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <setNextInterruptInterval+0x88>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]

			if( (1 << 0) && steppers[0].di == mind ){
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <setNextInterruptInterval+0x84>)
 8000932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	429a      	cmp	r2, r3
 8000938:	d107      	bne.n	800094a <setNextInterruptInterval+0x4a>
				nextStepperFlag |= (1 << 0);
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <setNextInterruptInterval+0x88>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <setNextInterruptInterval+0x88>)
 8000948:	701a      	strb	r2, [r3, #0]
			}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);		//mindにコンペアを設定
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <setNextInterruptInterval+0x8c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	635a      	str	r2, [r3, #52]	; 0x34
			//printf("mind:%d \r\n",mind);

	if (remainingSteppersFlag == 0){
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <setNextInterruptInterval+0x80>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d104      	bne.n	8000966 <setNextInterruptInterval+0x66>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);    //65500→コンペアマッチさせない
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <setNextInterruptInterval+0x8c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8000964:	635a      	str	r2, [r3, #52]	; 0x34
	}

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <setNextInterruptInterval+0x8c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 800096e:	bf00      	nop

}
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	000f423f 	.word	0x000f423f
 8000980:	2000064c 	.word	0x2000064c
 8000984:	200005f8 	.word	0x200005f8
 8000988:	2000064d 	.word	0x2000064d
 800098c:	2000008c 	.word	0x2000008c

08000990 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){      //指定したコンペアを超えた時発火
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	//HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
	if(htim == &htim3){
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a6e      	ldr	r2, [pc, #440]	; (8000b54 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 800099c:	4293      	cmp	r3, r2
 800099e:	f040 80d5 	bne.w	8000b4c <HAL_TIM_OC_DelayElapsedCallback+0x1bc>
	unsigned int tmpCtr = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);	//指定されたタイマーチャンネルのコンペアを所得
 80009a2:	4b6c      	ldr	r3, [pc, #432]	; (8000b54 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009a8:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);			//コンペアを65500にセット
 80009aa:	4b6a      	ldr	r3, [pc, #424]	; (8000b54 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80009b2:	635a      	str	r2, [r3, #52]	; 0x34

	if( homing_flag & (1 << 0)){
 80009b4:	4b68      	ldr	r3, [pc, #416]	; (8000b58 <HAL_TIM_OC_DelayElapsedCallback+0x1c8>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d00d      	beq.n	80009dc <HAL_TIM_OC_DelayElapsedCallback+0x4c>
				if(end_stop_state & (1 << 0)){
 80009c0:	4b66      	ldr	r3, [pc, #408]	; (8000b5c <HAL_TIM_OC_DelayElapsedCallback+0x1cc>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d007      	beq.n	80009dc <HAL_TIM_OC_DelayElapsedCallback+0x4c>
					remainingSteppersFlag &= ~(1 << 0);
 80009cc:	4b64      	ldr	r3, [pc, #400]	; (8000b60 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	f023 0301 	bic.w	r3, r3, #1
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	4b61      	ldr	r3, [pc, #388]	; (8000b60 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 80009da:	701a      	strb	r2, [r3, #0]
				}
			}
	if ( ! (nextStepperFlag & (1 << 0)) ){				//nextStepperFlagが真でない(0なら)
 80009dc:	4b61      	ldr	r3, [pc, #388]	; (8000b64 <HAL_TIM_OC_DelayElapsedCallback+0x1d4>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d105      	bne.n	80009f6 <HAL_TIM_OC_DelayElapsedCallback+0x66>
			steppers[0].di -= tmpCtr;           //tmpCtrの値からsteppers[i].di引いた値を新しくsteppers[i].diに代入
 80009ea:	4b5f      	ldr	r3, [pc, #380]	; (8000b68 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80009ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	4a5d      	ldr	r2, [pc, #372]	; (8000b68 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80009f4:	6493      	str	r3, [r2, #72]	; 0x48
		}
		//printf("steppers:%ld \r\n",steppers[0].di);

		volatile stepperInfo* s = &steppers[0];
 80009f6:	4b5c      	ldr	r3, [pc, #368]	; (8000b68 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80009f8:	60bb      	str	r3, [r7, #8]

		if( (s->stepCount) < (s->totalSteps)&& !(current_stall)  ){		//1周ごとにカウントしたstepCountがabs(steps)より小さかったら==動作が終了するまで
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d224      	bcs.n	8000a50 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
 8000a06:	4b59      	ldr	r3, [pc, #356]	; (8000b6c <HAL_TIM_OC_DelayElapsedCallback+0x1dc>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d120      	bne.n	8000a50 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
			s->stepFunc();
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	4798      	blx	r3
			s->stepCount++;							//カウントし続ける
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a18:	1c5a      	adds	r2, r3, #1
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	64da      	str	r2, [r3, #76]	; 0x4c
			s->stepPosition += s->dir;		//dir(+もしくはー(dirの向き）を加算してstepPositionに格納
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	69da      	ldr	r2, [r3, #28]
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	441a      	add	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	619a      	str	r2, [r3, #24]
			if ( (s->stepCount) >= (s->totalSteps) ){	//stepCountがtotalStepsを超えたとき
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d30b      	bcc.n	8000a50 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
				s->movementDone = 1;	//movementDoneを1にする
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				remainingSteppersFlag &= ~(1 << 0);
 8000a40:	4b47      	ldr	r3, [pc, #284]	; (8000b60 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	f023 0301 	bic.w	r3, r3, #1
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	4b44      	ldr	r3, [pc, #272]	; (8000b60 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 8000a4e:	701a      	strb	r2, [r3, #0]
			}
		}

		if (s->rampUpStepCount == 0){
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d142      	bne.n	8000ade <HAL_TIM_OC_DelayElapsedCallback+0x14e>
			s->n++;									//sにnを代入して、nをプラス1する
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	1c5a      	adds	r2, r3, #1
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	641a      	str	r2, [r3, #64]	; 0x40
			s->d = s->d - (2*s->d) / (4*s->n +1);	//加減速遅延時間
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000a6e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	3301      	adds	r3, #1
 8000a7a:	ee07 3a90 	vmov	s15, r3
 8000a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000a82:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			if (s->d <= s->minStepInterval ){		//加減速遅延時間がminStepIntervalより短いなら（定数で指定）
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	ee07 3a90 	vmov	s15, r3
 8000a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aaa:	d80c      	bhi.n	8000ac6 <HAL_TIM_OC_DelayElapsedCallback+0x136>
				s->d = s->minStepInterval;			//minStepIntervalを加減速遅延時間にする
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	ee07 3a90 	vmov	s15, r3
 8000ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
				s->rampUpStepCount = s->stepCount;	//rampUpStepCountはstepCountとする
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	63da      	str	r2, [r3, #60]	; 0x3c
			}
			if (s->stepCount >= (s->totalSteps / 2) ){  //目標値から現在のステップを引いた値の1/2よりstepCountが大きくなったとき
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ace:	085b      	lsrs	r3, r3, #1
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d32c      	bcc.n	8000b2e <HAL_TIM_OC_DelayElapsedCallback+0x19e>
				s->rampUpStepCount = s->stepCount;		//rampUpStepCountはstepCountとする
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	63da      	str	r2, [r3, #60]	; 0x3c
 8000adc:	e027      	b.n	8000b2e <HAL_TIM_OC_DelayElapsedCallback+0x19e>
			}
		} else if ( s->stepCount >= s->totalSteps - s->rampUpStepCount) {	//目標値から現在のステップを引いた値からrampUpStepCountを引いた値がstepCountより小さいなら
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aea:	1acb      	subs	r3, r1, r3
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d31e      	bcc.n	8000b2e <HAL_TIM_OC_DelayElapsedCallback+0x19e>
			s->d = (s->d * (4 * s->n + 1)) / (4 * s->n + 1 -2);				//減速の時のステップ
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	3301      	adds	r3, #1
 8000afe:	ee07 3a90 	vmov	s15, r3
 8000b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b06:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	3b01      	subs	r3, #1
 8000b12:	ee07 3a90 	vmov	s15, r3
 8000b16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			s->n--;		//sにnを代入し、nから1を引く
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40
		}
		s->di = s->d;	//計算結果sをstepperInfoのメンバdに代入したものをメンバdiに代入
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b38:	ee17 2a90 	vmov	r2, s15
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	649a      	str	r2, [r3, #72]	; 0x48
		//printf("stepPosition:%ld \r\n",s->stepPosition);
		setNextInterruptInterval();
 8000b40:	f7ff fede 	bl	8000900 <setNextInterruptInterval>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2000008c 	.word	0x2000008c
 8000b58:	20000649 	.word	0x20000649
 8000b5c:	20000648 	.word	0x20000648
 8000b60:	2000064c 	.word	0x2000064c
 8000b64:	2000064d 	.word	0x2000064d
 8000b68:	200005f8 	.word	0x200005f8
 8000b6c:	2000064a 	.word	0x2000064a

08000b70 <stallguard_back>:
	if( ! HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)){	//割り込みピンが真でない(1でない=0なら)
		end_stop_state |= 1;					//end_stop_stateに左辺か右辺が1なら1を代入
	}
}

void stallguard_back(){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	prepareMovement(steppers[0].stall_off);	//stall_off
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <stallguard_back+0x18>)
 8000b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fe29 	bl	80007d0 <prepareMovement>
	current_stall=0;
 8000b7e:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <stallguard_back+0x1c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
	return;
 8000b84:	bf00      	nop
}
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200005f8 	.word	0x200005f8
 8000b8c:	2000064a 	.word	0x2000064a

08000b90 <runAndWait>:

void runAndWait(){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	setNextInterruptInterval();
 8000b94:	f7ff feb4 	bl	8000900 <setNextInterruptInterval>
	while(remainingSteppersFlag && !(current_stall));
 8000b98:	bf00      	nop
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <runAndWait+0x34>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <runAndWait+0x1c>
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <runAndWait+0x38>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d0f6      	beq.n	8000b9a <runAndWait+0xa>
	if(current_stall==1){
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <runAndWait+0x38>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d101      	bne.n	8000bb8 <runAndWait+0x28>
		stallguard_back();
 8000bb4:	f7ff ffdc 	bl	8000b70 <stallguard_back>
	}
	HAL_Delay(100);
 8000bb8:	2064      	movs	r0, #100	; 0x64
 8000bba:	f001 f8ab 	bl	8001d14 <HAL_Delay>

	//printf("posi%d\r\n",re->totalSteps);
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000064c 	.word	0x2000064c
 8000bc8:	2000064a 	.word	0x2000064a

08000bcc <AbsoluteReset>:
void AbsoluteReset(){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
	volatile stepperInfo* re = &steppers[0];
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <AbsoluteReset+0x44>)
 8000bd4:	607b      	str	r3, [r7, #4]

	re->n = 0;  //変数*siがメンバnにアクセス.した値に0を代入する
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	641a      	str	r2, [r3, #64]	; 0x40
	re->d = 0;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f04f 0200 	mov.w	r2, #0
 8000be2:	645a      	str	r2, [r3, #68]	; 0x44
	re->di = 0;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	649a      	str	r2, [r3, #72]	; 0x48
	re->stepCount = 0;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	64da      	str	r2, [r3, #76]	; 0x4c
	re->rampUpStepCount = 0;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	63da      	str	r2, [r3, #60]	; 0x3c
	re->totalSteps = 0;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	635a      	str	r2, [r3, #52]	; 0x34
	re->stepPosition = 0;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
	printf("RestOK\r\n");
 8000c02:	4804      	ldr	r0, [pc, #16]	; (8000c14 <AbsoluteReset+0x48>)
 8000c04:	f004 ffde 	bl	8005bc4 <puts>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200005f8 	.word	0x200005f8
 8000c14:	08006ca4 	.word	0x08006ca4

08000c18 <stepperHoming>:


void stepperHoming(){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	homing_flag |= (1 << 0);
 8000c1c:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <stepperHoming+0xc0>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <stepperHoming+0xc0>)
 8000c28:	701a      	strb	r2, [r3, #0]
	//seeking
	steppers[0].minStepInterval = steppers[0].seeking_vel;	//ホームピンに反応するまでモータ回す
 8000c2a:	4b2c      	ldr	r3, [pc, #176]	; (8000cdc <stepperHoming+0xc4>)
 8000c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <stepperHoming+0xc4>)
 8000c32:	605a      	str	r2, [r3, #4]
	prepareMovement( -100000000);
 8000c34:	482a      	ldr	r0, [pc, #168]	; (8000ce0 <stepperHoming+0xc8>)
 8000c36:	f7ff fdcb 	bl	80007d0 <prepareMovement>
	runAndWait();
 8000c3a:	f7ff ffa9 	bl	8000b90 <runAndWait>
	HAL_Delay(500);
 8000c3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c42:	f001 f867 	bl	8001d14 <HAL_Delay>
	//pull-off

	homing_flag &= ~(1 << 0);								//homing_flagが反応したらpull_offだけモータ回す
 8000c46:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <stepperHoming+0xc0>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	f023 0301 	bic.w	r3, r3, #1
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <stepperHoming+0xc0>)
 8000c52:	701a      	strb	r2, [r3, #0]
	prepareMovement(steppers[0].pull_off);
 8000c54:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <stepperHoming+0xc4>)
 8000c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fdb9 	bl	80007d0 <prepareMovement>
	runAndWait();
 8000c5e:	f7ff ff97 	bl	8000b90 <runAndWait>
	HAL_Delay(500);
 8000c62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c66:	f001 f855 	bl	8001d14 <HAL_Delay>
	//homing

	homing_flag |= (1 << 0);								//ホームピンに反応するまでモータ回す
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <stepperHoming+0xc0>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <stepperHoming+0xc0>)
 8000c76:	701a      	strb	r2, [r3, #0]
	steppers[0].minStepInterval = steppers[0].homing_vel;
 8000c78:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <stepperHoming+0xc4>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <stepperHoming+0xc4>)
 8000c80:	605a      	str	r2, [r3, #4]
	prepareMovement( -100000000);
 8000c82:	4817      	ldr	r0, [pc, #92]	; (8000ce0 <stepperHoming+0xc8>)
 8000c84:	f7ff fda4 	bl	80007d0 <prepareMovement>
	runAndWait();
 8000c88:	f7ff ff82 	bl	8000b90 <runAndWait>
	HAL_Delay(500);
 8000c8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c90:	f001 f840 	bl	8001d14 <HAL_Delay>
	//pull-off
	homing_flag &= ~(1 << 0);
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <stepperHoming+0xc0>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	f023 0301 	bic.w	r3, r3, #1
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <stepperHoming+0xc0>)
 8000ca0:	701a      	strb	r2, [r3, #0]
	prepareMovement(steppers[0].pull_off);
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <stepperHoming+0xc4>)
 8000ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fd92 	bl	80007d0 <prepareMovement>
	runAndWait();
 8000cac:	f7ff ff70 	bl	8000b90 <runAndWait>
	HAL_Delay(500);
 8000cb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cb4:	f001 f82e 	bl	8001d14 <HAL_Delay>

	steppers[0].stepPosition = 0;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <stepperHoming+0xc4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
	steppers[0].homing = 1;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <stepperHoming+0xc4>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	741a      	strb	r2, [r3, #16]
	steppers[0].minStepInterval = 500;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <stepperHoming+0xc4>)
 8000cc6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cca:	605a      	str	r2, [r3, #4]
	printf("homing:\r\n");
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <stepperHoming+0xcc>)
 8000cce:	f004 ff79 	bl	8005bc4 <puts>

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000649 	.word	0x20000649
 8000cdc:	200005f8 	.word	0x200005f8
 8000ce0:	fa0a1f00 	.word	0xfa0a1f00
 8000ce4:	08006cac 	.word	0x08006cac

08000ce8 <TMCsetup>:

void TMCsetup(){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b090      	sub	sp, #64	; 0x40
 8000cec:	af00      	add	r7, sp, #0
	int32_t mstep_value = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
		int32_t toff_value = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	63bb      	str	r3, [r7, #56]	; 0x38
		int32_t microstep_value = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	637b      	str	r3, [r7, #52]	; 0x34
		int32_t IRUN_value = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
		int32_t IHOLD_value = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
		int32_t IHOLDDELAY_value= 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
		int32_t stallgard_setup_value=0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
		int32_t TCOOLTHRS_value=0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
		int32_t SEMIN_value=0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
		int32_t SEMAX_value=0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
		int32_t TBL_value = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
		int32_t stealthChop_value = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
		int32_t autoscale_value = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
		int32_t PWMAuto_value = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
		int32_t PWMAuto_scale = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
		int32_t value = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]


		IRUN_value = 31;
 8000d2e:	231f      	movs	r3, #31
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
		TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, IRUN_value);	//実行電流
 8000d32:	2110      	movs	r1, #16
 8000d34:	48cb      	ldr	r0, [pc, #812]	; (8001064 <TMCsetup+0x37c>)
 8000d36:	f004 fcf2 	bl	800571e <tmc2209_readInt>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d42:	021b      	lsls	r3, r3, #8
 8000d44:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	2110      	movs	r1, #16
 8000d4e:	48c5      	ldr	r0, [pc, #788]	; (8001064 <TMCsetup+0x37c>)
 8000d50:	f004 fc95 	bl	800567e <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000d54:	f000 ffd2 	bl	8001cfc <HAL_GetTick>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	48c1      	ldr	r0, [pc, #772]	; (8001064 <TMCsetup+0x37c>)
 8000d5e:	f004 fe14 	bl	800598a <tmc2209_periodicJob>
		HAL_Delay(100);
 8000d62:	2064      	movs	r0, #100	; 0x64
 8000d64:	f000 ffd6 	bl	8001d14 <HAL_Delay>
		IRUN_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 8000d68:	2110      	movs	r1, #16
 8000d6a:	48be      	ldr	r0, [pc, #760]	; (8001064 <TMCsetup+0x37c>)
 8000d6c:	f004 fcd7 	bl	800571e <tmc2209_readInt>
 8000d70:	4603      	mov	r3, r0
 8000d72:	121b      	asrs	r3, r3, #8
 8000d74:	f003 031f 	and.w	r3, r3, #31
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
		printf("IRUN: %ld\r\n", IRUN_value);
 8000d7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000d7c:	48ba      	ldr	r0, [pc, #744]	; (8001068 <TMCsetup+0x380>)
 8000d7e:	f004 fe9b 	bl	8005ab8 <iprintf>

		IHOLD_value= 31;																						//モーター待機時の電流の設定
 8000d82:	231f      	movs	r3, #31
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
		TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, IHOLD_value);
 8000d86:	2110      	movs	r1, #16
 8000d88:	48b6      	ldr	r0, [pc, #728]	; (8001064 <TMCsetup+0x37c>)
 8000d8a:	f004 fcc8 	bl	800571e <tmc2209_readInt>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	f023 021f 	bic.w	r2, r3, #31
 8000d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d96:	f003 031f 	and.w	r3, r3, #31
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	2110      	movs	r1, #16
 8000da0:	48b0      	ldr	r0, [pc, #704]	; (8001064 <TMCsetup+0x37c>)
 8000da2:	f004 fc6c 	bl	800567e <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000da6:	f000 ffa9 	bl	8001cfc <HAL_GetTick>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4619      	mov	r1, r3
 8000dae:	48ad      	ldr	r0, [pc, #692]	; (8001064 <TMCsetup+0x37c>)
 8000db0:	f004 fdeb 	bl	800598a <tmc2209_periodicJob>
		HAL_Delay(100);
 8000db4:	2064      	movs	r0, #100	; 0x64
 8000db6:	f000 ffad 	bl	8001d14 <HAL_Delay>
		IHOLD_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);	//保持電流
 8000dba:	2110      	movs	r1, #16
 8000dbc:	48a9      	ldr	r0, [pc, #676]	; (8001064 <TMCsetup+0x37c>)
 8000dbe:	f004 fcae 	bl	800571e <tmc2209_readInt>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	f003 031f 	and.w	r3, r3, #31
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
		printf("IHOLD: %ld\r\n", IHOLD_value);
 8000dca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000dcc:	48a7      	ldr	r0, [pc, #668]	; (800106c <TMCsetup+0x384>)
 8000dce:	f004 fe73 	bl	8005ab8 <iprintf>

		value=0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
		value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK,TMC2209_PDN_DISABLE_SHIFT);
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	48a2      	ldr	r0, [pc, #648]	; (8001064 <TMCsetup+0x37c>)
 8000dda:	f004 fca0 	bl	800571e <tmc2209_readInt>
 8000dde:	4603      	mov	r3, r0
 8000de0:	119b      	asrs	r3, r3, #6
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	603b      	str	r3, [r7, #0]
		printf("pdn_disable : %ld\r\n", value);
 8000de8:	6839      	ldr	r1, [r7, #0]
 8000dea:	48a1      	ldr	r0, [pc, #644]	; (8001070 <TMCsetup+0x388>)
 8000dec:	f004 fe64 	bl	8005ab8 <iprintf>
		value = 1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	603b      	str	r3, [r7, #0]
		TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK, TMC2209_PDN_DISABLE_SHIFT, value);
 8000df4:	2100      	movs	r1, #0
 8000df6:	489b      	ldr	r0, [pc, #620]	; (8001064 <TMCsetup+0x37c>)
 8000df8:	f004 fc91 	bl	800571e <tmc2209_readInt>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	019b      	lsls	r3, r3, #6
 8000e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4894      	ldr	r0, [pc, #592]	; (8001064 <TMCsetup+0x37c>)
 8000e12:	f004 fc34 	bl	800567e <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000e16:	f000 ff71 	bl	8001cfc <HAL_GetTick>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4891      	ldr	r0, [pc, #580]	; (8001064 <TMCsetup+0x37c>)
 8000e20:	f004 fdb3 	bl	800598a <tmc2209_periodicJob>
		value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_PDN_DISABLE_MASK, TMC2209_PDN_DISABLE_SHIFT);
 8000e24:	2100      	movs	r1, #0
 8000e26:	488f      	ldr	r0, [pc, #572]	; (8001064 <TMCsetup+0x37c>)
 8000e28:	f004 fc79 	bl	800571e <tmc2209_readInt>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	119b      	asrs	r3, r3, #6
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	603b      	str	r3, [r7, #0]
		printf("pdn_disable : %ld\r\n", value);
 8000e36:	6839      	ldr	r1, [r7, #0]
 8000e38:	488d      	ldr	r0, [pc, #564]	; (8001070 <TMCsetup+0x388>)
 8000e3a:	f004 fe3d 	bl	8005ab8 <iprintf>

		value=0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
		value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK,TMC2209_EN_SPREADCYCLE_SHIFT);
 8000e42:	2100      	movs	r1, #0
 8000e44:	4887      	ldr	r0, [pc, #540]	; (8001064 <TMCsetup+0x37c>)
 8000e46:	f004 fc6a 	bl	800571e <tmc2209_readInt>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	109b      	asrs	r3, r3, #2
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	603b      	str	r3, [r7, #0]
		printf("SPREADCYCLE : %ld\r\n", value);
 8000e54:	6839      	ldr	r1, [r7, #0]
 8000e56:	4887      	ldr	r0, [pc, #540]	; (8001074 <TMCsetup+0x38c>)
 8000e58:	f004 fe2e 	bl	8005ab8 <iprintf>
		value = 1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	603b      	str	r3, [r7, #0]
		TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK, TMC2209_EN_SPREADCYCLE_SHIFT ,value);
 8000e60:	2100      	movs	r1, #0
 8000e62:	4880      	ldr	r0, [pc, #512]	; (8001064 <TMCsetup+0x37c>)
 8000e64:	f004 fc5b 	bl	800571e <tmc2209_readInt>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	f023 0204 	bic.w	r2, r3, #4
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	4313      	orrs	r3, r2
 8000e78:	461a      	mov	r2, r3
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4879      	ldr	r0, [pc, #484]	; (8001064 <TMCsetup+0x37c>)
 8000e7e:	f004 fbfe 	bl	800567e <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000e82:	f000 ff3b 	bl	8001cfc <HAL_GetTick>
 8000e86:	4603      	mov	r3, r0
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4876      	ldr	r0, [pc, #472]	; (8001064 <TMCsetup+0x37c>)
 8000e8c:	f004 fd7d 	bl	800598a <tmc2209_periodicJob>
		value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK,TMC2209_EN_SPREADCYCLE_SHIFT);
 8000e90:	2100      	movs	r1, #0
 8000e92:	4874      	ldr	r0, [pc, #464]	; (8001064 <TMCsetup+0x37c>)
 8000e94:	f004 fc43 	bl	800571e <tmc2209_readInt>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	109b      	asrs	r3, r3, #2
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	603b      	str	r3, [r7, #0]
		printf("SPREADCYCLE : %ld\r\n", value);
 8000ea2:	6839      	ldr	r1, [r7, #0]
 8000ea4:	4873      	ldr	r0, [pc, #460]	; (8001074 <TMCsetup+0x38c>)
 8000ea6:	f004 fe07 	bl	8005ab8 <iprintf>

		value=0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	603b      	str	r3, [r7, #0]
		value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK,TMC2209_INTERNAL_RSENSE_SHIFT);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	486c      	ldr	r0, [pc, #432]	; (8001064 <TMCsetup+0x37c>)
 8000eb2:	f004 fc34 	bl	800571e <tmc2209_readInt>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	105b      	asrs	r3, r3, #1
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	603b      	str	r3, [r7, #0]
		printf("RSENSE : %ld\r\n", value);
 8000ec0:	6839      	ldr	r1, [r7, #0]
 8000ec2:	486d      	ldr	r0, [pc, #436]	; (8001078 <TMCsetup+0x390>)
 8000ec4:	f004 fdf8 	bl	8005ab8 <iprintf>
		value = 1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	603b      	str	r3, [r7, #0]
		TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK, TMC2209_INTERNAL_RSENSE_SHIFT, value);
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4865      	ldr	r0, [pc, #404]	; (8001064 <TMCsetup+0x37c>)
 8000ed0:	f004 fc25 	bl	800571e <tmc2209_readInt>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	f023 0202 	bic.w	r2, r3, #2
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	485e      	ldr	r0, [pc, #376]	; (8001064 <TMCsetup+0x37c>)
 8000eea:	f004 fbc8 	bl	800567e <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000eee:	f000 ff05 	bl	8001cfc <HAL_GetTick>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	485b      	ldr	r0, [pc, #364]	; (8001064 <TMCsetup+0x37c>)
 8000ef8:	f004 fd47 	bl	800598a <tmc2209_periodicJob>
		value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK, TMC2209_INTERNAL_RSENSE_SHIFT);
 8000efc:	2100      	movs	r1, #0
 8000efe:	4859      	ldr	r0, [pc, #356]	; (8001064 <TMCsetup+0x37c>)
 8000f00:	f004 fc0d 	bl	800571e <tmc2209_readInt>
 8000f04:	4603      	mov	r3, r0
 8000f06:	105b      	asrs	r3, r3, #1
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	603b      	str	r3, [r7, #0]
		printf("RSENSE : %ld\r\n", value);
 8000f0e:	6839      	ldr	r1, [r7, #0]
 8000f10:	4859      	ldr	r0, [pc, #356]	; (8001078 <TMCsetup+0x390>)
 8000f12:	f004 fdd1 	bl	8005ab8 <iprintf>

		mstep_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK,TMC2209_MSTEP_REG_SELECT_SHIFT);	//uartでのmicrostepの有効化
 8000f16:	2100      	movs	r1, #0
 8000f18:	4852      	ldr	r0, [pc, #328]	; (8001064 <TMCsetup+0x37c>)
 8000f1a:	f004 fc00 	bl	800571e <tmc2209_readInt>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	11db      	asrs	r3, r3, #7
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	63fb      	str	r3, [r7, #60]	; 0x3c
		printf("mstep_before : %ld\r\n", mstep_value);
 8000f28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000f2a:	4854      	ldr	r0, [pc, #336]	; (800107c <TMCsetup+0x394>)
 8000f2c:	f004 fdc4 	bl	8005ab8 <iprintf>
		mstep_value = 1;
 8000f30:	2301      	movs	r3, #1
 8000f32:	63fb      	str	r3, [r7, #60]	; 0x3c
		TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT,mstep_value);
 8000f34:	2100      	movs	r1, #0
 8000f36:	484b      	ldr	r0, [pc, #300]	; (8001064 <TMCsetup+0x37c>)
 8000f38:	f004 fbf1 	bl	800571e <tmc2209_readInt>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f44:	01db      	lsls	r3, r3, #7
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4845      	ldr	r0, [pc, #276]	; (8001064 <TMCsetup+0x37c>)
 8000f50:	f004 fb95 	bl	800567e <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000f54:	f000 fed2 	bl	8001cfc <HAL_GetTick>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4841      	ldr	r0, [pc, #260]	; (8001064 <TMCsetup+0x37c>)
 8000f5e:	f004 fd14 	bl	800598a <tmc2209_periodicJob>
		mstep_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT);
 8000f62:	2100      	movs	r1, #0
 8000f64:	483f      	ldr	r0, [pc, #252]	; (8001064 <TMCsetup+0x37c>)
 8000f66:	f004 fbda 	bl	800571e <tmc2209_readInt>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	11db      	asrs	r3, r3, #7
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	63fb      	str	r3, [r7, #60]	; 0x3c
		printf("mstep_after : %ld\r\n", mstep_value);
 8000f74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000f76:	4842      	ldr	r0, [pc, #264]	; (8001080 <TMCsetup+0x398>)
 8000f78:	f004 fd9e 	bl	8005ab8 <iprintf>

		toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);	//保持トルクの設定
 8000f7c:	216c      	movs	r1, #108	; 0x6c
 8000f7e:	4839      	ldr	r0, [pc, #228]	; (8001064 <TMCsetup+0x37c>)
 8000f80:	f004 fbcd 	bl	800571e <tmc2209_readInt>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	63bb      	str	r3, [r7, #56]	; 0x38
		printf("toff_before : %ld\r\n", toff_value);
 8000f8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000f8e:	483d      	ldr	r0, [pc, #244]	; (8001084 <TMCsetup+0x39c>)
 8000f90:	f004 fd92 	bl	8005ab8 <iprintf>
		toff_value = 3;
 8000f94:	2303      	movs	r3, #3
 8000f96:	63bb      	str	r3, [r7, #56]	; 0x38
		TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT,toff_value);
 8000f98:	216c      	movs	r1, #108	; 0x6c
 8000f9a:	4832      	ldr	r0, [pc, #200]	; (8001064 <TMCsetup+0x37c>)
 8000f9c:	f004 fbbf 	bl	800571e <tmc2209_readInt>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	f023 020f 	bic.w	r2, r3, #15
 8000fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fa8:	f003 030f 	and.w	r3, r3, #15
 8000fac:	4313      	orrs	r3, r2
 8000fae:	461a      	mov	r2, r3
 8000fb0:	216c      	movs	r1, #108	; 0x6c
 8000fb2:	482c      	ldr	r0, [pc, #176]	; (8001064 <TMCsetup+0x37c>)
 8000fb4:	f004 fb63 	bl	800567e <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000fb8:	f000 fea0 	bl	8001cfc <HAL_GetTick>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4828      	ldr	r0, [pc, #160]	; (8001064 <TMCsetup+0x37c>)
 8000fc2:	f004 fce2 	bl	800598a <tmc2209_periodicJob>
		toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 8000fc6:	216c      	movs	r1, #108	; 0x6c
 8000fc8:	4826      	ldr	r0, [pc, #152]	; (8001064 <TMCsetup+0x37c>)
 8000fca:	f004 fba8 	bl	800571e <tmc2209_readInt>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f003 030f 	and.w	r3, r3, #15
 8000fd4:	63bb      	str	r3, [r7, #56]	; 0x38
		printf("toff_after : %ld\r\n", toff_value);
 8000fd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000fd8:	482b      	ldr	r0, [pc, #172]	; (8001088 <TMCsetup+0x3a0>)
 8000fda:	f004 fd6d 	bl	8005ab8 <iprintf>

		microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);	//microstepの設定
 8000fde:	216c      	movs	r1, #108	; 0x6c
 8000fe0:	4820      	ldr	r0, [pc, #128]	; (8001064 <TMCsetup+0x37c>)
 8000fe2:	f004 fb9c 	bl	800571e <tmc2209_readInt>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	161b      	asrs	r3, r3, #24
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ff2:	fa42 f303 	asr.w	r3, r2, r3
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34
		printf("microstep_before : %ld\r\n", microstep_value);
 8000ff8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ffa:	4824      	ldr	r0, [pc, #144]	; (800108c <TMCsetup+0x3a4>)
 8000ffc:	f004 fd5c 	bl	8005ab8 <iprintf>
		microstep_value = 4;
 8001000:	2304      	movs	r3, #4
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
		TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT,microstep_value);
 8001004:	216c      	movs	r1, #108	; 0x6c
 8001006:	4817      	ldr	r0, [pc, #92]	; (8001064 <TMCsetup+0x37c>)
 8001008:	f004 fb89 	bl	800571e <tmc2209_readInt>
 800100c:	4603      	mov	r3, r0
 800100e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001014:	061b      	lsls	r3, r3, #24
 8001016:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800101a:	4313      	orrs	r3, r2
 800101c:	461a      	mov	r2, r3
 800101e:	216c      	movs	r1, #108	; 0x6c
 8001020:	4810      	ldr	r0, [pc, #64]	; (8001064 <TMCsetup+0x37c>)
 8001022:	f004 fb2c 	bl	800567e <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8001026:	f000 fe69 	bl	8001cfc <HAL_GetTick>
 800102a:	4603      	mov	r3, r0
 800102c:	4619      	mov	r1, r3
 800102e:	480d      	ldr	r0, [pc, #52]	; (8001064 <TMCsetup+0x37c>)
 8001030:	f004 fcab 	bl	800598a <tmc2209_periodicJob>
		microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);
 8001034:	216c      	movs	r1, #108	; 0x6c
 8001036:	480b      	ldr	r0, [pc, #44]	; (8001064 <TMCsetup+0x37c>)
 8001038:	f004 fb71 	bl	800571e <tmc2209_readInt>
 800103c:	4603      	mov	r3, r0
 800103e:	161b      	asrs	r3, r3, #24
 8001040:	f003 030f 	and.w	r3, r3, #15
 8001044:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001048:	fa42 f303 	asr.w	r3, r2, r3
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
		printf("microstep_after : %ld\r\n", microstep_value);
 800104e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001050:	480f      	ldr	r0, [pc, #60]	; (8001090 <TMCsetup+0x3a8>)
 8001052:	f004 fd31 	bl	8005ab8 <iprintf>

		IHOLDDELAY_value=4;
 8001056:	2304      	movs	r3, #4
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
		TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT, IHOLDDELAY_value);
 800105a:	2110      	movs	r1, #16
 800105c:	4801      	ldr	r0, [pc, #4]	; (8001064 <TMCsetup+0x37c>)
 800105e:	f004 fb5e 	bl	800571e <tmc2209_readInt>
 8001062:	e017      	b.n	8001094 <TMCsetup+0x3ac>
 8001064:	2000015c 	.word	0x2000015c
 8001068:	08006cb8 	.word	0x08006cb8
 800106c:	08006cc4 	.word	0x08006cc4
 8001070:	08006cd4 	.word	0x08006cd4
 8001074:	08006ce8 	.word	0x08006ce8
 8001078:	08006cfc 	.word	0x08006cfc
 800107c:	08006d0c 	.word	0x08006d0c
 8001080:	08006d24 	.word	0x08006d24
 8001084:	08006d38 	.word	0x08006d38
 8001088:	08006d4c 	.word	0x08006d4c
 800108c:	08006d60 	.word	0x08006d60
 8001090:	08006d7c 	.word	0x08006d7c
 8001094:	4603      	mov	r3, r0
 8001096:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800109a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800109c:	041b      	lsls	r3, r3, #16
 800109e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80010a2:	4313      	orrs	r3, r2
 80010a4:	461a      	mov	r2, r3
 80010a6:	2110      	movs	r1, #16
 80010a8:	486c      	ldr	r0, [pc, #432]	; (800125c <TMCsetup+0x574>)
 80010aa:	f004 fae8 	bl	800567e <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80010ae:	f000 fe25 	bl	8001cfc <HAL_GetTick>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4619      	mov	r1, r3
 80010b6:	4869      	ldr	r0, [pc, #420]	; (800125c <TMCsetup+0x574>)
 80010b8:	f004 fc67 	bl	800598a <tmc2209_periodicJob>
		IHOLDDELAY_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IHOLDDELAY_MASK, TMC2209_IHOLDDELAY_SHIFT);
 80010bc:	2110      	movs	r1, #16
 80010be:	4867      	ldr	r0, [pc, #412]	; (800125c <TMCsetup+0x574>)
 80010c0:	f004 fb2d 	bl	800571e <tmc2209_readInt>
 80010c4:	4603      	mov	r3, r0
 80010c6:	141b      	asrs	r3, r3, #16
 80010c8:	f003 030f 	and.w	r3, r3, #15
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
		printf("IHOLDDELAY: %ld\r\n", IHOLDDELAY_value);
 80010ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010d0:	4863      	ldr	r0, [pc, #396]	; (8001260 <TMCsetup+0x578>)
 80010d2:	f004 fcf1 	bl	8005ab8 <iprintf>

		stallgard_setup_value=20;											//SG_RESULTと比較して、
 80010d6:	2314      	movs	r3, #20
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
		tmc2209_writeInt(&TMC2209, TMC2209_SGTHRS, stallgard_setup_value);
 80010da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010dc:	2140      	movs	r1, #64	; 0x40
 80010de:	485f      	ldr	r0, [pc, #380]	; (800125c <TMCsetup+0x574>)
 80010e0:	f004 facd 	bl	800567e <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80010e4:	f000 fe0a 	bl	8001cfc <HAL_GetTick>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4619      	mov	r1, r3
 80010ec:	485b      	ldr	r0, [pc, #364]	; (800125c <TMCsetup+0x574>)
 80010ee:	f004 fc4c 	bl	800598a <tmc2209_periodicJob>
		stallgard_setup_value = tmc2209_readInt(&TMC2209, TMC2209_SGTHRS);
 80010f2:	2140      	movs	r1, #64	; 0x40
 80010f4:	4859      	ldr	r0, [pc, #356]	; (800125c <TMCsetup+0x574>)
 80010f6:	f004 fb12 	bl	800571e <tmc2209_readInt>
 80010fa:	6278      	str	r0, [r7, #36]	; 0x24
		printf("SGTHRS: %ld\r\n", stallgard_setup_value);
 80010fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010fe:	4859      	ldr	r0, [pc, #356]	; (8001264 <TMCsetup+0x57c>)
 8001100:	f004 fcda 	bl	8005ab8 <iprintf>

		TCOOLTHRS_value=1000;
 8001104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001108:	623b      	str	r3, [r7, #32]

		tmc2209_writeInt(&TMC2209, TMC2209_TCOOLTHRS, TCOOLTHRS_value);
 800110a:	6a3a      	ldr	r2, [r7, #32]
 800110c:	2114      	movs	r1, #20
 800110e:	4853      	ldr	r0, [pc, #332]	; (800125c <TMCsetup+0x574>)
 8001110:	f004 fab5 	bl	800567e <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8001114:	f000 fdf2 	bl	8001cfc <HAL_GetTick>
 8001118:	4603      	mov	r3, r0
 800111a:	4619      	mov	r1, r3
 800111c:	484f      	ldr	r0, [pc, #316]	; (800125c <TMCsetup+0x574>)
 800111e:	f004 fc34 	bl	800598a <tmc2209_periodicJob>
		printf("TCOOLTHRS: %ld\r\n", TCOOLTHRS_value);
 8001122:	6a39      	ldr	r1, [r7, #32]
 8001124:	4850      	ldr	r0, [pc, #320]	; (8001268 <TMCsetup+0x580>)
 8001126:	f004 fcc7 	bl	8005ab8 <iprintf>

		SEMIN_value=5;
 800112a:	2305      	movs	r3, #5
 800112c:	61fb      	str	r3, [r7, #28]
		TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT, SEMIN_value);
 800112e:	2142      	movs	r1, #66	; 0x42
 8001130:	484a      	ldr	r0, [pc, #296]	; (800125c <TMCsetup+0x574>)
 8001132:	f004 faf4 	bl	800571e <tmc2209_readInt>
 8001136:	4603      	mov	r3, r0
 8001138:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	03db      	lsls	r3, r3, #15
 8001140:	b29b      	uxth	r3, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	461a      	mov	r2, r3
 8001146:	2142      	movs	r1, #66	; 0x42
 8001148:	4844      	ldr	r0, [pc, #272]	; (800125c <TMCsetup+0x574>)
 800114a:	f004 fa98 	bl	800567e <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800114e:	f000 fdd5 	bl	8001cfc <HAL_GetTick>
 8001152:	4603      	mov	r3, r0
 8001154:	4619      	mov	r1, r3
 8001156:	4841      	ldr	r0, [pc, #260]	; (800125c <TMCsetup+0x574>)
 8001158:	f004 fc17 	bl	800598a <tmc2209_periodicJob>
		printf("SEMIN: %ld\r\n", SEMIN_value);
 800115c:	69f9      	ldr	r1, [r7, #28]
 800115e:	4843      	ldr	r0, [pc, #268]	; (800126c <TMCsetup+0x584>)
 8001160:	f004 fcaa 	bl	8005ab8 <iprintf>

		SEMAX_value = 2;
 8001164:	2302      	movs	r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
		TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT, SEMIN_value);
 8001168:	2142      	movs	r1, #66	; 0x42
 800116a:	483c      	ldr	r0, [pc, #240]	; (800125c <TMCsetup+0x574>)
 800116c:	f004 fad7 	bl	800571e <tmc2209_readInt>
 8001170:	4603      	mov	r3, r0
 8001172:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	03db      	lsls	r3, r3, #15
 800117a:	b29b      	uxth	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	461a      	mov	r2, r3
 8001180:	2142      	movs	r1, #66	; 0x42
 8001182:	4836      	ldr	r0, [pc, #216]	; (800125c <TMCsetup+0x574>)
 8001184:	f004 fa7b 	bl	800567e <tmc2209_writeInt>
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8001188:	f000 fdb8 	bl	8001cfc <HAL_GetTick>
 800118c:	4603      	mov	r3, r0
 800118e:	4619      	mov	r1, r3
 8001190:	4832      	ldr	r0, [pc, #200]	; (800125c <TMCsetup+0x574>)
 8001192:	f004 fbfa 	bl	800598a <tmc2209_periodicJob>
		printf("SEMAX: %ld\r\n", SEMAX_value);
 8001196:	69b9      	ldr	r1, [r7, #24]
 8001198:	4835      	ldr	r0, [pc, #212]	; (8001270 <TMCsetup+0x588>)
 800119a:	f004 fc8d 	bl	8005ab8 <iprintf>

		TBL_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT);
 800119e:	216c      	movs	r1, #108	; 0x6c
 80011a0:	482e      	ldr	r0, [pc, #184]	; (800125c <TMCsetup+0x574>)
 80011a2:	f004 fabc 	bl	800571e <tmc2209_readInt>
 80011a6:	4603      	mov	r3, r0
 80011a8:	13db      	asrs	r3, r3, #15
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	617b      	str	r3, [r7, #20]
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80011b0:	f000 fda4 	bl	8001cfc <HAL_GetTick>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4619      	mov	r1, r3
 80011b8:	4828      	ldr	r0, [pc, #160]	; (800125c <TMCsetup+0x574>)
 80011ba:	f004 fbe6 	bl	800598a <tmc2209_periodicJob>
		printf("TBL: %ld\r\n", TBL_value);
 80011be:	6979      	ldr	r1, [r7, #20]
 80011c0:	482c      	ldr	r0, [pc, #176]	; (8001274 <TMCsetup+0x58c>)
 80011c2:	f004 fc79 	bl	8005ab8 <iprintf>

		stealthChop_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT);
 80011c6:	2170      	movs	r1, #112	; 0x70
 80011c8:	4824      	ldr	r0, [pc, #144]	; (800125c <TMCsetup+0x574>)
 80011ca:	f004 faa8 	bl	800571e <tmc2209_readInt>
 80011ce:	4603      	mov	r3, r0
 80011d0:	121b      	asrs	r3, r3, #8
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	613b      	str	r3, [r7, #16]
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80011d6:	f000 fd91 	bl	8001cfc <HAL_GetTick>
 80011da:	4603      	mov	r3, r0
 80011dc:	4619      	mov	r1, r3
 80011de:	481f      	ldr	r0, [pc, #124]	; (800125c <TMCsetup+0x574>)
 80011e0:	f004 fbd3 	bl	800598a <tmc2209_periodicJob>
		printf("stealthChop: %ld\r\n", stealthChop_value);
 80011e4:	6939      	ldr	r1, [r7, #16]
 80011e6:	4824      	ldr	r0, [pc, #144]	; (8001278 <TMCsetup+0x590>)
 80011e8:	f004 fc66 	bl	8005ab8 <iprintf>

		autoscale_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_PWMCONF, TMC2209_PWM_AUTOSCALE_MASK, TMC2209_PWM_AUTOSCALE_SHIFT);
 80011ec:	2170      	movs	r1, #112	; 0x70
 80011ee:	481b      	ldr	r0, [pc, #108]	; (800125c <TMCsetup+0x574>)
 80011f0:	f004 fa95 	bl	800571e <tmc2209_readInt>
 80011f4:	4603      	mov	r3, r0
 80011f6:	149b      	asrs	r3, r3, #18
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80011fe:	f000 fd7d 	bl	8001cfc <HAL_GetTick>
 8001202:	4603      	mov	r3, r0
 8001204:	4619      	mov	r1, r3
 8001206:	4815      	ldr	r0, [pc, #84]	; (800125c <TMCsetup+0x574>)
 8001208:	f004 fbbf 	bl	800598a <tmc2209_periodicJob>
		printf("autoscale: %ld\r\n", autoscale_value);
 800120c:	68f9      	ldr	r1, [r7, #12]
 800120e:	481b      	ldr	r0, [pc, #108]	; (800127c <TMCsetup+0x594>)
 8001210:	f004 fc52 	bl	8005ab8 <iprintf>

		PWMAuto_value = tmc2209_readInt(&TMC2209,TMC2209_PWM_AUTO);
 8001214:	2172      	movs	r1, #114	; 0x72
 8001216:	4811      	ldr	r0, [pc, #68]	; (800125c <TMCsetup+0x574>)
 8001218:	f004 fa81 	bl	800571e <tmc2209_readInt>
 800121c:	60b8      	str	r0, [r7, #8]
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800121e:	f000 fd6d 	bl	8001cfc <HAL_GetTick>
 8001222:	4603      	mov	r3, r0
 8001224:	4619      	mov	r1, r3
 8001226:	480d      	ldr	r0, [pc, #52]	; (800125c <TMCsetup+0x574>)
 8001228:	f004 fbaf 	bl	800598a <tmc2209_periodicJob>
		printf("PWMAuto: %ld\r\n", PWMAuto_value);
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	4814      	ldr	r0, [pc, #80]	; (8001280 <TMCsetup+0x598>)
 8001230:	f004 fc42 	bl	8005ab8 <iprintf>

		PWMAuto_scale = tmc2209_readInt(&TMC2209,TMC2209_PWMSCALE);
 8001234:	2171      	movs	r1, #113	; 0x71
 8001236:	4809      	ldr	r0, [pc, #36]	; (800125c <TMCsetup+0x574>)
 8001238:	f004 fa71 	bl	800571e <tmc2209_readInt>
 800123c:	6078      	str	r0, [r7, #4]
		tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800123e:	f000 fd5d 	bl	8001cfc <HAL_GetTick>
 8001242:	4603      	mov	r3, r0
 8001244:	4619      	mov	r1, r3
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <TMCsetup+0x574>)
 8001248:	f004 fb9f 	bl	800598a <tmc2209_periodicJob>
		printf("PWMSCALE: %ld\r\n", PWMAuto_scale);
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	480d      	ldr	r0, [pc, #52]	; (8001284 <TMCsetup+0x59c>)
 8001250:	f004 fc32 	bl	8005ab8 <iprintf>

}
 8001254:	bf00      	nop
 8001256:	3740      	adds	r7, #64	; 0x40
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000015c 	.word	0x2000015c
 8001260:	08006d94 	.word	0x08006d94
 8001264:	08006da8 	.word	0x08006da8
 8001268:	08006db8 	.word	0x08006db8
 800126c:	08006dcc 	.word	0x08006dcc
 8001270:	08006ddc 	.word	0x08006ddc
 8001274:	08006dec 	.word	0x08006dec
 8001278:	08006df8 	.word	0x08006df8
 800127c:	08006e0c 	.word	0x08006e0c
 8001280:	08006e20 	.word	0x08006e20
 8001284:	08006e30 	.word	0x08006e30

08001288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800128e:	4b56      	ldr	r3, [pc, #344]	; (80013e8 <main+0x160>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f004 fc9c 	bl	8005bd4 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129c:	f000 fcc8 	bl	8001c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a0:	f000 f8c0 	bl	8001424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a4:	f000 f9f2 	bl	800168c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012a8:	f000 f9c6 	bl	8001638 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80012ac:	f000 f926 	bl	80014fc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80012b0:	f000 f998 	bl	80015e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TMC2209_INIT();
 80012b4:	f7ff f9ca 	bl	800064c <TMC2209_INIT>
  //rxbufを受信したらフラグを
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80012b8:	2100      	movs	r1, #0
 80012ba:	484c      	ldr	r0, [pc, #304]	; (80013ec <main+0x164>)
 80012bc:	f001 ff60 	bl	8003180 <HAL_TIM_OC_Start_IT>
  printf("Hello\r\n");
 80012c0:	484b      	ldr	r0, [pc, #300]	; (80013f0 <main+0x168>)
 80012c2:	f004 fc7f 	bl	8005bc4 <puts>
  steppers[0].dirFunc = Dir0;
 80012c6:	4b4b      	ldr	r3, [pc, #300]	; (80013f4 <main+0x16c>)
 80012c8:	4a4b      	ldr	r2, [pc, #300]	; (80013f8 <main+0x170>)
 80012ca:	609a      	str	r2, [r3, #8]
  steppers[0].stepFunc = Step0;
 80012cc:	4b49      	ldr	r3, [pc, #292]	; (80013f4 <main+0x16c>)
 80012ce:	4a4b      	ldr	r2, [pc, #300]	; (80013fc <main+0x174>)
 80012d0:	60da      	str	r2, [r3, #12]
  steppers[0].acceleration = 1000;
 80012d2:	4b48      	ldr	r3, [pc, #288]	; (80013f4 <main+0x16c>)
 80012d4:	4a4a      	ldr	r2, [pc, #296]	; (8001400 <main+0x178>)
 80012d6:	601a      	str	r2, [r3, #0]
  steppers[0].minStepInterval = 100;
 80012d8:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <main+0x16c>)
 80012da:	2264      	movs	r2, #100	; 0x64
 80012dc:	605a      	str	r2, [r3, #4]
  steppers[0].homing = 0;
 80012de:	4b45      	ldr	r3, [pc, #276]	; (80013f4 <main+0x16c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	741a      	strb	r2, [r3, #16]
  steppers[0].dir_inv = 1;
 80012e4:	4b43      	ldr	r3, [pc, #268]	; (80013f4 <main+0x16c>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	621a      	str	r2, [r3, #32]
  steppers[0].seeking_vel = 100;
 80012ea:	4b42      	ldr	r3, [pc, #264]	; (80013f4 <main+0x16c>)
 80012ec:	2264      	movs	r2, #100	; 0x64
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
  steppers[0].homing_vel = 200;
 80012f0:	4b40      	ldr	r3, [pc, #256]	; (80013f4 <main+0x16c>)
 80012f2:	22c8      	movs	r2, #200	; 0xc8
 80012f4:	631a      	str	r2, [r3, #48]	; 0x30
  steppers[0].pull_off = 500;
 80012f6:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <main+0x16c>)
 80012f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
  steppers[0].stall_off=10000;
 80012fe:	4b3d      	ldr	r3, [pc, #244]	; (80013f4 <main+0x16c>)
 8001300:	f242 7210 	movw	r2, #10000	; 0x2710
 8001304:	629a      	str	r2, [r3, #40]	; 0x28
  get_uart_flag=0;
 8001306:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <main+0x17c>)
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]

char KeyCommand[1];
KeyCommand[0]=0;
 800130c:	2300      	movs	r3, #0
 800130e:	713b      	strb	r3, [r7, #4]
printf("RMD Start\r\n");
 8001310:	483d      	ldr	r0, [pc, #244]	; (8001408 <main+0x180>)
 8001312:	f004 fc57 	bl	8005bc4 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT(&huart2,(uint8_t *)KeyCommand,sizeof(KeyCommand));
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2201      	movs	r2, #1
 800131a:	4619      	mov	r1, r3
 800131c:	483b      	ldr	r0, [pc, #236]	; (800140c <main+0x184>)
 800131e:	f003 f854 	bl	80043ca <HAL_UART_Receive_IT>
	  HAL_UART_Transmit_IT(&huart2,(uint8_t *)KeyCommand,sizeof(KeyCommand));
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2201      	movs	r2, #1
 8001326:	4619      	mov	r1, r3
 8001328:	4838      	ldr	r0, [pc, #224]	; (800140c <main+0x184>)
 800132a:	f003 f809 	bl	8004340 <HAL_UART_Transmit_IT>

	  if(get_uart_flag==1){
 800132e:	4b35      	ldr	r3, [pc, #212]	; (8001404 <main+0x17c>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d1ef      	bne.n	8001316 <main+0x8e>
		  printf("rxbuf 2 %d\r\n",KeyCommand[0]);
 8001336:	793b      	ldrb	r3, [r7, #4]
 8001338:	4619      	mov	r1, r3
 800133a:	4835      	ldr	r0, [pc, #212]	; (8001410 <main+0x188>)
 800133c:	f004 fbbc 	bl	8005ab8 <iprintf>
		  if(KeyCommand[0]!=0)
 8001340:	793b      	ldrb	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0e7      	beq.n	8001316 <main+0x8e>
		  {
			  switch(KeyCommand[0])
 8001346:	793b      	ldrb	r3, [r7, #4]
 8001348:	3b30      	subs	r3, #48	; 0x30
 800134a:	2b04      	cmp	r3, #4
 800134c:	d841      	bhi.n	80013d2 <main+0x14a>
 800134e:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <main+0xcc>)
 8001350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001354:	08001369 	.word	0x08001369
 8001358:	08001373 	.word	0x08001373
 800135c:	08001397 	.word	0x08001397
 8001360:	080013b9 	.word	0x080013b9
 8001364:	080013cb 	.word	0x080013cb
			  {
				  case '0':
					  TMCsetup();
 8001368:	f7ff fcbe 	bl	8000ce8 <TMCsetup>
					  KeyCommand[0]=0;
 800136c:	2300      	movs	r3, #0
 800136e:	713b      	strb	r3, [r7, #4]
					  break;
 8001370:	e035      	b.n	80013de <main+0x156>
				  case '1':
					  //HAL_UART_Transmit_IT(&huart2,(uint8_t *)front, sizeof(front));
					  printf("1:start\r\n");
 8001372:	4828      	ldr	r0, [pc, #160]	; (8001414 <main+0x18c>)
 8001374:	f004 fc26 	bl	8005bc4 <puts>
					  prepareAbsoluteMovement(20000);
 8001378:	f644 6020 	movw	r0, #20000	; 0x4e20
 800137c:	f7ff fa72 	bl	8000864 <prepareAbsoluteMovement>
					  runAndWait();
 8001380:	f7ff fc06 	bl	8000b90 <runAndWait>
					  HAL_Delay(100);
 8001384:	2064      	movs	r0, #100	; 0x64
 8001386:	f000 fcc5 	bl	8001d14 <HAL_Delay>
					  printf("1:end\r\n");
 800138a:	4823      	ldr	r0, [pc, #140]	; (8001418 <main+0x190>)
 800138c:	f004 fc1a 	bl	8005bc4 <puts>
					  KeyCommand[0]=0;
 8001390:	2300      	movs	r3, #0
 8001392:	713b      	strb	r3, [r7, #4]
					  break;
 8001394:	e023      	b.n	80013de <main+0x156>

				  case '2':
					  printf("1:start\r\n");
 8001396:	481f      	ldr	r0, [pc, #124]	; (8001414 <main+0x18c>)
 8001398:	f004 fc14 	bl	8005bc4 <puts>
					  prepareAbsoluteMovement(-5000);
 800139c:	481f      	ldr	r0, [pc, #124]	; (800141c <main+0x194>)
 800139e:	f7ff fa61 	bl	8000864 <prepareAbsoluteMovement>
					  runAndWait();
 80013a2:	f7ff fbf5 	bl	8000b90 <runAndWait>
					  HAL_Delay(100);
 80013a6:	2064      	movs	r0, #100	; 0x64
 80013a8:	f000 fcb4 	bl	8001d14 <HAL_Delay>
					  printf("1:end\r\n");
 80013ac:	481a      	ldr	r0, [pc, #104]	; (8001418 <main+0x190>)
 80013ae:	f004 fc09 	bl	8005bc4 <puts>
					  KeyCommand[0]=0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	713b      	strb	r3, [r7, #4]
					  break;
 80013b6:	e012      	b.n	80013de <main+0x156>

				  case '3':
					  stepperHoming();
 80013b8:	f7ff fc2e 	bl	8000c18 <stepperHoming>
					  runAndWait();
 80013bc:	f7ff fbe8 	bl	8000b90 <runAndWait>
					  HAL_Delay(100);
 80013c0:	2064      	movs	r0, #100	; 0x64
 80013c2:	f000 fca7 	bl	8001d14 <HAL_Delay>
					  KeyCommand[0]=0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	713b      	strb	r3, [r7, #4]

				  case '4':
					  AbsoluteReset();
 80013ca:	f7ff fbff 	bl	8000bcc <AbsoluteReset>
					  KeyCommand[0]=0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	713b      	strb	r3, [r7, #4]
				  default:
					  printf("NoCommand");
 80013d2:	4813      	ldr	r0, [pc, #76]	; (8001420 <main+0x198>)
 80013d4:	f004 fb70 	bl	8005ab8 <iprintf>
					  KeyCommand[0]=0;
 80013d8:	2300      	movs	r3, #0
 80013da:	713b      	strb	r3, [r7, #4]
					  break;
 80013dc:	bf00      	nop
			  }
			  get_uart_flag=0;
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <main+0x17c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2,(uint8_t *)KeyCommand,sizeof(KeyCommand));
 80013e4:	e797      	b.n	8001316 <main+0x8e>
 80013e6:	bf00      	nop
 80013e8:	2000000c 	.word	0x2000000c
 80013ec:	2000008c 	.word	0x2000008c
 80013f0:	08006e40 	.word	0x08006e40
 80013f4:	200005f8 	.word	0x200005f8
 80013f8:	08000749 	.word	0x08000749
 80013fc:	08000725 	.word	0x08000725
 8001400:	447a0000 	.word	0x447a0000
 8001404:	2000064b 	.word	0x2000064b
 8001408:	08006e48 	.word	0x08006e48
 800140c:	20000118 	.word	0x20000118
 8001410:	08006e54 	.word	0x08006e54
 8001414:	08006e64 	.word	0x08006e64
 8001418:	08006e70 	.word	0x08006e70
 800141c:	ffffec78 	.word	0xffffec78
 8001420:	08006e78 	.word	0x08006e78

08001424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b094      	sub	sp, #80	; 0x50
 8001428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	2234      	movs	r2, #52	; 0x34
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f004 fb38 	bl	8005aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <SystemClock_Config+0xd0>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	4a28      	ldr	r2, [pc, #160]	; (80014f4 <SystemClock_Config+0xd0>)
 8001452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001456:	6413      	str	r3, [r2, #64]	; 0x40
 8001458:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <SystemClock_Config+0xd0>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001464:	2300      	movs	r3, #0
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <SystemClock_Config+0xd4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a22      	ldr	r2, [pc, #136]	; (80014f8 <SystemClock_Config+0xd4>)
 800146e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <SystemClock_Config+0xd4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001480:	2302      	movs	r3, #2
 8001482:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001484:	2301      	movs	r3, #1
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001488:	2310      	movs	r3, #16
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800148c:	2302      	movs	r3, #2
 800148e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001490:	2300      	movs	r3, #0
 8001492:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001494:	2308      	movs	r3, #8
 8001496:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001498:	23a0      	movs	r3, #160	; 0xa0
 800149a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800149c:	2302      	movs	r3, #2
 800149e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014a0:	2302      	movs	r3, #2
 80014a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014a4:	2302      	movs	r3, #2
 80014a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4618      	mov	r0, r3
 80014ae:	f001 fb21 	bl	8002af4 <HAL_RCC_OscConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014b8:	f000 f9cc 	bl	8001854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014bc:	230f      	movs	r3, #15
 80014be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c0:	2302      	movs	r3, #2
 80014c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	2105      	movs	r1, #5
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 ffc0 	bl	8002460 <HAL_RCC_ClockConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80014e6:	f000 f9b5 	bl	8001854 <Error_Handler>
  }
}
 80014ea:	bf00      	nop
 80014ec:	3750      	adds	r7, #80	; 0x50
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40007000 	.word	0x40007000

080014fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08e      	sub	sp, #56	; 0x38
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001510:	f107 0320 	add.w	r3, r7, #32
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
 8001528:	615a      	str	r2, [r3, #20]
 800152a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800152c:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <MX_TIM3_Init+0xe0>)
 800152e:	4a2c      	ldr	r2, [pc, #176]	; (80015e0 <MX_TIM3_Init+0xe4>)
 8001530:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 8001532:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <MX_TIM3_Init+0xe0>)
 8001534:	229f      	movs	r2, #159	; 0x9f
 8001536:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <MX_TIM3_Init+0xe0>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800153e:	4b27      	ldr	r3, [pc, #156]	; (80015dc <MX_TIM3_Init+0xe0>)
 8001540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001544:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001546:	4b25      	ldr	r3, [pc, #148]	; (80015dc <MX_TIM3_Init+0xe0>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b23      	ldr	r3, [pc, #140]	; (80015dc <MX_TIM3_Init+0xe0>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001552:	4822      	ldr	r0, [pc, #136]	; (80015dc <MX_TIM3_Init+0xe0>)
 8001554:	f001 fd6c 	bl	8003030 <HAL_TIM_Base_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800155e:	f000 f979 	bl	8001854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001568:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800156c:	4619      	mov	r1, r3
 800156e:	481b      	ldr	r0, [pc, #108]	; (80015dc <MX_TIM3_Init+0xe0>)
 8001570:	f002 f880 	bl	8003674 <HAL_TIM_ConfigClockSource>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800157a:	f000 f96b 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800157e:	4817      	ldr	r0, [pc, #92]	; (80015dc <MX_TIM3_Init+0xe0>)
 8001580:	f001 fda5 	bl	80030ce <HAL_TIM_OC_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800158a:	f000 f963 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001596:	f107 0320 	add.w	r3, r7, #32
 800159a:	4619      	mov	r1, r3
 800159c:	480f      	ldr	r0, [pc, #60]	; (80015dc <MX_TIM3_Init+0xe0>)
 800159e:	f002 fc69 	bl	8003e74 <HAL_TIMEx_MasterConfigSynchronization>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80015a8:	f000 f954 	bl	8001854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2200      	movs	r2, #0
 80015c0:	4619      	mov	r1, r3
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <MX_TIM3_Init+0xe0>)
 80015c4:	f001 fffa 	bl	80035bc <HAL_TIM_OC_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80015ce:	f000 f941 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	3738      	adds	r7, #56	; 0x38
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000008c 	.word	0x2000008c
 80015e0:	40000400 	.word	0x40000400

080015e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015e8:	4b10      	ldr	r3, [pc, #64]	; (800162c <MX_USART1_UART_Init+0x48>)
 80015ea:	4a11      	ldr	r2, [pc, #68]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_USART1_UART_Init+0x48>)
 80015f0:	4a10      	ldr	r2, [pc, #64]	; (8001634 <MX_USART1_UART_Init+0x50>)
 80015f2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015f4:	4b0d      	ldr	r3, [pc, #52]	; (800162c <MX_USART1_UART_Init+0x48>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <MX_USART1_UART_Init+0x48>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <MX_USART1_UART_Init+0x48>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_USART1_UART_Init+0x48>)
 8001608:	220c      	movs	r2, #12
 800160a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <MX_USART1_UART_Init+0x48>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <MX_USART1_UART_Init+0x48>)
 8001614:	2200      	movs	r2, #0
 8001616:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001618:	4804      	ldr	r0, [pc, #16]	; (800162c <MX_USART1_UART_Init+0x48>)
 800161a:	f002 fd08 	bl	800402e <HAL_HalfDuplex_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001624:	f000 f916 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200000d4 	.word	0x200000d4
 8001630:	40011000 	.word	0x40011000
 8001634:	0007a120 	.word	0x0007a120

08001638 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800163e:	4a12      	ldr	r2, [pc, #72]	; (8001688 <MX_USART2_UART_Init+0x50>)
 8001640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800165e:	220c      	movs	r2, #12
 8001660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001670:	f002 fc90 	bl	8003f94 <HAL_UART_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800167a:	f000 f8eb 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000118 	.word	0x20000118
 8001688:	40004400 	.word	0x40004400

0800168c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b54      	ldr	r3, [pc, #336]	; (80017f8 <MX_GPIO_Init+0x16c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a53      	ldr	r2, [pc, #332]	; (80017f8 <MX_GPIO_Init+0x16c>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b51      	ldr	r3, [pc, #324]	; (80017f8 <MX_GPIO_Init+0x16c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b4d      	ldr	r3, [pc, #308]	; (80017f8 <MX_GPIO_Init+0x16c>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a4c      	ldr	r2, [pc, #304]	; (80017f8 <MX_GPIO_Init+0x16c>)
 80016c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <MX_GPIO_Init+0x16c>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	4b46      	ldr	r3, [pc, #280]	; (80017f8 <MX_GPIO_Init+0x16c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a45      	ldr	r2, [pc, #276]	; (80017f8 <MX_GPIO_Init+0x16c>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b43      	ldr	r3, [pc, #268]	; (80017f8 <MX_GPIO_Init+0x16c>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b3f      	ldr	r3, [pc, #252]	; (80017f8 <MX_GPIO_Init+0x16c>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a3e      	ldr	r2, [pc, #248]	; (80017f8 <MX_GPIO_Init+0x16c>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b3c      	ldr	r3, [pc, #240]	; (80017f8 <MX_GPIO_Init+0x16c>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	2120      	movs	r1, #32
 8001716:	4839      	ldr	r0, [pc, #228]	; (80017fc <MX_GPIO_Init+0x170>)
 8001718:	f000 fe70 	bl	80023fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	f44f 7144 	mov.w	r1, #784	; 0x310
 8001722:	4837      	ldr	r0, [pc, #220]	; (8001800 <MX_GPIO_Init+0x174>)
 8001724:	f000 fe6a 	bl	80023fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800172c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800172e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	4831      	ldr	r0, [pc, #196]	; (8001804 <MX_GPIO_Init+0x178>)
 8001740:	f000 fcb0 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001744:	2320      	movs	r3, #32
 8001746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001748:	2301      	movs	r3, #1
 800174a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4619      	mov	r1, r3
 800175a:	4828      	ldr	r0, [pc, #160]	; (80017fc <MX_GPIO_Init+0x170>)
 800175c:	f000 fca2 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001764:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	4821      	ldr	r0, [pc, #132]	; (80017fc <MX_GPIO_Init+0x170>)
 8001776:	f000 fc95 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800177a:	2310      	movs	r3, #16
 800177c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	481b      	ldr	r0, [pc, #108]	; (8001800 <MX_GPIO_Init+0x174>)
 8001792:	f000 fc87 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001796:	2340      	movs	r3, #64	; 0x40
 8001798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800179a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800179e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	4619      	mov	r1, r3
 80017aa:	4815      	ldr	r0, [pc, #84]	; (8001800 <MX_GPIO_Init+0x174>)
 80017ac:	f000 fc7a 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b6:	2301      	movs	r3, #1
 80017b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017be:	2303      	movs	r3, #3
 80017c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	480d      	ldr	r0, [pc, #52]	; (8001800 <MX_GPIO_Init+0x174>)
 80017ca:	f000 fc6b 	bl	80020a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2101      	movs	r1, #1
 80017d2:	2017      	movs	r0, #23
 80017d4:	f000 fb9d 	bl	8001f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017d8:	2017      	movs	r0, #23
 80017da:	f000 fbb6 	bl	8001f4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2101      	movs	r1, #1
 80017e2:	2028      	movs	r0, #40	; 0x28
 80017e4:	f000 fb95 	bl	8001f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017e8:	2028      	movs	r0, #40	; 0x28
 80017ea:	f000 fbae 	bl	8001f4a <HAL_NVIC_EnableIRQ>

}
 80017ee:	bf00      	nop
 80017f0:	3728      	adds	r7, #40	; 0x28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40020400 	.word	0x40020400
 8001804:	40020800 	.word	0x40020800

08001808 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)	//printfに必要
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	b29a      	uxth	r2, r3
 8001818:	230a      	movs	r3, #10
 800181a:	68b9      	ldr	r1, [r7, #8]
 800181c:	4803      	ldr	r0, [pc, #12]	; (800182c <_write+0x24>)
 800181e:	f002 fc5b 	bl	80040d8 <HAL_UART_Transmit>
  return len;
 8001822:	687b      	ldr	r3, [r7, #4]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000118 	.word	0x20000118

08001830 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	get_uart_flag = 1;
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <HAL_UART_RxCpltCallback+0x1c>)
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
	printf("uart_timer\r\n");
 800183e:	4804      	ldr	r0, [pc, #16]	; (8001850 <HAL_UART_RxCpltCallback+0x20>)
 8001840:	f004 f9c0 	bl	8005bc4 <puts>

}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	2000064b 	.word	0x2000064b
 8001850:	08006e84 	.word	0x08006e84

08001854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001858:	b672      	cpsid	i
}
 800185a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800185c:	e7fe      	b.n	800185c <Error_Handler+0x8>
	...

08001860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_MspInit+0x4c>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	4a0f      	ldr	r2, [pc, #60]	; (80018ac <HAL_MspInit+0x4c>)
 8001870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001874:	6453      	str	r3, [r2, #68]	; 0x44
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <HAL_MspInit+0x4c>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_MspInit+0x4c>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a08      	ldr	r2, [pc, #32]	; (80018ac <HAL_MspInit+0x4c>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_MspInit+0x4c>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800

080018b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <HAL_TIM_Base_MspInit+0x48>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d115      	bne.n	80018ee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <HAL_TIM_Base_MspInit+0x4c>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	4a0c      	ldr	r2, [pc, #48]	; (80018fc <HAL_TIM_Base_MspInit+0x4c>)
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	6413      	str	r3, [r2, #64]	; 0x40
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_TIM_Base_MspInit+0x4c>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2102      	movs	r1, #2
 80018e2:	201d      	movs	r0, #29
 80018e4:	f000 fb15 	bl	8001f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018e8:	201d      	movs	r0, #29
 80018ea:	f000 fb2e 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40000400 	.word	0x40000400
 80018fc:	40023800 	.word	0x40023800

08001900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08c      	sub	sp, #48	; 0x30
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a36      	ldr	r2, [pc, #216]	; (80019f8 <HAL_UART_MspInit+0xf8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d12d      	bne.n	800197e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]
 8001926:	4b35      	ldr	r3, [pc, #212]	; (80019fc <HAL_UART_MspInit+0xfc>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	4a34      	ldr	r2, [pc, #208]	; (80019fc <HAL_UART_MspInit+0xfc>)
 800192c:	f043 0310 	orr.w	r3, r3, #16
 8001930:	6453      	str	r3, [r2, #68]	; 0x44
 8001932:	4b32      	ldr	r3, [pc, #200]	; (80019fc <HAL_UART_MspInit+0xfc>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	61bb      	str	r3, [r7, #24]
 800193c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <HAL_UART_MspInit+0xfc>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a2d      	ldr	r2, [pc, #180]	; (80019fc <HAL_UART_MspInit+0xfc>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_UART_MspInit+0xfc>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800195a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800195e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001960:	2312      	movs	r3, #18
 8001962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001968:	2302      	movs	r3, #2
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800196c:	2307      	movs	r3, #7
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	4619      	mov	r1, r3
 8001976:	4822      	ldr	r0, [pc, #136]	; (8001a00 <HAL_UART_MspInit+0x100>)
 8001978:	f000 fb94 	bl	80020a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800197c:	e038      	b.n	80019f0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a20      	ldr	r2, [pc, #128]	; (8001a04 <HAL_UART_MspInit+0x104>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d133      	bne.n	80019f0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001988:	2300      	movs	r3, #0
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <HAL_UART_MspInit+0xfc>)
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	4a1a      	ldr	r2, [pc, #104]	; (80019fc <HAL_UART_MspInit+0xfc>)
 8001992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001996:	6413      	str	r3, [r2, #64]	; 0x40
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_UART_MspInit+0xfc>)
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <HAL_UART_MspInit+0xfc>)
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	4a13      	ldr	r2, [pc, #76]	; (80019fc <HAL_UART_MspInit+0xfc>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6313      	str	r3, [r2, #48]	; 0x30
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_UART_MspInit+0xfc>)
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019c0:	230c      	movs	r3, #12
 80019c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019d0:	2307      	movs	r3, #7
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	4619      	mov	r1, r3
 80019da:	4809      	ldr	r0, [pc, #36]	; (8001a00 <HAL_UART_MspInit+0x100>)
 80019dc:	f000 fb62 	bl	80020a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2100      	movs	r1, #0
 80019e4:	2026      	movs	r0, #38	; 0x26
 80019e6:	f000 fa94 	bl	8001f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019ea:	2026      	movs	r0, #38	; 0x26
 80019ec:	f000 faad 	bl	8001f4a <HAL_NVIC_EnableIRQ>
}
 80019f0:	bf00      	nop
 80019f2:	3730      	adds	r7, #48	; 0x30
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40011000 	.word	0x40011000
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40004400 	.word	0x40004400

08001a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <NMI_Handler+0x4>

08001a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <HardFault_Handler+0x4>

08001a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <MemManage_Handler+0x4>

08001a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1e:	e7fe      	b.n	8001a1e <BusFault_Handler+0x4>

08001a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <UsageFault_Handler+0x4>

08001a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a54:	f000 f93e 	bl	8001cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001a60:	2040      	movs	r0, #64	; 0x40
 8001a62:	f000 fce5 	bl	8002430 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001a66:	2080      	movs	r0, #128	; 0x80
 8001a68:	f000 fce2 	bl	8002430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <TIM3_IRQHandler+0x10>)
 8001a76:	f001 fc99 	bl	80033ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	2000008c 	.word	0x2000008c

08001a84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <USART2_IRQHandler+0x10>)
 8001a8a:	f002 fccf 	bl	800442c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000118 	.word	0x20000118

08001a98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001aa0:	f000 fcc6 	bl	8002430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	e00a      	b.n	8001ad0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aba:	f3af 8000 	nop.w
 8001abe:	4601      	mov	r1, r0
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	60ba      	str	r2, [r7, #8]
 8001ac6:	b2ca      	uxtb	r2, r1
 8001ac8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	3301      	adds	r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	dbf0      	blt.n	8001aba <_read+0x12>
	}

return len;
 8001ad8:	687b      	ldr	r3, [r7, #4]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
	return -1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b0a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <_isatty>:

int _isatty(int file)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
	return 1;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
	return 0;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b54:	4a14      	ldr	r2, [pc, #80]	; (8001ba8 <_sbrk+0x5c>)
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <_sbrk+0x60>)
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d102      	bne.n	8001b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <_sbrk+0x64>)
 8001b6a:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <_sbrk+0x68>)
 8001b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d207      	bcs.n	8001b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b7c:	f003 ff6a 	bl	8005a54 <__errno>
 8001b80:	4603      	mov	r3, r0
 8001b82:	220c      	movs	r2, #12
 8001b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b8a:	e009      	b.n	8001ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b92:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <_sbrk+0x64>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	4a05      	ldr	r2, [pc, #20]	; (8001bb0 <_sbrk+0x64>)
 8001b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20020000 	.word	0x20020000
 8001bac:	00000400 	.word	0x00000400
 8001bb0:	20000650 	.word	0x20000650
 8001bb4:	20000870 	.word	0x20000870

08001bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <SystemInit+0x20>)
 8001bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <SystemInit+0x20>)
 8001bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001be0:	480d      	ldr	r0, [pc, #52]	; (8001c18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001be2:	490e      	ldr	r1, [pc, #56]	; (8001c1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001be4:	4a0e      	ldr	r2, [pc, #56]	; (8001c20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be8:	e002      	b.n	8001bf0 <LoopCopyDataInit>

08001bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bee:	3304      	adds	r3, #4

08001bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf4:	d3f9      	bcc.n	8001bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf6:	4a0b      	ldr	r2, [pc, #44]	; (8001c24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bf8:	4c0b      	ldr	r4, [pc, #44]	; (8001c28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bfc:	e001      	b.n	8001c02 <LoopFillZerobss>

08001bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c00:	3204      	adds	r2, #4

08001c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c04:	d3fb      	bcc.n	8001bfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c06:	f7ff ffd7 	bl	8001bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c0a:	f003 ff29 	bl	8005a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c0e:	f7ff fb3b 	bl	8001288 <main>
  bx  lr    
 8001c12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c1c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c20:	080071d0 	.word	0x080071d0
  ldr r2, =_sbss
 8001c24:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c28:	2000086c 	.word	0x2000086c

08001c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c2c:	e7fe      	b.n	8001c2c <ADC_IRQHandler>
	...

08001c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c34:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <HAL_Init+0x40>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0d      	ldr	r2, [pc, #52]	; (8001c70 <HAL_Init+0x40>)
 8001c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <HAL_Init+0x40>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <HAL_Init+0x40>)
 8001c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <HAL_Init+0x40>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a07      	ldr	r2, [pc, #28]	; (8001c70 <HAL_Init+0x40>)
 8001c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c58:	2003      	movs	r0, #3
 8001c5a:	f000 f94f 	bl	8001efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f000 f808 	bl	8001c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c64:	f7ff fdfc 	bl	8001860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023c00 	.word	0x40023c00

08001c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_InitTick+0x54>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_InitTick+0x58>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	4619      	mov	r1, r3
 8001c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f967 	bl	8001f66 <HAL_SYSTICK_Config>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00e      	b.n	8001cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b0f      	cmp	r3, #15
 8001ca6:	d80a      	bhi.n	8001cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cb0:	f000 f92f 	bl	8001f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb4:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <HAL_InitTick+0x5c>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e000      	b.n	8001cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000008 	.word	0x20000008
 8001cd0:	20000004 	.word	0x20000004

08001cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_IncTick+0x20>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_IncTick+0x24>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <HAL_IncTick+0x24>)
 8001ce6:	6013      	str	r3, [r2, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000008 	.word	0x20000008
 8001cf8:	20000654 	.word	0x20000654

08001cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <HAL_GetTick+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000654 	.word	0x20000654

08001d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d1c:	f7ff ffee 	bl	8001cfc <HAL_GetTick>
 8001d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d2c:	d005      	beq.n	8001d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <HAL_Delay+0x44>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d3a:	bf00      	nop
 8001d3c:	f7ff ffde 	bl	8001cfc <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d8f7      	bhi.n	8001d3c <HAL_Delay+0x28>
  {
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000008 	.word	0x20000008

08001d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d8e:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	60d3      	str	r3, [r2, #12]
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <__NVIC_GetPriorityGrouping+0x18>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	0a1b      	lsrs	r3, r3, #8
 8001dae:	f003 0307 	and.w	r3, r3, #7
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	db0b      	blt.n	8001dea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	f003 021f 	and.w	r2, r3, #31
 8001dd8:	4907      	ldr	r1, [pc, #28]	; (8001df8 <__NVIC_EnableIRQ+0x38>)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	2001      	movs	r0, #1
 8001de2:	fa00 f202 	lsl.w	r2, r0, r2
 8001de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000e100 	.word	0xe000e100

08001dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	6039      	str	r1, [r7, #0]
 8001e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	db0a      	blt.n	8001e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	490c      	ldr	r1, [pc, #48]	; (8001e48 <__NVIC_SetPriority+0x4c>)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	0112      	lsls	r2, r2, #4
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	440b      	add	r3, r1
 8001e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e24:	e00a      	b.n	8001e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4908      	ldr	r1, [pc, #32]	; (8001e4c <__NVIC_SetPriority+0x50>)
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	3b04      	subs	r3, #4
 8001e34:	0112      	lsls	r2, r2, #4
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	440b      	add	r3, r1
 8001e3a:	761a      	strb	r2, [r3, #24]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000e100 	.word	0xe000e100
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b089      	sub	sp, #36	; 0x24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f1c3 0307 	rsb	r3, r3, #7
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	bf28      	it	cs
 8001e6e:	2304      	movcs	r3, #4
 8001e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3304      	adds	r3, #4
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d902      	bls.n	8001e80 <NVIC_EncodePriority+0x30>
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3b03      	subs	r3, #3
 8001e7e:	e000      	b.n	8001e82 <NVIC_EncodePriority+0x32>
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	401a      	ands	r2, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea2:	43d9      	mvns	r1, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	4313      	orrs	r3, r2
         );
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3724      	adds	r7, #36	; 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ec8:	d301      	bcc.n	8001ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00f      	b.n	8001eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ece:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <SysTick_Config+0x40>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed6:	210f      	movs	r1, #15
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001edc:	f7ff ff8e 	bl	8001dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <SysTick_Config+0x40>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <SysTick_Config+0x40>)
 8001ee8:	2207      	movs	r2, #7
 8001eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	e000e010 	.word	0xe000e010

08001efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ff29 	bl	8001d5c <__NVIC_SetPriorityGrouping>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f24:	f7ff ff3e 	bl	8001da4 <__NVIC_GetPriorityGrouping>
 8001f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	6978      	ldr	r0, [r7, #20]
 8001f30:	f7ff ff8e 	bl	8001e50 <NVIC_EncodePriority>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff5d 	bl	8001dfc <__NVIC_SetPriority>
}
 8001f42:	bf00      	nop
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff31 	bl	8001dc0 <__NVIC_EnableIRQ>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff ffa2 	bl	8001eb8 <SysTick_Config>
 8001f74:	4603      	mov	r3, r0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f8c:	f7ff feb6 	bl	8001cfc <HAL_GetTick>
 8001f90:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d008      	beq.n	8001fb0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2280      	movs	r2, #128	; 0x80
 8001fa2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e052      	b.n	8002056 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0216 	bic.w	r2, r2, #22
 8001fbe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d103      	bne.n	8001fe0 <HAL_DMA_Abort+0x62>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d007      	beq.n	8001ff0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0208 	bic.w	r2, r2, #8
 8001fee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0201 	bic.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002000:	e013      	b.n	800202a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002002:	f7ff fe7b 	bl	8001cfc <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b05      	cmp	r3, #5
 800200e:	d90c      	bls.n	800202a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2220      	movs	r2, #32
 8002014:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2203      	movs	r2, #3
 800201a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e015      	b.n	8002056 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1e4      	bne.n	8002002 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203c:	223f      	movs	r2, #63	; 0x3f
 800203e:	409a      	lsls	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d004      	beq.n	800207c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2280      	movs	r2, #128	; 0x80
 8002076:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e00c      	b.n	8002096 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2205      	movs	r2, #5
 8002080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0201 	bic.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b089      	sub	sp, #36	; 0x24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	e165      	b.n	800238c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020c0:	2201      	movs	r2, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	429a      	cmp	r2, r3
 80020da:	f040 8154 	bne.w	8002386 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d005      	beq.n	80020f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d130      	bne.n	8002158 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	2203      	movs	r2, #3
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800212c:	2201      	movs	r2, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 0201 	and.w	r2, r3, #1
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b03      	cmp	r3, #3
 8002162:	d017      	beq.n	8002194 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2203      	movs	r2, #3
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d123      	bne.n	80021e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	08da      	lsrs	r2, r3, #3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3208      	adds	r2, #8
 80021a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	220f      	movs	r2, #15
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	08da      	lsrs	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3208      	adds	r2, #8
 80021e2:	69b9      	ldr	r1, [r7, #24]
 80021e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0203 	and.w	r2, r3, #3
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80ae 	beq.w	8002386 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	4b5d      	ldr	r3, [pc, #372]	; (80023a4 <HAL_GPIO_Init+0x300>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	4a5c      	ldr	r2, [pc, #368]	; (80023a4 <HAL_GPIO_Init+0x300>)
 8002234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002238:	6453      	str	r3, [r2, #68]	; 0x44
 800223a:	4b5a      	ldr	r3, [pc, #360]	; (80023a4 <HAL_GPIO_Init+0x300>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002246:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <HAL_GPIO_Init+0x304>)
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	089b      	lsrs	r3, r3, #2
 800224c:	3302      	adds	r3, #2
 800224e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	220f      	movs	r2, #15
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4f      	ldr	r2, [pc, #316]	; (80023ac <HAL_GPIO_Init+0x308>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d025      	beq.n	80022be <HAL_GPIO_Init+0x21a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4e      	ldr	r2, [pc, #312]	; (80023b0 <HAL_GPIO_Init+0x30c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d01f      	beq.n	80022ba <HAL_GPIO_Init+0x216>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a4d      	ldr	r2, [pc, #308]	; (80023b4 <HAL_GPIO_Init+0x310>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d019      	beq.n	80022b6 <HAL_GPIO_Init+0x212>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a4c      	ldr	r2, [pc, #304]	; (80023b8 <HAL_GPIO_Init+0x314>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d013      	beq.n	80022b2 <HAL_GPIO_Init+0x20e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a4b      	ldr	r2, [pc, #300]	; (80023bc <HAL_GPIO_Init+0x318>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00d      	beq.n	80022ae <HAL_GPIO_Init+0x20a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a4a      	ldr	r2, [pc, #296]	; (80023c0 <HAL_GPIO_Init+0x31c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d007      	beq.n	80022aa <HAL_GPIO_Init+0x206>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a49      	ldr	r2, [pc, #292]	; (80023c4 <HAL_GPIO_Init+0x320>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <HAL_GPIO_Init+0x202>
 80022a2:	2306      	movs	r3, #6
 80022a4:	e00c      	b.n	80022c0 <HAL_GPIO_Init+0x21c>
 80022a6:	2307      	movs	r3, #7
 80022a8:	e00a      	b.n	80022c0 <HAL_GPIO_Init+0x21c>
 80022aa:	2305      	movs	r3, #5
 80022ac:	e008      	b.n	80022c0 <HAL_GPIO_Init+0x21c>
 80022ae:	2304      	movs	r3, #4
 80022b0:	e006      	b.n	80022c0 <HAL_GPIO_Init+0x21c>
 80022b2:	2303      	movs	r3, #3
 80022b4:	e004      	b.n	80022c0 <HAL_GPIO_Init+0x21c>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e002      	b.n	80022c0 <HAL_GPIO_Init+0x21c>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_GPIO_Init+0x21c>
 80022be:	2300      	movs	r3, #0
 80022c0:	69fa      	ldr	r2, [r7, #28]
 80022c2:	f002 0203 	and.w	r2, r2, #3
 80022c6:	0092      	lsls	r2, r2, #2
 80022c8:	4093      	lsls	r3, r2
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022d0:	4935      	ldr	r1, [pc, #212]	; (80023a8 <HAL_GPIO_Init+0x304>)
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	089b      	lsrs	r3, r3, #2
 80022d6:	3302      	adds	r3, #2
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022de:	4b3a      	ldr	r3, [pc, #232]	; (80023c8 <HAL_GPIO_Init+0x324>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002302:	4a31      	ldr	r2, [pc, #196]	; (80023c8 <HAL_GPIO_Init+0x324>)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002308:	4b2f      	ldr	r3, [pc, #188]	; (80023c8 <HAL_GPIO_Init+0x324>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800232c:	4a26      	ldr	r2, [pc, #152]	; (80023c8 <HAL_GPIO_Init+0x324>)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002332:	4b25      	ldr	r3, [pc, #148]	; (80023c8 <HAL_GPIO_Init+0x324>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002356:	4a1c      	ldr	r2, [pc, #112]	; (80023c8 <HAL_GPIO_Init+0x324>)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800235c:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <HAL_GPIO_Init+0x324>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002380:	4a11      	ldr	r2, [pc, #68]	; (80023c8 <HAL_GPIO_Init+0x324>)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3301      	adds	r3, #1
 800238a:	61fb      	str	r3, [r7, #28]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	2b0f      	cmp	r3, #15
 8002390:	f67f ae96 	bls.w	80020c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	3724      	adds	r7, #36	; 0x24
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40013800 	.word	0x40013800
 80023ac:	40020000 	.word	0x40020000
 80023b0:	40020400 	.word	0x40020400
 80023b4:	40020800 	.word	0x40020800
 80023b8:	40020c00 	.word	0x40020c00
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40021400 	.word	0x40021400
 80023c4:	40021800 	.word	0x40021800
 80023c8:	40013c00 	.word	0x40013c00

080023cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	887b      	ldrh	r3, [r7, #2]
 80023de:	4013      	ands	r3, r2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	e001      	b.n	80023ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ea:	2300      	movs	r3, #0
 80023ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	807b      	strh	r3, [r7, #2]
 8002408:	4613      	mov	r3, r2
 800240a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800240c:	787b      	ldrb	r3, [r7, #1]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002412:	887a      	ldrh	r2, [r7, #2]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002418:	e003      	b.n	8002422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800241a:	887b      	ldrh	r3, [r7, #2]
 800241c:	041a      	lsls	r2, r3, #16
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	619a      	str	r2, [r3, #24]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800243a:	4b08      	ldr	r3, [pc, #32]	; (800245c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800243c:	695a      	ldr	r2, [r3, #20]
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d006      	beq.n	8002454 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002446:	4a05      	ldr	r2, [pc, #20]	; (800245c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe f922 	bl	8000698 <HAL_GPIO_EXTI_Callback>
  }
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40013c00 	.word	0x40013c00

08002460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0cc      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002474:	4b68      	ldr	r3, [pc, #416]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d90c      	bls.n	800249c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002482:	4b65      	ldr	r3, [pc, #404]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b63      	ldr	r3, [pc, #396]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0b8      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b4:	4b59      	ldr	r3, [pc, #356]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4a58      	ldr	r2, [pc, #352]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024cc:	4b53      	ldr	r3, [pc, #332]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4a52      	ldr	r2, [pc, #328]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d8:	4b50      	ldr	r3, [pc, #320]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	494d      	ldr	r1, [pc, #308]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d044      	beq.n	8002580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fe:	4b47      	ldr	r3, [pc, #284]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d119      	bne.n	800253e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e07f      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d003      	beq.n	800251e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800251a:	2b03      	cmp	r3, #3
 800251c:	d107      	bne.n	800252e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251e:	4b3f      	ldr	r3, [pc, #252]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d109      	bne.n	800253e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e06f      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252e:	4b3b      	ldr	r3, [pc, #236]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e067      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800253e:	4b37      	ldr	r3, [pc, #220]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f023 0203 	bic.w	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	4934      	ldr	r1, [pc, #208]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	4313      	orrs	r3, r2
 800254e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002550:	f7ff fbd4 	bl	8001cfc <HAL_GetTick>
 8002554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002556:	e00a      	b.n	800256e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002558:	f7ff fbd0 	bl	8001cfc <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f241 3288 	movw	r2, #5000	; 0x1388
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e04f      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	4b2b      	ldr	r3, [pc, #172]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 020c 	and.w	r2, r3, #12
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	429a      	cmp	r2, r3
 800257e:	d1eb      	bne.n	8002558 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002580:	4b25      	ldr	r3, [pc, #148]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d20c      	bcs.n	80025a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b22      	ldr	r3, [pc, #136]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d001      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e032      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b4:	4b19      	ldr	r3, [pc, #100]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	4916      	ldr	r1, [pc, #88]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025d2:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	490e      	ldr	r1, [pc, #56]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025e6:	f000 f855 	bl	8002694 <HAL_RCC_GetSysClockFreq>
 80025ea:	4602      	mov	r2, r0
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	490a      	ldr	r1, [pc, #40]	; (8002620 <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	5ccb      	ldrb	r3, [r1, r3]
 80025fa:	fa22 f303 	lsr.w	r3, r2, r3
 80025fe:	4a09      	ldr	r2, [pc, #36]	; (8002624 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_RCC_ClockConfig+0x1c8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fb34 	bl	8001c74 <HAL_InitTick>

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40023c00 	.word	0x40023c00
 800261c:	40023800 	.word	0x40023800
 8002620:	08007090 	.word	0x08007090
 8002624:	20000000 	.word	0x20000000
 8002628:	20000004 	.word	0x20000004

0800262c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002630:	4b03      	ldr	r3, [pc, #12]	; (8002640 <HAL_RCC_GetHCLKFreq+0x14>)
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000000 	.word	0x20000000

08002644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002648:	f7ff fff0 	bl	800262c <HAL_RCC_GetHCLKFreq>
 800264c:	4602      	mov	r2, r0
 800264e:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	0a9b      	lsrs	r3, r3, #10
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4903      	ldr	r1, [pc, #12]	; (8002668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800265a:	5ccb      	ldrb	r3, [r1, r3]
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40023800 	.word	0x40023800
 8002668:	080070a0 	.word	0x080070a0

0800266c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002670:	f7ff ffdc 	bl	800262c <HAL_RCC_GetHCLKFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	0b5b      	lsrs	r3, r3, #13
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	4903      	ldr	r1, [pc, #12]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002682:	5ccb      	ldrb	r3, [r1, r3]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40023800 	.word	0x40023800
 8002690:	080070a0 	.word	0x080070a0

08002694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002698:	b0ae      	sub	sp, #184	; 0xb8
 800269a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ba:	4bcb      	ldr	r3, [pc, #812]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b0c      	cmp	r3, #12
 80026c4:	f200 8206 	bhi.w	8002ad4 <HAL_RCC_GetSysClockFreq+0x440>
 80026c8:	a201      	add	r2, pc, #4	; (adr r2, 80026d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80026ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ce:	bf00      	nop
 80026d0:	08002705 	.word	0x08002705
 80026d4:	08002ad5 	.word	0x08002ad5
 80026d8:	08002ad5 	.word	0x08002ad5
 80026dc:	08002ad5 	.word	0x08002ad5
 80026e0:	0800270d 	.word	0x0800270d
 80026e4:	08002ad5 	.word	0x08002ad5
 80026e8:	08002ad5 	.word	0x08002ad5
 80026ec:	08002ad5 	.word	0x08002ad5
 80026f0:	08002715 	.word	0x08002715
 80026f4:	08002ad5 	.word	0x08002ad5
 80026f8:	08002ad5 	.word	0x08002ad5
 80026fc:	08002ad5 	.word	0x08002ad5
 8002700:	08002905 	.word	0x08002905
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002704:	4bb9      	ldr	r3, [pc, #740]	; (80029ec <HAL_RCC_GetSysClockFreq+0x358>)
 8002706:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800270a:	e1e7      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800270c:	4bb8      	ldr	r3, [pc, #736]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800270e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002712:	e1e3      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002714:	4bb4      	ldr	r3, [pc, #720]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800271c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002720:	4bb1      	ldr	r3, [pc, #708]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d071      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272c:	4bae      	ldr	r3, [pc, #696]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	099b      	lsrs	r3, r3, #6
 8002732:	2200      	movs	r2, #0
 8002734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002738:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800273c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002744:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002748:	2300      	movs	r3, #0
 800274a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800274e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002752:	4622      	mov	r2, r4
 8002754:	462b      	mov	r3, r5
 8002756:	f04f 0000 	mov.w	r0, #0
 800275a:	f04f 0100 	mov.w	r1, #0
 800275e:	0159      	lsls	r1, r3, #5
 8002760:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002764:	0150      	lsls	r0, r2, #5
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4621      	mov	r1, r4
 800276c:	1a51      	subs	r1, r2, r1
 800276e:	6439      	str	r1, [r7, #64]	; 0x40
 8002770:	4629      	mov	r1, r5
 8002772:	eb63 0301 	sbc.w	r3, r3, r1
 8002776:	647b      	str	r3, [r7, #68]	; 0x44
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002784:	4649      	mov	r1, r9
 8002786:	018b      	lsls	r3, r1, #6
 8002788:	4641      	mov	r1, r8
 800278a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800278e:	4641      	mov	r1, r8
 8002790:	018a      	lsls	r2, r1, #6
 8002792:	4641      	mov	r1, r8
 8002794:	1a51      	subs	r1, r2, r1
 8002796:	63b9      	str	r1, [r7, #56]	; 0x38
 8002798:	4649      	mov	r1, r9
 800279a:	eb63 0301 	sbc.w	r3, r3, r1
 800279e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80027ac:	4649      	mov	r1, r9
 80027ae:	00cb      	lsls	r3, r1, #3
 80027b0:	4641      	mov	r1, r8
 80027b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027b6:	4641      	mov	r1, r8
 80027b8:	00ca      	lsls	r2, r1, #3
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	4603      	mov	r3, r0
 80027c0:	4622      	mov	r2, r4
 80027c2:	189b      	adds	r3, r3, r2
 80027c4:	633b      	str	r3, [r7, #48]	; 0x30
 80027c6:	462b      	mov	r3, r5
 80027c8:	460a      	mov	r2, r1
 80027ca:	eb42 0303 	adc.w	r3, r2, r3
 80027ce:	637b      	str	r3, [r7, #52]	; 0x34
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027dc:	4629      	mov	r1, r5
 80027de:	024b      	lsls	r3, r1, #9
 80027e0:	4621      	mov	r1, r4
 80027e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027e6:	4621      	mov	r1, r4
 80027e8:	024a      	lsls	r2, r1, #9
 80027ea:	4610      	mov	r0, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027f2:	2200      	movs	r2, #0
 80027f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80027fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002800:	f7fd fd56 	bl	80002b0 <__aeabi_uldivmod>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4613      	mov	r3, r2
 800280a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800280e:	e067      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002810:	4b75      	ldr	r3, [pc, #468]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	099b      	lsrs	r3, r3, #6
 8002816:	2200      	movs	r2, #0
 8002818:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800281c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002820:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002828:	67bb      	str	r3, [r7, #120]	; 0x78
 800282a:	2300      	movs	r3, #0
 800282c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800282e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002832:	4622      	mov	r2, r4
 8002834:	462b      	mov	r3, r5
 8002836:	f04f 0000 	mov.w	r0, #0
 800283a:	f04f 0100 	mov.w	r1, #0
 800283e:	0159      	lsls	r1, r3, #5
 8002840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002844:	0150      	lsls	r0, r2, #5
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4621      	mov	r1, r4
 800284c:	1a51      	subs	r1, r2, r1
 800284e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002850:	4629      	mov	r1, r5
 8002852:	eb63 0301 	sbc.w	r3, r3, r1
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002864:	4649      	mov	r1, r9
 8002866:	018b      	lsls	r3, r1, #6
 8002868:	4641      	mov	r1, r8
 800286a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800286e:	4641      	mov	r1, r8
 8002870:	018a      	lsls	r2, r1, #6
 8002872:	4641      	mov	r1, r8
 8002874:	ebb2 0a01 	subs.w	sl, r2, r1
 8002878:	4649      	mov	r1, r9
 800287a:	eb63 0b01 	sbc.w	fp, r3, r1
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800288a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800288e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002892:	4692      	mov	sl, r2
 8002894:	469b      	mov	fp, r3
 8002896:	4623      	mov	r3, r4
 8002898:	eb1a 0303 	adds.w	r3, sl, r3
 800289c:	623b      	str	r3, [r7, #32]
 800289e:	462b      	mov	r3, r5
 80028a0:	eb4b 0303 	adc.w	r3, fp, r3
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80028b2:	4629      	mov	r1, r5
 80028b4:	028b      	lsls	r3, r1, #10
 80028b6:	4621      	mov	r1, r4
 80028b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028bc:	4621      	mov	r1, r4
 80028be:	028a      	lsls	r2, r1, #10
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028c8:	2200      	movs	r2, #0
 80028ca:	673b      	str	r3, [r7, #112]	; 0x70
 80028cc:	677a      	str	r2, [r7, #116]	; 0x74
 80028ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80028d2:	f7fd fced 	bl	80002b0 <__aeabi_uldivmod>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4613      	mov	r3, r2
 80028dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028e0:	4b41      	ldr	r3, [pc, #260]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	0c1b      	lsrs	r3, r3, #16
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	3301      	adds	r3, #1
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80028f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002902:	e0eb      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002904:	4b38      	ldr	r3, [pc, #224]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800290c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002910:	4b35      	ldr	r3, [pc, #212]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d06b      	beq.n	80029f4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291c:	4b32      	ldr	r3, [pc, #200]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	099b      	lsrs	r3, r3, #6
 8002922:	2200      	movs	r2, #0
 8002924:	66bb      	str	r3, [r7, #104]	; 0x68
 8002926:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002928:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800292a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800292e:	663b      	str	r3, [r7, #96]	; 0x60
 8002930:	2300      	movs	r3, #0
 8002932:	667b      	str	r3, [r7, #100]	; 0x64
 8002934:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002938:	4622      	mov	r2, r4
 800293a:	462b      	mov	r3, r5
 800293c:	f04f 0000 	mov.w	r0, #0
 8002940:	f04f 0100 	mov.w	r1, #0
 8002944:	0159      	lsls	r1, r3, #5
 8002946:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800294a:	0150      	lsls	r0, r2, #5
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4621      	mov	r1, r4
 8002952:	1a51      	subs	r1, r2, r1
 8002954:	61b9      	str	r1, [r7, #24]
 8002956:	4629      	mov	r1, r5
 8002958:	eb63 0301 	sbc.w	r3, r3, r1
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800296a:	4659      	mov	r1, fp
 800296c:	018b      	lsls	r3, r1, #6
 800296e:	4651      	mov	r1, sl
 8002970:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002974:	4651      	mov	r1, sl
 8002976:	018a      	lsls	r2, r1, #6
 8002978:	4651      	mov	r1, sl
 800297a:	ebb2 0801 	subs.w	r8, r2, r1
 800297e:	4659      	mov	r1, fp
 8002980:	eb63 0901 	sbc.w	r9, r3, r1
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002990:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002994:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002998:	4690      	mov	r8, r2
 800299a:	4699      	mov	r9, r3
 800299c:	4623      	mov	r3, r4
 800299e:	eb18 0303 	adds.w	r3, r8, r3
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	462b      	mov	r3, r5
 80029a6:	eb49 0303 	adc.w	r3, r9, r3
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80029b8:	4629      	mov	r1, r5
 80029ba:	024b      	lsls	r3, r1, #9
 80029bc:	4621      	mov	r1, r4
 80029be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029c2:	4621      	mov	r1, r4
 80029c4:	024a      	lsls	r2, r1, #9
 80029c6:	4610      	mov	r0, r2
 80029c8:	4619      	mov	r1, r3
 80029ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029ce:	2200      	movs	r2, #0
 80029d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80029d2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80029d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029d8:	f7fd fc6a 	bl	80002b0 <__aeabi_uldivmod>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4613      	mov	r3, r2
 80029e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029e6:	e065      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x420>
 80029e8:	40023800 	.word	0x40023800
 80029ec:	00f42400 	.word	0x00f42400
 80029f0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f4:	4b3d      	ldr	r3, [pc, #244]	; (8002aec <HAL_RCC_GetSysClockFreq+0x458>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	099b      	lsrs	r3, r3, #6
 80029fa:	2200      	movs	r2, #0
 80029fc:	4618      	mov	r0, r3
 80029fe:	4611      	mov	r1, r2
 8002a00:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a04:	653b      	str	r3, [r7, #80]	; 0x50
 8002a06:	2300      	movs	r3, #0
 8002a08:	657b      	str	r3, [r7, #84]	; 0x54
 8002a0a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002a0e:	4642      	mov	r2, r8
 8002a10:	464b      	mov	r3, r9
 8002a12:	f04f 0000 	mov.w	r0, #0
 8002a16:	f04f 0100 	mov.w	r1, #0
 8002a1a:	0159      	lsls	r1, r3, #5
 8002a1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a20:	0150      	lsls	r0, r2, #5
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4641      	mov	r1, r8
 8002a28:	1a51      	subs	r1, r2, r1
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	4649      	mov	r1, r9
 8002a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002a40:	4659      	mov	r1, fp
 8002a42:	018b      	lsls	r3, r1, #6
 8002a44:	4651      	mov	r1, sl
 8002a46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a4a:	4651      	mov	r1, sl
 8002a4c:	018a      	lsls	r2, r1, #6
 8002a4e:	4651      	mov	r1, sl
 8002a50:	1a54      	subs	r4, r2, r1
 8002a52:	4659      	mov	r1, fp
 8002a54:	eb63 0501 	sbc.w	r5, r3, r1
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	00eb      	lsls	r3, r5, #3
 8002a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a66:	00e2      	lsls	r2, r4, #3
 8002a68:	4614      	mov	r4, r2
 8002a6a:	461d      	mov	r5, r3
 8002a6c:	4643      	mov	r3, r8
 8002a6e:	18e3      	adds	r3, r4, r3
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	464b      	mov	r3, r9
 8002a74:	eb45 0303 	adc.w	r3, r5, r3
 8002a78:	607b      	str	r3, [r7, #4]
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a86:	4629      	mov	r1, r5
 8002a88:	028b      	lsls	r3, r1, #10
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a90:	4621      	mov	r1, r4
 8002a92:	028a      	lsls	r2, r1, #10
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002aa0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002aa2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002aa6:	f7fd fc03 	bl	80002b0 <__aeabi_uldivmod>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4613      	mov	r3, r2
 8002ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ab4:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <HAL_RCC_GetSysClockFreq+0x458>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	0f1b      	lsrs	r3, r3, #28
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002ac2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ac6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ace:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ad2:	e003      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ada:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002adc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	37b8      	adds	r7, #184	; 0xb8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aea:	bf00      	nop
 8002aec:	40023800 	.word	0x40023800
 8002af0:	00f42400 	.word	0x00f42400

08002af4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e28d      	b.n	8003022 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8083 	beq.w	8002c1a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b14:	4b94      	ldr	r3, [pc, #592]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 030c 	and.w	r3, r3, #12
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d019      	beq.n	8002b54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b20:	4b91      	ldr	r3, [pc, #580]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d106      	bne.n	8002b3a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b2c:	4b8e      	ldr	r3, [pc, #568]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b38:	d00c      	beq.n	8002b54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b3a:	4b8b      	ldr	r3, [pc, #556]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b42:	2b0c      	cmp	r3, #12
 8002b44:	d112      	bne.n	8002b6c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b46:	4b88      	ldr	r3, [pc, #544]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b52:	d10b      	bne.n	8002b6c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b54:	4b84      	ldr	r3, [pc, #528]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d05b      	beq.n	8002c18 <HAL_RCC_OscConfig+0x124>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d157      	bne.n	8002c18 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e25a      	b.n	8003022 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b74:	d106      	bne.n	8002b84 <HAL_RCC_OscConfig+0x90>
 8002b76:	4b7c      	ldr	r3, [pc, #496]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a7b      	ldr	r2, [pc, #492]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	e01d      	b.n	8002bc0 <HAL_RCC_OscConfig+0xcc>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b8c:	d10c      	bne.n	8002ba8 <HAL_RCC_OscConfig+0xb4>
 8002b8e:	4b76      	ldr	r3, [pc, #472]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a75      	ldr	r2, [pc, #468]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	4b73      	ldr	r3, [pc, #460]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a72      	ldr	r2, [pc, #456]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e00b      	b.n	8002bc0 <HAL_RCC_OscConfig+0xcc>
 8002ba8:	4b6f      	ldr	r3, [pc, #444]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a6e      	ldr	r2, [pc, #440]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	4b6c      	ldr	r3, [pc, #432]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a6b      	ldr	r2, [pc, #428]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d013      	beq.n	8002bf0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7ff f898 	bl	8001cfc <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bd0:	f7ff f894 	bl	8001cfc <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	; 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e21f      	b.n	8003022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be2:	4b61      	ldr	r3, [pc, #388]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0xdc>
 8002bee:	e014      	b.n	8002c1a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7ff f884 	bl	8001cfc <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7ff f880 	bl	8001cfc <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	; 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e20b      	b.n	8003022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0a:	4b57      	ldr	r3, [pc, #348]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x104>
 8002c16:	e000      	b.n	8002c1a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d06f      	beq.n	8002d06 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c26:	4b50      	ldr	r3, [pc, #320]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d017      	beq.n	8002c62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c32:	4b4d      	ldr	r3, [pc, #308]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d105      	bne.n	8002c4a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c3e:	4b4a      	ldr	r3, [pc, #296]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00b      	beq.n	8002c62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c4a:	4b47      	ldr	r3, [pc, #284]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c52:	2b0c      	cmp	r3, #12
 8002c54:	d11c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c56:	4b44      	ldr	r3, [pc, #272]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d116      	bne.n	8002c90 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c62:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_RCC_OscConfig+0x186>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d001      	beq.n	8002c7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e1d3      	b.n	8003022 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7a:	4b3b      	ldr	r3, [pc, #236]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4937      	ldr	r1, [pc, #220]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8e:	e03a      	b.n	8002d06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d020      	beq.n	8002cda <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c98:	4b34      	ldr	r3, [pc, #208]	; (8002d6c <HAL_RCC_OscConfig+0x278>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9e:	f7ff f82d 	bl	8001cfc <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca6:	f7ff f829 	bl	8001cfc <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e1b4      	b.n	8003022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb8:	4b2b      	ldr	r3, [pc, #172]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc4:	4b28      	ldr	r3, [pc, #160]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4925      	ldr	r1, [pc, #148]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	600b      	str	r3, [r1, #0]
 8002cd8:	e015      	b.n	8002d06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cda:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <HAL_RCC_OscConfig+0x278>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7ff f80c 	bl	8001cfc <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce8:	f7ff f808 	bl	8001cfc <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e193      	b.n	8003022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfa:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d036      	beq.n	8002d80 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d016      	beq.n	8002d48 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d1a:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <HAL_RCC_OscConfig+0x27c>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d20:	f7fe ffec 	bl	8001cfc <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d28:	f7fe ffe8 	bl	8001cfc <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e173      	b.n	8003022 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x234>
 8002d46:	e01b      	b.n	8002d80 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d48:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <HAL_RCC_OscConfig+0x27c>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7fe ffd5 	bl	8001cfc <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d54:	e00e      	b.n	8002d74 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d56:	f7fe ffd1 	bl	8001cfc <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d907      	bls.n	8002d74 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e15c      	b.n	8003022 <HAL_RCC_OscConfig+0x52e>
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	42470000 	.word	0x42470000
 8002d70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d74:	4b8a      	ldr	r3, [pc, #552]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1ea      	bne.n	8002d56 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8097 	beq.w	8002ebc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d92:	4b83      	ldr	r3, [pc, #524]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10f      	bne.n	8002dbe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	4b7f      	ldr	r3, [pc, #508]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	4a7e      	ldr	r2, [pc, #504]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dac:	6413      	str	r3, [r2, #64]	; 0x40
 8002dae:	4b7c      	ldr	r3, [pc, #496]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbe:	4b79      	ldr	r3, [pc, #484]	; (8002fa4 <HAL_RCC_OscConfig+0x4b0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d118      	bne.n	8002dfc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dca:	4b76      	ldr	r3, [pc, #472]	; (8002fa4 <HAL_RCC_OscConfig+0x4b0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a75      	ldr	r2, [pc, #468]	; (8002fa4 <HAL_RCC_OscConfig+0x4b0>)
 8002dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd6:	f7fe ff91 	bl	8001cfc <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dde:	f7fe ff8d 	bl	8001cfc <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e118      	b.n	8003022 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df0:	4b6c      	ldr	r3, [pc, #432]	; (8002fa4 <HAL_RCC_OscConfig+0x4b0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d106      	bne.n	8002e12 <HAL_RCC_OscConfig+0x31e>
 8002e04:	4b66      	ldr	r3, [pc, #408]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	4a65      	ldr	r2, [pc, #404]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e10:	e01c      	b.n	8002e4c <HAL_RCC_OscConfig+0x358>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b05      	cmp	r3, #5
 8002e18:	d10c      	bne.n	8002e34 <HAL_RCC_OscConfig+0x340>
 8002e1a:	4b61      	ldr	r3, [pc, #388]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1e:	4a60      	ldr	r2, [pc, #384]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002e20:	f043 0304 	orr.w	r3, r3, #4
 8002e24:	6713      	str	r3, [r2, #112]	; 0x70
 8002e26:	4b5e      	ldr	r3, [pc, #376]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	4a5d      	ldr	r2, [pc, #372]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	6713      	str	r3, [r2, #112]	; 0x70
 8002e32:	e00b      	b.n	8002e4c <HAL_RCC_OscConfig+0x358>
 8002e34:	4b5a      	ldr	r3, [pc, #360]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	4a59      	ldr	r2, [pc, #356]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002e3a:	f023 0301 	bic.w	r3, r3, #1
 8002e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e40:	4b57      	ldr	r3, [pc, #348]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	4a56      	ldr	r2, [pc, #344]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002e46:	f023 0304 	bic.w	r3, r3, #4
 8002e4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d015      	beq.n	8002e80 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e54:	f7fe ff52 	bl	8001cfc <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e5c:	f7fe ff4e 	bl	8001cfc <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e0d7      	b.n	8003022 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e72:	4b4b      	ldr	r3, [pc, #300]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0ee      	beq.n	8002e5c <HAL_RCC_OscConfig+0x368>
 8002e7e:	e014      	b.n	8002eaa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e80:	f7fe ff3c 	bl	8001cfc <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e86:	e00a      	b.n	8002e9e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e88:	f7fe ff38 	bl	8001cfc <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e0c1      	b.n	8003022 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e9e:	4b40      	ldr	r3, [pc, #256]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1ee      	bne.n	8002e88 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eaa:	7dfb      	ldrb	r3, [r7, #23]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d105      	bne.n	8002ebc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb0:	4b3b      	ldr	r3, [pc, #236]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	4a3a      	ldr	r2, [pc, #232]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80ad 	beq.w	8003020 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ec6:	4b36      	ldr	r3, [pc, #216]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d060      	beq.n	8002f94 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d145      	bne.n	8002f66 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eda:	4b33      	ldr	r3, [pc, #204]	; (8002fa8 <HAL_RCC_OscConfig+0x4b4>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe ff0c 	bl	8001cfc <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee8:	f7fe ff08 	bl	8001cfc <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e093      	b.n	8003022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efa:	4b29      	ldr	r3, [pc, #164]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69da      	ldr	r2, [r3, #28]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	019b      	lsls	r3, r3, #6
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	085b      	lsrs	r3, r3, #1
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	041b      	lsls	r3, r3, #16
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	061b      	lsls	r3, r3, #24
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	071b      	lsls	r3, r3, #28
 8002f32:	491b      	ldr	r1, [pc, #108]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f38:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <HAL_RCC_OscConfig+0x4b4>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3e:	f7fe fedd 	bl	8001cfc <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f46:	f7fe fed9 	bl	8001cfc <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e064      	b.n	8003022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x452>
 8002f64:	e05c      	b.n	8003020 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <HAL_RCC_OscConfig+0x4b4>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fec6 	bl	8001cfc <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f74:	f7fe fec2 	bl	8001cfc <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e04d      	b.n	8003022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <HAL_RCC_OscConfig+0x4ac>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x480>
 8002f92:	e045      	b.n	8003020 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d107      	bne.n	8002fac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e040      	b.n	8003022 <HAL_RCC_OscConfig+0x52e>
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40007000 	.word	0x40007000
 8002fa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fac:	4b1f      	ldr	r3, [pc, #124]	; (800302c <HAL_RCC_OscConfig+0x538>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d030      	beq.n	800301c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d129      	bne.n	800301c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d122      	bne.n	800301c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fdc:	4013      	ands	r3, r2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fe2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d119      	bne.n	800301c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	085b      	lsrs	r3, r3, #1
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d10f      	bne.n	800301c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d107      	bne.n	800301c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800

08003030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e041      	b.n	80030c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fe fc2a 	bl	80018b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3304      	adds	r3, #4
 800306c:	4619      	mov	r1, r3
 800306e:	4610      	mov	r0, r2
 8003070:	f000 fbf0 	bl	8003854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e041      	b.n	8003164 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d106      	bne.n	80030fa <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f839 	bl	800316c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2202      	movs	r2, #2
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3304      	adds	r3, #4
 800310a:	4619      	mov	r1, r3
 800310c:	4610      	mov	r0, r2
 800310e:	f000 fba1 	bl	8003854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800318a:	2300      	movs	r3, #0
 800318c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d109      	bne.n	80031a8 <HAL_TIM_OC_Start_IT+0x28>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b01      	cmp	r3, #1
 800319e:	bf14      	ite	ne
 80031a0:	2301      	movne	r3, #1
 80031a2:	2300      	moveq	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	e022      	b.n	80031ee <HAL_TIM_OC_Start_IT+0x6e>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d109      	bne.n	80031c2 <HAL_TIM_OC_Start_IT+0x42>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	bf14      	ite	ne
 80031ba:	2301      	movne	r3, #1
 80031bc:	2300      	moveq	r3, #0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	e015      	b.n	80031ee <HAL_TIM_OC_Start_IT+0x6e>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d109      	bne.n	80031dc <HAL_TIM_OC_Start_IT+0x5c>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	bf14      	ite	ne
 80031d4:	2301      	movne	r3, #1
 80031d6:	2300      	moveq	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	e008      	b.n	80031ee <HAL_TIM_OC_Start_IT+0x6e>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	bf14      	ite	ne
 80031e8:	2301      	movne	r3, #1
 80031ea:	2300      	moveq	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e0c7      	b.n	8003386 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d104      	bne.n	8003206 <HAL_TIM_OC_Start_IT+0x86>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003204:	e013      	b.n	800322e <HAL_TIM_OC_Start_IT+0xae>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b04      	cmp	r3, #4
 800320a:	d104      	bne.n	8003216 <HAL_TIM_OC_Start_IT+0x96>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003214:	e00b      	b.n	800322e <HAL_TIM_OC_Start_IT+0xae>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b08      	cmp	r3, #8
 800321a:	d104      	bne.n	8003226 <HAL_TIM_OC_Start_IT+0xa6>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003224:	e003      	b.n	800322e <HAL_TIM_OC_Start_IT+0xae>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2202      	movs	r2, #2
 800322a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b0c      	cmp	r3, #12
 8003232:	d841      	bhi.n	80032b8 <HAL_TIM_OC_Start_IT+0x138>
 8003234:	a201      	add	r2, pc, #4	; (adr r2, 800323c <HAL_TIM_OC_Start_IT+0xbc>)
 8003236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323a:	bf00      	nop
 800323c:	08003271 	.word	0x08003271
 8003240:	080032b9 	.word	0x080032b9
 8003244:	080032b9 	.word	0x080032b9
 8003248:	080032b9 	.word	0x080032b9
 800324c:	08003283 	.word	0x08003283
 8003250:	080032b9 	.word	0x080032b9
 8003254:	080032b9 	.word	0x080032b9
 8003258:	080032b9 	.word	0x080032b9
 800325c:	08003295 	.word	0x08003295
 8003260:	080032b9 	.word	0x080032b9
 8003264:	080032b9 	.word	0x080032b9
 8003268:	080032b9 	.word	0x080032b9
 800326c:	080032a7 	.word	0x080032a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0202 	orr.w	r2, r2, #2
 800327e:	60da      	str	r2, [r3, #12]
      break;
 8003280:	e01d      	b.n	80032be <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 0204 	orr.w	r2, r2, #4
 8003290:	60da      	str	r2, [r3, #12]
      break;
 8003292:	e014      	b.n	80032be <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0208 	orr.w	r2, r2, #8
 80032a2:	60da      	str	r2, [r3, #12]
      break;
 80032a4:	e00b      	b.n	80032be <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f042 0210 	orr.w	r2, r2, #16
 80032b4:	60da      	str	r2, [r3, #12]
      break;
 80032b6:	e002      	b.n	80032be <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
      break;
 80032bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d15f      	bne.n	8003384 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2201      	movs	r2, #1
 80032ca:	6839      	ldr	r1, [r7, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fdab 	bl	8003e28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a2e      	ldr	r2, [pc, #184]	; (8003390 <HAL_TIM_OC_Start_IT+0x210>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d004      	beq.n	80032e6 <HAL_TIM_OC_Start_IT+0x166>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a2c      	ldr	r2, [pc, #176]	; (8003394 <HAL_TIM_OC_Start_IT+0x214>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d101      	bne.n	80032ea <HAL_TIM_OC_Start_IT+0x16a>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <HAL_TIM_OC_Start_IT+0x16c>
 80032ea:	2300      	movs	r3, #0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d007      	beq.n	8003300 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032fe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a22      	ldr	r2, [pc, #136]	; (8003390 <HAL_TIM_OC_Start_IT+0x210>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d022      	beq.n	8003350 <HAL_TIM_OC_Start_IT+0x1d0>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003312:	d01d      	beq.n	8003350 <HAL_TIM_OC_Start_IT+0x1d0>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1f      	ldr	r2, [pc, #124]	; (8003398 <HAL_TIM_OC_Start_IT+0x218>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d018      	beq.n	8003350 <HAL_TIM_OC_Start_IT+0x1d0>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1e      	ldr	r2, [pc, #120]	; (800339c <HAL_TIM_OC_Start_IT+0x21c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d013      	beq.n	8003350 <HAL_TIM_OC_Start_IT+0x1d0>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1c      	ldr	r2, [pc, #112]	; (80033a0 <HAL_TIM_OC_Start_IT+0x220>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00e      	beq.n	8003350 <HAL_TIM_OC_Start_IT+0x1d0>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a17      	ldr	r2, [pc, #92]	; (8003394 <HAL_TIM_OC_Start_IT+0x214>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d009      	beq.n	8003350 <HAL_TIM_OC_Start_IT+0x1d0>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <HAL_TIM_OC_Start_IT+0x224>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d004      	beq.n	8003350 <HAL_TIM_OC_Start_IT+0x1d0>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a17      	ldr	r2, [pc, #92]	; (80033a8 <HAL_TIM_OC_Start_IT+0x228>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d111      	bne.n	8003374 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b06      	cmp	r3, #6
 8003360:	d010      	beq.n	8003384 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003372:	e007      	b.n	8003384 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003384:	7bfb      	ldrb	r3, [r7, #15]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40010000 	.word	0x40010000
 8003394:	40010400 	.word	0x40010400
 8003398:	40000400 	.word	0x40000400
 800339c:	40000800 	.word	0x40000800
 80033a0:	40000c00 	.word	0x40000c00
 80033a4:	40014000 	.word	0x40014000
 80033a8:	40001800 	.word	0x40001800

080033ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d122      	bne.n	8003408 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d11b      	bne.n	8003408 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0202 	mvn.w	r2, #2
 80033d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fa11 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 80033f4:	e005      	b.n	8003402 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fd faca 	bl	8000990 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fa14 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b04      	cmp	r3, #4
 8003414:	d122      	bne.n	800345c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b04      	cmp	r3, #4
 8003422:	d11b      	bne.n	800345c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0204 	mvn.w	r2, #4
 800342c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2202      	movs	r2, #2
 8003432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f9e7 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 8003448:	e005      	b.n	8003456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7fd faa0 	bl	8000990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f9ea 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b08      	cmp	r3, #8
 8003468:	d122      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	2b08      	cmp	r3, #8
 8003476:	d11b      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0208 	mvn.w	r2, #8
 8003480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2204      	movs	r2, #4
 8003486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f9bd 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 800349c:	e005      	b.n	80034aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fd fa76 	bl	8000990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f9c0 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 0310 	and.w	r3, r3, #16
 80034ba:	2b10      	cmp	r3, #16
 80034bc:	d122      	bne.n	8003504 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b10      	cmp	r3, #16
 80034ca:	d11b      	bne.n	8003504 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0210 	mvn.w	r2, #16
 80034d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2208      	movs	r2, #8
 80034da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f993 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 80034f0:	e005      	b.n	80034fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7fd fa4c 	bl	8000990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f996 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b01      	cmp	r3, #1
 8003510:	d10e      	bne.n	8003530 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b01      	cmp	r3, #1
 800351e:	d107      	bne.n	8003530 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0201 	mvn.w	r2, #1
 8003528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f969 	bl	8003802 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353a:	2b80      	cmp	r3, #128	; 0x80
 800353c:	d10e      	bne.n	800355c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003548:	2b80      	cmp	r3, #128	; 0x80
 800354a:	d107      	bne.n	800355c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 fd12 	bl	8003f80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003566:	2b40      	cmp	r3, #64	; 0x40
 8003568:	d10e      	bne.n	8003588 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003574:	2b40      	cmp	r3, #64	; 0x40
 8003576:	d107      	bne.n	8003588 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f95b 	bl	800383e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0320 	and.w	r3, r3, #32
 8003592:	2b20      	cmp	r3, #32
 8003594:	d10e      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d107      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0220 	mvn.w	r2, #32
 80035ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fcdc 	bl	8003f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_TIM_OC_ConfigChannel+0x1e>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e048      	b.n	800366c <HAL_TIM_OC_ConfigChannel+0xb0>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b0c      	cmp	r3, #12
 80035e6:	d839      	bhi.n	800365c <HAL_TIM_OC_ConfigChannel+0xa0>
 80035e8:	a201      	add	r2, pc, #4	; (adr r2, 80035f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80035ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ee:	bf00      	nop
 80035f0:	08003625 	.word	0x08003625
 80035f4:	0800365d 	.word	0x0800365d
 80035f8:	0800365d 	.word	0x0800365d
 80035fc:	0800365d 	.word	0x0800365d
 8003600:	08003633 	.word	0x08003633
 8003604:	0800365d 	.word	0x0800365d
 8003608:	0800365d 	.word	0x0800365d
 800360c:	0800365d 	.word	0x0800365d
 8003610:	08003641 	.word	0x08003641
 8003614:	0800365d 	.word	0x0800365d
 8003618:	0800365d 	.word	0x0800365d
 800361c:	0800365d 	.word	0x0800365d
 8003620:	0800364f 	.word	0x0800364f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f9b2 	bl	8003994 <TIM_OC1_SetConfig>
      break;
 8003630:	e017      	b.n	8003662 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fa1b 	bl	8003a74 <TIM_OC2_SetConfig>
      break;
 800363e:	e010      	b.n	8003662 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fa8a 	bl	8003b60 <TIM_OC3_SetConfig>
      break;
 800364c:	e009      	b.n	8003662 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	4618      	mov	r0, r3
 8003656:	f000 faf7 	bl	8003c48 <TIM_OC4_SetConfig>
      break;
 800365a:	e002      	b.n	8003662 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	75fb      	strb	r3, [r7, #23]
      break;
 8003660:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800366a:	7dfb      	ldrb	r3, [r7, #23]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_TIM_ConfigClockSource+0x1c>
 800368c:	2302      	movs	r3, #2
 800368e:	e0b4      	b.n	80037fa <HAL_TIM_ConfigClockSource+0x186>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c8:	d03e      	beq.n	8003748 <HAL_TIM_ConfigClockSource+0xd4>
 80036ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ce:	f200 8087 	bhi.w	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d6:	f000 8086 	beq.w	80037e6 <HAL_TIM_ConfigClockSource+0x172>
 80036da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036de:	d87f      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036e0:	2b70      	cmp	r3, #112	; 0x70
 80036e2:	d01a      	beq.n	800371a <HAL_TIM_ConfigClockSource+0xa6>
 80036e4:	2b70      	cmp	r3, #112	; 0x70
 80036e6:	d87b      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036e8:	2b60      	cmp	r3, #96	; 0x60
 80036ea:	d050      	beq.n	800378e <HAL_TIM_ConfigClockSource+0x11a>
 80036ec:	2b60      	cmp	r3, #96	; 0x60
 80036ee:	d877      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036f0:	2b50      	cmp	r3, #80	; 0x50
 80036f2:	d03c      	beq.n	800376e <HAL_TIM_ConfigClockSource+0xfa>
 80036f4:	2b50      	cmp	r3, #80	; 0x50
 80036f6:	d873      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036f8:	2b40      	cmp	r3, #64	; 0x40
 80036fa:	d058      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0x13a>
 80036fc:	2b40      	cmp	r3, #64	; 0x40
 80036fe:	d86f      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003700:	2b30      	cmp	r3, #48	; 0x30
 8003702:	d064      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 8003704:	2b30      	cmp	r3, #48	; 0x30
 8003706:	d86b      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003708:	2b20      	cmp	r3, #32
 800370a:	d060      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 800370c:	2b20      	cmp	r3, #32
 800370e:	d867      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003710:	2b00      	cmp	r3, #0
 8003712:	d05c      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 8003714:	2b10      	cmp	r3, #16
 8003716:	d05a      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 8003718:	e062      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6899      	ldr	r1, [r3, #8]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f000 fb5d 	bl	8003de8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800373c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	609a      	str	r2, [r3, #8]
      break;
 8003746:	e04f      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	6899      	ldr	r1, [r3, #8]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f000 fb46 	bl	8003de8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800376a:	609a      	str	r2, [r3, #8]
      break;
 800376c:	e03c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6859      	ldr	r1, [r3, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	461a      	mov	r2, r3
 800377c:	f000 faba 	bl	8003cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2150      	movs	r1, #80	; 0x50
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fb13 	bl	8003db2 <TIM_ITRx_SetConfig>
      break;
 800378c:	e02c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6859      	ldr	r1, [r3, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	461a      	mov	r2, r3
 800379c:	f000 fad9 	bl	8003d52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2160      	movs	r1, #96	; 0x60
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fb03 	bl	8003db2 <TIM_ITRx_SetConfig>
      break;
 80037ac:	e01c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6859      	ldr	r1, [r3, #4]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	461a      	mov	r2, r3
 80037bc:	f000 fa9a 	bl	8003cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2140      	movs	r1, #64	; 0x40
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 faf3 	bl	8003db2 <TIM_ITRx_SetConfig>
      break;
 80037cc:	e00c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4619      	mov	r1, r3
 80037d8:	4610      	mov	r0, r2
 80037da:	f000 faea 	bl	8003db2 <TIM_ITRx_SetConfig>
      break;
 80037de:	e003      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
      break;
 80037e4:	e000      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a40      	ldr	r2, [pc, #256]	; (8003968 <TIM_Base_SetConfig+0x114>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d013      	beq.n	8003894 <TIM_Base_SetConfig+0x40>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003872:	d00f      	beq.n	8003894 <TIM_Base_SetConfig+0x40>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a3d      	ldr	r2, [pc, #244]	; (800396c <TIM_Base_SetConfig+0x118>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00b      	beq.n	8003894 <TIM_Base_SetConfig+0x40>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a3c      	ldr	r2, [pc, #240]	; (8003970 <TIM_Base_SetConfig+0x11c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d007      	beq.n	8003894 <TIM_Base_SetConfig+0x40>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a3b      	ldr	r2, [pc, #236]	; (8003974 <TIM_Base_SetConfig+0x120>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d003      	beq.n	8003894 <TIM_Base_SetConfig+0x40>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a3a      	ldr	r2, [pc, #232]	; (8003978 <TIM_Base_SetConfig+0x124>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d108      	bne.n	80038a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a2f      	ldr	r2, [pc, #188]	; (8003968 <TIM_Base_SetConfig+0x114>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d02b      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b4:	d027      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a2c      	ldr	r2, [pc, #176]	; (800396c <TIM_Base_SetConfig+0x118>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d023      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a2b      	ldr	r2, [pc, #172]	; (8003970 <TIM_Base_SetConfig+0x11c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d01f      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a2a      	ldr	r2, [pc, #168]	; (8003974 <TIM_Base_SetConfig+0x120>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d01b      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a29      	ldr	r2, [pc, #164]	; (8003978 <TIM_Base_SetConfig+0x124>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d017      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a28      	ldr	r2, [pc, #160]	; (800397c <TIM_Base_SetConfig+0x128>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a27      	ldr	r2, [pc, #156]	; (8003980 <TIM_Base_SetConfig+0x12c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00f      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a26      	ldr	r2, [pc, #152]	; (8003984 <TIM_Base_SetConfig+0x130>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00b      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a25      	ldr	r2, [pc, #148]	; (8003988 <TIM_Base_SetConfig+0x134>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d007      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a24      	ldr	r2, [pc, #144]	; (800398c <TIM_Base_SetConfig+0x138>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d003      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a23      	ldr	r2, [pc, #140]	; (8003990 <TIM_Base_SetConfig+0x13c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d108      	bne.n	8003918 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800390c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <TIM_Base_SetConfig+0x114>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d003      	beq.n	800394c <TIM_Base_SetConfig+0xf8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a0c      	ldr	r2, [pc, #48]	; (8003978 <TIM_Base_SetConfig+0x124>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d103      	bne.n	8003954 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	615a      	str	r2, [r3, #20]
}
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40010000 	.word	0x40010000
 800396c:	40000400 	.word	0x40000400
 8003970:	40000800 	.word	0x40000800
 8003974:	40000c00 	.word	0x40000c00
 8003978:	40010400 	.word	0x40010400
 800397c:	40014000 	.word	0x40014000
 8003980:	40014400 	.word	0x40014400
 8003984:	40014800 	.word	0x40014800
 8003988:	40001800 	.word	0x40001800
 800398c:	40001c00 	.word	0x40001c00
 8003990:	40002000 	.word	0x40002000

08003994 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	f023 0201 	bic.w	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0303 	bic.w	r3, r3, #3
 80039ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f023 0302 	bic.w	r3, r3, #2
 80039dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a20      	ldr	r2, [pc, #128]	; (8003a6c <TIM_OC1_SetConfig+0xd8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d003      	beq.n	80039f8 <TIM_OC1_SetConfig+0x64>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a1f      	ldr	r2, [pc, #124]	; (8003a70 <TIM_OC1_SetConfig+0xdc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d10c      	bne.n	8003a12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f023 0308 	bic.w	r3, r3, #8
 80039fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f023 0304 	bic.w	r3, r3, #4
 8003a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a15      	ldr	r2, [pc, #84]	; (8003a6c <TIM_OC1_SetConfig+0xd8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d003      	beq.n	8003a22 <TIM_OC1_SetConfig+0x8e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a14      	ldr	r2, [pc, #80]	; (8003a70 <TIM_OC1_SetConfig+0xdc>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d111      	bne.n	8003a46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	621a      	str	r2, [r3, #32]
}
 8003a60:	bf00      	nop
 8003a62:	371c      	adds	r7, #28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	40010000 	.word	0x40010000
 8003a70:	40010400 	.word	0x40010400

08003a74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	f023 0210 	bic.w	r2, r3, #16
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f023 0320 	bic.w	r3, r3, #32
 8003abe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a22      	ldr	r2, [pc, #136]	; (8003b58 <TIM_OC2_SetConfig+0xe4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d003      	beq.n	8003adc <TIM_OC2_SetConfig+0x68>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a21      	ldr	r2, [pc, #132]	; (8003b5c <TIM_OC2_SetConfig+0xe8>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d10d      	bne.n	8003af8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a17      	ldr	r2, [pc, #92]	; (8003b58 <TIM_OC2_SetConfig+0xe4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d003      	beq.n	8003b08 <TIM_OC2_SetConfig+0x94>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a16      	ldr	r2, [pc, #88]	; (8003b5c <TIM_OC2_SetConfig+0xe8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d113      	bne.n	8003b30 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	621a      	str	r2, [r3, #32]
}
 8003b4a:	bf00      	nop
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40010000 	.word	0x40010000
 8003b5c:	40010400 	.word	0x40010400

08003b60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0303 	bic.w	r3, r3, #3
 8003b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a21      	ldr	r2, [pc, #132]	; (8003c40 <TIM_OC3_SetConfig+0xe0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d003      	beq.n	8003bc6 <TIM_OC3_SetConfig+0x66>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a20      	ldr	r2, [pc, #128]	; (8003c44 <TIM_OC3_SetConfig+0xe4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d10d      	bne.n	8003be2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	021b      	lsls	r3, r3, #8
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a16      	ldr	r2, [pc, #88]	; (8003c40 <TIM_OC3_SetConfig+0xe0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d003      	beq.n	8003bf2 <TIM_OC3_SetConfig+0x92>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a15      	ldr	r2, [pc, #84]	; (8003c44 <TIM_OC3_SetConfig+0xe4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d113      	bne.n	8003c1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	621a      	str	r2, [r3, #32]
}
 8003c34:	bf00      	nop
 8003c36:	371c      	adds	r7, #28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	40010000 	.word	0x40010000
 8003c44:	40010400 	.word	0x40010400

08003c48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	021b      	lsls	r3, r3, #8
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	031b      	lsls	r3, r3, #12
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a12      	ldr	r2, [pc, #72]	; (8003cec <TIM_OC4_SetConfig+0xa4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d003      	beq.n	8003cb0 <TIM_OC4_SetConfig+0x68>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a11      	ldr	r2, [pc, #68]	; (8003cf0 <TIM_OC4_SetConfig+0xa8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d109      	bne.n	8003cc4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	019b      	lsls	r3, r3, #6
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	621a      	str	r2, [r3, #32]
}
 8003cde:	bf00      	nop
 8003ce0:	371c      	adds	r7, #28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40010000 	.word	0x40010000
 8003cf0:	40010400 	.word	0x40010400

08003cf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	f023 0201 	bic.w	r2, r3, #1
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f023 030a 	bic.w	r3, r3, #10
 8003d30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	621a      	str	r2, [r3, #32]
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b087      	sub	sp, #28
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f023 0210 	bic.w	r2, r3, #16
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	031b      	lsls	r3, r3, #12
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	621a      	str	r2, [r3, #32]
}
 8003da6:	bf00      	nop
 8003da8:	371c      	adds	r7, #28
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b085      	sub	sp, #20
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f043 0307 	orr.w	r3, r3, #7
 8003dd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	609a      	str	r2, [r3, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	021a      	lsls	r2, r3, #8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	609a      	str	r2, [r3, #8]
}
 8003e1c:	bf00      	nop
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f003 031f 	and.w	r3, r3, #31
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a1a      	ldr	r2, [r3, #32]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a1a      	ldr	r2, [r3, #32]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e60:	431a      	orrs	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	621a      	str	r2, [r3, #32]
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e05a      	b.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a21      	ldr	r2, [pc, #132]	; (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d022      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed8:	d01d      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d018      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a1b      	ldr	r2, [pc, #108]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a1a      	ldr	r2, [pc, #104]	; (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00e      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a18      	ldr	r2, [pc, #96]	; (8003f60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d009      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a17      	ldr	r2, [pc, #92]	; (8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d004      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a15      	ldr	r2, [pc, #84]	; (8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d10c      	bne.n	8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40010000 	.word	0x40010000
 8003f54:	40000400 	.word	0x40000400
 8003f58:	40000800 	.word	0x40000800
 8003f5c:	40000c00 	.word	0x40000c00
 8003f60:	40010400 	.word	0x40010400
 8003f64:	40014000 	.word	0x40014000
 8003f68:	40001800 	.word	0x40001800

08003f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e03f      	b.n	8004026 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fd fca0 	bl	8001900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2224      	movs	r2, #36	; 0x24
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 ff83 	bl	8004ee4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695a      	ldr	r2, [r3, #20]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ffc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800400c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e047      	b.n	80040d0 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d106      	bne.n	800405a <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7fd fc53 	bl	8001900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2224      	movs	r2, #36	; 0x24
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004070:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 ff36 	bl	8004ee4 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004086:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695a      	ldr	r2, [r3, #20]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004096:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695a      	ldr	r2, [r3, #20]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0208 	orr.w	r2, r2, #8
 80040a6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040b6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08a      	sub	sp, #40	; 0x28
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	603b      	str	r3, [r7, #0]
 80040e4:	4613      	mov	r3, r2
 80040e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b20      	cmp	r3, #32
 80040f6:	d17c      	bne.n	80041f2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_UART_Transmit+0x2c>
 80040fe:	88fb      	ldrh	r3, [r7, #6]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e075      	b.n	80041f4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800410e:	2b01      	cmp	r3, #1
 8004110:	d101      	bne.n	8004116 <HAL_UART_Transmit+0x3e>
 8004112:	2302      	movs	r3, #2
 8004114:	e06e      	b.n	80041f4 <HAL_UART_Transmit+0x11c>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2221      	movs	r2, #33	; 0x21
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800412c:	f7fd fde6 	bl	8001cfc <HAL_GetTick>
 8004130:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	88fa      	ldrh	r2, [r7, #6]
 8004136:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	88fa      	ldrh	r2, [r7, #6]
 800413c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004146:	d108      	bne.n	800415a <HAL_UART_Transmit+0x82>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d104      	bne.n	800415a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004150:	2300      	movs	r3, #0
 8004152:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	61bb      	str	r3, [r7, #24]
 8004158:	e003      	b.n	8004162 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800415e:	2300      	movs	r3, #0
 8004160:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800416a:	e02a      	b.n	80041c2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2200      	movs	r2, #0
 8004174:	2180      	movs	r1, #128	; 0x80
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 fc6e 	bl	8004a58 <UART_WaitOnFlagUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e036      	b.n	80041f4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10b      	bne.n	80041a4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800419a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	3302      	adds	r3, #2
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	e007      	b.n	80041b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	781a      	ldrb	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	3301      	adds	r3, #1
 80041b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1cf      	bne.n	800416c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2200      	movs	r2, #0
 80041d4:	2140      	movs	r1, #64	; 0x40
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 fc3e 	bl	8004a58 <UART_WaitOnFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e006      	b.n	80041f4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	e000      	b.n	80041f4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041f2:	2302      	movs	r3, #2
  }
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3720      	adds	r7, #32
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b08a      	sub	sp, #40	; 0x28
 8004200:	af02      	add	r7, sp, #8
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	4613      	mov	r3, r2
 800420a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b20      	cmp	r3, #32
 800421a:	f040 808c 	bne.w	8004336 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <HAL_UART_Receive+0x2e>
 8004224:	88fb      	ldrh	r3, [r7, #6]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e084      	b.n	8004338 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_UART_Receive+0x40>
 8004238:	2302      	movs	r3, #2
 800423a:	e07d      	b.n	8004338 <HAL_UART_Receive+0x13c>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2222      	movs	r2, #34	; 0x22
 800424e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004258:	f7fd fd50 	bl	8001cfc <HAL_GetTick>
 800425c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	88fa      	ldrh	r2, [r7, #6]
 8004262:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	88fa      	ldrh	r2, [r7, #6]
 8004268:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004272:	d108      	bne.n	8004286 <HAL_UART_Receive+0x8a>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d104      	bne.n	8004286 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800427c:	2300      	movs	r3, #0
 800427e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	61bb      	str	r3, [r7, #24]
 8004284:	e003      	b.n	800428e <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800428a:	2300      	movs	r3, #0
 800428c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004296:	e043      	b.n	8004320 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2200      	movs	r2, #0
 80042a0:	2120      	movs	r1, #32
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fbd8 	bl	8004a58 <UART_WaitOnFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e042      	b.n	8004338 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10c      	bne.n	80042d2 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	3302      	adds	r3, #2
 80042ce:	61bb      	str	r3, [r7, #24]
 80042d0:	e01f      	b.n	8004312 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042da:	d007      	beq.n	80042ec <HAL_UART_Receive+0xf0>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10a      	bne.n	80042fa <HAL_UART_Receive+0xfe>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d106      	bne.n	80042fa <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	701a      	strb	r2, [r3, #0]
 80042f8:	e008      	b.n	800430c <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004306:	b2da      	uxtb	r2, r3
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	3301      	adds	r3, #1
 8004310:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004316:	b29b      	uxth	r3, r3
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1b6      	bne.n	8004298 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	e000      	b.n	8004338 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004336:	2302      	movs	r3, #2
  }
}
 8004338:	4618      	mov	r0, r3
 800433a:	3720      	adds	r7, #32
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	4613      	mov	r3, r2
 800434c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b20      	cmp	r3, #32
 8004358:	d130      	bne.n	80043bc <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <HAL_UART_Transmit_IT+0x26>
 8004360:	88fb      	ldrh	r3, [r7, #6]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e029      	b.n	80043be <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_UART_Transmit_IT+0x38>
 8004374:	2302      	movs	r3, #2
 8004376:	e022      	b.n	80043be <HAL_UART_Transmit_IT+0x7e>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	88fa      	ldrh	r2, [r7, #6]
 800438a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	88fa      	ldrh	r2, [r7, #6]
 8004390:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2221      	movs	r2, #33	; 0x21
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043b6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	e000      	b.n	80043be <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80043bc:	2302      	movs	r3, #2
  }
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	4613      	mov	r3, r2
 80043d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	d11d      	bne.n	8004420 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <HAL_UART_Receive_IT+0x26>
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e016      	b.n	8004422 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_UART_Receive_IT+0x38>
 80043fe:	2302      	movs	r3, #2
 8004400:	e00f      	b.n	8004422 <HAL_UART_Receive_IT+0x58>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	461a      	mov	r2, r3
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 fb8c 	bl	8004b34 <UART_Start_Receive_IT>
 800441c:	4603      	mov	r3, r0
 800441e:	e000      	b.n	8004422 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004420:	2302      	movs	r3, #2
  }
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b0ba      	sub	sp, #232	; 0xe8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004452:	2300      	movs	r3, #0
 8004454:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004458:	2300      	movs	r3, #0
 800445a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800445e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800446a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10f      	bne.n	8004492 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <HAL_UART_IRQHandler+0x66>
 800447e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fc6f 	bl	8004d6e <UART_Receive_IT>
      return;
 8004490:	e256      	b.n	8004940 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004492:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 80de 	beq.w	8004658 <HAL_UART_IRQHandler+0x22c>
 800449c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d106      	bne.n	80044b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80d1 	beq.w	8004658 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00b      	beq.n	80044da <HAL_UART_IRQHandler+0xae>
 80044c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	f043 0201 	orr.w	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00b      	beq.n	80044fe <HAL_UART_IRQHandler+0xd2>
 80044e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d005      	beq.n	80044fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f043 0202 	orr.w	r2, r3, #2
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <HAL_UART_IRQHandler+0xf6>
 800450a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f043 0204 	orr.w	r2, r3, #4
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d011      	beq.n	8004552 <HAL_UART_IRQHandler+0x126>
 800452e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d105      	bne.n	8004546 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800453a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f043 0208 	orr.w	r2, r3, #8
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 81ed 	beq.w	8004936 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800455c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <HAL_UART_IRQHandler+0x14e>
 8004568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 fbfa 	bl	8004d6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004584:	2b40      	cmp	r3, #64	; 0x40
 8004586:	bf0c      	ite	eq
 8004588:	2301      	moveq	r3, #1
 800458a:	2300      	movne	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b00      	cmp	r3, #0
 800459c:	d103      	bne.n	80045a6 <HAL_UART_IRQHandler+0x17a>
 800459e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d04f      	beq.n	8004646 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fb02 	bl	8004bb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b6:	2b40      	cmp	r3, #64	; 0x40
 80045b8:	d141      	bne.n	800463e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3314      	adds	r3, #20
 80045c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045c8:	e853 3f00 	ldrex	r3, [r3]
 80045cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80045d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3314      	adds	r3, #20
 80045e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80045ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80045f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80045f6:	e841 2300 	strex	r3, r2, [r1]
 80045fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80045fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1d9      	bne.n	80045ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460a:	2b00      	cmp	r3, #0
 800460c:	d013      	beq.n	8004636 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004612:	4a7d      	ldr	r2, [pc, #500]	; (8004808 <HAL_UART_IRQHandler+0x3dc>)
 8004614:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	4618      	mov	r0, r3
 800461c:	f7fd fd1f 	bl	800205e <HAL_DMA_Abort_IT>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d016      	beq.n	8004654 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004630:	4610      	mov	r0, r2
 8004632:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004634:	e00e      	b.n	8004654 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f990 	bl	800495c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800463c:	e00a      	b.n	8004654 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f98c 	bl	800495c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004644:	e006      	b.n	8004654 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f988 	bl	800495c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004652:	e170      	b.n	8004936 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004654:	bf00      	nop
    return;
 8004656:	e16e      	b.n	8004936 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	2b01      	cmp	r3, #1
 800465e:	f040 814a 	bne.w	80048f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004666:	f003 0310 	and.w	r3, r3, #16
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 8143 	beq.w	80048f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 813c 	beq.w	80048f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800467e:	2300      	movs	r3, #0
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	60bb      	str	r3, [r7, #8]
 8004692:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469e:	2b40      	cmp	r3, #64	; 0x40
 80046a0:	f040 80b4 	bne.w	800480c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 8140 	beq.w	800493a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046c2:	429a      	cmp	r2, r3
 80046c4:	f080 8139 	bcs.w	800493a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046da:	f000 8088 	beq.w	80047ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	330c      	adds	r3, #12
 80046e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80046f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	330c      	adds	r3, #12
 8004706:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800470a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800470e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004712:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004716:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004722:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1d9      	bne.n	80046de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3314      	adds	r3, #20
 8004730:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800473a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800473c:	f023 0301 	bic.w	r3, r3, #1
 8004740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3314      	adds	r3, #20
 800474a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800474e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004752:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004756:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e1      	bne.n	800472a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3314      	adds	r3, #20
 800476c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004770:	e853 3f00 	ldrex	r3, [r3]
 8004774:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800477c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3314      	adds	r3, #20
 8004786:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800478a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800478c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004790:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004792:	e841 2300 	strex	r3, r2, [r1]
 8004796:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1e3      	bne.n	8004766 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	330c      	adds	r3, #12
 80047b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b6:	e853 3f00 	ldrex	r3, [r3]
 80047ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047be:	f023 0310 	bic.w	r3, r3, #16
 80047c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	330c      	adds	r3, #12
 80047cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80047d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80047d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e3      	bne.n	80047ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fd fbc8 	bl	8001f7e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	4619      	mov	r1, r3
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f8b6 	bl	8004970 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004804:	e099      	b.n	800493a <HAL_UART_IRQHandler+0x50e>
 8004806:	bf00      	nop
 8004808:	08004c77 	.word	0x08004c77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004814:	b29b      	uxth	r3, r3
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 808b 	beq.w	800493e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004828:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 8086 	beq.w	800493e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	330c      	adds	r3, #12
 8004838:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004848:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	330c      	adds	r3, #12
 8004852:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004856:	647a      	str	r2, [r7, #68]	; 0x44
 8004858:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800485c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1e3      	bne.n	8004832 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3314      	adds	r3, #20
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	e853 3f00 	ldrex	r3, [r3]
 8004878:	623b      	str	r3, [r7, #32]
   return(result);
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	f023 0301 	bic.w	r3, r3, #1
 8004880:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3314      	adds	r3, #20
 800488a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800488e:	633a      	str	r2, [r7, #48]	; 0x30
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800489c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e3      	bne.n	800486a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	60fb      	str	r3, [r7, #12]
   return(result);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0310 	bic.w	r3, r3, #16
 80048c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	330c      	adds	r3, #12
 80048d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80048d4:	61fa      	str	r2, [r7, #28]
 80048d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	69b9      	ldr	r1, [r7, #24]
 80048da:	69fa      	ldr	r2, [r7, #28]
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	617b      	str	r3, [r7, #20]
   return(result);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e3      	bne.n	80048b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048ec:	4619      	mov	r1, r3
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f83e 	bl	8004970 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048f4:	e023      	b.n	800493e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d009      	beq.n	8004916 <HAL_UART_IRQHandler+0x4ea>
 8004902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f9c5 	bl	8004c9e <UART_Transmit_IT>
    return;
 8004914:	e014      	b.n	8004940 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00e      	beq.n	8004940 <HAL_UART_IRQHandler+0x514>
 8004922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fa05 	bl	8004d3e <UART_EndTransmit_IT>
    return;
 8004934:	e004      	b.n	8004940 <HAL_UART_IRQHandler+0x514>
    return;
 8004936:	bf00      	nop
 8004938:	e002      	b.n	8004940 <HAL_UART_IRQHandler+0x514>
      return;
 800493a:	bf00      	nop
 800493c:	e000      	b.n	8004940 <HAL_UART_IRQHandler+0x514>
      return;
 800493e:	bf00      	nop
  }
}
 8004940:	37e8      	adds	r7, #232	; 0xe8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop

08004948 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	460b      	mov	r3, r1
 800497a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004990:	2300      	movs	r3, #0
 8004992:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 800499e:	2302      	movs	r3, #2
 80049a0:	e020      	b.n	80049e4 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2224      	movs	r2, #36	; 0x24
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f023 030c 	bic.w	r3, r3, #12
 80049c0:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f043 0308 	orr.w	r3, r3, #8
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_HalfDuplex_EnableReceiver+0x1a>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e020      	b.n	8004a4c <HAL_HalfDuplex_EnableReceiver+0x5c>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2224      	movs	r2, #36	; 0x24
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f023 030c 	bic.w	r3, r3, #12
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f043 0304 	orr.w	r3, r3, #4
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b090      	sub	sp, #64	; 0x40
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	4613      	mov	r3, r2
 8004a66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a68:	e050      	b.n	8004b0c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a70:	d04c      	beq.n	8004b0c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d007      	beq.n	8004a88 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a78:	f7fd f940 	bl	8001cfc <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d241      	bcs.n	8004b0c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	330c      	adds	r3, #12
 8004a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	e853 3f00 	ldrex	r3, [r3]
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	330c      	adds	r3, #12
 8004aa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004aa8:	637a      	str	r2, [r7, #52]	; 0x34
 8004aaa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004aae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ab0:	e841 2300 	strex	r3, r2, [r1]
 8004ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e5      	bne.n	8004a88 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3314      	adds	r3, #20
 8004ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	e853 3f00 	ldrex	r3, [r3]
 8004aca:	613b      	str	r3, [r7, #16]
   return(result);
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f023 0301 	bic.w	r3, r3, #1
 8004ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3314      	adds	r3, #20
 8004ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004adc:	623a      	str	r2, [r7, #32]
 8004ade:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae0:	69f9      	ldr	r1, [r7, #28]
 8004ae2:	6a3a      	ldr	r2, [r7, #32]
 8004ae4:	e841 2300 	strex	r3, r2, [r1]
 8004ae8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1e5      	bne.n	8004abc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e00f      	b.n	8004b2c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4013      	ands	r3, r2
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	bf0c      	ite	eq
 8004b1c:	2301      	moveq	r3, #1
 8004b1e:	2300      	movne	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	461a      	mov	r2, r3
 8004b24:	79fb      	ldrb	r3, [r7, #7]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d09f      	beq.n	8004a6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3740      	adds	r7, #64	; 0x40
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	88fa      	ldrh	r2, [r7, #6]
 8004b4c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	88fa      	ldrh	r2, [r7, #6]
 8004b52:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2222      	movs	r2, #34	; 0x22
 8004b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d007      	beq.n	8004b82 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b80:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	695a      	ldr	r2, [r3, #20]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0201 	orr.w	r2, r2, #1
 8004b90:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0220 	orr.w	r2, r2, #32
 8004ba0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b095      	sub	sp, #84	; 0x54
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	330c      	adds	r3, #12
 8004bbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc2:	e853 3f00 	ldrex	r3, [r3]
 8004bc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	330c      	adds	r3, #12
 8004bd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bd8:	643a      	str	r2, [r7, #64]	; 0x40
 8004bda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004be0:	e841 2300 	strex	r3, r2, [r1]
 8004be4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e5      	bne.n	8004bb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3314      	adds	r3, #20
 8004bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3314      	adds	r3, #20
 8004c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e5      	bne.n	8004bec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d119      	bne.n	8004c5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	330c      	adds	r3, #12
 8004c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	e853 3f00 	ldrex	r3, [r3]
 8004c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f023 0310 	bic.w	r3, r3, #16
 8004c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	330c      	adds	r3, #12
 8004c46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c48:	61ba      	str	r2, [r7, #24]
 8004c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4c:	6979      	ldr	r1, [r7, #20]
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	e841 2300 	strex	r3, r2, [r1]
 8004c54:	613b      	str	r3, [r7, #16]
   return(result);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1e5      	bne.n	8004c28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c6a:	bf00      	nop
 8004c6c:	3754      	adds	r7, #84	; 0x54
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7ff fe63 	bl	800495c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c96:	bf00      	nop
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b21      	cmp	r3, #33	; 0x21
 8004cb0:	d13e      	bne.n	8004d30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cba:	d114      	bne.n	8004ce6 <UART_Transmit_IT+0x48>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d110      	bne.n	8004ce6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	1c9a      	adds	r2, r3, #2
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	621a      	str	r2, [r3, #32]
 8004ce4:	e008      	b.n	8004cf8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	1c59      	adds	r1, r3, #1
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6211      	str	r1, [r2, #32]
 8004cf0:	781a      	ldrb	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	4619      	mov	r1, r3
 8004d06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10f      	bne.n	8004d2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e000      	b.n	8004d32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d30:	2302      	movs	r3, #2
  }
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff fdf2 	bl	8004948 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b08c      	sub	sp, #48	; 0x30
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b22      	cmp	r3, #34	; 0x22
 8004d80:	f040 80ab 	bne.w	8004eda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8c:	d117      	bne.n	8004dbe <UART_Receive_IT+0x50>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d113      	bne.n	8004dbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d96:	2300      	movs	r3, #0
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db6:	1c9a      	adds	r2, r3, #2
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	629a      	str	r2, [r3, #40]	; 0x28
 8004dbc:	e026      	b.n	8004e0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd0:	d007      	beq.n	8004de2 <UART_Receive_IT+0x74>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10a      	bne.n	8004df0 <UART_Receive_IT+0x82>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	e008      	b.n	8004e02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	4619      	mov	r1, r3
 8004e1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d15a      	bne.n	8004ed6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0220 	bic.w	r2, r2, #32
 8004e2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695a      	ldr	r2, [r3, #20]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0201 	bic.w	r2, r2, #1
 8004e4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d135      	bne.n	8004ecc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	330c      	adds	r3, #12
 8004e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	e853 3f00 	ldrex	r3, [r3]
 8004e74:	613b      	str	r3, [r7, #16]
   return(result);
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f023 0310 	bic.w	r3, r3, #16
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	330c      	adds	r3, #12
 8004e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e86:	623a      	str	r2, [r7, #32]
 8004e88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	69f9      	ldr	r1, [r7, #28]
 8004e8c:	6a3a      	ldr	r2, [r7, #32]
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e5      	bne.n	8004e66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0310 	and.w	r3, r3, #16
 8004ea4:	2b10      	cmp	r3, #16
 8004ea6:	d10a      	bne.n	8004ebe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff fd53 	bl	8004970 <HAL_UARTEx_RxEventCallback>
 8004eca:	e002      	b.n	8004ed2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7fc fcaf 	bl	8001830 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e002      	b.n	8004edc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e000      	b.n	8004edc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004eda:	2302      	movs	r3, #2
  }
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3730      	adds	r7, #48	; 0x30
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ee8:	b0c0      	sub	sp, #256	; 0x100
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f00:	68d9      	ldr	r1, [r3, #12]
 8004f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	ea40 0301 	orr.w	r3, r0, r1
 8004f0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	431a      	orrs	r2, r3
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f3c:	f021 010c 	bic.w	r1, r1, #12
 8004f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f4a:	430b      	orrs	r3, r1
 8004f4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5e:	6999      	ldr	r1, [r3, #24]
 8004f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	ea40 0301 	orr.w	r3, r0, r1
 8004f6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	4b8f      	ldr	r3, [pc, #572]	; (80051b0 <UART_SetConfig+0x2cc>)
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d005      	beq.n	8004f84 <UART_SetConfig+0xa0>
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	4b8d      	ldr	r3, [pc, #564]	; (80051b4 <UART_SetConfig+0x2d0>)
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d104      	bne.n	8004f8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f84:	f7fd fb72 	bl	800266c <HAL_RCC_GetPCLK2Freq>
 8004f88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f8c:	e003      	b.n	8004f96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f8e:	f7fd fb59 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 8004f92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa0:	f040 810c 	bne.w	80051bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004fae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004fb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004fb6:	4622      	mov	r2, r4
 8004fb8:	462b      	mov	r3, r5
 8004fba:	1891      	adds	r1, r2, r2
 8004fbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8004fbe:	415b      	adcs	r3, r3
 8004fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	eb12 0801 	adds.w	r8, r2, r1
 8004fcc:	4629      	mov	r1, r5
 8004fce:	eb43 0901 	adc.w	r9, r3, r1
 8004fd2:	f04f 0200 	mov.w	r2, #0
 8004fd6:	f04f 0300 	mov.w	r3, #0
 8004fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fe6:	4690      	mov	r8, r2
 8004fe8:	4699      	mov	r9, r3
 8004fea:	4623      	mov	r3, r4
 8004fec:	eb18 0303 	adds.w	r3, r8, r3
 8004ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ff4:	462b      	mov	r3, r5
 8004ff6:	eb49 0303 	adc.w	r3, r9, r3
 8004ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800500a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800500e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005012:	460b      	mov	r3, r1
 8005014:	18db      	adds	r3, r3, r3
 8005016:	653b      	str	r3, [r7, #80]	; 0x50
 8005018:	4613      	mov	r3, r2
 800501a:	eb42 0303 	adc.w	r3, r2, r3
 800501e:	657b      	str	r3, [r7, #84]	; 0x54
 8005020:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005024:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005028:	f7fb f942 	bl	80002b0 <__aeabi_uldivmod>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4b61      	ldr	r3, [pc, #388]	; (80051b8 <UART_SetConfig+0x2d4>)
 8005032:	fba3 2302 	umull	r2, r3, r3, r2
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	011c      	lsls	r4, r3, #4
 800503a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800503e:	2200      	movs	r2, #0
 8005040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005044:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005048:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800504c:	4642      	mov	r2, r8
 800504e:	464b      	mov	r3, r9
 8005050:	1891      	adds	r1, r2, r2
 8005052:	64b9      	str	r1, [r7, #72]	; 0x48
 8005054:	415b      	adcs	r3, r3
 8005056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005058:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800505c:	4641      	mov	r1, r8
 800505e:	eb12 0a01 	adds.w	sl, r2, r1
 8005062:	4649      	mov	r1, r9
 8005064:	eb43 0b01 	adc.w	fp, r3, r1
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005074:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005078:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800507c:	4692      	mov	sl, r2
 800507e:	469b      	mov	fp, r3
 8005080:	4643      	mov	r3, r8
 8005082:	eb1a 0303 	adds.w	r3, sl, r3
 8005086:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800508a:	464b      	mov	r3, r9
 800508c:	eb4b 0303 	adc.w	r3, fp, r3
 8005090:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050a8:	460b      	mov	r3, r1
 80050aa:	18db      	adds	r3, r3, r3
 80050ac:	643b      	str	r3, [r7, #64]	; 0x40
 80050ae:	4613      	mov	r3, r2
 80050b0:	eb42 0303 	adc.w	r3, r2, r3
 80050b4:	647b      	str	r3, [r7, #68]	; 0x44
 80050b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80050be:	f7fb f8f7 	bl	80002b0 <__aeabi_uldivmod>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	4611      	mov	r1, r2
 80050c8:	4b3b      	ldr	r3, [pc, #236]	; (80051b8 <UART_SetConfig+0x2d4>)
 80050ca:	fba3 2301 	umull	r2, r3, r3, r1
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	2264      	movs	r2, #100	; 0x64
 80050d2:	fb02 f303 	mul.w	r3, r2, r3
 80050d6:	1acb      	subs	r3, r1, r3
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050de:	4b36      	ldr	r3, [pc, #216]	; (80051b8 <UART_SetConfig+0x2d4>)
 80050e0:	fba3 2302 	umull	r2, r3, r3, r2
 80050e4:	095b      	lsrs	r3, r3, #5
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050ec:	441c      	add	r4, r3
 80050ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050f2:	2200      	movs	r2, #0
 80050f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80050fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005100:	4642      	mov	r2, r8
 8005102:	464b      	mov	r3, r9
 8005104:	1891      	adds	r1, r2, r2
 8005106:	63b9      	str	r1, [r7, #56]	; 0x38
 8005108:	415b      	adcs	r3, r3
 800510a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800510c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005110:	4641      	mov	r1, r8
 8005112:	1851      	adds	r1, r2, r1
 8005114:	6339      	str	r1, [r7, #48]	; 0x30
 8005116:	4649      	mov	r1, r9
 8005118:	414b      	adcs	r3, r1
 800511a:	637b      	str	r3, [r7, #52]	; 0x34
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	f04f 0300 	mov.w	r3, #0
 8005124:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005128:	4659      	mov	r1, fp
 800512a:	00cb      	lsls	r3, r1, #3
 800512c:	4651      	mov	r1, sl
 800512e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005132:	4651      	mov	r1, sl
 8005134:	00ca      	lsls	r2, r1, #3
 8005136:	4610      	mov	r0, r2
 8005138:	4619      	mov	r1, r3
 800513a:	4603      	mov	r3, r0
 800513c:	4642      	mov	r2, r8
 800513e:	189b      	adds	r3, r3, r2
 8005140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005144:	464b      	mov	r3, r9
 8005146:	460a      	mov	r2, r1
 8005148:	eb42 0303 	adc.w	r3, r2, r3
 800514c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800515c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005160:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005164:	460b      	mov	r3, r1
 8005166:	18db      	adds	r3, r3, r3
 8005168:	62bb      	str	r3, [r7, #40]	; 0x28
 800516a:	4613      	mov	r3, r2
 800516c:	eb42 0303 	adc.w	r3, r2, r3
 8005170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005176:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800517a:	f7fb f899 	bl	80002b0 <__aeabi_uldivmod>
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	4b0d      	ldr	r3, [pc, #52]	; (80051b8 <UART_SetConfig+0x2d4>)
 8005184:	fba3 1302 	umull	r1, r3, r3, r2
 8005188:	095b      	lsrs	r3, r3, #5
 800518a:	2164      	movs	r1, #100	; 0x64
 800518c:	fb01 f303 	mul.w	r3, r1, r3
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	3332      	adds	r3, #50	; 0x32
 8005196:	4a08      	ldr	r2, [pc, #32]	; (80051b8 <UART_SetConfig+0x2d4>)
 8005198:	fba2 2303 	umull	r2, r3, r2, r3
 800519c:	095b      	lsrs	r3, r3, #5
 800519e:	f003 0207 	and.w	r2, r3, #7
 80051a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4422      	add	r2, r4
 80051aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051ac:	e105      	b.n	80053ba <UART_SetConfig+0x4d6>
 80051ae:	bf00      	nop
 80051b0:	40011000 	.word	0x40011000
 80051b4:	40011400 	.word	0x40011400
 80051b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051c0:	2200      	movs	r2, #0
 80051c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80051ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80051ce:	4642      	mov	r2, r8
 80051d0:	464b      	mov	r3, r9
 80051d2:	1891      	adds	r1, r2, r2
 80051d4:	6239      	str	r1, [r7, #32]
 80051d6:	415b      	adcs	r3, r3
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
 80051da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051de:	4641      	mov	r1, r8
 80051e0:	1854      	adds	r4, r2, r1
 80051e2:	4649      	mov	r1, r9
 80051e4:	eb43 0501 	adc.w	r5, r3, r1
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	00eb      	lsls	r3, r5, #3
 80051f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051f6:	00e2      	lsls	r2, r4, #3
 80051f8:	4614      	mov	r4, r2
 80051fa:	461d      	mov	r5, r3
 80051fc:	4643      	mov	r3, r8
 80051fe:	18e3      	adds	r3, r4, r3
 8005200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005204:	464b      	mov	r3, r9
 8005206:	eb45 0303 	adc.w	r3, r5, r3
 800520a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800520e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800521a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800522a:	4629      	mov	r1, r5
 800522c:	008b      	lsls	r3, r1, #2
 800522e:	4621      	mov	r1, r4
 8005230:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005234:	4621      	mov	r1, r4
 8005236:	008a      	lsls	r2, r1, #2
 8005238:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800523c:	f7fb f838 	bl	80002b0 <__aeabi_uldivmod>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	4b60      	ldr	r3, [pc, #384]	; (80053c8 <UART_SetConfig+0x4e4>)
 8005246:	fba3 2302 	umull	r2, r3, r3, r2
 800524a:	095b      	lsrs	r3, r3, #5
 800524c:	011c      	lsls	r4, r3, #4
 800524e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005252:	2200      	movs	r2, #0
 8005254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005258:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800525c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005260:	4642      	mov	r2, r8
 8005262:	464b      	mov	r3, r9
 8005264:	1891      	adds	r1, r2, r2
 8005266:	61b9      	str	r1, [r7, #24]
 8005268:	415b      	adcs	r3, r3
 800526a:	61fb      	str	r3, [r7, #28]
 800526c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005270:	4641      	mov	r1, r8
 8005272:	1851      	adds	r1, r2, r1
 8005274:	6139      	str	r1, [r7, #16]
 8005276:	4649      	mov	r1, r9
 8005278:	414b      	adcs	r3, r1
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	f04f 0200 	mov.w	r2, #0
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005288:	4659      	mov	r1, fp
 800528a:	00cb      	lsls	r3, r1, #3
 800528c:	4651      	mov	r1, sl
 800528e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005292:	4651      	mov	r1, sl
 8005294:	00ca      	lsls	r2, r1, #3
 8005296:	4610      	mov	r0, r2
 8005298:	4619      	mov	r1, r3
 800529a:	4603      	mov	r3, r0
 800529c:	4642      	mov	r2, r8
 800529e:	189b      	adds	r3, r3, r2
 80052a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052a4:	464b      	mov	r3, r9
 80052a6:	460a      	mov	r2, r1
 80052a8:	eb42 0303 	adc.w	r3, r2, r3
 80052ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80052ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80052c8:	4649      	mov	r1, r9
 80052ca:	008b      	lsls	r3, r1, #2
 80052cc:	4641      	mov	r1, r8
 80052ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052d2:	4641      	mov	r1, r8
 80052d4:	008a      	lsls	r2, r1, #2
 80052d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052da:	f7fa ffe9 	bl	80002b0 <__aeabi_uldivmod>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	4b39      	ldr	r3, [pc, #228]	; (80053c8 <UART_SetConfig+0x4e4>)
 80052e4:	fba3 1302 	umull	r1, r3, r3, r2
 80052e8:	095b      	lsrs	r3, r3, #5
 80052ea:	2164      	movs	r1, #100	; 0x64
 80052ec:	fb01 f303 	mul.w	r3, r1, r3
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	3332      	adds	r3, #50	; 0x32
 80052f6:	4a34      	ldr	r2, [pc, #208]	; (80053c8 <UART_SetConfig+0x4e4>)
 80052f8:	fba2 2303 	umull	r2, r3, r2, r3
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005302:	441c      	add	r4, r3
 8005304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005308:	2200      	movs	r2, #0
 800530a:	673b      	str	r3, [r7, #112]	; 0x70
 800530c:	677a      	str	r2, [r7, #116]	; 0x74
 800530e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005312:	4642      	mov	r2, r8
 8005314:	464b      	mov	r3, r9
 8005316:	1891      	adds	r1, r2, r2
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	415b      	adcs	r3, r3
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005322:	4641      	mov	r1, r8
 8005324:	1851      	adds	r1, r2, r1
 8005326:	6039      	str	r1, [r7, #0]
 8005328:	4649      	mov	r1, r9
 800532a:	414b      	adcs	r3, r1
 800532c:	607b      	str	r3, [r7, #4]
 800532e:	f04f 0200 	mov.w	r2, #0
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800533a:	4659      	mov	r1, fp
 800533c:	00cb      	lsls	r3, r1, #3
 800533e:	4651      	mov	r1, sl
 8005340:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005344:	4651      	mov	r1, sl
 8005346:	00ca      	lsls	r2, r1, #3
 8005348:	4610      	mov	r0, r2
 800534a:	4619      	mov	r1, r3
 800534c:	4603      	mov	r3, r0
 800534e:	4642      	mov	r2, r8
 8005350:	189b      	adds	r3, r3, r2
 8005352:	66bb      	str	r3, [r7, #104]	; 0x68
 8005354:	464b      	mov	r3, r9
 8005356:	460a      	mov	r2, r1
 8005358:	eb42 0303 	adc.w	r3, r2, r3
 800535c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800535e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	663b      	str	r3, [r7, #96]	; 0x60
 8005368:	667a      	str	r2, [r7, #100]	; 0x64
 800536a:	f04f 0200 	mov.w	r2, #0
 800536e:	f04f 0300 	mov.w	r3, #0
 8005372:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005376:	4649      	mov	r1, r9
 8005378:	008b      	lsls	r3, r1, #2
 800537a:	4641      	mov	r1, r8
 800537c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005380:	4641      	mov	r1, r8
 8005382:	008a      	lsls	r2, r1, #2
 8005384:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005388:	f7fa ff92 	bl	80002b0 <__aeabi_uldivmod>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4b0d      	ldr	r3, [pc, #52]	; (80053c8 <UART_SetConfig+0x4e4>)
 8005392:	fba3 1302 	umull	r1, r3, r3, r2
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	2164      	movs	r1, #100	; 0x64
 800539a:	fb01 f303 	mul.w	r3, r1, r3
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	3332      	adds	r3, #50	; 0x32
 80053a4:	4a08      	ldr	r2, [pc, #32]	; (80053c8 <UART_SetConfig+0x4e4>)
 80053a6:	fba2 2303 	umull	r2, r3, r2, r3
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	f003 020f 	and.w	r2, r3, #15
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4422      	add	r2, r4
 80053b8:	609a      	str	r2, [r3, #8]
}
 80053ba:	bf00      	nop
 80053bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80053c0:	46bd      	mov	sp, r7
 80053c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053c6:	bf00      	nop
 80053c8:	51eb851f 	.word	0x51eb851f

080053cc <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	4603      	mov	r3, r0
 80053d4:	71fb      	strb	r3, [r7, #7]
 80053d6:	460b      	mov	r3, r1
 80053d8:	71bb      	strb	r3, [r7, #6]
 80053da:	4613      	mov	r3, r2
 80053dc:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 80053de:	797b      	ldrb	r3, [r7, #5]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d901      	bls.n	80053e8 <tmc_fillCRC8Table+0x1c>
		return 0;
 80053e4:	2300      	movs	r3, #0
 80053e6:	e09e      	b.n	8005526 <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 80053e8:	797a      	ldrb	r2, [r7, #5]
 80053ea:	4951      	ldr	r1, [pc, #324]	; (8005530 <tmc_fillCRC8Table+0x164>)
 80053ec:	4613      	mov	r3, r2
 80053ee:	01db      	lsls	r3, r3, #7
 80053f0:	4413      	add	r3, r2
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	440b      	add	r3, r1
 80053f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80053fa:	79fa      	ldrb	r2, [r7, #7]
 80053fc:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 80053fe:	797a      	ldrb	r2, [r7, #5]
 8005400:	494b      	ldr	r1, [pc, #300]	; (8005530 <tmc_fillCRC8Table+0x164>)
 8005402:	4613      	mov	r3, r2
 8005404:	01db      	lsls	r3, r3, #7
 8005406:	4413      	add	r3, r2
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	440b      	add	r3, r1
 800540c:	f203 1301 	addw	r3, r3, #257	; 0x101
 8005410:	79ba      	ldrb	r2, [r7, #6]
 8005412:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 8005414:	797a      	ldrb	r2, [r7, #5]
 8005416:	4613      	mov	r3, r2
 8005418:	01db      	lsls	r3, r3, #7
 800541a:	4413      	add	r3, r2
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	4a44      	ldr	r2, [pc, #272]	; (8005530 <tmc_fillCRC8Table+0x164>)
 8005420:	4413      	add	r3, r2
 8005422:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800542a:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 800542c:	4b41      	ldr	r3, [pc, #260]	; (8005534 <tmc_fillCRC8Table+0x168>)
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	e074      	b.n	800551c <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 8005432:	79bb      	ldrb	r3, [r7, #6]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d004      	beq.n	8005442 <tmc_fillCRC8Table+0x76>
 8005438:	6978      	ldr	r0, [r7, #20]
 800543a:	f000 f8f7 	bl	800562c <flipBitsInBytes>
 800543e:	4603      	mov	r3, r0
 8005440:	e000      	b.n	8005444 <tmc_fillCRC8Table+0x78>
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 8005446:	2300      	movs	r3, #0
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	e035      	b.n	80054b8 <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	0fdb      	lsrs	r3, r3, #31
 8005450:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <tmc_fillCRC8Table+0x9a>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	e000      	b.n	8005468 <tmc_fillCRC8Table+0x9c>
 8005466:	2300      	movs	r3, #0
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	4053      	eors	r3, r2
 800546c:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <tmc_fillCRC8Table+0xb2>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	021b      	lsls	r3, r3, #8
 800547c:	e000      	b.n	8005480 <tmc_fillCRC8Table+0xb4>
 800547e:	2300      	movs	r3, #0
 8005480:	69fa      	ldr	r2, [r7, #28]
 8005482:	4053      	eors	r3, r2
 8005484:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <tmc_fillCRC8Table+0xca>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	041b      	lsls	r3, r3, #16
 8005494:	e000      	b.n	8005498 <tmc_fillCRC8Table+0xcc>
 8005496:	2300      	movs	r3, #0
 8005498:	69fa      	ldr	r2, [r7, #28]
 800549a:	4053      	eors	r3, r2
 800549c:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 800549e:	7afb      	ldrb	r3, [r7, #11]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <tmc_fillCRC8Table+0xde>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	061b      	lsls	r3, r3, #24
 80054a8:	e000      	b.n	80054ac <tmc_fillCRC8Table+0xe0>
 80054aa:	2300      	movs	r3, #0
 80054ac:	69fa      	ldr	r2, [r7, #28]
 80054ae:	4053      	eors	r3, r2
 80054b0:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	3301      	adds	r3, #1
 80054b6:	613b      	str	r3, [r7, #16]
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	2b07      	cmp	r3, #7
 80054bc:	ddc6      	ble.n	800544c <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 80054be:	79bb      	ldrb	r3, [r7, #6]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d004      	beq.n	80054ce <tmc_fillCRC8Table+0x102>
 80054c4:	69f8      	ldr	r0, [r7, #28]
 80054c6:	f000 f8b1 	bl	800562c <flipBitsInBytes>
 80054ca:	4603      	mov	r3, r0
 80054cc:	e000      	b.n	80054d0 <tmc_fillCRC8Table+0x104>
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	61ba      	str	r2, [r7, #24]
 80054d8:	69fa      	ldr	r2, [r7, #28]
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	0a1b      	lsrs	r3, r3, #8
 80054e2:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	61ba      	str	r2, [r7, #24]
 80054ea:	69fa      	ldr	r2, [r7, #28]
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	0a1b      	lsrs	r3, r3, #8
 80054f4:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	61ba      	str	r2, [r7, #24]
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	0a1b      	lsrs	r3, r3, #8
 8005506:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	61ba      	str	r2, [r7, #24]
 800550e:	69fa      	ldr	r2, [r7, #28]
 8005510:	b2d2      	uxtb	r2, r2
 8005512:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	4a06      	ldr	r2, [pc, #24]	; (8005538 <tmc_fillCRC8Table+0x16c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d186      	bne.n	8005432 <tmc_fillCRC8Table+0x66>
	}

	return 1;
 8005524:	2301      	movs	r3, #1
}
 8005526:	4618      	mov	r0, r3
 8005528:	3720      	adds	r7, #32
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000658 	.word	0x20000658
 8005534:	03020100 	.word	0x03020100
 8005538:	04030200 	.word	0x04030200

0800553c <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	4613      	mov	r3, r2
 8005548:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 800554e:	79fb      	ldrb	r3, [r7, #7]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d901      	bls.n	8005558 <tmc_CRC8+0x1c>
		return 0;
 8005554:	2300      	movs	r3, #0
 8005556:	e02c      	b.n	80055b2 <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 8005558:	79fa      	ldrb	r2, [r7, #7]
 800555a:	4613      	mov	r3, r2
 800555c:	01db      	lsls	r3, r3, #7
 800555e:	4413      	add	r3, r2
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	4a16      	ldr	r2, [pc, #88]	; (80055bc <tmc_CRC8+0x80>)
 8005564:	4413      	add	r3, r2
 8005566:	613b      	str	r3, [r7, #16]

	while(bytes--)
 8005568:	e00b      	b.n	8005582 <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	60fa      	str	r2, [r7, #12]
 8005570:	781a      	ldrb	r2, [r3, #0]
 8005572:	7dfb      	ldrb	r3, [r7, #23]
 8005574:	4053      	eors	r3, r2
 8005576:	b2db      	uxtb	r3, r3
 8005578:	461a      	mov	r2, r3
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	4413      	add	r3, r2
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	1e5a      	subs	r2, r3, #1
 8005586:	60ba      	str	r2, [r7, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1ee      	bne.n	800556a <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 800558c:	79fa      	ldrb	r2, [r7, #7]
 800558e:	490b      	ldr	r1, [pc, #44]	; (80055bc <tmc_CRC8+0x80>)
 8005590:	4613      	mov	r3, r2
 8005592:	01db      	lsls	r3, r3, #7
 8005594:	4413      	add	r3, r2
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	440b      	add	r3, r1
 800559a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d005      	beq.n	80055b0 <tmc_CRC8+0x74>
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 f80a 	bl	80055c0 <flipByte>
 80055ac:	4603      	mov	r3, r0
 80055ae:	e000      	b.n	80055b2 <tmc_CRC8+0x76>
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	20000658 	.word	0x20000658

080055c0 <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	085b      	lsrs	r3, r3, #1
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	b25b      	sxtb	r3, r3
 80055d2:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80055d6:	b25a      	sxtb	r2, r3
 80055d8:	79fb      	ldrb	r3, [r7, #7]
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	b25b      	sxtb	r3, r3
 80055de:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 80055e2:	b25b      	sxtb	r3, r3
 80055e4:	4313      	orrs	r3, r2
 80055e6:	b25b      	sxtb	r3, r3
 80055e8:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 80055ea:	79fb      	ldrb	r3, [r7, #7]
 80055ec:	089b      	lsrs	r3, r3, #2
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	b25b      	sxtb	r3, r3
 80055f2:	f003 0333 	and.w	r3, r3, #51	; 0x33
 80055f6:	b25a      	sxtb	r2, r3
 80055f8:	79fb      	ldrb	r3, [r7, #7]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	b25b      	sxtb	r3, r3
 80055fe:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8005602:	b25b      	sxtb	r3, r3
 8005604:	4313      	orrs	r3, r2
 8005606:	b25b      	sxtb	r3, r3
 8005608:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	091b      	lsrs	r3, r3, #4
 800560e:	b2db      	uxtb	r3, r3
 8005610:	b25a      	sxtb	r2, r3
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	b25b      	sxtb	r3, r3
 8005618:	4313      	orrs	r3, r2
 800561a:	b25b      	sxtb	r3, r3
 800561c:	71fb      	strb	r3, [r7, #7]

	return value;
 800561e:	79fb      	ldrb	r3, [r7, #7]
}
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	085b      	lsrs	r3, r3, #1
 8005638:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 8005644:	4313      	orrs	r3, r2
 8005646:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	089b      	lsrs	r3, r3, #2
 800564c:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 8005658:	4313      	orrs	r3, r2
 800565a:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	091b      	lsrs	r3, r3, #4
 8005660:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800566c:	4313      	orrs	r3, r2
 800566e:	607b      	str	r3, [r7, #4]

	return value;
 8005670:	687b      	ldr	r3, [r7, #4]
}
 8005672:	4618      	mov	r0, r3
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b086      	sub	sp, #24
 8005682:	af00      	add	r7, sp, #0
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	460b      	mov	r3, r1
 8005688:	607a      	str	r2, [r7, #4]
 800568a:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];

	data[0] = 0x05;
 800568c:	2305      	movs	r3, #5
 800568e:	743b      	strb	r3, [r7, #16]
	data[1] = tmc2209->slaveAddress;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8005696:	747b      	strb	r3, [r7, #17]
	data[2] = address | TMC_WRITE_BIT;
 8005698:	7afb      	ldrb	r3, [r7, #11]
 800569a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	74bb      	strb	r3, [r7, #18]
	data[3] = (value >> 24) & 0xFF;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	0e1b      	lsrs	r3, r3, #24
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	74fb      	strb	r3, [r7, #19]
	data[4] = (value >> 16) & 0xFF;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	141b      	asrs	r3, r3, #16
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	753b      	strb	r3, [r7, #20]
	data[5] = (value >> 8 ) & 0xFF;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	121b      	asrs	r3, r3, #8
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	757b      	strb	r3, [r7, #21]
	data[6] = (value      ) & 0xFF;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	75bb      	strb	r3, [r7, #22]
	data[7] = tmc2209_CRC8(data, 7);
 80056c0:	f107 0310 	add.w	r3, r7, #16
 80056c4:	2107      	movs	r1, #7
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fa ff9c 	bl	8000604 <tmc2209_CRC8>
 80056cc:	4603      	mov	r3, r0
 80056ce:	75fb      	strb	r3, [r7, #23]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 80056d8:	f107 0110 	add.w	r1, r7, #16
 80056dc:	2300      	movs	r3, #0
 80056de:	2208      	movs	r2, #8
 80056e0:	f7fa ff68 	bl	80005b4 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
 80056e4:	7afb      	ldrb	r3, [r7, #11]
 80056e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ea:	72fb      	strb	r3, [r7, #11]
	tmc2209->config->shadowRegister[address] = value;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	7afb      	ldrb	r3, [r7, #11]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	605a      	str	r2, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
 80056fa:	7afb      	ldrb	r3, [r7, #11]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	f893 2204 	ldrb.w	r2, [r3, #516]	; 0x204
 8005704:	7afb      	ldrb	r3, [r7, #11]
 8005706:	f042 0208 	orr.w	r2, r2, #8
 800570a:	b2d1      	uxtb	r1, r2
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4413      	add	r3, r2
 8005710:	460a      	mov	r2, r1
 8005712:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 8005716:	bf00      	nop
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 800571e:	b590      	push	{r4, r7, lr}
 8005720:	b085      	sub	sp, #20
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	460b      	mov	r3, r1
 8005728:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 800572a:	2300      	movs	r3, #0
 800572c:	60bb      	str	r3, [r7, #8]
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 8005732:	78fb      	ldrb	r3, [r7, #3]
 8005734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005738:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 800573a:	78fb      	ldrb	r3, [r7, #3]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	4413      	add	r3, r2
 8005740:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	d106      	bne.n	800575a <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	e03f      	b.n	80057da <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 800575a:	2305      	movs	r3, #5
 800575c:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 8005764:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 8005766:	78fb      	ldrb	r3, [r7, #3]
 8005768:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 800576a:	f107 0308 	add.w	r3, r7, #8
 800576e:	2103      	movs	r1, #3
 8005770:	4618      	mov	r0, r3
 8005772:	f7fa ff47 	bl	8000604 <tmc2209_CRC8>
 8005776:	4603      	mov	r3, r0
 8005778:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8005782:	f107 0108 	add.w	r1, r7, #8
 8005786:	2308      	movs	r3, #8
 8005788:	2204      	movs	r2, #4
 800578a:	f7fa ff13 	bl	80005b4 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 800578e:	7a3b      	ldrb	r3, [r7, #8]
 8005790:	2b05      	cmp	r3, #5
 8005792:	d001      	beq.n	8005798 <tmc2209_readInt+0x7a>
		return 0;
 8005794:	2300      	movs	r3, #0
 8005796:	e020      	b.n	80057da <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 8005798:	7a7b      	ldrb	r3, [r7, #9]
 800579a:	2bff      	cmp	r3, #255	; 0xff
 800579c:	d001      	beq.n	80057a2 <tmc2209_readInt+0x84>
		return 0;
 800579e:	2300      	movs	r3, #0
 80057a0:	e01b      	b.n	80057da <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 80057a2:	7abb      	ldrb	r3, [r7, #10]
 80057a4:	78fa      	ldrb	r2, [r7, #3]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d001      	beq.n	80057ae <tmc2209_readInt+0x90>
		return 0;
 80057aa:	2300      	movs	r3, #0
 80057ac:	e015      	b.n	80057da <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 80057ae:	7bfc      	ldrb	r4, [r7, #15]
 80057b0:	f107 0308 	add.w	r3, r7, #8
 80057b4:	2107      	movs	r1, #7
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fa ff24 	bl	8000604 <tmc2209_CRC8>
 80057bc:	4603      	mov	r3, r0
 80057be:	429c      	cmp	r4, r3
 80057c0:	d001      	beq.n	80057c6 <tmc2209_readInt+0xa8>
		return 0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	e009      	b.n	80057da <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 80057c6:	7afb      	ldrb	r3, [r7, #11]
 80057c8:	061a      	lsls	r2, r3, #24
 80057ca:	7b3b      	ldrb	r3, [r7, #12]
 80057cc:	041b      	lsls	r3, r3, #16
 80057ce:	4313      	orrs	r3, r2
 80057d0:	7b7a      	ldrb	r2, [r7, #13]
 80057d2:	0212      	lsls	r2, r2, #8
 80057d4:	4313      	orrs	r3, r2
 80057d6:	7bba      	ldrb	r2, [r7, #14]
 80057d8:	4313      	orrs	r3, r2
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd90      	pop	{r4, r7, pc}
	...

080057e4 <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	607b      	str	r3, [r7, #4]
 80057ee:	460b      	mov	r3, r1
 80057f0:	72fb      	strb	r3, [r7, #11]
 80057f2:	4613      	mov	r3, r2
 80057f4:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	7aba      	ldrb	r2, [r7, #10]
 80057fa:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2200      	movs	r2, #0
 800580a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	7afa      	ldrb	r2, [r7, #11]
 8005814:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2200      	movs	r2, #0
 800581e:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2200      	movs	r2, #0
 8005826:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8005828:	2300      	movs	r3, #0
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	e017      	b.n	800585e <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 800582e:	4a11      	ldr	r2, [pc, #68]	; (8005874 <tmc2209_init+0x90>)
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	4413      	add	r3, r2
 8005834:	7819      	ldrb	r1, [r3, #0]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	4413      	add	r3, r2
 800583c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005840:	460a      	mov	r2, r1
 8005842:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	6a3a      	ldr	r2, [r7, #32]
 800584a:	4413      	add	r3, r2
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68f9      	ldr	r1, [r7, #12]
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	3301      	adds	r3, #1
 800585c:	617b      	str	r3, [r7, #20]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2b7f      	cmp	r3, #127	; 0x7f
 8005862:	d9e4      	bls.n	800582e <tmc2209_init+0x4a>
	}
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop
 8005868:	371c      	adds	r7, #28
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	080070a8 	.word	0x080070a8

08005878 <writeConfiguration>:

static void writeConfiguration(TMC2209TypeDef *tmc2209)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = &tmc2209->config->configIndex;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3301      	adds	r3, #1
 8005886:	60bb      	str	r3, [r7, #8]
	const int32_t *settings;

	if(tmc2209->config->state == CONFIG_RESTORE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b02      	cmp	r3, #2
 8005890:	d131      	bne.n	80058f6 <writeConfiguration+0x7e>
	{
		settings = tmc2209->config->shadowRegister;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3304      	adds	r3, #4
 8005898:	60fb      	str	r3, [r7, #12]
		// Find the next restorable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 800589a:	e005      	b.n	80058a8 <writeConfiguration+0x30>
		{
			(*ptr)++;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	3301      	adds	r3, #1
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	b25b      	sxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	db3b      	blt.n	800592a <writeConfiguration+0xb2>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	461a      	mov	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4413      	add	r3, r2
 80058bc:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0e9      	beq.n	800589c <writeConfiguration+0x24>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4413      	add	r3, r2
 80058d2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80058d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d025      	beq.n	800592a <writeConfiguration+0xb2>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	461a      	mov	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4413      	add	r3, r2
 80058e8:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0d3      	beq.n	800589c <writeConfiguration+0x24>
 80058f4:	e019      	b.n	800592a <writeConfiguration+0xb2>
		}
	}
	else
	{
		settings = tmc2209->registerResetState;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3304      	adds	r3, #4
 80058fa:	60fb      	str	r3, [r7, #12]
		// Find the next resettable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 80058fc:	e005      	b.n	800590a <writeConfiguration+0x92>
		{
			(*ptr)++;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	3301      	adds	r3, #1
 8005904:	b2da      	uxtb	r2, r3
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	b25b      	sxtb	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	db0a      	blt.n	800592a <writeConfiguration+0xb2>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	461a      	mov	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4413      	add	r3, r2
 800591e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005922:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8005926:	2b02      	cmp	r3, #2
 8005928:	d1e9      	bne.n	80058fe <writeConfiguration+0x86>
		}
	}

	if(*ptr < TMC2209_REGISTER_COUNT)
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	b25b      	sxtb	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	db12      	blt.n	800595a <writeConfiguration+0xe2>
	{
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	7819      	ldrb	r1, [r3, #0]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4413      	add	r3, r2
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	461a      	mov	r2, r3
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7ff fe99 	bl	800567e <tmc2209_writeInt>
		(*ptr)++;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	3301      	adds	r3, #1
 8005952:	b2da      	uxtb	r2, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	701a      	strb	r2, [r3, #0]
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
		}

		tmc2209->config->state = CONFIG_READY;
	}
}
 8005958:	e013      	b.n	8005982 <writeConfiguration+0x10a>
		if(tmc2209->config->callback)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005962:	2b00      	cmp	r3, #0
 8005964:	d009      	beq.n	800597a <writeConfiguration+0x102>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6812      	ldr	r2, [r2, #0]
 8005972:	7812      	ldrb	r2, [r2, #0]
 8005974:	4611      	mov	r1, r2
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
}
 8005982:	bf00      	nop
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <tmc2209_periodicJob>:

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b082      	sub	sp, #8
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	6039      	str	r1, [r7, #0]
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <tmc2209_periodicJob+0x1c>
	{
		writeConfiguration(tmc2209);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7ff ff6a 	bl	8005878 <writeConfiguration>
		return;
 80059a4:	bf00      	nop
	}
}
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <tmc2209_reset+0x16>
		return false;
 80059be:	2300      	movs	r3, #0
 80059c0:	e028      	b.n	8005a14 <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	e019      	b.n	80059fc <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	f023 0308 	bic.w	r3, r3, #8
 80059d8:	b2d9      	uxtb	r1, r3
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80059e4:	460a      	mov	r2, r1
 80059e6:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	2200      	movs	r2, #0
 80059f4:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3301      	adds	r3, #1
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005a00:	d9e2      	bls.n	80059c8 <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2201      	movs	r2, #1
 8005a08:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	705a      	strb	r2, [r3, #1]

	return true;
 8005a12:	2301      	movs	r3, #1
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <tmc2209_restore+0x16>
		return false;
 8005a32:	2300      	movs	r3, #0
 8005a34:	e008      	b.n	8005a48 <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2200      	movs	r2, #0
 8005a44:	705a      	strb	r2, [r3, #1]

	return true;
 8005a46:	2301      	movs	r3, #1
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <__errno>:
 8005a54:	4b01      	ldr	r3, [pc, #4]	; (8005a5c <__errno+0x8>)
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	2000000c 	.word	0x2000000c

08005a60 <__libc_init_array>:
 8005a60:	b570      	push	{r4, r5, r6, lr}
 8005a62:	4d0d      	ldr	r5, [pc, #52]	; (8005a98 <__libc_init_array+0x38>)
 8005a64:	4c0d      	ldr	r4, [pc, #52]	; (8005a9c <__libc_init_array+0x3c>)
 8005a66:	1b64      	subs	r4, r4, r5
 8005a68:	10a4      	asrs	r4, r4, #2
 8005a6a:	2600      	movs	r6, #0
 8005a6c:	42a6      	cmp	r6, r4
 8005a6e:	d109      	bne.n	8005a84 <__libc_init_array+0x24>
 8005a70:	4d0b      	ldr	r5, [pc, #44]	; (8005aa0 <__libc_init_array+0x40>)
 8005a72:	4c0c      	ldr	r4, [pc, #48]	; (8005aa4 <__libc_init_array+0x44>)
 8005a74:	f001 f8fa 	bl	8006c6c <_init>
 8005a78:	1b64      	subs	r4, r4, r5
 8005a7a:	10a4      	asrs	r4, r4, #2
 8005a7c:	2600      	movs	r6, #0
 8005a7e:	42a6      	cmp	r6, r4
 8005a80:	d105      	bne.n	8005a8e <__libc_init_array+0x2e>
 8005a82:	bd70      	pop	{r4, r5, r6, pc}
 8005a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a88:	4798      	blx	r3
 8005a8a:	3601      	adds	r6, #1
 8005a8c:	e7ee      	b.n	8005a6c <__libc_init_array+0xc>
 8005a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a92:	4798      	blx	r3
 8005a94:	3601      	adds	r6, #1
 8005a96:	e7f2      	b.n	8005a7e <__libc_init_array+0x1e>
 8005a98:	080071c8 	.word	0x080071c8
 8005a9c:	080071c8 	.word	0x080071c8
 8005aa0:	080071c8 	.word	0x080071c8
 8005aa4:	080071cc 	.word	0x080071cc

08005aa8 <memset>:
 8005aa8:	4402      	add	r2, r0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d100      	bne.n	8005ab2 <memset+0xa>
 8005ab0:	4770      	bx	lr
 8005ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ab6:	e7f9      	b.n	8005aac <memset+0x4>

08005ab8 <iprintf>:
 8005ab8:	b40f      	push	{r0, r1, r2, r3}
 8005aba:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <iprintf+0x2c>)
 8005abc:	b513      	push	{r0, r1, r4, lr}
 8005abe:	681c      	ldr	r4, [r3, #0]
 8005ac0:	b124      	cbz	r4, 8005acc <iprintf+0x14>
 8005ac2:	69a3      	ldr	r3, [r4, #24]
 8005ac4:	b913      	cbnz	r3, 8005acc <iprintf+0x14>
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	f000 fb2c 	bl	8006124 <__sinit>
 8005acc:	ab05      	add	r3, sp, #20
 8005ace:	9a04      	ldr	r2, [sp, #16]
 8005ad0:	68a1      	ldr	r1, [r4, #8]
 8005ad2:	9301      	str	r3, [sp, #4]
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f000 fd3d 	bl	8006554 <_vfiprintf_r>
 8005ada:	b002      	add	sp, #8
 8005adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ae0:	b004      	add	sp, #16
 8005ae2:	4770      	bx	lr
 8005ae4:	2000000c 	.word	0x2000000c

08005ae8 <_puts_r>:
 8005ae8:	b570      	push	{r4, r5, r6, lr}
 8005aea:	460e      	mov	r6, r1
 8005aec:	4605      	mov	r5, r0
 8005aee:	b118      	cbz	r0, 8005af8 <_puts_r+0x10>
 8005af0:	6983      	ldr	r3, [r0, #24]
 8005af2:	b90b      	cbnz	r3, 8005af8 <_puts_r+0x10>
 8005af4:	f000 fb16 	bl	8006124 <__sinit>
 8005af8:	69ab      	ldr	r3, [r5, #24]
 8005afa:	68ac      	ldr	r4, [r5, #8]
 8005afc:	b913      	cbnz	r3, 8005b04 <_puts_r+0x1c>
 8005afe:	4628      	mov	r0, r5
 8005b00:	f000 fb10 	bl	8006124 <__sinit>
 8005b04:	4b2c      	ldr	r3, [pc, #176]	; (8005bb8 <_puts_r+0xd0>)
 8005b06:	429c      	cmp	r4, r3
 8005b08:	d120      	bne.n	8005b4c <_puts_r+0x64>
 8005b0a:	686c      	ldr	r4, [r5, #4]
 8005b0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b0e:	07db      	lsls	r3, r3, #31
 8005b10:	d405      	bmi.n	8005b1e <_puts_r+0x36>
 8005b12:	89a3      	ldrh	r3, [r4, #12]
 8005b14:	0598      	lsls	r0, r3, #22
 8005b16:	d402      	bmi.n	8005b1e <_puts_r+0x36>
 8005b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b1a:	f000 fba1 	bl	8006260 <__retarget_lock_acquire_recursive>
 8005b1e:	89a3      	ldrh	r3, [r4, #12]
 8005b20:	0719      	lsls	r1, r3, #28
 8005b22:	d51d      	bpl.n	8005b60 <_puts_r+0x78>
 8005b24:	6923      	ldr	r3, [r4, #16]
 8005b26:	b1db      	cbz	r3, 8005b60 <_puts_r+0x78>
 8005b28:	3e01      	subs	r6, #1
 8005b2a:	68a3      	ldr	r3, [r4, #8]
 8005b2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b30:	3b01      	subs	r3, #1
 8005b32:	60a3      	str	r3, [r4, #8]
 8005b34:	bb39      	cbnz	r1, 8005b86 <_puts_r+0x9e>
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	da38      	bge.n	8005bac <_puts_r+0xc4>
 8005b3a:	4622      	mov	r2, r4
 8005b3c:	210a      	movs	r1, #10
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f000 f916 	bl	8005d70 <__swbuf_r>
 8005b44:	3001      	adds	r0, #1
 8005b46:	d011      	beq.n	8005b6c <_puts_r+0x84>
 8005b48:	250a      	movs	r5, #10
 8005b4a:	e011      	b.n	8005b70 <_puts_r+0x88>
 8005b4c:	4b1b      	ldr	r3, [pc, #108]	; (8005bbc <_puts_r+0xd4>)
 8005b4e:	429c      	cmp	r4, r3
 8005b50:	d101      	bne.n	8005b56 <_puts_r+0x6e>
 8005b52:	68ac      	ldr	r4, [r5, #8]
 8005b54:	e7da      	b.n	8005b0c <_puts_r+0x24>
 8005b56:	4b1a      	ldr	r3, [pc, #104]	; (8005bc0 <_puts_r+0xd8>)
 8005b58:	429c      	cmp	r4, r3
 8005b5a:	bf08      	it	eq
 8005b5c:	68ec      	ldreq	r4, [r5, #12]
 8005b5e:	e7d5      	b.n	8005b0c <_puts_r+0x24>
 8005b60:	4621      	mov	r1, r4
 8005b62:	4628      	mov	r0, r5
 8005b64:	f000 f956 	bl	8005e14 <__swsetup_r>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	d0dd      	beq.n	8005b28 <_puts_r+0x40>
 8005b6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b72:	07da      	lsls	r2, r3, #31
 8005b74:	d405      	bmi.n	8005b82 <_puts_r+0x9a>
 8005b76:	89a3      	ldrh	r3, [r4, #12]
 8005b78:	059b      	lsls	r3, r3, #22
 8005b7a:	d402      	bmi.n	8005b82 <_puts_r+0x9a>
 8005b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b7e:	f000 fb70 	bl	8006262 <__retarget_lock_release_recursive>
 8005b82:	4628      	mov	r0, r5
 8005b84:	bd70      	pop	{r4, r5, r6, pc}
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	da04      	bge.n	8005b94 <_puts_r+0xac>
 8005b8a:	69a2      	ldr	r2, [r4, #24]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	dc06      	bgt.n	8005b9e <_puts_r+0xb6>
 8005b90:	290a      	cmp	r1, #10
 8005b92:	d004      	beq.n	8005b9e <_puts_r+0xb6>
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	6022      	str	r2, [r4, #0]
 8005b9a:	7019      	strb	r1, [r3, #0]
 8005b9c:	e7c5      	b.n	8005b2a <_puts_r+0x42>
 8005b9e:	4622      	mov	r2, r4
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f000 f8e5 	bl	8005d70 <__swbuf_r>
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	d1bf      	bne.n	8005b2a <_puts_r+0x42>
 8005baa:	e7df      	b.n	8005b6c <_puts_r+0x84>
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	250a      	movs	r5, #10
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	6022      	str	r2, [r4, #0]
 8005bb4:	701d      	strb	r5, [r3, #0]
 8005bb6:	e7db      	b.n	8005b70 <_puts_r+0x88>
 8005bb8:	0800714c 	.word	0x0800714c
 8005bbc:	0800716c 	.word	0x0800716c
 8005bc0:	0800712c 	.word	0x0800712c

08005bc4 <puts>:
 8005bc4:	4b02      	ldr	r3, [pc, #8]	; (8005bd0 <puts+0xc>)
 8005bc6:	4601      	mov	r1, r0
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	f7ff bf8d 	b.w	8005ae8 <_puts_r>
 8005bce:	bf00      	nop
 8005bd0:	2000000c 	.word	0x2000000c

08005bd4 <setbuf>:
 8005bd4:	2900      	cmp	r1, #0
 8005bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bda:	bf0c      	ite	eq
 8005bdc:	2202      	moveq	r2, #2
 8005bde:	2200      	movne	r2, #0
 8005be0:	f000 b800 	b.w	8005be4 <setvbuf>

08005be4 <setvbuf>:
 8005be4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005be8:	461d      	mov	r5, r3
 8005bea:	4b5d      	ldr	r3, [pc, #372]	; (8005d60 <setvbuf+0x17c>)
 8005bec:	681f      	ldr	r7, [r3, #0]
 8005bee:	4604      	mov	r4, r0
 8005bf0:	460e      	mov	r6, r1
 8005bf2:	4690      	mov	r8, r2
 8005bf4:	b127      	cbz	r7, 8005c00 <setvbuf+0x1c>
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	b913      	cbnz	r3, 8005c00 <setvbuf+0x1c>
 8005bfa:	4638      	mov	r0, r7
 8005bfc:	f000 fa92 	bl	8006124 <__sinit>
 8005c00:	4b58      	ldr	r3, [pc, #352]	; (8005d64 <setvbuf+0x180>)
 8005c02:	429c      	cmp	r4, r3
 8005c04:	d167      	bne.n	8005cd6 <setvbuf+0xf2>
 8005c06:	687c      	ldr	r4, [r7, #4]
 8005c08:	f1b8 0f02 	cmp.w	r8, #2
 8005c0c:	d006      	beq.n	8005c1c <setvbuf+0x38>
 8005c0e:	f1b8 0f01 	cmp.w	r8, #1
 8005c12:	f200 809f 	bhi.w	8005d54 <setvbuf+0x170>
 8005c16:	2d00      	cmp	r5, #0
 8005c18:	f2c0 809c 	blt.w	8005d54 <setvbuf+0x170>
 8005c1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c1e:	07db      	lsls	r3, r3, #31
 8005c20:	d405      	bmi.n	8005c2e <setvbuf+0x4a>
 8005c22:	89a3      	ldrh	r3, [r4, #12]
 8005c24:	0598      	lsls	r0, r3, #22
 8005c26:	d402      	bmi.n	8005c2e <setvbuf+0x4a>
 8005c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c2a:	f000 fb19 	bl	8006260 <__retarget_lock_acquire_recursive>
 8005c2e:	4621      	mov	r1, r4
 8005c30:	4638      	mov	r0, r7
 8005c32:	f000 f9e3 	bl	8005ffc <_fflush_r>
 8005c36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c38:	b141      	cbz	r1, 8005c4c <setvbuf+0x68>
 8005c3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c3e:	4299      	cmp	r1, r3
 8005c40:	d002      	beq.n	8005c48 <setvbuf+0x64>
 8005c42:	4638      	mov	r0, r7
 8005c44:	f000 fb7c 	bl	8006340 <_free_r>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	6363      	str	r3, [r4, #52]	; 0x34
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	61a3      	str	r3, [r4, #24]
 8005c50:	6063      	str	r3, [r4, #4]
 8005c52:	89a3      	ldrh	r3, [r4, #12]
 8005c54:	0619      	lsls	r1, r3, #24
 8005c56:	d503      	bpl.n	8005c60 <setvbuf+0x7c>
 8005c58:	6921      	ldr	r1, [r4, #16]
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	f000 fb70 	bl	8006340 <_free_r>
 8005c60:	89a3      	ldrh	r3, [r4, #12]
 8005c62:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005c66:	f023 0303 	bic.w	r3, r3, #3
 8005c6a:	f1b8 0f02 	cmp.w	r8, #2
 8005c6e:	81a3      	strh	r3, [r4, #12]
 8005c70:	d06c      	beq.n	8005d4c <setvbuf+0x168>
 8005c72:	ab01      	add	r3, sp, #4
 8005c74:	466a      	mov	r2, sp
 8005c76:	4621      	mov	r1, r4
 8005c78:	4638      	mov	r0, r7
 8005c7a:	f000 faf3 	bl	8006264 <__swhatbuf_r>
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	4318      	orrs	r0, r3
 8005c82:	81a0      	strh	r0, [r4, #12]
 8005c84:	2d00      	cmp	r5, #0
 8005c86:	d130      	bne.n	8005cea <setvbuf+0x106>
 8005c88:	9d00      	ldr	r5, [sp, #0]
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f000 fb50 	bl	8006330 <malloc>
 8005c90:	4606      	mov	r6, r0
 8005c92:	2800      	cmp	r0, #0
 8005c94:	d155      	bne.n	8005d42 <setvbuf+0x15e>
 8005c96:	f8dd 9000 	ldr.w	r9, [sp]
 8005c9a:	45a9      	cmp	r9, r5
 8005c9c:	d14a      	bne.n	8005d34 <setvbuf+0x150>
 8005c9e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	60a2      	str	r2, [r4, #8]
 8005ca6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005caa:	6022      	str	r2, [r4, #0]
 8005cac:	6122      	str	r2, [r4, #16]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cb4:	6162      	str	r2, [r4, #20]
 8005cb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cb8:	f043 0302 	orr.w	r3, r3, #2
 8005cbc:	07d2      	lsls	r2, r2, #31
 8005cbe:	81a3      	strh	r3, [r4, #12]
 8005cc0:	d405      	bmi.n	8005cce <setvbuf+0xea>
 8005cc2:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005cc6:	d102      	bne.n	8005cce <setvbuf+0xea>
 8005cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cca:	f000 faca 	bl	8006262 <__retarget_lock_release_recursive>
 8005cce:	4628      	mov	r0, r5
 8005cd0:	b003      	add	sp, #12
 8005cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cd6:	4b24      	ldr	r3, [pc, #144]	; (8005d68 <setvbuf+0x184>)
 8005cd8:	429c      	cmp	r4, r3
 8005cda:	d101      	bne.n	8005ce0 <setvbuf+0xfc>
 8005cdc:	68bc      	ldr	r4, [r7, #8]
 8005cde:	e793      	b.n	8005c08 <setvbuf+0x24>
 8005ce0:	4b22      	ldr	r3, [pc, #136]	; (8005d6c <setvbuf+0x188>)
 8005ce2:	429c      	cmp	r4, r3
 8005ce4:	bf08      	it	eq
 8005ce6:	68fc      	ldreq	r4, [r7, #12]
 8005ce8:	e78e      	b.n	8005c08 <setvbuf+0x24>
 8005cea:	2e00      	cmp	r6, #0
 8005cec:	d0cd      	beq.n	8005c8a <setvbuf+0xa6>
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	b913      	cbnz	r3, 8005cf8 <setvbuf+0x114>
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	f000 fa16 	bl	8006124 <__sinit>
 8005cf8:	f1b8 0f01 	cmp.w	r8, #1
 8005cfc:	bf08      	it	eq
 8005cfe:	89a3      	ldrheq	r3, [r4, #12]
 8005d00:	6026      	str	r6, [r4, #0]
 8005d02:	bf04      	itt	eq
 8005d04:	f043 0301 	orreq.w	r3, r3, #1
 8005d08:	81a3      	strheq	r3, [r4, #12]
 8005d0a:	89a2      	ldrh	r2, [r4, #12]
 8005d0c:	f012 0308 	ands.w	r3, r2, #8
 8005d10:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005d14:	d01c      	beq.n	8005d50 <setvbuf+0x16c>
 8005d16:	07d3      	lsls	r3, r2, #31
 8005d18:	bf41      	itttt	mi
 8005d1a:	2300      	movmi	r3, #0
 8005d1c:	426d      	negmi	r5, r5
 8005d1e:	60a3      	strmi	r3, [r4, #8]
 8005d20:	61a5      	strmi	r5, [r4, #24]
 8005d22:	bf58      	it	pl
 8005d24:	60a5      	strpl	r5, [r4, #8]
 8005d26:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005d28:	f015 0501 	ands.w	r5, r5, #1
 8005d2c:	d115      	bne.n	8005d5a <setvbuf+0x176>
 8005d2e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005d32:	e7c8      	b.n	8005cc6 <setvbuf+0xe2>
 8005d34:	4648      	mov	r0, r9
 8005d36:	f000 fafb 	bl	8006330 <malloc>
 8005d3a:	4606      	mov	r6, r0
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	d0ae      	beq.n	8005c9e <setvbuf+0xba>
 8005d40:	464d      	mov	r5, r9
 8005d42:	89a3      	ldrh	r3, [r4, #12]
 8005d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d48:	81a3      	strh	r3, [r4, #12]
 8005d4a:	e7d0      	b.n	8005cee <setvbuf+0x10a>
 8005d4c:	2500      	movs	r5, #0
 8005d4e:	e7a8      	b.n	8005ca2 <setvbuf+0xbe>
 8005d50:	60a3      	str	r3, [r4, #8]
 8005d52:	e7e8      	b.n	8005d26 <setvbuf+0x142>
 8005d54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005d58:	e7b9      	b.n	8005cce <setvbuf+0xea>
 8005d5a:	2500      	movs	r5, #0
 8005d5c:	e7b7      	b.n	8005cce <setvbuf+0xea>
 8005d5e:	bf00      	nop
 8005d60:	2000000c 	.word	0x2000000c
 8005d64:	0800714c 	.word	0x0800714c
 8005d68:	0800716c 	.word	0x0800716c
 8005d6c:	0800712c 	.word	0x0800712c

08005d70 <__swbuf_r>:
 8005d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d72:	460e      	mov	r6, r1
 8005d74:	4614      	mov	r4, r2
 8005d76:	4605      	mov	r5, r0
 8005d78:	b118      	cbz	r0, 8005d82 <__swbuf_r+0x12>
 8005d7a:	6983      	ldr	r3, [r0, #24]
 8005d7c:	b90b      	cbnz	r3, 8005d82 <__swbuf_r+0x12>
 8005d7e:	f000 f9d1 	bl	8006124 <__sinit>
 8005d82:	4b21      	ldr	r3, [pc, #132]	; (8005e08 <__swbuf_r+0x98>)
 8005d84:	429c      	cmp	r4, r3
 8005d86:	d12b      	bne.n	8005de0 <__swbuf_r+0x70>
 8005d88:	686c      	ldr	r4, [r5, #4]
 8005d8a:	69a3      	ldr	r3, [r4, #24]
 8005d8c:	60a3      	str	r3, [r4, #8]
 8005d8e:	89a3      	ldrh	r3, [r4, #12]
 8005d90:	071a      	lsls	r2, r3, #28
 8005d92:	d52f      	bpl.n	8005df4 <__swbuf_r+0x84>
 8005d94:	6923      	ldr	r3, [r4, #16]
 8005d96:	b36b      	cbz	r3, 8005df4 <__swbuf_r+0x84>
 8005d98:	6923      	ldr	r3, [r4, #16]
 8005d9a:	6820      	ldr	r0, [r4, #0]
 8005d9c:	1ac0      	subs	r0, r0, r3
 8005d9e:	6963      	ldr	r3, [r4, #20]
 8005da0:	b2f6      	uxtb	r6, r6
 8005da2:	4283      	cmp	r3, r0
 8005da4:	4637      	mov	r7, r6
 8005da6:	dc04      	bgt.n	8005db2 <__swbuf_r+0x42>
 8005da8:	4621      	mov	r1, r4
 8005daa:	4628      	mov	r0, r5
 8005dac:	f000 f926 	bl	8005ffc <_fflush_r>
 8005db0:	bb30      	cbnz	r0, 8005e00 <__swbuf_r+0x90>
 8005db2:	68a3      	ldr	r3, [r4, #8]
 8005db4:	3b01      	subs	r3, #1
 8005db6:	60a3      	str	r3, [r4, #8]
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	6022      	str	r2, [r4, #0]
 8005dbe:	701e      	strb	r6, [r3, #0]
 8005dc0:	6963      	ldr	r3, [r4, #20]
 8005dc2:	3001      	adds	r0, #1
 8005dc4:	4283      	cmp	r3, r0
 8005dc6:	d004      	beq.n	8005dd2 <__swbuf_r+0x62>
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	07db      	lsls	r3, r3, #31
 8005dcc:	d506      	bpl.n	8005ddc <__swbuf_r+0x6c>
 8005dce:	2e0a      	cmp	r6, #10
 8005dd0:	d104      	bne.n	8005ddc <__swbuf_r+0x6c>
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	f000 f911 	bl	8005ffc <_fflush_r>
 8005dda:	b988      	cbnz	r0, 8005e00 <__swbuf_r+0x90>
 8005ddc:	4638      	mov	r0, r7
 8005dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005de0:	4b0a      	ldr	r3, [pc, #40]	; (8005e0c <__swbuf_r+0x9c>)
 8005de2:	429c      	cmp	r4, r3
 8005de4:	d101      	bne.n	8005dea <__swbuf_r+0x7a>
 8005de6:	68ac      	ldr	r4, [r5, #8]
 8005de8:	e7cf      	b.n	8005d8a <__swbuf_r+0x1a>
 8005dea:	4b09      	ldr	r3, [pc, #36]	; (8005e10 <__swbuf_r+0xa0>)
 8005dec:	429c      	cmp	r4, r3
 8005dee:	bf08      	it	eq
 8005df0:	68ec      	ldreq	r4, [r5, #12]
 8005df2:	e7ca      	b.n	8005d8a <__swbuf_r+0x1a>
 8005df4:	4621      	mov	r1, r4
 8005df6:	4628      	mov	r0, r5
 8005df8:	f000 f80c 	bl	8005e14 <__swsetup_r>
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	d0cb      	beq.n	8005d98 <__swbuf_r+0x28>
 8005e00:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005e04:	e7ea      	b.n	8005ddc <__swbuf_r+0x6c>
 8005e06:	bf00      	nop
 8005e08:	0800714c 	.word	0x0800714c
 8005e0c:	0800716c 	.word	0x0800716c
 8005e10:	0800712c 	.word	0x0800712c

08005e14 <__swsetup_r>:
 8005e14:	4b32      	ldr	r3, [pc, #200]	; (8005ee0 <__swsetup_r+0xcc>)
 8005e16:	b570      	push	{r4, r5, r6, lr}
 8005e18:	681d      	ldr	r5, [r3, #0]
 8005e1a:	4606      	mov	r6, r0
 8005e1c:	460c      	mov	r4, r1
 8005e1e:	b125      	cbz	r5, 8005e2a <__swsetup_r+0x16>
 8005e20:	69ab      	ldr	r3, [r5, #24]
 8005e22:	b913      	cbnz	r3, 8005e2a <__swsetup_r+0x16>
 8005e24:	4628      	mov	r0, r5
 8005e26:	f000 f97d 	bl	8006124 <__sinit>
 8005e2a:	4b2e      	ldr	r3, [pc, #184]	; (8005ee4 <__swsetup_r+0xd0>)
 8005e2c:	429c      	cmp	r4, r3
 8005e2e:	d10f      	bne.n	8005e50 <__swsetup_r+0x3c>
 8005e30:	686c      	ldr	r4, [r5, #4]
 8005e32:	89a3      	ldrh	r3, [r4, #12]
 8005e34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e38:	0719      	lsls	r1, r3, #28
 8005e3a:	d42c      	bmi.n	8005e96 <__swsetup_r+0x82>
 8005e3c:	06dd      	lsls	r5, r3, #27
 8005e3e:	d411      	bmi.n	8005e64 <__swsetup_r+0x50>
 8005e40:	2309      	movs	r3, #9
 8005e42:	6033      	str	r3, [r6, #0]
 8005e44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e48:	81a3      	strh	r3, [r4, #12]
 8005e4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e4e:	e03e      	b.n	8005ece <__swsetup_r+0xba>
 8005e50:	4b25      	ldr	r3, [pc, #148]	; (8005ee8 <__swsetup_r+0xd4>)
 8005e52:	429c      	cmp	r4, r3
 8005e54:	d101      	bne.n	8005e5a <__swsetup_r+0x46>
 8005e56:	68ac      	ldr	r4, [r5, #8]
 8005e58:	e7eb      	b.n	8005e32 <__swsetup_r+0x1e>
 8005e5a:	4b24      	ldr	r3, [pc, #144]	; (8005eec <__swsetup_r+0xd8>)
 8005e5c:	429c      	cmp	r4, r3
 8005e5e:	bf08      	it	eq
 8005e60:	68ec      	ldreq	r4, [r5, #12]
 8005e62:	e7e6      	b.n	8005e32 <__swsetup_r+0x1e>
 8005e64:	0758      	lsls	r0, r3, #29
 8005e66:	d512      	bpl.n	8005e8e <__swsetup_r+0x7a>
 8005e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e6a:	b141      	cbz	r1, 8005e7e <__swsetup_r+0x6a>
 8005e6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e70:	4299      	cmp	r1, r3
 8005e72:	d002      	beq.n	8005e7a <__swsetup_r+0x66>
 8005e74:	4630      	mov	r0, r6
 8005e76:	f000 fa63 	bl	8006340 <_free_r>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	6363      	str	r3, [r4, #52]	; 0x34
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e84:	81a3      	strh	r3, [r4, #12]
 8005e86:	2300      	movs	r3, #0
 8005e88:	6063      	str	r3, [r4, #4]
 8005e8a:	6923      	ldr	r3, [r4, #16]
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	f043 0308 	orr.w	r3, r3, #8
 8005e94:	81a3      	strh	r3, [r4, #12]
 8005e96:	6923      	ldr	r3, [r4, #16]
 8005e98:	b94b      	cbnz	r3, 8005eae <__swsetup_r+0x9a>
 8005e9a:	89a3      	ldrh	r3, [r4, #12]
 8005e9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ea4:	d003      	beq.n	8005eae <__swsetup_r+0x9a>
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	f000 fa01 	bl	80062b0 <__smakebuf_r>
 8005eae:	89a0      	ldrh	r0, [r4, #12]
 8005eb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005eb4:	f010 0301 	ands.w	r3, r0, #1
 8005eb8:	d00a      	beq.n	8005ed0 <__swsetup_r+0xbc>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60a3      	str	r3, [r4, #8]
 8005ebe:	6963      	ldr	r3, [r4, #20]
 8005ec0:	425b      	negs	r3, r3
 8005ec2:	61a3      	str	r3, [r4, #24]
 8005ec4:	6923      	ldr	r3, [r4, #16]
 8005ec6:	b943      	cbnz	r3, 8005eda <__swsetup_r+0xc6>
 8005ec8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ecc:	d1ba      	bne.n	8005e44 <__swsetup_r+0x30>
 8005ece:	bd70      	pop	{r4, r5, r6, pc}
 8005ed0:	0781      	lsls	r1, r0, #30
 8005ed2:	bf58      	it	pl
 8005ed4:	6963      	ldrpl	r3, [r4, #20]
 8005ed6:	60a3      	str	r3, [r4, #8]
 8005ed8:	e7f4      	b.n	8005ec4 <__swsetup_r+0xb0>
 8005eda:	2000      	movs	r0, #0
 8005edc:	e7f7      	b.n	8005ece <__swsetup_r+0xba>
 8005ede:	bf00      	nop
 8005ee0:	2000000c 	.word	0x2000000c
 8005ee4:	0800714c 	.word	0x0800714c
 8005ee8:	0800716c 	.word	0x0800716c
 8005eec:	0800712c 	.word	0x0800712c

08005ef0 <__sflush_r>:
 8005ef0:	898a      	ldrh	r2, [r1, #12]
 8005ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef6:	4605      	mov	r5, r0
 8005ef8:	0710      	lsls	r0, r2, #28
 8005efa:	460c      	mov	r4, r1
 8005efc:	d458      	bmi.n	8005fb0 <__sflush_r+0xc0>
 8005efe:	684b      	ldr	r3, [r1, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	dc05      	bgt.n	8005f10 <__sflush_r+0x20>
 8005f04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	dc02      	bgt.n	8005f10 <__sflush_r+0x20>
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f12:	2e00      	cmp	r6, #0
 8005f14:	d0f9      	beq.n	8005f0a <__sflush_r+0x1a>
 8005f16:	2300      	movs	r3, #0
 8005f18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f1c:	682f      	ldr	r7, [r5, #0]
 8005f1e:	602b      	str	r3, [r5, #0]
 8005f20:	d032      	beq.n	8005f88 <__sflush_r+0x98>
 8005f22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	075a      	lsls	r2, r3, #29
 8005f28:	d505      	bpl.n	8005f36 <__sflush_r+0x46>
 8005f2a:	6863      	ldr	r3, [r4, #4]
 8005f2c:	1ac0      	subs	r0, r0, r3
 8005f2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f30:	b10b      	cbz	r3, 8005f36 <__sflush_r+0x46>
 8005f32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f34:	1ac0      	subs	r0, r0, r3
 8005f36:	2300      	movs	r3, #0
 8005f38:	4602      	mov	r2, r0
 8005f3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f3c:	6a21      	ldr	r1, [r4, #32]
 8005f3e:	4628      	mov	r0, r5
 8005f40:	47b0      	blx	r6
 8005f42:	1c43      	adds	r3, r0, #1
 8005f44:	89a3      	ldrh	r3, [r4, #12]
 8005f46:	d106      	bne.n	8005f56 <__sflush_r+0x66>
 8005f48:	6829      	ldr	r1, [r5, #0]
 8005f4a:	291d      	cmp	r1, #29
 8005f4c:	d82c      	bhi.n	8005fa8 <__sflush_r+0xb8>
 8005f4e:	4a2a      	ldr	r2, [pc, #168]	; (8005ff8 <__sflush_r+0x108>)
 8005f50:	40ca      	lsrs	r2, r1
 8005f52:	07d6      	lsls	r6, r2, #31
 8005f54:	d528      	bpl.n	8005fa8 <__sflush_r+0xb8>
 8005f56:	2200      	movs	r2, #0
 8005f58:	6062      	str	r2, [r4, #4]
 8005f5a:	04d9      	lsls	r1, r3, #19
 8005f5c:	6922      	ldr	r2, [r4, #16]
 8005f5e:	6022      	str	r2, [r4, #0]
 8005f60:	d504      	bpl.n	8005f6c <__sflush_r+0x7c>
 8005f62:	1c42      	adds	r2, r0, #1
 8005f64:	d101      	bne.n	8005f6a <__sflush_r+0x7a>
 8005f66:	682b      	ldr	r3, [r5, #0]
 8005f68:	b903      	cbnz	r3, 8005f6c <__sflush_r+0x7c>
 8005f6a:	6560      	str	r0, [r4, #84]	; 0x54
 8005f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f6e:	602f      	str	r7, [r5, #0]
 8005f70:	2900      	cmp	r1, #0
 8005f72:	d0ca      	beq.n	8005f0a <__sflush_r+0x1a>
 8005f74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f78:	4299      	cmp	r1, r3
 8005f7a:	d002      	beq.n	8005f82 <__sflush_r+0x92>
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	f000 f9df 	bl	8006340 <_free_r>
 8005f82:	2000      	movs	r0, #0
 8005f84:	6360      	str	r0, [r4, #52]	; 0x34
 8005f86:	e7c1      	b.n	8005f0c <__sflush_r+0x1c>
 8005f88:	6a21      	ldr	r1, [r4, #32]
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	47b0      	blx	r6
 8005f90:	1c41      	adds	r1, r0, #1
 8005f92:	d1c7      	bne.n	8005f24 <__sflush_r+0x34>
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d0c4      	beq.n	8005f24 <__sflush_r+0x34>
 8005f9a:	2b1d      	cmp	r3, #29
 8005f9c:	d001      	beq.n	8005fa2 <__sflush_r+0xb2>
 8005f9e:	2b16      	cmp	r3, #22
 8005fa0:	d101      	bne.n	8005fa6 <__sflush_r+0xb6>
 8005fa2:	602f      	str	r7, [r5, #0]
 8005fa4:	e7b1      	b.n	8005f0a <__sflush_r+0x1a>
 8005fa6:	89a3      	ldrh	r3, [r4, #12]
 8005fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fac:	81a3      	strh	r3, [r4, #12]
 8005fae:	e7ad      	b.n	8005f0c <__sflush_r+0x1c>
 8005fb0:	690f      	ldr	r7, [r1, #16]
 8005fb2:	2f00      	cmp	r7, #0
 8005fb4:	d0a9      	beq.n	8005f0a <__sflush_r+0x1a>
 8005fb6:	0793      	lsls	r3, r2, #30
 8005fb8:	680e      	ldr	r6, [r1, #0]
 8005fba:	bf08      	it	eq
 8005fbc:	694b      	ldreq	r3, [r1, #20]
 8005fbe:	600f      	str	r7, [r1, #0]
 8005fc0:	bf18      	it	ne
 8005fc2:	2300      	movne	r3, #0
 8005fc4:	eba6 0807 	sub.w	r8, r6, r7
 8005fc8:	608b      	str	r3, [r1, #8]
 8005fca:	f1b8 0f00 	cmp.w	r8, #0
 8005fce:	dd9c      	ble.n	8005f0a <__sflush_r+0x1a>
 8005fd0:	6a21      	ldr	r1, [r4, #32]
 8005fd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005fd4:	4643      	mov	r3, r8
 8005fd6:	463a      	mov	r2, r7
 8005fd8:	4628      	mov	r0, r5
 8005fda:	47b0      	blx	r6
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	dc06      	bgt.n	8005fee <__sflush_r+0xfe>
 8005fe0:	89a3      	ldrh	r3, [r4, #12]
 8005fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fe6:	81a3      	strh	r3, [r4, #12]
 8005fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fec:	e78e      	b.n	8005f0c <__sflush_r+0x1c>
 8005fee:	4407      	add	r7, r0
 8005ff0:	eba8 0800 	sub.w	r8, r8, r0
 8005ff4:	e7e9      	b.n	8005fca <__sflush_r+0xda>
 8005ff6:	bf00      	nop
 8005ff8:	20400001 	.word	0x20400001

08005ffc <_fflush_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	690b      	ldr	r3, [r1, #16]
 8006000:	4605      	mov	r5, r0
 8006002:	460c      	mov	r4, r1
 8006004:	b913      	cbnz	r3, 800600c <_fflush_r+0x10>
 8006006:	2500      	movs	r5, #0
 8006008:	4628      	mov	r0, r5
 800600a:	bd38      	pop	{r3, r4, r5, pc}
 800600c:	b118      	cbz	r0, 8006016 <_fflush_r+0x1a>
 800600e:	6983      	ldr	r3, [r0, #24]
 8006010:	b90b      	cbnz	r3, 8006016 <_fflush_r+0x1a>
 8006012:	f000 f887 	bl	8006124 <__sinit>
 8006016:	4b14      	ldr	r3, [pc, #80]	; (8006068 <_fflush_r+0x6c>)
 8006018:	429c      	cmp	r4, r3
 800601a:	d11b      	bne.n	8006054 <_fflush_r+0x58>
 800601c:	686c      	ldr	r4, [r5, #4]
 800601e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0ef      	beq.n	8006006 <_fflush_r+0xa>
 8006026:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006028:	07d0      	lsls	r0, r2, #31
 800602a:	d404      	bmi.n	8006036 <_fflush_r+0x3a>
 800602c:	0599      	lsls	r1, r3, #22
 800602e:	d402      	bmi.n	8006036 <_fflush_r+0x3a>
 8006030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006032:	f000 f915 	bl	8006260 <__retarget_lock_acquire_recursive>
 8006036:	4628      	mov	r0, r5
 8006038:	4621      	mov	r1, r4
 800603a:	f7ff ff59 	bl	8005ef0 <__sflush_r>
 800603e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006040:	07da      	lsls	r2, r3, #31
 8006042:	4605      	mov	r5, r0
 8006044:	d4e0      	bmi.n	8006008 <_fflush_r+0xc>
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	059b      	lsls	r3, r3, #22
 800604a:	d4dd      	bmi.n	8006008 <_fflush_r+0xc>
 800604c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800604e:	f000 f908 	bl	8006262 <__retarget_lock_release_recursive>
 8006052:	e7d9      	b.n	8006008 <_fflush_r+0xc>
 8006054:	4b05      	ldr	r3, [pc, #20]	; (800606c <_fflush_r+0x70>)
 8006056:	429c      	cmp	r4, r3
 8006058:	d101      	bne.n	800605e <_fflush_r+0x62>
 800605a:	68ac      	ldr	r4, [r5, #8]
 800605c:	e7df      	b.n	800601e <_fflush_r+0x22>
 800605e:	4b04      	ldr	r3, [pc, #16]	; (8006070 <_fflush_r+0x74>)
 8006060:	429c      	cmp	r4, r3
 8006062:	bf08      	it	eq
 8006064:	68ec      	ldreq	r4, [r5, #12]
 8006066:	e7da      	b.n	800601e <_fflush_r+0x22>
 8006068:	0800714c 	.word	0x0800714c
 800606c:	0800716c 	.word	0x0800716c
 8006070:	0800712c 	.word	0x0800712c

08006074 <std>:
 8006074:	2300      	movs	r3, #0
 8006076:	b510      	push	{r4, lr}
 8006078:	4604      	mov	r4, r0
 800607a:	e9c0 3300 	strd	r3, r3, [r0]
 800607e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006082:	6083      	str	r3, [r0, #8]
 8006084:	8181      	strh	r1, [r0, #12]
 8006086:	6643      	str	r3, [r0, #100]	; 0x64
 8006088:	81c2      	strh	r2, [r0, #14]
 800608a:	6183      	str	r3, [r0, #24]
 800608c:	4619      	mov	r1, r3
 800608e:	2208      	movs	r2, #8
 8006090:	305c      	adds	r0, #92	; 0x5c
 8006092:	f7ff fd09 	bl	8005aa8 <memset>
 8006096:	4b05      	ldr	r3, [pc, #20]	; (80060ac <std+0x38>)
 8006098:	6263      	str	r3, [r4, #36]	; 0x24
 800609a:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <std+0x3c>)
 800609c:	62a3      	str	r3, [r4, #40]	; 0x28
 800609e:	4b05      	ldr	r3, [pc, #20]	; (80060b4 <std+0x40>)
 80060a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060a2:	4b05      	ldr	r3, [pc, #20]	; (80060b8 <std+0x44>)
 80060a4:	6224      	str	r4, [r4, #32]
 80060a6:	6323      	str	r3, [r4, #48]	; 0x30
 80060a8:	bd10      	pop	{r4, pc}
 80060aa:	bf00      	nop
 80060ac:	08006afd 	.word	0x08006afd
 80060b0:	08006b1f 	.word	0x08006b1f
 80060b4:	08006b57 	.word	0x08006b57
 80060b8:	08006b7b 	.word	0x08006b7b

080060bc <_cleanup_r>:
 80060bc:	4901      	ldr	r1, [pc, #4]	; (80060c4 <_cleanup_r+0x8>)
 80060be:	f000 b8af 	b.w	8006220 <_fwalk_reent>
 80060c2:	bf00      	nop
 80060c4:	08005ffd 	.word	0x08005ffd

080060c8 <__sfmoreglue>:
 80060c8:	b570      	push	{r4, r5, r6, lr}
 80060ca:	2268      	movs	r2, #104	; 0x68
 80060cc:	1e4d      	subs	r5, r1, #1
 80060ce:	4355      	muls	r5, r2
 80060d0:	460e      	mov	r6, r1
 80060d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80060d6:	f000 f99f 	bl	8006418 <_malloc_r>
 80060da:	4604      	mov	r4, r0
 80060dc:	b140      	cbz	r0, 80060f0 <__sfmoreglue+0x28>
 80060de:	2100      	movs	r1, #0
 80060e0:	e9c0 1600 	strd	r1, r6, [r0]
 80060e4:	300c      	adds	r0, #12
 80060e6:	60a0      	str	r0, [r4, #8]
 80060e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80060ec:	f7ff fcdc 	bl	8005aa8 <memset>
 80060f0:	4620      	mov	r0, r4
 80060f2:	bd70      	pop	{r4, r5, r6, pc}

080060f4 <__sfp_lock_acquire>:
 80060f4:	4801      	ldr	r0, [pc, #4]	; (80060fc <__sfp_lock_acquire+0x8>)
 80060f6:	f000 b8b3 	b.w	8006260 <__retarget_lock_acquire_recursive>
 80060fa:	bf00      	nop
 80060fc:	2000085d 	.word	0x2000085d

08006100 <__sfp_lock_release>:
 8006100:	4801      	ldr	r0, [pc, #4]	; (8006108 <__sfp_lock_release+0x8>)
 8006102:	f000 b8ae 	b.w	8006262 <__retarget_lock_release_recursive>
 8006106:	bf00      	nop
 8006108:	2000085d 	.word	0x2000085d

0800610c <__sinit_lock_acquire>:
 800610c:	4801      	ldr	r0, [pc, #4]	; (8006114 <__sinit_lock_acquire+0x8>)
 800610e:	f000 b8a7 	b.w	8006260 <__retarget_lock_acquire_recursive>
 8006112:	bf00      	nop
 8006114:	2000085e 	.word	0x2000085e

08006118 <__sinit_lock_release>:
 8006118:	4801      	ldr	r0, [pc, #4]	; (8006120 <__sinit_lock_release+0x8>)
 800611a:	f000 b8a2 	b.w	8006262 <__retarget_lock_release_recursive>
 800611e:	bf00      	nop
 8006120:	2000085e 	.word	0x2000085e

08006124 <__sinit>:
 8006124:	b510      	push	{r4, lr}
 8006126:	4604      	mov	r4, r0
 8006128:	f7ff fff0 	bl	800610c <__sinit_lock_acquire>
 800612c:	69a3      	ldr	r3, [r4, #24]
 800612e:	b11b      	cbz	r3, 8006138 <__sinit+0x14>
 8006130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006134:	f7ff bff0 	b.w	8006118 <__sinit_lock_release>
 8006138:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800613c:	6523      	str	r3, [r4, #80]	; 0x50
 800613e:	4b13      	ldr	r3, [pc, #76]	; (800618c <__sinit+0x68>)
 8006140:	4a13      	ldr	r2, [pc, #76]	; (8006190 <__sinit+0x6c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	62a2      	str	r2, [r4, #40]	; 0x28
 8006146:	42a3      	cmp	r3, r4
 8006148:	bf04      	itt	eq
 800614a:	2301      	moveq	r3, #1
 800614c:	61a3      	streq	r3, [r4, #24]
 800614e:	4620      	mov	r0, r4
 8006150:	f000 f820 	bl	8006194 <__sfp>
 8006154:	6060      	str	r0, [r4, #4]
 8006156:	4620      	mov	r0, r4
 8006158:	f000 f81c 	bl	8006194 <__sfp>
 800615c:	60a0      	str	r0, [r4, #8]
 800615e:	4620      	mov	r0, r4
 8006160:	f000 f818 	bl	8006194 <__sfp>
 8006164:	2200      	movs	r2, #0
 8006166:	60e0      	str	r0, [r4, #12]
 8006168:	2104      	movs	r1, #4
 800616a:	6860      	ldr	r0, [r4, #4]
 800616c:	f7ff ff82 	bl	8006074 <std>
 8006170:	68a0      	ldr	r0, [r4, #8]
 8006172:	2201      	movs	r2, #1
 8006174:	2109      	movs	r1, #9
 8006176:	f7ff ff7d 	bl	8006074 <std>
 800617a:	68e0      	ldr	r0, [r4, #12]
 800617c:	2202      	movs	r2, #2
 800617e:	2112      	movs	r1, #18
 8006180:	f7ff ff78 	bl	8006074 <std>
 8006184:	2301      	movs	r3, #1
 8006186:	61a3      	str	r3, [r4, #24]
 8006188:	e7d2      	b.n	8006130 <__sinit+0xc>
 800618a:	bf00      	nop
 800618c:	08007128 	.word	0x08007128
 8006190:	080060bd 	.word	0x080060bd

08006194 <__sfp>:
 8006194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006196:	4607      	mov	r7, r0
 8006198:	f7ff ffac 	bl	80060f4 <__sfp_lock_acquire>
 800619c:	4b1e      	ldr	r3, [pc, #120]	; (8006218 <__sfp+0x84>)
 800619e:	681e      	ldr	r6, [r3, #0]
 80061a0:	69b3      	ldr	r3, [r6, #24]
 80061a2:	b913      	cbnz	r3, 80061aa <__sfp+0x16>
 80061a4:	4630      	mov	r0, r6
 80061a6:	f7ff ffbd 	bl	8006124 <__sinit>
 80061aa:	3648      	adds	r6, #72	; 0x48
 80061ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	d503      	bpl.n	80061bc <__sfp+0x28>
 80061b4:	6833      	ldr	r3, [r6, #0]
 80061b6:	b30b      	cbz	r3, 80061fc <__sfp+0x68>
 80061b8:	6836      	ldr	r6, [r6, #0]
 80061ba:	e7f7      	b.n	80061ac <__sfp+0x18>
 80061bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80061c0:	b9d5      	cbnz	r5, 80061f8 <__sfp+0x64>
 80061c2:	4b16      	ldr	r3, [pc, #88]	; (800621c <__sfp+0x88>)
 80061c4:	60e3      	str	r3, [r4, #12]
 80061c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80061ca:	6665      	str	r5, [r4, #100]	; 0x64
 80061cc:	f000 f847 	bl	800625e <__retarget_lock_init_recursive>
 80061d0:	f7ff ff96 	bl	8006100 <__sfp_lock_release>
 80061d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80061d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80061dc:	6025      	str	r5, [r4, #0]
 80061de:	61a5      	str	r5, [r4, #24]
 80061e0:	2208      	movs	r2, #8
 80061e2:	4629      	mov	r1, r5
 80061e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061e8:	f7ff fc5e 	bl	8005aa8 <memset>
 80061ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061f4:	4620      	mov	r0, r4
 80061f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061f8:	3468      	adds	r4, #104	; 0x68
 80061fa:	e7d9      	b.n	80061b0 <__sfp+0x1c>
 80061fc:	2104      	movs	r1, #4
 80061fe:	4638      	mov	r0, r7
 8006200:	f7ff ff62 	bl	80060c8 <__sfmoreglue>
 8006204:	4604      	mov	r4, r0
 8006206:	6030      	str	r0, [r6, #0]
 8006208:	2800      	cmp	r0, #0
 800620a:	d1d5      	bne.n	80061b8 <__sfp+0x24>
 800620c:	f7ff ff78 	bl	8006100 <__sfp_lock_release>
 8006210:	230c      	movs	r3, #12
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	e7ee      	b.n	80061f4 <__sfp+0x60>
 8006216:	bf00      	nop
 8006218:	08007128 	.word	0x08007128
 800621c:	ffff0001 	.word	0xffff0001

08006220 <_fwalk_reent>:
 8006220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006224:	4606      	mov	r6, r0
 8006226:	4688      	mov	r8, r1
 8006228:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800622c:	2700      	movs	r7, #0
 800622e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006232:	f1b9 0901 	subs.w	r9, r9, #1
 8006236:	d505      	bpl.n	8006244 <_fwalk_reent+0x24>
 8006238:	6824      	ldr	r4, [r4, #0]
 800623a:	2c00      	cmp	r4, #0
 800623c:	d1f7      	bne.n	800622e <_fwalk_reent+0xe>
 800623e:	4638      	mov	r0, r7
 8006240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006244:	89ab      	ldrh	r3, [r5, #12]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d907      	bls.n	800625a <_fwalk_reent+0x3a>
 800624a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800624e:	3301      	adds	r3, #1
 8006250:	d003      	beq.n	800625a <_fwalk_reent+0x3a>
 8006252:	4629      	mov	r1, r5
 8006254:	4630      	mov	r0, r6
 8006256:	47c0      	blx	r8
 8006258:	4307      	orrs	r7, r0
 800625a:	3568      	adds	r5, #104	; 0x68
 800625c:	e7e9      	b.n	8006232 <_fwalk_reent+0x12>

0800625e <__retarget_lock_init_recursive>:
 800625e:	4770      	bx	lr

08006260 <__retarget_lock_acquire_recursive>:
 8006260:	4770      	bx	lr

08006262 <__retarget_lock_release_recursive>:
 8006262:	4770      	bx	lr

08006264 <__swhatbuf_r>:
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	460e      	mov	r6, r1
 8006268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800626c:	2900      	cmp	r1, #0
 800626e:	b096      	sub	sp, #88	; 0x58
 8006270:	4614      	mov	r4, r2
 8006272:	461d      	mov	r5, r3
 8006274:	da08      	bge.n	8006288 <__swhatbuf_r+0x24>
 8006276:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	602a      	str	r2, [r5, #0]
 800627e:	061a      	lsls	r2, r3, #24
 8006280:	d410      	bmi.n	80062a4 <__swhatbuf_r+0x40>
 8006282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006286:	e00e      	b.n	80062a6 <__swhatbuf_r+0x42>
 8006288:	466a      	mov	r2, sp
 800628a:	f000 fc9d 	bl	8006bc8 <_fstat_r>
 800628e:	2800      	cmp	r0, #0
 8006290:	dbf1      	blt.n	8006276 <__swhatbuf_r+0x12>
 8006292:	9a01      	ldr	r2, [sp, #4]
 8006294:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006298:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800629c:	425a      	negs	r2, r3
 800629e:	415a      	adcs	r2, r3
 80062a0:	602a      	str	r2, [r5, #0]
 80062a2:	e7ee      	b.n	8006282 <__swhatbuf_r+0x1e>
 80062a4:	2340      	movs	r3, #64	; 0x40
 80062a6:	2000      	movs	r0, #0
 80062a8:	6023      	str	r3, [r4, #0]
 80062aa:	b016      	add	sp, #88	; 0x58
 80062ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080062b0 <__smakebuf_r>:
 80062b0:	898b      	ldrh	r3, [r1, #12]
 80062b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062b4:	079d      	lsls	r5, r3, #30
 80062b6:	4606      	mov	r6, r0
 80062b8:	460c      	mov	r4, r1
 80062ba:	d507      	bpl.n	80062cc <__smakebuf_r+0x1c>
 80062bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	6123      	str	r3, [r4, #16]
 80062c4:	2301      	movs	r3, #1
 80062c6:	6163      	str	r3, [r4, #20]
 80062c8:	b002      	add	sp, #8
 80062ca:	bd70      	pop	{r4, r5, r6, pc}
 80062cc:	ab01      	add	r3, sp, #4
 80062ce:	466a      	mov	r2, sp
 80062d0:	f7ff ffc8 	bl	8006264 <__swhatbuf_r>
 80062d4:	9900      	ldr	r1, [sp, #0]
 80062d6:	4605      	mov	r5, r0
 80062d8:	4630      	mov	r0, r6
 80062da:	f000 f89d 	bl	8006418 <_malloc_r>
 80062de:	b948      	cbnz	r0, 80062f4 <__smakebuf_r+0x44>
 80062e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062e4:	059a      	lsls	r2, r3, #22
 80062e6:	d4ef      	bmi.n	80062c8 <__smakebuf_r+0x18>
 80062e8:	f023 0303 	bic.w	r3, r3, #3
 80062ec:	f043 0302 	orr.w	r3, r3, #2
 80062f0:	81a3      	strh	r3, [r4, #12]
 80062f2:	e7e3      	b.n	80062bc <__smakebuf_r+0xc>
 80062f4:	4b0d      	ldr	r3, [pc, #52]	; (800632c <__smakebuf_r+0x7c>)
 80062f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80062f8:	89a3      	ldrh	r3, [r4, #12]
 80062fa:	6020      	str	r0, [r4, #0]
 80062fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006300:	81a3      	strh	r3, [r4, #12]
 8006302:	9b00      	ldr	r3, [sp, #0]
 8006304:	6163      	str	r3, [r4, #20]
 8006306:	9b01      	ldr	r3, [sp, #4]
 8006308:	6120      	str	r0, [r4, #16]
 800630a:	b15b      	cbz	r3, 8006324 <__smakebuf_r+0x74>
 800630c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006310:	4630      	mov	r0, r6
 8006312:	f000 fc6b 	bl	8006bec <_isatty_r>
 8006316:	b128      	cbz	r0, 8006324 <__smakebuf_r+0x74>
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	f023 0303 	bic.w	r3, r3, #3
 800631e:	f043 0301 	orr.w	r3, r3, #1
 8006322:	81a3      	strh	r3, [r4, #12]
 8006324:	89a0      	ldrh	r0, [r4, #12]
 8006326:	4305      	orrs	r5, r0
 8006328:	81a5      	strh	r5, [r4, #12]
 800632a:	e7cd      	b.n	80062c8 <__smakebuf_r+0x18>
 800632c:	080060bd 	.word	0x080060bd

08006330 <malloc>:
 8006330:	4b02      	ldr	r3, [pc, #8]	; (800633c <malloc+0xc>)
 8006332:	4601      	mov	r1, r0
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	f000 b86f 	b.w	8006418 <_malloc_r>
 800633a:	bf00      	nop
 800633c:	2000000c 	.word	0x2000000c

08006340 <_free_r>:
 8006340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006342:	2900      	cmp	r1, #0
 8006344:	d044      	beq.n	80063d0 <_free_r+0x90>
 8006346:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800634a:	9001      	str	r0, [sp, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	f1a1 0404 	sub.w	r4, r1, #4
 8006352:	bfb8      	it	lt
 8006354:	18e4      	addlt	r4, r4, r3
 8006356:	f000 fc6b 	bl	8006c30 <__malloc_lock>
 800635a:	4a1e      	ldr	r2, [pc, #120]	; (80063d4 <_free_r+0x94>)
 800635c:	9801      	ldr	r0, [sp, #4]
 800635e:	6813      	ldr	r3, [r2, #0]
 8006360:	b933      	cbnz	r3, 8006370 <_free_r+0x30>
 8006362:	6063      	str	r3, [r4, #4]
 8006364:	6014      	str	r4, [r2, #0]
 8006366:	b003      	add	sp, #12
 8006368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800636c:	f000 bc66 	b.w	8006c3c <__malloc_unlock>
 8006370:	42a3      	cmp	r3, r4
 8006372:	d908      	bls.n	8006386 <_free_r+0x46>
 8006374:	6825      	ldr	r5, [r4, #0]
 8006376:	1961      	adds	r1, r4, r5
 8006378:	428b      	cmp	r3, r1
 800637a:	bf01      	itttt	eq
 800637c:	6819      	ldreq	r1, [r3, #0]
 800637e:	685b      	ldreq	r3, [r3, #4]
 8006380:	1949      	addeq	r1, r1, r5
 8006382:	6021      	streq	r1, [r4, #0]
 8006384:	e7ed      	b.n	8006362 <_free_r+0x22>
 8006386:	461a      	mov	r2, r3
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	b10b      	cbz	r3, 8006390 <_free_r+0x50>
 800638c:	42a3      	cmp	r3, r4
 800638e:	d9fa      	bls.n	8006386 <_free_r+0x46>
 8006390:	6811      	ldr	r1, [r2, #0]
 8006392:	1855      	adds	r5, r2, r1
 8006394:	42a5      	cmp	r5, r4
 8006396:	d10b      	bne.n	80063b0 <_free_r+0x70>
 8006398:	6824      	ldr	r4, [r4, #0]
 800639a:	4421      	add	r1, r4
 800639c:	1854      	adds	r4, r2, r1
 800639e:	42a3      	cmp	r3, r4
 80063a0:	6011      	str	r1, [r2, #0]
 80063a2:	d1e0      	bne.n	8006366 <_free_r+0x26>
 80063a4:	681c      	ldr	r4, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	6053      	str	r3, [r2, #4]
 80063aa:	4421      	add	r1, r4
 80063ac:	6011      	str	r1, [r2, #0]
 80063ae:	e7da      	b.n	8006366 <_free_r+0x26>
 80063b0:	d902      	bls.n	80063b8 <_free_r+0x78>
 80063b2:	230c      	movs	r3, #12
 80063b4:	6003      	str	r3, [r0, #0]
 80063b6:	e7d6      	b.n	8006366 <_free_r+0x26>
 80063b8:	6825      	ldr	r5, [r4, #0]
 80063ba:	1961      	adds	r1, r4, r5
 80063bc:	428b      	cmp	r3, r1
 80063be:	bf04      	itt	eq
 80063c0:	6819      	ldreq	r1, [r3, #0]
 80063c2:	685b      	ldreq	r3, [r3, #4]
 80063c4:	6063      	str	r3, [r4, #4]
 80063c6:	bf04      	itt	eq
 80063c8:	1949      	addeq	r1, r1, r5
 80063ca:	6021      	streq	r1, [r4, #0]
 80063cc:	6054      	str	r4, [r2, #4]
 80063ce:	e7ca      	b.n	8006366 <_free_r+0x26>
 80063d0:	b003      	add	sp, #12
 80063d2:	bd30      	pop	{r4, r5, pc}
 80063d4:	20000860 	.word	0x20000860

080063d8 <sbrk_aligned>:
 80063d8:	b570      	push	{r4, r5, r6, lr}
 80063da:	4e0e      	ldr	r6, [pc, #56]	; (8006414 <sbrk_aligned+0x3c>)
 80063dc:	460c      	mov	r4, r1
 80063de:	6831      	ldr	r1, [r6, #0]
 80063e0:	4605      	mov	r5, r0
 80063e2:	b911      	cbnz	r1, 80063ea <sbrk_aligned+0x12>
 80063e4:	f000 fb7a 	bl	8006adc <_sbrk_r>
 80063e8:	6030      	str	r0, [r6, #0]
 80063ea:	4621      	mov	r1, r4
 80063ec:	4628      	mov	r0, r5
 80063ee:	f000 fb75 	bl	8006adc <_sbrk_r>
 80063f2:	1c43      	adds	r3, r0, #1
 80063f4:	d00a      	beq.n	800640c <sbrk_aligned+0x34>
 80063f6:	1cc4      	adds	r4, r0, #3
 80063f8:	f024 0403 	bic.w	r4, r4, #3
 80063fc:	42a0      	cmp	r0, r4
 80063fe:	d007      	beq.n	8006410 <sbrk_aligned+0x38>
 8006400:	1a21      	subs	r1, r4, r0
 8006402:	4628      	mov	r0, r5
 8006404:	f000 fb6a 	bl	8006adc <_sbrk_r>
 8006408:	3001      	adds	r0, #1
 800640a:	d101      	bne.n	8006410 <sbrk_aligned+0x38>
 800640c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006410:	4620      	mov	r0, r4
 8006412:	bd70      	pop	{r4, r5, r6, pc}
 8006414:	20000864 	.word	0x20000864

08006418 <_malloc_r>:
 8006418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800641c:	1ccd      	adds	r5, r1, #3
 800641e:	f025 0503 	bic.w	r5, r5, #3
 8006422:	3508      	adds	r5, #8
 8006424:	2d0c      	cmp	r5, #12
 8006426:	bf38      	it	cc
 8006428:	250c      	movcc	r5, #12
 800642a:	2d00      	cmp	r5, #0
 800642c:	4607      	mov	r7, r0
 800642e:	db01      	blt.n	8006434 <_malloc_r+0x1c>
 8006430:	42a9      	cmp	r1, r5
 8006432:	d905      	bls.n	8006440 <_malloc_r+0x28>
 8006434:	230c      	movs	r3, #12
 8006436:	603b      	str	r3, [r7, #0]
 8006438:	2600      	movs	r6, #0
 800643a:	4630      	mov	r0, r6
 800643c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006440:	4e2e      	ldr	r6, [pc, #184]	; (80064fc <_malloc_r+0xe4>)
 8006442:	f000 fbf5 	bl	8006c30 <__malloc_lock>
 8006446:	6833      	ldr	r3, [r6, #0]
 8006448:	461c      	mov	r4, r3
 800644a:	bb34      	cbnz	r4, 800649a <_malloc_r+0x82>
 800644c:	4629      	mov	r1, r5
 800644e:	4638      	mov	r0, r7
 8006450:	f7ff ffc2 	bl	80063d8 <sbrk_aligned>
 8006454:	1c43      	adds	r3, r0, #1
 8006456:	4604      	mov	r4, r0
 8006458:	d14d      	bne.n	80064f6 <_malloc_r+0xde>
 800645a:	6834      	ldr	r4, [r6, #0]
 800645c:	4626      	mov	r6, r4
 800645e:	2e00      	cmp	r6, #0
 8006460:	d140      	bne.n	80064e4 <_malloc_r+0xcc>
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	4631      	mov	r1, r6
 8006466:	4638      	mov	r0, r7
 8006468:	eb04 0803 	add.w	r8, r4, r3
 800646c:	f000 fb36 	bl	8006adc <_sbrk_r>
 8006470:	4580      	cmp	r8, r0
 8006472:	d13a      	bne.n	80064ea <_malloc_r+0xd2>
 8006474:	6821      	ldr	r1, [r4, #0]
 8006476:	3503      	adds	r5, #3
 8006478:	1a6d      	subs	r5, r5, r1
 800647a:	f025 0503 	bic.w	r5, r5, #3
 800647e:	3508      	adds	r5, #8
 8006480:	2d0c      	cmp	r5, #12
 8006482:	bf38      	it	cc
 8006484:	250c      	movcc	r5, #12
 8006486:	4629      	mov	r1, r5
 8006488:	4638      	mov	r0, r7
 800648a:	f7ff ffa5 	bl	80063d8 <sbrk_aligned>
 800648e:	3001      	adds	r0, #1
 8006490:	d02b      	beq.n	80064ea <_malloc_r+0xd2>
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	442b      	add	r3, r5
 8006496:	6023      	str	r3, [r4, #0]
 8006498:	e00e      	b.n	80064b8 <_malloc_r+0xa0>
 800649a:	6822      	ldr	r2, [r4, #0]
 800649c:	1b52      	subs	r2, r2, r5
 800649e:	d41e      	bmi.n	80064de <_malloc_r+0xc6>
 80064a0:	2a0b      	cmp	r2, #11
 80064a2:	d916      	bls.n	80064d2 <_malloc_r+0xba>
 80064a4:	1961      	adds	r1, r4, r5
 80064a6:	42a3      	cmp	r3, r4
 80064a8:	6025      	str	r5, [r4, #0]
 80064aa:	bf18      	it	ne
 80064ac:	6059      	strne	r1, [r3, #4]
 80064ae:	6863      	ldr	r3, [r4, #4]
 80064b0:	bf08      	it	eq
 80064b2:	6031      	streq	r1, [r6, #0]
 80064b4:	5162      	str	r2, [r4, r5]
 80064b6:	604b      	str	r3, [r1, #4]
 80064b8:	4638      	mov	r0, r7
 80064ba:	f104 060b 	add.w	r6, r4, #11
 80064be:	f000 fbbd 	bl	8006c3c <__malloc_unlock>
 80064c2:	f026 0607 	bic.w	r6, r6, #7
 80064c6:	1d23      	adds	r3, r4, #4
 80064c8:	1af2      	subs	r2, r6, r3
 80064ca:	d0b6      	beq.n	800643a <_malloc_r+0x22>
 80064cc:	1b9b      	subs	r3, r3, r6
 80064ce:	50a3      	str	r3, [r4, r2]
 80064d0:	e7b3      	b.n	800643a <_malloc_r+0x22>
 80064d2:	6862      	ldr	r2, [r4, #4]
 80064d4:	42a3      	cmp	r3, r4
 80064d6:	bf0c      	ite	eq
 80064d8:	6032      	streq	r2, [r6, #0]
 80064da:	605a      	strne	r2, [r3, #4]
 80064dc:	e7ec      	b.n	80064b8 <_malloc_r+0xa0>
 80064de:	4623      	mov	r3, r4
 80064e0:	6864      	ldr	r4, [r4, #4]
 80064e2:	e7b2      	b.n	800644a <_malloc_r+0x32>
 80064e4:	4634      	mov	r4, r6
 80064e6:	6876      	ldr	r6, [r6, #4]
 80064e8:	e7b9      	b.n	800645e <_malloc_r+0x46>
 80064ea:	230c      	movs	r3, #12
 80064ec:	603b      	str	r3, [r7, #0]
 80064ee:	4638      	mov	r0, r7
 80064f0:	f000 fba4 	bl	8006c3c <__malloc_unlock>
 80064f4:	e7a1      	b.n	800643a <_malloc_r+0x22>
 80064f6:	6025      	str	r5, [r4, #0]
 80064f8:	e7de      	b.n	80064b8 <_malloc_r+0xa0>
 80064fa:	bf00      	nop
 80064fc:	20000860 	.word	0x20000860

08006500 <__sfputc_r>:
 8006500:	6893      	ldr	r3, [r2, #8]
 8006502:	3b01      	subs	r3, #1
 8006504:	2b00      	cmp	r3, #0
 8006506:	b410      	push	{r4}
 8006508:	6093      	str	r3, [r2, #8]
 800650a:	da08      	bge.n	800651e <__sfputc_r+0x1e>
 800650c:	6994      	ldr	r4, [r2, #24]
 800650e:	42a3      	cmp	r3, r4
 8006510:	db01      	blt.n	8006516 <__sfputc_r+0x16>
 8006512:	290a      	cmp	r1, #10
 8006514:	d103      	bne.n	800651e <__sfputc_r+0x1e>
 8006516:	f85d 4b04 	ldr.w	r4, [sp], #4
 800651a:	f7ff bc29 	b.w	8005d70 <__swbuf_r>
 800651e:	6813      	ldr	r3, [r2, #0]
 8006520:	1c58      	adds	r0, r3, #1
 8006522:	6010      	str	r0, [r2, #0]
 8006524:	7019      	strb	r1, [r3, #0]
 8006526:	4608      	mov	r0, r1
 8006528:	f85d 4b04 	ldr.w	r4, [sp], #4
 800652c:	4770      	bx	lr

0800652e <__sfputs_r>:
 800652e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006530:	4606      	mov	r6, r0
 8006532:	460f      	mov	r7, r1
 8006534:	4614      	mov	r4, r2
 8006536:	18d5      	adds	r5, r2, r3
 8006538:	42ac      	cmp	r4, r5
 800653a:	d101      	bne.n	8006540 <__sfputs_r+0x12>
 800653c:	2000      	movs	r0, #0
 800653e:	e007      	b.n	8006550 <__sfputs_r+0x22>
 8006540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006544:	463a      	mov	r2, r7
 8006546:	4630      	mov	r0, r6
 8006548:	f7ff ffda 	bl	8006500 <__sfputc_r>
 800654c:	1c43      	adds	r3, r0, #1
 800654e:	d1f3      	bne.n	8006538 <__sfputs_r+0xa>
 8006550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006554 <_vfiprintf_r>:
 8006554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006558:	460d      	mov	r5, r1
 800655a:	b09d      	sub	sp, #116	; 0x74
 800655c:	4614      	mov	r4, r2
 800655e:	4698      	mov	r8, r3
 8006560:	4606      	mov	r6, r0
 8006562:	b118      	cbz	r0, 800656c <_vfiprintf_r+0x18>
 8006564:	6983      	ldr	r3, [r0, #24]
 8006566:	b90b      	cbnz	r3, 800656c <_vfiprintf_r+0x18>
 8006568:	f7ff fddc 	bl	8006124 <__sinit>
 800656c:	4b89      	ldr	r3, [pc, #548]	; (8006794 <_vfiprintf_r+0x240>)
 800656e:	429d      	cmp	r5, r3
 8006570:	d11b      	bne.n	80065aa <_vfiprintf_r+0x56>
 8006572:	6875      	ldr	r5, [r6, #4]
 8006574:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006576:	07d9      	lsls	r1, r3, #31
 8006578:	d405      	bmi.n	8006586 <_vfiprintf_r+0x32>
 800657a:	89ab      	ldrh	r3, [r5, #12]
 800657c:	059a      	lsls	r2, r3, #22
 800657e:	d402      	bmi.n	8006586 <_vfiprintf_r+0x32>
 8006580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006582:	f7ff fe6d 	bl	8006260 <__retarget_lock_acquire_recursive>
 8006586:	89ab      	ldrh	r3, [r5, #12]
 8006588:	071b      	lsls	r3, r3, #28
 800658a:	d501      	bpl.n	8006590 <_vfiprintf_r+0x3c>
 800658c:	692b      	ldr	r3, [r5, #16]
 800658e:	b9eb      	cbnz	r3, 80065cc <_vfiprintf_r+0x78>
 8006590:	4629      	mov	r1, r5
 8006592:	4630      	mov	r0, r6
 8006594:	f7ff fc3e 	bl	8005e14 <__swsetup_r>
 8006598:	b1c0      	cbz	r0, 80065cc <_vfiprintf_r+0x78>
 800659a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800659c:	07dc      	lsls	r4, r3, #31
 800659e:	d50e      	bpl.n	80065be <_vfiprintf_r+0x6a>
 80065a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065a4:	b01d      	add	sp, #116	; 0x74
 80065a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065aa:	4b7b      	ldr	r3, [pc, #492]	; (8006798 <_vfiprintf_r+0x244>)
 80065ac:	429d      	cmp	r5, r3
 80065ae:	d101      	bne.n	80065b4 <_vfiprintf_r+0x60>
 80065b0:	68b5      	ldr	r5, [r6, #8]
 80065b2:	e7df      	b.n	8006574 <_vfiprintf_r+0x20>
 80065b4:	4b79      	ldr	r3, [pc, #484]	; (800679c <_vfiprintf_r+0x248>)
 80065b6:	429d      	cmp	r5, r3
 80065b8:	bf08      	it	eq
 80065ba:	68f5      	ldreq	r5, [r6, #12]
 80065bc:	e7da      	b.n	8006574 <_vfiprintf_r+0x20>
 80065be:	89ab      	ldrh	r3, [r5, #12]
 80065c0:	0598      	lsls	r0, r3, #22
 80065c2:	d4ed      	bmi.n	80065a0 <_vfiprintf_r+0x4c>
 80065c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065c6:	f7ff fe4c 	bl	8006262 <__retarget_lock_release_recursive>
 80065ca:	e7e9      	b.n	80065a0 <_vfiprintf_r+0x4c>
 80065cc:	2300      	movs	r3, #0
 80065ce:	9309      	str	r3, [sp, #36]	; 0x24
 80065d0:	2320      	movs	r3, #32
 80065d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80065da:	2330      	movs	r3, #48	; 0x30
 80065dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80067a0 <_vfiprintf_r+0x24c>
 80065e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065e4:	f04f 0901 	mov.w	r9, #1
 80065e8:	4623      	mov	r3, r4
 80065ea:	469a      	mov	sl, r3
 80065ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065f0:	b10a      	cbz	r2, 80065f6 <_vfiprintf_r+0xa2>
 80065f2:	2a25      	cmp	r2, #37	; 0x25
 80065f4:	d1f9      	bne.n	80065ea <_vfiprintf_r+0x96>
 80065f6:	ebba 0b04 	subs.w	fp, sl, r4
 80065fa:	d00b      	beq.n	8006614 <_vfiprintf_r+0xc0>
 80065fc:	465b      	mov	r3, fp
 80065fe:	4622      	mov	r2, r4
 8006600:	4629      	mov	r1, r5
 8006602:	4630      	mov	r0, r6
 8006604:	f7ff ff93 	bl	800652e <__sfputs_r>
 8006608:	3001      	adds	r0, #1
 800660a:	f000 80aa 	beq.w	8006762 <_vfiprintf_r+0x20e>
 800660e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006610:	445a      	add	r2, fp
 8006612:	9209      	str	r2, [sp, #36]	; 0x24
 8006614:	f89a 3000 	ldrb.w	r3, [sl]
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 80a2 	beq.w	8006762 <_vfiprintf_r+0x20e>
 800661e:	2300      	movs	r3, #0
 8006620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006628:	f10a 0a01 	add.w	sl, sl, #1
 800662c:	9304      	str	r3, [sp, #16]
 800662e:	9307      	str	r3, [sp, #28]
 8006630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006634:	931a      	str	r3, [sp, #104]	; 0x68
 8006636:	4654      	mov	r4, sl
 8006638:	2205      	movs	r2, #5
 800663a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800663e:	4858      	ldr	r0, [pc, #352]	; (80067a0 <_vfiprintf_r+0x24c>)
 8006640:	f7f9 fde6 	bl	8000210 <memchr>
 8006644:	9a04      	ldr	r2, [sp, #16]
 8006646:	b9d8      	cbnz	r0, 8006680 <_vfiprintf_r+0x12c>
 8006648:	06d1      	lsls	r1, r2, #27
 800664a:	bf44      	itt	mi
 800664c:	2320      	movmi	r3, #32
 800664e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006652:	0713      	lsls	r3, r2, #28
 8006654:	bf44      	itt	mi
 8006656:	232b      	movmi	r3, #43	; 0x2b
 8006658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800665c:	f89a 3000 	ldrb.w	r3, [sl]
 8006660:	2b2a      	cmp	r3, #42	; 0x2a
 8006662:	d015      	beq.n	8006690 <_vfiprintf_r+0x13c>
 8006664:	9a07      	ldr	r2, [sp, #28]
 8006666:	4654      	mov	r4, sl
 8006668:	2000      	movs	r0, #0
 800666a:	f04f 0c0a 	mov.w	ip, #10
 800666e:	4621      	mov	r1, r4
 8006670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006674:	3b30      	subs	r3, #48	; 0x30
 8006676:	2b09      	cmp	r3, #9
 8006678:	d94e      	bls.n	8006718 <_vfiprintf_r+0x1c4>
 800667a:	b1b0      	cbz	r0, 80066aa <_vfiprintf_r+0x156>
 800667c:	9207      	str	r2, [sp, #28]
 800667e:	e014      	b.n	80066aa <_vfiprintf_r+0x156>
 8006680:	eba0 0308 	sub.w	r3, r0, r8
 8006684:	fa09 f303 	lsl.w	r3, r9, r3
 8006688:	4313      	orrs	r3, r2
 800668a:	9304      	str	r3, [sp, #16]
 800668c:	46a2      	mov	sl, r4
 800668e:	e7d2      	b.n	8006636 <_vfiprintf_r+0xe2>
 8006690:	9b03      	ldr	r3, [sp, #12]
 8006692:	1d19      	adds	r1, r3, #4
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	9103      	str	r1, [sp, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	bfbb      	ittet	lt
 800669c:	425b      	neglt	r3, r3
 800669e:	f042 0202 	orrlt.w	r2, r2, #2
 80066a2:	9307      	strge	r3, [sp, #28]
 80066a4:	9307      	strlt	r3, [sp, #28]
 80066a6:	bfb8      	it	lt
 80066a8:	9204      	strlt	r2, [sp, #16]
 80066aa:	7823      	ldrb	r3, [r4, #0]
 80066ac:	2b2e      	cmp	r3, #46	; 0x2e
 80066ae:	d10c      	bne.n	80066ca <_vfiprintf_r+0x176>
 80066b0:	7863      	ldrb	r3, [r4, #1]
 80066b2:	2b2a      	cmp	r3, #42	; 0x2a
 80066b4:	d135      	bne.n	8006722 <_vfiprintf_r+0x1ce>
 80066b6:	9b03      	ldr	r3, [sp, #12]
 80066b8:	1d1a      	adds	r2, r3, #4
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	9203      	str	r2, [sp, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	bfb8      	it	lt
 80066c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80066c6:	3402      	adds	r4, #2
 80066c8:	9305      	str	r3, [sp, #20]
 80066ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80067b0 <_vfiprintf_r+0x25c>
 80066ce:	7821      	ldrb	r1, [r4, #0]
 80066d0:	2203      	movs	r2, #3
 80066d2:	4650      	mov	r0, sl
 80066d4:	f7f9 fd9c 	bl	8000210 <memchr>
 80066d8:	b140      	cbz	r0, 80066ec <_vfiprintf_r+0x198>
 80066da:	2340      	movs	r3, #64	; 0x40
 80066dc:	eba0 000a 	sub.w	r0, r0, sl
 80066e0:	fa03 f000 	lsl.w	r0, r3, r0
 80066e4:	9b04      	ldr	r3, [sp, #16]
 80066e6:	4303      	orrs	r3, r0
 80066e8:	3401      	adds	r4, #1
 80066ea:	9304      	str	r3, [sp, #16]
 80066ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066f0:	482c      	ldr	r0, [pc, #176]	; (80067a4 <_vfiprintf_r+0x250>)
 80066f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066f6:	2206      	movs	r2, #6
 80066f8:	f7f9 fd8a 	bl	8000210 <memchr>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d03f      	beq.n	8006780 <_vfiprintf_r+0x22c>
 8006700:	4b29      	ldr	r3, [pc, #164]	; (80067a8 <_vfiprintf_r+0x254>)
 8006702:	bb1b      	cbnz	r3, 800674c <_vfiprintf_r+0x1f8>
 8006704:	9b03      	ldr	r3, [sp, #12]
 8006706:	3307      	adds	r3, #7
 8006708:	f023 0307 	bic.w	r3, r3, #7
 800670c:	3308      	adds	r3, #8
 800670e:	9303      	str	r3, [sp, #12]
 8006710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006712:	443b      	add	r3, r7
 8006714:	9309      	str	r3, [sp, #36]	; 0x24
 8006716:	e767      	b.n	80065e8 <_vfiprintf_r+0x94>
 8006718:	fb0c 3202 	mla	r2, ip, r2, r3
 800671c:	460c      	mov	r4, r1
 800671e:	2001      	movs	r0, #1
 8006720:	e7a5      	b.n	800666e <_vfiprintf_r+0x11a>
 8006722:	2300      	movs	r3, #0
 8006724:	3401      	adds	r4, #1
 8006726:	9305      	str	r3, [sp, #20]
 8006728:	4619      	mov	r1, r3
 800672a:	f04f 0c0a 	mov.w	ip, #10
 800672e:	4620      	mov	r0, r4
 8006730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006734:	3a30      	subs	r2, #48	; 0x30
 8006736:	2a09      	cmp	r2, #9
 8006738:	d903      	bls.n	8006742 <_vfiprintf_r+0x1ee>
 800673a:	2b00      	cmp	r3, #0
 800673c:	d0c5      	beq.n	80066ca <_vfiprintf_r+0x176>
 800673e:	9105      	str	r1, [sp, #20]
 8006740:	e7c3      	b.n	80066ca <_vfiprintf_r+0x176>
 8006742:	fb0c 2101 	mla	r1, ip, r1, r2
 8006746:	4604      	mov	r4, r0
 8006748:	2301      	movs	r3, #1
 800674a:	e7f0      	b.n	800672e <_vfiprintf_r+0x1da>
 800674c:	ab03      	add	r3, sp, #12
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	462a      	mov	r2, r5
 8006752:	4b16      	ldr	r3, [pc, #88]	; (80067ac <_vfiprintf_r+0x258>)
 8006754:	a904      	add	r1, sp, #16
 8006756:	4630      	mov	r0, r6
 8006758:	f3af 8000 	nop.w
 800675c:	4607      	mov	r7, r0
 800675e:	1c78      	adds	r0, r7, #1
 8006760:	d1d6      	bne.n	8006710 <_vfiprintf_r+0x1bc>
 8006762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006764:	07d9      	lsls	r1, r3, #31
 8006766:	d405      	bmi.n	8006774 <_vfiprintf_r+0x220>
 8006768:	89ab      	ldrh	r3, [r5, #12]
 800676a:	059a      	lsls	r2, r3, #22
 800676c:	d402      	bmi.n	8006774 <_vfiprintf_r+0x220>
 800676e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006770:	f7ff fd77 	bl	8006262 <__retarget_lock_release_recursive>
 8006774:	89ab      	ldrh	r3, [r5, #12]
 8006776:	065b      	lsls	r3, r3, #25
 8006778:	f53f af12 	bmi.w	80065a0 <_vfiprintf_r+0x4c>
 800677c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800677e:	e711      	b.n	80065a4 <_vfiprintf_r+0x50>
 8006780:	ab03      	add	r3, sp, #12
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	462a      	mov	r2, r5
 8006786:	4b09      	ldr	r3, [pc, #36]	; (80067ac <_vfiprintf_r+0x258>)
 8006788:	a904      	add	r1, sp, #16
 800678a:	4630      	mov	r0, r6
 800678c:	f000 f880 	bl	8006890 <_printf_i>
 8006790:	e7e4      	b.n	800675c <_vfiprintf_r+0x208>
 8006792:	bf00      	nop
 8006794:	0800714c 	.word	0x0800714c
 8006798:	0800716c 	.word	0x0800716c
 800679c:	0800712c 	.word	0x0800712c
 80067a0:	0800718c 	.word	0x0800718c
 80067a4:	08007196 	.word	0x08007196
 80067a8:	00000000 	.word	0x00000000
 80067ac:	0800652f 	.word	0x0800652f
 80067b0:	08007192 	.word	0x08007192

080067b4 <_printf_common>:
 80067b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067b8:	4616      	mov	r6, r2
 80067ba:	4699      	mov	r9, r3
 80067bc:	688a      	ldr	r2, [r1, #8]
 80067be:	690b      	ldr	r3, [r1, #16]
 80067c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067c4:	4293      	cmp	r3, r2
 80067c6:	bfb8      	it	lt
 80067c8:	4613      	movlt	r3, r2
 80067ca:	6033      	str	r3, [r6, #0]
 80067cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067d0:	4607      	mov	r7, r0
 80067d2:	460c      	mov	r4, r1
 80067d4:	b10a      	cbz	r2, 80067da <_printf_common+0x26>
 80067d6:	3301      	adds	r3, #1
 80067d8:	6033      	str	r3, [r6, #0]
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	0699      	lsls	r1, r3, #26
 80067de:	bf42      	ittt	mi
 80067e0:	6833      	ldrmi	r3, [r6, #0]
 80067e2:	3302      	addmi	r3, #2
 80067e4:	6033      	strmi	r3, [r6, #0]
 80067e6:	6825      	ldr	r5, [r4, #0]
 80067e8:	f015 0506 	ands.w	r5, r5, #6
 80067ec:	d106      	bne.n	80067fc <_printf_common+0x48>
 80067ee:	f104 0a19 	add.w	sl, r4, #25
 80067f2:	68e3      	ldr	r3, [r4, #12]
 80067f4:	6832      	ldr	r2, [r6, #0]
 80067f6:	1a9b      	subs	r3, r3, r2
 80067f8:	42ab      	cmp	r3, r5
 80067fa:	dc26      	bgt.n	800684a <_printf_common+0x96>
 80067fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006800:	1e13      	subs	r3, r2, #0
 8006802:	6822      	ldr	r2, [r4, #0]
 8006804:	bf18      	it	ne
 8006806:	2301      	movne	r3, #1
 8006808:	0692      	lsls	r2, r2, #26
 800680a:	d42b      	bmi.n	8006864 <_printf_common+0xb0>
 800680c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006810:	4649      	mov	r1, r9
 8006812:	4638      	mov	r0, r7
 8006814:	47c0      	blx	r8
 8006816:	3001      	adds	r0, #1
 8006818:	d01e      	beq.n	8006858 <_printf_common+0xa4>
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	68e5      	ldr	r5, [r4, #12]
 800681e:	6832      	ldr	r2, [r6, #0]
 8006820:	f003 0306 	and.w	r3, r3, #6
 8006824:	2b04      	cmp	r3, #4
 8006826:	bf08      	it	eq
 8006828:	1aad      	subeq	r5, r5, r2
 800682a:	68a3      	ldr	r3, [r4, #8]
 800682c:	6922      	ldr	r2, [r4, #16]
 800682e:	bf0c      	ite	eq
 8006830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006834:	2500      	movne	r5, #0
 8006836:	4293      	cmp	r3, r2
 8006838:	bfc4      	itt	gt
 800683a:	1a9b      	subgt	r3, r3, r2
 800683c:	18ed      	addgt	r5, r5, r3
 800683e:	2600      	movs	r6, #0
 8006840:	341a      	adds	r4, #26
 8006842:	42b5      	cmp	r5, r6
 8006844:	d11a      	bne.n	800687c <_printf_common+0xc8>
 8006846:	2000      	movs	r0, #0
 8006848:	e008      	b.n	800685c <_printf_common+0xa8>
 800684a:	2301      	movs	r3, #1
 800684c:	4652      	mov	r2, sl
 800684e:	4649      	mov	r1, r9
 8006850:	4638      	mov	r0, r7
 8006852:	47c0      	blx	r8
 8006854:	3001      	adds	r0, #1
 8006856:	d103      	bne.n	8006860 <_printf_common+0xac>
 8006858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800685c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006860:	3501      	adds	r5, #1
 8006862:	e7c6      	b.n	80067f2 <_printf_common+0x3e>
 8006864:	18e1      	adds	r1, r4, r3
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	2030      	movs	r0, #48	; 0x30
 800686a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800686e:	4422      	add	r2, r4
 8006870:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006874:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006878:	3302      	adds	r3, #2
 800687a:	e7c7      	b.n	800680c <_printf_common+0x58>
 800687c:	2301      	movs	r3, #1
 800687e:	4622      	mov	r2, r4
 8006880:	4649      	mov	r1, r9
 8006882:	4638      	mov	r0, r7
 8006884:	47c0      	blx	r8
 8006886:	3001      	adds	r0, #1
 8006888:	d0e6      	beq.n	8006858 <_printf_common+0xa4>
 800688a:	3601      	adds	r6, #1
 800688c:	e7d9      	b.n	8006842 <_printf_common+0x8e>
	...

08006890 <_printf_i>:
 8006890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006894:	7e0f      	ldrb	r7, [r1, #24]
 8006896:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006898:	2f78      	cmp	r7, #120	; 0x78
 800689a:	4691      	mov	r9, r2
 800689c:	4680      	mov	r8, r0
 800689e:	460c      	mov	r4, r1
 80068a0:	469a      	mov	sl, r3
 80068a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068a6:	d807      	bhi.n	80068b8 <_printf_i+0x28>
 80068a8:	2f62      	cmp	r7, #98	; 0x62
 80068aa:	d80a      	bhi.n	80068c2 <_printf_i+0x32>
 80068ac:	2f00      	cmp	r7, #0
 80068ae:	f000 80d8 	beq.w	8006a62 <_printf_i+0x1d2>
 80068b2:	2f58      	cmp	r7, #88	; 0x58
 80068b4:	f000 80a3 	beq.w	80069fe <_printf_i+0x16e>
 80068b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068c0:	e03a      	b.n	8006938 <_printf_i+0xa8>
 80068c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068c6:	2b15      	cmp	r3, #21
 80068c8:	d8f6      	bhi.n	80068b8 <_printf_i+0x28>
 80068ca:	a101      	add	r1, pc, #4	; (adr r1, 80068d0 <_printf_i+0x40>)
 80068cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068d0:	08006929 	.word	0x08006929
 80068d4:	0800693d 	.word	0x0800693d
 80068d8:	080068b9 	.word	0x080068b9
 80068dc:	080068b9 	.word	0x080068b9
 80068e0:	080068b9 	.word	0x080068b9
 80068e4:	080068b9 	.word	0x080068b9
 80068e8:	0800693d 	.word	0x0800693d
 80068ec:	080068b9 	.word	0x080068b9
 80068f0:	080068b9 	.word	0x080068b9
 80068f4:	080068b9 	.word	0x080068b9
 80068f8:	080068b9 	.word	0x080068b9
 80068fc:	08006a49 	.word	0x08006a49
 8006900:	0800696d 	.word	0x0800696d
 8006904:	08006a2b 	.word	0x08006a2b
 8006908:	080068b9 	.word	0x080068b9
 800690c:	080068b9 	.word	0x080068b9
 8006910:	08006a6b 	.word	0x08006a6b
 8006914:	080068b9 	.word	0x080068b9
 8006918:	0800696d 	.word	0x0800696d
 800691c:	080068b9 	.word	0x080068b9
 8006920:	080068b9 	.word	0x080068b9
 8006924:	08006a33 	.word	0x08006a33
 8006928:	682b      	ldr	r3, [r5, #0]
 800692a:	1d1a      	adds	r2, r3, #4
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	602a      	str	r2, [r5, #0]
 8006930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006938:	2301      	movs	r3, #1
 800693a:	e0a3      	b.n	8006a84 <_printf_i+0x1f4>
 800693c:	6820      	ldr	r0, [r4, #0]
 800693e:	6829      	ldr	r1, [r5, #0]
 8006940:	0606      	lsls	r6, r0, #24
 8006942:	f101 0304 	add.w	r3, r1, #4
 8006946:	d50a      	bpl.n	800695e <_printf_i+0xce>
 8006948:	680e      	ldr	r6, [r1, #0]
 800694a:	602b      	str	r3, [r5, #0]
 800694c:	2e00      	cmp	r6, #0
 800694e:	da03      	bge.n	8006958 <_printf_i+0xc8>
 8006950:	232d      	movs	r3, #45	; 0x2d
 8006952:	4276      	negs	r6, r6
 8006954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006958:	485e      	ldr	r0, [pc, #376]	; (8006ad4 <_printf_i+0x244>)
 800695a:	230a      	movs	r3, #10
 800695c:	e019      	b.n	8006992 <_printf_i+0x102>
 800695e:	680e      	ldr	r6, [r1, #0]
 8006960:	602b      	str	r3, [r5, #0]
 8006962:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006966:	bf18      	it	ne
 8006968:	b236      	sxthne	r6, r6
 800696a:	e7ef      	b.n	800694c <_printf_i+0xbc>
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	6820      	ldr	r0, [r4, #0]
 8006970:	1d19      	adds	r1, r3, #4
 8006972:	6029      	str	r1, [r5, #0]
 8006974:	0601      	lsls	r1, r0, #24
 8006976:	d501      	bpl.n	800697c <_printf_i+0xec>
 8006978:	681e      	ldr	r6, [r3, #0]
 800697a:	e002      	b.n	8006982 <_printf_i+0xf2>
 800697c:	0646      	lsls	r6, r0, #25
 800697e:	d5fb      	bpl.n	8006978 <_printf_i+0xe8>
 8006980:	881e      	ldrh	r6, [r3, #0]
 8006982:	4854      	ldr	r0, [pc, #336]	; (8006ad4 <_printf_i+0x244>)
 8006984:	2f6f      	cmp	r7, #111	; 0x6f
 8006986:	bf0c      	ite	eq
 8006988:	2308      	moveq	r3, #8
 800698a:	230a      	movne	r3, #10
 800698c:	2100      	movs	r1, #0
 800698e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006992:	6865      	ldr	r5, [r4, #4]
 8006994:	60a5      	str	r5, [r4, #8]
 8006996:	2d00      	cmp	r5, #0
 8006998:	bfa2      	ittt	ge
 800699a:	6821      	ldrge	r1, [r4, #0]
 800699c:	f021 0104 	bicge.w	r1, r1, #4
 80069a0:	6021      	strge	r1, [r4, #0]
 80069a2:	b90e      	cbnz	r6, 80069a8 <_printf_i+0x118>
 80069a4:	2d00      	cmp	r5, #0
 80069a6:	d04d      	beq.n	8006a44 <_printf_i+0x1b4>
 80069a8:	4615      	mov	r5, r2
 80069aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80069ae:	fb03 6711 	mls	r7, r3, r1, r6
 80069b2:	5dc7      	ldrb	r7, [r0, r7]
 80069b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80069b8:	4637      	mov	r7, r6
 80069ba:	42bb      	cmp	r3, r7
 80069bc:	460e      	mov	r6, r1
 80069be:	d9f4      	bls.n	80069aa <_printf_i+0x11a>
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d10b      	bne.n	80069dc <_printf_i+0x14c>
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	07de      	lsls	r6, r3, #31
 80069c8:	d508      	bpl.n	80069dc <_printf_i+0x14c>
 80069ca:	6923      	ldr	r3, [r4, #16]
 80069cc:	6861      	ldr	r1, [r4, #4]
 80069ce:	4299      	cmp	r1, r3
 80069d0:	bfde      	ittt	le
 80069d2:	2330      	movle	r3, #48	; 0x30
 80069d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80069d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80069dc:	1b52      	subs	r2, r2, r5
 80069de:	6122      	str	r2, [r4, #16]
 80069e0:	f8cd a000 	str.w	sl, [sp]
 80069e4:	464b      	mov	r3, r9
 80069e6:	aa03      	add	r2, sp, #12
 80069e8:	4621      	mov	r1, r4
 80069ea:	4640      	mov	r0, r8
 80069ec:	f7ff fee2 	bl	80067b4 <_printf_common>
 80069f0:	3001      	adds	r0, #1
 80069f2:	d14c      	bne.n	8006a8e <_printf_i+0x1fe>
 80069f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069f8:	b004      	add	sp, #16
 80069fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069fe:	4835      	ldr	r0, [pc, #212]	; (8006ad4 <_printf_i+0x244>)
 8006a00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a04:	6829      	ldr	r1, [r5, #0]
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a0c:	6029      	str	r1, [r5, #0]
 8006a0e:	061d      	lsls	r5, r3, #24
 8006a10:	d514      	bpl.n	8006a3c <_printf_i+0x1ac>
 8006a12:	07df      	lsls	r7, r3, #31
 8006a14:	bf44      	itt	mi
 8006a16:	f043 0320 	orrmi.w	r3, r3, #32
 8006a1a:	6023      	strmi	r3, [r4, #0]
 8006a1c:	b91e      	cbnz	r6, 8006a26 <_printf_i+0x196>
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	f023 0320 	bic.w	r3, r3, #32
 8006a24:	6023      	str	r3, [r4, #0]
 8006a26:	2310      	movs	r3, #16
 8006a28:	e7b0      	b.n	800698c <_printf_i+0xfc>
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	f043 0320 	orr.w	r3, r3, #32
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	2378      	movs	r3, #120	; 0x78
 8006a34:	4828      	ldr	r0, [pc, #160]	; (8006ad8 <_printf_i+0x248>)
 8006a36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a3a:	e7e3      	b.n	8006a04 <_printf_i+0x174>
 8006a3c:	0659      	lsls	r1, r3, #25
 8006a3e:	bf48      	it	mi
 8006a40:	b2b6      	uxthmi	r6, r6
 8006a42:	e7e6      	b.n	8006a12 <_printf_i+0x182>
 8006a44:	4615      	mov	r5, r2
 8006a46:	e7bb      	b.n	80069c0 <_printf_i+0x130>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	6826      	ldr	r6, [r4, #0]
 8006a4c:	6961      	ldr	r1, [r4, #20]
 8006a4e:	1d18      	adds	r0, r3, #4
 8006a50:	6028      	str	r0, [r5, #0]
 8006a52:	0635      	lsls	r5, r6, #24
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	d501      	bpl.n	8006a5c <_printf_i+0x1cc>
 8006a58:	6019      	str	r1, [r3, #0]
 8006a5a:	e002      	b.n	8006a62 <_printf_i+0x1d2>
 8006a5c:	0670      	lsls	r0, r6, #25
 8006a5e:	d5fb      	bpl.n	8006a58 <_printf_i+0x1c8>
 8006a60:	8019      	strh	r1, [r3, #0]
 8006a62:	2300      	movs	r3, #0
 8006a64:	6123      	str	r3, [r4, #16]
 8006a66:	4615      	mov	r5, r2
 8006a68:	e7ba      	b.n	80069e0 <_printf_i+0x150>
 8006a6a:	682b      	ldr	r3, [r5, #0]
 8006a6c:	1d1a      	adds	r2, r3, #4
 8006a6e:	602a      	str	r2, [r5, #0]
 8006a70:	681d      	ldr	r5, [r3, #0]
 8006a72:	6862      	ldr	r2, [r4, #4]
 8006a74:	2100      	movs	r1, #0
 8006a76:	4628      	mov	r0, r5
 8006a78:	f7f9 fbca 	bl	8000210 <memchr>
 8006a7c:	b108      	cbz	r0, 8006a82 <_printf_i+0x1f2>
 8006a7e:	1b40      	subs	r0, r0, r5
 8006a80:	6060      	str	r0, [r4, #4]
 8006a82:	6863      	ldr	r3, [r4, #4]
 8006a84:	6123      	str	r3, [r4, #16]
 8006a86:	2300      	movs	r3, #0
 8006a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a8c:	e7a8      	b.n	80069e0 <_printf_i+0x150>
 8006a8e:	6923      	ldr	r3, [r4, #16]
 8006a90:	462a      	mov	r2, r5
 8006a92:	4649      	mov	r1, r9
 8006a94:	4640      	mov	r0, r8
 8006a96:	47d0      	blx	sl
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d0ab      	beq.n	80069f4 <_printf_i+0x164>
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	079b      	lsls	r3, r3, #30
 8006aa0:	d413      	bmi.n	8006aca <_printf_i+0x23a>
 8006aa2:	68e0      	ldr	r0, [r4, #12]
 8006aa4:	9b03      	ldr	r3, [sp, #12]
 8006aa6:	4298      	cmp	r0, r3
 8006aa8:	bfb8      	it	lt
 8006aaa:	4618      	movlt	r0, r3
 8006aac:	e7a4      	b.n	80069f8 <_printf_i+0x168>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	4632      	mov	r2, r6
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	4640      	mov	r0, r8
 8006ab6:	47d0      	blx	sl
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d09b      	beq.n	80069f4 <_printf_i+0x164>
 8006abc:	3501      	adds	r5, #1
 8006abe:	68e3      	ldr	r3, [r4, #12]
 8006ac0:	9903      	ldr	r1, [sp, #12]
 8006ac2:	1a5b      	subs	r3, r3, r1
 8006ac4:	42ab      	cmp	r3, r5
 8006ac6:	dcf2      	bgt.n	8006aae <_printf_i+0x21e>
 8006ac8:	e7eb      	b.n	8006aa2 <_printf_i+0x212>
 8006aca:	2500      	movs	r5, #0
 8006acc:	f104 0619 	add.w	r6, r4, #25
 8006ad0:	e7f5      	b.n	8006abe <_printf_i+0x22e>
 8006ad2:	bf00      	nop
 8006ad4:	0800719d 	.word	0x0800719d
 8006ad8:	080071ae 	.word	0x080071ae

08006adc <_sbrk_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4d06      	ldr	r5, [pc, #24]	; (8006af8 <_sbrk_r+0x1c>)
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	602b      	str	r3, [r5, #0]
 8006ae8:	f7fb f830 	bl	8001b4c <_sbrk>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d102      	bne.n	8006af6 <_sbrk_r+0x1a>
 8006af0:	682b      	ldr	r3, [r5, #0]
 8006af2:	b103      	cbz	r3, 8006af6 <_sbrk_r+0x1a>
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	bd38      	pop	{r3, r4, r5, pc}
 8006af8:	20000868 	.word	0x20000868

08006afc <__sread>:
 8006afc:	b510      	push	{r4, lr}
 8006afe:	460c      	mov	r4, r1
 8006b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b04:	f000 f8a0 	bl	8006c48 <_read_r>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	bfab      	itete	ge
 8006b0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8006b10:	181b      	addge	r3, r3, r0
 8006b12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b16:	bfac      	ite	ge
 8006b18:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b1a:	81a3      	strhlt	r3, [r4, #12]
 8006b1c:	bd10      	pop	{r4, pc}

08006b1e <__swrite>:
 8006b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b22:	461f      	mov	r7, r3
 8006b24:	898b      	ldrh	r3, [r1, #12]
 8006b26:	05db      	lsls	r3, r3, #23
 8006b28:	4605      	mov	r5, r0
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	4616      	mov	r6, r2
 8006b2e:	d505      	bpl.n	8006b3c <__swrite+0x1e>
 8006b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b34:	2302      	movs	r3, #2
 8006b36:	2200      	movs	r2, #0
 8006b38:	f000 f868 	bl	8006c0c <_lseek_r>
 8006b3c:	89a3      	ldrh	r3, [r4, #12]
 8006b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b46:	81a3      	strh	r3, [r4, #12]
 8006b48:	4632      	mov	r2, r6
 8006b4a:	463b      	mov	r3, r7
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b52:	f000 b817 	b.w	8006b84 <_write_r>

08006b56 <__sseek>:
 8006b56:	b510      	push	{r4, lr}
 8006b58:	460c      	mov	r4, r1
 8006b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b5e:	f000 f855 	bl	8006c0c <_lseek_r>
 8006b62:	1c43      	adds	r3, r0, #1
 8006b64:	89a3      	ldrh	r3, [r4, #12]
 8006b66:	bf15      	itete	ne
 8006b68:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b72:	81a3      	strheq	r3, [r4, #12]
 8006b74:	bf18      	it	ne
 8006b76:	81a3      	strhne	r3, [r4, #12]
 8006b78:	bd10      	pop	{r4, pc}

08006b7a <__sclose>:
 8006b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b7e:	f000 b813 	b.w	8006ba8 <_close_r>
	...

08006b84 <_write_r>:
 8006b84:	b538      	push	{r3, r4, r5, lr}
 8006b86:	4d07      	ldr	r5, [pc, #28]	; (8006ba4 <_write_r+0x20>)
 8006b88:	4604      	mov	r4, r0
 8006b8a:	4608      	mov	r0, r1
 8006b8c:	4611      	mov	r1, r2
 8006b8e:	2200      	movs	r2, #0
 8006b90:	602a      	str	r2, [r5, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	f7fa fe38 	bl	8001808 <_write>
 8006b98:	1c43      	adds	r3, r0, #1
 8006b9a:	d102      	bne.n	8006ba2 <_write_r+0x1e>
 8006b9c:	682b      	ldr	r3, [r5, #0]
 8006b9e:	b103      	cbz	r3, 8006ba2 <_write_r+0x1e>
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	bd38      	pop	{r3, r4, r5, pc}
 8006ba4:	20000868 	.word	0x20000868

08006ba8 <_close_r>:
 8006ba8:	b538      	push	{r3, r4, r5, lr}
 8006baa:	4d06      	ldr	r5, [pc, #24]	; (8006bc4 <_close_r+0x1c>)
 8006bac:	2300      	movs	r3, #0
 8006bae:	4604      	mov	r4, r0
 8006bb0:	4608      	mov	r0, r1
 8006bb2:	602b      	str	r3, [r5, #0]
 8006bb4:	f7fa ff95 	bl	8001ae2 <_close>
 8006bb8:	1c43      	adds	r3, r0, #1
 8006bba:	d102      	bne.n	8006bc2 <_close_r+0x1a>
 8006bbc:	682b      	ldr	r3, [r5, #0]
 8006bbe:	b103      	cbz	r3, 8006bc2 <_close_r+0x1a>
 8006bc0:	6023      	str	r3, [r4, #0]
 8006bc2:	bd38      	pop	{r3, r4, r5, pc}
 8006bc4:	20000868 	.word	0x20000868

08006bc8 <_fstat_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	4d07      	ldr	r5, [pc, #28]	; (8006be8 <_fstat_r+0x20>)
 8006bcc:	2300      	movs	r3, #0
 8006bce:	4604      	mov	r4, r0
 8006bd0:	4608      	mov	r0, r1
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	602b      	str	r3, [r5, #0]
 8006bd6:	f7fa ff90 	bl	8001afa <_fstat>
 8006bda:	1c43      	adds	r3, r0, #1
 8006bdc:	d102      	bne.n	8006be4 <_fstat_r+0x1c>
 8006bde:	682b      	ldr	r3, [r5, #0]
 8006be0:	b103      	cbz	r3, 8006be4 <_fstat_r+0x1c>
 8006be2:	6023      	str	r3, [r4, #0]
 8006be4:	bd38      	pop	{r3, r4, r5, pc}
 8006be6:	bf00      	nop
 8006be8:	20000868 	.word	0x20000868

08006bec <_isatty_r>:
 8006bec:	b538      	push	{r3, r4, r5, lr}
 8006bee:	4d06      	ldr	r5, [pc, #24]	; (8006c08 <_isatty_r+0x1c>)
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	4608      	mov	r0, r1
 8006bf6:	602b      	str	r3, [r5, #0]
 8006bf8:	f7fa ff8f 	bl	8001b1a <_isatty>
 8006bfc:	1c43      	adds	r3, r0, #1
 8006bfe:	d102      	bne.n	8006c06 <_isatty_r+0x1a>
 8006c00:	682b      	ldr	r3, [r5, #0]
 8006c02:	b103      	cbz	r3, 8006c06 <_isatty_r+0x1a>
 8006c04:	6023      	str	r3, [r4, #0]
 8006c06:	bd38      	pop	{r3, r4, r5, pc}
 8006c08:	20000868 	.word	0x20000868

08006c0c <_lseek_r>:
 8006c0c:	b538      	push	{r3, r4, r5, lr}
 8006c0e:	4d07      	ldr	r5, [pc, #28]	; (8006c2c <_lseek_r+0x20>)
 8006c10:	4604      	mov	r4, r0
 8006c12:	4608      	mov	r0, r1
 8006c14:	4611      	mov	r1, r2
 8006c16:	2200      	movs	r2, #0
 8006c18:	602a      	str	r2, [r5, #0]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	f7fa ff88 	bl	8001b30 <_lseek>
 8006c20:	1c43      	adds	r3, r0, #1
 8006c22:	d102      	bne.n	8006c2a <_lseek_r+0x1e>
 8006c24:	682b      	ldr	r3, [r5, #0]
 8006c26:	b103      	cbz	r3, 8006c2a <_lseek_r+0x1e>
 8006c28:	6023      	str	r3, [r4, #0]
 8006c2a:	bd38      	pop	{r3, r4, r5, pc}
 8006c2c:	20000868 	.word	0x20000868

08006c30 <__malloc_lock>:
 8006c30:	4801      	ldr	r0, [pc, #4]	; (8006c38 <__malloc_lock+0x8>)
 8006c32:	f7ff bb15 	b.w	8006260 <__retarget_lock_acquire_recursive>
 8006c36:	bf00      	nop
 8006c38:	2000085c 	.word	0x2000085c

08006c3c <__malloc_unlock>:
 8006c3c:	4801      	ldr	r0, [pc, #4]	; (8006c44 <__malloc_unlock+0x8>)
 8006c3e:	f7ff bb10 	b.w	8006262 <__retarget_lock_release_recursive>
 8006c42:	bf00      	nop
 8006c44:	2000085c 	.word	0x2000085c

08006c48 <_read_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	4d07      	ldr	r5, [pc, #28]	; (8006c68 <_read_r+0x20>)
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	4608      	mov	r0, r1
 8006c50:	4611      	mov	r1, r2
 8006c52:	2200      	movs	r2, #0
 8006c54:	602a      	str	r2, [r5, #0]
 8006c56:	461a      	mov	r2, r3
 8006c58:	f7fa ff26 	bl	8001aa8 <_read>
 8006c5c:	1c43      	adds	r3, r0, #1
 8006c5e:	d102      	bne.n	8006c66 <_read_r+0x1e>
 8006c60:	682b      	ldr	r3, [r5, #0]
 8006c62:	b103      	cbz	r3, 8006c66 <_read_r+0x1e>
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	bd38      	pop	{r3, r4, r5, pc}
 8006c68:	20000868 	.word	0x20000868

08006c6c <_init>:
 8006c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6e:	bf00      	nop
 8006c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c72:	bc08      	pop	{r3}
 8006c74:	469e      	mov	lr, r3
 8006c76:	4770      	bx	lr

08006c78 <_fini>:
 8006c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7a:	bf00      	nop
 8006c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7e:	bc08      	pop	{r3}
 8006c80:	469e      	mov	lr, r3
 8006c82:	4770      	bx	lr
