
STMF446_CAN_1command.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003938  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003afc  08003afc  00013afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b14  08003b14  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003b14  08003b14  00013b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b1c  08003b1c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b1c  08003b1c  00013b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b20  08003b20  00013b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000010  08003b34  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003b34  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2d0  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a97  00000000  00000000  0002b310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  0002cda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f0  00000000  00000000  0002d630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000226a  00000000  00000000  0002de20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae83  00000000  00000000  0003008a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cad01  00000000  00000000  0003af0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105c0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002280  00000000  00000000  00105c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003ae4 	.word	0x08003ae4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08003ae4 	.word	0x08003ae4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	sFilterConfig.FilterBank = 0;
 800050c:	4b43      	ldr	r3, [pc, #268]	; (800061c <main+0x114>)
 800050e:	2200      	movs	r2, #0
 8000510:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000512:	4b42      	ldr	r3, [pc, #264]	; (800061c <main+0x114>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000518:	4b40      	ldr	r3, [pc, #256]	; (800061c <main+0x114>)
 800051a:	2201      	movs	r2, #1
 800051c:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 800051e:	4b3f      	ldr	r3, [pc, #252]	; (800061c <main+0x114>)
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000524:	4b3d      	ldr	r3, [pc, #244]	; (800061c <main+0x114>)
 8000526:	2200      	movs	r2, #0
 8000528:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800052a:	4b3c      	ldr	r3, [pc, #240]	; (800061c <main+0x114>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000530:	4b3a      	ldr	r3, [pc, #232]	; (800061c <main+0x114>)
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000536:	4b39      	ldr	r3, [pc, #228]	; (800061c <main+0x114>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
//	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;
	sFilterConfig.FilterActivation=ENABLE;
 800053c:	4b37      	ldr	r3, [pc, #220]	; (800061c <main+0x114>)
 800053e:	2201      	movs	r2, #1
 8000540:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank=14;
 8000542:	4b36      	ldr	r3, [pc, #216]	; (800061c <main+0x114>)
 8000544:	220e      	movs	r2, #14
 8000546:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 8000548:	4934      	ldr	r1, [pc, #208]	; (800061c <main+0x114>)
 800054a:	4835      	ldr	r0, [pc, #212]	; (8000620 <main+0x118>)
 800054c:	f000 fcea 	bl	8000f24 <HAL_CAN_ConfigFilter>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <main+0x52>
	{
		Error_Handler();
 8000556:	f000 f9e7 	bl	8000928 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 800055a:	4831      	ldr	r0, [pc, #196]	; (8000620 <main+0x118>)
 800055c:	f000 fdc2 	bl	80010e4 <HAL_CAN_Start>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <main+0x62>
	{
		Error_Handler();
 8000566:	f000 f9df 	bl	8000928 <Error_Handler>
	}

	if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800056a:	2103      	movs	r1, #3
 800056c:	482c      	ldr	r0, [pc, #176]	; (8000620 <main+0x118>)
 800056e:	f000 ffea 	bl	8001546 <HAL_CAN_ActivateNotification>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <main+0x74>
	{
		Error_Handler();
 8000578:	f000 f9d6 	bl	8000928 <Error_Handler>
	}
//	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
//	HAL_CAN_Start(&hcan1);
//	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);

	TxHeader.StdId=0x141;
 800057c:	4b29      	ldr	r3, [pc, #164]	; (8000624 <main+0x11c>)
 800057e:	f240 1241 	movw	r2, #321	; 0x141
 8000582:	601a      	str	r2, [r3, #0]
	//TxHeader.ExtId=0x01;
	TxHeader.RTR = CAN_RTR_DATA;
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <main+0x11c>)
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <main+0x11c>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8000590:	4b24      	ldr	r3, [pc, #144]	; (8000624 <main+0x11c>)
 8000592:	2208      	movs	r2, #8
 8000594:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000596:	4b23      	ldr	r3, [pc, #140]	; (8000624 <main+0x11c>)
 8000598:	2200      	movs	r2, #0
 800059a:	751a      	strb	r2, [r3, #20]
	TxData[0] = 0xA4;
 800059c:	4b22      	ldr	r3, [pc, #136]	; (8000628 <main+0x120>)
 800059e:	22a4      	movs	r2, #164	; 0xa4
 80005a0:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x0F;
 80005a2:	4b21      	ldr	r3, [pc, #132]	; (8000628 <main+0x120>)
 80005a4:	220f      	movs	r2, #15
 80005a6:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0x00;
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <main+0x120>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0x64;
 80005ae:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <main+0x120>)
 80005b0:	2264      	movs	r2, #100	; 0x64
 80005b2:	70da      	strb	r2, [r3, #3]
	TxData[4] = 0x50;
 80005b4:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <main+0x120>)
 80005b6:	2250      	movs	r2, #80	; 0x50
 80005b8:	711a      	strb	r2, [r3, #4]
	TxData[5] = 0x46;
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <main+0x120>)
 80005bc:	2246      	movs	r2, #70	; 0x46
 80005be:	715a      	strb	r2, [r3, #5]
	TxData[6] = 0x00;
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <main+0x120>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	719a      	strb	r2, [r3, #6]
	TxData[7] = 0x00;
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <main+0x120>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	71da      	strb	r2, [r3, #7]
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80005cc:	4b17      	ldr	r3, [pc, #92]	; (800062c <main+0x124>)
 80005ce:	4a16      	ldr	r2, [pc, #88]	; (8000628 <main+0x120>)
 80005d0:	4914      	ldr	r1, [pc, #80]	; (8000624 <main+0x11c>)
 80005d2:	4813      	ldr	r0, [pc, #76]	; (8000620 <main+0x118>)
 80005d4:	f000 fdca 	bl	800116c <HAL_CAN_AddTxMessage>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <main+0xda>
	{
	   Error_Handler ();
 80005de:	f000 f9a3 	bl	8000928 <Error_Handler>
	}
//	printf("MailBox:%ld",HAL_CAN_GetTxMailboxesFreeLevel);
	HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <main+0x124>)
 80005e4:	4a10      	ldr	r2, [pc, #64]	; (8000628 <main+0x120>)
 80005e6:	490f      	ldr	r1, [pc, #60]	; (8000624 <main+0x11c>)
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <main+0x118>)
 80005ea:	f000 fdbf 	bl	800116c <HAL_CAN_AddTxMessage>
	HAL_Delay(100);
 80005ee:	2064      	movs	r0, #100	; 0x64
 80005f0:	f000 fb78 	bl	8000ce4 <HAL_Delay>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fb04 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f81a 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f8e4 	bl	80007c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000600:	f000 f8b8 	bl	8000774 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000604:	f000 f880 	bl	8000708 <MX_CAN1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <main+0x124>)
 800060a:	4a07      	ldr	r2, [pc, #28]	; (8000628 <main+0x120>)
 800060c:	4905      	ldr	r1, [pc, #20]	; (8000624 <main+0x11c>)
 800060e:	4804      	ldr	r0, [pc, #16]	; (8000620 <main+0x118>)
 8000610:	f000 fdac 	bl	800116c <HAL_CAN_AddTxMessage>
	  HAL_Delay(100);
 8000614:	2064      	movs	r0, #100	; 0x64
 8000616:	f000 fb65 	bl	8000ce4 <HAL_Delay>
	  HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 800061a:	e7f5      	b.n	8000608 <main+0x100>
 800061c:	20000098 	.word	0x20000098
 8000620:	2000002c 	.word	0x2000002c
 8000624:	200000c0 	.word	0x200000c0
 8000628:	200000f4 	.word	0x200000f4
 800062c:	20000104 	.word	0x20000104

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	2234      	movs	r2, #52	; 0x34
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f003 fa48 	bl	8003ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b29      	ldr	r3, [pc, #164]	; (8000700 <SystemClock_Config+0xd0>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a28      	ldr	r2, [pc, #160]	; (8000700 <SystemClock_Config+0xd0>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b26      	ldr	r3, [pc, #152]	; (8000700 <SystemClock_Config+0xd0>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <SystemClock_Config+0xd4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a22      	ldr	r2, [pc, #136]	; (8000704 <SystemClock_Config+0xd4>)
 800067a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b20      	ldr	r3, [pc, #128]	; (8000704 <SystemClock_Config+0xd4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a0:	2308      	movs	r3, #8
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 80006a4:	23a0      	movs	r3, #160	; 0xa0
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 f835 	bl	8002728 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c4:	f000 f930 	bl	8000928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	2105      	movs	r1, #5
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fcd4 	bl	8002094 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006f2:	f000 f919 	bl	8000928 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	; 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_CAN1_Init+0x64>)
 800070e:	4a18      	ldr	r2, [pc, #96]	; (8000770 <MX_CAN1_Init+0x68>)
 8000710:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_CAN1_Init+0x64>)
 8000714:	2204      	movs	r2, #4
 8000716:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_CAN1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_CAN1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_CAN1_Init+0x64>)
 8000726:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800072a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_CAN1_Init+0x64>)
 800072e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000732:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_CAN1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_CAN1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_CAN1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_CAN1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_CAN1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_CAN1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_CAN1_Init+0x64>)
 800075a:	f000 fae7 	bl	8000d2c <HAL_CAN_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000764:	f000 f8e0 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	2000002c 	.word	0x2000002c
 8000770:	40006400 	.word	0x40006400

08000774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 800077a:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <MX_USART2_UART_Init+0x50>)
 800077c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007ac:	f002 fa5a 	bl	8002c64 <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b6:	f000 f8b7 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000054 	.word	0x20000054
 80007c4:	40004400 	.word	0x40004400

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b37      	ldr	r3, [pc, #220]	; (80008c0 <MX_GPIO_Init+0xf8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a36      	ldr	r2, [pc, #216]	; (80008c0 <MX_GPIO_Init+0xf8>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b34      	ldr	r3, [pc, #208]	; (80008c0 <MX_GPIO_Init+0xf8>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b30      	ldr	r3, [pc, #192]	; (80008c0 <MX_GPIO_Init+0xf8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a2f      	ldr	r2, [pc, #188]	; (80008c0 <MX_GPIO_Init+0xf8>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b2d      	ldr	r3, [pc, #180]	; (80008c0 <MX_GPIO_Init+0xf8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <MX_GPIO_Init+0xf8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a28      	ldr	r2, [pc, #160]	; (80008c0 <MX_GPIO_Init+0xf8>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <MX_GPIO_Init+0xf8>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <MX_GPIO_Init+0xf8>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <MX_GPIO_Init+0xf8>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <MX_GPIO_Init+0xf8>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2120      	movs	r1, #32
 8000852:	481c      	ldr	r0, [pc, #112]	; (80008c4 <MX_GPIO_Init+0xfc>)
 8000854:	f001 fc04 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2110      	movs	r1, #16
 800085c:	481a      	ldr	r0, [pc, #104]	; (80008c8 <MX_GPIO_Init+0x100>)
 800085e:	f001 fbff 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000868:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	4814      	ldr	r0, [pc, #80]	; (80008cc <MX_GPIO_Init+0x104>)
 800087a:	f001 fa5d 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800087e:	2320      	movs	r3, #32
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	480b      	ldr	r0, [pc, #44]	; (80008c4 <MX_GPIO_Init+0xfc>)
 8000896:	f001 fa4f 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800089a:	2310      	movs	r3, #16
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_GPIO_Init+0x100>)
 80008b2:	f001 fa41 	bl	8001d38 <HAL_GPIO_Init>

}
 80008b6:	bf00      	nop
 80008b8:	3728      	adds	r7, #40	; 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020000 	.word	0x40020000
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40020800 	.word	0x40020800

080008d0 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
//  HAL_UART_Transmit(&huart2, tx_data, 10,3000);
  HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0, &RxHeader,RxData);
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80008dc:	2100      	movs	r1, #0
 80008de:	480f      	ldr	r0, [pc, #60]	; (800091c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80008e0:	f000 fd1f 	bl	8001322 <HAL_CAN_GetRxMessage>
//  HAL_UART_Transmit(&huart2,RxData,1,3000);
  flag *= -1;
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	425b      	negs	r3, r3
 80008ea:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80008ec:	6013      	str	r3, [r2, #0]
  if(flag >0){
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	dd05      	ble.n	8000902 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2120      	movs	r1, #32
 80008fa:	480a      	ldr	r0, [pc, #40]	; (8000924 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80008fc:	f001 fbb0 	bl	8002060 <HAL_GPIO_WritePin>
  }else{
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
  }
}
 8000900:	e004      	b.n	800090c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 8000902:	2200      	movs	r2, #0
 8000904:	2120      	movs	r1, #32
 8000906:	4807      	ldr	r0, [pc, #28]	; (8000924 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000908:	f001 fbaa 	bl	8002060 <HAL_GPIO_WritePin>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200000fc 	.word	0x200000fc
 8000918:	200000d8 	.word	0x200000d8
 800091c:	2000002c 	.word	0x2000002c
 8000920:	20000000 	.word	0x20000000
 8000924:	40020000 	.word	0x40020000

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	e7fe      	b.n	8000930 <Error_Handler+0x8>
	...

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <HAL_MspInit+0x4c>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_MspInit+0x4c>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800

08000984 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a2a      	ldr	r2, [pc, #168]	; (8000a4c <HAL_CAN_MspInit+0xc8>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d14d      	bne.n	8000a42 <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <HAL_CAN_MspInit+0xcc>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a28      	ldr	r2, [pc, #160]	; (8000a50 <HAL_CAN_MspInit+0xcc>)
 80009b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <HAL_CAN_MspInit+0xcc>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b22      	ldr	r3, [pc, #136]	; (8000a50 <HAL_CAN_MspInit+0xcc>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a21      	ldr	r2, [pc, #132]	; (8000a50 <HAL_CAN_MspInit+0xcc>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <HAL_CAN_MspInit+0xcc>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ec:	2302      	movs	r3, #2
 80009ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009f0:	2309      	movs	r3, #9
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	4816      	ldr	r0, [pc, #88]	; (8000a54 <HAL_CAN_MspInit+0xd0>)
 80009fc:	f001 f99c 	bl	8001d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a12:	2309      	movs	r3, #9
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <HAL_CAN_MspInit+0xd0>)
 8000a1e:	f001 f98b 	bl	8001d38 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2013      	movs	r0, #19
 8000a28:	f001 f8bd 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000a2c:	2013      	movs	r0, #19
 8000a2e:	f001 f8d6 	bl	8001bde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	2014      	movs	r0, #20
 8000a38:	f001 f8b5 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a3c:	2014      	movs	r0, #20
 8000a3e:	f001 f8ce 	bl	8001bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40006400 	.word	0x40006400
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020000 	.word	0x40020000

08000a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a1d      	ldr	r2, [pc, #116]	; (8000aec <HAL_UART_MspInit+0x94>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d133      	bne.n	8000ae2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <HAL_UART_MspInit+0x98>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	4a1b      	ldr	r2, [pc, #108]	; (8000af0 <HAL_UART_MspInit+0x98>)
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a88:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8a:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <HAL_UART_MspInit+0x98>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_UART_MspInit+0x98>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <HAL_UART_MspInit+0x98>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_UART_MspInit+0x98>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4809      	ldr	r0, [pc, #36]	; (8000af4 <HAL_UART_MspInit+0x9c>)
 8000ace:	f001 f933 	bl	8001d38 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2026      	movs	r0, #38	; 0x26
 8000ad8:	f001 f865 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000adc:	2026      	movs	r0, #38	; 0x26
 8000ade:	f001 f87e 	bl	8001bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	; 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40004400 	.word	0x40004400
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b44:	f000 f8ae 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <CAN1_TX_IRQHandler+0x10>)
 8000b52:	f000 fd1e 	bl	8001592 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000002c 	.word	0x2000002c

08000b60 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <CAN1_RX0_IRQHandler+0x10>)
 8000b66:	f000 fd14 	bl	8001592 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2000002c 	.word	0x2000002c

08000b74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <USART2_IRQHandler+0x10>)
 8000b7a:	f002 f8c1 	bl	8002d00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000054 	.word	0x20000054

08000b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb0:	480d      	ldr	r0, [pc, #52]	; (8000be8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bb2:	490e      	ldr	r1, [pc, #56]	; (8000bec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bb4:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bc8:	4c0b      	ldr	r4, [pc, #44]	; (8000bf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bd6:	f7ff ffd7 	bl	8000b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bda:	f002 ff57 	bl	8003a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fc93 	bl	8000508 <main>
  bx  lr    
 8000be2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bf0:	08003b24 	.word	0x08003b24
  ldr r2, =_sbss
 8000bf4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bf8:	2000010c 	.word	0x2000010c

08000bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <HAL_Init+0x40>)
 8000c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_Init+0x40>)
 8000c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_Init+0x40>)
 8000c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 ffb1 	bl	8001b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 f808 	bl	8000c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff fe7e 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023c00 	.word	0x40023c00

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_InitTick+0x54>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x58>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 ffc9 	bl	8001bfa <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00e      	b.n	8000c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d80a      	bhi.n	8000c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c80:	f000 ff91 	bl	8001ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <HAL_InitTick+0x5c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000004 	.word	0x20000004
 8000c9c:	2000000c 	.word	0x2000000c
 8000ca0:	20000008 	.word	0x20000008

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	2000000c 	.word	0x2000000c
 8000cc8:	20000108 	.word	0x20000108

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000108 	.word	0x20000108

08000ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff ffee 	bl	8000ccc <HAL_GetTick>
 8000cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cfc:	d005      	beq.n	8000d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_Delay+0x44>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d0a:	bf00      	nop
 8000d0c:	f7ff ffde 	bl	8000ccc <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8f7      	bhi.n	8000d0c <HAL_Delay+0x28>
  {
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	2000000c 	.word	0x2000000c

08000d2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d101      	bne.n	8000d3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e0ed      	b.n	8000f1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d102      	bne.n	8000d50 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff fe1a 	bl	8000984 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f042 0201 	orr.w	r2, r2, #1
 8000d5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d60:	f7ff ffb4 	bl	8000ccc <HAL_GetTick>
 8000d64:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d66:	e012      	b.n	8000d8e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d68:	f7ff ffb0 	bl	8000ccc <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	2b0a      	cmp	r3, #10
 8000d74:	d90b      	bls.n	8000d8e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2205      	movs	r2, #5
 8000d86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e0c5      	b.n	8000f1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0e5      	beq.n	8000d68 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f022 0202 	bic.w	r2, r2, #2
 8000daa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dac:	f7ff ff8e 	bl	8000ccc <HAL_GetTick>
 8000db0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000db2:	e012      	b.n	8000dda <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000db4:	f7ff ff8a 	bl	8000ccc <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b0a      	cmp	r3, #10
 8000dc0:	d90b      	bls.n	8000dda <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2205      	movs	r2, #5
 8000dd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e09f      	b.n	8000f1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1e5      	bne.n	8000db4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	7e1b      	ldrb	r3, [r3, #24]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d108      	bne.n	8000e02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	e007      	b.n	8000e12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	7e5b      	ldrb	r3, [r3, #25]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d108      	bne.n	8000e2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	e007      	b.n	8000e3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	7e9b      	ldrb	r3, [r3, #26]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d108      	bne.n	8000e56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f042 0220 	orr.w	r2, r2, #32
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	e007      	b.n	8000e66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f022 0220 	bic.w	r2, r2, #32
 8000e64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7edb      	ldrb	r3, [r3, #27]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d108      	bne.n	8000e80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 0210 	bic.w	r2, r2, #16
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	e007      	b.n	8000e90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f042 0210 	orr.w	r2, r2, #16
 8000e8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	7f1b      	ldrb	r3, [r3, #28]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d108      	bne.n	8000eaa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f042 0208 	orr.w	r2, r2, #8
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	e007      	b.n	8000eba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f022 0208 	bic.w	r2, r2, #8
 8000eb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	7f5b      	ldrb	r3, [r3, #29]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d108      	bne.n	8000ed4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f042 0204 	orr.w	r2, r2, #4
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	e007      	b.n	8000ee4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 0204 	bic.w	r2, r2, #4
 8000ee2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	431a      	orrs	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	ea42 0103 	orr.w	r1, r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	1e5a      	subs	r2, r3, #1
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b087      	sub	sp, #28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f3a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f3c:	7cfb      	ldrb	r3, [r7, #19]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d003      	beq.n	8000f4a <HAL_CAN_ConfigFilter+0x26>
 8000f42:	7cfb      	ldrb	r3, [r7, #19]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	f040 80be 	bne.w	80010c6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000f4a:	4b65      	ldr	r3, [pc, #404]	; (80010e0 <HAL_CAN_ConfigFilter+0x1bc>)
 8000f4c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f54:	f043 0201 	orr.w	r2, r3, #1
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f64:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	f003 031f 	and.w	r3, r3, #31
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	401a      	ands	r2, r3
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d123      	bne.n	8000ff4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	3248      	adds	r2, #72	; 0x48
 8000fd4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fe8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fea:	6979      	ldr	r1, [r7, #20]
 8000fec:	3348      	adds	r3, #72	; 0x48
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	440b      	add	r3, r1
 8000ff2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	69db      	ldr	r3, [r3, #28]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d122      	bne.n	8001042 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	431a      	orrs	r2, r3
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800101c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3248      	adds	r2, #72	; 0x48
 8001022:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001036:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001038:	6979      	ldr	r1, [r7, #20]
 800103a:	3348      	adds	r3, #72	; 0x48
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	440b      	add	r3, r1
 8001040:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d109      	bne.n	800105e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	43db      	mvns	r3, r3
 8001054:	401a      	ands	r2, r3
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800105c:	e007      	b.n	800106e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	431a      	orrs	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d109      	bne.n	800108a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	43db      	mvns	r3, r3
 8001080:	401a      	ands	r2, r3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001088:	e007      	b.n	800109a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	431a      	orrs	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d107      	bne.n	80010b2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	431a      	orrs	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010b8:	f023 0201 	bic.w	r2, r3, #1
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e006      	b.n	80010d4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
  }
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	371c      	adds	r7, #28
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40006400 	.word	0x40006400

080010e4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d12e      	bne.n	8001156 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2202      	movs	r2, #2
 80010fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0201 	bic.w	r2, r2, #1
 800110e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001110:	f7ff fddc 	bl	8000ccc <HAL_GetTick>
 8001114:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001116:	e012      	b.n	800113e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001118:	f7ff fdd8 	bl	8000ccc <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b0a      	cmp	r3, #10
 8001124:	d90b      	bls.n	800113e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2205      	movs	r2, #5
 8001136:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e012      	b.n	8001164 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1e5      	bne.n	8001118 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e006      	b.n	8001164 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
  }
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001180:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800118a:	7ffb      	ldrb	r3, [r7, #31]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d003      	beq.n	8001198 <HAL_CAN_AddTxMessage+0x2c>
 8001190:	7ffb      	ldrb	r3, [r7, #31]
 8001192:	2b02      	cmp	r3, #2
 8001194:	f040 80b8 	bne.w	8001308 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10a      	bne.n	80011b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d105      	bne.n	80011b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 80a0 	beq.w	80012f8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	0e1b      	lsrs	r3, r3, #24
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d907      	bls.n	80011d8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e09e      	b.n	8001316 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80011d8:	2201      	movs	r2, #1
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	409a      	lsls	r2, r3
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10d      	bne.n	8001206 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011f4:	68f9      	ldr	r1, [r7, #12]
 80011f6:	6809      	ldr	r1, [r1, #0]
 80011f8:	431a      	orrs	r2, r3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3318      	adds	r3, #24
 80011fe:	011b      	lsls	r3, r3, #4
 8001200:	440b      	add	r3, r1
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	e00f      	b.n	8001226 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001210:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001216:	68f9      	ldr	r1, [r7, #12]
 8001218:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800121a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	3318      	adds	r3, #24
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	440b      	add	r3, r1
 8001224:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6819      	ldr	r1, [r3, #0]
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	691a      	ldr	r2, [r3, #16]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3318      	adds	r3, #24
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	440b      	add	r3, r1
 8001236:	3304      	adds	r3, #4
 8001238:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	7d1b      	ldrb	r3, [r3, #20]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d111      	bne.n	8001266 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3318      	adds	r3, #24
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	4413      	add	r3, r2
 800124e:	3304      	adds	r3, #4
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	6811      	ldr	r1, [r2, #0]
 8001256:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3318      	adds	r3, #24
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	440b      	add	r3, r1
 8001262:	3304      	adds	r3, #4
 8001264:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3307      	adds	r3, #7
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	061a      	lsls	r2, r3, #24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3306      	adds	r3, #6
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	041b      	lsls	r3, r3, #16
 8001276:	431a      	orrs	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3305      	adds	r3, #5
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	4313      	orrs	r3, r2
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	3204      	adds	r2, #4
 8001286:	7812      	ldrb	r2, [r2, #0]
 8001288:	4610      	mov	r0, r2
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	6811      	ldr	r1, [r2, #0]
 800128e:	ea43 0200 	orr.w	r2, r3, r0
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	440b      	add	r3, r1
 8001298:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800129c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3303      	adds	r3, #3
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	061a      	lsls	r2, r3, #24
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3302      	adds	r3, #2
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	041b      	lsls	r3, r3, #16
 80012ae:	431a      	orrs	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3301      	adds	r3, #1
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	4313      	orrs	r3, r2
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	7812      	ldrb	r2, [r2, #0]
 80012be:	4610      	mov	r0, r2
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	6811      	ldr	r1, [r2, #0]
 80012c4:	ea43 0200 	orr.w	r2, r3, r0
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	440b      	add	r3, r1
 80012ce:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80012d2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	3318      	adds	r3, #24
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	4413      	add	r3, r2
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	6811      	ldr	r1, [r2, #0]
 80012e6:	f043 0201 	orr.w	r2, r3, #1
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3318      	adds	r3, #24
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	440b      	add	r3, r1
 80012f2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	e00e      	b.n	8001316 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e006      	b.n	8001316 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
  }
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	; 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001322:	b480      	push	{r7}
 8001324:	b087      	sub	sp, #28
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001336:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001338:	7dfb      	ldrb	r3, [r7, #23]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d003      	beq.n	8001346 <HAL_CAN_GetRxMessage+0x24>
 800133e:	7dfb      	ldrb	r3, [r7, #23]
 8001340:	2b02      	cmp	r3, #2
 8001342:	f040 80f3 	bne.w	800152c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10e      	bne.n	800136a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d116      	bne.n	8001388 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e0e7      	b.n	800153a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d107      	bne.n	8001388 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0d8      	b.n	800153a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	331b      	adds	r3, #27
 8001390:	011b      	lsls	r3, r3, #4
 8001392:	4413      	add	r3, r2
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0204 	and.w	r2, r3, #4
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10c      	bne.n	80013c0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	331b      	adds	r3, #27
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	4413      	add	r3, r2
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	0d5b      	lsrs	r3, r3, #21
 80013b6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	e00b      	b.n	80013d8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	331b      	adds	r3, #27
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	4413      	add	r3, r2
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	08db      	lsrs	r3, r3, #3
 80013d0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	331b      	adds	r3, #27
 80013e0:	011b      	lsls	r3, r3, #4
 80013e2:	4413      	add	r3, r2
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0202 	and.w	r2, r3, #2
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	331b      	adds	r3, #27
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	4413      	add	r3, r2
 80013fa:	3304      	adds	r3, #4
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 020f 	and.w	r2, r3, #15
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	331b      	adds	r3, #27
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	4413      	add	r3, r2
 8001412:	3304      	adds	r3, #4
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	0a1b      	lsrs	r3, r3, #8
 8001418:	b2da      	uxtb	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	331b      	adds	r3, #27
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	4413      	add	r3, r2
 800142a:	3304      	adds	r3, #4
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	0c1b      	lsrs	r3, r3, #16
 8001430:	b29a      	uxth	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	011b      	lsls	r3, r3, #4
 800143e:	4413      	add	r3, r2
 8001440:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4413      	add	r3, r2
 8001456:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	0a1a      	lsrs	r2, r3, #8
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	3301      	adds	r3, #1
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	4413      	add	r3, r2
 8001470:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	0c1a      	lsrs	r2, r3, #16
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	3302      	adds	r3, #2
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	4413      	add	r3, r2
 800148a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	0e1a      	lsrs	r2, r3, #24
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	3303      	adds	r3, #3
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	4413      	add	r3, r2
 80014a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	3304      	adds	r3, #4
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	4413      	add	r3, r2
 80014bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	0a1a      	lsrs	r2, r3, #8
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	3305      	adds	r3, #5
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	4413      	add	r3, r2
 80014d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	0c1a      	lsrs	r2, r3, #16
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	3306      	adds	r3, #6
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	4413      	add	r3, r2
 80014f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	0e1a      	lsrs	r2, r3, #24
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	3307      	adds	r3, #7
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d108      	bne.n	8001518 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f042 0220 	orr.w	r2, r2, #32
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	e007      	b.n	8001528 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	691a      	ldr	r2, [r3, #16]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0220 	orr.w	r2, r2, #32
 8001526:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	e006      	b.n	800153a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
  }
}
 800153a:	4618      	mov	r0, r3
 800153c:	371c      	adds	r7, #28
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001546:	b480      	push	{r7}
 8001548:	b085      	sub	sp, #20
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001556:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d002      	beq.n	8001564 <HAL_CAN_ActivateNotification+0x1e>
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	2b02      	cmp	r3, #2
 8001562:	d109      	bne.n	8001578 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6959      	ldr	r1, [r3, #20]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	e006      	b.n	8001586 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
  }
}
 8001586:	4618      	mov	r0, r3
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b08a      	sub	sp, #40	; 0x28
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d07c      	beq.n	80016d2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d023      	beq.n	800162a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2201      	movs	r2, #1
 80015e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f983 	bl	8001900 <HAL_CAN_TxMailbox0CompleteCallback>
 80015fa:	e016      	b.n	800162a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	2b00      	cmp	r3, #0
 8001604:	d004      	beq.n	8001610 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
 800160e:	e00c      	b.n	800162a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	d004      	beq.n	8001624 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
 8001622:	e002      	b.n	800162a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 f989 	bl	800193c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d024      	beq.n	800167e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f44f 7280 	mov.w	r2, #256	; 0x100
 800163c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f963 	bl	8001914 <HAL_CAN_TxMailbox1CompleteCallback>
 800164e:	e016      	b.n	800167e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001656:	2b00      	cmp	r3, #0
 8001658:	d004      	beq.n	8001664 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
 8001662:	e00c      	b.n	800167e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800166a:	2b00      	cmp	r3, #0
 800166c:	d004      	beq.n	8001678 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
 8001676:	e002      	b.n	800167e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 f969 	bl	8001950 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d024      	beq.n	80016d2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001690:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f943 	bl	8001928 <HAL_CAN_TxMailbox2CompleteCallback>
 80016a2:	e016      	b.n	80016d2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d004      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
 80016b6:	e00c      	b.n	80016d2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d004      	beq.n	80016cc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ca:	e002      	b.n	80016d2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f949 	bl	8001964 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00c      	beq.n	80016f6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f003 0310 	and.w	r3, r3, #16
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d007      	beq.n	80016f6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2210      	movs	r2, #16
 80016f4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00b      	beq.n	8001718 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d006      	beq.n	8001718 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2208      	movs	r2, #8
 8001710:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f930 	bl	8001978 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d009      	beq.n	8001736 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d002      	beq.n	8001736 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff f8cd 	bl	80008d0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00c      	beq.n	800175a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	f003 0310 	and.w	r3, r3, #16
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001750:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2210      	movs	r2, #16
 8001758:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	f003 0320 	and.w	r3, r3, #32
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00b      	beq.n	800177c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2208      	movs	r2, #8
 8001774:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f912 	bl	80019a0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	2b00      	cmp	r3, #0
 8001784:	d009      	beq.n	800179a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 f8f9 	bl	800198c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00b      	beq.n	80017bc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d006      	beq.n	80017bc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2210      	movs	r2, #16
 80017b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f8fc 	bl	80019b4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00b      	beq.n	80017de <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d006      	beq.n	80017de <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2208      	movs	r2, #8
 80017d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f8f5 	bl	80019c8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d07b      	beq.n	80018e0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d072      	beq.n	80018d8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001830:	2b00      	cmp	r3, #0
 8001832:	d008      	beq.n	8001846 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800184c:	2b00      	cmp	r3, #0
 800184e:	d043      	beq.n	80018d8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001856:	2b00      	cmp	r3, #0
 8001858:	d03e      	beq.n	80018d8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001860:	2b60      	cmp	r3, #96	; 0x60
 8001862:	d02b      	beq.n	80018bc <HAL_CAN_IRQHandler+0x32a>
 8001864:	2b60      	cmp	r3, #96	; 0x60
 8001866:	d82e      	bhi.n	80018c6 <HAL_CAN_IRQHandler+0x334>
 8001868:	2b50      	cmp	r3, #80	; 0x50
 800186a:	d022      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x320>
 800186c:	2b50      	cmp	r3, #80	; 0x50
 800186e:	d82a      	bhi.n	80018c6 <HAL_CAN_IRQHandler+0x334>
 8001870:	2b40      	cmp	r3, #64	; 0x40
 8001872:	d019      	beq.n	80018a8 <HAL_CAN_IRQHandler+0x316>
 8001874:	2b40      	cmp	r3, #64	; 0x40
 8001876:	d826      	bhi.n	80018c6 <HAL_CAN_IRQHandler+0x334>
 8001878:	2b30      	cmp	r3, #48	; 0x30
 800187a:	d010      	beq.n	800189e <HAL_CAN_IRQHandler+0x30c>
 800187c:	2b30      	cmp	r3, #48	; 0x30
 800187e:	d822      	bhi.n	80018c6 <HAL_CAN_IRQHandler+0x334>
 8001880:	2b10      	cmp	r3, #16
 8001882:	d002      	beq.n	800188a <HAL_CAN_IRQHandler+0x2f8>
 8001884:	2b20      	cmp	r3, #32
 8001886:	d005      	beq.n	8001894 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001888:	e01d      	b.n	80018c6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	f043 0308 	orr.w	r3, r3, #8
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001892:	e019      	b.n	80018c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	f043 0310 	orr.w	r3, r3, #16
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800189c:	e014      	b.n	80018c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	f043 0320 	orr.w	r3, r3, #32
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018a6:	e00f      	b.n	80018c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018b0:	e00a      	b.n	80018c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018ba:	e005      	b.n	80018c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018c4:	e000      	b.n	80018c8 <HAL_CAN_IRQHandler+0x336>
            break;
 80018c6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699a      	ldr	r2, [r3, #24]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018d6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2204      	movs	r2, #4
 80018de:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d008      	beq.n	80018f8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f872 	bl	80019dc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80018f8:	bf00      	nop
 80018fa:	3728      	adds	r7, #40	; 0x28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a22:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	60d3      	str	r3, [r2, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <__NVIC_GetPriorityGrouping+0x18>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	f003 0307 	and.w	r3, r3, #7
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	db0b      	blt.n	8001a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	f003 021f 	and.w	r2, r3, #31
 8001a6c:	4907      	ldr	r1, [pc, #28]	; (8001a8c <__NVIC_EnableIRQ+0x38>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	2001      	movs	r0, #1
 8001a76:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000e100 	.word	0xe000e100

08001a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db0a      	blt.n	8001aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	490c      	ldr	r1, [pc, #48]	; (8001adc <__NVIC_SetPriority+0x4c>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab8:	e00a      	b.n	8001ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4908      	ldr	r1, [pc, #32]	; (8001ae0 <__NVIC_SetPriority+0x50>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	761a      	strb	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f1c3 0307 	rsb	r3, r3, #7
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	bf28      	it	cs
 8001b02:	2304      	movcs	r3, #4
 8001b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d902      	bls.n	8001b14 <NVIC_EncodePriority+0x30>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3b03      	subs	r3, #3
 8001b12:	e000      	b.n	8001b16 <NVIC_EncodePriority+0x32>
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	401a      	ands	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	4313      	orrs	r3, r2
         );
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3724      	adds	r7, #36	; 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b5c:	d301      	bcc.n	8001b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00f      	b.n	8001b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <SysTick_Config+0x40>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6a:	210f      	movs	r1, #15
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b70:	f7ff ff8e 	bl	8001a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <SysTick_Config+0x40>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7a:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <SysTick_Config+0x40>)
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	e000e010 	.word	0xe000e010

08001b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ff29 	bl	80019f0 <__NVIC_SetPriorityGrouping>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b086      	sub	sp, #24
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb8:	f7ff ff3e 	bl	8001a38 <__NVIC_GetPriorityGrouping>
 8001bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	6978      	ldr	r0, [r7, #20]
 8001bc4:	f7ff ff8e 	bl	8001ae4 <NVIC_EncodePriority>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff5d 	bl	8001a90 <__NVIC_SetPriority>
}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff31 	bl	8001a54 <__NVIC_EnableIRQ>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ffa2 	bl	8001b4c <SysTick_Config>
 8001c08:	4603      	mov	r3, r0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c20:	f7ff f854 	bl	8000ccc <HAL_GetTick>
 8001c24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d008      	beq.n	8001c44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2280      	movs	r2, #128	; 0x80
 8001c36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e052      	b.n	8001cea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0216 	bic.w	r2, r2, #22
 8001c52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695a      	ldr	r2, [r3, #20]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d103      	bne.n	8001c74 <HAL_DMA_Abort+0x62>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d007      	beq.n	8001c84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0208 	bic.w	r2, r2, #8
 8001c82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0201 	bic.w	r2, r2, #1
 8001c92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c94:	e013      	b.n	8001cbe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c96:	f7ff f819 	bl	8000ccc <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b05      	cmp	r3, #5
 8001ca2:	d90c      	bls.n	8001cbe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2203      	movs	r2, #3
 8001cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e015      	b.n	8001cea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1e4      	bne.n	8001c96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd0:	223f      	movs	r2, #63	; 0x3f
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d004      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2280      	movs	r2, #128	; 0x80
 8001d0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e00c      	b.n	8001d2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2205      	movs	r2, #5
 8001d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0201 	bic.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
 8001d52:	e165      	b.n	8002020 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d54:	2201      	movs	r2, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	f040 8154 	bne.w	800201a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d005      	beq.n	8001d8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d130      	bne.n	8001dec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	2203      	movs	r2, #3
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 0201 	and.w	r2, r3, #1
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d017      	beq.n	8001e28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d123      	bne.n	8001e7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	08da      	lsrs	r2, r3, #3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3208      	adds	r2, #8
 8001e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	691a      	ldr	r2, [r3, #16]
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	08da      	lsrs	r2, r3, #3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3208      	adds	r2, #8
 8001e76:	69b9      	ldr	r1, [r7, #24]
 8001e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0203 	and.w	r2, r3, #3
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80ae 	beq.w	800201a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b5d      	ldr	r3, [pc, #372]	; (8002038 <HAL_GPIO_Init+0x300>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	4a5c      	ldr	r2, [pc, #368]	; (8002038 <HAL_GPIO_Init+0x300>)
 8001ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ece:	4b5a      	ldr	r3, [pc, #360]	; (8002038 <HAL_GPIO_Init+0x300>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eda:	4a58      	ldr	r2, [pc, #352]	; (800203c <HAL_GPIO_Init+0x304>)
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	220f      	movs	r2, #15
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4f      	ldr	r2, [pc, #316]	; (8002040 <HAL_GPIO_Init+0x308>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d025      	beq.n	8001f52 <HAL_GPIO_Init+0x21a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4e      	ldr	r2, [pc, #312]	; (8002044 <HAL_GPIO_Init+0x30c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d01f      	beq.n	8001f4e <HAL_GPIO_Init+0x216>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4d      	ldr	r2, [pc, #308]	; (8002048 <HAL_GPIO_Init+0x310>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d019      	beq.n	8001f4a <HAL_GPIO_Init+0x212>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4c      	ldr	r2, [pc, #304]	; (800204c <HAL_GPIO_Init+0x314>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d013      	beq.n	8001f46 <HAL_GPIO_Init+0x20e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4b      	ldr	r2, [pc, #300]	; (8002050 <HAL_GPIO_Init+0x318>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00d      	beq.n	8001f42 <HAL_GPIO_Init+0x20a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4a      	ldr	r2, [pc, #296]	; (8002054 <HAL_GPIO_Init+0x31c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d007      	beq.n	8001f3e <HAL_GPIO_Init+0x206>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a49      	ldr	r2, [pc, #292]	; (8002058 <HAL_GPIO_Init+0x320>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_GPIO_Init+0x202>
 8001f36:	2306      	movs	r3, #6
 8001f38:	e00c      	b.n	8001f54 <HAL_GPIO_Init+0x21c>
 8001f3a:	2307      	movs	r3, #7
 8001f3c:	e00a      	b.n	8001f54 <HAL_GPIO_Init+0x21c>
 8001f3e:	2305      	movs	r3, #5
 8001f40:	e008      	b.n	8001f54 <HAL_GPIO_Init+0x21c>
 8001f42:	2304      	movs	r3, #4
 8001f44:	e006      	b.n	8001f54 <HAL_GPIO_Init+0x21c>
 8001f46:	2303      	movs	r3, #3
 8001f48:	e004      	b.n	8001f54 <HAL_GPIO_Init+0x21c>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e002      	b.n	8001f54 <HAL_GPIO_Init+0x21c>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <HAL_GPIO_Init+0x21c>
 8001f52:	2300      	movs	r3, #0
 8001f54:	69fa      	ldr	r2, [r7, #28]
 8001f56:	f002 0203 	and.w	r2, r2, #3
 8001f5a:	0092      	lsls	r2, r2, #2
 8001f5c:	4093      	lsls	r3, r2
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f64:	4935      	ldr	r1, [pc, #212]	; (800203c <HAL_GPIO_Init+0x304>)
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	089b      	lsrs	r3, r3, #2
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f72:	4b3a      	ldr	r3, [pc, #232]	; (800205c <HAL_GPIO_Init+0x324>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f96:	4a31      	ldr	r2, [pc, #196]	; (800205c <HAL_GPIO_Init+0x324>)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f9c:	4b2f      	ldr	r3, [pc, #188]	; (800205c <HAL_GPIO_Init+0x324>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fc0:	4a26      	ldr	r2, [pc, #152]	; (800205c <HAL_GPIO_Init+0x324>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fc6:	4b25      	ldr	r3, [pc, #148]	; (800205c <HAL_GPIO_Init+0x324>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fea:	4a1c      	ldr	r2, [pc, #112]	; (800205c <HAL_GPIO_Init+0x324>)
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	; (800205c <HAL_GPIO_Init+0x324>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002014:	4a11      	ldr	r2, [pc, #68]	; (800205c <HAL_GPIO_Init+0x324>)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3301      	adds	r3, #1
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	2b0f      	cmp	r3, #15
 8002024:	f67f ae96 	bls.w	8001d54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	3724      	adds	r7, #36	; 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800
 800203c:	40013800 	.word	0x40013800
 8002040:	40020000 	.word	0x40020000
 8002044:	40020400 	.word	0x40020400
 8002048:	40020800 	.word	0x40020800
 800204c:	40020c00 	.word	0x40020c00
 8002050:	40021000 	.word	0x40021000
 8002054:	40021400 	.word	0x40021400
 8002058:	40021800 	.word	0x40021800
 800205c:	40013c00 	.word	0x40013c00

08002060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	807b      	strh	r3, [r7, #2]
 800206c:	4613      	mov	r3, r2
 800206e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002070:	787b      	ldrb	r3, [r7, #1]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002076:	887a      	ldrh	r2, [r7, #2]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800207c:	e003      	b.n	8002086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800207e:	887b      	ldrh	r3, [r7, #2]
 8002080:	041a      	lsls	r2, r3, #16
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	619a      	str	r2, [r3, #24]
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0cc      	b.n	8002242 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020a8:	4b68      	ldr	r3, [pc, #416]	; (800224c <HAL_RCC_ClockConfig+0x1b8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 030f 	and.w	r3, r3, #15
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d90c      	bls.n	80020d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	4b65      	ldr	r3, [pc, #404]	; (800224c <HAL_RCC_ClockConfig+0x1b8>)
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020be:	4b63      	ldr	r3, [pc, #396]	; (800224c <HAL_RCC_ClockConfig+0x1b8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0b8      	b.n	8002242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d020      	beq.n	800211e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e8:	4b59      	ldr	r3, [pc, #356]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	4a58      	ldr	r2, [pc, #352]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002100:	4b53      	ldr	r3, [pc, #332]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4a52      	ldr	r2, [pc, #328]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800210a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800210c:	4b50      	ldr	r3, [pc, #320]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	494d      	ldr	r1, [pc, #308]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	4313      	orrs	r3, r2
 800211c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d044      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002132:	4b47      	ldr	r3, [pc, #284]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d119      	bne.n	8002172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e07f      	b.n	8002242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d003      	beq.n	8002152 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800214e:	2b03      	cmp	r3, #3
 8002150:	d107      	bne.n	8002162 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002152:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d109      	bne.n	8002172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e06f      	b.n	8002242 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002162:	4b3b      	ldr	r3, [pc, #236]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e067      	b.n	8002242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002172:	4b37      	ldr	r3, [pc, #220]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f023 0203 	bic.w	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4934      	ldr	r1, [pc, #208]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	4313      	orrs	r3, r2
 8002182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002184:	f7fe fda2 	bl	8000ccc <HAL_GetTick>
 8002188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218c:	f7fe fd9e 	bl	8000ccc <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	; 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e04f      	b.n	8002242 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a2:	4b2b      	ldr	r3, [pc, #172]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 020c 	and.w	r2, r3, #12
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d1eb      	bne.n	800218c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021b4:	4b25      	ldr	r3, [pc, #148]	; (800224c <HAL_RCC_ClockConfig+0x1b8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d20c      	bcs.n	80021dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c2:	4b22      	ldr	r3, [pc, #136]	; (800224c <HAL_RCC_ClockConfig+0x1b8>)
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ca:	4b20      	ldr	r3, [pc, #128]	; (800224c <HAL_RCC_ClockConfig+0x1b8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e032      	b.n	8002242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e8:	4b19      	ldr	r3, [pc, #100]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4916      	ldr	r1, [pc, #88]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d009      	beq.n	800221a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002206:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	490e      	ldr	r1, [pc, #56]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	4313      	orrs	r3, r2
 8002218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800221a:	f000 f855 	bl	80022c8 <HAL_RCC_GetSysClockFreq>
 800221e:	4602      	mov	r2, r0
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	490a      	ldr	r1, [pc, #40]	; (8002254 <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	5ccb      	ldrb	r3, [r1, r3]
 800222e:	fa22 f303 	lsr.w	r3, r2, r3
 8002232:	4a09      	ldr	r2, [pc, #36]	; (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <HAL_RCC_ClockConfig+0x1c8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fd02 	bl	8000c44 <HAL_InitTick>

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023c00 	.word	0x40023c00
 8002250:	40023800 	.word	0x40023800
 8002254:	08003afc 	.word	0x08003afc
 8002258:	20000004 	.word	0x20000004
 800225c:	20000008 	.word	0x20000008

08002260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002264:	4b03      	ldr	r3, [pc, #12]	; (8002274 <HAL_RCC_GetHCLKFreq+0x14>)
 8002266:	681b      	ldr	r3, [r3, #0]
}
 8002268:	4618      	mov	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	20000004 	.word	0x20000004

08002278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800227c:	f7ff fff0 	bl	8002260 <HAL_RCC_GetHCLKFreq>
 8002280:	4602      	mov	r2, r0
 8002282:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	0a9b      	lsrs	r3, r3, #10
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	4903      	ldr	r1, [pc, #12]	; (800229c <HAL_RCC_GetPCLK1Freq+0x24>)
 800228e:	5ccb      	ldrb	r3, [r1, r3]
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002294:	4618      	mov	r0, r3
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40023800 	.word	0x40023800
 800229c:	08003b0c 	.word	0x08003b0c

080022a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022a4:	f7ff ffdc 	bl	8002260 <HAL_RCC_GetHCLKFreq>
 80022a8:	4602      	mov	r2, r0
 80022aa:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	0b5b      	lsrs	r3, r3, #13
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	4903      	ldr	r1, [pc, #12]	; (80022c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022b6:	5ccb      	ldrb	r3, [r1, r3]
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022bc:	4618      	mov	r0, r3
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40023800 	.word	0x40023800
 80022c4:	08003b0c 	.word	0x08003b0c

080022c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022cc:	b0ae      	sub	sp, #184	; 0xb8
 80022ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022ee:	4bcb      	ldr	r3, [pc, #812]	; (800261c <HAL_RCC_GetSysClockFreq+0x354>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b0c      	cmp	r3, #12
 80022f8:	f200 8206 	bhi.w	8002708 <HAL_RCC_GetSysClockFreq+0x440>
 80022fc:	a201      	add	r2, pc, #4	; (adr r2, 8002304 <HAL_RCC_GetSysClockFreq+0x3c>)
 80022fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002302:	bf00      	nop
 8002304:	08002339 	.word	0x08002339
 8002308:	08002709 	.word	0x08002709
 800230c:	08002709 	.word	0x08002709
 8002310:	08002709 	.word	0x08002709
 8002314:	08002341 	.word	0x08002341
 8002318:	08002709 	.word	0x08002709
 800231c:	08002709 	.word	0x08002709
 8002320:	08002709 	.word	0x08002709
 8002324:	08002349 	.word	0x08002349
 8002328:	08002709 	.word	0x08002709
 800232c:	08002709 	.word	0x08002709
 8002330:	08002709 	.word	0x08002709
 8002334:	08002539 	.word	0x08002539
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002338:	4bb9      	ldr	r3, [pc, #740]	; (8002620 <HAL_RCC_GetSysClockFreq+0x358>)
 800233a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800233e:	e1e7      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002340:	4bb8      	ldr	r3, [pc, #736]	; (8002624 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002342:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002346:	e1e3      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002348:	4bb4      	ldr	r3, [pc, #720]	; (800261c <HAL_RCC_GetSysClockFreq+0x354>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002350:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002354:	4bb1      	ldr	r3, [pc, #708]	; (800261c <HAL_RCC_GetSysClockFreq+0x354>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d071      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002360:	4bae      	ldr	r3, [pc, #696]	; (800261c <HAL_RCC_GetSysClockFreq+0x354>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	099b      	lsrs	r3, r3, #6
 8002366:	2200      	movs	r2, #0
 8002368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800236c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002370:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002378:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800237c:	2300      	movs	r3, #0
 800237e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002382:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002386:	4622      	mov	r2, r4
 8002388:	462b      	mov	r3, r5
 800238a:	f04f 0000 	mov.w	r0, #0
 800238e:	f04f 0100 	mov.w	r1, #0
 8002392:	0159      	lsls	r1, r3, #5
 8002394:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002398:	0150      	lsls	r0, r2, #5
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4621      	mov	r1, r4
 80023a0:	1a51      	subs	r1, r2, r1
 80023a2:	6439      	str	r1, [r7, #64]	; 0x40
 80023a4:	4629      	mov	r1, r5
 80023a6:	eb63 0301 	sbc.w	r3, r3, r1
 80023aa:	647b      	str	r3, [r7, #68]	; 0x44
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80023b8:	4649      	mov	r1, r9
 80023ba:	018b      	lsls	r3, r1, #6
 80023bc:	4641      	mov	r1, r8
 80023be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023c2:	4641      	mov	r1, r8
 80023c4:	018a      	lsls	r2, r1, #6
 80023c6:	4641      	mov	r1, r8
 80023c8:	1a51      	subs	r1, r2, r1
 80023ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80023cc:	4649      	mov	r1, r9
 80023ce:	eb63 0301 	sbc.w	r3, r3, r1
 80023d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80023e0:	4649      	mov	r1, r9
 80023e2:	00cb      	lsls	r3, r1, #3
 80023e4:	4641      	mov	r1, r8
 80023e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023ea:	4641      	mov	r1, r8
 80023ec:	00ca      	lsls	r2, r1, #3
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	4603      	mov	r3, r0
 80023f4:	4622      	mov	r2, r4
 80023f6:	189b      	adds	r3, r3, r2
 80023f8:	633b      	str	r3, [r7, #48]	; 0x30
 80023fa:	462b      	mov	r3, r5
 80023fc:	460a      	mov	r2, r1
 80023fe:	eb42 0303 	adc.w	r3, r2, r3
 8002402:	637b      	str	r3, [r7, #52]	; 0x34
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002410:	4629      	mov	r1, r5
 8002412:	024b      	lsls	r3, r1, #9
 8002414:	4621      	mov	r1, r4
 8002416:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800241a:	4621      	mov	r1, r4
 800241c:	024a      	lsls	r2, r1, #9
 800241e:	4610      	mov	r0, r2
 8002420:	4619      	mov	r1, r3
 8002422:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002426:	2200      	movs	r2, #0
 8002428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800242c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002430:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002434:	f7fd fee6 	bl	8000204 <__aeabi_uldivmod>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4613      	mov	r3, r2
 800243e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002442:	e067      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002444:	4b75      	ldr	r3, [pc, #468]	; (800261c <HAL_RCC_GetSysClockFreq+0x354>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	099b      	lsrs	r3, r3, #6
 800244a:	2200      	movs	r2, #0
 800244c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002450:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002454:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800245c:	67bb      	str	r3, [r7, #120]	; 0x78
 800245e:	2300      	movs	r3, #0
 8002460:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002462:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002466:	4622      	mov	r2, r4
 8002468:	462b      	mov	r3, r5
 800246a:	f04f 0000 	mov.w	r0, #0
 800246e:	f04f 0100 	mov.w	r1, #0
 8002472:	0159      	lsls	r1, r3, #5
 8002474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002478:	0150      	lsls	r0, r2, #5
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4621      	mov	r1, r4
 8002480:	1a51      	subs	r1, r2, r1
 8002482:	62b9      	str	r1, [r7, #40]	; 0x28
 8002484:	4629      	mov	r1, r5
 8002486:	eb63 0301 	sbc.w	r3, r3, r1
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002498:	4649      	mov	r1, r9
 800249a:	018b      	lsls	r3, r1, #6
 800249c:	4641      	mov	r1, r8
 800249e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024a2:	4641      	mov	r1, r8
 80024a4:	018a      	lsls	r2, r1, #6
 80024a6:	4641      	mov	r1, r8
 80024a8:	ebb2 0a01 	subs.w	sl, r2, r1
 80024ac:	4649      	mov	r1, r9
 80024ae:	eb63 0b01 	sbc.w	fp, r3, r1
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024c6:	4692      	mov	sl, r2
 80024c8:	469b      	mov	fp, r3
 80024ca:	4623      	mov	r3, r4
 80024cc:	eb1a 0303 	adds.w	r3, sl, r3
 80024d0:	623b      	str	r3, [r7, #32]
 80024d2:	462b      	mov	r3, r5
 80024d4:	eb4b 0303 	adc.w	r3, fp, r3
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80024e6:	4629      	mov	r1, r5
 80024e8:	028b      	lsls	r3, r1, #10
 80024ea:	4621      	mov	r1, r4
 80024ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024f0:	4621      	mov	r1, r4
 80024f2:	028a      	lsls	r2, r1, #10
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024fc:	2200      	movs	r2, #0
 80024fe:	673b      	str	r3, [r7, #112]	; 0x70
 8002500:	677a      	str	r2, [r7, #116]	; 0x74
 8002502:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002506:	f7fd fe7d 	bl	8000204 <__aeabi_uldivmod>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4613      	mov	r3, r2
 8002510:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002514:	4b41      	ldr	r3, [pc, #260]	; (800261c <HAL_RCC_GetSysClockFreq+0x354>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	3301      	adds	r3, #1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002526:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800252a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002532:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002536:	e0eb      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002538:	4b38      	ldr	r3, [pc, #224]	; (800261c <HAL_RCC_GetSysClockFreq+0x354>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002540:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002544:	4b35      	ldr	r3, [pc, #212]	; (800261c <HAL_RCC_GetSysClockFreq+0x354>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d06b      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002550:	4b32      	ldr	r3, [pc, #200]	; (800261c <HAL_RCC_GetSysClockFreq+0x354>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	099b      	lsrs	r3, r3, #6
 8002556:	2200      	movs	r2, #0
 8002558:	66bb      	str	r3, [r7, #104]	; 0x68
 800255a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800255c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800255e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002562:	663b      	str	r3, [r7, #96]	; 0x60
 8002564:	2300      	movs	r3, #0
 8002566:	667b      	str	r3, [r7, #100]	; 0x64
 8002568:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800256c:	4622      	mov	r2, r4
 800256e:	462b      	mov	r3, r5
 8002570:	f04f 0000 	mov.w	r0, #0
 8002574:	f04f 0100 	mov.w	r1, #0
 8002578:	0159      	lsls	r1, r3, #5
 800257a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800257e:	0150      	lsls	r0, r2, #5
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4621      	mov	r1, r4
 8002586:	1a51      	subs	r1, r2, r1
 8002588:	61b9      	str	r1, [r7, #24]
 800258a:	4629      	mov	r1, r5
 800258c:	eb63 0301 	sbc.w	r3, r3, r1
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800259e:	4659      	mov	r1, fp
 80025a0:	018b      	lsls	r3, r1, #6
 80025a2:	4651      	mov	r1, sl
 80025a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025a8:	4651      	mov	r1, sl
 80025aa:	018a      	lsls	r2, r1, #6
 80025ac:	4651      	mov	r1, sl
 80025ae:	ebb2 0801 	subs.w	r8, r2, r1
 80025b2:	4659      	mov	r1, fp
 80025b4:	eb63 0901 	sbc.w	r9, r3, r1
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025cc:	4690      	mov	r8, r2
 80025ce:	4699      	mov	r9, r3
 80025d0:	4623      	mov	r3, r4
 80025d2:	eb18 0303 	adds.w	r3, r8, r3
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	462b      	mov	r3, r5
 80025da:	eb49 0303 	adc.w	r3, r9, r3
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80025ec:	4629      	mov	r1, r5
 80025ee:	024b      	lsls	r3, r1, #9
 80025f0:	4621      	mov	r1, r4
 80025f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025f6:	4621      	mov	r1, r4
 80025f8:	024a      	lsls	r2, r1, #9
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002602:	2200      	movs	r2, #0
 8002604:	65bb      	str	r3, [r7, #88]	; 0x58
 8002606:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002608:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800260c:	f7fd fdfa 	bl	8000204 <__aeabi_uldivmod>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4613      	mov	r3, r2
 8002616:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800261a:	e065      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x420>
 800261c:	40023800 	.word	0x40023800
 8002620:	00f42400 	.word	0x00f42400
 8002624:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002628:	4b3d      	ldr	r3, [pc, #244]	; (8002720 <HAL_RCC_GetSysClockFreq+0x458>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	099b      	lsrs	r3, r3, #6
 800262e:	2200      	movs	r2, #0
 8002630:	4618      	mov	r0, r3
 8002632:	4611      	mov	r1, r2
 8002634:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002638:	653b      	str	r3, [r7, #80]	; 0x50
 800263a:	2300      	movs	r3, #0
 800263c:	657b      	str	r3, [r7, #84]	; 0x54
 800263e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002642:	4642      	mov	r2, r8
 8002644:	464b      	mov	r3, r9
 8002646:	f04f 0000 	mov.w	r0, #0
 800264a:	f04f 0100 	mov.w	r1, #0
 800264e:	0159      	lsls	r1, r3, #5
 8002650:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002654:	0150      	lsls	r0, r2, #5
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4641      	mov	r1, r8
 800265c:	1a51      	subs	r1, r2, r1
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	4649      	mov	r1, r9
 8002662:	eb63 0301 	sbc.w	r3, r3, r1
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002674:	4659      	mov	r1, fp
 8002676:	018b      	lsls	r3, r1, #6
 8002678:	4651      	mov	r1, sl
 800267a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800267e:	4651      	mov	r1, sl
 8002680:	018a      	lsls	r2, r1, #6
 8002682:	4651      	mov	r1, sl
 8002684:	1a54      	subs	r4, r2, r1
 8002686:	4659      	mov	r1, fp
 8002688:	eb63 0501 	sbc.w	r5, r3, r1
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	00eb      	lsls	r3, r5, #3
 8002696:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800269a:	00e2      	lsls	r2, r4, #3
 800269c:	4614      	mov	r4, r2
 800269e:	461d      	mov	r5, r3
 80026a0:	4643      	mov	r3, r8
 80026a2:	18e3      	adds	r3, r4, r3
 80026a4:	603b      	str	r3, [r7, #0]
 80026a6:	464b      	mov	r3, r9
 80026a8:	eb45 0303 	adc.w	r3, r5, r3
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026ba:	4629      	mov	r1, r5
 80026bc:	028b      	lsls	r3, r1, #10
 80026be:	4621      	mov	r1, r4
 80026c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026c4:	4621      	mov	r1, r4
 80026c6:	028a      	lsls	r2, r1, #10
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026d0:	2200      	movs	r2, #0
 80026d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80026d4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80026d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026da:	f7fd fd93 	bl	8000204 <__aeabi_uldivmod>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4613      	mov	r3, r2
 80026e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026e8:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <HAL_RCC_GetSysClockFreq+0x458>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	0f1b      	lsrs	r3, r3, #28
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80026f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002702:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002706:	e003      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_RCC_GetSysClockFreq+0x45c>)
 800270a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800270e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002710:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002714:	4618      	mov	r0, r3
 8002716:	37b8      	adds	r7, #184	; 0xb8
 8002718:	46bd      	mov	sp, r7
 800271a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800
 8002724:	00f42400 	.word	0x00f42400

08002728 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e28d      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 8083 	beq.w	800284e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002748:	4b94      	ldr	r3, [pc, #592]	; (800299c <HAL_RCC_OscConfig+0x274>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b04      	cmp	r3, #4
 8002752:	d019      	beq.n	8002788 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002754:	4b91      	ldr	r3, [pc, #580]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800275c:	2b08      	cmp	r3, #8
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002760:	4b8e      	ldr	r3, [pc, #568]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800276c:	d00c      	beq.n	8002788 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800276e:	4b8b      	ldr	r3, [pc, #556]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002776:	2b0c      	cmp	r3, #12
 8002778:	d112      	bne.n	80027a0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800277a:	4b88      	ldr	r3, [pc, #544]	; (800299c <HAL_RCC_OscConfig+0x274>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002786:	d10b      	bne.n	80027a0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002788:	4b84      	ldr	r3, [pc, #528]	; (800299c <HAL_RCC_OscConfig+0x274>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d05b      	beq.n	800284c <HAL_RCC_OscConfig+0x124>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d157      	bne.n	800284c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e25a      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a8:	d106      	bne.n	80027b8 <HAL_RCC_OscConfig+0x90>
 80027aa:	4b7c      	ldr	r3, [pc, #496]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a7b      	ldr	r2, [pc, #492]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	e01d      	b.n	80027f4 <HAL_RCC_OscConfig+0xcc>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c0:	d10c      	bne.n	80027dc <HAL_RCC_OscConfig+0xb4>
 80027c2:	4b76      	ldr	r3, [pc, #472]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a75      	ldr	r2, [pc, #468]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	4b73      	ldr	r3, [pc, #460]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a72      	ldr	r2, [pc, #456]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	e00b      	b.n	80027f4 <HAL_RCC_OscConfig+0xcc>
 80027dc:	4b6f      	ldr	r3, [pc, #444]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a6e      	ldr	r2, [pc, #440]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	4b6c      	ldr	r3, [pc, #432]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a6b      	ldr	r2, [pc, #428]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d013      	beq.n	8002824 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f7fe fa66 	bl	8000ccc <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002804:	f7fe fa62 	bl	8000ccc <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b64      	cmp	r3, #100	; 0x64
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e21f      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	4b61      	ldr	r3, [pc, #388]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0xdc>
 8002822:	e014      	b.n	800284e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f7fe fa52 	bl	8000ccc <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800282c:	f7fe fa4e 	bl	8000ccc <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	; 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e20b      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283e:	4b57      	ldr	r3, [pc, #348]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x104>
 800284a:	e000      	b.n	800284e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d06f      	beq.n	800293a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800285a:	4b50      	ldr	r3, [pc, #320]	; (800299c <HAL_RCC_OscConfig+0x274>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b00      	cmp	r3, #0
 8002864:	d017      	beq.n	8002896 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002866:	4b4d      	ldr	r3, [pc, #308]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800286e:	2b08      	cmp	r3, #8
 8002870:	d105      	bne.n	800287e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002872:	4b4a      	ldr	r3, [pc, #296]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800287e:	4b47      	ldr	r3, [pc, #284]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002886:	2b0c      	cmp	r3, #12
 8002888:	d11c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288a:	4b44      	ldr	r3, [pc, #272]	; (800299c <HAL_RCC_OscConfig+0x274>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d116      	bne.n	80028c4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002896:	4b41      	ldr	r3, [pc, #260]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_RCC_OscConfig+0x186>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e1d3      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ae:	4b3b      	ldr	r3, [pc, #236]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4937      	ldr	r1, [pc, #220]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c2:	e03a      	b.n	800293a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d020      	beq.n	800290e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028cc:	4b34      	ldr	r3, [pc, #208]	; (80029a0 <HAL_RCC_OscConfig+0x278>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7fe f9fb 	bl	8000ccc <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028da:	f7fe f9f7 	bl	8000ccc <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e1b4      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ec:	4b2b      	ldr	r3, [pc, #172]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f8:	4b28      	ldr	r3, [pc, #160]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4925      	ldr	r1, [pc, #148]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002908:	4313      	orrs	r3, r2
 800290a:	600b      	str	r3, [r1, #0]
 800290c:	e015      	b.n	800293a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290e:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <HAL_RCC_OscConfig+0x278>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe f9da 	bl	8000ccc <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800291c:	f7fe f9d6 	bl	8000ccc <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e193      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292e:	4b1b      	ldr	r3, [pc, #108]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d036      	beq.n	80029b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d016      	beq.n	800297c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294e:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <HAL_RCC_OscConfig+0x27c>)
 8002950:	2201      	movs	r2, #1
 8002952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002954:	f7fe f9ba 	bl	8000ccc <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800295c:	f7fe f9b6 	bl	8000ccc <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e173      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x234>
 800297a:	e01b      	b.n	80029b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800297c:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <HAL_RCC_OscConfig+0x27c>)
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002982:	f7fe f9a3 	bl	8000ccc <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002988:	e00e      	b.n	80029a8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800298a:	f7fe f99f 	bl	8000ccc <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d907      	bls.n	80029a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e15c      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
 800299c:	40023800 	.word	0x40023800
 80029a0:	42470000 	.word	0x42470000
 80029a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a8:	4b8a      	ldr	r3, [pc, #552]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 80029aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1ea      	bne.n	800298a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 8097 	beq.w	8002af0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c2:	2300      	movs	r3, #0
 80029c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c6:	4b83      	ldr	r3, [pc, #524]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10f      	bne.n	80029f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	4b7f      	ldr	r3, [pc, #508]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	4a7e      	ldr	r2, [pc, #504]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 80029dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e0:	6413      	str	r3, [r2, #64]	; 0x40
 80029e2:	4b7c      	ldr	r3, [pc, #496]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ee:	2301      	movs	r3, #1
 80029f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f2:	4b79      	ldr	r3, [pc, #484]	; (8002bd8 <HAL_RCC_OscConfig+0x4b0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d118      	bne.n	8002a30 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029fe:	4b76      	ldr	r3, [pc, #472]	; (8002bd8 <HAL_RCC_OscConfig+0x4b0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a75      	ldr	r2, [pc, #468]	; (8002bd8 <HAL_RCC_OscConfig+0x4b0>)
 8002a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0a:	f7fe f95f 	bl	8000ccc <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a12:	f7fe f95b 	bl	8000ccc <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e118      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	4b6c      	ldr	r3, [pc, #432]	; (8002bd8 <HAL_RCC_OscConfig+0x4b0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d106      	bne.n	8002a46 <HAL_RCC_OscConfig+0x31e>
 8002a38:	4b66      	ldr	r3, [pc, #408]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	4a65      	ldr	r2, [pc, #404]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6713      	str	r3, [r2, #112]	; 0x70
 8002a44:	e01c      	b.n	8002a80 <HAL_RCC_OscConfig+0x358>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b05      	cmp	r3, #5
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x340>
 8002a4e:	4b61      	ldr	r3, [pc, #388]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a52:	4a60      	ldr	r2, [pc, #384]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a54:	f043 0304 	orr.w	r3, r3, #4
 8002a58:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5a:	4b5e      	ldr	r3, [pc, #376]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	4a5d      	ldr	r2, [pc, #372]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6713      	str	r3, [r2, #112]	; 0x70
 8002a66:	e00b      	b.n	8002a80 <HAL_RCC_OscConfig+0x358>
 8002a68:	4b5a      	ldr	r3, [pc, #360]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	4a59      	ldr	r2, [pc, #356]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a6e:	f023 0301 	bic.w	r3, r3, #1
 8002a72:	6713      	str	r3, [r2, #112]	; 0x70
 8002a74:	4b57      	ldr	r3, [pc, #348]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	4a56      	ldr	r2, [pc, #344]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a7a:	f023 0304 	bic.w	r3, r3, #4
 8002a7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d015      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7fe f920 	bl	8000ccc <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a90:	f7fe f91c 	bl	8000ccc <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e0d7      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa6:	4b4b      	ldr	r3, [pc, #300]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0ee      	beq.n	8002a90 <HAL_RCC_OscConfig+0x368>
 8002ab2:	e014      	b.n	8002ade <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7fe f90a 	bl	8000ccc <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002abc:	f7fe f906 	bl	8000ccc <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e0c1      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad2:	4b40      	ldr	r3, [pc, #256]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1ee      	bne.n	8002abc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ade:	7dfb      	ldrb	r3, [r7, #23]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d105      	bne.n	8002af0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae4:	4b3b      	ldr	r3, [pc, #236]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	4a3a      	ldr	r2, [pc, #232]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002aea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80ad 	beq.w	8002c54 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002afa:	4b36      	ldr	r3, [pc, #216]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d060      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d145      	bne.n	8002b9a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0e:	4b33      	ldr	r3, [pc, #204]	; (8002bdc <HAL_RCC_OscConfig+0x4b4>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7fe f8da 	bl	8000ccc <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe f8d6 	bl	8000ccc <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e093      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2e:	4b29      	ldr	r3, [pc, #164]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69da      	ldr	r2, [r3, #28]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	019b      	lsls	r3, r3, #6
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	085b      	lsrs	r3, r3, #1
 8002b52:	3b01      	subs	r3, #1
 8002b54:	041b      	lsls	r3, r3, #16
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	061b      	lsls	r3, r3, #24
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	071b      	lsls	r3, r3, #28
 8002b66:	491b      	ldr	r1, [pc, #108]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <HAL_RCC_OscConfig+0x4b4>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b72:	f7fe f8ab 	bl	8000ccc <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7a:	f7fe f8a7 	bl	8000ccc <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e064      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x452>
 8002b98:	e05c      	b.n	8002c54 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_RCC_OscConfig+0x4b4>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe f894 	bl	8000ccc <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fe f890 	bl	8000ccc <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e04d      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x480>
 8002bc6:	e045      	b.n	8002c54 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d107      	bne.n	8002be0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e040      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40007000 	.word	0x40007000
 8002bdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002be0:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d030      	beq.n	8002c50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d129      	bne.n	8002c50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d122      	bne.n	8002c50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c10:	4013      	ands	r3, r2
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d119      	bne.n	8002c50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	085b      	lsrs	r3, r3, #1
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d10f      	bne.n	8002c50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d107      	bne.n	8002c50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800

08002c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e03f      	b.n	8002cf6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7fd fee4 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2224      	movs	r2, #36	; 0x24
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ca6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fc7b 	bl	80035a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ccc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b0ba      	sub	sp, #232	; 0xe8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002d3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10f      	bne.n	8002d66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d4a:	f003 0320 	and.w	r3, r3, #32
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d009      	beq.n	8002d66 <HAL_UART_IRQHandler+0x66>
 8002d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fb65 	bl	800342e <UART_Receive_IT>
      return;
 8002d64:	e256      	b.n	8003214 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 80de 	beq.w	8002f2c <HAL_UART_IRQHandler+0x22c>
 8002d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d106      	bne.n	8002d8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80d1 	beq.w	8002f2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00b      	beq.n	8002dae <HAL_UART_IRQHandler+0xae>
 8002d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d005      	beq.n	8002dae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f043 0201 	orr.w	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00b      	beq.n	8002dd2 <HAL_UART_IRQHandler+0xd2>
 8002dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f043 0202 	orr.w	r2, r3, #2
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00b      	beq.n	8002df6 <HAL_UART_IRQHandler+0xf6>
 8002dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f043 0204 	orr.w	r2, r3, #4
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d011      	beq.n	8002e26 <HAL_UART_IRQHandler+0x126>
 8002e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d105      	bne.n	8002e1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f043 0208 	orr.w	r2, r3, #8
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 81ed 	beq.w	800320a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_UART_IRQHandler+0x14e>
 8002e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 faf0 	bl	800342e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e58:	2b40      	cmp	r3, #64	; 0x40
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d103      	bne.n	8002e7a <HAL_UART_IRQHandler+0x17a>
 8002e72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d04f      	beq.n	8002f1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f9f8 	bl	8003270 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8a:	2b40      	cmp	r3, #64	; 0x40
 8002e8c:	d141      	bne.n	8002f12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3314      	adds	r3, #20
 8002e94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e9c:	e853 3f00 	ldrex	r3, [r3]
 8002ea0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3314      	adds	r3, #20
 8002eb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002eba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ec6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002eca:	e841 2300 	strex	r3, r2, [r1]
 8002ece:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1d9      	bne.n	8002e8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d013      	beq.n	8002f0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee6:	4a7d      	ldr	r2, [pc, #500]	; (80030dc <HAL_UART_IRQHandler+0x3dc>)
 8002ee8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fe feff 	bl	8001cf2 <HAL_DMA_Abort_IT>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d016      	beq.n	8002f28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f04:	4610      	mov	r0, r2
 8002f06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f08:	e00e      	b.n	8002f28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f99a 	bl	8003244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f10:	e00a      	b.n	8002f28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f996 	bl	8003244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f18:	e006      	b.n	8002f28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f992 	bl	8003244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f26:	e170      	b.n	800320a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f28:	bf00      	nop
    return;
 8002f2a:	e16e      	b.n	800320a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	f040 814a 	bne.w	80031ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8143 	beq.w	80031ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 813c 	beq.w	80031ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f72:	2b40      	cmp	r3, #64	; 0x40
 8002f74:	f040 80b4 	bne.w	80030e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 8140 	beq.w	800320e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f96:	429a      	cmp	r2, r3
 8002f98:	f080 8139 	bcs.w	800320e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fa2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fae:	f000 8088 	beq.w	80030c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	330c      	adds	r3, #12
 8002fb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fc0:	e853 3f00 	ldrex	r3, [r3]
 8002fc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002fc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002fde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002fe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002fea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002fee:	e841 2300 	strex	r3, r2, [r1]
 8002ff2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1d9      	bne.n	8002fb2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3314      	adds	r3, #20
 8003004:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003008:	e853 3f00 	ldrex	r3, [r3]
 800300c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800300e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003010:	f023 0301 	bic.w	r3, r3, #1
 8003014:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3314      	adds	r3, #20
 800301e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003022:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003026:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003028:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800302a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800302e:	e841 2300 	strex	r3, r2, [r1]
 8003032:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1e1      	bne.n	8002ffe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3314      	adds	r3, #20
 8003040:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003044:	e853 3f00 	ldrex	r3, [r3]
 8003048:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800304a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800304c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003050:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3314      	adds	r3, #20
 800305a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800305e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003060:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003062:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003064:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003066:	e841 2300 	strex	r3, r2, [r1]
 800306a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800306c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1e3      	bne.n	800303a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2220      	movs	r2, #32
 8003076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	330c      	adds	r3, #12
 8003086:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308a:	e853 3f00 	ldrex	r3, [r3]
 800308e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003092:	f023 0310 	bic.w	r3, r3, #16
 8003096:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	330c      	adds	r3, #12
 80030a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80030a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80030a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030ac:	e841 2300 	strex	r3, r2, [r1]
 80030b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e3      	bne.n	8003080 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe fda8 	bl	8001c12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	4619      	mov	r1, r3
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f8c0 	bl	8003258 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030d8:	e099      	b.n	800320e <HAL_UART_IRQHandler+0x50e>
 80030da:	bf00      	nop
 80030dc:	08003337 	.word	0x08003337
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 808b 	beq.w	8003212 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80030fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 8086 	beq.w	8003212 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	330c      	adds	r3, #12
 800310c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003110:	e853 3f00 	ldrex	r3, [r3]
 8003114:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003118:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800311c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	330c      	adds	r3, #12
 8003126:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800312a:	647a      	str	r2, [r7, #68]	; 0x44
 800312c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003130:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003132:	e841 2300 	strex	r3, r2, [r1]
 8003136:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1e3      	bne.n	8003106 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3314      	adds	r3, #20
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	e853 3f00 	ldrex	r3, [r3]
 800314c:	623b      	str	r3, [r7, #32]
   return(result);
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	f023 0301 	bic.w	r3, r3, #1
 8003154:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	3314      	adds	r3, #20
 800315e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003162:	633a      	str	r2, [r7, #48]	; 0x30
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003166:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800316a:	e841 2300 	strex	r3, r2, [r1]
 800316e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e3      	bne.n	800313e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	330c      	adds	r3, #12
 800318a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	e853 3f00 	ldrex	r3, [r3]
 8003192:	60fb      	str	r3, [r7, #12]
   return(result);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0310 	bic.w	r3, r3, #16
 800319a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	330c      	adds	r3, #12
 80031a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80031a8:	61fa      	str	r2, [r7, #28]
 80031aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ac:	69b9      	ldr	r1, [r7, #24]
 80031ae:	69fa      	ldr	r2, [r7, #28]
 80031b0:	e841 2300 	strex	r3, r2, [r1]
 80031b4:	617b      	str	r3, [r7, #20]
   return(result);
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1e3      	bne.n	8003184 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031c0:	4619      	mov	r1, r3
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f848 	bl	8003258 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031c8:	e023      	b.n	8003212 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_UART_IRQHandler+0x4ea>
 80031d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f8bb 	bl	800335e <UART_Transmit_IT>
    return;
 80031e8:	e014      	b.n	8003214 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00e      	beq.n	8003214 <HAL_UART_IRQHandler+0x514>
 80031f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f8fb 	bl	80033fe <UART_EndTransmit_IT>
    return;
 8003208:	e004      	b.n	8003214 <HAL_UART_IRQHandler+0x514>
    return;
 800320a:	bf00      	nop
 800320c:	e002      	b.n	8003214 <HAL_UART_IRQHandler+0x514>
      return;
 800320e:	bf00      	nop
 8003210:	e000      	b.n	8003214 <HAL_UART_IRQHandler+0x514>
      return;
 8003212:	bf00      	nop
  }
}
 8003214:	37e8      	adds	r7, #232	; 0xe8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop

0800321c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003270:	b480      	push	{r7}
 8003272:	b095      	sub	sp, #84	; 0x54
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	330c      	adds	r3, #12
 800327e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003282:	e853 3f00 	ldrex	r3, [r3]
 8003286:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800328e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	330c      	adds	r3, #12
 8003296:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003298:	643a      	str	r2, [r7, #64]	; 0x40
 800329a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800329e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032a0:	e841 2300 	strex	r3, r2, [r1]
 80032a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1e5      	bne.n	8003278 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3314      	adds	r3, #20
 80032b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	e853 3f00 	ldrex	r3, [r3]
 80032ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f023 0301 	bic.w	r3, r3, #1
 80032c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3314      	adds	r3, #20
 80032ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032d4:	e841 2300 	strex	r3, r2, [r1]
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e5      	bne.n	80032ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d119      	bne.n	800331c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	330c      	adds	r3, #12
 80032ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	e853 3f00 	ldrex	r3, [r3]
 80032f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f023 0310 	bic.w	r3, r3, #16
 80032fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	330c      	adds	r3, #12
 8003306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003308:	61ba      	str	r2, [r7, #24]
 800330a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330c:	6979      	ldr	r1, [r7, #20]
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	e841 2300 	strex	r3, r2, [r1]
 8003314:	613b      	str	r3, [r7, #16]
   return(result);
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1e5      	bne.n	80032e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	631a      	str	r2, [r3, #48]	; 0x30
}
 800332a:	bf00      	nop
 800332c:	3754      	adds	r7, #84	; 0x54
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f7ff ff77 	bl	8003244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003356:	bf00      	nop
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800335e:	b480      	push	{r7}
 8003360:	b085      	sub	sp, #20
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b21      	cmp	r3, #33	; 0x21
 8003370:	d13e      	bne.n	80033f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337a:	d114      	bne.n	80033a6 <UART_Transmit_IT+0x48>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d110      	bne.n	80033a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003398:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	1c9a      	adds	r2, r3, #2
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	621a      	str	r2, [r3, #32]
 80033a4:	e008      	b.n	80033b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	1c59      	adds	r1, r3, #1
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6211      	str	r1, [r2, #32]
 80033b0:	781a      	ldrb	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	4619      	mov	r1, r3
 80033c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10f      	bne.n	80033ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	e000      	b.n	80033f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033f0:	2302      	movs	r3, #2
  }
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b082      	sub	sp, #8
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003414:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff fefc 	bl	800321c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b08c      	sub	sp, #48	; 0x30
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b22      	cmp	r3, #34	; 0x22
 8003440:	f040 80ab 	bne.w	800359a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344c:	d117      	bne.n	800347e <UART_Receive_IT+0x50>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d113      	bne.n	800347e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003456:	2300      	movs	r3, #0
 8003458:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	b29b      	uxth	r3, r3
 8003468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346c:	b29a      	uxth	r2, r3
 800346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003470:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003476:	1c9a      	adds	r2, r3, #2
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	629a      	str	r2, [r3, #40]	; 0x28
 800347c:	e026      	b.n	80034cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003484:	2300      	movs	r3, #0
 8003486:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003490:	d007      	beq.n	80034a2 <UART_Receive_IT+0x74>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10a      	bne.n	80034b0 <UART_Receive_IT+0x82>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	e008      	b.n	80034c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4619      	mov	r1, r3
 80034da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d15a      	bne.n	8003596 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0220 	bic.w	r2, r2, #32
 80034ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695a      	ldr	r2, [r3, #20]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0201 	bic.w	r2, r2, #1
 800350e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	2b01      	cmp	r3, #1
 800351e:	d135      	bne.n	800358c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	330c      	adds	r3, #12
 800352c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	e853 3f00 	ldrex	r3, [r3]
 8003534:	613b      	str	r3, [r7, #16]
   return(result);
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f023 0310 	bic.w	r3, r3, #16
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	330c      	adds	r3, #12
 8003544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003546:	623a      	str	r2, [r7, #32]
 8003548:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354a:	69f9      	ldr	r1, [r7, #28]
 800354c:	6a3a      	ldr	r2, [r7, #32]
 800354e:	e841 2300 	strex	r3, r2, [r1]
 8003552:	61bb      	str	r3, [r7, #24]
   return(result);
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1e5      	bne.n	8003526 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b10      	cmp	r3, #16
 8003566:	d10a      	bne.n	800357e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003582:	4619      	mov	r1, r3
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff fe67 	bl	8003258 <HAL_UARTEx_RxEventCallback>
 800358a:	e002      	b.n	8003592 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff fe4f 	bl	8003230 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	e002      	b.n	800359c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	e000      	b.n	800359c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800359a:	2302      	movs	r3, #2
  }
}
 800359c:	4618      	mov	r0, r3
 800359e:	3730      	adds	r7, #48	; 0x30
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035a8:	b0c0      	sub	sp, #256	; 0x100
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c0:	68d9      	ldr	r1, [r3, #12]
 80035c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	ea40 0301 	orr.w	r3, r0, r1
 80035cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	431a      	orrs	r2, r3
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035fc:	f021 010c 	bic.w	r1, r1, #12
 8003600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800360a:	430b      	orrs	r3, r1
 800360c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800360e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800361a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800361e:	6999      	ldr	r1, [r3, #24]
 8003620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	ea40 0301 	orr.w	r3, r0, r1
 800362a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	4b8f      	ldr	r3, [pc, #572]	; (8003870 <UART_SetConfig+0x2cc>)
 8003634:	429a      	cmp	r2, r3
 8003636:	d005      	beq.n	8003644 <UART_SetConfig+0xa0>
 8003638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	4b8d      	ldr	r3, [pc, #564]	; (8003874 <UART_SetConfig+0x2d0>)
 8003640:	429a      	cmp	r2, r3
 8003642:	d104      	bne.n	800364e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003644:	f7fe fe2c 	bl	80022a0 <HAL_RCC_GetPCLK2Freq>
 8003648:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800364c:	e003      	b.n	8003656 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800364e:	f7fe fe13 	bl	8002278 <HAL_RCC_GetPCLK1Freq>
 8003652:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003660:	f040 810c 	bne.w	800387c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003668:	2200      	movs	r2, #0
 800366a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800366e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003672:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003676:	4622      	mov	r2, r4
 8003678:	462b      	mov	r3, r5
 800367a:	1891      	adds	r1, r2, r2
 800367c:	65b9      	str	r1, [r7, #88]	; 0x58
 800367e:	415b      	adcs	r3, r3
 8003680:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003682:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003686:	4621      	mov	r1, r4
 8003688:	eb12 0801 	adds.w	r8, r2, r1
 800368c:	4629      	mov	r1, r5
 800368e:	eb43 0901 	adc.w	r9, r3, r1
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800369e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036a6:	4690      	mov	r8, r2
 80036a8:	4699      	mov	r9, r3
 80036aa:	4623      	mov	r3, r4
 80036ac:	eb18 0303 	adds.w	r3, r8, r3
 80036b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80036b4:	462b      	mov	r3, r5
 80036b6:	eb49 0303 	adc.w	r3, r9, r3
 80036ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80036ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036d2:	460b      	mov	r3, r1
 80036d4:	18db      	adds	r3, r3, r3
 80036d6:	653b      	str	r3, [r7, #80]	; 0x50
 80036d8:	4613      	mov	r3, r2
 80036da:	eb42 0303 	adc.w	r3, r2, r3
 80036de:	657b      	str	r3, [r7, #84]	; 0x54
 80036e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80036e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80036e8:	f7fc fd8c 	bl	8000204 <__aeabi_uldivmod>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4b61      	ldr	r3, [pc, #388]	; (8003878 <UART_SetConfig+0x2d4>)
 80036f2:	fba3 2302 	umull	r2, r3, r3, r2
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	011c      	lsls	r4, r3, #4
 80036fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036fe:	2200      	movs	r2, #0
 8003700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003704:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003708:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800370c:	4642      	mov	r2, r8
 800370e:	464b      	mov	r3, r9
 8003710:	1891      	adds	r1, r2, r2
 8003712:	64b9      	str	r1, [r7, #72]	; 0x48
 8003714:	415b      	adcs	r3, r3
 8003716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003718:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800371c:	4641      	mov	r1, r8
 800371e:	eb12 0a01 	adds.w	sl, r2, r1
 8003722:	4649      	mov	r1, r9
 8003724:	eb43 0b01 	adc.w	fp, r3, r1
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003734:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003738:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800373c:	4692      	mov	sl, r2
 800373e:	469b      	mov	fp, r3
 8003740:	4643      	mov	r3, r8
 8003742:	eb1a 0303 	adds.w	r3, sl, r3
 8003746:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800374a:	464b      	mov	r3, r9
 800374c:	eb4b 0303 	adc.w	r3, fp, r3
 8003750:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003760:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003764:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003768:	460b      	mov	r3, r1
 800376a:	18db      	adds	r3, r3, r3
 800376c:	643b      	str	r3, [r7, #64]	; 0x40
 800376e:	4613      	mov	r3, r2
 8003770:	eb42 0303 	adc.w	r3, r2, r3
 8003774:	647b      	str	r3, [r7, #68]	; 0x44
 8003776:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800377a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800377e:	f7fc fd41 	bl	8000204 <__aeabi_uldivmod>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4611      	mov	r1, r2
 8003788:	4b3b      	ldr	r3, [pc, #236]	; (8003878 <UART_SetConfig+0x2d4>)
 800378a:	fba3 2301 	umull	r2, r3, r3, r1
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	2264      	movs	r2, #100	; 0x64
 8003792:	fb02 f303 	mul.w	r3, r2, r3
 8003796:	1acb      	subs	r3, r1, r3
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800379e:	4b36      	ldr	r3, [pc, #216]	; (8003878 <UART_SetConfig+0x2d4>)
 80037a0:	fba3 2302 	umull	r2, r3, r3, r2
 80037a4:	095b      	lsrs	r3, r3, #5
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037ac:	441c      	add	r4, r3
 80037ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037b2:	2200      	movs	r2, #0
 80037b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80037bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80037c0:	4642      	mov	r2, r8
 80037c2:	464b      	mov	r3, r9
 80037c4:	1891      	adds	r1, r2, r2
 80037c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80037c8:	415b      	adcs	r3, r3
 80037ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037d0:	4641      	mov	r1, r8
 80037d2:	1851      	adds	r1, r2, r1
 80037d4:	6339      	str	r1, [r7, #48]	; 0x30
 80037d6:	4649      	mov	r1, r9
 80037d8:	414b      	adcs	r3, r1
 80037da:	637b      	str	r3, [r7, #52]	; 0x34
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80037e8:	4659      	mov	r1, fp
 80037ea:	00cb      	lsls	r3, r1, #3
 80037ec:	4651      	mov	r1, sl
 80037ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037f2:	4651      	mov	r1, sl
 80037f4:	00ca      	lsls	r2, r1, #3
 80037f6:	4610      	mov	r0, r2
 80037f8:	4619      	mov	r1, r3
 80037fa:	4603      	mov	r3, r0
 80037fc:	4642      	mov	r2, r8
 80037fe:	189b      	adds	r3, r3, r2
 8003800:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003804:	464b      	mov	r3, r9
 8003806:	460a      	mov	r2, r1
 8003808:	eb42 0303 	adc.w	r3, r2, r3
 800380c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800381c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003820:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003824:	460b      	mov	r3, r1
 8003826:	18db      	adds	r3, r3, r3
 8003828:	62bb      	str	r3, [r7, #40]	; 0x28
 800382a:	4613      	mov	r3, r2
 800382c:	eb42 0303 	adc.w	r3, r2, r3
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003832:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003836:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800383a:	f7fc fce3 	bl	8000204 <__aeabi_uldivmod>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <UART_SetConfig+0x2d4>)
 8003844:	fba3 1302 	umull	r1, r3, r3, r2
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	2164      	movs	r1, #100	; 0x64
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	3332      	adds	r3, #50	; 0x32
 8003856:	4a08      	ldr	r2, [pc, #32]	; (8003878 <UART_SetConfig+0x2d4>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	095b      	lsrs	r3, r3, #5
 800385e:	f003 0207 	and.w	r2, r3, #7
 8003862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4422      	add	r2, r4
 800386a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800386c:	e105      	b.n	8003a7a <UART_SetConfig+0x4d6>
 800386e:	bf00      	nop
 8003870:	40011000 	.word	0x40011000
 8003874:	40011400 	.word	0x40011400
 8003878:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800387c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003880:	2200      	movs	r2, #0
 8003882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003886:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800388a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800388e:	4642      	mov	r2, r8
 8003890:	464b      	mov	r3, r9
 8003892:	1891      	adds	r1, r2, r2
 8003894:	6239      	str	r1, [r7, #32]
 8003896:	415b      	adcs	r3, r3
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
 800389a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800389e:	4641      	mov	r1, r8
 80038a0:	1854      	adds	r4, r2, r1
 80038a2:	4649      	mov	r1, r9
 80038a4:	eb43 0501 	adc.w	r5, r3, r1
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	00eb      	lsls	r3, r5, #3
 80038b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038b6:	00e2      	lsls	r2, r4, #3
 80038b8:	4614      	mov	r4, r2
 80038ba:	461d      	mov	r5, r3
 80038bc:	4643      	mov	r3, r8
 80038be:	18e3      	adds	r3, r4, r3
 80038c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038c4:	464b      	mov	r3, r9
 80038c6:	eb45 0303 	adc.w	r3, r5, r3
 80038ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038ea:	4629      	mov	r1, r5
 80038ec:	008b      	lsls	r3, r1, #2
 80038ee:	4621      	mov	r1, r4
 80038f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038f4:	4621      	mov	r1, r4
 80038f6:	008a      	lsls	r2, r1, #2
 80038f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038fc:	f7fc fc82 	bl	8000204 <__aeabi_uldivmod>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4b60      	ldr	r3, [pc, #384]	; (8003a88 <UART_SetConfig+0x4e4>)
 8003906:	fba3 2302 	umull	r2, r3, r3, r2
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	011c      	lsls	r4, r3, #4
 800390e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003912:	2200      	movs	r2, #0
 8003914:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003918:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800391c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003920:	4642      	mov	r2, r8
 8003922:	464b      	mov	r3, r9
 8003924:	1891      	adds	r1, r2, r2
 8003926:	61b9      	str	r1, [r7, #24]
 8003928:	415b      	adcs	r3, r3
 800392a:	61fb      	str	r3, [r7, #28]
 800392c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003930:	4641      	mov	r1, r8
 8003932:	1851      	adds	r1, r2, r1
 8003934:	6139      	str	r1, [r7, #16]
 8003936:	4649      	mov	r1, r9
 8003938:	414b      	adcs	r3, r1
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	f04f 0200 	mov.w	r2, #0
 8003940:	f04f 0300 	mov.w	r3, #0
 8003944:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003948:	4659      	mov	r1, fp
 800394a:	00cb      	lsls	r3, r1, #3
 800394c:	4651      	mov	r1, sl
 800394e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003952:	4651      	mov	r1, sl
 8003954:	00ca      	lsls	r2, r1, #3
 8003956:	4610      	mov	r0, r2
 8003958:	4619      	mov	r1, r3
 800395a:	4603      	mov	r3, r0
 800395c:	4642      	mov	r2, r8
 800395e:	189b      	adds	r3, r3, r2
 8003960:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003964:	464b      	mov	r3, r9
 8003966:	460a      	mov	r2, r1
 8003968:	eb42 0303 	adc.w	r3, r2, r3
 800396c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	67bb      	str	r3, [r7, #120]	; 0x78
 800397a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003988:	4649      	mov	r1, r9
 800398a:	008b      	lsls	r3, r1, #2
 800398c:	4641      	mov	r1, r8
 800398e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003992:	4641      	mov	r1, r8
 8003994:	008a      	lsls	r2, r1, #2
 8003996:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800399a:	f7fc fc33 	bl	8000204 <__aeabi_uldivmod>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4b39      	ldr	r3, [pc, #228]	; (8003a88 <UART_SetConfig+0x4e4>)
 80039a4:	fba3 1302 	umull	r1, r3, r3, r2
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	2164      	movs	r1, #100	; 0x64
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	3332      	adds	r3, #50	; 0x32
 80039b6:	4a34      	ldr	r2, [pc, #208]	; (8003a88 <UART_SetConfig+0x4e4>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039c2:	441c      	add	r4, r3
 80039c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039c8:	2200      	movs	r2, #0
 80039ca:	673b      	str	r3, [r7, #112]	; 0x70
 80039cc:	677a      	str	r2, [r7, #116]	; 0x74
 80039ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80039d2:	4642      	mov	r2, r8
 80039d4:	464b      	mov	r3, r9
 80039d6:	1891      	adds	r1, r2, r2
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	415b      	adcs	r3, r3
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039e2:	4641      	mov	r1, r8
 80039e4:	1851      	adds	r1, r2, r1
 80039e6:	6039      	str	r1, [r7, #0]
 80039e8:	4649      	mov	r1, r9
 80039ea:	414b      	adcs	r3, r1
 80039ec:	607b      	str	r3, [r7, #4]
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039fa:	4659      	mov	r1, fp
 80039fc:	00cb      	lsls	r3, r1, #3
 80039fe:	4651      	mov	r1, sl
 8003a00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a04:	4651      	mov	r1, sl
 8003a06:	00ca      	lsls	r2, r1, #3
 8003a08:	4610      	mov	r0, r2
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	4642      	mov	r2, r8
 8003a10:	189b      	adds	r3, r3, r2
 8003a12:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a14:	464b      	mov	r3, r9
 8003a16:	460a      	mov	r2, r1
 8003a18:	eb42 0303 	adc.w	r3, r2, r3
 8003a1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	663b      	str	r3, [r7, #96]	; 0x60
 8003a28:	667a      	str	r2, [r7, #100]	; 0x64
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	f04f 0300 	mov.w	r3, #0
 8003a32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a36:	4649      	mov	r1, r9
 8003a38:	008b      	lsls	r3, r1, #2
 8003a3a:	4641      	mov	r1, r8
 8003a3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a40:	4641      	mov	r1, r8
 8003a42:	008a      	lsls	r2, r1, #2
 8003a44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a48:	f7fc fbdc 	bl	8000204 <__aeabi_uldivmod>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <UART_SetConfig+0x4e4>)
 8003a52:	fba3 1302 	umull	r1, r3, r3, r2
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	2164      	movs	r1, #100	; 0x64
 8003a5a:	fb01 f303 	mul.w	r3, r1, r3
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	3332      	adds	r3, #50	; 0x32
 8003a64:	4a08      	ldr	r2, [pc, #32]	; (8003a88 <UART_SetConfig+0x4e4>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	f003 020f 	and.w	r2, r3, #15
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4422      	add	r2, r4
 8003a78:	609a      	str	r2, [r3, #8]
}
 8003a7a:	bf00      	nop
 8003a7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a80:	46bd      	mov	sp, r7
 8003a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a86:	bf00      	nop
 8003a88:	51eb851f 	.word	0x51eb851f

08003a8c <__libc_init_array>:
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	4d0d      	ldr	r5, [pc, #52]	; (8003ac4 <__libc_init_array+0x38>)
 8003a90:	4c0d      	ldr	r4, [pc, #52]	; (8003ac8 <__libc_init_array+0x3c>)
 8003a92:	1b64      	subs	r4, r4, r5
 8003a94:	10a4      	asrs	r4, r4, #2
 8003a96:	2600      	movs	r6, #0
 8003a98:	42a6      	cmp	r6, r4
 8003a9a:	d109      	bne.n	8003ab0 <__libc_init_array+0x24>
 8003a9c:	4d0b      	ldr	r5, [pc, #44]	; (8003acc <__libc_init_array+0x40>)
 8003a9e:	4c0c      	ldr	r4, [pc, #48]	; (8003ad0 <__libc_init_array+0x44>)
 8003aa0:	f000 f820 	bl	8003ae4 <_init>
 8003aa4:	1b64      	subs	r4, r4, r5
 8003aa6:	10a4      	asrs	r4, r4, #2
 8003aa8:	2600      	movs	r6, #0
 8003aaa:	42a6      	cmp	r6, r4
 8003aac:	d105      	bne.n	8003aba <__libc_init_array+0x2e>
 8003aae:	bd70      	pop	{r4, r5, r6, pc}
 8003ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ab4:	4798      	blx	r3
 8003ab6:	3601      	adds	r6, #1
 8003ab8:	e7ee      	b.n	8003a98 <__libc_init_array+0xc>
 8003aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003abe:	4798      	blx	r3
 8003ac0:	3601      	adds	r6, #1
 8003ac2:	e7f2      	b.n	8003aaa <__libc_init_array+0x1e>
 8003ac4:	08003b1c 	.word	0x08003b1c
 8003ac8:	08003b1c 	.word	0x08003b1c
 8003acc:	08003b1c 	.word	0x08003b1c
 8003ad0:	08003b20 	.word	0x08003b20

08003ad4 <memset>:
 8003ad4:	4402      	add	r2, r0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d100      	bne.n	8003ade <memset+0xa>
 8003adc:	4770      	bx	lr
 8003ade:	f803 1b01 	strb.w	r1, [r3], #1
 8003ae2:	e7f9      	b.n	8003ad8 <memset+0x4>

08003ae4 <_init>:
 8003ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae6:	bf00      	nop
 8003ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aea:	bc08      	pop	{r3}
 8003aec:	469e      	mov	lr, r3
 8003aee:	4770      	bx	lr

08003af0 <_fini>:
 8003af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af2:	bf00      	nop
 8003af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003af6:	bc08      	pop	{r3}
 8003af8:	469e      	mov	lr, r3
 8003afa:	4770      	bx	lr
