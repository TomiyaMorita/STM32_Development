
STM32F303_TMC2209_Absolute_Homing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007558  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  080076e8  080076e8  000176e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bd4  08007bd4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007bd4  08007bd4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007bd4  08007bd4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bd4  08007bd4  00017bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bd8  08007bd8  00017bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000880  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008f0  200008f0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ab9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002674  00000000  00000000  00031b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  000341d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000df0  00000000  00000000  000350b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d1bb  00000000  00000000  00035ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012378  00000000  00000000  00053063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a984a  00000000  00000000  000653db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010ec25  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004670  00000000  00000000  0010ec78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080076d0 	.word	0x080076d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080076d0 	.word	0x080076d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <tmc2209_readWriteArray>:
    if (htim == &htim3){ //htim3に設定したタイマー割り込みの時間で発火する
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);//ピンの出力を切り替え
    }
}*/
void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	60b9      	str	r1, [r7, #8]
 8000278:	607a      	str	r2, [r7, #4]
 800027a:	603b      	str	r3, [r7, #0]
 800027c:	4603      	mov	r3, r0
 800027e:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8000280:	480e      	ldr	r0, [pc, #56]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000282:	f004 fed9 	bl	8005038 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, data, writeLength,3000);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	b29a      	uxth	r2, r3
 800028a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800028e:	68b9      	ldr	r1, [r7, #8]
 8000290:	480a      	ldr	r0, [pc, #40]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000292:	f004 f9b1 	bl	80045f8 <HAL_UART_Transmit>

	if(readLength > 0){
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d00a      	beq.n	80002b2 <tmc2209_readWriteArray+0x42>
		HAL_HalfDuplex_EnableReceiver(&huart1);
 800029c:	4807      	ldr	r0, [pc, #28]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 800029e:	f004 ff1d 	bl	80050dc <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart1, data, readLength, 3000);
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002aa:	68b9      	ldr	r1, [r7, #8]
 80002ac:	4803      	ldr	r0, [pc, #12]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 80002ae:	f004 fa37 	bl	8004720 <HAL_UART_Receive>
	}
}
 80002b2:	bf00      	nop
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	200000d8 	.word	0x200000d8

080002c0 <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 80002ca:	2201      	movs	r2, #1
 80002cc:	6839      	ldr	r1, [r7, #0]
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f005 fe66 	bl	8005fa0 <tmc_CRC8>
 80002d4:	4603      	mov	r3, r0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <reset>:
//
//	//StepDir_periodicJob(0);
//}

static uint8_t reset()
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	//StepDir_init(STEPDIR_PRECISION);
	//StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);

	return tmc2209_reset(&TMC2209);
 80002e4:	4802      	ldr	r0, [pc, #8]	; (80002f0 <reset+0x10>)
 80002e6:	f006 f893 	bl	8006410 <tmc2209_reset>
 80002ea:	4603      	mov	r3, r0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	200001e0 	.word	0x200001e0

080002f4 <restore>:

static uint8_t restore()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 80002f8:	4802      	ldr	r0, [pc, #8]	; (8000304 <restore+0x10>)
 80002fa:	f006 f8c3 	bl	8006484 <tmc2209_restore>
 80002fe:	4603      	mov	r3, r0
}
 8000300:	4618      	mov	r0, r3
 8000302:	bd80      	pop	{r7, pc}
 8000304:	200001e0 	.word	0x200001e0

08000308 <TMC2209_INIT>:


void TMC2209_INIT()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 800030e:	2201      	movs	r2, #1
 8000310:	2101      	movs	r1, #1
 8000312:	2007      	movs	r0, #7
 8000314:	f005 fd8c 	bl	8005e30 <tmc_fillCRC8Table>

	TMC2209_config.reset = reset;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <TMC2209_INIT+0x38>)
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <TMC2209_INIT+0x3c>)
 800031c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config.restore = restore;
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <TMC2209_INIT+0x38>)
 8000322:	4a09      	ldr	r2, [pc, #36]	; (8000348 <TMC2209_INIT+0x40>)
 8000324:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <TMC2209_INIT+0x44>)
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <TMC2209_INIT+0x38>)
 800032e:	2200      	movs	r2, #0
 8000330:	2100      	movs	r1, #0
 8000332:	4807      	ldr	r0, [pc, #28]	; (8000350 <TMC2209_INIT+0x48>)
 8000334:	f005 ff88 	bl	8006248 <tmc2209_init>


	//restore();
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000468 	.word	0x20000468
 8000344:	080002e1 	.word	0x080002e1
 8000348:	080002f5 	.word	0x080002f5
 800034c:	08007884 	.word	0x08007884
 8000350:	200001e0 	.word	0x200001e0

08000354 <HAL_GPIO_EXTI_Callback>:
	return &TMC2209;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	80fb      	strh	r3, [r7, #6]

	//stepper 0 end stop senssor
	if(GPIO_Pin == GPIO_PIN_6 ){
 800035e:	88fb      	ldrh	r3, [r7, #6]
 8000360:	2b40      	cmp	r3, #64	; 0x40
 8000362:	d11b      	bne.n	800039c <HAL_GPIO_EXTI_Callback+0x48>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 8000364:	2140      	movs	r1, #64	; 0x40
 8000366:	480f      	ldr	r0, [pc, #60]	; (80003a4 <HAL_GPIO_EXTI_Callback+0x50>)
 8000368:	f001 fbd8 	bl	8001b1c <HAL_GPIO_ReadPin>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d106      	bne.n	8000380 <HAL_GPIO_EXTI_Callback+0x2c>
			end_stop_state |= 1;
 8000372:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <HAL_GPIO_EXTI_Callback+0x54>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	b2da      	uxtb	r2, r3
 800037c:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <HAL_GPIO_EXTI_Callback+0x54>)
 800037e:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 8000380:	2140      	movs	r1, #64	; 0x40
 8000382:	4808      	ldr	r0, [pc, #32]	; (80003a4 <HAL_GPIO_EXTI_Callback+0x50>)
 8000384:	f001 fbca 	bl	8001b1c <HAL_GPIO_ReadPin>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d006      	beq.n	800039c <HAL_GPIO_EXTI_Callback+0x48>
			end_stop_state &= ~1;
 800038e:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <HAL_GPIO_EXTI_Callback+0x54>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	f023 0301 	bic.w	r3, r3, #1
 8000396:	b2da      	uxtb	r2, r3
 8000398:	4b03      	ldr	r3, [pc, #12]	; (80003a8 <HAL_GPIO_EXTI_Callback+0x54>)
 800039a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800039c:	bf00      	nop
 800039e:	3708      	adds	r7, #8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	48000400 	.word	0x48000400
 80003a8:	200006c8 	.word	0x200006c8

080003ac <Step0>:


void Step0(){                                       //step pin
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	//pull+

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2120      	movs	r1, #32
 80003b4:	4804      	ldr	r0, [pc, #16]	; (80003c8 <Step0+0x1c>)
 80003b6:	f001 fbc9 	bl	8001b4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80003ba:	2201      	movs	r2, #1
 80003bc:	2120      	movs	r1, #32
 80003be:	4802      	ldr	r0, [pc, #8]	; (80003c8 <Step0+0x1c>)
 80003c0:	f001 fbc4 	bl	8001b4c <HAL_GPIO_WritePin>
	/*
	 * pull-
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
	 */
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	48000400 	.word	0x48000400

080003cc <Dir0>:

void Dir0(int dir){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dir); //Dir0関数にdirピンを指定して格納
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	461a      	mov	r2, r3
 80003da:	2110      	movs	r1, #16
 80003dc:	4803      	ldr	r0, [pc, #12]	; (80003ec <Dir0+0x20>)
 80003de:	f001 fbb5 	bl	8001b4c <HAL_GPIO_WritePin>
}
 80003e2:	bf00      	nop
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	48000400 	.word	0x48000400

080003f0 <resetStepper>:
	si->stepPosition = 0;
	si->movementDone = 0;
}


void resetStepper(volatile stepperInfo* si){    //resetStepper関数に引数をstepperInfo構造隊にポイント型変数siとして与える
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	si->c0 = si->acceleration;      //変数*siがメンバc0にアクセス.した値に変数*siがメンバaccelerationにアクセス.した値を代入する
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	edd3 7a00 	vldr	s15, [r3]
 80003fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000402:	ee17 2a90 	vmov	r2, s15
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	615a      	str	r2, [r3, #20]
	si->d = si->c0;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	ee07 3a90 	vmov	s15, r3
 8000412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	si->di = si->d;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8000422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000426:	ee17 2a90 	vmov	r2, s15
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	645a      	str	r2, [r3, #68]	; 0x44
	si->stepCount = 0;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2200      	movs	r2, #0
 8000432:	649a      	str	r2, [r3, #72]	; 0x48
	si->n = 0;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2200      	movs	r2, #0
 8000438:	63da      	str	r2, [r3, #60]	; 0x3c
	si->rampUpStepCount = 0;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2200      	movs	r2, #0
 800043e:	639a      	str	r2, [r3, #56]	; 0x38
	si->movementDone = 0;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	2200      	movs	r2, #0
 8000444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <prepareMovement>:

volatile uint8_t remainingSteppersFlag = 0; //remainingSteppersFlagをuint8_t型で定義し、初期化

void prepareMovement(int steps){
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	if(steps == 0){
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d039      	beq.n	80004d6 <prepareMovement+0x82>
		return;
	}
	volatile stepperInfo* si = &steppers[0];
 8000462:	4b1f      	ldr	r3, [pc, #124]	; (80004e0 <prepareMovement+0x8c>)
 8000464:	60fb      	str	r3, [r7, #12]
	if(si->dir_inv){
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	6a1b      	ldr	r3, [r3, #32]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d011      	beq.n	8000492 <prepareMovement+0x3e>
		si->dirFunc( steps < 0 ? 0 : 1);
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	43d2      	mvns	r2, r2
 8000476:	0fd2      	lsrs	r2, r2, #31
 8000478:	b2d2      	uxtb	r2, r2
 800047a:	4610      	mov	r0, r2
 800047c:	4798      	blx	r3
		si->dir = steps > 0 ? -1:1;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2b00      	cmp	r3, #0
 8000482:	dd02      	ble.n	800048a <prepareMovement+0x36>
 8000484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000488:	e000      	b.n	800048c <prepareMovement+0x38>
 800048a:	2201      	movs	r2, #1
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	61da      	str	r2, [r3, #28]
 8000490:	e00e      	b.n	80004b0 <prepareMovement+0x5c>
	}else{
		si->dirFunc( steps < 0 ? 1 : 0);
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	0fd2      	lsrs	r2, r2, #31
 800049a:	4610      	mov	r0, r2
 800049c:	4798      	blx	r3
		si->dir = steps > 0 ? 1:-1;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	dd01      	ble.n	80004a8 <prepareMovement+0x54>
 80004a4:	2201      	movs	r2, #1
 80004a6:	e001      	b.n	80004ac <prepareMovement+0x58>
 80004a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	61da      	str	r2, [r3, #28]
	}

	si->totalSteps = abs(steps);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	bfb8      	it	lt
 80004b6:	425b      	neglt	r3, r3
 80004b8:	461a      	mov	r2, r3
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	631a      	str	r2, [r3, #48]	; 0x30
	resetStepper(si);
 80004be:	68f8      	ldr	r0, [r7, #12]
 80004c0:	f7ff ff96 	bl	80003f0 <resetStepper>
	remainingSteppersFlag |= (1 << 0);
 80004c4:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <prepareMovement+0x90>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	f043 0301 	orr.w	r3, r3, #1
 80004ce:	b2da      	uxtb	r2, r3
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <prepareMovement+0x90>)
 80004d2:	701a      	strb	r2, [r3, #0]
 80004d4:	e000      	b.n	80004d8 <prepareMovement+0x84>
		return;
 80004d6:	bf00      	nop

}
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	2000067c 	.word	0x2000067c
 80004e4:	200006ca 	.word	0x200006ca

080004e8 <prepareAbsoluteMovement>:

void prepareAbsoluteMovement(int absolute_steps){   //prepareAbsoluteMovementで与えられたステップ数だけモータを回す(main文から）
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	printf("absolute_steps:%d\r\n",absolute_steps);
 80004f0:	6879      	ldr	r1, [r7, #4]
 80004f2:	4820      	ldr	r0, [pc, #128]	; (8000574 <prepareAbsoluteMovement+0x8c>)
 80004f4:	f006 f812 	bl	800651c <iprintf>
	volatile stepperInfo* si = &steppers[0];	//steppers[0]のアドレスをstepperInfo* si に代入
 80004f8:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <prepareAbsoluteMovement+0x90>)
 80004fa:	60fb      	str	r3, [r7, #12]
	int steps = absolute_steps - si->stepPosition;	//目標値からstepPositionを引いた値（stepposition=毎ステップカウントされるdirの値)
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	1ad3      	subs	r3, r2, r3
 8000504:	60bb      	str	r3, [r7, #8]
	printf("steps:%d\r\n",steps);
 8000506:	68b9      	ldr	r1, [r7, #8]
 8000508:	481c      	ldr	r0, [pc, #112]	; (800057c <prepareAbsoluteMovement+0x94>)
 800050a:	f006 f807 	bl	800651c <iprintf>
	if(steps == 0){
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d02b      	beq.n	800056c <prepareAbsoluteMovement+0x84>
					return;
				}
	si->dirFunc( steps < 0 ? 1 : 0);
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	689b      	ldr	r3, [r3, #8]
 8000518:	68ba      	ldr	r2, [r7, #8]
 800051a:	0fd2      	lsrs	r2, r2, #31
 800051c:	4610      	mov	r0, r2
 800051e:	4798      	blx	r3
	si->dir = steps > 0 ? 1:-1;
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	2b00      	cmp	r3, #0
 8000524:	dd01      	ble.n	800052a <prepareAbsoluteMovement+0x42>
 8000526:	2201      	movs	r2, #1
 8000528:	e001      	b.n	800052e <prepareAbsoluteMovement+0x46>
 800052a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	61da      	str	r2, [r3, #28]
	//printf("prepareAbsoluteMovement\r\n");

	si->totalSteps = abs(steps);	//stepsの値をアブソリュートでtotalstepsに格納
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	2b00      	cmp	r3, #0
 8000536:	bfb8      	it	lt
 8000538:	425b      	neglt	r3, r3
 800053a:	461a      	mov	r2, r3
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	631a      	str	r2, [r3, #48]	; 0x30
	printf("steps:%d\r\n",si->totalSteps);
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000544:	4619      	mov	r1, r3
 8000546:	480d      	ldr	r0, [pc, #52]	; (800057c <prepareAbsoluteMovement+0x94>)
 8000548:	f005 ffe8 	bl	800651c <iprintf>

	resetStepper(si);
 800054c:	68f8      	ldr	r0, [r7, #12]
 800054e:	f7ff ff4f 	bl	80003f0 <resetStepper>
	printf("steps:%d\r\n",steps);
 8000552:	68b9      	ldr	r1, [r7, #8]
 8000554:	4809      	ldr	r0, [pc, #36]	; (800057c <prepareAbsoluteMovement+0x94>)
 8000556:	f005 ffe1 	bl	800651c <iprintf>
	remainingSteppersFlag |= (1 << 0);
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <prepareAbsoluteMovement+0x98>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	b2da      	uxtb	r2, r3
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <prepareAbsoluteMovement+0x98>)
 8000568:	701a      	strb	r2, [r3, #0]
 800056a:	e000      	b.n	800056e <prepareAbsoluteMovement+0x86>
					return;
 800056c:	bf00      	nop
}
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	080076e8 	.word	0x080076e8
 8000578:	2000067c 	.word	0x2000067c
 800057c:	080076fc 	.word	0x080076fc
 8000580:	200006ca 	.word	0x200006ca

08000584 <setNextInterruptInterval>:


volatile uint8_t nextStepperFlag = 0;

void setNextInterruptInterval(){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0

	unsigned int mind = 999999;
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <setNextInterruptInterval+0x7c>)
 800058c:	607b      	str	r3, [r7, #4]

		if( ((1 << 0)& remainingSteppersFlag) && steppers[0].di < mind ){
 800058e:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <setNextInterruptInterval+0x80>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	b2db      	uxtb	r3, r3
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	d007      	beq.n	80005ae <setNextInterruptInterval+0x2a>
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <setNextInterruptInterval+0x84>)
 80005a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d902      	bls.n	80005ae <setNextInterruptInterval+0x2a>
			mind = steppers[0].di;
 80005a8:	4b17      	ldr	r3, [pc, #92]	; (8000608 <setNextInterruptInterval+0x84>)
 80005aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ac:	607b      	str	r3, [r7, #4]
		}
		nextStepperFlag = 0;
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <setNextInterruptInterval+0x88>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]

			if( (1 << 0) && steppers[0].di == mind ){
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <setNextInterruptInterval+0x84>)
 80005b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d107      	bne.n	80005ce <setNextInterruptInterval+0x4a>
				nextStepperFlag |= (1 << 0);
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <setNextInterruptInterval+0x88>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <setNextInterruptInterval+0x88>)
 80005cc:	701a      	strb	r2, [r3, #0]
			}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);		//mindにコンペアを設定
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <setNextInterruptInterval+0x8c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	635a      	str	r2, [r3, #52]	; 0x34
			//printf("mind:%d \r\n",mind);

	if (remainingSteppersFlag == 0){
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <setNextInterruptInterval+0x80>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d104      	bne.n	80005ea <setNextInterruptInterval+0x66>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);    //65500→コンペアマッチさせない
 80005e0:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <setNextInterruptInterval+0x8c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80005e8:	635a      	str	r2, [r3, #52]	; 0x34
	}

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <setNextInterruptInterval+0x8c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 80005f2:	bf00      	nop

}
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	000f423f 	.word	0x000f423f
 8000604:	200006ca 	.word	0x200006ca
 8000608:	2000067c 	.word	0x2000067c
 800060c:	200006cb 	.word	0x200006cb
 8000610:	2000008c 	.word	0x2000008c

08000614 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){      //指定したコンペアを超えた時発火
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	//HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
	unsigned int tmpCtr = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);	//指定されたタイマーチャンネルのコンペアを所得
 800061c:	4b6a      	ldr	r3, [pc, #424]	; (80007c8 <HAL_TIM_OC_DelayElapsedCallback+0x1b4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000622:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);			//コンペアを65500にセット
 8000624:	4b68      	ldr	r3, [pc, #416]	; (80007c8 <HAL_TIM_OC_DelayElapsedCallback+0x1b4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800062c:	635a      	str	r2, [r3, #52]	; 0x34

	if( homing_flag & (1 << 0)){
 800062e:	4b67      	ldr	r3, [pc, #412]	; (80007cc <HAL_TIM_OC_DelayElapsedCallback+0x1b8>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	2b00      	cmp	r3, #0
 8000638:	d00d      	beq.n	8000656 <HAL_TIM_OC_DelayElapsedCallback+0x42>
				if(end_stop_state & (1 << 0)){
 800063a:	4b65      	ldr	r3, [pc, #404]	; (80007d0 <HAL_TIM_OC_DelayElapsedCallback+0x1bc>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	2b00      	cmp	r3, #0
 8000644:	d007      	beq.n	8000656 <HAL_TIM_OC_DelayElapsedCallback+0x42>
					remainingSteppersFlag &= ~(1 << 0);
 8000646:	4b63      	ldr	r3, [pc, #396]	; (80007d4 <HAL_TIM_OC_DelayElapsedCallback+0x1c0>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	f023 0301 	bic.w	r3, r3, #1
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b60      	ldr	r3, [pc, #384]	; (80007d4 <HAL_TIM_OC_DelayElapsedCallback+0x1c0>)
 8000654:	701a      	strb	r2, [r3, #0]
				}
			}
	if ( ! (nextStepperFlag & (1 << 0)) ){				//nextStepperFlagが真でない(0なら)
 8000656:	4b60      	ldr	r3, [pc, #384]	; (80007d8 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	2b00      	cmp	r3, #0
 8000662:	d105      	bne.n	8000670 <HAL_TIM_OC_DelayElapsedCallback+0x5c>
			steppers[0].di -= tmpCtr;           //tmpCtrの値からsteppers[i].di引いた値を新しくsteppers[i].diに代入
 8000664:	4b5d      	ldr	r3, [pc, #372]	; (80007dc <HAL_TIM_OC_DelayElapsedCallback+0x1c8>)
 8000666:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	1ad3      	subs	r3, r2, r3
 800066c:	4a5b      	ldr	r2, [pc, #364]	; (80007dc <HAL_TIM_OC_DelayElapsedCallback+0x1c8>)
 800066e:	6453      	str	r3, [r2, #68]	; 0x44
		}
		//printf("steppers:%ld \r\n",steppers[0].di);

		volatile stepperInfo* s = &steppers[0];
 8000670:	4b5a      	ldr	r3, [pc, #360]	; (80007dc <HAL_TIM_OC_DelayElapsedCallback+0x1c8>)
 8000672:	60bb      	str	r3, [r7, #8]

		if( (s->stepCount) < (s->totalSteps) ){		//1周ごとにカウントしたstepCountがabs(steps)より小さかったら==動作が終了するまで
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	429a      	cmp	r2, r3
 800067e:	d220      	bcs.n	80006c2 <HAL_TIM_OC_DelayElapsedCallback+0xae>
			s->stepFunc();
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	4798      	blx	r3
			s->stepCount++;							//カウントし続ける
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800068a:	1c5a      	adds	r2, r3, #1
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	649a      	str	r2, [r3, #72]	; 0x48
			s->stepPosition += s->dir;		//dir(+もしくはー(dirの向き）を加算してstepPositionに格納
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	69da      	ldr	r2, [r3, #28]
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	441a      	add	r2, r3
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	619a      	str	r2, [r3, #24]
			if ( (s->stepCount) >= (s->totalSteps) ){	//stepCountがtotalStepsを超えたとき
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d30b      	bcc.n	80006c2 <HAL_TIM_OC_DelayElapsedCallback+0xae>
				s->movementDone = 1;	//movementDoneを1にする
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	2201      	movs	r2, #1
 80006ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				remainingSteppersFlag &= ~(1 << 0);
 80006b2:	4b48      	ldr	r3, [pc, #288]	; (80007d4 <HAL_TIM_OC_DelayElapsedCallback+0x1c0>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	f023 0301 	bic.w	r3, r3, #1
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4b45      	ldr	r3, [pc, #276]	; (80007d4 <HAL_TIM_OC_DelayElapsedCallback+0x1c0>)
 80006c0:	701a      	strb	r2, [r3, #0]

			}
		}

		if (s->rampUpStepCount == 0){
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d142      	bne.n	8000750 <HAL_TIM_OC_DelayElapsedCallback+0x13c>
			s->n++;									//sにnを代入して、nをプラス1する
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006ce:	1c5a      	adds	r2, r3, #1
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	63da      	str	r2, [r3, #60]	; 0x3c
			s->d = s->d - (2*s->d) / (4*s->n +1);	//加減速遅延時間
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80006e0:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	3301      	adds	r3, #1
 80006ec:	ee07 3a90 	vmov	s15, r3
 80006f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80006f4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80006f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			if (s->d <= s->minStepInterval ){		//加減速遅延時間がminStepIntervalより短いなら（定数で指定）
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	ee07 3a90 	vmov	s15, r3
 8000710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000714:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071c:	d80c      	bhi.n	8000738 <HAL_TIM_OC_DelayElapsedCallback+0x124>
				s->d = s->minStepInterval;			//minStepIntervalを加減速遅延時間にする
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	ee07 3a90 	vmov	s15, r3
 8000726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
				s->rampUpStepCount = s->stepCount;	//rampUpStepCountはstepCountとする
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	639a      	str	r2, [r3, #56]	; 0x38
			}
			if (s->stepCount >= (s->totalSteps / 2) ){  //目標値から現在のステップを引いた値の1/2よりstepCountが大きくなったとき
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000740:	085b      	lsrs	r3, r3, #1
 8000742:	429a      	cmp	r2, r3
 8000744:	d32c      	bcc.n	80007a0 <HAL_TIM_OC_DelayElapsedCallback+0x18c>
				s->rampUpStepCount = s->stepCount;		//rampUpStepCountはstepCountとする
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	639a      	str	r2, [r3, #56]	; 0x38
 800074e:	e027      	b.n	80007a0 <HAL_TIM_OC_DelayElapsedCallback+0x18c>
			}
		} else if ( s->stepCount >= s->totalSteps - s->rampUpStepCount) {	//目標値から現在のステップを引いた値からrampUpStepCountを引いた値がstepCountより小さいなら
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800075c:	1acb      	subs	r3, r1, r3
 800075e:	429a      	cmp	r2, r3
 8000760:	d31e      	bcc.n	80007a0 <HAL_TIM_OC_DelayElapsedCallback+0x18c>
			s->d = (s->d * (4 * s->n + 1)) / (4 * s->n + 1 -2);				//減速の時のステップ
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	3301      	adds	r3, #1
 8000770:	ee07 3a90 	vmov	s15, r3
 8000774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000778:	ee67 6a27 	vmul.f32	s13, s14, s15
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	3b01      	subs	r3, #1
 8000784:	ee07 3a90 	vmov	s15, r3
 8000788:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800078c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			s->n--;		//sにnを代入し、nから1を引く
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800079a:	1e5a      	subs	r2, r3, #1
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		s->di = s->d;	//計算結果sをstepperInfoのメンバdに代入したものをメンバdiに代入
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80007a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007aa:	ee17 2a90 	vmov	r2, s15
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	645a      	str	r2, [r3, #68]	; 0x44
		//printf("s->di:%ld \r\n",s->di);



	setNextInterruptInterval();
 80007b2:	f7ff fee7 	bl	8000584 <setNextInterruptInterval>

	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80007b6:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <HAL_TIM_OC_DelayElapsedCallback+0x1b4>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24


}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000008c 	.word	0x2000008c
 80007cc:	200006c9 	.word	0x200006c9
 80007d0:	200006c8 	.word	0x200006c8
 80007d4:	200006ca 	.word	0x200006ca
 80007d8:	200006cb 	.word	0x200006cb
 80007dc:	2000067c 	.word	0x2000067c

080007e0 <runAndWait>:
	if( ! HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)){	//割り込みピンが真でない(1でない=0なら)
		end_stop_state |= 1;					//end_stop_stateに左辺か右辺が1なら1を代入
	}
}

void runAndWait(){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	setNextInterruptInterval();
 80007e4:	f7ff fece 	bl	8000584 <setNextInterruptInterval>
	while(remainingSteppersFlag);
 80007e8:	bf00      	nop
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <runAndWait+0x1c>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1fa      	bne.n	80007ea <runAndWait+0xa>
}
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200006ca 	.word	0x200006ca

08000800 <stepperHoming>:


void stepperHoming(){
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	homing_flag |= (1 << 0);
 8000804:	4b24      	ldr	r3, [pc, #144]	; (8000898 <stepperHoming+0x98>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b22      	ldr	r3, [pc, #136]	; (8000898 <stepperHoming+0x98>)
 8000810:	701a      	strb	r2, [r3, #0]
	//seeking
	steppers[0].minStepInterval = steppers[0].seeking_vel;	//ホームピンに反応するまでモータ回す
 8000812:	4b22      	ldr	r3, [pc, #136]	; (800089c <stepperHoming+0x9c>)
 8000814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000816:	461a      	mov	r2, r3
 8000818:	4b20      	ldr	r3, [pc, #128]	; (800089c <stepperHoming+0x9c>)
 800081a:	605a      	str	r2, [r3, #4]
	prepareMovement( -100000000);
 800081c:	4820      	ldr	r0, [pc, #128]	; (80008a0 <stepperHoming+0xa0>)
 800081e:	f7ff fe19 	bl	8000454 <prepareMovement>
	runAndWait();
 8000822:	f7ff ffdd 	bl	80007e0 <runAndWait>
	HAL_Delay(500);
 8000826:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800082a:	f000 fe59 	bl	80014e0 <HAL_Delay>
	//pull-off

	homing_flag &= ~(1 << 0);								//pull_offだけモータ回す
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <stepperHoming+0x98>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	f023 0301 	bic.w	r3, r3, #1
 8000836:	b2da      	uxtb	r2, r3
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <stepperHoming+0x98>)
 800083a:	701a      	strb	r2, [r3, #0]
	prepareMovement(steppers[0].pull_off);
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <stepperHoming+0x9c>)
 800083e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fe07 	bl	8000454 <prepareMovement>
	runAndWait();
 8000846:	f7ff ffcb 	bl	80007e0 <runAndWait>
	HAL_Delay(500);
 800084a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800084e:	f000 fe47 	bl	80014e0 <HAL_Delay>
	//homing

	homing_flag |= (1 << 0);								//ホームピンに反応するまでモータ回す
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <stepperHoming+0x98>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	b2da      	uxtb	r2, r3
 800085c:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <stepperHoming+0x98>)
 800085e:	701a      	strb	r2, [r3, #0]
	steppers[0].minStepInterval = steppers[0].homing_vel;
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <stepperHoming+0x9c>)
 8000862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000864:	461a      	mov	r2, r3
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <stepperHoming+0x9c>)
 8000868:	605a      	str	r2, [r3, #4]
	prepareMovement( -100000000);
 800086a:	480d      	ldr	r0, [pc, #52]	; (80008a0 <stepperHoming+0xa0>)
 800086c:	f7ff fdf2 	bl	8000454 <prepareMovement>
	runAndWait();
 8000870:	f7ff ffb6 	bl	80007e0 <runAndWait>
	HAL_Delay(500);
 8000874:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000878:	f000 fe32 	bl	80014e0 <HAL_Delay>
//	homing_flag &= ~(1 << 0);
//	prepareMovement(steppers[0].pull_off);
//	runAndWait();
//	HAL_Delay(500);

	steppers[0].stepPosition = 0;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <stepperHoming+0x9c>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
	steppers[0].homing = 1;
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <stepperHoming+0x9c>)
 8000884:	2201      	movs	r2, #1
 8000886:	741a      	strb	r2, [r3, #16]
	steppers[0].minStepInterval = 100;
 8000888:	4b04      	ldr	r3, [pc, #16]	; (800089c <stepperHoming+0x9c>)
 800088a:	2264      	movs	r2, #100	; 0x64
 800088c:	605a      	str	r2, [r3, #4]
	printf("homing:\r\n");
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <stepperHoming+0xa4>)
 8000890:	f005 feca 	bl	8006628 <puts>

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200006c9 	.word	0x200006c9
 800089c:	2000067c 	.word	0x2000067c
 80008a0:	fa0a1f00 	.word	0xfa0a1f00
 80008a4:	08007708 	.word	0x08007708

080008a8 <TMCsetup>:

void TMCsetup(){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
	int32_t mstep_value = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
	int32_t toff_value = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
	int32_t microstep_value = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
	int32_t stanby_value = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
	int32_t max_value = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
	mstep_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK,TMC2209_MSTEP_REG_SELECT_SHIFT);	//uartでのmicrostepの有効化
 80008c2:	2100      	movs	r1, #0
 80008c4:	4886      	ldr	r0, [pc, #536]	; (8000ae0 <TMCsetup+0x238>)
 80008c6:	f005 fc5c 	bl	8006182 <tmc2209_readInt>
 80008ca:	4603      	mov	r3, r0
 80008cc:	11db      	asrs	r3, r3, #7
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
	printf("mstep_before : %ld\r\n", mstep_value);
 80008d4:	6979      	ldr	r1, [r7, #20]
 80008d6:	4883      	ldr	r0, [pc, #524]	; (8000ae4 <TMCsetup+0x23c>)
 80008d8:	f005 fe20 	bl	800651c <iprintf>
	mstep_value = 1;
 80008dc:	2301      	movs	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT,mstep_value);
 80008e0:	2100      	movs	r1, #0
 80008e2:	487f      	ldr	r0, [pc, #508]	; (8000ae0 <TMCsetup+0x238>)
 80008e4:	f005 fc4d 	bl	8006182 <tmc2209_readInt>
 80008e8:	4603      	mov	r3, r0
 80008ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	01db      	lsls	r3, r3, #7
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4313      	orrs	r3, r2
 80008f6:	461a      	mov	r2, r3
 80008f8:	2100      	movs	r1, #0
 80008fa:	4879      	ldr	r0, [pc, #484]	; (8000ae0 <TMCsetup+0x238>)
 80008fc:	f005 fbf1 	bl	80060e2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000900:	f000 fde2 	bl	80014c8 <HAL_GetTick>
 8000904:	4603      	mov	r3, r0
 8000906:	4619      	mov	r1, r3
 8000908:	4875      	ldr	r0, [pc, #468]	; (8000ae0 <TMCsetup+0x238>)
 800090a:	f005 fd70 	bl	80063ee <tmc2209_periodicJob>
	mstep_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT);
 800090e:	2100      	movs	r1, #0
 8000910:	4873      	ldr	r0, [pc, #460]	; (8000ae0 <TMCsetup+0x238>)
 8000912:	f005 fc36 	bl	8006182 <tmc2209_readInt>
 8000916:	4603      	mov	r3, r0
 8000918:	11db      	asrs	r3, r3, #7
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	617b      	str	r3, [r7, #20]
	printf("mstep_after : %ld\r\n", mstep_value);
 8000920:	6979      	ldr	r1, [r7, #20]
 8000922:	4871      	ldr	r0, [pc, #452]	; (8000ae8 <TMCsetup+0x240>)
 8000924:	f005 fdfa 	bl	800651c <iprintf>

	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);	//保持トルクの設定
 8000928:	216c      	movs	r1, #108	; 0x6c
 800092a:	486d      	ldr	r0, [pc, #436]	; (8000ae0 <TMCsetup+0x238>)
 800092c:	f005 fc29 	bl	8006182 <tmc2209_readInt>
 8000930:	4603      	mov	r3, r0
 8000932:	f003 030f 	and.w	r3, r3, #15
 8000936:	613b      	str	r3, [r7, #16]
	printf("toff_before : %ld\r\n", toff_value);
 8000938:	6939      	ldr	r1, [r7, #16]
 800093a:	486c      	ldr	r0, [pc, #432]	; (8000aec <TMCsetup+0x244>)
 800093c:	f005 fdee 	bl	800651c <iprintf>
	toff_value = 3;
 8000940:	2303      	movs	r3, #3
 8000942:	613b      	str	r3, [r7, #16]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT,toff_value);
 8000944:	216c      	movs	r1, #108	; 0x6c
 8000946:	4866      	ldr	r0, [pc, #408]	; (8000ae0 <TMCsetup+0x238>)
 8000948:	f005 fc1b 	bl	8006182 <tmc2209_readInt>
 800094c:	4603      	mov	r3, r0
 800094e:	f023 020f 	bic.w	r2, r3, #15
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	f003 030f 	and.w	r3, r3, #15
 8000958:	4313      	orrs	r3, r2
 800095a:	461a      	mov	r2, r3
 800095c:	216c      	movs	r1, #108	; 0x6c
 800095e:	4860      	ldr	r0, [pc, #384]	; (8000ae0 <TMCsetup+0x238>)
 8000960:	f005 fbbf 	bl	80060e2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000964:	f000 fdb0 	bl	80014c8 <HAL_GetTick>
 8000968:	4603      	mov	r3, r0
 800096a:	4619      	mov	r1, r3
 800096c:	485c      	ldr	r0, [pc, #368]	; (8000ae0 <TMCsetup+0x238>)
 800096e:	f005 fd3e 	bl	80063ee <tmc2209_periodicJob>
	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 8000972:	216c      	movs	r1, #108	; 0x6c
 8000974:	485a      	ldr	r0, [pc, #360]	; (8000ae0 <TMCsetup+0x238>)
 8000976:	f005 fc04 	bl	8006182 <tmc2209_readInt>
 800097a:	4603      	mov	r3, r0
 800097c:	f003 030f 	and.w	r3, r3, #15
 8000980:	613b      	str	r3, [r7, #16]
	printf("toff_after : %ld\r\n", toff_value);
 8000982:	6939      	ldr	r1, [r7, #16]
 8000984:	485a      	ldr	r0, [pc, #360]	; (8000af0 <TMCsetup+0x248>)
 8000986:	f005 fdc9 	bl	800651c <iprintf>

	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);	//microstepの設定
 800098a:	216c      	movs	r1, #108	; 0x6c
 800098c:	4854      	ldr	r0, [pc, #336]	; (8000ae0 <TMCsetup+0x238>)
 800098e:	f005 fbf8 	bl	8006182 <tmc2209_readInt>
 8000992:	4603      	mov	r3, r0
 8000994:	161b      	asrs	r3, r3, #24
 8000996:	f003 030f 	and.w	r3, r3, #15
 800099a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800099e:	fa42 f303 	asr.w	r3, r2, r3
 80009a2:	60fb      	str	r3, [r7, #12]
	printf("microstep_before : %ld\r\n", microstep_value);
 80009a4:	68f9      	ldr	r1, [r7, #12]
 80009a6:	4853      	ldr	r0, [pc, #332]	; (8000af4 <TMCsetup+0x24c>)
 80009a8:	f005 fdb8 	bl	800651c <iprintf>
	microstep_value = 4;
 80009ac:	2304      	movs	r3, #4
 80009ae:	60fb      	str	r3, [r7, #12]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT,microstep_value);
 80009b0:	216c      	movs	r1, #108	; 0x6c
 80009b2:	484b      	ldr	r0, [pc, #300]	; (8000ae0 <TMCsetup+0x238>)
 80009b4:	f005 fbe5 	bl	8006182 <tmc2209_readInt>
 80009b8:	4603      	mov	r3, r0
 80009ba:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	061b      	lsls	r3, r3, #24
 80009c2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80009c6:	4313      	orrs	r3, r2
 80009c8:	461a      	mov	r2, r3
 80009ca:	216c      	movs	r1, #108	; 0x6c
 80009cc:	4844      	ldr	r0, [pc, #272]	; (8000ae0 <TMCsetup+0x238>)
 80009ce:	f005 fb88 	bl	80060e2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80009d2:	f000 fd79 	bl	80014c8 <HAL_GetTick>
 80009d6:	4603      	mov	r3, r0
 80009d8:	4619      	mov	r1, r3
 80009da:	4841      	ldr	r0, [pc, #260]	; (8000ae0 <TMCsetup+0x238>)
 80009dc:	f005 fd07 	bl	80063ee <tmc2209_periodicJob>
	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);
 80009e0:	216c      	movs	r1, #108	; 0x6c
 80009e2:	483f      	ldr	r0, [pc, #252]	; (8000ae0 <TMCsetup+0x238>)
 80009e4:	f005 fbcd 	bl	8006182 <tmc2209_readInt>
 80009e8:	4603      	mov	r3, r0
 80009ea:	161b      	asrs	r3, r3, #24
 80009ec:	f003 030f 	and.w	r3, r3, #15
 80009f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009f4:	fa42 f303 	asr.w	r3, r2, r3
 80009f8:	60fb      	str	r3, [r7, #12]
	printf("microstep_after : %ld\r\n", microstep_value);
 80009fa:	68f9      	ldr	r1, [r7, #12]
 80009fc:	483e      	ldr	r0, [pc, #248]	; (8000af8 <TMCsetup+0x250>)
 80009fe:	f005 fd8d 	bl	800651c <iprintf>

	stanby_value=TMC2209_FIELD_READ(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);	//待機電流の設定
 8000a02:	2110      	movs	r1, #16
 8000a04:	4836      	ldr	r0, [pc, #216]	; (8000ae0 <TMCsetup+0x238>)
 8000a06:	f005 fbbc 	bl	8006182 <tmc2209_readInt>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	f003 031f 	and.w	r3, r3, #31
 8000a10:	60bb      	str	r3, [r7, #8]
	printf("stanbycurrent_before: %ld\r\n", stanby_value);
 8000a12:	68b9      	ldr	r1, [r7, #8]
 8000a14:	4839      	ldr	r0, [pc, #228]	; (8000afc <TMCsetup+0x254>)
 8000a16:	f005 fd81 	bl	800651c <iprintf>
	stanby_value = 10;
 8000a1a:	230a      	movs	r3, #10
 8000a1c:	60bb      	str	r3, [r7, #8]
	TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, stanby_value);
 8000a1e:	2110      	movs	r1, #16
 8000a20:	482f      	ldr	r0, [pc, #188]	; (8000ae0 <TMCsetup+0x238>)
 8000a22:	f005 fbae 	bl	8006182 <tmc2209_readInt>
 8000a26:	4603      	mov	r3, r0
 8000a28:	f023 021f 	bic.w	r2, r3, #31
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	f003 031f 	and.w	r3, r3, #31
 8000a32:	4313      	orrs	r3, r2
 8000a34:	461a      	mov	r2, r3
 8000a36:	2110      	movs	r1, #16
 8000a38:	4829      	ldr	r0, [pc, #164]	; (8000ae0 <TMCsetup+0x238>)
 8000a3a:	f005 fb52 	bl	80060e2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000a3e:	f000 fd43 	bl	80014c8 <HAL_GetTick>
 8000a42:	4603      	mov	r3, r0
 8000a44:	4619      	mov	r1, r3
 8000a46:	4826      	ldr	r0, [pc, #152]	; (8000ae0 <TMCsetup+0x238>)
 8000a48:	f005 fcd1 	bl	80063ee <tmc2209_periodicJob>
	HAL_Delay(200);
 8000a4c:	20c8      	movs	r0, #200	; 0xc8
 8000a4e:	f000 fd47 	bl	80014e0 <HAL_Delay>
	stanby_value=TMC2209_FIELD_READ(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);
 8000a52:	2110      	movs	r1, #16
 8000a54:	4822      	ldr	r0, [pc, #136]	; (8000ae0 <TMCsetup+0x238>)
 8000a56:	f005 fb94 	bl	8006182 <tmc2209_readInt>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	f003 031f 	and.w	r3, r3, #31
 8000a60:	60bb      	str	r3, [r7, #8]
	printf("stanbycurrent_after: %ld\r\n", stanby_value);
 8000a62:	68b9      	ldr	r1, [r7, #8]
 8000a64:	4826      	ldr	r0, [pc, #152]	; (8000b00 <TMCsetup+0x258>)
 8000a66:	f005 fd59 	bl	800651c <iprintf>

	max_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);	//最大電流の設定
 8000a6a:	2110      	movs	r1, #16
 8000a6c:	481c      	ldr	r0, [pc, #112]	; (8000ae0 <TMCsetup+0x238>)
 8000a6e:	f005 fb88 	bl	8006182 <tmc2209_readInt>
 8000a72:	4603      	mov	r3, r0
 8000a74:	121b      	asrs	r3, r3, #8
 8000a76:	f003 031f 	and.w	r3, r3, #31
 8000a7a:	607b      	str	r3, [r7, #4]
	printf("maxumum_before: %ld\r\n", max_value);
 8000a7c:	6879      	ldr	r1, [r7, #4]
 8000a7e:	4821      	ldr	r0, [pc, #132]	; (8000b04 <TMCsetup+0x25c>)
 8000a80:	f005 fd4c 	bl	800651c <iprintf>
	max_value = 10;
 8000a84:	230a      	movs	r3, #10
 8000a86:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, max_value);
 8000a88:	2110      	movs	r1, #16
 8000a8a:	4815      	ldr	r0, [pc, #84]	; (8000ae0 <TMCsetup+0x238>)
 8000a8c:	f005 fb79 	bl	8006182 <tmc2209_readInt>
 8000a90:	4603      	mov	r3, r0
 8000a92:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	021b      	lsls	r3, r3, #8
 8000a9a:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	2110      	movs	r1, #16
 8000aa4:	480e      	ldr	r0, [pc, #56]	; (8000ae0 <TMCsetup+0x238>)
 8000aa6:	f005 fb1c 	bl	80060e2 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000aaa:	f000 fd0d 	bl	80014c8 <HAL_GetTick>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <TMCsetup+0x238>)
 8000ab4:	f005 fc9b 	bl	80063ee <tmc2209_periodicJob>
	HAL_Delay(200);
 8000ab8:	20c8      	movs	r0, #200	; 0xc8
 8000aba:	f000 fd11 	bl	80014e0 <HAL_Delay>
	max_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 8000abe:	2110      	movs	r1, #16
 8000ac0:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <TMCsetup+0x238>)
 8000ac2:	f005 fb5e 	bl	8006182 <tmc2209_readInt>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	121b      	asrs	r3, r3, #8
 8000aca:	f003 031f 	and.w	r3, r3, #31
 8000ace:	607b      	str	r3, [r7, #4]
	printf("maxumum_after: %ld\r\n", max_value);
 8000ad0:	6879      	ldr	r1, [r7, #4]
 8000ad2:	480d      	ldr	r0, [pc, #52]	; (8000b08 <TMCsetup+0x260>)
 8000ad4:	f005 fd22 	bl	800651c <iprintf>

}
 8000ad8:	bf00      	nop
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	200001e0 	.word	0x200001e0
 8000ae4:	08007714 	.word	0x08007714
 8000ae8:	0800772c 	.word	0x0800772c
 8000aec:	08007740 	.word	0x08007740
 8000af0:	08007754 	.word	0x08007754
 8000af4:	08007768 	.word	0x08007768
 8000af8:	08007784 	.word	0x08007784
 8000afc:	0800779c 	.word	0x0800779c
 8000b00:	080077b8 	.word	0x080077b8
 8000b04:	080077d4 	.word	0x080077d4
 8000b08:	080077ec 	.word	0x080077ec

08000b0c <motorrotate>:

int uartflag1=0;
char rxbuf[1];
void motorrotate()
{
 8000b0c:	b5b0      	push	{r4, r5, r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
	char motorrotate_TM[] ="motorrotate_TM\r\n";
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <motorrotate+0x2c>)
 8000b14:	1d3c      	adds	r4, r7, #4
 8000b16:	461d      	mov	r5, r3
 8000b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b1c:	682b      	ldr	r3, [r5, #0]
 8000b1e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2,(uint8_t *)motorrotate_TM,sizeof(motorrotate_TM),3000);
 8000b20:	1d39      	adds	r1, r7, #4
 8000b22:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b26:	2211      	movs	r2, #17
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <motorrotate+0x30>)
 8000b2a:	f003 fd65 	bl	80045f8 <HAL_UART_Transmit>

}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bdb0      	pop	{r4, r5, r7, pc}
 8000b36:	bf00      	nop
 8000b38:	08007804 	.word	0x08007804
 8000b3c:	2000015c 	.word	0x2000015c

08000b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	b092      	sub	sp, #72	; 0x48
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8000b46:	4b58      	ldr	r3, [pc, #352]	; (8000ca8 <main+0x168>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f005 fd72 	bl	8006638 <setbuf>
	//uint8_t buffer[256];
	//char rxbuf[1];
	char start[] ="1:front,2:back\r\n";
 8000b54:	4b55      	ldr	r3, [pc, #340]	; (8000cac <main+0x16c>)
 8000b56:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000b5a:	461d      	mov	r5, r3
 8000b5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b60:	682b      	ldr	r3, [r5, #0]
 8000b62:	7023      	strb	r3, [r4, #0]
	char front[] ="front turn\r\n";
 8000b64:	4b52      	ldr	r3, [pc, #328]	; (8000cb0 <main+0x170>)
 8000b66:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000b6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b6c:	c407      	stmia	r4!, {r0, r1, r2}
 8000b6e:	7023      	strb	r3, [r4, #0]
	char back[] ="back turn\r\n";
 8000b70:	4a50      	ldr	r2, [pc, #320]	; (8000cb4 <main+0x174>)
 8000b72:	f107 0318 	add.w	r3, r7, #24
 8000b76:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char nonans[] ="Not Understand \r\n";
 8000b7c:	4b4e      	ldr	r3, [pc, #312]	; (8000cb8 <main+0x178>)
 8000b7e:	1d3c      	adds	r4, r7, #4
 8000b80:	461d      	mov	r5, r3
 8000b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b86:	682b      	ldr	r3, [r5, #0]
 8000b88:	8023      	strh	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8a:	f000 fc43 	bl	8001414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8e:	f000 f8af 	bl	8000cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b92:	f000 f9db 	bl	8000f4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b96:	f000 f9a9 	bl	8000eec <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000b9a:	f000 f977 	bl	8000e8c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000b9e:	f000 f8ff 	bl	8000da0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //int getserial=0;
  TMC2209_INIT();
 8000ba2:	f7ff fbb1 	bl	8000308 <TMC2209_INIT>
  TMCsetup();
 8000ba6:	f7ff fe7f 	bl	80008a8 <TMCsetup>
  printf("Hello\r\n");
 8000baa:	4844      	ldr	r0, [pc, #272]	; (8000cbc <main+0x17c>)
 8000bac:	f005 fd3c 	bl	8006628 <puts>

  //int i;

  HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);		//受信割り込み開始
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	4943      	ldr	r1, [pc, #268]	; (8000cc0 <main+0x180>)
 8000bb4:	4843      	ldr	r0, [pc, #268]	; (8000cc4 <main+0x184>)
 8000bb6:	f003 fef3 	bl	80049a0 <HAL_UART_Receive_IT>
  if(uartflag1==1)
 8000bba:	4b43      	ldr	r3, [pc, #268]	; (8000cc8 <main+0x188>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d102      	bne.n	8000bc8 <main+0x88>
  {
	  uartflag1=0;
 8000bc2:	4b41      	ldr	r3, [pc, #260]	; (8000cc8 <main+0x188>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
  }
  	  uartflag1=0;
 8000bc8:	4b3f      	ldr	r3, [pc, #252]	; (8000cc8 <main+0x188>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]



   HAL_UART_Transmit(&huart2,(uint8_t *)start,sizeof(start),3000);
 8000bce:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000bd2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000bd6:	2211      	movs	r2, #17
 8000bd8:	483a      	ldr	r0, [pc, #232]	; (8000cc4 <main+0x184>)
 8000bda:	f003 fd0d 	bl	80045f8 <HAL_UART_Transmit>
  //uint8_t rxbuf[1];
   //int32_t *value=3;

   //TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT, 3 );
   //Set stepper 1
   steppers[0].dirFunc = Dir0;
 8000bde:	4b3b      	ldr	r3, [pc, #236]	; (8000ccc <main+0x18c>)
 8000be0:	4a3b      	ldr	r2, [pc, #236]	; (8000cd0 <main+0x190>)
 8000be2:	609a      	str	r2, [r3, #8]
   steppers[0].stepFunc = Step0;
 8000be4:	4b39      	ldr	r3, [pc, #228]	; (8000ccc <main+0x18c>)
 8000be6:	4a3b      	ldr	r2, [pc, #236]	; (8000cd4 <main+0x194>)
 8000be8:	60da      	str	r2, [r3, #12]
   steppers[0].acceleration = 3000;
 8000bea:	4b38      	ldr	r3, [pc, #224]	; (8000ccc <main+0x18c>)
 8000bec:	4a3a      	ldr	r2, [pc, #232]	; (8000cd8 <main+0x198>)
 8000bee:	601a      	str	r2, [r3, #0]
   steppers[0].minStepInterval = 100;
 8000bf0:	4b36      	ldr	r3, [pc, #216]	; (8000ccc <main+0x18c>)
 8000bf2:	2264      	movs	r2, #100	; 0x64
 8000bf4:	605a      	str	r2, [r3, #4]
   steppers[0].homing = 0;
 8000bf6:	4b35      	ldr	r3, [pc, #212]	; (8000ccc <main+0x18c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	741a      	strb	r2, [r3, #16]
   steppers[0].dir_inv = 1;
 8000bfc:	4b33      	ldr	r3, [pc, #204]	; (8000ccc <main+0x18c>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	621a      	str	r2, [r3, #32]
   steppers[0].seeking_vel = 100;
 8000c02:	4b32      	ldr	r3, [pc, #200]	; (8000ccc <main+0x18c>)
 8000c04:	2264      	movs	r2, #100	; 0x64
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
   steppers[0].homing_vel = 200;
 8000c08:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <main+0x18c>)
 8000c0a:	22c8      	movs	r2, #200	; 0xc8
 8000c0c:	62da      	str	r2, [r3, #44]	; 0x2c
   steppers[0].pull_off = 500;
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <main+0x18c>)
 8000c10:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c14:	625a      	str	r2, [r3, #36]	; 0x24
    //pull+
   //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);  //ena pin
    //pull-
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);

   HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000c16:	2100      	movs	r1, #0
 8000c18:	4830      	ldr	r0, [pc, #192]	; (8000cdc <main+0x19c>)
 8000c1a:	f002 fc19 	bl	8003450 <HAL_TIM_OC_Start_IT>

	rxbuf[0]=0;
 8000c1e:	4b28      	ldr	r3, [pc, #160]	; (8000cc0 <main+0x180>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
    /* USER CODE BEGIN 3 */
	  //example read register value
	  //int32_t value = 0;


	  if (rxbuf[0] != 0){
 8000c24:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <main+0x180>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d0fb      	beq.n	8000c24 <main+0xe4>
	  		printf("rxbuf : %d\r\n",rxbuf[0]);
 8000c2c:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <main+0x180>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	482b      	ldr	r0, [pc, #172]	; (8000ce0 <main+0x1a0>)
 8000c34:	f005 fc72 	bl	800651c <iprintf>

	  	if(rxbuf[0] == '1'){
 8000c38:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <main+0x180>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b31      	cmp	r3, #49	; 0x31
 8000c3e:	d11a      	bne.n	8000c76 <main+0x136>
	  		//HAL_UART_Transmit_IT(&huart2,(uint8_t *)front, sizeof(front));
	  		printf("1:start");
 8000c40:	4828      	ldr	r0, [pc, #160]	; (8000ce4 <main+0x1a4>)
 8000c42:	f005 fc6b 	bl	800651c <iprintf>
	  		prepareAbsoluteMovement(5000);
 8000c46:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c4a:	f7ff fc4d 	bl	80004e8 <prepareAbsoluteMovement>
	  		runAndWait();
 8000c4e:	f7ff fdc7 	bl	80007e0 <runAndWait>
	  		HAL_Delay(100);
 8000c52:	2064      	movs	r0, #100	; 0x64
 8000c54:	f000 fc44 	bl	80014e0 <HAL_Delay>
	  		prepareAbsoluteMovement(-5000);
 8000c58:	4823      	ldr	r0, [pc, #140]	; (8000ce8 <main+0x1a8>)
 8000c5a:	f7ff fc45 	bl	80004e8 <prepareAbsoluteMovement>
	  		runAndWait();
 8000c5e:	f7ff fdbf 	bl	80007e0 <runAndWait>
	  		HAL_Delay(100);
 8000c62:	2064      	movs	r0, #100	; 0x64
 8000c64:	f000 fc3c 	bl	80014e0 <HAL_Delay>
	  		printf("1:end");
 8000c68:	4820      	ldr	r0, [pc, #128]	; (8000cec <main+0x1ac>)
 8000c6a:	f005 fc57 	bl	800651c <iprintf>


	  		rxbuf[0]=0;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <main+0x180>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	e7d6      	b.n	8000c24 <main+0xe4>

	  		}
	  	else if(rxbuf[0] == '2'){
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <main+0x180>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b32      	cmp	r3, #50	; 0x32
 8000c7c:	d10a      	bne.n	8000c94 <main+0x154>

	  		//HAL_UART_Transmit_IT(&huart2,(uint8_t *)back, sizeof(back));
	  		stepperHoming();
 8000c7e:	f7ff fdbf 	bl	8000800 <stepperHoming>

	  		runAndWait();
 8000c82:	f7ff fdad 	bl	80007e0 <runAndWait>
	  		HAL_Delay(100);
 8000c86:	2064      	movs	r0, #100	; 0x64
 8000c88:	f000 fc2a 	bl	80014e0 <HAL_Delay>
	  		//HAL_Delay(100);

	  		rxbuf[0]=0;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <main+0x180>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
 8000c92:	e7c7      	b.n	8000c24 <main+0xe4>
	  	}
	  	else{
	  		HAL_UART_Transmit_IT(&huart2,(uint8_t *)nonans, sizeof(nonans));
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2212      	movs	r2, #18
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <main+0x184>)
 8000c9c:	f003 fe12 	bl	80048c4 <HAL_UART_Transmit_IT>
	  		rxbuf[0]=0;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <main+0x180>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
	  if (rxbuf[0] != 0){
 8000ca6:	e7bd      	b.n	8000c24 <main+0xe4>
 8000ca8:	2000000c 	.word	0x2000000c
 8000cac:	08007840 	.word	0x08007840
 8000cb0:	08007854 	.word	0x08007854
 8000cb4:	08007864 	.word	0x08007864
 8000cb8:	08007870 	.word	0x08007870
 8000cbc:	08007818 	.word	0x08007818
 8000cc0:	200006d0 	.word	0x200006d0
 8000cc4:	2000015c 	.word	0x2000015c
 8000cc8:	200006cc 	.word	0x200006cc
 8000ccc:	2000067c 	.word	0x2000067c
 8000cd0:	080003cd 	.word	0x080003cd
 8000cd4:	080003ad 	.word	0x080003ad
 8000cd8:	453b8000 	.word	0x453b8000
 8000cdc:	2000008c 	.word	0x2000008c
 8000ce0:	08007820 	.word	0x08007820
 8000ce4:	08007830 	.word	0x08007830
 8000ce8:	ffffec78 	.word	0xffffec78
 8000cec:	08007838 	.word	0x08007838

08000cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b096      	sub	sp, #88	; 0x58
 8000cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cfa:	2228      	movs	r2, #40	; 0x28
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f005 fc04 	bl	800650c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]
 8000d22:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d24:	2302      	movs	r3, #2
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d2c:	2310      	movs	r3, #16
 8000d2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d30:	2302      	movs	r3, #2
 8000d32:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d34:	2300      	movs	r3, #0
 8000d36:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d38:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 ff32 	bl	8001bac <HAL_RCC_OscConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000d4e:	f000 f989 	bl	8001064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d52:	230f      	movs	r3, #15
 8000d54:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d56:	2302      	movs	r3, #2
 8000d58:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	2102      	movs	r1, #2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 ff5a 	bl	8002c28 <HAL_RCC_ClockConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d7a:	f000 f973 	bl	8001064 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f002 f983 	bl	8003094 <HAL_RCCEx_PeriphCLKConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000d94:	f000 f966 	bl	8001064 <Error_Handler>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	3758      	adds	r7, #88	; 0x58
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08e      	sub	sp, #56	; 0x38
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]
 8000dce:	615a      	str	r2, [r3, #20]
 8000dd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dd2:	4b2c      	ldr	r3, [pc, #176]	; (8000e84 <MX_TIM3_Init+0xe4>)
 8000dd4:	4a2c      	ldr	r2, [pc, #176]	; (8000e88 <MX_TIM3_Init+0xe8>)
 8000dd6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1280-1;
 8000dd8:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <MX_TIM3_Init+0xe4>)
 8000dda:	f240 42ff 	movw	r2, #1279	; 0x4ff
 8000dde:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de0:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <MX_TIM3_Init+0xe4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000de6:	4b27      	ldr	r3, [pc, #156]	; (8000e84 <MX_TIM3_Init+0xe4>)
 8000de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dee:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <MX_TIM3_Init+0xe4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df4:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <MX_TIM3_Init+0xe4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dfa:	4822      	ldr	r0, [pc, #136]	; (8000e84 <MX_TIM3_Init+0xe4>)
 8000dfc:	f002 fa70 	bl	80032e0 <HAL_TIM_Base_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000e06:	f000 f92d 	bl	8001064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e14:	4619      	mov	r1, r3
 8000e16:	481b      	ldr	r0, [pc, #108]	; (8000e84 <MX_TIM3_Init+0xe4>)
 8000e18:	f002 fdee 	bl	80039f8 <HAL_TIM_ConfigClockSource>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000e22:	f000 f91f 	bl	8001064 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000e26:	4817      	ldr	r0, [pc, #92]	; (8000e84 <MX_TIM3_Init+0xe4>)
 8000e28:	f002 fab1 	bl	800338e <HAL_TIM_OC_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000e32:	f000 f917 	bl	8001064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	4619      	mov	r1, r3
 8000e44:	480f      	ldr	r0, [pc, #60]	; (8000e84 <MX_TIM3_Init+0xe4>)
 8000e46:	f003 faa7 	bl	8004398 <HAL_TIMEx_MasterConfigSynchronization>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000e50:	f000 f908 	bl	8001064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e54:	2300      	movs	r3, #0
 8000e56:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e64:	463b      	mov	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <MX_TIM3_Init+0xe4>)
 8000e6c:	f002 fd4a 	bl	8003904 <HAL_TIM_OC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000e76:	f000 f8f5 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	3738      	adds	r7, #56	; 0x38
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000008c 	.word	0x2000008c
 8000e88:	40000400 	.word	0x40000400

08000e8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_USART1_UART_Init+0x58>)
 8000e92:	4a15      	ldr	r2, [pc, #84]	; (8000ee8 <MX_USART1_UART_Init+0x5c>)
 8000e94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <MX_USART1_UART_Init+0x58>)
 8000e98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_USART1_UART_Init+0x58>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_USART1_UART_Init+0x58>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_USART1_UART_Init+0x58>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_USART1_UART_Init+0x58>)
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MX_USART1_UART_Init+0x58>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_USART1_UART_Init+0x58>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <MX_USART1_UART_Init+0x58>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_USART1_UART_Init+0x58>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_USART1_UART_Init+0x58>)
 8000ed0:	f003 fb3c 	bl	800454c <HAL_HalfDuplex_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000eda:	f000 f8c3 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200000d8 	.word	0x200000d8
 8000ee8:	40013800 	.word	0x40013800

08000eec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000ef2:	4a15      	ldr	r2, [pc, #84]	; (8000f48 <MX_USART2_UART_Init+0x5c>)
 8000ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f30:	f003 fabe 	bl	80044b0 <HAL_UART_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f3a:	f000 f893 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000015c 	.word	0x2000015c
 8000f48:	40004400 	.word	0x40004400

08000f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f62:	4b28      	ldr	r3, [pc, #160]	; (8001004 <MX_GPIO_Init+0xb8>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	4a27      	ldr	r2, [pc, #156]	; (8001004 <MX_GPIO_Init+0xb8>)
 8000f68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f6c:	6153      	str	r3, [r2, #20]
 8000f6e:	4b25      	ldr	r3, [pc, #148]	; (8001004 <MX_GPIO_Init+0xb8>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b22      	ldr	r3, [pc, #136]	; (8001004 <MX_GPIO_Init+0xb8>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	4a21      	ldr	r2, [pc, #132]	; (8001004 <MX_GPIO_Init+0xb8>)
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f84:	6153      	str	r3, [r2, #20]
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <MX_GPIO_Init+0xb8>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_GPIO_Init+0xb8>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	4a1b      	ldr	r2, [pc, #108]	; (8001004 <MX_GPIO_Init+0xb8>)
 8000f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f9c:	6153      	str	r3, [r2, #20]
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_GPIO_Init+0xb8>)
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2130      	movs	r1, #48	; 0x30
 8000fae:	4816      	ldr	r0, [pc, #88]	; (8001008 <MX_GPIO_Init+0xbc>)
 8000fb0:	f000 fdcc 	bl	8001b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fb4:	2330      	movs	r3, #48	; 0x30
 8000fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480f      	ldr	r0, [pc, #60]	; (8001008 <MX_GPIO_Init+0xbc>)
 8000fcc:	f000 fc34 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fd0:	2340      	movs	r3, #64	; 0x40
 8000fd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000fd4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000fd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <MX_GPIO_Init+0xbc>)
 8000fe6:	f000 fc27 	bl	8001838 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2101      	movs	r1, #1
 8000fee:	2017      	movs	r0, #23
 8000ff0:	f000 fb75 	bl	80016de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ff4:	2017      	movs	r0, #23
 8000ff6:	f000 fb8e 	bl	8001716 <HAL_NVIC_EnableIRQ>

}
 8000ffa:	bf00      	nop
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000
 8001008:	48000400 	.word	0x48000400

0800100c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	b29a      	uxth	r2, r3
 800101c:	230a      	movs	r3, #10
 800101e:	68b9      	ldr	r1, [r7, #8]
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <_write+0x24>)
 8001022:	f003 fae9 	bl	80045f8 <HAL_UART_Transmit>
  return len;
 8001026:	687b      	ldr	r3, [r7, #4]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000015c 	.word	0x2000015c

08001034 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	motorrotate();
 800103c:	f7ff fd66 	bl	8000b0c <motorrotate>

	HAL_UART_Receive_IT(&huart2,(uint8_t *)rxbuf, 1);
 8001040:	2201      	movs	r2, #1
 8001042:	4905      	ldr	r1, [pc, #20]	; (8001058 <HAL_UART_RxCpltCallback+0x24>)
 8001044:	4805      	ldr	r0, [pc, #20]	; (800105c <HAL_UART_RxCpltCallback+0x28>)
 8001046:	f003 fcab 	bl	80049a0 <HAL_UART_Receive_IT>
	uartflag1 = 1;
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_UART_RxCpltCallback+0x2c>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]

}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200006d0 	.word	0x200006d0
 800105c:	2000015c 	.word	0x2000015c
 8001060:	200006cc 	.word	0x200006cc

08001064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001068:	b672      	cpsid	i
}
 800106a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800106c:	e7fe      	b.n	800106c <Error_Handler+0x8>
	...

08001070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <HAL_MspInit+0x44>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <HAL_MspInit+0x44>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6193      	str	r3, [r2, #24]
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <HAL_MspInit+0x44>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_MspInit+0x44>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <HAL_MspInit+0x44>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001098:	61d3      	str	r3, [r2, #28]
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_MspInit+0x44>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40021000 	.word	0x40021000

080010b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <HAL_TIM_Base_MspInit+0x44>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d113      	bne.n	80010f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_TIM_Base_MspInit+0x48>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <HAL_TIM_Base_MspInit+0x48>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	61d3      	str	r3, [r2, #28]
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_TIM_Base_MspInit+0x48>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2102      	movs	r1, #2
 80010e6:	201d      	movs	r0, #29
 80010e8:	f000 faf9 	bl	80016de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010ec:	201d      	movs	r0, #29
 80010ee:	f000 fb12 	bl	8001716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40000400 	.word	0x40000400
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08c      	sub	sp, #48	; 0x30
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a34      	ldr	r2, [pc, #208]	; (80011f4 <HAL_UART_MspInit+0xf0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d12a      	bne.n	800117c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001126:	4b34      	ldr	r3, [pc, #208]	; (80011f8 <HAL_UART_MspInit+0xf4>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	4a33      	ldr	r2, [pc, #204]	; (80011f8 <HAL_UART_MspInit+0xf4>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6193      	str	r3, [r2, #24]
 8001132:	4b31      	ldr	r3, [pc, #196]	; (80011f8 <HAL_UART_MspInit+0xf4>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	61bb      	str	r3, [r7, #24]
 800113c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <HAL_UART_MspInit+0xf4>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	4a2d      	ldr	r2, [pc, #180]	; (80011f8 <HAL_UART_MspInit+0xf4>)
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	6153      	str	r3, [r2, #20]
 800114a:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <HAL_UART_MspInit+0xf4>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800115a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800115c:	2312      	movs	r3, #18
 800115e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001168:	2307      	movs	r3, #7
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001176:	f000 fb5f 	bl	8001838 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800117a:	e036      	b.n	80011ea <HAL_UART_MspInit+0xe6>
  else if(huart->Instance==USART2)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a1e      	ldr	r2, [pc, #120]	; (80011fc <HAL_UART_MspInit+0xf8>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d131      	bne.n	80011ea <HAL_UART_MspInit+0xe6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <HAL_UART_MspInit+0xf4>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <HAL_UART_MspInit+0xf4>)
 800118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001190:	61d3      	str	r3, [r2, #28]
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_UART_MspInit+0xf4>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <HAL_UART_MspInit+0xf4>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	4a15      	ldr	r2, [pc, #84]	; (80011f8 <HAL_UART_MspInit+0xf4>)
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	6153      	str	r3, [r2, #20]
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <HAL_UART_MspInit+0xf4>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80011b6:	f248 0304 	movw	r3, #32772	; 0x8004
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011c8:	2307      	movs	r3, #7
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d6:	f000 fb2f 	bl	8001838 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	2026      	movs	r0, #38	; 0x26
 80011e0:	f000 fa7d 	bl	80016de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011e4:	2026      	movs	r0, #38	; 0x26
 80011e6:	f000 fa96 	bl	8001716 <HAL_NVIC_EnableIRQ>
}
 80011ea:	bf00      	nop
 80011ec:	3730      	adds	r7, #48	; 0x30
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40013800 	.word	0x40013800
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40004400 	.word	0x40004400

08001200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <NMI_Handler+0x4>

08001206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <HardFault_Handler+0x4>

0800120c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <MemManage_Handler+0x4>

08001212 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <BusFault_Handler+0x4>

08001218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <UsageFault_Handler+0x4>

0800121e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800124c:	f000 f928 	bl	80014a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}

08001254 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001258:	2040      	movs	r0, #64	; 0x40
 800125a:	f000 fc8f 	bl	8001b7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <TIM3_IRQHandler+0x10>)
 800126a:	f002 fa2b 	bl	80036c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000008c 	.word	0x2000008c

08001278 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <USART2_IRQHandler+0x10>)
 800127e:	f003 fbdd 	bl	8004a3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000015c 	.word	0x2000015c

0800128c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	e00a      	b.n	80012b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800129e:	f3af 8000 	nop.w
 80012a2:	4601      	mov	r1, r0
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	60ba      	str	r2, [r7, #8]
 80012aa:	b2ca      	uxtb	r2, r1
 80012ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbf0      	blt.n	800129e <_read+0x12>
	}

return len;
 80012bc:	687b      	ldr	r3, [r7, #4]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
	return -1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ee:	605a      	str	r2, [r3, #4]
	return 0;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <_isatty>:

int _isatty(int file)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
	return 1;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
	return 0;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001338:	4a14      	ldr	r2, [pc, #80]	; (800138c <_sbrk+0x5c>)
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <_sbrk+0x60>)
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <_sbrk+0x64>)
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <_sbrk+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	429a      	cmp	r2, r3
 800135e:	d207      	bcs.n	8001370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001360:	f005 f8aa 	bl	80064b8 <__errno>
 8001364:	4603      	mov	r3, r0
 8001366:	220c      	movs	r2, #12
 8001368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800136e:	e009      	b.n	8001384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <_sbrk+0x64>)
 8001380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001382:	68fb      	ldr	r3, [r7, #12]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20003000 	.word	0x20003000
 8001390:	00000400 	.word	0x00000400
 8001394:	200006d4 	.word	0x200006d4
 8001398:	200008f0 	.word	0x200008f0

0800139c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <SystemInit+0x20>)
 80013a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a6:	4a05      	ldr	r2, [pc, #20]	; (80013bc <SystemInit+0x20>)
 80013a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <LoopForever+0x6>)
  ldr r1, =_edata
 80013c6:	490e      	ldr	r1, [pc, #56]	; (8001400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013c8:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <LoopForever+0xe>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013cc:	e002      	b.n	80013d4 <LoopCopyDataInit>

080013ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d2:	3304      	adds	r3, #4

080013d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d8:	d3f9      	bcc.n	80013ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013da:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013dc:	4c0b      	ldr	r4, [pc, #44]	; (800140c <LoopForever+0x16>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e0:	e001      	b.n	80013e6 <LoopFillZerobss>

080013e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e4:	3204      	adds	r2, #4

080013e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e8:	d3fb      	bcc.n	80013e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013ea:	f7ff ffd7 	bl	800139c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ee:	f005 f869 	bl	80064c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013f2:	f7ff fba5 	bl	8000b40 <main>

080013f6 <LoopForever>:

LoopForever:
    b LoopForever
 80013f6:	e7fe      	b.n	80013f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013f8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80013fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001400:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001404:	08007bdc 	.word	0x08007bdc
  ldr r2, =_sbss
 8001408:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800140c:	200008f0 	.word	0x200008f0

08001410 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001410:	e7fe      	b.n	8001410 <ADC1_2_IRQHandler>
	...

08001414 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_Init+0x28>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a07      	ldr	r2, [pc, #28]	; (800143c <HAL_Init+0x28>)
 800141e:	f043 0310 	orr.w	r3, r3, #16
 8001422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001424:	2003      	movs	r0, #3
 8001426:	f000 f94f 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142a:	2000      	movs	r0, #0
 800142c:	f000 f808 	bl	8001440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001430:	f7ff fe1e 	bl	8001070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40022000 	.word	0x40022000

08001440 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_InitTick+0x54>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_InitTick+0x58>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001456:	fbb3 f3f1 	udiv	r3, r3, r1
 800145a:	fbb2 f3f3 	udiv	r3, r2, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f967 	bl	8001732 <HAL_SYSTICK_Config>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e00e      	b.n	800148c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d80a      	bhi.n	800148a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001474:	2200      	movs	r2, #0
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800147c:	f000 f92f 	bl	80016de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001480:	4a06      	ldr	r2, [pc, #24]	; (800149c <HAL_InitTick+0x5c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e000      	b.n	800148c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000000 	.word	0x20000000
 8001498:	20000008 	.word	0x20000008
 800149c:	20000004 	.word	0x20000004

080014a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x20>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x24>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <HAL_IncTick+0x24>)
 80014b2:	6013      	str	r3, [r2, #0]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000008 	.word	0x20000008
 80014c4:	200006d8 	.word	0x200006d8

080014c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <HAL_GetTick+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	200006d8 	.word	0x200006d8

080014e0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e8:	f7ff ffee 	bl	80014c8 <HAL_GetTick>
 80014ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014f8:	d005      	beq.n	8001506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_Delay+0x44>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001506:	bf00      	nop
 8001508:	f7ff ffde 	bl	80014c8 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	429a      	cmp	r2, r3
 8001516:	d8f7      	bhi.n	8001508 <HAL_Delay+0x28>
  {
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000008 	.word	0x20000008

08001528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001544:	4013      	ands	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155a:	4a04      	ldr	r2, [pc, #16]	; (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	60d3      	str	r3, [r2, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <__NVIC_GetPriorityGrouping+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	f003 0307 	and.w	r3, r3, #7
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	2b00      	cmp	r3, #0
 800159c:	db0b      	blt.n	80015b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	f003 021f 	and.w	r2, r3, #31
 80015a4:	4907      	ldr	r1, [pc, #28]	; (80015c4 <__NVIC_EnableIRQ+0x38>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	2001      	movs	r0, #1
 80015ae:	fa00 f202 	lsl.w	r2, r0, r2
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	; (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	; (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001694:	d301      	bcc.n	800169a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001696:	2301      	movs	r3, #1
 8001698:	e00f      	b.n	80016ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <SysTick_Config+0x40>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a2:	210f      	movs	r1, #15
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016a8:	f7ff ff8e 	bl	80015c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <SysTick_Config+0x40>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <SysTick_Config+0x40>)
 80016b4:	2207      	movs	r2, #7
 80016b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff29 	bl	8001528 <__NVIC_SetPriorityGrouping>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f0:	f7ff ff3e 	bl	8001570 <__NVIC_GetPriorityGrouping>
 80016f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	6978      	ldr	r0, [r7, #20]
 80016fc:	f7ff ff8e 	bl	800161c <NVIC_EncodePriority>
 8001700:	4602      	mov	r2, r0
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff5d 	bl	80015c8 <__NVIC_SetPriority>
}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff31 	bl	800158c <__NVIC_EnableIRQ>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ffa2 	bl	8001684 <SysTick_Config>
 8001740:	4603      	mov	r3, r0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001758:	2b02      	cmp	r3, #2
 800175a:	d008      	beq.n	800176e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2204      	movs	r2, #4
 8001760:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e020      	b.n	80017b0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 020e 	bic.w	r2, r2, #14
 800177c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0201 	bic.w	r2, r2, #1
 800178c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001796:	2101      	movs	r1, #1
 8001798:	fa01 f202 	lsl.w	r2, r1, r2
 800179c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d005      	beq.n	80017de <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2204      	movs	r2, #4
 80017d6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
 80017dc:	e027      	b.n	800182e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 020e 	bic.w	r2, r2, #14
 80017ec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0201 	bic.w	r2, r2, #1
 80017fc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001806:	2101      	movs	r1, #1
 8001808:	fa01 f202 	lsl.w	r2, r1, r2
 800180c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	4798      	blx	r3
    } 
  }
  return status;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001838:	b480      	push	{r7}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001846:	e14e      	b.n	8001ae6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	2101      	movs	r1, #1
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	4013      	ands	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 8140 	beq.w	8001ae0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	2b01      	cmp	r3, #1
 800186a:	d005      	beq.n	8001878 <HAL_GPIO_Init+0x40>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d130      	bne.n	80018da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	2203      	movs	r2, #3
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ae:	2201      	movs	r2, #1
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	091b      	lsrs	r3, r3, #4
 80018c4:	f003 0201 	and.w	r2, r3, #1
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d017      	beq.n	8001916 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d123      	bne.n	800196a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	08da      	lsrs	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3208      	adds	r2, #8
 800192a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	220f      	movs	r2, #15
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	691a      	ldr	r2, [r3, #16]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	08da      	lsrs	r2, r3, #3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3208      	adds	r2, #8
 8001964:	6939      	ldr	r1, [r7, #16]
 8001966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	2203      	movs	r2, #3
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0203 	and.w	r2, r3, #3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 809a 	beq.w	8001ae0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ac:	4b55      	ldr	r3, [pc, #340]	; (8001b04 <HAL_GPIO_Init+0x2cc>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a54      	ldr	r2, [pc, #336]	; (8001b04 <HAL_GPIO_Init+0x2cc>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b52      	ldr	r3, [pc, #328]	; (8001b04 <HAL_GPIO_Init+0x2cc>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019c4:	4a50      	ldr	r2, [pc, #320]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	089b      	lsrs	r3, r3, #2
 80019ca:	3302      	adds	r3, #2
 80019cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	220f      	movs	r2, #15
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019ee:	d013      	beq.n	8001a18 <HAL_GPIO_Init+0x1e0>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a46      	ldr	r2, [pc, #280]	; (8001b0c <HAL_GPIO_Init+0x2d4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d00d      	beq.n	8001a14 <HAL_GPIO_Init+0x1dc>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a45      	ldr	r2, [pc, #276]	; (8001b10 <HAL_GPIO_Init+0x2d8>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d007      	beq.n	8001a10 <HAL_GPIO_Init+0x1d8>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a44      	ldr	r2, [pc, #272]	; (8001b14 <HAL_GPIO_Init+0x2dc>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d101      	bne.n	8001a0c <HAL_GPIO_Init+0x1d4>
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e006      	b.n	8001a1a <HAL_GPIO_Init+0x1e2>
 8001a0c:	2305      	movs	r3, #5
 8001a0e:	e004      	b.n	8001a1a <HAL_GPIO_Init+0x1e2>
 8001a10:	2302      	movs	r3, #2
 8001a12:	e002      	b.n	8001a1a <HAL_GPIO_Init+0x1e2>
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <HAL_GPIO_Init+0x1e2>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	f002 0203 	and.w	r2, r2, #3
 8001a20:	0092      	lsls	r2, r2, #2
 8001a22:	4093      	lsls	r3, r2
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a2a:	4937      	ldr	r1, [pc, #220]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	089b      	lsrs	r3, r3, #2
 8001a30:	3302      	adds	r3, #2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a38:	4b37      	ldr	r3, [pc, #220]	; (8001b18 <HAL_GPIO_Init+0x2e0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a5c:	4a2e      	ldr	r2, [pc, #184]	; (8001b18 <HAL_GPIO_Init+0x2e0>)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a62:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <HAL_GPIO_Init+0x2e0>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a86:	4a24      	ldr	r2, [pc, #144]	; (8001b18 <HAL_GPIO_Init+0x2e0>)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <HAL_GPIO_Init+0x2e0>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ab0:	4a19      	ldr	r2, [pc, #100]	; (8001b18 <HAL_GPIO_Init+0x2e0>)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <HAL_GPIO_Init+0x2e0>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ada:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <HAL_GPIO_Init+0x2e0>)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f47f aea9 	bne.w	8001848 <HAL_GPIO_Init+0x10>
  }
}
 8001af6:	bf00      	nop
 8001af8:	bf00      	nop
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40010000 	.word	0x40010000
 8001b0c:	48000400 	.word	0x48000400
 8001b10:	48000800 	.word	0x48000800
 8001b14:	48000c00 	.word	0x48000c00
 8001b18:	40010400 	.word	0x40010400

08001b1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691a      	ldr	r2, [r3, #16]
 8001b2c:	887b      	ldrh	r3, [r7, #2]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
 8001b38:	e001      	b.n	8001b3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b5c:	787b      	ldrb	r3, [r7, #1]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b62:	887a      	ldrh	r2, [r7, #2]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b68:	e002      	b.n	8001b70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d006      	beq.n	8001ba0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b92:	4a05      	ldr	r2, [pc, #20]	; (8001ba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fbda 	bl	8000354 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40010400 	.word	0x40010400

08001bac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bbc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	f001 b823 	b.w	8002c18 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 817d 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001be8:	4bbc      	ldr	r3, [pc, #752]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d00c      	beq.n	8001c0e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bf4:	4bb9      	ldr	r3, [pc, #740]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d15c      	bne.n	8001cba <HAL_RCC_OscConfig+0x10e>
 8001c00:	4bb6      	ldr	r3, [pc, #728]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0c:	d155      	bne.n	8001cba <HAL_RCC_OscConfig+0x10e>
 8001c0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c12:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c22:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	095b      	lsrs	r3, r3, #5
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d102      	bne.n	8001c40 <HAL_RCC_OscConfig+0x94>
 8001c3a:	4ba8      	ldr	r3, [pc, #672]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	e015      	b.n	8001c6c <HAL_RCC_OscConfig+0xc0>
 8001c40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c44:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001c4c:	fa93 f3a3 	rbit	r3, r3
 8001c50:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c58:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c5c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001c68:	4b9c      	ldr	r3, [pc, #624]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c70:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001c74:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c78:	fa92 f2a2 	rbit	r2, r2
 8001c7c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001c80:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001c84:	fab2 f282 	clz	r2, r2
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	f042 0220 	orr.w	r2, r2, #32
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	f002 021f 	and.w	r2, r2, #31
 8001c94:	2101      	movs	r1, #1
 8001c96:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 811f 	beq.w	8001ee0 <HAL_RCC_OscConfig+0x334>
 8001ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f040 8116 	bne.w	8001ee0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	f000 bfaf 	b.w	8002c18 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cca:	d106      	bne.n	8001cda <HAL_RCC_OscConfig+0x12e>
 8001ccc:	4b83      	ldr	r3, [pc, #524]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a82      	ldr	r2, [pc, #520]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	e036      	b.n	8001d48 <HAL_RCC_OscConfig+0x19c>
 8001cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x158>
 8001cea:	4b7c      	ldr	r3, [pc, #496]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a7b      	ldr	r2, [pc, #492]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b79      	ldr	r3, [pc, #484]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a78      	ldr	r2, [pc, #480]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	e021      	b.n	8001d48 <HAL_RCC_OscConfig+0x19c>
 8001d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x184>
 8001d16:	4b71      	ldr	r3, [pc, #452]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a70      	ldr	r2, [pc, #448]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b6e      	ldr	r3, [pc, #440]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a6d      	ldr	r2, [pc, #436]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCC_OscConfig+0x19c>
 8001d30:	4b6a      	ldr	r3, [pc, #424]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a69      	ldr	r2, [pc, #420]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	4b67      	ldr	r3, [pc, #412]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a66      	ldr	r2, [pc, #408]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d46:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d48:	4b64      	ldr	r3, [pc, #400]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	f023 020f 	bic.w	r2, r3, #15
 8001d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	495f      	ldr	r1, [pc, #380]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d059      	beq.n	8001e26 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d72:	f7ff fba9 	bl	80014c8 <HAL_GetTick>
 8001d76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d7c:	f7ff fba4 	bl	80014c8 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b64      	cmp	r3, #100	; 0x64
 8001d8a:	d902      	bls.n	8001d92 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	f000 bf43 	b.w	8002c18 <HAL_RCC_OscConfig+0x106c>
 8001d92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d96:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001d9e:	fa93 f3a3 	rbit	r3, r3
 8001da2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001da6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	095b      	lsrs	r3, r3, #5
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d102      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x218>
 8001dbe:	4b47      	ldr	r3, [pc, #284]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	e015      	b.n	8001df0 <HAL_RCC_OscConfig+0x244>
 8001dc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001dd0:	fa93 f3a3 	rbit	r3, r3
 8001dd4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001dd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ddc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001de0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001dec:	4b3b      	ldr	r3, [pc, #236]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001df4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001df8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001dfc:	fa92 f2a2 	rbit	r2, r2
 8001e00:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001e04:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001e08:	fab2 f282 	clz	r2, r2
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	f042 0220 	orr.w	r2, r2, #32
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	f002 021f 	and.w	r2, r2, #31
 8001e18:	2101      	movs	r1, #1
 8001e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0ab      	beq.n	8001d7c <HAL_RCC_OscConfig+0x1d0>
 8001e24:	e05d      	b.n	8001ee2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e26:	f7ff fb4f 	bl	80014c8 <HAL_GetTick>
 8001e2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2e:	e00a      	b.n	8001e46 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e30:	f7ff fb4a 	bl	80014c8 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b64      	cmp	r3, #100	; 0x64
 8001e3e:	d902      	bls.n	8001e46 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	f000 bee9 	b.w	8002c18 <HAL_RCC_OscConfig+0x106c>
 8001e46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e4a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001e5a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	095b      	lsrs	r3, r3, #5
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d102      	bne.n	8001e78 <HAL_RCC_OscConfig+0x2cc>
 8001e72:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	e015      	b.n	8001ea4 <HAL_RCC_OscConfig+0x2f8>
 8001e78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e7c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e90:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e94:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001ea0:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_RCC_OscConfig+0x330>)
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ea8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001eac:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001eb0:	fa92 f2a2 	rbit	r2, r2
 8001eb4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001eb8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001ebc:	fab2 f282 	clz	r2, r2
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	f042 0220 	orr.w	r2, r2, #32
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	f002 021f 	and.w	r2, r2, #31
 8001ecc:	2101      	movs	r1, #1
 8001ece:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1ab      	bne.n	8001e30 <HAL_RCC_OscConfig+0x284>
 8001ed8:	e003      	b.n	8001ee2 <HAL_RCC_OscConfig+0x336>
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 817d 	beq.w	80021f2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ef8:	4ba6      	ldr	r3, [pc, #664]	; (8002194 <HAL_RCC_OscConfig+0x5e8>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 030c 	and.w	r3, r3, #12
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00b      	beq.n	8001f1c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f04:	4ba3      	ldr	r3, [pc, #652]	; (8002194 <HAL_RCC_OscConfig+0x5e8>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d172      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x44a>
 8001f10:	4ba0      	ldr	r3, [pc, #640]	; (8002194 <HAL_RCC_OscConfig+0x5e8>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d16c      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x44a>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001f2e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	095b      	lsrs	r3, r3, #5
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d102      	bne.n	8001f4c <HAL_RCC_OscConfig+0x3a0>
 8001f46:	4b93      	ldr	r3, [pc, #588]	; (8002194 <HAL_RCC_OscConfig+0x5e8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	e013      	b.n	8001f74 <HAL_RCC_OscConfig+0x3c8>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001f5e:	2302      	movs	r3, #2
 8001f60:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001f64:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001f68:	fa93 f3a3 	rbit	r3, r3
 8001f6c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001f70:	4b88      	ldr	r3, [pc, #544]	; (8002194 <HAL_RCC_OscConfig+0x5e8>)
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	2202      	movs	r2, #2
 8001f76:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001f7a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f7e:	fa92 f2a2 	rbit	r2, r2
 8001f82:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001f86:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001f8a:	fab2 f282 	clz	r2, r2
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	f042 0220 	orr.w	r2, r2, #32
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	f002 021f 	and.w	r2, r2, #31
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <HAL_RCC_OscConfig+0x410>
 8001fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001faa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d002      	beq.n	8001fbc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	f000 be2e 	b.w	8002c18 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbc:	4b75      	ldr	r3, [pc, #468]	; (8002194 <HAL_RCC_OscConfig+0x5e8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	21f8      	movs	r1, #248	; 0xf8
 8001fd2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001fda:	fa91 f1a1 	rbit	r1, r1
 8001fde:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001fe2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001fe6:	fab1 f181 	clz	r1, r1
 8001fea:	b2c9      	uxtb	r1, r1
 8001fec:	408b      	lsls	r3, r1
 8001fee:	4969      	ldr	r1, [pc, #420]	; (8002194 <HAL_RCC_OscConfig+0x5e8>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff4:	e0fd      	b.n	80021f2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 8088 	beq.w	8002118 <HAL_RCC_OscConfig+0x56c>
 8002008:	2301      	movs	r3, #1
 800200a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002012:	fa93 f3a3 	rbit	r3, r3
 8002016:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800201a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002028:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	461a      	mov	r2, r3
 8002030:	2301      	movs	r3, #1
 8002032:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff fa48 	bl	80014c8 <HAL_GetTick>
 8002038:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203c:	e00a      	b.n	8002054 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800203e:	f7ff fa43 	bl	80014c8 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d902      	bls.n	8002054 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	f000 bde2 	b.w	8002c18 <HAL_RCC_OscConfig+0x106c>
 8002054:	2302      	movs	r3, #2
 8002056:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002066:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	095b      	lsrs	r3, r3, #5
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d102      	bne.n	8002084 <HAL_RCC_OscConfig+0x4d8>
 800207e:	4b45      	ldr	r3, [pc, #276]	; (8002194 <HAL_RCC_OscConfig+0x5e8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	e013      	b.n	80020ac <HAL_RCC_OscConfig+0x500>
 8002084:	2302      	movs	r3, #2
 8002086:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002096:	2302      	movs	r3, #2
 8002098:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800209c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80020a0:	fa93 f3a3 	rbit	r3, r3
 80020a4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80020a8:	4b3a      	ldr	r3, [pc, #232]	; (8002194 <HAL_RCC_OscConfig+0x5e8>)
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	2202      	movs	r2, #2
 80020ae:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80020b2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80020b6:	fa92 f2a2 	rbit	r2, r2
 80020ba:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80020be:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80020c2:	fab2 f282 	clz	r2, r2
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	f042 0220 	orr.w	r2, r2, #32
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	f002 021f 	and.w	r2, r2, #31
 80020d2:	2101      	movs	r1, #1
 80020d4:	fa01 f202 	lsl.w	r2, r1, r2
 80020d8:	4013      	ands	r3, r2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0af      	beq.n	800203e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020de:	4b2d      	ldr	r3, [pc, #180]	; (8002194 <HAL_RCC_OscConfig+0x5e8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	21f8      	movs	r1, #248	; 0xf8
 80020f4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80020fc:	fa91 f1a1 	rbit	r1, r1
 8002100:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002104:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002108:	fab1 f181 	clz	r1, r1
 800210c:	b2c9      	uxtb	r1, r1
 800210e:	408b      	lsls	r3, r1
 8002110:	4920      	ldr	r1, [pc, #128]	; (8002194 <HAL_RCC_OscConfig+0x5e8>)
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]
 8002116:	e06c      	b.n	80021f2 <HAL_RCC_OscConfig+0x646>
 8002118:	2301      	movs	r3, #1
 800211a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800212a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002138:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	461a      	mov	r2, r3
 8002140:	2300      	movs	r3, #0
 8002142:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7ff f9c0 	bl	80014c8 <HAL_GetTick>
 8002148:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800214e:	f7ff f9bb 	bl	80014c8 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d902      	bls.n	8002164 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	f000 bd5a 	b.w	8002c18 <HAL_RCC_OscConfig+0x106c>
 8002164:	2302      	movs	r3, #2
 8002166:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002176:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	095b      	lsrs	r3, r3, #5
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b01      	cmp	r3, #1
 800218c:	d104      	bne.n	8002198 <HAL_RCC_OscConfig+0x5ec>
 800218e:	4b01      	ldr	r3, [pc, #4]	; (8002194 <HAL_RCC_OscConfig+0x5e8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	e015      	b.n	80021c0 <HAL_RCC_OscConfig+0x614>
 8002194:	40021000 	.word	0x40021000
 8002198:	2302      	movs	r3, #2
 800219a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80021aa:	2302      	movs	r3, #2
 80021ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80021b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80021bc:	4bc8      	ldr	r3, [pc, #800]	; (80024e0 <HAL_RCC_OscConfig+0x934>)
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	2202      	movs	r2, #2
 80021c2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80021c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80021ca:	fa92 f2a2 	rbit	r2, r2
 80021ce:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80021d2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80021d6:	fab2 f282 	clz	r2, r2
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	f042 0220 	orr.w	r2, r2, #32
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	f002 021f 	and.w	r2, r2, #31
 80021e6:	2101      	movs	r1, #1
 80021e8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1ad      	bne.n	800214e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8110 	beq.w	8002428 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d079      	beq.n	800230c <HAL_RCC_OscConfig+0x760>
 8002218:	2301      	movs	r3, #1
 800221a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800222a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	4bab      	ldr	r3, [pc, #684]	; (80024e4 <HAL_RCC_OscConfig+0x938>)
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	461a      	mov	r2, r3
 800223e:	2301      	movs	r3, #1
 8002240:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002242:	f7ff f941 	bl	80014c8 <HAL_GetTick>
 8002246:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224a:	e00a      	b.n	8002262 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800224c:	f7ff f93c 	bl	80014c8 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d902      	bls.n	8002262 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	f000 bcdb 	b.w	8002c18 <HAL_RCC_OscConfig+0x106c>
 8002262:	2302      	movs	r3, #2
 8002264:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002278:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800227c:	2202      	movs	r2, #2
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002284:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	fa93 f2a3 	rbit	r2, r3
 800228e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80022a0:	2202      	movs	r2, #2
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	fa93 f2a3 	rbit	r2, r3
 80022b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022ba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022bc:	4b88      	ldr	r3, [pc, #544]	; (80024e0 <HAL_RCC_OscConfig+0x934>)
 80022be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022c8:	2102      	movs	r1, #2
 80022ca:	6019      	str	r1, [r3, #0]
 80022cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	fa93 f1a3 	rbit	r1, r3
 80022da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80022e2:	6019      	str	r1, [r3, #0]
  return result;
 80022e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	2101      	movs	r1, #1
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	4013      	ands	r3, r2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0a0      	beq.n	800224c <HAL_RCC_OscConfig+0x6a0>
 800230a:	e08d      	b.n	8002428 <HAL_RCC_OscConfig+0x87c>
 800230c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002310:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002314:	2201      	movs	r2, #1
 8002316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	fa93 f2a3 	rbit	r2, r3
 8002326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800232e:	601a      	str	r2, [r3, #0]
  return result;
 8002330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002334:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002338:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	4b68      	ldr	r3, [pc, #416]	; (80024e4 <HAL_RCC_OscConfig+0x938>)
 8002344:	4413      	add	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	461a      	mov	r2, r3
 800234a:	2300      	movs	r3, #0
 800234c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234e:	f7ff f8bb 	bl	80014c8 <HAL_GetTick>
 8002352:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002356:	e00a      	b.n	800236e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002358:	f7ff f8b6 	bl	80014c8 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d902      	bls.n	800236e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	f000 bc55 	b.w	8002c18 <HAL_RCC_OscConfig+0x106c>
 800236e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002372:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002376:	2202      	movs	r2, #2
 8002378:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	fa93 f2a3 	rbit	r2, r3
 8002388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002396:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800239a:	2202      	movs	r2, #2
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	fa93 f2a3 	rbit	r2, r3
 80023ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80023be:	2202      	movs	r2, #2
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	fa93 f2a3 	rbit	r2, r3
 80023d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80023d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023da:	4b41      	ldr	r3, [pc, #260]	; (80024e0 <HAL_RCC_OscConfig+0x934>)
 80023dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80023e6:	2102      	movs	r1, #2
 80023e8:	6019      	str	r1, [r3, #0]
 80023ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	fa93 f1a3 	rbit	r1, r3
 80023f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002400:	6019      	str	r1, [r3, #0]
  return result;
 8002402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002406:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	fab3 f383 	clz	r3, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002416:	b2db      	uxtb	r3, r3
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	2101      	movs	r1, #1
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d197      	bne.n	8002358 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 81a1 	beq.w	8002780 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800243e:	2300      	movs	r3, #0
 8002440:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002444:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <HAL_RCC_OscConfig+0x934>)
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d116      	bne.n	800247e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002450:	4b23      	ldr	r3, [pc, #140]	; (80024e0 <HAL_RCC_OscConfig+0x934>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	4a22      	ldr	r2, [pc, #136]	; (80024e0 <HAL_RCC_OscConfig+0x934>)
 8002456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245a:	61d3      	str	r3, [r2, #28]
 800245c:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <HAL_RCC_OscConfig+0x934>)
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002468:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002472:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002476:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002478:	2301      	movs	r3, #1
 800247a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <HAL_RCC_OscConfig+0x93c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d11a      	bne.n	80024c0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800248a:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <HAL_RCC_OscConfig+0x93c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a16      	ldr	r2, [pc, #88]	; (80024e8 <HAL_RCC_OscConfig+0x93c>)
 8002490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002494:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002496:	f7ff f817 	bl	80014c8 <HAL_GetTick>
 800249a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249e:	e009      	b.n	80024b4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a0:	f7ff f812 	bl	80014c8 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b64      	cmp	r3, #100	; 0x64
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e3b1      	b.n	8002c18 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <HAL_RCC_OscConfig+0x93c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ef      	beq.n	80024a0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d10d      	bne.n	80024ec <HAL_RCC_OscConfig+0x940>
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <HAL_RCC_OscConfig+0x934>)
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4a02      	ldr	r2, [pc, #8]	; (80024e0 <HAL_RCC_OscConfig+0x934>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	6213      	str	r3, [r2, #32]
 80024dc:	e03c      	b.n	8002558 <HAL_RCC_OscConfig+0x9ac>
 80024de:	bf00      	nop
 80024e0:	40021000 	.word	0x40021000
 80024e4:	10908120 	.word	0x10908120
 80024e8:	40007000 	.word	0x40007000
 80024ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10c      	bne.n	8002516 <HAL_RCC_OscConfig+0x96a>
 80024fc:	4bc1      	ldr	r3, [pc, #772]	; (8002804 <HAL_RCC_OscConfig+0xc58>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	4ac0      	ldr	r2, [pc, #768]	; (8002804 <HAL_RCC_OscConfig+0xc58>)
 8002502:	f023 0301 	bic.w	r3, r3, #1
 8002506:	6213      	str	r3, [r2, #32]
 8002508:	4bbe      	ldr	r3, [pc, #760]	; (8002804 <HAL_RCC_OscConfig+0xc58>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4abd      	ldr	r2, [pc, #756]	; (8002804 <HAL_RCC_OscConfig+0xc58>)
 800250e:	f023 0304 	bic.w	r3, r3, #4
 8002512:	6213      	str	r3, [r2, #32]
 8002514:	e020      	b.n	8002558 <HAL_RCC_OscConfig+0x9ac>
 8002516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	2b05      	cmp	r3, #5
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x994>
 8002526:	4bb7      	ldr	r3, [pc, #732]	; (8002804 <HAL_RCC_OscConfig+0xc58>)
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4ab6      	ldr	r2, [pc, #728]	; (8002804 <HAL_RCC_OscConfig+0xc58>)
 800252c:	f043 0304 	orr.w	r3, r3, #4
 8002530:	6213      	str	r3, [r2, #32]
 8002532:	4bb4      	ldr	r3, [pc, #720]	; (8002804 <HAL_RCC_OscConfig+0xc58>)
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	4ab3      	ldr	r2, [pc, #716]	; (8002804 <HAL_RCC_OscConfig+0xc58>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	6213      	str	r3, [r2, #32]
 800253e:	e00b      	b.n	8002558 <HAL_RCC_OscConfig+0x9ac>
 8002540:	4bb0      	ldr	r3, [pc, #704]	; (8002804 <HAL_RCC_OscConfig+0xc58>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4aaf      	ldr	r2, [pc, #700]	; (8002804 <HAL_RCC_OscConfig+0xc58>)
 8002546:	f023 0301 	bic.w	r3, r3, #1
 800254a:	6213      	str	r3, [r2, #32]
 800254c:	4bad      	ldr	r3, [pc, #692]	; (8002804 <HAL_RCC_OscConfig+0xc58>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4aac      	ldr	r2, [pc, #688]	; (8002804 <HAL_RCC_OscConfig+0xc58>)
 8002552:	f023 0304 	bic.w	r3, r3, #4
 8002556:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 8081 	beq.w	800266c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256a:	f7fe ffad 	bl	80014c8 <HAL_GetTick>
 800256e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002572:	e00b      	b.n	800258c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002574:	f7fe ffa8 	bl	80014c8 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	; 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e345      	b.n	8002c18 <HAL_RCC_OscConfig+0x106c>
 800258c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002590:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002594:	2202      	movs	r2, #2
 8002596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	fa93 f2a3 	rbit	r2, r3
 80025a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80025b8:	2202      	movs	r2, #2
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	fa93 f2a3 	rbit	r2, r3
 80025ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80025d2:	601a      	str	r2, [r3, #0]
  return result;
 80025d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80025dc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	095b      	lsrs	r3, r3, #5
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f043 0302 	orr.w	r3, r3, #2
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d102      	bne.n	80025f8 <HAL_RCC_OscConfig+0xa4c>
 80025f2:	4b84      	ldr	r3, [pc, #528]	; (8002804 <HAL_RCC_OscConfig+0xc58>)
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	e013      	b.n	8002620 <HAL_RCC_OscConfig+0xa74>
 80025f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002600:	2202      	movs	r2, #2
 8002602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002608:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	fa93 f2a3 	rbit	r2, r3
 8002612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002616:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	4b79      	ldr	r3, [pc, #484]	; (8002804 <HAL_RCC_OscConfig+0xc58>)
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002624:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002628:	2102      	movs	r1, #2
 800262a:	6011      	str	r1, [r2, #0]
 800262c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002630:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	fa92 f1a2 	rbit	r1, r2
 800263a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800263e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002642:	6011      	str	r1, [r2, #0]
  return result;
 8002644:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002648:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	fab2 f282 	clz	r2, r2
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	f002 021f 	and.w	r2, r2, #31
 800265e:	2101      	movs	r1, #1
 8002660:	fa01 f202 	lsl.w	r2, r1, r2
 8002664:	4013      	ands	r3, r2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d084      	beq.n	8002574 <HAL_RCC_OscConfig+0x9c8>
 800266a:	e07f      	b.n	800276c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266c:	f7fe ff2c 	bl	80014c8 <HAL_GetTick>
 8002670:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002674:	e00b      	b.n	800268e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002676:	f7fe ff27 	bl	80014c8 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f241 3288 	movw	r2, #5000	; 0x1388
 8002686:	4293      	cmp	r3, r2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e2c4      	b.n	8002c18 <HAL_RCC_OscConfig+0x106c>
 800268e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002692:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002696:	2202      	movs	r2, #2
 8002698:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	fa93 f2a3 	rbit	r2, r3
 80026a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80026ba:	2202      	movs	r2, #2
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	fa93 f2a3 	rbit	r2, r3
 80026cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80026d4:	601a      	str	r2, [r3, #0]
  return result;
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80026de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e0:	fab3 f383 	clz	r3, r3
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	f043 0302 	orr.w	r3, r3, #2
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d102      	bne.n	80026fa <HAL_RCC_OscConfig+0xb4e>
 80026f4:	4b43      	ldr	r3, [pc, #268]	; (8002804 <HAL_RCC_OscConfig+0xc58>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	e013      	b.n	8002722 <HAL_RCC_OscConfig+0xb76>
 80026fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002702:	2202      	movs	r2, #2
 8002704:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	fa93 f2a3 	rbit	r2, r3
 8002714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002718:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	4b39      	ldr	r3, [pc, #228]	; (8002804 <HAL_RCC_OscConfig+0xc58>)
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002726:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800272a:	2102      	movs	r1, #2
 800272c:	6011      	str	r1, [r2, #0]
 800272e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002732:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	fa92 f1a2 	rbit	r1, r2
 800273c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002740:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002744:	6011      	str	r1, [r2, #0]
  return result;
 8002746:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800274a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	fab2 f282 	clz	r2, r2
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	f002 021f 	and.w	r2, r2, #31
 8002760:	2101      	movs	r1, #1
 8002762:	fa01 f202 	lsl.w	r2, r1, r2
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d184      	bne.n	8002676 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800276c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002770:	2b01      	cmp	r3, #1
 8002772:	d105      	bne.n	8002780 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002774:	4b23      	ldr	r3, [pc, #140]	; (8002804 <HAL_RCC_OscConfig+0xc58>)
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	4a22      	ldr	r2, [pc, #136]	; (8002804 <HAL_RCC_OscConfig+0xc58>)
 800277a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800277e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002784:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 8242 	beq.w	8002c16 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002792:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <HAL_RCC_OscConfig+0xc58>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b08      	cmp	r3, #8
 800279c:	f000 8213 	beq.w	8002bc6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	f040 8162 	bne.w	8002a76 <HAL_RCC_OscConfig+0xeca>
 80027b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80027ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	fa93 f2a3 	rbit	r2, r3
 80027ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80027d6:	601a      	str	r2, [r3, #0]
  return result;
 80027d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027dc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80027e0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	461a      	mov	r2, r3
 80027f4:	2300      	movs	r3, #0
 80027f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe fe66 	bl	80014c8 <HAL_GetTick>
 80027fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002800:	e00c      	b.n	800281c <HAL_RCC_OscConfig+0xc70>
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe fe5e 	bl	80014c8 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e1fd      	b.n	8002c18 <HAL_RCC_OscConfig+0x106c>
 800281c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002820:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002824:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002828:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	fa93 f2a3 	rbit	r2, r3
 8002838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002840:	601a      	str	r2, [r3, #0]
  return result;
 8002842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002846:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800284a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800284c:	fab3 f383 	clz	r3, r3
 8002850:	b2db      	uxtb	r3, r3
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	b2db      	uxtb	r3, r3
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b01      	cmp	r3, #1
 800285e:	d102      	bne.n	8002866 <HAL_RCC_OscConfig+0xcba>
 8002860:	4bb0      	ldr	r3, [pc, #704]	; (8002b24 <HAL_RCC_OscConfig+0xf78>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	e027      	b.n	80028b6 <HAL_RCC_OscConfig+0xd0a>
 8002866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800286e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002872:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002878:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	fa93 f2a3 	rbit	r2, r3
 8002882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002886:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002890:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002894:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	fa93 f2a3 	rbit	r2, r3
 80028a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ac:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	4b9c      	ldr	r3, [pc, #624]	; (8002b24 <HAL_RCC_OscConfig+0xf78>)
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028ba:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80028be:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028c2:	6011      	str	r1, [r2, #0]
 80028c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028c8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	fa92 f1a2 	rbit	r1, r2
 80028d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028d6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80028da:	6011      	str	r1, [r2, #0]
  return result;
 80028dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028e0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	fab2 f282 	clz	r2, r2
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	f042 0220 	orr.w	r2, r2, #32
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	f002 021f 	and.w	r2, r2, #31
 80028f6:	2101      	movs	r1, #1
 80028f8:	fa01 f202 	lsl.w	r2, r1, r2
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d182      	bne.n	8002808 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002902:	4b88      	ldr	r3, [pc, #544]	; (8002b24 <HAL_RCC_OscConfig+0xf78>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800290a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	430b      	orrs	r3, r1
 8002924:	497f      	ldr	r1, [pc, #508]	; (8002b24 <HAL_RCC_OscConfig+0xf78>)
 8002926:	4313      	orrs	r3, r2
 8002928:	604b      	str	r3, [r1, #4]
 800292a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002932:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002936:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	fa93 f2a3 	rbit	r2, r3
 8002946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800294e:	601a      	str	r2, [r3, #0]
  return result;
 8002950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002954:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002958:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002964:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	461a      	mov	r2, r3
 800296c:	2301      	movs	r3, #1
 800296e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7fe fdaa 	bl	80014c8 <HAL_GetTick>
 8002974:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002978:	e009      	b.n	800298e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800297a:	f7fe fda5 	bl	80014c8 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e144      	b.n	8002c18 <HAL_RCC_OscConfig+0x106c>
 800298e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002992:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002996:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800299a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	fa93 f2a3 	rbit	r2, r3
 80029aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ae:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80029b2:	601a      	str	r2, [r3, #0]
  return result;
 80029b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80029bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	095b      	lsrs	r3, r3, #5
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d102      	bne.n	80029d8 <HAL_RCC_OscConfig+0xe2c>
 80029d2:	4b54      	ldr	r3, [pc, #336]	; (8002b24 <HAL_RCC_OscConfig+0xf78>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	e027      	b.n	8002a28 <HAL_RCC_OscConfig+0xe7c>
 80029d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029dc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80029e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ea:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	fa93 f2a3 	rbit	r2, r3
 80029f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a02:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002a06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a10:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	fa93 f2a3 	rbit	r2, r3
 8002a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	4b3f      	ldr	r3, [pc, #252]	; (8002b24 <HAL_RCC_OscConfig+0xf78>)
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a2c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002a30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a34:	6011      	str	r1, [r2, #0]
 8002a36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a3a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	fa92 f1a2 	rbit	r1, r2
 8002a44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a48:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a4c:	6011      	str	r1, [r2, #0]
  return result;
 8002a4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a52:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	fab2 f282 	clz	r2, r2
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	f042 0220 	orr.w	r2, r2, #32
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	f002 021f 	and.w	r2, r2, #31
 8002a68:	2101      	movs	r1, #1
 8002a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d082      	beq.n	800297a <HAL_RCC_OscConfig+0xdce>
 8002a74:	e0cf      	b.n	8002c16 <HAL_RCC_OscConfig+0x106a>
 8002a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a88:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	fa93 f2a3 	rbit	r2, r3
 8002a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a96:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a9a:	601a      	str	r2, [r3, #0]
  return result;
 8002a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002aa4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ab0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	2300      	movs	r3, #0
 8002aba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7fe fd04 	bl	80014c8 <HAL_GetTick>
 8002ac0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac4:	e009      	b.n	8002ada <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac6:	f7fe fcff 	bl	80014c8 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e09e      	b.n	8002c18 <HAL_RCC_OscConfig+0x106c>
 8002ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ade:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ae2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aec:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	fa93 f2a3 	rbit	r2, r3
 8002af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002afe:	601a      	str	r2, [r3, #0]
  return result;
 8002b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b04:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	095b      	lsrs	r3, r3, #5
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d104      	bne.n	8002b28 <HAL_RCC_OscConfig+0xf7c>
 8002b1e:	4b01      	ldr	r3, [pc, #4]	; (8002b24 <HAL_RCC_OscConfig+0xf78>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	e029      	b.n	8002b78 <HAL_RCC_OscConfig+0xfcc>
 8002b24:	40021000 	.word	0x40021000
 8002b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	fa93 f2a3 	rbit	r2, r3
 8002b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b48:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b52:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b60:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	fa93 f2a3 	rbit	r2, r3
 8002b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	4b2b      	ldr	r3, [pc, #172]	; (8002c24 <HAL_RCC_OscConfig+0x1078>)
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b7c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002b80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b84:	6011      	str	r1, [r2, #0]
 8002b86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b8a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	fa92 f1a2 	rbit	r1, r2
 8002b94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b98:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002b9c:	6011      	str	r1, [r2, #0]
  return result;
 8002b9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ba2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	fab2 f282 	clz	r2, r2
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	f042 0220 	orr.w	r2, r2, #32
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	f002 021f 	and.w	r2, r2, #31
 8002bb8:	2101      	movs	r1, #1
 8002bba:	fa01 f202 	lsl.w	r2, r1, r2
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d180      	bne.n	8002ac6 <HAL_RCC_OscConfig+0xf1a>
 8002bc4:	e027      	b.n	8002c16 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e01e      	b.n	8002c18 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bda:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <HAL_RCC_OscConfig+0x1078>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002be2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002be6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d10b      	bne.n	8002c12 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002bfa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bfe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d001      	beq.n	8002c16 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000

08002c28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b09e      	sub	sp, #120	; 0x78
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e162      	b.n	8002f06 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c40:	4b90      	ldr	r3, [pc, #576]	; (8002e84 <HAL_RCC_ClockConfig+0x25c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d910      	bls.n	8002c70 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4e:	4b8d      	ldr	r3, [pc, #564]	; (8002e84 <HAL_RCC_ClockConfig+0x25c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 0207 	bic.w	r2, r3, #7
 8002c56:	498b      	ldr	r1, [pc, #556]	; (8002e84 <HAL_RCC_ClockConfig+0x25c>)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5e:	4b89      	ldr	r3, [pc, #548]	; (8002e84 <HAL_RCC_ClockConfig+0x25c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d001      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e14a      	b.n	8002f06 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c7c:	4b82      	ldr	r3, [pc, #520]	; (8002e88 <HAL_RCC_ClockConfig+0x260>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	497f      	ldr	r1, [pc, #508]	; (8002e88 <HAL_RCC_ClockConfig+0x260>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 80dc 	beq.w	8002e54 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d13c      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xf6>
 8002ca4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb4:	fab3 f383 	clz	r3, r3
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d102      	bne.n	8002cce <HAL_RCC_ClockConfig+0xa6>
 8002cc8:	4b6f      	ldr	r3, [pc, #444]	; (8002e88 <HAL_RCC_ClockConfig+0x260>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	e00f      	b.n	8002cee <HAL_RCC_ClockConfig+0xc6>
 8002cce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cd2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	667b      	str	r3, [r7, #100]	; 0x64
 8002cdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ce0:	663b      	str	r3, [r7, #96]	; 0x60
 8002ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cea:	4b67      	ldr	r3, [pc, #412]	; (8002e88 <HAL_RCC_ClockConfig+0x260>)
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cf2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cf6:	fa92 f2a2 	rbit	r2, r2
 8002cfa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002cfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cfe:	fab2 f282 	clz	r2, r2
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	f042 0220 	orr.w	r2, r2, #32
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	f002 021f 	and.w	r2, r2, #31
 8002d0e:	2101      	movs	r1, #1
 8002d10:	fa01 f202 	lsl.w	r2, r1, r2
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d17b      	bne.n	8002e12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e0f3      	b.n	8002f06 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d13c      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x178>
 8002d26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d2a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d102      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x128>
 8002d4a:	4b4f      	ldr	r3, [pc, #316]	; (8002e88 <HAL_RCC_ClockConfig+0x260>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	e00f      	b.n	8002d70 <HAL_RCC_ClockConfig+0x148>
 8002d50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d54:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d62:	643b      	str	r3, [r7, #64]	; 0x40
 8002d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d6c:	4b46      	ldr	r3, [pc, #280]	; (8002e88 <HAL_RCC_ClockConfig+0x260>)
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d74:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d78:	fa92 f2a2 	rbit	r2, r2
 8002d7c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002d7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d80:	fab2 f282 	clz	r2, r2
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	f042 0220 	orr.w	r2, r2, #32
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	f002 021f 	and.w	r2, r2, #31
 8002d90:	2101      	movs	r1, #1
 8002d92:	fa01 f202 	lsl.w	r2, r1, r2
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d13a      	bne.n	8002e12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0b2      	b.n	8002f06 <HAL_RCC_ClockConfig+0x2de>
 8002da0:	2302      	movs	r3, #2
 8002da2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	095b      	lsrs	r3, r3, #5
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d102      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x1a0>
 8002dc2:	4b31      	ldr	r3, [pc, #196]	; (8002e88 <HAL_RCC_ClockConfig+0x260>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	e00d      	b.n	8002de4 <HAL_RCC_ClockConfig+0x1bc>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	623b      	str	r3, [r7, #32]
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	4b29      	ldr	r3, [pc, #164]	; (8002e88 <HAL_RCC_ClockConfig+0x260>)
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	2202      	movs	r2, #2
 8002de6:	61ba      	str	r2, [r7, #24]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	fa92 f2a2 	rbit	r2, r2
 8002dee:	617a      	str	r2, [r7, #20]
  return result;
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	fab2 f282 	clz	r2, r2
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	f042 0220 	orr.w	r2, r2, #32
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	f002 021f 	and.w	r2, r2, #31
 8002e02:	2101      	movs	r1, #1
 8002e04:	fa01 f202 	lsl.w	r2, r1, r2
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e079      	b.n	8002f06 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e12:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_RCC_ClockConfig+0x260>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f023 0203 	bic.w	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	491a      	ldr	r1, [pc, #104]	; (8002e88 <HAL_RCC_ClockConfig+0x260>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e24:	f7fe fb50 	bl	80014c8 <HAL_GetTick>
 8002e28:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2c:	f7fe fb4c 	bl	80014c8 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e061      	b.n	8002f06 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <HAL_RCC_ClockConfig+0x260>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 020c 	and.w	r2, r3, #12
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d1eb      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_RCC_ClockConfig+0x25c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d214      	bcs.n	8002e8c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <HAL_RCC_ClockConfig+0x25c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 0207 	bic.w	r2, r3, #7
 8002e6a:	4906      	ldr	r1, [pc, #24]	; (8002e84 <HAL_RCC_ClockConfig+0x25c>)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e72:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <HAL_RCC_ClockConfig+0x25c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d005      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e040      	b.n	8002f06 <HAL_RCC_ClockConfig+0x2de>
 8002e84:	40022000 	.word	0x40022000
 8002e88:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e98:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <HAL_RCC_ClockConfig+0x2e8>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	491a      	ldr	r1, [pc, #104]	; (8002f10 <HAL_RCC_ClockConfig+0x2e8>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d009      	beq.n	8002eca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eb6:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <HAL_RCC_ClockConfig+0x2e8>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4912      	ldr	r1, [pc, #72]	; (8002f10 <HAL_RCC_ClockConfig+0x2e8>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002eca:	f000 f829 	bl	8002f20 <HAL_RCC_GetSysClockFreq>
 8002ece:	4601      	mov	r1, r0
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <HAL_RCC_ClockConfig+0x2e8>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ed8:	22f0      	movs	r2, #240	; 0xf0
 8002eda:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	fa92 f2a2 	rbit	r2, r2
 8002ee2:	60fa      	str	r2, [r7, #12]
  return result;
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	fab2 f282 	clz	r2, r2
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	40d3      	lsrs	r3, r2
 8002eee:	4a09      	ldr	r2, [pc, #36]	; (8002f14 <HAL_RCC_ClockConfig+0x2ec>)
 8002ef0:	5cd3      	ldrb	r3, [r2, r3]
 8002ef2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ef6:	4a08      	ldr	r2, [pc, #32]	; (8002f18 <HAL_RCC_ClockConfig+0x2f0>)
 8002ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002efa:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <HAL_RCC_ClockConfig+0x2f4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fa9e 	bl	8001440 <HAL_InitTick>
  
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3778      	adds	r7, #120	; 0x78
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000
 8002f14:	08007a84 	.word	0x08007a84
 8002f18:	20000000 	.word	0x20000000
 8002f1c:	20000004 	.word	0x20000004

08002f20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b08b      	sub	sp, #44	; 0x2c
 8002f24:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002f3a:	4b29      	ldr	r3, [pc, #164]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d002      	beq.n	8002f50 <HAL_RCC_GetSysClockFreq+0x30>
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d003      	beq.n	8002f56 <HAL_RCC_GetSysClockFreq+0x36>
 8002f4e:	e03c      	b.n	8002fca <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f50:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f52:	623b      	str	r3, [r7, #32]
      break;
 8002f54:	e03c      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f5c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002f60:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	fa92 f2a2 	rbit	r2, r2
 8002f68:	607a      	str	r2, [r7, #4]
  return result;
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	fab2 f282 	clz	r2, r2
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	40d3      	lsrs	r3, r2
 8002f74:	4a1c      	ldr	r2, [pc, #112]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f76:	5cd3      	ldrb	r3, [r2, r3]
 8002f78:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f7a:	4b19      	ldr	r3, [pc, #100]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	220f      	movs	r2, #15
 8002f84:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	fa92 f2a2 	rbit	r2, r2
 8002f8c:	60fa      	str	r2, [r7, #12]
  return result;
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	fab2 f282 	clz	r2, r2
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	40d3      	lsrs	r3, r2
 8002f98:	4a14      	ldr	r2, [pc, #80]	; (8002fec <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f9a:	5cd3      	ldrb	r3, [r2, r3]
 8002f9c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fa8:	4a0e      	ldr	r2, [pc, #56]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	fb02 f303 	mul.w	r3, r2, r3
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb8:	e004      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	4a0c      	ldr	r2, [pc, #48]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fbe:	fb02 f303 	mul.w	r3, r2, r3
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	623b      	str	r3, [r7, #32]
      break;
 8002fc8:	e002      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fcc:	623b      	str	r3, [r7, #32]
      break;
 8002fce:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	372c      	adds	r7, #44	; 0x2c
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	007a1200 	.word	0x007a1200
 8002fe8:	08007a9c 	.word	0x08007a9c
 8002fec:	08007aac 	.word	0x08007aac
 8002ff0:	003d0900 	.word	0x003d0900

08002ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ff8:	4b03      	ldr	r3, [pc, #12]	; (8003008 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	20000000 	.word	0x20000000

0800300c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003012:	f7ff ffef 	bl	8002ff4 <HAL_RCC_GetHCLKFreq>
 8003016:	4601      	mov	r1, r0
 8003018:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003020:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003024:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	fa92 f2a2 	rbit	r2, r2
 800302c:	603a      	str	r2, [r7, #0]
  return result;
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	fab2 f282 	clz	r2, r2
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	40d3      	lsrs	r3, r2
 8003038:	4a04      	ldr	r2, [pc, #16]	; (800304c <HAL_RCC_GetPCLK1Freq+0x40>)
 800303a:	5cd3      	ldrb	r3, [r2, r3]
 800303c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40021000 	.word	0x40021000
 800304c:	08007a94 	.word	0x08007a94

08003050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003056:	f7ff ffcd 	bl	8002ff4 <HAL_RCC_GetHCLKFreq>
 800305a:	4601      	mov	r1, r0
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003064:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003068:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	fa92 f2a2 	rbit	r2, r2
 8003070:	603a      	str	r2, [r7, #0]
  return result;
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	fab2 f282 	clz	r2, r2
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	40d3      	lsrs	r3, r2
 800307c:	4a04      	ldr	r2, [pc, #16]	; (8003090 <HAL_RCC_GetPCLK2Freq+0x40>)
 800307e:	5cd3      	ldrb	r3, [r2, r3]
 8003080:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40021000 	.word	0x40021000
 8003090:	08007a94 	.word	0x08007a94

08003094 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b092      	sub	sp, #72	; 0x48
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80030a4:	2300      	movs	r3, #0
 80030a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 80cd 	beq.w	8003252 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b8:	4b86      	ldr	r3, [pc, #536]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10e      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c4:	4b83      	ldr	r3, [pc, #524]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	4a82      	ldr	r2, [pc, #520]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ce:	61d3      	str	r3, [r2, #28]
 80030d0:	4b80      	ldr	r3, [pc, #512]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030dc:	2301      	movs	r3, #1
 80030de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e2:	4b7d      	ldr	r3, [pc, #500]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d118      	bne.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ee:	4b7a      	ldr	r3, [pc, #488]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a79      	ldr	r2, [pc, #484]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80030f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030fa:	f7fe f9e5 	bl	80014c8 <HAL_GetTick>
 80030fe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003100:	e008      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003102:	f7fe f9e1 	bl	80014c8 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b64      	cmp	r3, #100	; 0x64
 800310e:	d901      	bls.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e0db      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003114:	4b70      	ldr	r3, [pc, #448]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003120:	4b6c      	ldr	r3, [pc, #432]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003128:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800312a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800312c:	2b00      	cmp	r3, #0
 800312e:	d07d      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003138:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800313a:	429a      	cmp	r2, r3
 800313c:	d076      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800313e:	4b65      	ldr	r3, [pc, #404]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003148:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800314c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003150:	fa93 f3a3 	rbit	r3, r3
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003158:	fab3 f383 	clz	r3, r3
 800315c:	b2db      	uxtb	r3, r3
 800315e:	461a      	mov	r2, r3
 8003160:	4b5e      	ldr	r3, [pc, #376]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	461a      	mov	r2, r3
 8003168:	2301      	movs	r3, #1
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003170:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003174:	fa93 f3a3 	rbit	r3, r3
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800317a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800317c:	fab3 f383 	clz	r3, r3
 8003180:	b2db      	uxtb	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	4b55      	ldr	r3, [pc, #340]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	461a      	mov	r2, r3
 800318c:	2300      	movs	r3, #0
 800318e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003190:	4a50      	ldr	r2, [pc, #320]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003194:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d045      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a0:	f7fe f992 	bl	80014c8 <HAL_GetTick>
 80031a4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a6:	e00a      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a8:	f7fe f98e 	bl	80014c8 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e086      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80031be:	2302      	movs	r3, #2
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c4:	fa93 f3a3 	rbit	r3, r3
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ca:	2302      	movs	r3, #2
 80031cc:	623b      	str	r3, [r7, #32]
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	fa93 f3a3 	rbit	r3, r3
 80031d4:	61fb      	str	r3, [r7, #28]
  return result;
 80031d6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d8:	fab3 f383 	clz	r3, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	f043 0302 	orr.w	r3, r3, #2
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d102      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80031ec:	4b39      	ldr	r3, [pc, #228]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	e007      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80031f2:	2302      	movs	r3, #2
 80031f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	4b35      	ldr	r3, [pc, #212]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	2202      	movs	r2, #2
 8003204:	613a      	str	r2, [r7, #16]
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	fa92 f2a2 	rbit	r2, r2
 800320c:	60fa      	str	r2, [r7, #12]
  return result;
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	fab2 f282 	clz	r2, r2
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	f002 021f 	and.w	r2, r2, #31
 8003220:	2101      	movs	r1, #1
 8003222:	fa01 f202 	lsl.w	r2, r1, r2
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0bd      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800322c:	4b29      	ldr	r3, [pc, #164]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	4926      	ldr	r1, [pc, #152]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800323a:	4313      	orrs	r3, r2
 800323c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800323e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003242:	2b01      	cmp	r3, #1
 8003244:	d105      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003246:	4b23      	ldr	r3, [pc, #140]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	4a22      	ldr	r2, [pc, #136]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800324c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003250:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d008      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800325e:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f023 0203 	bic.w	r2, r3, #3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	491a      	ldr	r1, [pc, #104]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800326c:	4313      	orrs	r3, r2
 800326e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0320 	and.w	r3, r3, #32
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800327c:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	f023 0210 	bic.w	r2, r3, #16
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4912      	ldr	r1, [pc, #72]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800328a:	4313      	orrs	r3, r2
 800328c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800329a:	4b0e      	ldr	r3, [pc, #56]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	490b      	ldr	r1, [pc, #44]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	4903      	ldr	r1, [pc, #12]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3748      	adds	r7, #72	; 0x48
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40007000 	.word	0x40007000
 80032dc:	10908100 	.word	0x10908100

080032e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e049      	b.n	8003386 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fd fed6 	bl	80010b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3304      	adds	r3, #4
 800331c:	4619      	mov	r1, r3
 800331e:	4610      	mov	r0, r2
 8003320:	f000 fc5c 	bl	8003bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e049      	b.n	8003434 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d106      	bne.n	80033ba <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f841 	bl	800343c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2202      	movs	r2, #2
 80033be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3304      	adds	r3, #4
 80033ca:	4619      	mov	r1, r3
 80033cc:	4610      	mov	r0, r2
 80033ce:	f000 fc05 	bl	8003bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d109      	bne.n	8003478 <HAL_TIM_OC_Start_IT+0x28>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	bf14      	ite	ne
 8003470:	2301      	movne	r3, #1
 8003472:	2300      	moveq	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	e03c      	b.n	80034f2 <HAL_TIM_OC_Start_IT+0xa2>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2b04      	cmp	r3, #4
 800347c:	d109      	bne.n	8003492 <HAL_TIM_OC_Start_IT+0x42>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b01      	cmp	r3, #1
 8003488:	bf14      	ite	ne
 800348a:	2301      	movne	r3, #1
 800348c:	2300      	moveq	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	e02f      	b.n	80034f2 <HAL_TIM_OC_Start_IT+0xa2>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b08      	cmp	r3, #8
 8003496:	d109      	bne.n	80034ac <HAL_TIM_OC_Start_IT+0x5c>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	bf14      	ite	ne
 80034a4:	2301      	movne	r3, #1
 80034a6:	2300      	moveq	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e022      	b.n	80034f2 <HAL_TIM_OC_Start_IT+0xa2>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d109      	bne.n	80034c6 <HAL_TIM_OC_Start_IT+0x76>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	bf14      	ite	ne
 80034be:	2301      	movne	r3, #1
 80034c0:	2300      	moveq	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	e015      	b.n	80034f2 <HAL_TIM_OC_Start_IT+0xa2>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b10      	cmp	r3, #16
 80034ca:	d109      	bne.n	80034e0 <HAL_TIM_OC_Start_IT+0x90>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	bf14      	ite	ne
 80034d8:	2301      	movne	r3, #1
 80034da:	2300      	moveq	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	e008      	b.n	80034f2 <HAL_TIM_OC_Start_IT+0xa2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	bf14      	ite	ne
 80034ec:	2301      	movne	r3, #1
 80034ee:	2300      	moveq	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e0d3      	b.n	80036a2 <HAL_TIM_OC_Start_IT+0x252>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d104      	bne.n	800350a <HAL_TIM_OC_Start_IT+0xba>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003508:	e023      	b.n	8003552 <HAL_TIM_OC_Start_IT+0x102>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b04      	cmp	r3, #4
 800350e:	d104      	bne.n	800351a <HAL_TIM_OC_Start_IT+0xca>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003518:	e01b      	b.n	8003552 <HAL_TIM_OC_Start_IT+0x102>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d104      	bne.n	800352a <HAL_TIM_OC_Start_IT+0xda>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003528:	e013      	b.n	8003552 <HAL_TIM_OC_Start_IT+0x102>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b0c      	cmp	r3, #12
 800352e:	d104      	bne.n	800353a <HAL_TIM_OC_Start_IT+0xea>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003538:	e00b      	b.n	8003552 <HAL_TIM_OC_Start_IT+0x102>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b10      	cmp	r3, #16
 800353e:	d104      	bne.n	800354a <HAL_TIM_OC_Start_IT+0xfa>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003548:	e003      	b.n	8003552 <HAL_TIM_OC_Start_IT+0x102>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2202      	movs	r2, #2
 800354e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b0c      	cmp	r3, #12
 8003556:	d841      	bhi.n	80035dc <HAL_TIM_OC_Start_IT+0x18c>
 8003558:	a201      	add	r2, pc, #4	; (adr r2, 8003560 <HAL_TIM_OC_Start_IT+0x110>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	08003595 	.word	0x08003595
 8003564:	080035dd 	.word	0x080035dd
 8003568:	080035dd 	.word	0x080035dd
 800356c:	080035dd 	.word	0x080035dd
 8003570:	080035a7 	.word	0x080035a7
 8003574:	080035dd 	.word	0x080035dd
 8003578:	080035dd 	.word	0x080035dd
 800357c:	080035dd 	.word	0x080035dd
 8003580:	080035b9 	.word	0x080035b9
 8003584:	080035dd 	.word	0x080035dd
 8003588:	080035dd 	.word	0x080035dd
 800358c:	080035dd 	.word	0x080035dd
 8003590:	080035cb 	.word	0x080035cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0202 	orr.w	r2, r2, #2
 80035a2:	60da      	str	r2, [r3, #12]
      break;
 80035a4:	e01d      	b.n	80035e2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0204 	orr.w	r2, r2, #4
 80035b4:	60da      	str	r2, [r3, #12]
      break;
 80035b6:	e014      	b.n	80035e2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0208 	orr.w	r2, r2, #8
 80035c6:	60da      	str	r2, [r3, #12]
      break;
 80035c8:	e00b      	b.n	80035e2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 0210 	orr.w	r2, r2, #16
 80035d8:	60da      	str	r2, [r3, #12]
      break;
 80035da:	e002      	b.n	80035e2 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
      break;
 80035e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d15b      	bne.n	80036a0 <HAL_TIM_OC_Start_IT+0x250>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2201      	movs	r2, #1
 80035ee:	6839      	ldr	r1, [r7, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 feab 	bl	800434c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a2c      	ldr	r2, [pc, #176]	; (80036ac <HAL_TIM_OC_Start_IT+0x25c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00e      	beq.n	800361e <HAL_TIM_OC_Start_IT+0x1ce>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a2a      	ldr	r2, [pc, #168]	; (80036b0 <HAL_TIM_OC_Start_IT+0x260>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d009      	beq.n	800361e <HAL_TIM_OC_Start_IT+0x1ce>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a29      	ldr	r2, [pc, #164]	; (80036b4 <HAL_TIM_OC_Start_IT+0x264>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d004      	beq.n	800361e <HAL_TIM_OC_Start_IT+0x1ce>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a27      	ldr	r2, [pc, #156]	; (80036b8 <HAL_TIM_OC_Start_IT+0x268>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_TIM_OC_Start_IT+0x1d2>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_TIM_OC_Start_IT+0x1d4>
 8003622:	2300      	movs	r3, #0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <HAL_TIM_OC_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003636:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1b      	ldr	r2, [pc, #108]	; (80036ac <HAL_TIM_OC_Start_IT+0x25c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00e      	beq.n	8003660 <HAL_TIM_OC_Start_IT+0x210>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364a:	d009      	beq.n	8003660 <HAL_TIM_OC_Start_IT+0x210>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a1a      	ldr	r2, [pc, #104]	; (80036bc <HAL_TIM_OC_Start_IT+0x26c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d004      	beq.n	8003660 <HAL_TIM_OC_Start_IT+0x210>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a15      	ldr	r2, [pc, #84]	; (80036b0 <HAL_TIM_OC_Start_IT+0x260>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d115      	bne.n	800368c <HAL_TIM_OC_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	4b16      	ldr	r3, [pc, #88]	; (80036c0 <HAL_TIM_OC_Start_IT+0x270>)
 8003668:	4013      	ands	r3, r2
 800366a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b06      	cmp	r3, #6
 8003670:	d015      	beq.n	800369e <HAL_TIM_OC_Start_IT+0x24e>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003678:	d011      	beq.n	800369e <HAL_TIM_OC_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0201 	orr.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368a:	e008      	b.n	800369e <HAL_TIM_OC_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	e000      	b.n	80036a0 <HAL_TIM_OC_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800369e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40012c00 	.word	0x40012c00
 80036b0:	40014000 	.word	0x40014000
 80036b4:	40014400 	.word	0x40014400
 80036b8:	40014800 	.word	0x40014800
 80036bc:	40000400 	.word	0x40000400
 80036c0:	00010007 	.word	0x00010007

080036c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d122      	bne.n	8003720 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d11b      	bne.n	8003720 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0202 	mvn.w	r2, #2
 80036f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fa49 	bl	8003b9e <HAL_TIM_IC_CaptureCallback>
 800370c:	e005      	b.n	800371a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fc ff80 	bl	8000614 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 fa4c 	bl	8003bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b04      	cmp	r3, #4
 800372c:	d122      	bne.n	8003774 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b04      	cmp	r3, #4
 800373a:	d11b      	bne.n	8003774 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0204 	mvn.w	r2, #4
 8003744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2202      	movs	r2, #2
 800374a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fa1f 	bl	8003b9e <HAL_TIM_IC_CaptureCallback>
 8003760:	e005      	b.n	800376e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fc ff56 	bl	8000614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 fa22 	bl	8003bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b08      	cmp	r3, #8
 8003780:	d122      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b08      	cmp	r3, #8
 800378e:	d11b      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0208 	mvn.w	r2, #8
 8003798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2204      	movs	r2, #4
 800379e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f9f5 	bl	8003b9e <HAL_TIM_IC_CaptureCallback>
 80037b4:	e005      	b.n	80037c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fc ff2c 	bl	8000614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f9f8 	bl	8003bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	2b10      	cmp	r3, #16
 80037d4:	d122      	bne.n	800381c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	2b10      	cmp	r3, #16
 80037e2:	d11b      	bne.n	800381c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0210 	mvn.w	r2, #16
 80037ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2208      	movs	r2, #8
 80037f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f9cb 	bl	8003b9e <HAL_TIM_IC_CaptureCallback>
 8003808:	e005      	b.n	8003816 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fc ff02 	bl	8000614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f9ce 	bl	8003bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b01      	cmp	r3, #1
 8003828:	d10e      	bne.n	8003848 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b01      	cmp	r3, #1
 8003836:	d107      	bne.n	8003848 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0201 	mvn.w	r2, #1
 8003840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f9a1 	bl	8003b8a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003852:	2b80      	cmp	r3, #128	; 0x80
 8003854:	d10e      	bne.n	8003874 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003860:	2b80      	cmp	r3, #128	; 0x80
 8003862:	d107      	bne.n	8003874 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800386c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fe0a 	bl	8004488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003882:	d10e      	bne.n	80038a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388e:	2b80      	cmp	r3, #128	; 0x80
 8003890:	d107      	bne.n	80038a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800389a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 fdfd 	bl	800449c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d10e      	bne.n	80038ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b40      	cmp	r3, #64	; 0x40
 80038bc:	d107      	bne.n	80038ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f97c 	bl	8003bc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d10e      	bne.n	80038fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d107      	bne.n	80038fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f06f 0220 	mvn.w	r2, #32
 80038f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fdbd 	bl	8004474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_TIM_OC_ConfigChannel+0x1e>
 800391e:	2302      	movs	r3, #2
 8003920:	e066      	b.n	80039f0 <HAL_TIM_OC_ConfigChannel+0xec>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b14      	cmp	r3, #20
 800392e:	d857      	bhi.n	80039e0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003930:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003936:	bf00      	nop
 8003938:	0800398d 	.word	0x0800398d
 800393c:	080039e1 	.word	0x080039e1
 8003940:	080039e1 	.word	0x080039e1
 8003944:	080039e1 	.word	0x080039e1
 8003948:	0800399b 	.word	0x0800399b
 800394c:	080039e1 	.word	0x080039e1
 8003950:	080039e1 	.word	0x080039e1
 8003954:	080039e1 	.word	0x080039e1
 8003958:	080039a9 	.word	0x080039a9
 800395c:	080039e1 	.word	0x080039e1
 8003960:	080039e1 	.word	0x080039e1
 8003964:	080039e1 	.word	0x080039e1
 8003968:	080039b7 	.word	0x080039b7
 800396c:	080039e1 	.word	0x080039e1
 8003970:	080039e1 	.word	0x080039e1
 8003974:	080039e1 	.word	0x080039e1
 8003978:	080039c5 	.word	0x080039c5
 800397c:	080039e1 	.word	0x080039e1
 8003980:	080039e1 	.word	0x080039e1
 8003984:	080039e1 	.word	0x080039e1
 8003988:	080039d3 	.word	0x080039d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	4618      	mov	r0, r3
 8003994:	f000 f99a 	bl	8003ccc <TIM_OC1_SetConfig>
      break;
 8003998:	e025      	b.n	80039e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fa19 	bl	8003dd8 <TIM_OC2_SetConfig>
      break;
 80039a6:	e01e      	b.n	80039e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fa92 	bl	8003ed8 <TIM_OC3_SetConfig>
      break;
 80039b4:	e017      	b.n	80039e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68b9      	ldr	r1, [r7, #8]
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 fb09 	bl	8003fd4 <TIM_OC4_SetConfig>
      break;
 80039c2:	e010      	b.n	80039e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fb66 	bl	800409c <TIM_OC5_SetConfig>
      break;
 80039d0:	e009      	b.n	80039e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68b9      	ldr	r1, [r7, #8]
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 fbbd 	bl	8004158 <TIM_OC6_SetConfig>
      break;
 80039de:	e002      	b.n	80039e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	75fb      	strb	r3, [r7, #23]
      break;
 80039e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_TIM_ConfigClockSource+0x1c>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e0b6      	b.n	8003b82 <HAL_TIM_ConfigClockSource+0x18a>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a50:	d03e      	beq.n	8003ad0 <HAL_TIM_ConfigClockSource+0xd8>
 8003a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a56:	f200 8087 	bhi.w	8003b68 <HAL_TIM_ConfigClockSource+0x170>
 8003a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5e:	f000 8086 	beq.w	8003b6e <HAL_TIM_ConfigClockSource+0x176>
 8003a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a66:	d87f      	bhi.n	8003b68 <HAL_TIM_ConfigClockSource+0x170>
 8003a68:	2b70      	cmp	r3, #112	; 0x70
 8003a6a:	d01a      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0xaa>
 8003a6c:	2b70      	cmp	r3, #112	; 0x70
 8003a6e:	d87b      	bhi.n	8003b68 <HAL_TIM_ConfigClockSource+0x170>
 8003a70:	2b60      	cmp	r3, #96	; 0x60
 8003a72:	d050      	beq.n	8003b16 <HAL_TIM_ConfigClockSource+0x11e>
 8003a74:	2b60      	cmp	r3, #96	; 0x60
 8003a76:	d877      	bhi.n	8003b68 <HAL_TIM_ConfigClockSource+0x170>
 8003a78:	2b50      	cmp	r3, #80	; 0x50
 8003a7a:	d03c      	beq.n	8003af6 <HAL_TIM_ConfigClockSource+0xfe>
 8003a7c:	2b50      	cmp	r3, #80	; 0x50
 8003a7e:	d873      	bhi.n	8003b68 <HAL_TIM_ConfigClockSource+0x170>
 8003a80:	2b40      	cmp	r3, #64	; 0x40
 8003a82:	d058      	beq.n	8003b36 <HAL_TIM_ConfigClockSource+0x13e>
 8003a84:	2b40      	cmp	r3, #64	; 0x40
 8003a86:	d86f      	bhi.n	8003b68 <HAL_TIM_ConfigClockSource+0x170>
 8003a88:	2b30      	cmp	r3, #48	; 0x30
 8003a8a:	d064      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0x15e>
 8003a8c:	2b30      	cmp	r3, #48	; 0x30
 8003a8e:	d86b      	bhi.n	8003b68 <HAL_TIM_ConfigClockSource+0x170>
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	d060      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0x15e>
 8003a94:	2b20      	cmp	r3, #32
 8003a96:	d867      	bhi.n	8003b68 <HAL_TIM_ConfigClockSource+0x170>
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d05c      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0x15e>
 8003a9c:	2b10      	cmp	r3, #16
 8003a9e:	d05a      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0x15e>
 8003aa0:	e062      	b.n	8003b68 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6899      	ldr	r1, [r3, #8]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f000 fc2b 	bl	800430c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ac4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	609a      	str	r2, [r3, #8]
      break;
 8003ace:	e04f      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	6899      	ldr	r1, [r3, #8]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f000 fc14 	bl	800430c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003af2:	609a      	str	r2, [r3, #8]
      break;
 8003af4:	e03c      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	6859      	ldr	r1, [r3, #4]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	461a      	mov	r2, r3
 8003b04:	f000 fb88 	bl	8004218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2150      	movs	r1, #80	; 0x50
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fbe1 	bl	80042d6 <TIM_ITRx_SetConfig>
      break;
 8003b14:	e02c      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6818      	ldr	r0, [r3, #0]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6859      	ldr	r1, [r3, #4]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	461a      	mov	r2, r3
 8003b24:	f000 fba7 	bl	8004276 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2160      	movs	r1, #96	; 0x60
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fbd1 	bl	80042d6 <TIM_ITRx_SetConfig>
      break;
 8003b34:	e01c      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6859      	ldr	r1, [r3, #4]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f000 fb68 	bl	8004218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2140      	movs	r1, #64	; 0x40
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fbc1 	bl	80042d6 <TIM_ITRx_SetConfig>
      break;
 8003b54:	e00c      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4610      	mov	r0, r2
 8003b62:	f000 fbb8 	bl	80042d6 <TIM_ITRx_SetConfig>
      break;
 8003b66:	e003      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b6c:	e000      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003b6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a32      	ldr	r2, [pc, #200]	; (8003cb8 <TIM_Base_SetConfig+0xdc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d007      	beq.n	8003c04 <TIM_Base_SetConfig+0x28>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfa:	d003      	beq.n	8003c04 <TIM_Base_SetConfig+0x28>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a2f      	ldr	r2, [pc, #188]	; (8003cbc <TIM_Base_SetConfig+0xe0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d108      	bne.n	8003c16 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a27      	ldr	r2, [pc, #156]	; (8003cb8 <TIM_Base_SetConfig+0xdc>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d013      	beq.n	8003c46 <TIM_Base_SetConfig+0x6a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c24:	d00f      	beq.n	8003c46 <TIM_Base_SetConfig+0x6a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a24      	ldr	r2, [pc, #144]	; (8003cbc <TIM_Base_SetConfig+0xe0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00b      	beq.n	8003c46 <TIM_Base_SetConfig+0x6a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a23      	ldr	r2, [pc, #140]	; (8003cc0 <TIM_Base_SetConfig+0xe4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d007      	beq.n	8003c46 <TIM_Base_SetConfig+0x6a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a22      	ldr	r2, [pc, #136]	; (8003cc4 <TIM_Base_SetConfig+0xe8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d003      	beq.n	8003c46 <TIM_Base_SetConfig+0x6a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a21      	ldr	r2, [pc, #132]	; (8003cc8 <TIM_Base_SetConfig+0xec>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d108      	bne.n	8003c58 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a0e      	ldr	r2, [pc, #56]	; (8003cb8 <TIM_Base_SetConfig+0xdc>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00b      	beq.n	8003c9c <TIM_Base_SetConfig+0xc0>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a0e      	ldr	r2, [pc, #56]	; (8003cc0 <TIM_Base_SetConfig+0xe4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d007      	beq.n	8003c9c <TIM_Base_SetConfig+0xc0>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a0d      	ldr	r2, [pc, #52]	; (8003cc4 <TIM_Base_SetConfig+0xe8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d003      	beq.n	8003c9c <TIM_Base_SetConfig+0xc0>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a0c      	ldr	r2, [pc, #48]	; (8003cc8 <TIM_Base_SetConfig+0xec>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d103      	bne.n	8003ca4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	615a      	str	r2, [r3, #20]
}
 8003caa:	bf00      	nop
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40012c00 	.word	0x40012c00
 8003cbc:	40000400 	.word	0x40000400
 8003cc0:	40014000 	.word	0x40014000
 8003cc4:	40014400 	.word	0x40014400
 8003cc8:	40014800 	.word	0x40014800

08003ccc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	f023 0201 	bic.w	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0303 	bic.w	r3, r3, #3
 8003d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f023 0302 	bic.w	r3, r3, #2
 8003d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a28      	ldr	r2, [pc, #160]	; (8003dc8 <TIM_OC1_SetConfig+0xfc>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00b      	beq.n	8003d44 <TIM_OC1_SetConfig+0x78>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a27      	ldr	r2, [pc, #156]	; (8003dcc <TIM_OC1_SetConfig+0x100>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d007      	beq.n	8003d44 <TIM_OC1_SetConfig+0x78>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a26      	ldr	r2, [pc, #152]	; (8003dd0 <TIM_OC1_SetConfig+0x104>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d003      	beq.n	8003d44 <TIM_OC1_SetConfig+0x78>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a25      	ldr	r2, [pc, #148]	; (8003dd4 <TIM_OC1_SetConfig+0x108>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d10c      	bne.n	8003d5e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f023 0308 	bic.w	r3, r3, #8
 8003d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f023 0304 	bic.w	r3, r3, #4
 8003d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a19      	ldr	r2, [pc, #100]	; (8003dc8 <TIM_OC1_SetConfig+0xfc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d00b      	beq.n	8003d7e <TIM_OC1_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a18      	ldr	r2, [pc, #96]	; (8003dcc <TIM_OC1_SetConfig+0x100>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d007      	beq.n	8003d7e <TIM_OC1_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a17      	ldr	r2, [pc, #92]	; (8003dd0 <TIM_OC1_SetConfig+0x104>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d003      	beq.n	8003d7e <TIM_OC1_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a16      	ldr	r2, [pc, #88]	; (8003dd4 <TIM_OC1_SetConfig+0x108>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d111      	bne.n	8003da2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	621a      	str	r2, [r3, #32]
}
 8003dbc:	bf00      	nop
 8003dbe:	371c      	adds	r7, #28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	40012c00 	.word	0x40012c00
 8003dcc:	40014000 	.word	0x40014000
 8003dd0:	40014400 	.word	0x40014400
 8003dd4:	40014800 	.word	0x40014800

08003dd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	f023 0210 	bic.w	r2, r3, #16
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f023 0320 	bic.w	r3, r3, #32
 8003e26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a24      	ldr	r2, [pc, #144]	; (8003ec8 <TIM_OC2_SetConfig+0xf0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d10d      	bne.n	8003e58 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a1b      	ldr	r2, [pc, #108]	; (8003ec8 <TIM_OC2_SetConfig+0xf0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00b      	beq.n	8003e78 <TIM_OC2_SetConfig+0xa0>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a1a      	ldr	r2, [pc, #104]	; (8003ecc <TIM_OC2_SetConfig+0xf4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d007      	beq.n	8003e78 <TIM_OC2_SetConfig+0xa0>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a19      	ldr	r2, [pc, #100]	; (8003ed0 <TIM_OC2_SetConfig+0xf8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d003      	beq.n	8003e78 <TIM_OC2_SetConfig+0xa0>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a18      	ldr	r2, [pc, #96]	; (8003ed4 <TIM_OC2_SetConfig+0xfc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d113      	bne.n	8003ea0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e7e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e86:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	621a      	str	r2, [r3, #32]
}
 8003eba:	bf00      	nop
 8003ebc:	371c      	adds	r7, #28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	40012c00 	.word	0x40012c00
 8003ecc:	40014000 	.word	0x40014000
 8003ed0:	40014400 	.word	0x40014400
 8003ed4:	40014800 	.word	0x40014800

08003ed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0303 	bic.w	r3, r3, #3
 8003f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	021b      	lsls	r3, r3, #8
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a23      	ldr	r2, [pc, #140]	; (8003fc4 <TIM_OC3_SetConfig+0xec>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d10d      	bne.n	8003f56 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	021b      	lsls	r3, r3, #8
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f54:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a1a      	ldr	r2, [pc, #104]	; (8003fc4 <TIM_OC3_SetConfig+0xec>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d00b      	beq.n	8003f76 <TIM_OC3_SetConfig+0x9e>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a19      	ldr	r2, [pc, #100]	; (8003fc8 <TIM_OC3_SetConfig+0xf0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d007      	beq.n	8003f76 <TIM_OC3_SetConfig+0x9e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a18      	ldr	r2, [pc, #96]	; (8003fcc <TIM_OC3_SetConfig+0xf4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d003      	beq.n	8003f76 <TIM_OC3_SetConfig+0x9e>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a17      	ldr	r2, [pc, #92]	; (8003fd0 <TIM_OC3_SetConfig+0xf8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d113      	bne.n	8003f9e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	621a      	str	r2, [r3, #32]
}
 8003fb8:	bf00      	nop
 8003fba:	371c      	adds	r7, #28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	40012c00 	.word	0x40012c00
 8003fc8:	40014000 	.word	0x40014000
 8003fcc:	40014400 	.word	0x40014400
 8003fd0:	40014800 	.word	0x40014800

08003fd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800400e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004022:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	031b      	lsls	r3, r3, #12
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a16      	ldr	r2, [pc, #88]	; (800408c <TIM_OC4_SetConfig+0xb8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d00b      	beq.n	8004050 <TIM_OC4_SetConfig+0x7c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a15      	ldr	r2, [pc, #84]	; (8004090 <TIM_OC4_SetConfig+0xbc>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d007      	beq.n	8004050 <TIM_OC4_SetConfig+0x7c>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a14      	ldr	r2, [pc, #80]	; (8004094 <TIM_OC4_SetConfig+0xc0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d003      	beq.n	8004050 <TIM_OC4_SetConfig+0x7c>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a13      	ldr	r2, [pc, #76]	; (8004098 <TIM_OC4_SetConfig+0xc4>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d109      	bne.n	8004064 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004056:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	019b      	lsls	r3, r3, #6
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	621a      	str	r2, [r3, #32]
}
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40012c00 	.word	0x40012c00
 8004090:	40014000 	.word	0x40014000
 8004094:	40014400 	.word	0x40014400
 8004098:	40014800 	.word	0x40014800

0800409c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80040e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	041b      	lsls	r3, r3, #16
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a15      	ldr	r2, [pc, #84]	; (8004148 <TIM_OC5_SetConfig+0xac>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00b      	beq.n	800410e <TIM_OC5_SetConfig+0x72>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a14      	ldr	r2, [pc, #80]	; (800414c <TIM_OC5_SetConfig+0xb0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d007      	beq.n	800410e <TIM_OC5_SetConfig+0x72>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a13      	ldr	r2, [pc, #76]	; (8004150 <TIM_OC5_SetConfig+0xb4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d003      	beq.n	800410e <TIM_OC5_SetConfig+0x72>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a12      	ldr	r2, [pc, #72]	; (8004154 <TIM_OC5_SetConfig+0xb8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d109      	bne.n	8004122 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004114:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	021b      	lsls	r3, r3, #8
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	621a      	str	r2, [r3, #32]
}
 800413c:	bf00      	nop
 800413e:	371c      	adds	r7, #28
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	40012c00 	.word	0x40012c00
 800414c:	40014000 	.word	0x40014000
 8004150:	40014400 	.word	0x40014400
 8004154:	40014800 	.word	0x40014800

08004158 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800419e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	051b      	lsls	r3, r3, #20
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a16      	ldr	r2, [pc, #88]	; (8004208 <TIM_OC6_SetConfig+0xb0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00b      	beq.n	80041cc <TIM_OC6_SetConfig+0x74>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a15      	ldr	r2, [pc, #84]	; (800420c <TIM_OC6_SetConfig+0xb4>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d007      	beq.n	80041cc <TIM_OC6_SetConfig+0x74>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a14      	ldr	r2, [pc, #80]	; (8004210 <TIM_OC6_SetConfig+0xb8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_OC6_SetConfig+0x74>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a13      	ldr	r2, [pc, #76]	; (8004214 <TIM_OC6_SetConfig+0xbc>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d109      	bne.n	80041e0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	029b      	lsls	r3, r3, #10
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	621a      	str	r2, [r3, #32]
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40012c00 	.word	0x40012c00
 800420c:	40014000 	.word	0x40014000
 8004210:	40014400 	.word	0x40014400
 8004214:	40014800 	.word	0x40014800

08004218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	f023 0201 	bic.w	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4313      	orrs	r3, r2
 800424c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f023 030a 	bic.w	r3, r3, #10
 8004254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4313      	orrs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	621a      	str	r2, [r3, #32]
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004276:	b480      	push	{r7}
 8004278:	b087      	sub	sp, #28
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f023 0210 	bic.w	r2, r3, #16
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	031b      	lsls	r3, r3, #12
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	621a      	str	r2, [r3, #32]
}
 80042ca:	bf00      	nop
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b085      	sub	sp, #20
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f043 0307 	orr.w	r3, r3, #7
 80042f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	609a      	str	r2, [r3, #8]
}
 8004300:	bf00      	nop
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
 8004318:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004326:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	021a      	lsls	r2, r3, #8
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	431a      	orrs	r2, r3
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4313      	orrs	r3, r2
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	609a      	str	r2, [r3, #8]
}
 8004340:	bf00      	nop
 8004342:	371c      	adds	r7, #28
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 031f 	and.w	r3, r3, #31
 800435e:	2201      	movs	r2, #1
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6a1a      	ldr	r2, [r3, #32]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	43db      	mvns	r3, r3
 800436e:	401a      	ands	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a1a      	ldr	r2, [r3, #32]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f003 031f 	and.w	r3, r3, #31
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	fa01 f303 	lsl.w	r3, r1, r3
 8004384:	431a      	orrs	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	621a      	str	r2, [r3, #32]
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
	...

08004398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e054      	b.n	800445a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a24      	ldr	r2, [pc, #144]	; (8004468 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d108      	bne.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a17      	ldr	r2, [pc, #92]	; (8004468 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00e      	beq.n	800442e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004418:	d009      	beq.n	800442e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a13      	ldr	r2, [pc, #76]	; (800446c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d004      	beq.n	800442e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a11      	ldr	r2, [pc, #68]	; (8004470 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d10c      	bne.n	8004448 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004434:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	4313      	orrs	r3, r2
 800443e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40012c00 	.word	0x40012c00
 800446c:	40000400 	.word	0x40000400
 8004470:	40014000 	.word	0x40014000

08004474 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e040      	b.n	8004544 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fc fe16 	bl	8001104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2224      	movs	r2, #36	; 0x24
 80044dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0201 	bic.w	r2, r2, #1
 80044ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fe46 	bl	8005180 <UART_SetConfig>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e022      	b.n	8004544 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 ff70 	bl	80053ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800451a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800452a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0201 	orr.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fff7 	bl	8005530 <UART_CheckIdleState>
 8004542:	4603      	mov	r3, r0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e048      	b.n	80045f0 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fc fdc8 	bl	8001104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2224      	movs	r2, #36	; 0x24
 8004578:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0201 	bic.w	r2, r2, #1
 8004588:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 fdf8 	bl	8005180 <UART_SetConfig>
 8004590:	4603      	mov	r3, r0
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e02a      	b.n	80045f0 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 ff22 	bl	80053ec <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80045c6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0208 	orr.w	r2, r2, #8
 80045d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 ffa1 	bl	8005530 <UART_CheckIdleState>
 80045ee:	4603      	mov	r3, r0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08a      	sub	sp, #40	; 0x28
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	4613      	mov	r3, r2
 8004606:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800460c:	2b20      	cmp	r3, #32
 800460e:	f040 8082 	bne.w	8004716 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <HAL_UART_Transmit+0x26>
 8004618:	88fb      	ldrh	r3, [r7, #6]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e07a      	b.n	8004718 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_UART_Transmit+0x38>
 800462c:	2302      	movs	r3, #2
 800462e:	e073      	b.n	8004718 <HAL_UART_Transmit+0x120>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2221      	movs	r2, #33	; 0x21
 8004644:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004646:	f7fc ff3f 	bl	80014c8 <HAL_GetTick>
 800464a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	88fa      	ldrh	r2, [r7, #6]
 8004650:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	88fa      	ldrh	r2, [r7, #6]
 8004658:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004664:	d108      	bne.n	8004678 <HAL_UART_Transmit+0x80>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d104      	bne.n	8004678 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800466e:	2300      	movs	r3, #0
 8004670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	e003      	b.n	8004680 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800467c:	2300      	movs	r3, #0
 800467e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004688:	e02d      	b.n	80046e6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2200      	movs	r2, #0
 8004692:	2180      	movs	r1, #128	; 0x80
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 ff94 	bl	80055c2 <UART_WaitOnFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e039      	b.n	8004718 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10b      	bne.n	80046c2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	881a      	ldrh	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046b6:	b292      	uxth	r2, r2
 80046b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	3302      	adds	r3, #2
 80046be:	61bb      	str	r3, [r7, #24]
 80046c0:	e008      	b.n	80046d4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	781a      	ldrb	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	b292      	uxth	r2, r2
 80046cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	3301      	adds	r3, #1
 80046d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1cb      	bne.n	800468a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2200      	movs	r2, #0
 80046fa:	2140      	movs	r1, #64	; 0x40
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 ff60 	bl	80055c2 <UART_WaitOnFlagUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e005      	b.n	8004718 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	e000      	b.n	8004718 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004716:	2302      	movs	r3, #2
  }
}
 8004718:	4618      	mov	r0, r3
 800471a:	3720      	adds	r7, #32
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08a      	sub	sp, #40	; 0x28
 8004724:	af02      	add	r7, sp, #8
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	4613      	mov	r3, r2
 800472e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004734:	2b20      	cmp	r3, #32
 8004736:	f040 80bf 	bne.w	80048b8 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <HAL_UART_Receive+0x26>
 8004740:	88fb      	ldrh	r3, [r7, #6]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e0b7      	b.n	80048ba <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_UART_Receive+0x38>
 8004754:	2302      	movs	r3, #2
 8004756:	e0b0      	b.n	80048ba <HAL_UART_Receive+0x19a>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2222      	movs	r2, #34	; 0x22
 800476c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004774:	f7fc fea8 	bl	80014c8 <HAL_GetTick>
 8004778:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	88fa      	ldrh	r2, [r7, #6]
 800477e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	88fa      	ldrh	r2, [r7, #6]
 8004786:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004792:	d10e      	bne.n	80047b2 <HAL_UART_Receive+0x92>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d105      	bne.n	80047a8 <HAL_UART_Receive+0x88>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80047a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047a6:	e02d      	b.n	8004804 <HAL_UART_Receive+0xe4>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	22ff      	movs	r2, #255	; 0xff
 80047ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047b0:	e028      	b.n	8004804 <HAL_UART_Receive+0xe4>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10d      	bne.n	80047d6 <HAL_UART_Receive+0xb6>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d104      	bne.n	80047cc <HAL_UART_Receive+0xac>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	22ff      	movs	r2, #255	; 0xff
 80047c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047ca:	e01b      	b.n	8004804 <HAL_UART_Receive+0xe4>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	227f      	movs	r2, #127	; 0x7f
 80047d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047d4:	e016      	b.n	8004804 <HAL_UART_Receive+0xe4>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047de:	d10d      	bne.n	80047fc <HAL_UART_Receive+0xdc>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d104      	bne.n	80047f2 <HAL_UART_Receive+0xd2>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	227f      	movs	r2, #127	; 0x7f
 80047ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047f0:	e008      	b.n	8004804 <HAL_UART_Receive+0xe4>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	223f      	movs	r2, #63	; 0x3f
 80047f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047fa:	e003      	b.n	8004804 <HAL_UART_Receive+0xe4>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800480a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004814:	d108      	bne.n	8004828 <HAL_UART_Receive+0x108>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d104      	bne.n	8004828 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800481e:	2300      	movs	r3, #0
 8004820:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	e003      	b.n	8004830 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800482c:	2300      	movs	r3, #0
 800482e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004838:	e033      	b.n	80048a2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2200      	movs	r2, #0
 8004842:	2120      	movs	r1, #32
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 febc 	bl	80055c2 <UART_WaitOnFlagUntilTimeout>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e032      	b.n	80048ba <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10c      	bne.n	8004874 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004860:	b29a      	uxth	r2, r3
 8004862:	8a7b      	ldrh	r3, [r7, #18]
 8004864:	4013      	ands	r3, r2
 8004866:	b29a      	uxth	r2, r3
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	3302      	adds	r3, #2
 8004870:	61bb      	str	r3, [r7, #24]
 8004872:	e00d      	b.n	8004890 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800487a:	b29b      	uxth	r3, r3
 800487c:	b2da      	uxtb	r2, r3
 800487e:	8a7b      	ldrh	r3, [r7, #18]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	4013      	ands	r3, r2
 8004884:	b2da      	uxtb	r2, r3
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	3301      	adds	r3, #1
 800488e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1c5      	bne.n	800483a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	e000      	b.n	80048ba <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80048b8:	2302      	movs	r3, #2
  }
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3720      	adds	r7, #32
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b08b      	sub	sp, #44	; 0x2c
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	4613      	mov	r3, r2
 80048d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d156      	bne.n	8004988 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <HAL_UART_Transmit_IT+0x22>
 80048e0:	88fb      	ldrh	r3, [r7, #6]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e04f      	b.n	800498a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d101      	bne.n	80048f8 <HAL_UART_Transmit_IT+0x34>
 80048f4:	2302      	movs	r3, #2
 80048f6:	e048      	b.n	800498a <HAL_UART_Transmit_IT+0xc6>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	88fa      	ldrh	r2, [r7, #6]
 800490a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	88fa      	ldrh	r2, [r7, #6]
 8004912:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2221      	movs	r2, #33	; 0x21
 8004928:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004932:	d107      	bne.n	8004944 <HAL_UART_Transmit_IT+0x80>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d103      	bne.n	8004944 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4a16      	ldr	r2, [pc, #88]	; (8004998 <HAL_UART_Transmit_IT+0xd4>)
 8004940:	669a      	str	r2, [r3, #104]	; 0x68
 8004942:	e002      	b.n	800494a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4a15      	ldr	r2, [pc, #84]	; (800499c <HAL_UART_Transmit_IT+0xd8>)
 8004948:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	e853 3f00 	ldrex	r3, [r3]
 800495e:	613b      	str	r3, [r7, #16]
   return(result);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	461a      	mov	r2, r3
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	623b      	str	r3, [r7, #32]
 8004972:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	69f9      	ldr	r1, [r7, #28]
 8004976:	6a3a      	ldr	r2, [r7, #32]
 8004978:	e841 2300 	strex	r3, r2, [r1]
 800497c:	61bb      	str	r3, [r7, #24]
   return(result);
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e6      	bne.n	8004952 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	e000      	b.n	800498a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004988:	2302      	movs	r3, #2
  }
}
 800498a:	4618      	mov	r0, r3
 800498c:	372c      	adds	r7, #44	; 0x2c
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	08005a4f 	.word	0x08005a4f
 800499c:	08005997 	.word	0x08005997

080049a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08a      	sub	sp, #40	; 0x28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	4613      	mov	r3, r2
 80049ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d13d      	bne.n	8004a32 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <HAL_UART_Receive_IT+0x22>
 80049bc:	88fb      	ldrh	r3, [r7, #6]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e036      	b.n	8004a34 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_UART_Receive_IT+0x34>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e02f      	b.n	8004a34 <HAL_UART_Receive_IT+0x94>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d018      	beq.n	8004a22 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	e853 3f00 	ldrex	r3, [r3]
 80049fc:	613b      	str	r3, [r7, #16]
   return(result);
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	623b      	str	r3, [r7, #32]
 8004a10:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a12:	69f9      	ldr	r1, [r7, #28]
 8004a14:	6a3a      	ldr	r2, [r7, #32]
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1e6      	bne.n	80049f0 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a22:	88fb      	ldrh	r3, [r7, #6]
 8004a24:	461a      	mov	r2, r3
 8004a26:	68b9      	ldr	r1, [r7, #8]
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 fe8f 	bl	800574c <UART_Start_Receive_IT>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	e000      	b.n	8004a34 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a32:	2302      	movs	r3, #2
  }
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3728      	adds	r7, #40	; 0x28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b0ba      	sub	sp, #232	; 0xe8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004a66:	f640 030f 	movw	r3, #2063	; 0x80f
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004a70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d115      	bne.n	8004aa4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00f      	beq.n	8004aa4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d009      	beq.n	8004aa4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 82a3 	beq.w	8004fe0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	4798      	blx	r3
      }
      return;
 8004aa2:	e29d      	b.n	8004fe0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004aa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 8117 	beq.w	8004cdc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004aba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004abe:	4b85      	ldr	r3, [pc, #532]	; (8004cd4 <HAL_UART_IRQHandler+0x298>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 810a 	beq.w	8004cdc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d011      	beq.n	8004af8 <HAL_UART_IRQHandler+0xbc>
 8004ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00b      	beq.n	8004af8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aee:	f043 0201 	orr.w	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d011      	beq.n	8004b28 <HAL_UART_IRQHandler+0xec>
 8004b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00b      	beq.n	8004b28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2202      	movs	r2, #2
 8004b16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b1e:	f043 0204 	orr.w	r2, r3, #4
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d011      	beq.n	8004b58 <HAL_UART_IRQHandler+0x11c>
 8004b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00b      	beq.n	8004b58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2204      	movs	r2, #4
 8004b46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b4e:	f043 0202 	orr.w	r2, r3, #2
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d017      	beq.n	8004b94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d105      	bne.n	8004b7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00b      	beq.n	8004b94 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2208      	movs	r2, #8
 8004b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b8a:	f043 0208 	orr.w	r2, r3, #8
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d012      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x18a>
 8004ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00c      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bbc:	f043 0220 	orr.w	r2, r3, #32
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 8209 	beq.w	8004fe4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd6:	f003 0320 	and.w	r3, r3, #32
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00d      	beq.n	8004bfa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d007      	beq.n	8004bfa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0e:	2b40      	cmp	r3, #64	; 0x40
 8004c10:	d005      	beq.n	8004c1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d04f      	beq.n	8004cbe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fe40 	bl	80058a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2e:	2b40      	cmp	r3, #64	; 0x40
 8004c30:	d141      	bne.n	8004cb6 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3308      	adds	r3, #8
 8004c38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c40:	e853 3f00 	ldrex	r3, [r3]
 8004c44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3308      	adds	r3, #8
 8004c5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1d9      	bne.n	8004c32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d013      	beq.n	8004cae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8a:	4a13      	ldr	r2, [pc, #76]	; (8004cd8 <HAL_UART_IRQHandler+0x29c>)
 8004c8c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fc fd92 	bl	80017bc <HAL_DMA_Abort_IT>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d017      	beq.n	8004cce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004ca8:	4610      	mov	r0, r2
 8004caa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cac:	e00f      	b.n	8004cce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f9ac 	bl	800500c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb4:	e00b      	b.n	8004cce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f9a8 	bl	800500c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cbc:	e007      	b.n	8004cce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f9a4 	bl	800500c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004ccc:	e18a      	b.n	8004fe4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cce:	bf00      	nop
    return;
 8004cd0:	e188      	b.n	8004fe4 <HAL_UART_IRQHandler+0x5a8>
 8004cd2:	bf00      	nop
 8004cd4:	04000120 	.word	0x04000120
 8004cd8:	0800596b 	.word	0x0800596b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	f040 8143 	bne.w	8004f6c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cea:	f003 0310 	and.w	r3, r3, #16
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 813c 	beq.w	8004f6c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8135 	beq.w	8004f6c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2210      	movs	r2, #16
 8004d08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d14:	2b40      	cmp	r3, #64	; 0x40
 8004d16:	f040 80b1 	bne.w	8004e7c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 815c 	beq.w	8004fe8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	f080 8154 	bcs.w	8004fe8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	f000 8085 	beq.w	8004e60 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d84:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1da      	bne.n	8004d56 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3308      	adds	r3, #8
 8004da6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004daa:	e853 3f00 	ldrex	r3, [r3]
 8004dae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004db0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004db2:	f023 0301 	bic.w	r3, r3, #1
 8004db6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3308      	adds	r3, #8
 8004dc0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dc4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004dc8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004dcc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004dd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e1      	bne.n	8004da0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3308      	adds	r3, #8
 8004de2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3308      	adds	r3, #8
 8004dfc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e00:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e3      	bne.n	8004ddc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e30:	f023 0310 	bic.w	r3, r3, #16
 8004e34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e42:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e44:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e4a:	e841 2300 	strex	r3, r2, [r1]
 8004e4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1e4      	bne.n	8004e20 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fc fc75 	bl	800174a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	4619      	mov	r1, r3
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f8d3 	bl	8005020 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e7a:	e0b5      	b.n	8004fe8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80a7 	beq.w	8004fec <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004e9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 80a2 	beq.w	8004fec <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ebc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004eca:	647b      	str	r3, [r7, #68]	; 0x44
 8004ecc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ed0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1e4      	bne.n	8004ea8 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	623b      	str	r3, [r7, #32]
   return(result);
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	f023 0301 	bic.w	r3, r3, #1
 8004ef4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3308      	adds	r3, #8
 8004efe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f02:	633a      	str	r2, [r7, #48]	; 0x30
 8004f04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e3      	bne.n	8004ede <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	e853 3f00 	ldrex	r3, [r3]
 8004f34:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f023 0310 	bic.w	r3, r3, #16
 8004f3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	461a      	mov	r2, r3
 8004f46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f4a:	61fb      	str	r3, [r7, #28]
 8004f4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4e:	69b9      	ldr	r1, [r7, #24]
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	617b      	str	r3, [r7, #20]
   return(result);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e4      	bne.n	8004f28 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f62:	4619      	mov	r1, r3
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f85b 	bl	8005020 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f6a:	e03f      	b.n	8004fec <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00e      	beq.n	8004f96 <HAL_UART_IRQHandler+0x55a>
 8004f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d008      	beq.n	8004f96 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 ff43 	bl	8005e1a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f94:	e02d      	b.n	8004ff2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00e      	beq.n	8004fc0 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d008      	beq.n	8004fc0 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d01c      	beq.n	8004ff0 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	4798      	blx	r3
    }
    return;
 8004fbe:	e017      	b.n	8004ff0 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d012      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x5b6>
 8004fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00c      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 fd98 	bl	8005b0e <UART_EndTransmit_IT>
    return;
 8004fde:	e008      	b.n	8004ff2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004fe0:	bf00      	nop
 8004fe2:	e006      	b.n	8004ff2 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004fe4:	bf00      	nop
 8004fe6:	e004      	b.n	8004ff2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004fe8:	bf00      	nop
 8004fea:	e002      	b.n	8004ff2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004fec:	bf00      	nop
 8004fee:	e000      	b.n	8004ff2 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004ff0:	bf00      	nop
  }

}
 8004ff2:	37e8      	adds	r7, #232	; 0xe8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8005038:	b480      	push	{r7}
 800503a:	b08f      	sub	sp, #60	; 0x3c
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005046:	2b01      	cmp	r3, #1
 8005048:	d101      	bne.n	800504e <HAL_HalfDuplex_EnableTransmitter+0x16>
 800504a:	2302      	movs	r3, #2
 800504c:	e040      	b.n	80050d0 <HAL_HalfDuplex_EnableTransmitter+0x98>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2224      	movs	r2, #36	; 0x24
 800505a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	e853 3f00 	ldrex	r3, [r3]
 8005068:	61fb      	str	r3, [r7, #28]
   return(result);
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	f023 030c 	bic.w	r3, r3, #12
 8005070:	637b      	str	r3, [r7, #52]	; 0x34
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	461a      	mov	r2, r3
 8005078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800507c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005082:	e841 2300 	strex	r3, r2, [r1]
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1e6      	bne.n	800505c <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	e853 3f00 	ldrex	r3, [r3]
 800509a:	60bb      	str	r3, [r7, #8]
   return(result);
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f043 0308 	orr.w	r3, r3, #8
 80050a2:	633b      	str	r3, [r7, #48]	; 0x30
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	461a      	mov	r2, r3
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b0:	6979      	ldr	r1, [r7, #20]
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	e841 2300 	strex	r3, r2, [r1]
 80050b8:	613b      	str	r3, [r7, #16]
   return(result);
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1e6      	bne.n	800508e <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	373c      	adds	r7, #60	; 0x3c
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80050dc:	b480      	push	{r7}
 80050de:	b08f      	sub	sp, #60	; 0x3c
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_HalfDuplex_EnableReceiver+0x16>
 80050ee:	2302      	movs	r3, #2
 80050f0:	e040      	b.n	8005174 <HAL_HalfDuplex_EnableReceiver+0x98>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2224      	movs	r2, #36	; 0x24
 80050fe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	61fb      	str	r3, [r7, #28]
   return(result);
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	f023 030c 	bic.w	r3, r3, #12
 8005114:	637b      	str	r3, [r7, #52]	; 0x34
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005120:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005126:	e841 2300 	strex	r3, r2, [r1]
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1e6      	bne.n	8005100 <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f043 0304 	orr.w	r3, r3, #4
 8005146:	633b      	str	r3, [r7, #48]	; 0x30
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	461a      	mov	r2, r3
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	6979      	ldr	r1, [r7, #20]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	613b      	str	r3, [r7, #16]
   return(result);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e6      	bne.n	8005132 <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	373c      	adds	r7, #60	; 0x3c
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005188:	2300      	movs	r3, #0
 800518a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4b8a      	ldr	r3, [pc, #552]	; (80053d4 <UART_SetConfig+0x254>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	6979      	ldr	r1, [r7, #20]
 80051b4:	430b      	orrs	r3, r1
 80051b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a78      	ldr	r2, [pc, #480]	; (80053d8 <UART_SetConfig+0x258>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d120      	bne.n	800523e <UART_SetConfig+0xbe>
 80051fc:	4b77      	ldr	r3, [pc, #476]	; (80053dc <UART_SetConfig+0x25c>)
 80051fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005200:	f003 0303 	and.w	r3, r3, #3
 8005204:	2b03      	cmp	r3, #3
 8005206:	d817      	bhi.n	8005238 <UART_SetConfig+0xb8>
 8005208:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <UART_SetConfig+0x90>)
 800520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520e:	bf00      	nop
 8005210:	08005221 	.word	0x08005221
 8005214:	0800522d 	.word	0x0800522d
 8005218:	08005233 	.word	0x08005233
 800521c:	08005227 	.word	0x08005227
 8005220:	2300      	movs	r3, #0
 8005222:	77fb      	strb	r3, [r7, #31]
 8005224:	e01d      	b.n	8005262 <UART_SetConfig+0xe2>
 8005226:	2302      	movs	r3, #2
 8005228:	77fb      	strb	r3, [r7, #31]
 800522a:	e01a      	b.n	8005262 <UART_SetConfig+0xe2>
 800522c:	2304      	movs	r3, #4
 800522e:	77fb      	strb	r3, [r7, #31]
 8005230:	e017      	b.n	8005262 <UART_SetConfig+0xe2>
 8005232:	2308      	movs	r3, #8
 8005234:	77fb      	strb	r3, [r7, #31]
 8005236:	e014      	b.n	8005262 <UART_SetConfig+0xe2>
 8005238:	2310      	movs	r3, #16
 800523a:	77fb      	strb	r3, [r7, #31]
 800523c:	e011      	b.n	8005262 <UART_SetConfig+0xe2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a67      	ldr	r2, [pc, #412]	; (80053e0 <UART_SetConfig+0x260>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d102      	bne.n	800524e <UART_SetConfig+0xce>
 8005248:	2300      	movs	r3, #0
 800524a:	77fb      	strb	r3, [r7, #31]
 800524c:	e009      	b.n	8005262 <UART_SetConfig+0xe2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a64      	ldr	r2, [pc, #400]	; (80053e4 <UART_SetConfig+0x264>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d102      	bne.n	800525e <UART_SetConfig+0xde>
 8005258:	2300      	movs	r3, #0
 800525a:	77fb      	strb	r3, [r7, #31]
 800525c:	e001      	b.n	8005262 <UART_SetConfig+0xe2>
 800525e:	2310      	movs	r3, #16
 8005260:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800526a:	d15b      	bne.n	8005324 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800526c:	7ffb      	ldrb	r3, [r7, #31]
 800526e:	2b08      	cmp	r3, #8
 8005270:	d827      	bhi.n	80052c2 <UART_SetConfig+0x142>
 8005272:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <UART_SetConfig+0xf8>)
 8005274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005278:	0800529d 	.word	0x0800529d
 800527c:	080052a5 	.word	0x080052a5
 8005280:	080052ad 	.word	0x080052ad
 8005284:	080052c3 	.word	0x080052c3
 8005288:	080052b3 	.word	0x080052b3
 800528c:	080052c3 	.word	0x080052c3
 8005290:	080052c3 	.word	0x080052c3
 8005294:	080052c3 	.word	0x080052c3
 8005298:	080052bb 	.word	0x080052bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800529c:	f7fd feb6 	bl	800300c <HAL_RCC_GetPCLK1Freq>
 80052a0:	61b8      	str	r0, [r7, #24]
        break;
 80052a2:	e013      	b.n	80052cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052a4:	f7fd fed4 	bl	8003050 <HAL_RCC_GetPCLK2Freq>
 80052a8:	61b8      	str	r0, [r7, #24]
        break;
 80052aa:	e00f      	b.n	80052cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052ac:	4b4e      	ldr	r3, [pc, #312]	; (80053e8 <UART_SetConfig+0x268>)
 80052ae:	61bb      	str	r3, [r7, #24]
        break;
 80052b0:	e00c      	b.n	80052cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052b2:	f7fd fe35 	bl	8002f20 <HAL_RCC_GetSysClockFreq>
 80052b6:	61b8      	str	r0, [r7, #24]
        break;
 80052b8:	e008      	b.n	80052cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052be:	61bb      	str	r3, [r7, #24]
        break;
 80052c0:	e004      	b.n	80052cc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	77bb      	strb	r3, [r7, #30]
        break;
 80052ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d074      	beq.n	80053bc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	005a      	lsls	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	085b      	lsrs	r3, r3, #1
 80052dc:	441a      	add	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	2b0f      	cmp	r3, #15
 80052ee:	d916      	bls.n	800531e <UART_SetConfig+0x19e>
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f6:	d212      	bcs.n	800531e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	f023 030f 	bic.w	r3, r3, #15
 8005300:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	085b      	lsrs	r3, r3, #1
 8005306:	b29b      	uxth	r3, r3
 8005308:	f003 0307 	and.w	r3, r3, #7
 800530c:	b29a      	uxth	r2, r3
 800530e:	89fb      	ldrh	r3, [r7, #14]
 8005310:	4313      	orrs	r3, r2
 8005312:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	89fa      	ldrh	r2, [r7, #14]
 800531a:	60da      	str	r2, [r3, #12]
 800531c:	e04e      	b.n	80053bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	77bb      	strb	r3, [r7, #30]
 8005322:	e04b      	b.n	80053bc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005324:	7ffb      	ldrb	r3, [r7, #31]
 8005326:	2b08      	cmp	r3, #8
 8005328:	d827      	bhi.n	800537a <UART_SetConfig+0x1fa>
 800532a:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <UART_SetConfig+0x1b0>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	08005355 	.word	0x08005355
 8005334:	0800535d 	.word	0x0800535d
 8005338:	08005365 	.word	0x08005365
 800533c:	0800537b 	.word	0x0800537b
 8005340:	0800536b 	.word	0x0800536b
 8005344:	0800537b 	.word	0x0800537b
 8005348:	0800537b 	.word	0x0800537b
 800534c:	0800537b 	.word	0x0800537b
 8005350:	08005373 	.word	0x08005373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005354:	f7fd fe5a 	bl	800300c <HAL_RCC_GetPCLK1Freq>
 8005358:	61b8      	str	r0, [r7, #24]
        break;
 800535a:	e013      	b.n	8005384 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800535c:	f7fd fe78 	bl	8003050 <HAL_RCC_GetPCLK2Freq>
 8005360:	61b8      	str	r0, [r7, #24]
        break;
 8005362:	e00f      	b.n	8005384 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005364:	4b20      	ldr	r3, [pc, #128]	; (80053e8 <UART_SetConfig+0x268>)
 8005366:	61bb      	str	r3, [r7, #24]
        break;
 8005368:	e00c      	b.n	8005384 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800536a:	f7fd fdd9 	bl	8002f20 <HAL_RCC_GetSysClockFreq>
 800536e:	61b8      	str	r0, [r7, #24]
        break;
 8005370:	e008      	b.n	8005384 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005376:	61bb      	str	r3, [r7, #24]
        break;
 8005378:	e004      	b.n	8005384 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	77bb      	strb	r3, [r7, #30]
        break;
 8005382:	bf00      	nop
    }

    if (pclk != 0U)
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d018      	beq.n	80053bc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	085a      	lsrs	r2, r3, #1
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	441a      	add	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	fbb2 f3f3 	udiv	r3, r2, r3
 800539c:	b29b      	uxth	r3, r3
 800539e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	2b0f      	cmp	r3, #15
 80053a4:	d908      	bls.n	80053b8 <UART_SetConfig+0x238>
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ac:	d204      	bcs.n	80053b8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	60da      	str	r2, [r3, #12]
 80053b6:	e001      	b.n	80053bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3720      	adds	r7, #32
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	efff69f3 	.word	0xefff69f3
 80053d8:	40013800 	.word	0x40013800
 80053dc:	40021000 	.word	0x40021000
 80053e0:	40004400 	.word	0x40004400
 80053e4:	40004800 	.word	0x40004800
 80053e8:	007a1200 	.word	0x007a1200

080053ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00a      	beq.n	8005416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00a      	beq.n	800545a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00a      	beq.n	800549e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d01a      	beq.n	8005502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ea:	d10a      	bne.n	8005502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	605a      	str	r2, [r3, #4]
  }
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af02      	add	r7, sp, #8
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005540:	f7fb ffc2 	bl	80014c8 <HAL_GetTick>
 8005544:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	2b08      	cmp	r3, #8
 8005552:	d10e      	bne.n	8005572 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f82d 	bl	80055c2 <UART_WaitOnFlagUntilTimeout>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e023      	b.n	80055ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b04      	cmp	r3, #4
 800557e:	d10e      	bne.n	800559e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005580:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f817 	bl	80055c2 <UART_WaitOnFlagUntilTimeout>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e00d      	b.n	80055ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2220      	movs	r2, #32
 80055a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2220      	movs	r2, #32
 80055a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b09c      	sub	sp, #112	; 0x70
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	603b      	str	r3, [r7, #0]
 80055ce:	4613      	mov	r3, r2
 80055d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d2:	e0a5      	b.n	8005720 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055da:	f000 80a1 	beq.w	8005720 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055de:	f7fb ff73 	bl	80014c8 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d302      	bcc.n	80055f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80055ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d13e      	bne.n	8005672 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005604:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005608:	667b      	str	r3, [r7, #100]	; 0x64
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005612:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005614:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005616:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005618:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800561a:	e841 2300 	strex	r3, r2, [r1]
 800561e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1e6      	bne.n	80055f4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3308      	adds	r3, #8
 800562c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005638:	f023 0301 	bic.w	r3, r3, #1
 800563c:	663b      	str	r3, [r7, #96]	; 0x60
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3308      	adds	r3, #8
 8005644:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005646:	64ba      	str	r2, [r7, #72]	; 0x48
 8005648:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800564c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e5      	bne.n	8005626 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2220      	movs	r2, #32
 800565e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2220      	movs	r2, #32
 8005664:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e067      	b.n	8005742 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d04f      	beq.n	8005720 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800568a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800568e:	d147      	bne.n	8005720 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005698:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a2:	e853 3f00 	ldrex	r3, [r3]
 80056a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	461a      	mov	r2, r3
 80056b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b8:	637b      	str	r3, [r7, #52]	; 0x34
 80056ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056c0:	e841 2300 	strex	r3, r2, [r1]
 80056c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1e6      	bne.n	800569a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3308      	adds	r3, #8
 80056d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	e853 3f00 	ldrex	r3, [r3]
 80056da:	613b      	str	r3, [r7, #16]
   return(result);
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f023 0301 	bic.w	r3, r3, #1
 80056e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3308      	adds	r3, #8
 80056ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056ec:	623a      	str	r2, [r7, #32]
 80056ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f0:	69f9      	ldr	r1, [r7, #28]
 80056f2:	6a3a      	ldr	r2, [r7, #32]
 80056f4:	e841 2300 	strex	r3, r2, [r1]
 80056f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e5      	bne.n	80056cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2220      	movs	r2, #32
 8005704:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2220      	movs	r2, #32
 800570a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2220      	movs	r2, #32
 8005710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e010      	b.n	8005742 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	69da      	ldr	r2, [r3, #28]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	4013      	ands	r3, r2
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	429a      	cmp	r2, r3
 800572e:	bf0c      	ite	eq
 8005730:	2301      	moveq	r3, #1
 8005732:	2300      	movne	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	461a      	mov	r2, r3
 8005738:	79fb      	ldrb	r3, [r7, #7]
 800573a:	429a      	cmp	r2, r3
 800573c:	f43f af4a 	beq.w	80055d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3770      	adds	r7, #112	; 0x70
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
	...

0800574c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800574c:	b480      	push	{r7}
 800574e:	b091      	sub	sp, #68	; 0x44
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	4613      	mov	r3, r2
 8005758:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	88fa      	ldrh	r2, [r7, #6]
 8005764:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	88fa      	ldrh	r2, [r7, #6]
 800576c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800577e:	d10e      	bne.n	800579e <UART_Start_Receive_IT+0x52>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d105      	bne.n	8005794 <UART_Start_Receive_IT+0x48>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800578e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005792:	e02d      	b.n	80057f0 <UART_Start_Receive_IT+0xa4>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	22ff      	movs	r2, #255	; 0xff
 8005798:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800579c:	e028      	b.n	80057f0 <UART_Start_Receive_IT+0xa4>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10d      	bne.n	80057c2 <UART_Start_Receive_IT+0x76>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d104      	bne.n	80057b8 <UART_Start_Receive_IT+0x6c>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	22ff      	movs	r2, #255	; 0xff
 80057b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057b6:	e01b      	b.n	80057f0 <UART_Start_Receive_IT+0xa4>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	227f      	movs	r2, #127	; 0x7f
 80057bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057c0:	e016      	b.n	80057f0 <UART_Start_Receive_IT+0xa4>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ca:	d10d      	bne.n	80057e8 <UART_Start_Receive_IT+0x9c>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d104      	bne.n	80057de <UART_Start_Receive_IT+0x92>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	227f      	movs	r2, #127	; 0x7f
 80057d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057dc:	e008      	b.n	80057f0 <UART_Start_Receive_IT+0xa4>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	223f      	movs	r2, #63	; 0x3f
 80057e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057e6:	e003      	b.n	80057f0 <UART_Start_Receive_IT+0xa4>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2222      	movs	r2, #34	; 0x22
 80057fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3308      	adds	r3, #8
 8005804:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005808:	e853 3f00 	ldrex	r3, [r3]
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	f043 0301 	orr.w	r3, r3, #1
 8005814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3308      	adds	r3, #8
 800581c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800581e:	637a      	str	r2, [r7, #52]	; 0x34
 8005820:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005826:	e841 2300 	strex	r3, r2, [r1]
 800582a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800582c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1e5      	bne.n	80057fe <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800583a:	d107      	bne.n	800584c <UART_Start_Receive_IT+0x100>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d103      	bne.n	800584c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4a15      	ldr	r2, [pc, #84]	; (800589c <UART_Start_Receive_IT+0x150>)
 8005848:	665a      	str	r2, [r3, #100]	; 0x64
 800584a:	e002      	b.n	8005852 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4a14      	ldr	r2, [pc, #80]	; (80058a0 <UART_Start_Receive_IT+0x154>)
 8005850:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	e853 3f00 	ldrex	r3, [r3]
 8005866:	613b      	str	r3, [r7, #16]
   return(result);
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800586e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	461a      	mov	r2, r3
 8005876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005878:	623b      	str	r3, [r7, #32]
 800587a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	69f9      	ldr	r1, [r7, #28]
 800587e:	6a3a      	ldr	r2, [r7, #32]
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	61bb      	str	r3, [r7, #24]
   return(result);
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e6      	bne.n	800585a <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3744      	adds	r7, #68	; 0x44
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	08005cbf 	.word	0x08005cbf
 80058a0:	08005b63 	.word	0x08005b63

080058a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b095      	sub	sp, #84	; 0x54
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b4:	e853 3f00 	ldrex	r3, [r3]
 80058b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ca:	643b      	str	r3, [r7, #64]	; 0x40
 80058cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058d2:	e841 2300 	strex	r3, r2, [r1]
 80058d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1e6      	bne.n	80058ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3308      	adds	r3, #8
 80058e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	f023 0301 	bic.w	r3, r3, #1
 80058f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3308      	adds	r3, #8
 80058fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005900:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005902:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005906:	e841 2300 	strex	r3, r2, [r1]
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1e5      	bne.n	80058de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005916:	2b01      	cmp	r3, #1
 8005918:	d118      	bne.n	800594c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	60bb      	str	r3, [r7, #8]
   return(result);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	f023 0310 	bic.w	r3, r3, #16
 800592e:	647b      	str	r3, [r7, #68]	; 0x44
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005938:	61bb      	str	r3, [r7, #24]
 800593a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593c:	6979      	ldr	r1, [r7, #20]
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	e841 2300 	strex	r3, r2, [r1]
 8005944:	613b      	str	r3, [r7, #16]
   return(result);
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1e6      	bne.n	800591a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2220      	movs	r2, #32
 8005950:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800595e:	bf00      	nop
 8005960:	3754      	adds	r7, #84	; 0x54
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b084      	sub	sp, #16
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005976:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f7ff fb3f 	bl	800500c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800598e:	bf00      	nop
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005996:	b480      	push	{r7}
 8005998:	b08f      	sub	sp, #60	; 0x3c
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059a2:	2b21      	cmp	r3, #33	; 0x21
 80059a4:	d14d      	bne.n	8005a42 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d132      	bne.n	8005a18 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	e853 3f00 	ldrex	r3, [r3]
 80059be:	61fb      	str	r3, [r7, #28]
   return(result);
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c6:	637b      	str	r3, [r7, #52]	; 0x34
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	461a      	mov	r2, r3
 80059ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059d2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059d8:	e841 2300 	strex	r3, r2, [r1]
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1e6      	bne.n	80059b2 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	e853 3f00 	ldrex	r3, [r3]
 80059f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059f8:	633b      	str	r3, [r7, #48]	; 0x30
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a02:	61bb      	str	r3, [r7, #24]
 8005a04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a06:	6979      	ldr	r1, [r7, #20]
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	e841 2300 	strex	r3, r2, [r1]
 8005a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1e6      	bne.n	80059e4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005a16:	e014      	b.n	8005a42 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a1c:	781a      	ldrb	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	b292      	uxth	r2, r2
 8005a24:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005a42:	bf00      	nop
 8005a44:	373c      	adds	r7, #60	; 0x3c
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b091      	sub	sp, #68	; 0x44
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a5a:	2b21      	cmp	r3, #33	; 0x21
 8005a5c:	d151      	bne.n	8005b02 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d132      	bne.n	8005ad0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	623b      	str	r3, [r7, #32]
   return(result);
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a88:	633b      	str	r3, [r7, #48]	; 0x30
 8005a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e6      	bne.n	8005a6a <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aba:	61fb      	str	r3, [r7, #28]
 8005abc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abe:	69b9      	ldr	r1, [r7, #24]
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	e841 2300 	strex	r3, r2, [r1]
 8005ac6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e6      	bne.n	8005a9c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005ace:	e018      	b.n	8005b02 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad8:	881a      	ldrh	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ae2:	b292      	uxth	r2, r2
 8005ae4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aea:	1c9a      	adds	r2, r3, #2
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005b02:	bf00      	nop
 8005b04:	3744      	adds	r7, #68	; 0x44
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b088      	sub	sp, #32
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	e853 3f00 	ldrex	r3, [r3]
 8005b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b2a:	61fb      	str	r3, [r7, #28]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	461a      	mov	r2, r3
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	6979      	ldr	r1, [r7, #20]
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	e841 2300 	strex	r3, r2, [r1]
 8005b40:	613b      	str	r3, [r7, #16]
   return(result);
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e6      	bne.n	8005b16 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff fa4f 	bl	8004ff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b5a:	bf00      	nop
 8005b5c:	3720      	adds	r7, #32
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b096      	sub	sp, #88	; 0x58
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b78:	2b22      	cmp	r3, #34	; 0x22
 8005b7a:	f040 8094 	bne.w	8005ca6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005b84:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b88:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005b8c:	b2d9      	uxtb	r1, r3
 8005b8e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b98:	400a      	ands	r2, r1
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d177      	bne.n	8005cb6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bce:	e853 3f00 	ldrex	r3, [r3]
 8005bd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bda:	653b      	str	r3, [r7, #80]	; 0x50
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	461a      	mov	r2, r3
 8005be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be4:	647b      	str	r3, [r7, #68]	; 0x44
 8005be6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bec:	e841 2300 	strex	r3, r2, [r1]
 8005bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e6      	bne.n	8005bc6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	e853 3f00 	ldrex	r3, [r3]
 8005c06:	623b      	str	r3, [r7, #32]
   return(result);
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	f023 0301 	bic.w	r3, r3, #1
 8005c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3308      	adds	r3, #8
 8005c16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c18:	633a      	str	r2, [r7, #48]	; 0x30
 8005c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c20:	e841 2300 	strex	r3, r2, [r1]
 8005c24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1e5      	bne.n	8005bf8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d12e      	bne.n	8005c9e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	e853 3f00 	ldrex	r3, [r3]
 8005c52:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0310 	bic.w	r3, r3, #16
 8005c5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	461a      	mov	r2, r3
 8005c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c64:	61fb      	str	r3, [r7, #28]
 8005c66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	69b9      	ldr	r1, [r7, #24]
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	617b      	str	r3, [r7, #20]
   return(result);
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e6      	bne.n	8005c46 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	69db      	ldr	r3, [r3, #28]
 8005c7e:	f003 0310 	and.w	r3, r3, #16
 8005c82:	2b10      	cmp	r3, #16
 8005c84:	d103      	bne.n	8005c8e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2210      	movs	r2, #16
 8005c8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c94:	4619      	mov	r1, r3
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7ff f9c2 	bl	8005020 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c9c:	e00b      	b.n	8005cb6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7fb f9c8 	bl	8001034 <HAL_UART_RxCpltCallback>
}
 8005ca4:	e007      	b.n	8005cb6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	699a      	ldr	r2, [r3, #24]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f042 0208 	orr.w	r2, r2, #8
 8005cb4:	619a      	str	r2, [r3, #24]
}
 8005cb6:	bf00      	nop
 8005cb8:	3758      	adds	r7, #88	; 0x58
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b096      	sub	sp, #88	; 0x58
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ccc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cd4:	2b22      	cmp	r3, #34	; 0x22
 8005cd6:	f040 8094 	bne.w	8005e02 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ce0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005cea:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005cee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cf8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfe:	1c9a      	adds	r2, r3, #2
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d177      	bne.n	8005e12 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2a:	e853 3f00 	ldrex	r3, [r3]
 8005d2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d40:	643b      	str	r3, [r7, #64]	; 0x40
 8005d42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d48:	e841 2300 	strex	r3, r2, [r1]
 8005d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e6      	bne.n	8005d22 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3308      	adds	r3, #8
 8005d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f023 0301 	bic.w	r3, r3, #1
 8005d6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3308      	adds	r3, #8
 8005d72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e5      	bne.n	8005d54 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d12e      	bne.n	8005dfa <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	e853 3f00 	ldrex	r3, [r3]
 8005dae:	60bb      	str	r3, [r7, #8]
   return(result);
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f023 0310 	bic.w	r3, r3, #16
 8005db6:	647b      	str	r3, [r7, #68]	; 0x44
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc0:	61bb      	str	r3, [r7, #24]
 8005dc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc4:	6979      	ldr	r1, [r7, #20]
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	e841 2300 	strex	r3, r2, [r1]
 8005dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1e6      	bne.n	8005da2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	f003 0310 	and.w	r3, r3, #16
 8005dde:	2b10      	cmp	r3, #16
 8005de0:	d103      	bne.n	8005dea <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2210      	movs	r2, #16
 8005de8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005df0:	4619      	mov	r1, r3
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7ff f914 	bl	8005020 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005df8:	e00b      	b.n	8005e12 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7fb f91a 	bl	8001034 <HAL_UART_RxCpltCallback>
}
 8005e00:	e007      	b.n	8005e12 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	699a      	ldr	r2, [r3, #24]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f042 0208 	orr.w	r2, r2, #8
 8005e10:	619a      	str	r2, [r3, #24]
}
 8005e12:	bf00      	nop
 8005e14:	3758      	adds	r7, #88	; 0x58
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e22:	bf00      	nop
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
	...

08005e30 <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	71fb      	strb	r3, [r7, #7]
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	71bb      	strb	r3, [r7, #6]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8005e42:	797b      	ldrb	r3, [r7, #5]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d901      	bls.n	8005e4c <tmc_fillCRC8Table+0x1c>
		return 0;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	e09e      	b.n	8005f8a <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 8005e4c:	797a      	ldrb	r2, [r7, #5]
 8005e4e:	4951      	ldr	r1, [pc, #324]	; (8005f94 <tmc_fillCRC8Table+0x164>)
 8005e50:	4613      	mov	r3, r2
 8005e52:	01db      	lsls	r3, r3, #7
 8005e54:	4413      	add	r3, r2
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	440b      	add	r3, r1
 8005e5a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005e5e:	79fa      	ldrb	r2, [r7, #7]
 8005e60:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 8005e62:	797a      	ldrb	r2, [r7, #5]
 8005e64:	494b      	ldr	r1, [pc, #300]	; (8005f94 <tmc_fillCRC8Table+0x164>)
 8005e66:	4613      	mov	r3, r2
 8005e68:	01db      	lsls	r3, r3, #7
 8005e6a:	4413      	add	r3, r2
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	440b      	add	r3, r1
 8005e70:	f203 1301 	addw	r3, r3, #257	; 0x101
 8005e74:	79ba      	ldrb	r2, [r7, #6]
 8005e76:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 8005e78:	797a      	ldrb	r2, [r7, #5]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	01db      	lsls	r3, r3, #7
 8005e7e:	4413      	add	r3, r2
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	4a44      	ldr	r2, [pc, #272]	; (8005f94 <tmc_fillCRC8Table+0x164>)
 8005e84:	4413      	add	r3, r2
 8005e86:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e8e:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8005e90:	4b41      	ldr	r3, [pc, #260]	; (8005f98 <tmc_fillCRC8Table+0x168>)
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	e074      	b.n	8005f80 <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 8005e96:	79bb      	ldrb	r3, [r7, #6]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d004      	beq.n	8005ea6 <tmc_fillCRC8Table+0x76>
 8005e9c:	6978      	ldr	r0, [r7, #20]
 8005e9e:	f000 f8f7 	bl	8006090 <flipBitsInBytes>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	e000      	b.n	8005ea8 <tmc_fillCRC8Table+0x78>
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 8005eaa:	2300      	movs	r3, #0
 8005eac:	613b      	str	r3, [r7, #16]
 8005eae:	e035      	b.n	8005f1c <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	0fdb      	lsrs	r3, r3, #31
 8005eb4:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <tmc_fillCRC8Table+0x9a>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	e000      	b.n	8005ecc <tmc_fillCRC8Table+0x9c>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	69fa      	ldr	r2, [r7, #28]
 8005ece:	4053      	eors	r3, r2
 8005ed0:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <tmc_fillCRC8Table+0xb2>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	021b      	lsls	r3, r3, #8
 8005ee0:	e000      	b.n	8005ee4 <tmc_fillCRC8Table+0xb4>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	69fa      	ldr	r2, [r7, #28]
 8005ee6:	4053      	eors	r3, r2
 8005ee8:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <tmc_fillCRC8Table+0xca>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	041b      	lsls	r3, r3, #16
 8005ef8:	e000      	b.n	8005efc <tmc_fillCRC8Table+0xcc>
 8005efa:	2300      	movs	r3, #0
 8005efc:	69fa      	ldr	r2, [r7, #28]
 8005efe:	4053      	eors	r3, r2
 8005f00:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 8005f02:	7afb      	ldrb	r3, [r7, #11]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <tmc_fillCRC8Table+0xde>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	061b      	lsls	r3, r3, #24
 8005f0c:	e000      	b.n	8005f10 <tmc_fillCRC8Table+0xe0>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	69fa      	ldr	r2, [r7, #28]
 8005f12:	4053      	eors	r3, r2
 8005f14:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	2b07      	cmp	r3, #7
 8005f20:	ddc6      	ble.n	8005eb0 <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 8005f22:	79bb      	ldrb	r3, [r7, #6]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d004      	beq.n	8005f32 <tmc_fillCRC8Table+0x102>
 8005f28:	69f8      	ldr	r0, [r7, #28]
 8005f2a:	f000 f8b1 	bl	8006090 <flipBitsInBytes>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	e000      	b.n	8005f34 <tmc_fillCRC8Table+0x104>
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	61ba      	str	r2, [r7, #24]
 8005f3c:	69fa      	ldr	r2, [r7, #28]
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	0a1b      	lsrs	r3, r3, #8
 8005f46:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	61ba      	str	r2, [r7, #24]
 8005f4e:	69fa      	ldr	r2, [r7, #28]
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	0a1b      	lsrs	r3, r3, #8
 8005f58:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	61ba      	str	r2, [r7, #24]
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	0a1b      	lsrs	r3, r3, #8
 8005f6a:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	61ba      	str	r2, [r7, #24]
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 8005f7e:	617b      	str	r3, [r7, #20]
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	4a06      	ldr	r2, [pc, #24]	; (8005f9c <tmc_fillCRC8Table+0x16c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d186      	bne.n	8005e96 <tmc_fillCRC8Table+0x66>
	}

	return 1;
 8005f88:	2301      	movs	r3, #1
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3720      	adds	r7, #32
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	200006dc 	.word	0x200006dc
 8005f98:	03020100 	.word	0x03020100
 8005f9c:	04030200 	.word	0x04030200

08005fa0 <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	4613      	mov	r3, r2
 8005fac:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8005fb2:	79fb      	ldrb	r3, [r7, #7]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d901      	bls.n	8005fbc <tmc_CRC8+0x1c>
		return 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	e02c      	b.n	8006016 <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 8005fbc:	79fa      	ldrb	r2, [r7, #7]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	01db      	lsls	r3, r3, #7
 8005fc2:	4413      	add	r3, r2
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	4a16      	ldr	r2, [pc, #88]	; (8006020 <tmc_CRC8+0x80>)
 8005fc8:	4413      	add	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]

	while(bytes--)
 8005fcc:	e00b      	b.n	8005fe6 <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	60fa      	str	r2, [r7, #12]
 8005fd4:	781a      	ldrb	r2, [r3, #0]
 8005fd6:	7dfb      	ldrb	r3, [r7, #23]
 8005fd8:	4053      	eors	r3, r2
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	461a      	mov	r2, r3
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	1e5a      	subs	r2, r3, #1
 8005fea:	60ba      	str	r2, [r7, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1ee      	bne.n	8005fce <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 8005ff0:	79fa      	ldrb	r2, [r7, #7]
 8005ff2:	490b      	ldr	r1, [pc, #44]	; (8006020 <tmc_CRC8+0x80>)
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	01db      	lsls	r3, r3, #7
 8005ff8:	4413      	add	r3, r2
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	440b      	add	r3, r1
 8005ffe:	f203 1301 	addw	r3, r3, #257	; 0x101
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <tmc_CRC8+0x74>
 8006008:	7dfb      	ldrb	r3, [r7, #23]
 800600a:	4618      	mov	r0, r3
 800600c:	f000 f80a 	bl	8006024 <flipByte>
 8006010:	4603      	mov	r3, r0
 8006012:	e000      	b.n	8006016 <tmc_CRC8+0x76>
 8006014:	7dfb      	ldrb	r3, [r7, #23]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	200006dc 	.word	0x200006dc

08006024 <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	4603      	mov	r3, r0
 800602c:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 800602e:	79fb      	ldrb	r3, [r7, #7]
 8006030:	085b      	lsrs	r3, r3, #1
 8006032:	b2db      	uxtb	r3, r3
 8006034:	b25b      	sxtb	r3, r3
 8006036:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800603a:	b25a      	sxtb	r2, r3
 800603c:	79fb      	ldrb	r3, [r7, #7]
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	b25b      	sxtb	r3, r3
 8006042:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8006046:	b25b      	sxtb	r3, r3
 8006048:	4313      	orrs	r3, r2
 800604a:	b25b      	sxtb	r3, r3
 800604c:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 800604e:	79fb      	ldrb	r3, [r7, #7]
 8006050:	089b      	lsrs	r3, r3, #2
 8006052:	b2db      	uxtb	r3, r3
 8006054:	b25b      	sxtb	r3, r3
 8006056:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800605a:	b25a      	sxtb	r2, r3
 800605c:	79fb      	ldrb	r3, [r7, #7]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	b25b      	sxtb	r3, r3
 8006062:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8006066:	b25b      	sxtb	r3, r3
 8006068:	4313      	orrs	r3, r2
 800606a:	b25b      	sxtb	r3, r3
 800606c:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	091b      	lsrs	r3, r3, #4
 8006072:	b2db      	uxtb	r3, r3
 8006074:	b25a      	sxtb	r2, r3
 8006076:	79fb      	ldrb	r3, [r7, #7]
 8006078:	011b      	lsls	r3, r3, #4
 800607a:	b25b      	sxtb	r3, r3
 800607c:	4313      	orrs	r3, r2
 800607e:	b25b      	sxtb	r3, r3
 8006080:	71fb      	strb	r3, [r7, #7]

	return value;
 8006082:	79fb      	ldrb	r3, [r7, #7]
}
 8006084:	4618      	mov	r0, r3
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	085b      	lsrs	r3, r3, #1
 800609c:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 80060a8:	4313      	orrs	r3, r2
 80060aa:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	089b      	lsrs	r3, r3, #2
 80060b0:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 80060bc:	4313      	orrs	r3, r2
 80060be:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	091b      	lsrs	r3, r3, #4
 80060c4:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	011b      	lsls	r3, r3, #4
 80060cc:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80060d0:	4313      	orrs	r3, r2
 80060d2:	607b      	str	r3, [r7, #4]

	return value;
 80060d4:	687b      	ldr	r3, [r7, #4]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b086      	sub	sp, #24
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	460b      	mov	r3, r1
 80060ec:	607a      	str	r2, [r7, #4]
 80060ee:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];

	data[0] = 0x05;
 80060f0:	2305      	movs	r3, #5
 80060f2:	743b      	strb	r3, [r7, #16]
	data[1] = tmc2209->slaveAddress;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 80060fa:	747b      	strb	r3, [r7, #17]
	data[2] = address | TMC_WRITE_BIT;
 80060fc:	7afb      	ldrb	r3, [r7, #11]
 80060fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006102:	b2db      	uxtb	r3, r3
 8006104:	74bb      	strb	r3, [r7, #18]
	data[3] = (value >> 24) & 0xFF;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	0e1b      	lsrs	r3, r3, #24
 800610a:	b2db      	uxtb	r3, r3
 800610c:	74fb      	strb	r3, [r7, #19]
	data[4] = (value >> 16) & 0xFF;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	141b      	asrs	r3, r3, #16
 8006112:	b2db      	uxtb	r3, r3
 8006114:	753b      	strb	r3, [r7, #20]
	data[5] = (value >> 8 ) & 0xFF;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	121b      	asrs	r3, r3, #8
 800611a:	b2db      	uxtb	r3, r3
 800611c:	757b      	strb	r3, [r7, #21]
	data[6] = (value      ) & 0xFF;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	b2db      	uxtb	r3, r3
 8006122:	75bb      	strb	r3, [r7, #22]
	data[7] = tmc2209_CRC8(data, 7);
 8006124:	f107 0310 	add.w	r3, r7, #16
 8006128:	2107      	movs	r1, #7
 800612a:	4618      	mov	r0, r3
 800612c:	f7fa f8c8 	bl	80002c0 <tmc2209_CRC8>
 8006130:	4603      	mov	r3, r0
 8006132:	75fb      	strb	r3, [r7, #23]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 800613c:	f107 0110 	add.w	r1, r7, #16
 8006140:	2300      	movs	r3, #0
 8006142:	2208      	movs	r2, #8
 8006144:	f7fa f894 	bl	8000270 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
 8006148:	7afb      	ldrb	r3, [r7, #11]
 800614a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800614e:	72fb      	strb	r3, [r7, #11]
	tmc2209->config->shadowRegister[address] = value;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	7afb      	ldrb	r3, [r7, #11]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	605a      	str	r2, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
 800615e:	7afb      	ldrb	r3, [r7, #11]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4413      	add	r3, r2
 8006164:	f893 2204 	ldrb.w	r2, [r3, #516]	; 0x204
 8006168:	7afb      	ldrb	r3, [r7, #11]
 800616a:	f042 0208 	orr.w	r2, r2, #8
 800616e:	b2d1      	uxtb	r1, r2
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4413      	add	r3, r2
 8006174:	460a      	mov	r2, r1
 8006176:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 800617a:	bf00      	nop
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 8006182:	b590      	push	{r4, r7, lr}
 8006184:	b085      	sub	sp, #20
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	460b      	mov	r3, r1
 800618c:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 800618e:	2300      	movs	r3, #0
 8006190:	60bb      	str	r3, [r7, #8]
 8006192:	2300      	movs	r3, #0
 8006194:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 8006196:	78fb      	ldrb	r3, [r7, #3]
 8006198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800619c:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 800619e:	78fb      	ldrb	r3, [r7, #3]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	4413      	add	r3, r2
 80061a4:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d106      	bne.n	80061be <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	78fb      	ldrb	r3, [r7, #3]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	e03f      	b.n	800623e <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 80061be:	2305      	movs	r3, #5
 80061c0:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 80061c8:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 80061ca:	78fb      	ldrb	r3, [r7, #3]
 80061cc:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 80061ce:	f107 0308 	add.w	r3, r7, #8
 80061d2:	2103      	movs	r1, #3
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fa f873 	bl	80002c0 <tmc2209_CRC8>
 80061da:	4603      	mov	r3, r0
 80061dc:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 80061e6:	f107 0108 	add.w	r1, r7, #8
 80061ea:	2308      	movs	r3, #8
 80061ec:	2204      	movs	r2, #4
 80061ee:	f7fa f83f 	bl	8000270 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 80061f2:	7a3b      	ldrb	r3, [r7, #8]
 80061f4:	2b05      	cmp	r3, #5
 80061f6:	d001      	beq.n	80061fc <tmc2209_readInt+0x7a>
		return 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	e020      	b.n	800623e <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 80061fc:	7a7b      	ldrb	r3, [r7, #9]
 80061fe:	2bff      	cmp	r3, #255	; 0xff
 8006200:	d001      	beq.n	8006206 <tmc2209_readInt+0x84>
		return 0;
 8006202:	2300      	movs	r3, #0
 8006204:	e01b      	b.n	800623e <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 8006206:	7abb      	ldrb	r3, [r7, #10]
 8006208:	78fa      	ldrb	r2, [r7, #3]
 800620a:	429a      	cmp	r2, r3
 800620c:	d001      	beq.n	8006212 <tmc2209_readInt+0x90>
		return 0;
 800620e:	2300      	movs	r3, #0
 8006210:	e015      	b.n	800623e <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 8006212:	7bfc      	ldrb	r4, [r7, #15]
 8006214:	f107 0308 	add.w	r3, r7, #8
 8006218:	2107      	movs	r1, #7
 800621a:	4618      	mov	r0, r3
 800621c:	f7fa f850 	bl	80002c0 <tmc2209_CRC8>
 8006220:	4603      	mov	r3, r0
 8006222:	429c      	cmp	r4, r3
 8006224:	d001      	beq.n	800622a <tmc2209_readInt+0xa8>
		return 0;
 8006226:	2300      	movs	r3, #0
 8006228:	e009      	b.n	800623e <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 800622a:	7afb      	ldrb	r3, [r7, #11]
 800622c:	061a      	lsls	r2, r3, #24
 800622e:	7b3b      	ldrb	r3, [r7, #12]
 8006230:	041b      	lsls	r3, r3, #16
 8006232:	4313      	orrs	r3, r2
 8006234:	7b7a      	ldrb	r2, [r7, #13]
 8006236:	0212      	lsls	r2, r2, #8
 8006238:	4313      	orrs	r3, r2
 800623a:	7bba      	ldrb	r2, [r7, #14]
 800623c:	4313      	orrs	r3, r2
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	bd90      	pop	{r4, r7, pc}
	...

08006248 <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	607b      	str	r3, [r7, #4]
 8006252:	460b      	mov	r3, r1
 8006254:	72fb      	strb	r3, [r7, #11]
 8006256:	4613      	mov	r3, r2
 8006258:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	7aba      	ldrb	r2, [r7, #10]
 800625e:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2200      	movs	r2, #0
 800626e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	7afa      	ldrb	r2, [r7, #11]
 8006278:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2200      	movs	r2, #0
 8006282:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2200      	movs	r2, #0
 800628a:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 800628c:	2300      	movs	r3, #0
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	e017      	b.n	80062c2 <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 8006292:	4a11      	ldr	r2, [pc, #68]	; (80062d8 <tmc2209_init+0x90>)
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	4413      	add	r3, r2
 8006298:	7819      	ldrb	r1, [r3, #0]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80062a4:	460a      	mov	r2, r1
 80062a6:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	6a3a      	ldr	r2, [r7, #32]
 80062ae:	4413      	add	r3, r2
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68f9      	ldr	r1, [r7, #12]
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	440b      	add	r3, r1
 80062ba:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	3301      	adds	r3, #1
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2b7f      	cmp	r3, #127	; 0x7f
 80062c6:	d9e4      	bls.n	8006292 <tmc2209_init+0x4a>
	}
}
 80062c8:	bf00      	nop
 80062ca:	bf00      	nop
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	08007abc 	.word	0x08007abc

080062dc <writeConfiguration>:

static void writeConfiguration(TMC2209TypeDef *tmc2209)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = &tmc2209->config->configIndex;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3301      	adds	r3, #1
 80062ea:	60bb      	str	r3, [r7, #8]
	const int32_t *settings;

	if(tmc2209->config->state == CONFIG_RESTORE)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d131      	bne.n	800635a <writeConfiguration+0x7e>
	{
		settings = tmc2209->config->shadowRegister;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	3304      	adds	r3, #4
 80062fc:	60fb      	str	r3, [r7, #12]
		// Find the next restorable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 80062fe:	e005      	b.n	800630c <writeConfiguration+0x30>
		{
			(*ptr)++;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	3301      	adds	r3, #1
 8006306:	b2da      	uxtb	r2, r3
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	b25b      	sxtb	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	db3b      	blt.n	800638e <writeConfiguration+0xb2>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4413      	add	r3, r2
 8006320:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0e9      	beq.n	8006300 <writeConfiguration+0x24>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	461a      	mov	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4413      	add	r3, r2
 8006336:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800633a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	d025      	beq.n	800638e <writeConfiguration+0xb2>
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4413      	add	r3, r2
 800634c:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006350:	f003 0308 	and.w	r3, r3, #8
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0d3      	beq.n	8006300 <writeConfiguration+0x24>
 8006358:	e019      	b.n	800638e <writeConfiguration+0xb2>
		}
	}
	else
	{
		settings = tmc2209->registerResetState;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	3304      	adds	r3, #4
 800635e:	60fb      	str	r3, [r7, #12]
		// Find the next resettable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8006360:	e005      	b.n	800636e <writeConfiguration+0x92>
		{
			(*ptr)++;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	3301      	adds	r3, #1
 8006368:	b2da      	uxtb	r2, r3
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	b25b      	sxtb	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	db0a      	blt.n	800638e <writeConfiguration+0xb2>
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4413      	add	r3, r2
 8006382:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006386:	f003 0342 	and.w	r3, r3, #66	; 0x42
 800638a:	2b02      	cmp	r3, #2
 800638c:	d1e9      	bne.n	8006362 <writeConfiguration+0x86>
		}
	}

	if(*ptr < TMC2209_REGISTER_COUNT)
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	b25b      	sxtb	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	db12      	blt.n	80063be <writeConfiguration+0xe2>
	{
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	7819      	ldrb	r1, [r3, #0]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4413      	add	r3, r2
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	461a      	mov	r2, r3
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7ff fe99 	bl	80060e2 <tmc2209_writeInt>
		(*ptr)++;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	3301      	adds	r3, #1
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	701a      	strb	r2, [r3, #0]
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
		}

		tmc2209->config->state = CONFIG_READY;
	}
}
 80063bc:	e013      	b.n	80063e6 <writeConfiguration+0x10a>
		if(tmc2209->config->callback)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d009      	beq.n	80063de <writeConfiguration+0x102>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	6812      	ldr	r2, [r2, #0]
 80063d6:	7812      	ldrb	r2, [r2, #0]
 80063d8:	4611      	mov	r1, r2
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2200      	movs	r2, #0
 80063e4:	701a      	strb	r2, [r3, #0]
}
 80063e6:	bf00      	nop
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <tmc2209_periodicJob>:

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b082      	sub	sp, #8
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	6039      	str	r1, [r7, #0]
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <tmc2209_periodicJob+0x1c>
	{
		writeConfiguration(tmc2209);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7ff ff6a 	bl	80062dc <writeConfiguration>
		return;
 8006408:	bf00      	nop
	}
}
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <tmc2209_reset+0x16>
		return false;
 8006422:	2300      	movs	r3, #0
 8006424:	e028      	b.n	8006478 <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8006426:	2300      	movs	r3, #0
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	e019      	b.n	8006460 <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	4413      	add	r3, r2
 8006432:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	f023 0308 	bic.w	r3, r3, #8
 800643c:	b2d9      	uxtb	r1, r3
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4413      	add	r3, r2
 8006444:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006448:	460a      	mov	r2, r1
 800644a:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	2200      	movs	r2, #0
 8006458:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3301      	adds	r3, #1
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b7f      	cmp	r3, #127	; 0x7f
 8006464:	d9e2      	bls.n	800642c <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2201      	movs	r2, #1
 800646c:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2200      	movs	r2, #0
 8006474:	705a      	strb	r2, [r3, #1]

	return true;
 8006476:	2301      	movs	r3, #1
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <tmc2209_restore+0x16>
		return false;
 8006496:	2300      	movs	r3, #0
 8006498:	e008      	b.n	80064ac <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2202      	movs	r2, #2
 80064a0:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2200      	movs	r2, #0
 80064a8:	705a      	strb	r2, [r3, #1]

	return true;
 80064aa:	2301      	movs	r3, #1
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <__errno>:
 80064b8:	4b01      	ldr	r3, [pc, #4]	; (80064c0 <__errno+0x8>)
 80064ba:	6818      	ldr	r0, [r3, #0]
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	2000000c 	.word	0x2000000c

080064c4 <__libc_init_array>:
 80064c4:	b570      	push	{r4, r5, r6, lr}
 80064c6:	4d0d      	ldr	r5, [pc, #52]	; (80064fc <__libc_init_array+0x38>)
 80064c8:	4c0d      	ldr	r4, [pc, #52]	; (8006500 <__libc_init_array+0x3c>)
 80064ca:	1b64      	subs	r4, r4, r5
 80064cc:	10a4      	asrs	r4, r4, #2
 80064ce:	2600      	movs	r6, #0
 80064d0:	42a6      	cmp	r6, r4
 80064d2:	d109      	bne.n	80064e8 <__libc_init_array+0x24>
 80064d4:	4d0b      	ldr	r5, [pc, #44]	; (8006504 <__libc_init_array+0x40>)
 80064d6:	4c0c      	ldr	r4, [pc, #48]	; (8006508 <__libc_init_array+0x44>)
 80064d8:	f001 f8fa 	bl	80076d0 <_init>
 80064dc:	1b64      	subs	r4, r4, r5
 80064de:	10a4      	asrs	r4, r4, #2
 80064e0:	2600      	movs	r6, #0
 80064e2:	42a6      	cmp	r6, r4
 80064e4:	d105      	bne.n	80064f2 <__libc_init_array+0x2e>
 80064e6:	bd70      	pop	{r4, r5, r6, pc}
 80064e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ec:	4798      	blx	r3
 80064ee:	3601      	adds	r6, #1
 80064f0:	e7ee      	b.n	80064d0 <__libc_init_array+0xc>
 80064f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f6:	4798      	blx	r3
 80064f8:	3601      	adds	r6, #1
 80064fa:	e7f2      	b.n	80064e2 <__libc_init_array+0x1e>
 80064fc:	08007bd4 	.word	0x08007bd4
 8006500:	08007bd4 	.word	0x08007bd4
 8006504:	08007bd4 	.word	0x08007bd4
 8006508:	08007bd8 	.word	0x08007bd8

0800650c <memset>:
 800650c:	4402      	add	r2, r0
 800650e:	4603      	mov	r3, r0
 8006510:	4293      	cmp	r3, r2
 8006512:	d100      	bne.n	8006516 <memset+0xa>
 8006514:	4770      	bx	lr
 8006516:	f803 1b01 	strb.w	r1, [r3], #1
 800651a:	e7f9      	b.n	8006510 <memset+0x4>

0800651c <iprintf>:
 800651c:	b40f      	push	{r0, r1, r2, r3}
 800651e:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <iprintf+0x2c>)
 8006520:	b513      	push	{r0, r1, r4, lr}
 8006522:	681c      	ldr	r4, [r3, #0]
 8006524:	b124      	cbz	r4, 8006530 <iprintf+0x14>
 8006526:	69a3      	ldr	r3, [r4, #24]
 8006528:	b913      	cbnz	r3, 8006530 <iprintf+0x14>
 800652a:	4620      	mov	r0, r4
 800652c:	f000 fb2c 	bl	8006b88 <__sinit>
 8006530:	ab05      	add	r3, sp, #20
 8006532:	9a04      	ldr	r2, [sp, #16]
 8006534:	68a1      	ldr	r1, [r4, #8]
 8006536:	9301      	str	r3, [sp, #4]
 8006538:	4620      	mov	r0, r4
 800653a:	f000 fd3d 	bl	8006fb8 <_vfiprintf_r>
 800653e:	b002      	add	sp, #8
 8006540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006544:	b004      	add	sp, #16
 8006546:	4770      	bx	lr
 8006548:	2000000c 	.word	0x2000000c

0800654c <_puts_r>:
 800654c:	b570      	push	{r4, r5, r6, lr}
 800654e:	460e      	mov	r6, r1
 8006550:	4605      	mov	r5, r0
 8006552:	b118      	cbz	r0, 800655c <_puts_r+0x10>
 8006554:	6983      	ldr	r3, [r0, #24]
 8006556:	b90b      	cbnz	r3, 800655c <_puts_r+0x10>
 8006558:	f000 fb16 	bl	8006b88 <__sinit>
 800655c:	69ab      	ldr	r3, [r5, #24]
 800655e:	68ac      	ldr	r4, [r5, #8]
 8006560:	b913      	cbnz	r3, 8006568 <_puts_r+0x1c>
 8006562:	4628      	mov	r0, r5
 8006564:	f000 fb10 	bl	8006b88 <__sinit>
 8006568:	4b2c      	ldr	r3, [pc, #176]	; (800661c <_puts_r+0xd0>)
 800656a:	429c      	cmp	r4, r3
 800656c:	d120      	bne.n	80065b0 <_puts_r+0x64>
 800656e:	686c      	ldr	r4, [r5, #4]
 8006570:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006572:	07db      	lsls	r3, r3, #31
 8006574:	d405      	bmi.n	8006582 <_puts_r+0x36>
 8006576:	89a3      	ldrh	r3, [r4, #12]
 8006578:	0598      	lsls	r0, r3, #22
 800657a:	d402      	bmi.n	8006582 <_puts_r+0x36>
 800657c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800657e:	f000 fba1 	bl	8006cc4 <__retarget_lock_acquire_recursive>
 8006582:	89a3      	ldrh	r3, [r4, #12]
 8006584:	0719      	lsls	r1, r3, #28
 8006586:	d51d      	bpl.n	80065c4 <_puts_r+0x78>
 8006588:	6923      	ldr	r3, [r4, #16]
 800658a:	b1db      	cbz	r3, 80065c4 <_puts_r+0x78>
 800658c:	3e01      	subs	r6, #1
 800658e:	68a3      	ldr	r3, [r4, #8]
 8006590:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006594:	3b01      	subs	r3, #1
 8006596:	60a3      	str	r3, [r4, #8]
 8006598:	bb39      	cbnz	r1, 80065ea <_puts_r+0x9e>
 800659a:	2b00      	cmp	r3, #0
 800659c:	da38      	bge.n	8006610 <_puts_r+0xc4>
 800659e:	4622      	mov	r2, r4
 80065a0:	210a      	movs	r1, #10
 80065a2:	4628      	mov	r0, r5
 80065a4:	f000 f916 	bl	80067d4 <__swbuf_r>
 80065a8:	3001      	adds	r0, #1
 80065aa:	d011      	beq.n	80065d0 <_puts_r+0x84>
 80065ac:	250a      	movs	r5, #10
 80065ae:	e011      	b.n	80065d4 <_puts_r+0x88>
 80065b0:	4b1b      	ldr	r3, [pc, #108]	; (8006620 <_puts_r+0xd4>)
 80065b2:	429c      	cmp	r4, r3
 80065b4:	d101      	bne.n	80065ba <_puts_r+0x6e>
 80065b6:	68ac      	ldr	r4, [r5, #8]
 80065b8:	e7da      	b.n	8006570 <_puts_r+0x24>
 80065ba:	4b1a      	ldr	r3, [pc, #104]	; (8006624 <_puts_r+0xd8>)
 80065bc:	429c      	cmp	r4, r3
 80065be:	bf08      	it	eq
 80065c0:	68ec      	ldreq	r4, [r5, #12]
 80065c2:	e7d5      	b.n	8006570 <_puts_r+0x24>
 80065c4:	4621      	mov	r1, r4
 80065c6:	4628      	mov	r0, r5
 80065c8:	f000 f956 	bl	8006878 <__swsetup_r>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	d0dd      	beq.n	800658c <_puts_r+0x40>
 80065d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80065d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065d6:	07da      	lsls	r2, r3, #31
 80065d8:	d405      	bmi.n	80065e6 <_puts_r+0x9a>
 80065da:	89a3      	ldrh	r3, [r4, #12]
 80065dc:	059b      	lsls	r3, r3, #22
 80065de:	d402      	bmi.n	80065e6 <_puts_r+0x9a>
 80065e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065e2:	f000 fb70 	bl	8006cc6 <__retarget_lock_release_recursive>
 80065e6:	4628      	mov	r0, r5
 80065e8:	bd70      	pop	{r4, r5, r6, pc}
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	da04      	bge.n	80065f8 <_puts_r+0xac>
 80065ee:	69a2      	ldr	r2, [r4, #24]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	dc06      	bgt.n	8006602 <_puts_r+0xb6>
 80065f4:	290a      	cmp	r1, #10
 80065f6:	d004      	beq.n	8006602 <_puts_r+0xb6>
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	1c5a      	adds	r2, r3, #1
 80065fc:	6022      	str	r2, [r4, #0]
 80065fe:	7019      	strb	r1, [r3, #0]
 8006600:	e7c5      	b.n	800658e <_puts_r+0x42>
 8006602:	4622      	mov	r2, r4
 8006604:	4628      	mov	r0, r5
 8006606:	f000 f8e5 	bl	80067d4 <__swbuf_r>
 800660a:	3001      	adds	r0, #1
 800660c:	d1bf      	bne.n	800658e <_puts_r+0x42>
 800660e:	e7df      	b.n	80065d0 <_puts_r+0x84>
 8006610:	6823      	ldr	r3, [r4, #0]
 8006612:	250a      	movs	r5, #10
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	6022      	str	r2, [r4, #0]
 8006618:	701d      	strb	r5, [r3, #0]
 800661a:	e7db      	b.n	80065d4 <_puts_r+0x88>
 800661c:	08007b60 	.word	0x08007b60
 8006620:	08007b80 	.word	0x08007b80
 8006624:	08007b40 	.word	0x08007b40

08006628 <puts>:
 8006628:	4b02      	ldr	r3, [pc, #8]	; (8006634 <puts+0xc>)
 800662a:	4601      	mov	r1, r0
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	f7ff bf8d 	b.w	800654c <_puts_r>
 8006632:	bf00      	nop
 8006634:	2000000c 	.word	0x2000000c

08006638 <setbuf>:
 8006638:	2900      	cmp	r1, #0
 800663a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800663e:	bf0c      	ite	eq
 8006640:	2202      	moveq	r2, #2
 8006642:	2200      	movne	r2, #0
 8006644:	f000 b800 	b.w	8006648 <setvbuf>

08006648 <setvbuf>:
 8006648:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800664c:	461d      	mov	r5, r3
 800664e:	4b5d      	ldr	r3, [pc, #372]	; (80067c4 <setvbuf+0x17c>)
 8006650:	681f      	ldr	r7, [r3, #0]
 8006652:	4604      	mov	r4, r0
 8006654:	460e      	mov	r6, r1
 8006656:	4690      	mov	r8, r2
 8006658:	b127      	cbz	r7, 8006664 <setvbuf+0x1c>
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	b913      	cbnz	r3, 8006664 <setvbuf+0x1c>
 800665e:	4638      	mov	r0, r7
 8006660:	f000 fa92 	bl	8006b88 <__sinit>
 8006664:	4b58      	ldr	r3, [pc, #352]	; (80067c8 <setvbuf+0x180>)
 8006666:	429c      	cmp	r4, r3
 8006668:	d167      	bne.n	800673a <setvbuf+0xf2>
 800666a:	687c      	ldr	r4, [r7, #4]
 800666c:	f1b8 0f02 	cmp.w	r8, #2
 8006670:	d006      	beq.n	8006680 <setvbuf+0x38>
 8006672:	f1b8 0f01 	cmp.w	r8, #1
 8006676:	f200 809f 	bhi.w	80067b8 <setvbuf+0x170>
 800667a:	2d00      	cmp	r5, #0
 800667c:	f2c0 809c 	blt.w	80067b8 <setvbuf+0x170>
 8006680:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006682:	07db      	lsls	r3, r3, #31
 8006684:	d405      	bmi.n	8006692 <setvbuf+0x4a>
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	0598      	lsls	r0, r3, #22
 800668a:	d402      	bmi.n	8006692 <setvbuf+0x4a>
 800668c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800668e:	f000 fb19 	bl	8006cc4 <__retarget_lock_acquire_recursive>
 8006692:	4621      	mov	r1, r4
 8006694:	4638      	mov	r0, r7
 8006696:	f000 f9e3 	bl	8006a60 <_fflush_r>
 800669a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800669c:	b141      	cbz	r1, 80066b0 <setvbuf+0x68>
 800669e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066a2:	4299      	cmp	r1, r3
 80066a4:	d002      	beq.n	80066ac <setvbuf+0x64>
 80066a6:	4638      	mov	r0, r7
 80066a8:	f000 fb7c 	bl	8006da4 <_free_r>
 80066ac:	2300      	movs	r3, #0
 80066ae:	6363      	str	r3, [r4, #52]	; 0x34
 80066b0:	2300      	movs	r3, #0
 80066b2:	61a3      	str	r3, [r4, #24]
 80066b4:	6063      	str	r3, [r4, #4]
 80066b6:	89a3      	ldrh	r3, [r4, #12]
 80066b8:	0619      	lsls	r1, r3, #24
 80066ba:	d503      	bpl.n	80066c4 <setvbuf+0x7c>
 80066bc:	6921      	ldr	r1, [r4, #16]
 80066be:	4638      	mov	r0, r7
 80066c0:	f000 fb70 	bl	8006da4 <_free_r>
 80066c4:	89a3      	ldrh	r3, [r4, #12]
 80066c6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80066ca:	f023 0303 	bic.w	r3, r3, #3
 80066ce:	f1b8 0f02 	cmp.w	r8, #2
 80066d2:	81a3      	strh	r3, [r4, #12]
 80066d4:	d06c      	beq.n	80067b0 <setvbuf+0x168>
 80066d6:	ab01      	add	r3, sp, #4
 80066d8:	466a      	mov	r2, sp
 80066da:	4621      	mov	r1, r4
 80066dc:	4638      	mov	r0, r7
 80066de:	f000 faf3 	bl	8006cc8 <__swhatbuf_r>
 80066e2:	89a3      	ldrh	r3, [r4, #12]
 80066e4:	4318      	orrs	r0, r3
 80066e6:	81a0      	strh	r0, [r4, #12]
 80066e8:	2d00      	cmp	r5, #0
 80066ea:	d130      	bne.n	800674e <setvbuf+0x106>
 80066ec:	9d00      	ldr	r5, [sp, #0]
 80066ee:	4628      	mov	r0, r5
 80066f0:	f000 fb50 	bl	8006d94 <malloc>
 80066f4:	4606      	mov	r6, r0
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d155      	bne.n	80067a6 <setvbuf+0x15e>
 80066fa:	f8dd 9000 	ldr.w	r9, [sp]
 80066fe:	45a9      	cmp	r9, r5
 8006700:	d14a      	bne.n	8006798 <setvbuf+0x150>
 8006702:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006706:	2200      	movs	r2, #0
 8006708:	60a2      	str	r2, [r4, #8]
 800670a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800670e:	6022      	str	r2, [r4, #0]
 8006710:	6122      	str	r2, [r4, #16]
 8006712:	2201      	movs	r2, #1
 8006714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006718:	6162      	str	r2, [r4, #20]
 800671a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800671c:	f043 0302 	orr.w	r3, r3, #2
 8006720:	07d2      	lsls	r2, r2, #31
 8006722:	81a3      	strh	r3, [r4, #12]
 8006724:	d405      	bmi.n	8006732 <setvbuf+0xea>
 8006726:	f413 7f00 	tst.w	r3, #512	; 0x200
 800672a:	d102      	bne.n	8006732 <setvbuf+0xea>
 800672c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800672e:	f000 faca 	bl	8006cc6 <__retarget_lock_release_recursive>
 8006732:	4628      	mov	r0, r5
 8006734:	b003      	add	sp, #12
 8006736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800673a:	4b24      	ldr	r3, [pc, #144]	; (80067cc <setvbuf+0x184>)
 800673c:	429c      	cmp	r4, r3
 800673e:	d101      	bne.n	8006744 <setvbuf+0xfc>
 8006740:	68bc      	ldr	r4, [r7, #8]
 8006742:	e793      	b.n	800666c <setvbuf+0x24>
 8006744:	4b22      	ldr	r3, [pc, #136]	; (80067d0 <setvbuf+0x188>)
 8006746:	429c      	cmp	r4, r3
 8006748:	bf08      	it	eq
 800674a:	68fc      	ldreq	r4, [r7, #12]
 800674c:	e78e      	b.n	800666c <setvbuf+0x24>
 800674e:	2e00      	cmp	r6, #0
 8006750:	d0cd      	beq.n	80066ee <setvbuf+0xa6>
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	b913      	cbnz	r3, 800675c <setvbuf+0x114>
 8006756:	4638      	mov	r0, r7
 8006758:	f000 fa16 	bl	8006b88 <__sinit>
 800675c:	f1b8 0f01 	cmp.w	r8, #1
 8006760:	bf08      	it	eq
 8006762:	89a3      	ldrheq	r3, [r4, #12]
 8006764:	6026      	str	r6, [r4, #0]
 8006766:	bf04      	itt	eq
 8006768:	f043 0301 	orreq.w	r3, r3, #1
 800676c:	81a3      	strheq	r3, [r4, #12]
 800676e:	89a2      	ldrh	r2, [r4, #12]
 8006770:	f012 0308 	ands.w	r3, r2, #8
 8006774:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006778:	d01c      	beq.n	80067b4 <setvbuf+0x16c>
 800677a:	07d3      	lsls	r3, r2, #31
 800677c:	bf41      	itttt	mi
 800677e:	2300      	movmi	r3, #0
 8006780:	426d      	negmi	r5, r5
 8006782:	60a3      	strmi	r3, [r4, #8]
 8006784:	61a5      	strmi	r5, [r4, #24]
 8006786:	bf58      	it	pl
 8006788:	60a5      	strpl	r5, [r4, #8]
 800678a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800678c:	f015 0501 	ands.w	r5, r5, #1
 8006790:	d115      	bne.n	80067be <setvbuf+0x176>
 8006792:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006796:	e7c8      	b.n	800672a <setvbuf+0xe2>
 8006798:	4648      	mov	r0, r9
 800679a:	f000 fafb 	bl	8006d94 <malloc>
 800679e:	4606      	mov	r6, r0
 80067a0:	2800      	cmp	r0, #0
 80067a2:	d0ae      	beq.n	8006702 <setvbuf+0xba>
 80067a4:	464d      	mov	r5, r9
 80067a6:	89a3      	ldrh	r3, [r4, #12]
 80067a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ac:	81a3      	strh	r3, [r4, #12]
 80067ae:	e7d0      	b.n	8006752 <setvbuf+0x10a>
 80067b0:	2500      	movs	r5, #0
 80067b2:	e7a8      	b.n	8006706 <setvbuf+0xbe>
 80067b4:	60a3      	str	r3, [r4, #8]
 80067b6:	e7e8      	b.n	800678a <setvbuf+0x142>
 80067b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80067bc:	e7b9      	b.n	8006732 <setvbuf+0xea>
 80067be:	2500      	movs	r5, #0
 80067c0:	e7b7      	b.n	8006732 <setvbuf+0xea>
 80067c2:	bf00      	nop
 80067c4:	2000000c 	.word	0x2000000c
 80067c8:	08007b60 	.word	0x08007b60
 80067cc:	08007b80 	.word	0x08007b80
 80067d0:	08007b40 	.word	0x08007b40

080067d4 <__swbuf_r>:
 80067d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d6:	460e      	mov	r6, r1
 80067d8:	4614      	mov	r4, r2
 80067da:	4605      	mov	r5, r0
 80067dc:	b118      	cbz	r0, 80067e6 <__swbuf_r+0x12>
 80067de:	6983      	ldr	r3, [r0, #24]
 80067e0:	b90b      	cbnz	r3, 80067e6 <__swbuf_r+0x12>
 80067e2:	f000 f9d1 	bl	8006b88 <__sinit>
 80067e6:	4b21      	ldr	r3, [pc, #132]	; (800686c <__swbuf_r+0x98>)
 80067e8:	429c      	cmp	r4, r3
 80067ea:	d12b      	bne.n	8006844 <__swbuf_r+0x70>
 80067ec:	686c      	ldr	r4, [r5, #4]
 80067ee:	69a3      	ldr	r3, [r4, #24]
 80067f0:	60a3      	str	r3, [r4, #8]
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	071a      	lsls	r2, r3, #28
 80067f6:	d52f      	bpl.n	8006858 <__swbuf_r+0x84>
 80067f8:	6923      	ldr	r3, [r4, #16]
 80067fa:	b36b      	cbz	r3, 8006858 <__swbuf_r+0x84>
 80067fc:	6923      	ldr	r3, [r4, #16]
 80067fe:	6820      	ldr	r0, [r4, #0]
 8006800:	1ac0      	subs	r0, r0, r3
 8006802:	6963      	ldr	r3, [r4, #20]
 8006804:	b2f6      	uxtb	r6, r6
 8006806:	4283      	cmp	r3, r0
 8006808:	4637      	mov	r7, r6
 800680a:	dc04      	bgt.n	8006816 <__swbuf_r+0x42>
 800680c:	4621      	mov	r1, r4
 800680e:	4628      	mov	r0, r5
 8006810:	f000 f926 	bl	8006a60 <_fflush_r>
 8006814:	bb30      	cbnz	r0, 8006864 <__swbuf_r+0x90>
 8006816:	68a3      	ldr	r3, [r4, #8]
 8006818:	3b01      	subs	r3, #1
 800681a:	60a3      	str	r3, [r4, #8]
 800681c:	6823      	ldr	r3, [r4, #0]
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	6022      	str	r2, [r4, #0]
 8006822:	701e      	strb	r6, [r3, #0]
 8006824:	6963      	ldr	r3, [r4, #20]
 8006826:	3001      	adds	r0, #1
 8006828:	4283      	cmp	r3, r0
 800682a:	d004      	beq.n	8006836 <__swbuf_r+0x62>
 800682c:	89a3      	ldrh	r3, [r4, #12]
 800682e:	07db      	lsls	r3, r3, #31
 8006830:	d506      	bpl.n	8006840 <__swbuf_r+0x6c>
 8006832:	2e0a      	cmp	r6, #10
 8006834:	d104      	bne.n	8006840 <__swbuf_r+0x6c>
 8006836:	4621      	mov	r1, r4
 8006838:	4628      	mov	r0, r5
 800683a:	f000 f911 	bl	8006a60 <_fflush_r>
 800683e:	b988      	cbnz	r0, 8006864 <__swbuf_r+0x90>
 8006840:	4638      	mov	r0, r7
 8006842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006844:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <__swbuf_r+0x9c>)
 8006846:	429c      	cmp	r4, r3
 8006848:	d101      	bne.n	800684e <__swbuf_r+0x7a>
 800684a:	68ac      	ldr	r4, [r5, #8]
 800684c:	e7cf      	b.n	80067ee <__swbuf_r+0x1a>
 800684e:	4b09      	ldr	r3, [pc, #36]	; (8006874 <__swbuf_r+0xa0>)
 8006850:	429c      	cmp	r4, r3
 8006852:	bf08      	it	eq
 8006854:	68ec      	ldreq	r4, [r5, #12]
 8006856:	e7ca      	b.n	80067ee <__swbuf_r+0x1a>
 8006858:	4621      	mov	r1, r4
 800685a:	4628      	mov	r0, r5
 800685c:	f000 f80c 	bl	8006878 <__swsetup_r>
 8006860:	2800      	cmp	r0, #0
 8006862:	d0cb      	beq.n	80067fc <__swbuf_r+0x28>
 8006864:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006868:	e7ea      	b.n	8006840 <__swbuf_r+0x6c>
 800686a:	bf00      	nop
 800686c:	08007b60 	.word	0x08007b60
 8006870:	08007b80 	.word	0x08007b80
 8006874:	08007b40 	.word	0x08007b40

08006878 <__swsetup_r>:
 8006878:	4b32      	ldr	r3, [pc, #200]	; (8006944 <__swsetup_r+0xcc>)
 800687a:	b570      	push	{r4, r5, r6, lr}
 800687c:	681d      	ldr	r5, [r3, #0]
 800687e:	4606      	mov	r6, r0
 8006880:	460c      	mov	r4, r1
 8006882:	b125      	cbz	r5, 800688e <__swsetup_r+0x16>
 8006884:	69ab      	ldr	r3, [r5, #24]
 8006886:	b913      	cbnz	r3, 800688e <__swsetup_r+0x16>
 8006888:	4628      	mov	r0, r5
 800688a:	f000 f97d 	bl	8006b88 <__sinit>
 800688e:	4b2e      	ldr	r3, [pc, #184]	; (8006948 <__swsetup_r+0xd0>)
 8006890:	429c      	cmp	r4, r3
 8006892:	d10f      	bne.n	80068b4 <__swsetup_r+0x3c>
 8006894:	686c      	ldr	r4, [r5, #4]
 8006896:	89a3      	ldrh	r3, [r4, #12]
 8006898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800689c:	0719      	lsls	r1, r3, #28
 800689e:	d42c      	bmi.n	80068fa <__swsetup_r+0x82>
 80068a0:	06dd      	lsls	r5, r3, #27
 80068a2:	d411      	bmi.n	80068c8 <__swsetup_r+0x50>
 80068a4:	2309      	movs	r3, #9
 80068a6:	6033      	str	r3, [r6, #0]
 80068a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068ac:	81a3      	strh	r3, [r4, #12]
 80068ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068b2:	e03e      	b.n	8006932 <__swsetup_r+0xba>
 80068b4:	4b25      	ldr	r3, [pc, #148]	; (800694c <__swsetup_r+0xd4>)
 80068b6:	429c      	cmp	r4, r3
 80068b8:	d101      	bne.n	80068be <__swsetup_r+0x46>
 80068ba:	68ac      	ldr	r4, [r5, #8]
 80068bc:	e7eb      	b.n	8006896 <__swsetup_r+0x1e>
 80068be:	4b24      	ldr	r3, [pc, #144]	; (8006950 <__swsetup_r+0xd8>)
 80068c0:	429c      	cmp	r4, r3
 80068c2:	bf08      	it	eq
 80068c4:	68ec      	ldreq	r4, [r5, #12]
 80068c6:	e7e6      	b.n	8006896 <__swsetup_r+0x1e>
 80068c8:	0758      	lsls	r0, r3, #29
 80068ca:	d512      	bpl.n	80068f2 <__swsetup_r+0x7a>
 80068cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068ce:	b141      	cbz	r1, 80068e2 <__swsetup_r+0x6a>
 80068d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068d4:	4299      	cmp	r1, r3
 80068d6:	d002      	beq.n	80068de <__swsetup_r+0x66>
 80068d8:	4630      	mov	r0, r6
 80068da:	f000 fa63 	bl	8006da4 <_free_r>
 80068de:	2300      	movs	r3, #0
 80068e0:	6363      	str	r3, [r4, #52]	; 0x34
 80068e2:	89a3      	ldrh	r3, [r4, #12]
 80068e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068e8:	81a3      	strh	r3, [r4, #12]
 80068ea:	2300      	movs	r3, #0
 80068ec:	6063      	str	r3, [r4, #4]
 80068ee:	6923      	ldr	r3, [r4, #16]
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	89a3      	ldrh	r3, [r4, #12]
 80068f4:	f043 0308 	orr.w	r3, r3, #8
 80068f8:	81a3      	strh	r3, [r4, #12]
 80068fa:	6923      	ldr	r3, [r4, #16]
 80068fc:	b94b      	cbnz	r3, 8006912 <__swsetup_r+0x9a>
 80068fe:	89a3      	ldrh	r3, [r4, #12]
 8006900:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006908:	d003      	beq.n	8006912 <__swsetup_r+0x9a>
 800690a:	4621      	mov	r1, r4
 800690c:	4630      	mov	r0, r6
 800690e:	f000 fa01 	bl	8006d14 <__smakebuf_r>
 8006912:	89a0      	ldrh	r0, [r4, #12]
 8006914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006918:	f010 0301 	ands.w	r3, r0, #1
 800691c:	d00a      	beq.n	8006934 <__swsetup_r+0xbc>
 800691e:	2300      	movs	r3, #0
 8006920:	60a3      	str	r3, [r4, #8]
 8006922:	6963      	ldr	r3, [r4, #20]
 8006924:	425b      	negs	r3, r3
 8006926:	61a3      	str	r3, [r4, #24]
 8006928:	6923      	ldr	r3, [r4, #16]
 800692a:	b943      	cbnz	r3, 800693e <__swsetup_r+0xc6>
 800692c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006930:	d1ba      	bne.n	80068a8 <__swsetup_r+0x30>
 8006932:	bd70      	pop	{r4, r5, r6, pc}
 8006934:	0781      	lsls	r1, r0, #30
 8006936:	bf58      	it	pl
 8006938:	6963      	ldrpl	r3, [r4, #20]
 800693a:	60a3      	str	r3, [r4, #8]
 800693c:	e7f4      	b.n	8006928 <__swsetup_r+0xb0>
 800693e:	2000      	movs	r0, #0
 8006940:	e7f7      	b.n	8006932 <__swsetup_r+0xba>
 8006942:	bf00      	nop
 8006944:	2000000c 	.word	0x2000000c
 8006948:	08007b60 	.word	0x08007b60
 800694c:	08007b80 	.word	0x08007b80
 8006950:	08007b40 	.word	0x08007b40

08006954 <__sflush_r>:
 8006954:	898a      	ldrh	r2, [r1, #12]
 8006956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800695a:	4605      	mov	r5, r0
 800695c:	0710      	lsls	r0, r2, #28
 800695e:	460c      	mov	r4, r1
 8006960:	d458      	bmi.n	8006a14 <__sflush_r+0xc0>
 8006962:	684b      	ldr	r3, [r1, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	dc05      	bgt.n	8006974 <__sflush_r+0x20>
 8006968:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800696a:	2b00      	cmp	r3, #0
 800696c:	dc02      	bgt.n	8006974 <__sflush_r+0x20>
 800696e:	2000      	movs	r0, #0
 8006970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006976:	2e00      	cmp	r6, #0
 8006978:	d0f9      	beq.n	800696e <__sflush_r+0x1a>
 800697a:	2300      	movs	r3, #0
 800697c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006980:	682f      	ldr	r7, [r5, #0]
 8006982:	602b      	str	r3, [r5, #0]
 8006984:	d032      	beq.n	80069ec <__sflush_r+0x98>
 8006986:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006988:	89a3      	ldrh	r3, [r4, #12]
 800698a:	075a      	lsls	r2, r3, #29
 800698c:	d505      	bpl.n	800699a <__sflush_r+0x46>
 800698e:	6863      	ldr	r3, [r4, #4]
 8006990:	1ac0      	subs	r0, r0, r3
 8006992:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006994:	b10b      	cbz	r3, 800699a <__sflush_r+0x46>
 8006996:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006998:	1ac0      	subs	r0, r0, r3
 800699a:	2300      	movs	r3, #0
 800699c:	4602      	mov	r2, r0
 800699e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069a0:	6a21      	ldr	r1, [r4, #32]
 80069a2:	4628      	mov	r0, r5
 80069a4:	47b0      	blx	r6
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	89a3      	ldrh	r3, [r4, #12]
 80069aa:	d106      	bne.n	80069ba <__sflush_r+0x66>
 80069ac:	6829      	ldr	r1, [r5, #0]
 80069ae:	291d      	cmp	r1, #29
 80069b0:	d82c      	bhi.n	8006a0c <__sflush_r+0xb8>
 80069b2:	4a2a      	ldr	r2, [pc, #168]	; (8006a5c <__sflush_r+0x108>)
 80069b4:	40ca      	lsrs	r2, r1
 80069b6:	07d6      	lsls	r6, r2, #31
 80069b8:	d528      	bpl.n	8006a0c <__sflush_r+0xb8>
 80069ba:	2200      	movs	r2, #0
 80069bc:	6062      	str	r2, [r4, #4]
 80069be:	04d9      	lsls	r1, r3, #19
 80069c0:	6922      	ldr	r2, [r4, #16]
 80069c2:	6022      	str	r2, [r4, #0]
 80069c4:	d504      	bpl.n	80069d0 <__sflush_r+0x7c>
 80069c6:	1c42      	adds	r2, r0, #1
 80069c8:	d101      	bne.n	80069ce <__sflush_r+0x7a>
 80069ca:	682b      	ldr	r3, [r5, #0]
 80069cc:	b903      	cbnz	r3, 80069d0 <__sflush_r+0x7c>
 80069ce:	6560      	str	r0, [r4, #84]	; 0x54
 80069d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069d2:	602f      	str	r7, [r5, #0]
 80069d4:	2900      	cmp	r1, #0
 80069d6:	d0ca      	beq.n	800696e <__sflush_r+0x1a>
 80069d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069dc:	4299      	cmp	r1, r3
 80069de:	d002      	beq.n	80069e6 <__sflush_r+0x92>
 80069e0:	4628      	mov	r0, r5
 80069e2:	f000 f9df 	bl	8006da4 <_free_r>
 80069e6:	2000      	movs	r0, #0
 80069e8:	6360      	str	r0, [r4, #52]	; 0x34
 80069ea:	e7c1      	b.n	8006970 <__sflush_r+0x1c>
 80069ec:	6a21      	ldr	r1, [r4, #32]
 80069ee:	2301      	movs	r3, #1
 80069f0:	4628      	mov	r0, r5
 80069f2:	47b0      	blx	r6
 80069f4:	1c41      	adds	r1, r0, #1
 80069f6:	d1c7      	bne.n	8006988 <__sflush_r+0x34>
 80069f8:	682b      	ldr	r3, [r5, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0c4      	beq.n	8006988 <__sflush_r+0x34>
 80069fe:	2b1d      	cmp	r3, #29
 8006a00:	d001      	beq.n	8006a06 <__sflush_r+0xb2>
 8006a02:	2b16      	cmp	r3, #22
 8006a04:	d101      	bne.n	8006a0a <__sflush_r+0xb6>
 8006a06:	602f      	str	r7, [r5, #0]
 8006a08:	e7b1      	b.n	800696e <__sflush_r+0x1a>
 8006a0a:	89a3      	ldrh	r3, [r4, #12]
 8006a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a10:	81a3      	strh	r3, [r4, #12]
 8006a12:	e7ad      	b.n	8006970 <__sflush_r+0x1c>
 8006a14:	690f      	ldr	r7, [r1, #16]
 8006a16:	2f00      	cmp	r7, #0
 8006a18:	d0a9      	beq.n	800696e <__sflush_r+0x1a>
 8006a1a:	0793      	lsls	r3, r2, #30
 8006a1c:	680e      	ldr	r6, [r1, #0]
 8006a1e:	bf08      	it	eq
 8006a20:	694b      	ldreq	r3, [r1, #20]
 8006a22:	600f      	str	r7, [r1, #0]
 8006a24:	bf18      	it	ne
 8006a26:	2300      	movne	r3, #0
 8006a28:	eba6 0807 	sub.w	r8, r6, r7
 8006a2c:	608b      	str	r3, [r1, #8]
 8006a2e:	f1b8 0f00 	cmp.w	r8, #0
 8006a32:	dd9c      	ble.n	800696e <__sflush_r+0x1a>
 8006a34:	6a21      	ldr	r1, [r4, #32]
 8006a36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a38:	4643      	mov	r3, r8
 8006a3a:	463a      	mov	r2, r7
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	47b0      	blx	r6
 8006a40:	2800      	cmp	r0, #0
 8006a42:	dc06      	bgt.n	8006a52 <__sflush_r+0xfe>
 8006a44:	89a3      	ldrh	r3, [r4, #12]
 8006a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a4a:	81a3      	strh	r3, [r4, #12]
 8006a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a50:	e78e      	b.n	8006970 <__sflush_r+0x1c>
 8006a52:	4407      	add	r7, r0
 8006a54:	eba8 0800 	sub.w	r8, r8, r0
 8006a58:	e7e9      	b.n	8006a2e <__sflush_r+0xda>
 8006a5a:	bf00      	nop
 8006a5c:	20400001 	.word	0x20400001

08006a60 <_fflush_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	690b      	ldr	r3, [r1, #16]
 8006a64:	4605      	mov	r5, r0
 8006a66:	460c      	mov	r4, r1
 8006a68:	b913      	cbnz	r3, 8006a70 <_fflush_r+0x10>
 8006a6a:	2500      	movs	r5, #0
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	bd38      	pop	{r3, r4, r5, pc}
 8006a70:	b118      	cbz	r0, 8006a7a <_fflush_r+0x1a>
 8006a72:	6983      	ldr	r3, [r0, #24]
 8006a74:	b90b      	cbnz	r3, 8006a7a <_fflush_r+0x1a>
 8006a76:	f000 f887 	bl	8006b88 <__sinit>
 8006a7a:	4b14      	ldr	r3, [pc, #80]	; (8006acc <_fflush_r+0x6c>)
 8006a7c:	429c      	cmp	r4, r3
 8006a7e:	d11b      	bne.n	8006ab8 <_fflush_r+0x58>
 8006a80:	686c      	ldr	r4, [r5, #4]
 8006a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d0ef      	beq.n	8006a6a <_fflush_r+0xa>
 8006a8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a8c:	07d0      	lsls	r0, r2, #31
 8006a8e:	d404      	bmi.n	8006a9a <_fflush_r+0x3a>
 8006a90:	0599      	lsls	r1, r3, #22
 8006a92:	d402      	bmi.n	8006a9a <_fflush_r+0x3a>
 8006a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a96:	f000 f915 	bl	8006cc4 <__retarget_lock_acquire_recursive>
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	f7ff ff59 	bl	8006954 <__sflush_r>
 8006aa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006aa4:	07da      	lsls	r2, r3, #31
 8006aa6:	4605      	mov	r5, r0
 8006aa8:	d4e0      	bmi.n	8006a6c <_fflush_r+0xc>
 8006aaa:	89a3      	ldrh	r3, [r4, #12]
 8006aac:	059b      	lsls	r3, r3, #22
 8006aae:	d4dd      	bmi.n	8006a6c <_fflush_r+0xc>
 8006ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ab2:	f000 f908 	bl	8006cc6 <__retarget_lock_release_recursive>
 8006ab6:	e7d9      	b.n	8006a6c <_fflush_r+0xc>
 8006ab8:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <_fflush_r+0x70>)
 8006aba:	429c      	cmp	r4, r3
 8006abc:	d101      	bne.n	8006ac2 <_fflush_r+0x62>
 8006abe:	68ac      	ldr	r4, [r5, #8]
 8006ac0:	e7df      	b.n	8006a82 <_fflush_r+0x22>
 8006ac2:	4b04      	ldr	r3, [pc, #16]	; (8006ad4 <_fflush_r+0x74>)
 8006ac4:	429c      	cmp	r4, r3
 8006ac6:	bf08      	it	eq
 8006ac8:	68ec      	ldreq	r4, [r5, #12]
 8006aca:	e7da      	b.n	8006a82 <_fflush_r+0x22>
 8006acc:	08007b60 	.word	0x08007b60
 8006ad0:	08007b80 	.word	0x08007b80
 8006ad4:	08007b40 	.word	0x08007b40

08006ad8 <std>:
 8006ad8:	2300      	movs	r3, #0
 8006ada:	b510      	push	{r4, lr}
 8006adc:	4604      	mov	r4, r0
 8006ade:	e9c0 3300 	strd	r3, r3, [r0]
 8006ae2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ae6:	6083      	str	r3, [r0, #8]
 8006ae8:	8181      	strh	r1, [r0, #12]
 8006aea:	6643      	str	r3, [r0, #100]	; 0x64
 8006aec:	81c2      	strh	r2, [r0, #14]
 8006aee:	6183      	str	r3, [r0, #24]
 8006af0:	4619      	mov	r1, r3
 8006af2:	2208      	movs	r2, #8
 8006af4:	305c      	adds	r0, #92	; 0x5c
 8006af6:	f7ff fd09 	bl	800650c <memset>
 8006afa:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <std+0x38>)
 8006afc:	6263      	str	r3, [r4, #36]	; 0x24
 8006afe:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <std+0x3c>)
 8006b00:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b02:	4b05      	ldr	r3, [pc, #20]	; (8006b18 <std+0x40>)
 8006b04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b06:	4b05      	ldr	r3, [pc, #20]	; (8006b1c <std+0x44>)
 8006b08:	6224      	str	r4, [r4, #32]
 8006b0a:	6323      	str	r3, [r4, #48]	; 0x30
 8006b0c:	bd10      	pop	{r4, pc}
 8006b0e:	bf00      	nop
 8006b10:	08007561 	.word	0x08007561
 8006b14:	08007583 	.word	0x08007583
 8006b18:	080075bb 	.word	0x080075bb
 8006b1c:	080075df 	.word	0x080075df

08006b20 <_cleanup_r>:
 8006b20:	4901      	ldr	r1, [pc, #4]	; (8006b28 <_cleanup_r+0x8>)
 8006b22:	f000 b8af 	b.w	8006c84 <_fwalk_reent>
 8006b26:	bf00      	nop
 8006b28:	08006a61 	.word	0x08006a61

08006b2c <__sfmoreglue>:
 8006b2c:	b570      	push	{r4, r5, r6, lr}
 8006b2e:	2268      	movs	r2, #104	; 0x68
 8006b30:	1e4d      	subs	r5, r1, #1
 8006b32:	4355      	muls	r5, r2
 8006b34:	460e      	mov	r6, r1
 8006b36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b3a:	f000 f99f 	bl	8006e7c <_malloc_r>
 8006b3e:	4604      	mov	r4, r0
 8006b40:	b140      	cbz	r0, 8006b54 <__sfmoreglue+0x28>
 8006b42:	2100      	movs	r1, #0
 8006b44:	e9c0 1600 	strd	r1, r6, [r0]
 8006b48:	300c      	adds	r0, #12
 8006b4a:	60a0      	str	r0, [r4, #8]
 8006b4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b50:	f7ff fcdc 	bl	800650c <memset>
 8006b54:	4620      	mov	r0, r4
 8006b56:	bd70      	pop	{r4, r5, r6, pc}

08006b58 <__sfp_lock_acquire>:
 8006b58:	4801      	ldr	r0, [pc, #4]	; (8006b60 <__sfp_lock_acquire+0x8>)
 8006b5a:	f000 b8b3 	b.w	8006cc4 <__retarget_lock_acquire_recursive>
 8006b5e:	bf00      	nop
 8006b60:	200008e1 	.word	0x200008e1

08006b64 <__sfp_lock_release>:
 8006b64:	4801      	ldr	r0, [pc, #4]	; (8006b6c <__sfp_lock_release+0x8>)
 8006b66:	f000 b8ae 	b.w	8006cc6 <__retarget_lock_release_recursive>
 8006b6a:	bf00      	nop
 8006b6c:	200008e1 	.word	0x200008e1

08006b70 <__sinit_lock_acquire>:
 8006b70:	4801      	ldr	r0, [pc, #4]	; (8006b78 <__sinit_lock_acquire+0x8>)
 8006b72:	f000 b8a7 	b.w	8006cc4 <__retarget_lock_acquire_recursive>
 8006b76:	bf00      	nop
 8006b78:	200008e2 	.word	0x200008e2

08006b7c <__sinit_lock_release>:
 8006b7c:	4801      	ldr	r0, [pc, #4]	; (8006b84 <__sinit_lock_release+0x8>)
 8006b7e:	f000 b8a2 	b.w	8006cc6 <__retarget_lock_release_recursive>
 8006b82:	bf00      	nop
 8006b84:	200008e2 	.word	0x200008e2

08006b88 <__sinit>:
 8006b88:	b510      	push	{r4, lr}
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	f7ff fff0 	bl	8006b70 <__sinit_lock_acquire>
 8006b90:	69a3      	ldr	r3, [r4, #24]
 8006b92:	b11b      	cbz	r3, 8006b9c <__sinit+0x14>
 8006b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b98:	f7ff bff0 	b.w	8006b7c <__sinit_lock_release>
 8006b9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ba0:	6523      	str	r3, [r4, #80]	; 0x50
 8006ba2:	4b13      	ldr	r3, [pc, #76]	; (8006bf0 <__sinit+0x68>)
 8006ba4:	4a13      	ldr	r2, [pc, #76]	; (8006bf4 <__sinit+0x6c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006baa:	42a3      	cmp	r3, r4
 8006bac:	bf04      	itt	eq
 8006bae:	2301      	moveq	r3, #1
 8006bb0:	61a3      	streq	r3, [r4, #24]
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f000 f820 	bl	8006bf8 <__sfp>
 8006bb8:	6060      	str	r0, [r4, #4]
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f000 f81c 	bl	8006bf8 <__sfp>
 8006bc0:	60a0      	str	r0, [r4, #8]
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f000 f818 	bl	8006bf8 <__sfp>
 8006bc8:	2200      	movs	r2, #0
 8006bca:	60e0      	str	r0, [r4, #12]
 8006bcc:	2104      	movs	r1, #4
 8006bce:	6860      	ldr	r0, [r4, #4]
 8006bd0:	f7ff ff82 	bl	8006ad8 <std>
 8006bd4:	68a0      	ldr	r0, [r4, #8]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	2109      	movs	r1, #9
 8006bda:	f7ff ff7d 	bl	8006ad8 <std>
 8006bde:	68e0      	ldr	r0, [r4, #12]
 8006be0:	2202      	movs	r2, #2
 8006be2:	2112      	movs	r1, #18
 8006be4:	f7ff ff78 	bl	8006ad8 <std>
 8006be8:	2301      	movs	r3, #1
 8006bea:	61a3      	str	r3, [r4, #24]
 8006bec:	e7d2      	b.n	8006b94 <__sinit+0xc>
 8006bee:	bf00      	nop
 8006bf0:	08007b3c 	.word	0x08007b3c
 8006bf4:	08006b21 	.word	0x08006b21

08006bf8 <__sfp>:
 8006bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfa:	4607      	mov	r7, r0
 8006bfc:	f7ff ffac 	bl	8006b58 <__sfp_lock_acquire>
 8006c00:	4b1e      	ldr	r3, [pc, #120]	; (8006c7c <__sfp+0x84>)
 8006c02:	681e      	ldr	r6, [r3, #0]
 8006c04:	69b3      	ldr	r3, [r6, #24]
 8006c06:	b913      	cbnz	r3, 8006c0e <__sfp+0x16>
 8006c08:	4630      	mov	r0, r6
 8006c0a:	f7ff ffbd 	bl	8006b88 <__sinit>
 8006c0e:	3648      	adds	r6, #72	; 0x48
 8006c10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c14:	3b01      	subs	r3, #1
 8006c16:	d503      	bpl.n	8006c20 <__sfp+0x28>
 8006c18:	6833      	ldr	r3, [r6, #0]
 8006c1a:	b30b      	cbz	r3, 8006c60 <__sfp+0x68>
 8006c1c:	6836      	ldr	r6, [r6, #0]
 8006c1e:	e7f7      	b.n	8006c10 <__sfp+0x18>
 8006c20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c24:	b9d5      	cbnz	r5, 8006c5c <__sfp+0x64>
 8006c26:	4b16      	ldr	r3, [pc, #88]	; (8006c80 <__sfp+0x88>)
 8006c28:	60e3      	str	r3, [r4, #12]
 8006c2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c2e:	6665      	str	r5, [r4, #100]	; 0x64
 8006c30:	f000 f847 	bl	8006cc2 <__retarget_lock_init_recursive>
 8006c34:	f7ff ff96 	bl	8006b64 <__sfp_lock_release>
 8006c38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c40:	6025      	str	r5, [r4, #0]
 8006c42:	61a5      	str	r5, [r4, #24]
 8006c44:	2208      	movs	r2, #8
 8006c46:	4629      	mov	r1, r5
 8006c48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c4c:	f7ff fc5e 	bl	800650c <memset>
 8006c50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c58:	4620      	mov	r0, r4
 8006c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c5c:	3468      	adds	r4, #104	; 0x68
 8006c5e:	e7d9      	b.n	8006c14 <__sfp+0x1c>
 8006c60:	2104      	movs	r1, #4
 8006c62:	4638      	mov	r0, r7
 8006c64:	f7ff ff62 	bl	8006b2c <__sfmoreglue>
 8006c68:	4604      	mov	r4, r0
 8006c6a:	6030      	str	r0, [r6, #0]
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	d1d5      	bne.n	8006c1c <__sfp+0x24>
 8006c70:	f7ff ff78 	bl	8006b64 <__sfp_lock_release>
 8006c74:	230c      	movs	r3, #12
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	e7ee      	b.n	8006c58 <__sfp+0x60>
 8006c7a:	bf00      	nop
 8006c7c:	08007b3c 	.word	0x08007b3c
 8006c80:	ffff0001 	.word	0xffff0001

08006c84 <_fwalk_reent>:
 8006c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c88:	4606      	mov	r6, r0
 8006c8a:	4688      	mov	r8, r1
 8006c8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c90:	2700      	movs	r7, #0
 8006c92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c96:	f1b9 0901 	subs.w	r9, r9, #1
 8006c9a:	d505      	bpl.n	8006ca8 <_fwalk_reent+0x24>
 8006c9c:	6824      	ldr	r4, [r4, #0]
 8006c9e:	2c00      	cmp	r4, #0
 8006ca0:	d1f7      	bne.n	8006c92 <_fwalk_reent+0xe>
 8006ca2:	4638      	mov	r0, r7
 8006ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ca8:	89ab      	ldrh	r3, [r5, #12]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d907      	bls.n	8006cbe <_fwalk_reent+0x3a>
 8006cae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	d003      	beq.n	8006cbe <_fwalk_reent+0x3a>
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	4630      	mov	r0, r6
 8006cba:	47c0      	blx	r8
 8006cbc:	4307      	orrs	r7, r0
 8006cbe:	3568      	adds	r5, #104	; 0x68
 8006cc0:	e7e9      	b.n	8006c96 <_fwalk_reent+0x12>

08006cc2 <__retarget_lock_init_recursive>:
 8006cc2:	4770      	bx	lr

08006cc4 <__retarget_lock_acquire_recursive>:
 8006cc4:	4770      	bx	lr

08006cc6 <__retarget_lock_release_recursive>:
 8006cc6:	4770      	bx	lr

08006cc8 <__swhatbuf_r>:
 8006cc8:	b570      	push	{r4, r5, r6, lr}
 8006cca:	460e      	mov	r6, r1
 8006ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd0:	2900      	cmp	r1, #0
 8006cd2:	b096      	sub	sp, #88	; 0x58
 8006cd4:	4614      	mov	r4, r2
 8006cd6:	461d      	mov	r5, r3
 8006cd8:	da08      	bge.n	8006cec <__swhatbuf_r+0x24>
 8006cda:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	602a      	str	r2, [r5, #0]
 8006ce2:	061a      	lsls	r2, r3, #24
 8006ce4:	d410      	bmi.n	8006d08 <__swhatbuf_r+0x40>
 8006ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cea:	e00e      	b.n	8006d0a <__swhatbuf_r+0x42>
 8006cec:	466a      	mov	r2, sp
 8006cee:	f000 fc9d 	bl	800762c <_fstat_r>
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	dbf1      	blt.n	8006cda <__swhatbuf_r+0x12>
 8006cf6:	9a01      	ldr	r2, [sp, #4]
 8006cf8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006cfc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d00:	425a      	negs	r2, r3
 8006d02:	415a      	adcs	r2, r3
 8006d04:	602a      	str	r2, [r5, #0]
 8006d06:	e7ee      	b.n	8006ce6 <__swhatbuf_r+0x1e>
 8006d08:	2340      	movs	r3, #64	; 0x40
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	b016      	add	sp, #88	; 0x58
 8006d10:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d14 <__smakebuf_r>:
 8006d14:	898b      	ldrh	r3, [r1, #12]
 8006d16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d18:	079d      	lsls	r5, r3, #30
 8006d1a:	4606      	mov	r6, r0
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	d507      	bpl.n	8006d30 <__smakebuf_r+0x1c>
 8006d20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	6123      	str	r3, [r4, #16]
 8006d28:	2301      	movs	r3, #1
 8006d2a:	6163      	str	r3, [r4, #20]
 8006d2c:	b002      	add	sp, #8
 8006d2e:	bd70      	pop	{r4, r5, r6, pc}
 8006d30:	ab01      	add	r3, sp, #4
 8006d32:	466a      	mov	r2, sp
 8006d34:	f7ff ffc8 	bl	8006cc8 <__swhatbuf_r>
 8006d38:	9900      	ldr	r1, [sp, #0]
 8006d3a:	4605      	mov	r5, r0
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	f000 f89d 	bl	8006e7c <_malloc_r>
 8006d42:	b948      	cbnz	r0, 8006d58 <__smakebuf_r+0x44>
 8006d44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d48:	059a      	lsls	r2, r3, #22
 8006d4a:	d4ef      	bmi.n	8006d2c <__smakebuf_r+0x18>
 8006d4c:	f023 0303 	bic.w	r3, r3, #3
 8006d50:	f043 0302 	orr.w	r3, r3, #2
 8006d54:	81a3      	strh	r3, [r4, #12]
 8006d56:	e7e3      	b.n	8006d20 <__smakebuf_r+0xc>
 8006d58:	4b0d      	ldr	r3, [pc, #52]	; (8006d90 <__smakebuf_r+0x7c>)
 8006d5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	6020      	str	r0, [r4, #0]
 8006d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d64:	81a3      	strh	r3, [r4, #12]
 8006d66:	9b00      	ldr	r3, [sp, #0]
 8006d68:	6163      	str	r3, [r4, #20]
 8006d6a:	9b01      	ldr	r3, [sp, #4]
 8006d6c:	6120      	str	r0, [r4, #16]
 8006d6e:	b15b      	cbz	r3, 8006d88 <__smakebuf_r+0x74>
 8006d70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d74:	4630      	mov	r0, r6
 8006d76:	f000 fc6b 	bl	8007650 <_isatty_r>
 8006d7a:	b128      	cbz	r0, 8006d88 <__smakebuf_r+0x74>
 8006d7c:	89a3      	ldrh	r3, [r4, #12]
 8006d7e:	f023 0303 	bic.w	r3, r3, #3
 8006d82:	f043 0301 	orr.w	r3, r3, #1
 8006d86:	81a3      	strh	r3, [r4, #12]
 8006d88:	89a0      	ldrh	r0, [r4, #12]
 8006d8a:	4305      	orrs	r5, r0
 8006d8c:	81a5      	strh	r5, [r4, #12]
 8006d8e:	e7cd      	b.n	8006d2c <__smakebuf_r+0x18>
 8006d90:	08006b21 	.word	0x08006b21

08006d94 <malloc>:
 8006d94:	4b02      	ldr	r3, [pc, #8]	; (8006da0 <malloc+0xc>)
 8006d96:	4601      	mov	r1, r0
 8006d98:	6818      	ldr	r0, [r3, #0]
 8006d9a:	f000 b86f 	b.w	8006e7c <_malloc_r>
 8006d9e:	bf00      	nop
 8006da0:	2000000c 	.word	0x2000000c

08006da4 <_free_r>:
 8006da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006da6:	2900      	cmp	r1, #0
 8006da8:	d044      	beq.n	8006e34 <_free_r+0x90>
 8006daa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dae:	9001      	str	r0, [sp, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f1a1 0404 	sub.w	r4, r1, #4
 8006db6:	bfb8      	it	lt
 8006db8:	18e4      	addlt	r4, r4, r3
 8006dba:	f000 fc6b 	bl	8007694 <__malloc_lock>
 8006dbe:	4a1e      	ldr	r2, [pc, #120]	; (8006e38 <_free_r+0x94>)
 8006dc0:	9801      	ldr	r0, [sp, #4]
 8006dc2:	6813      	ldr	r3, [r2, #0]
 8006dc4:	b933      	cbnz	r3, 8006dd4 <_free_r+0x30>
 8006dc6:	6063      	str	r3, [r4, #4]
 8006dc8:	6014      	str	r4, [r2, #0]
 8006dca:	b003      	add	sp, #12
 8006dcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dd0:	f000 bc66 	b.w	80076a0 <__malloc_unlock>
 8006dd4:	42a3      	cmp	r3, r4
 8006dd6:	d908      	bls.n	8006dea <_free_r+0x46>
 8006dd8:	6825      	ldr	r5, [r4, #0]
 8006dda:	1961      	adds	r1, r4, r5
 8006ddc:	428b      	cmp	r3, r1
 8006dde:	bf01      	itttt	eq
 8006de0:	6819      	ldreq	r1, [r3, #0]
 8006de2:	685b      	ldreq	r3, [r3, #4]
 8006de4:	1949      	addeq	r1, r1, r5
 8006de6:	6021      	streq	r1, [r4, #0]
 8006de8:	e7ed      	b.n	8006dc6 <_free_r+0x22>
 8006dea:	461a      	mov	r2, r3
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	b10b      	cbz	r3, 8006df4 <_free_r+0x50>
 8006df0:	42a3      	cmp	r3, r4
 8006df2:	d9fa      	bls.n	8006dea <_free_r+0x46>
 8006df4:	6811      	ldr	r1, [r2, #0]
 8006df6:	1855      	adds	r5, r2, r1
 8006df8:	42a5      	cmp	r5, r4
 8006dfa:	d10b      	bne.n	8006e14 <_free_r+0x70>
 8006dfc:	6824      	ldr	r4, [r4, #0]
 8006dfe:	4421      	add	r1, r4
 8006e00:	1854      	adds	r4, r2, r1
 8006e02:	42a3      	cmp	r3, r4
 8006e04:	6011      	str	r1, [r2, #0]
 8006e06:	d1e0      	bne.n	8006dca <_free_r+0x26>
 8006e08:	681c      	ldr	r4, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	6053      	str	r3, [r2, #4]
 8006e0e:	4421      	add	r1, r4
 8006e10:	6011      	str	r1, [r2, #0]
 8006e12:	e7da      	b.n	8006dca <_free_r+0x26>
 8006e14:	d902      	bls.n	8006e1c <_free_r+0x78>
 8006e16:	230c      	movs	r3, #12
 8006e18:	6003      	str	r3, [r0, #0]
 8006e1a:	e7d6      	b.n	8006dca <_free_r+0x26>
 8006e1c:	6825      	ldr	r5, [r4, #0]
 8006e1e:	1961      	adds	r1, r4, r5
 8006e20:	428b      	cmp	r3, r1
 8006e22:	bf04      	itt	eq
 8006e24:	6819      	ldreq	r1, [r3, #0]
 8006e26:	685b      	ldreq	r3, [r3, #4]
 8006e28:	6063      	str	r3, [r4, #4]
 8006e2a:	bf04      	itt	eq
 8006e2c:	1949      	addeq	r1, r1, r5
 8006e2e:	6021      	streq	r1, [r4, #0]
 8006e30:	6054      	str	r4, [r2, #4]
 8006e32:	e7ca      	b.n	8006dca <_free_r+0x26>
 8006e34:	b003      	add	sp, #12
 8006e36:	bd30      	pop	{r4, r5, pc}
 8006e38:	200008e4 	.word	0x200008e4

08006e3c <sbrk_aligned>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	4e0e      	ldr	r6, [pc, #56]	; (8006e78 <sbrk_aligned+0x3c>)
 8006e40:	460c      	mov	r4, r1
 8006e42:	6831      	ldr	r1, [r6, #0]
 8006e44:	4605      	mov	r5, r0
 8006e46:	b911      	cbnz	r1, 8006e4e <sbrk_aligned+0x12>
 8006e48:	f000 fb7a 	bl	8007540 <_sbrk_r>
 8006e4c:	6030      	str	r0, [r6, #0]
 8006e4e:	4621      	mov	r1, r4
 8006e50:	4628      	mov	r0, r5
 8006e52:	f000 fb75 	bl	8007540 <_sbrk_r>
 8006e56:	1c43      	adds	r3, r0, #1
 8006e58:	d00a      	beq.n	8006e70 <sbrk_aligned+0x34>
 8006e5a:	1cc4      	adds	r4, r0, #3
 8006e5c:	f024 0403 	bic.w	r4, r4, #3
 8006e60:	42a0      	cmp	r0, r4
 8006e62:	d007      	beq.n	8006e74 <sbrk_aligned+0x38>
 8006e64:	1a21      	subs	r1, r4, r0
 8006e66:	4628      	mov	r0, r5
 8006e68:	f000 fb6a 	bl	8007540 <_sbrk_r>
 8006e6c:	3001      	adds	r0, #1
 8006e6e:	d101      	bne.n	8006e74 <sbrk_aligned+0x38>
 8006e70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006e74:	4620      	mov	r0, r4
 8006e76:	bd70      	pop	{r4, r5, r6, pc}
 8006e78:	200008e8 	.word	0x200008e8

08006e7c <_malloc_r>:
 8006e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e80:	1ccd      	adds	r5, r1, #3
 8006e82:	f025 0503 	bic.w	r5, r5, #3
 8006e86:	3508      	adds	r5, #8
 8006e88:	2d0c      	cmp	r5, #12
 8006e8a:	bf38      	it	cc
 8006e8c:	250c      	movcc	r5, #12
 8006e8e:	2d00      	cmp	r5, #0
 8006e90:	4607      	mov	r7, r0
 8006e92:	db01      	blt.n	8006e98 <_malloc_r+0x1c>
 8006e94:	42a9      	cmp	r1, r5
 8006e96:	d905      	bls.n	8006ea4 <_malloc_r+0x28>
 8006e98:	230c      	movs	r3, #12
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	2600      	movs	r6, #0
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ea4:	4e2e      	ldr	r6, [pc, #184]	; (8006f60 <_malloc_r+0xe4>)
 8006ea6:	f000 fbf5 	bl	8007694 <__malloc_lock>
 8006eaa:	6833      	ldr	r3, [r6, #0]
 8006eac:	461c      	mov	r4, r3
 8006eae:	bb34      	cbnz	r4, 8006efe <_malloc_r+0x82>
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	f7ff ffc2 	bl	8006e3c <sbrk_aligned>
 8006eb8:	1c43      	adds	r3, r0, #1
 8006eba:	4604      	mov	r4, r0
 8006ebc:	d14d      	bne.n	8006f5a <_malloc_r+0xde>
 8006ebe:	6834      	ldr	r4, [r6, #0]
 8006ec0:	4626      	mov	r6, r4
 8006ec2:	2e00      	cmp	r6, #0
 8006ec4:	d140      	bne.n	8006f48 <_malloc_r+0xcc>
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	4631      	mov	r1, r6
 8006eca:	4638      	mov	r0, r7
 8006ecc:	eb04 0803 	add.w	r8, r4, r3
 8006ed0:	f000 fb36 	bl	8007540 <_sbrk_r>
 8006ed4:	4580      	cmp	r8, r0
 8006ed6:	d13a      	bne.n	8006f4e <_malloc_r+0xd2>
 8006ed8:	6821      	ldr	r1, [r4, #0]
 8006eda:	3503      	adds	r5, #3
 8006edc:	1a6d      	subs	r5, r5, r1
 8006ede:	f025 0503 	bic.w	r5, r5, #3
 8006ee2:	3508      	adds	r5, #8
 8006ee4:	2d0c      	cmp	r5, #12
 8006ee6:	bf38      	it	cc
 8006ee8:	250c      	movcc	r5, #12
 8006eea:	4629      	mov	r1, r5
 8006eec:	4638      	mov	r0, r7
 8006eee:	f7ff ffa5 	bl	8006e3c <sbrk_aligned>
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	d02b      	beq.n	8006f4e <_malloc_r+0xd2>
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	442b      	add	r3, r5
 8006efa:	6023      	str	r3, [r4, #0]
 8006efc:	e00e      	b.n	8006f1c <_malloc_r+0xa0>
 8006efe:	6822      	ldr	r2, [r4, #0]
 8006f00:	1b52      	subs	r2, r2, r5
 8006f02:	d41e      	bmi.n	8006f42 <_malloc_r+0xc6>
 8006f04:	2a0b      	cmp	r2, #11
 8006f06:	d916      	bls.n	8006f36 <_malloc_r+0xba>
 8006f08:	1961      	adds	r1, r4, r5
 8006f0a:	42a3      	cmp	r3, r4
 8006f0c:	6025      	str	r5, [r4, #0]
 8006f0e:	bf18      	it	ne
 8006f10:	6059      	strne	r1, [r3, #4]
 8006f12:	6863      	ldr	r3, [r4, #4]
 8006f14:	bf08      	it	eq
 8006f16:	6031      	streq	r1, [r6, #0]
 8006f18:	5162      	str	r2, [r4, r5]
 8006f1a:	604b      	str	r3, [r1, #4]
 8006f1c:	4638      	mov	r0, r7
 8006f1e:	f104 060b 	add.w	r6, r4, #11
 8006f22:	f000 fbbd 	bl	80076a0 <__malloc_unlock>
 8006f26:	f026 0607 	bic.w	r6, r6, #7
 8006f2a:	1d23      	adds	r3, r4, #4
 8006f2c:	1af2      	subs	r2, r6, r3
 8006f2e:	d0b6      	beq.n	8006e9e <_malloc_r+0x22>
 8006f30:	1b9b      	subs	r3, r3, r6
 8006f32:	50a3      	str	r3, [r4, r2]
 8006f34:	e7b3      	b.n	8006e9e <_malloc_r+0x22>
 8006f36:	6862      	ldr	r2, [r4, #4]
 8006f38:	42a3      	cmp	r3, r4
 8006f3a:	bf0c      	ite	eq
 8006f3c:	6032      	streq	r2, [r6, #0]
 8006f3e:	605a      	strne	r2, [r3, #4]
 8006f40:	e7ec      	b.n	8006f1c <_malloc_r+0xa0>
 8006f42:	4623      	mov	r3, r4
 8006f44:	6864      	ldr	r4, [r4, #4]
 8006f46:	e7b2      	b.n	8006eae <_malloc_r+0x32>
 8006f48:	4634      	mov	r4, r6
 8006f4a:	6876      	ldr	r6, [r6, #4]
 8006f4c:	e7b9      	b.n	8006ec2 <_malloc_r+0x46>
 8006f4e:	230c      	movs	r3, #12
 8006f50:	603b      	str	r3, [r7, #0]
 8006f52:	4638      	mov	r0, r7
 8006f54:	f000 fba4 	bl	80076a0 <__malloc_unlock>
 8006f58:	e7a1      	b.n	8006e9e <_malloc_r+0x22>
 8006f5a:	6025      	str	r5, [r4, #0]
 8006f5c:	e7de      	b.n	8006f1c <_malloc_r+0xa0>
 8006f5e:	bf00      	nop
 8006f60:	200008e4 	.word	0x200008e4

08006f64 <__sfputc_r>:
 8006f64:	6893      	ldr	r3, [r2, #8]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	b410      	push	{r4}
 8006f6c:	6093      	str	r3, [r2, #8]
 8006f6e:	da08      	bge.n	8006f82 <__sfputc_r+0x1e>
 8006f70:	6994      	ldr	r4, [r2, #24]
 8006f72:	42a3      	cmp	r3, r4
 8006f74:	db01      	blt.n	8006f7a <__sfputc_r+0x16>
 8006f76:	290a      	cmp	r1, #10
 8006f78:	d103      	bne.n	8006f82 <__sfputc_r+0x1e>
 8006f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f7e:	f7ff bc29 	b.w	80067d4 <__swbuf_r>
 8006f82:	6813      	ldr	r3, [r2, #0]
 8006f84:	1c58      	adds	r0, r3, #1
 8006f86:	6010      	str	r0, [r2, #0]
 8006f88:	7019      	strb	r1, [r3, #0]
 8006f8a:	4608      	mov	r0, r1
 8006f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <__sfputs_r>:
 8006f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f94:	4606      	mov	r6, r0
 8006f96:	460f      	mov	r7, r1
 8006f98:	4614      	mov	r4, r2
 8006f9a:	18d5      	adds	r5, r2, r3
 8006f9c:	42ac      	cmp	r4, r5
 8006f9e:	d101      	bne.n	8006fa4 <__sfputs_r+0x12>
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	e007      	b.n	8006fb4 <__sfputs_r+0x22>
 8006fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa8:	463a      	mov	r2, r7
 8006faa:	4630      	mov	r0, r6
 8006fac:	f7ff ffda 	bl	8006f64 <__sfputc_r>
 8006fb0:	1c43      	adds	r3, r0, #1
 8006fb2:	d1f3      	bne.n	8006f9c <__sfputs_r+0xa>
 8006fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fb8 <_vfiprintf_r>:
 8006fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fbc:	460d      	mov	r5, r1
 8006fbe:	b09d      	sub	sp, #116	; 0x74
 8006fc0:	4614      	mov	r4, r2
 8006fc2:	4698      	mov	r8, r3
 8006fc4:	4606      	mov	r6, r0
 8006fc6:	b118      	cbz	r0, 8006fd0 <_vfiprintf_r+0x18>
 8006fc8:	6983      	ldr	r3, [r0, #24]
 8006fca:	b90b      	cbnz	r3, 8006fd0 <_vfiprintf_r+0x18>
 8006fcc:	f7ff fddc 	bl	8006b88 <__sinit>
 8006fd0:	4b89      	ldr	r3, [pc, #548]	; (80071f8 <_vfiprintf_r+0x240>)
 8006fd2:	429d      	cmp	r5, r3
 8006fd4:	d11b      	bne.n	800700e <_vfiprintf_r+0x56>
 8006fd6:	6875      	ldr	r5, [r6, #4]
 8006fd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fda:	07d9      	lsls	r1, r3, #31
 8006fdc:	d405      	bmi.n	8006fea <_vfiprintf_r+0x32>
 8006fde:	89ab      	ldrh	r3, [r5, #12]
 8006fe0:	059a      	lsls	r2, r3, #22
 8006fe2:	d402      	bmi.n	8006fea <_vfiprintf_r+0x32>
 8006fe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fe6:	f7ff fe6d 	bl	8006cc4 <__retarget_lock_acquire_recursive>
 8006fea:	89ab      	ldrh	r3, [r5, #12]
 8006fec:	071b      	lsls	r3, r3, #28
 8006fee:	d501      	bpl.n	8006ff4 <_vfiprintf_r+0x3c>
 8006ff0:	692b      	ldr	r3, [r5, #16]
 8006ff2:	b9eb      	cbnz	r3, 8007030 <_vfiprintf_r+0x78>
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	f7ff fc3e 	bl	8006878 <__swsetup_r>
 8006ffc:	b1c0      	cbz	r0, 8007030 <_vfiprintf_r+0x78>
 8006ffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007000:	07dc      	lsls	r4, r3, #31
 8007002:	d50e      	bpl.n	8007022 <_vfiprintf_r+0x6a>
 8007004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007008:	b01d      	add	sp, #116	; 0x74
 800700a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700e:	4b7b      	ldr	r3, [pc, #492]	; (80071fc <_vfiprintf_r+0x244>)
 8007010:	429d      	cmp	r5, r3
 8007012:	d101      	bne.n	8007018 <_vfiprintf_r+0x60>
 8007014:	68b5      	ldr	r5, [r6, #8]
 8007016:	e7df      	b.n	8006fd8 <_vfiprintf_r+0x20>
 8007018:	4b79      	ldr	r3, [pc, #484]	; (8007200 <_vfiprintf_r+0x248>)
 800701a:	429d      	cmp	r5, r3
 800701c:	bf08      	it	eq
 800701e:	68f5      	ldreq	r5, [r6, #12]
 8007020:	e7da      	b.n	8006fd8 <_vfiprintf_r+0x20>
 8007022:	89ab      	ldrh	r3, [r5, #12]
 8007024:	0598      	lsls	r0, r3, #22
 8007026:	d4ed      	bmi.n	8007004 <_vfiprintf_r+0x4c>
 8007028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800702a:	f7ff fe4c 	bl	8006cc6 <__retarget_lock_release_recursive>
 800702e:	e7e9      	b.n	8007004 <_vfiprintf_r+0x4c>
 8007030:	2300      	movs	r3, #0
 8007032:	9309      	str	r3, [sp, #36]	; 0x24
 8007034:	2320      	movs	r3, #32
 8007036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800703a:	f8cd 800c 	str.w	r8, [sp, #12]
 800703e:	2330      	movs	r3, #48	; 0x30
 8007040:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007204 <_vfiprintf_r+0x24c>
 8007044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007048:	f04f 0901 	mov.w	r9, #1
 800704c:	4623      	mov	r3, r4
 800704e:	469a      	mov	sl, r3
 8007050:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007054:	b10a      	cbz	r2, 800705a <_vfiprintf_r+0xa2>
 8007056:	2a25      	cmp	r2, #37	; 0x25
 8007058:	d1f9      	bne.n	800704e <_vfiprintf_r+0x96>
 800705a:	ebba 0b04 	subs.w	fp, sl, r4
 800705e:	d00b      	beq.n	8007078 <_vfiprintf_r+0xc0>
 8007060:	465b      	mov	r3, fp
 8007062:	4622      	mov	r2, r4
 8007064:	4629      	mov	r1, r5
 8007066:	4630      	mov	r0, r6
 8007068:	f7ff ff93 	bl	8006f92 <__sfputs_r>
 800706c:	3001      	adds	r0, #1
 800706e:	f000 80aa 	beq.w	80071c6 <_vfiprintf_r+0x20e>
 8007072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007074:	445a      	add	r2, fp
 8007076:	9209      	str	r2, [sp, #36]	; 0x24
 8007078:	f89a 3000 	ldrb.w	r3, [sl]
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 80a2 	beq.w	80071c6 <_vfiprintf_r+0x20e>
 8007082:	2300      	movs	r3, #0
 8007084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800708c:	f10a 0a01 	add.w	sl, sl, #1
 8007090:	9304      	str	r3, [sp, #16]
 8007092:	9307      	str	r3, [sp, #28]
 8007094:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007098:	931a      	str	r3, [sp, #104]	; 0x68
 800709a:	4654      	mov	r4, sl
 800709c:	2205      	movs	r2, #5
 800709e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a2:	4858      	ldr	r0, [pc, #352]	; (8007204 <_vfiprintf_r+0x24c>)
 80070a4:	f7f9 f894 	bl	80001d0 <memchr>
 80070a8:	9a04      	ldr	r2, [sp, #16]
 80070aa:	b9d8      	cbnz	r0, 80070e4 <_vfiprintf_r+0x12c>
 80070ac:	06d1      	lsls	r1, r2, #27
 80070ae:	bf44      	itt	mi
 80070b0:	2320      	movmi	r3, #32
 80070b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070b6:	0713      	lsls	r3, r2, #28
 80070b8:	bf44      	itt	mi
 80070ba:	232b      	movmi	r3, #43	; 0x2b
 80070bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070c0:	f89a 3000 	ldrb.w	r3, [sl]
 80070c4:	2b2a      	cmp	r3, #42	; 0x2a
 80070c6:	d015      	beq.n	80070f4 <_vfiprintf_r+0x13c>
 80070c8:	9a07      	ldr	r2, [sp, #28]
 80070ca:	4654      	mov	r4, sl
 80070cc:	2000      	movs	r0, #0
 80070ce:	f04f 0c0a 	mov.w	ip, #10
 80070d2:	4621      	mov	r1, r4
 80070d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070d8:	3b30      	subs	r3, #48	; 0x30
 80070da:	2b09      	cmp	r3, #9
 80070dc:	d94e      	bls.n	800717c <_vfiprintf_r+0x1c4>
 80070de:	b1b0      	cbz	r0, 800710e <_vfiprintf_r+0x156>
 80070e0:	9207      	str	r2, [sp, #28]
 80070e2:	e014      	b.n	800710e <_vfiprintf_r+0x156>
 80070e4:	eba0 0308 	sub.w	r3, r0, r8
 80070e8:	fa09 f303 	lsl.w	r3, r9, r3
 80070ec:	4313      	orrs	r3, r2
 80070ee:	9304      	str	r3, [sp, #16]
 80070f0:	46a2      	mov	sl, r4
 80070f2:	e7d2      	b.n	800709a <_vfiprintf_r+0xe2>
 80070f4:	9b03      	ldr	r3, [sp, #12]
 80070f6:	1d19      	adds	r1, r3, #4
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	9103      	str	r1, [sp, #12]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	bfbb      	ittet	lt
 8007100:	425b      	neglt	r3, r3
 8007102:	f042 0202 	orrlt.w	r2, r2, #2
 8007106:	9307      	strge	r3, [sp, #28]
 8007108:	9307      	strlt	r3, [sp, #28]
 800710a:	bfb8      	it	lt
 800710c:	9204      	strlt	r2, [sp, #16]
 800710e:	7823      	ldrb	r3, [r4, #0]
 8007110:	2b2e      	cmp	r3, #46	; 0x2e
 8007112:	d10c      	bne.n	800712e <_vfiprintf_r+0x176>
 8007114:	7863      	ldrb	r3, [r4, #1]
 8007116:	2b2a      	cmp	r3, #42	; 0x2a
 8007118:	d135      	bne.n	8007186 <_vfiprintf_r+0x1ce>
 800711a:	9b03      	ldr	r3, [sp, #12]
 800711c:	1d1a      	adds	r2, r3, #4
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	9203      	str	r2, [sp, #12]
 8007122:	2b00      	cmp	r3, #0
 8007124:	bfb8      	it	lt
 8007126:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800712a:	3402      	adds	r4, #2
 800712c:	9305      	str	r3, [sp, #20]
 800712e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007214 <_vfiprintf_r+0x25c>
 8007132:	7821      	ldrb	r1, [r4, #0]
 8007134:	2203      	movs	r2, #3
 8007136:	4650      	mov	r0, sl
 8007138:	f7f9 f84a 	bl	80001d0 <memchr>
 800713c:	b140      	cbz	r0, 8007150 <_vfiprintf_r+0x198>
 800713e:	2340      	movs	r3, #64	; 0x40
 8007140:	eba0 000a 	sub.w	r0, r0, sl
 8007144:	fa03 f000 	lsl.w	r0, r3, r0
 8007148:	9b04      	ldr	r3, [sp, #16]
 800714a:	4303      	orrs	r3, r0
 800714c:	3401      	adds	r4, #1
 800714e:	9304      	str	r3, [sp, #16]
 8007150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007154:	482c      	ldr	r0, [pc, #176]	; (8007208 <_vfiprintf_r+0x250>)
 8007156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800715a:	2206      	movs	r2, #6
 800715c:	f7f9 f838 	bl	80001d0 <memchr>
 8007160:	2800      	cmp	r0, #0
 8007162:	d03f      	beq.n	80071e4 <_vfiprintf_r+0x22c>
 8007164:	4b29      	ldr	r3, [pc, #164]	; (800720c <_vfiprintf_r+0x254>)
 8007166:	bb1b      	cbnz	r3, 80071b0 <_vfiprintf_r+0x1f8>
 8007168:	9b03      	ldr	r3, [sp, #12]
 800716a:	3307      	adds	r3, #7
 800716c:	f023 0307 	bic.w	r3, r3, #7
 8007170:	3308      	adds	r3, #8
 8007172:	9303      	str	r3, [sp, #12]
 8007174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007176:	443b      	add	r3, r7
 8007178:	9309      	str	r3, [sp, #36]	; 0x24
 800717a:	e767      	b.n	800704c <_vfiprintf_r+0x94>
 800717c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007180:	460c      	mov	r4, r1
 8007182:	2001      	movs	r0, #1
 8007184:	e7a5      	b.n	80070d2 <_vfiprintf_r+0x11a>
 8007186:	2300      	movs	r3, #0
 8007188:	3401      	adds	r4, #1
 800718a:	9305      	str	r3, [sp, #20]
 800718c:	4619      	mov	r1, r3
 800718e:	f04f 0c0a 	mov.w	ip, #10
 8007192:	4620      	mov	r0, r4
 8007194:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007198:	3a30      	subs	r2, #48	; 0x30
 800719a:	2a09      	cmp	r2, #9
 800719c:	d903      	bls.n	80071a6 <_vfiprintf_r+0x1ee>
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d0c5      	beq.n	800712e <_vfiprintf_r+0x176>
 80071a2:	9105      	str	r1, [sp, #20]
 80071a4:	e7c3      	b.n	800712e <_vfiprintf_r+0x176>
 80071a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80071aa:	4604      	mov	r4, r0
 80071ac:	2301      	movs	r3, #1
 80071ae:	e7f0      	b.n	8007192 <_vfiprintf_r+0x1da>
 80071b0:	ab03      	add	r3, sp, #12
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	462a      	mov	r2, r5
 80071b6:	4b16      	ldr	r3, [pc, #88]	; (8007210 <_vfiprintf_r+0x258>)
 80071b8:	a904      	add	r1, sp, #16
 80071ba:	4630      	mov	r0, r6
 80071bc:	f3af 8000 	nop.w
 80071c0:	4607      	mov	r7, r0
 80071c2:	1c78      	adds	r0, r7, #1
 80071c4:	d1d6      	bne.n	8007174 <_vfiprintf_r+0x1bc>
 80071c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071c8:	07d9      	lsls	r1, r3, #31
 80071ca:	d405      	bmi.n	80071d8 <_vfiprintf_r+0x220>
 80071cc:	89ab      	ldrh	r3, [r5, #12]
 80071ce:	059a      	lsls	r2, r3, #22
 80071d0:	d402      	bmi.n	80071d8 <_vfiprintf_r+0x220>
 80071d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071d4:	f7ff fd77 	bl	8006cc6 <__retarget_lock_release_recursive>
 80071d8:	89ab      	ldrh	r3, [r5, #12]
 80071da:	065b      	lsls	r3, r3, #25
 80071dc:	f53f af12 	bmi.w	8007004 <_vfiprintf_r+0x4c>
 80071e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071e2:	e711      	b.n	8007008 <_vfiprintf_r+0x50>
 80071e4:	ab03      	add	r3, sp, #12
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	462a      	mov	r2, r5
 80071ea:	4b09      	ldr	r3, [pc, #36]	; (8007210 <_vfiprintf_r+0x258>)
 80071ec:	a904      	add	r1, sp, #16
 80071ee:	4630      	mov	r0, r6
 80071f0:	f000 f880 	bl	80072f4 <_printf_i>
 80071f4:	e7e4      	b.n	80071c0 <_vfiprintf_r+0x208>
 80071f6:	bf00      	nop
 80071f8:	08007b60 	.word	0x08007b60
 80071fc:	08007b80 	.word	0x08007b80
 8007200:	08007b40 	.word	0x08007b40
 8007204:	08007ba0 	.word	0x08007ba0
 8007208:	08007baa 	.word	0x08007baa
 800720c:	00000000 	.word	0x00000000
 8007210:	08006f93 	.word	0x08006f93
 8007214:	08007ba6 	.word	0x08007ba6

08007218 <_printf_common>:
 8007218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800721c:	4616      	mov	r6, r2
 800721e:	4699      	mov	r9, r3
 8007220:	688a      	ldr	r2, [r1, #8]
 8007222:	690b      	ldr	r3, [r1, #16]
 8007224:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007228:	4293      	cmp	r3, r2
 800722a:	bfb8      	it	lt
 800722c:	4613      	movlt	r3, r2
 800722e:	6033      	str	r3, [r6, #0]
 8007230:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007234:	4607      	mov	r7, r0
 8007236:	460c      	mov	r4, r1
 8007238:	b10a      	cbz	r2, 800723e <_printf_common+0x26>
 800723a:	3301      	adds	r3, #1
 800723c:	6033      	str	r3, [r6, #0]
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	0699      	lsls	r1, r3, #26
 8007242:	bf42      	ittt	mi
 8007244:	6833      	ldrmi	r3, [r6, #0]
 8007246:	3302      	addmi	r3, #2
 8007248:	6033      	strmi	r3, [r6, #0]
 800724a:	6825      	ldr	r5, [r4, #0]
 800724c:	f015 0506 	ands.w	r5, r5, #6
 8007250:	d106      	bne.n	8007260 <_printf_common+0x48>
 8007252:	f104 0a19 	add.w	sl, r4, #25
 8007256:	68e3      	ldr	r3, [r4, #12]
 8007258:	6832      	ldr	r2, [r6, #0]
 800725a:	1a9b      	subs	r3, r3, r2
 800725c:	42ab      	cmp	r3, r5
 800725e:	dc26      	bgt.n	80072ae <_printf_common+0x96>
 8007260:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007264:	1e13      	subs	r3, r2, #0
 8007266:	6822      	ldr	r2, [r4, #0]
 8007268:	bf18      	it	ne
 800726a:	2301      	movne	r3, #1
 800726c:	0692      	lsls	r2, r2, #26
 800726e:	d42b      	bmi.n	80072c8 <_printf_common+0xb0>
 8007270:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007274:	4649      	mov	r1, r9
 8007276:	4638      	mov	r0, r7
 8007278:	47c0      	blx	r8
 800727a:	3001      	adds	r0, #1
 800727c:	d01e      	beq.n	80072bc <_printf_common+0xa4>
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	68e5      	ldr	r5, [r4, #12]
 8007282:	6832      	ldr	r2, [r6, #0]
 8007284:	f003 0306 	and.w	r3, r3, #6
 8007288:	2b04      	cmp	r3, #4
 800728a:	bf08      	it	eq
 800728c:	1aad      	subeq	r5, r5, r2
 800728e:	68a3      	ldr	r3, [r4, #8]
 8007290:	6922      	ldr	r2, [r4, #16]
 8007292:	bf0c      	ite	eq
 8007294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007298:	2500      	movne	r5, #0
 800729a:	4293      	cmp	r3, r2
 800729c:	bfc4      	itt	gt
 800729e:	1a9b      	subgt	r3, r3, r2
 80072a0:	18ed      	addgt	r5, r5, r3
 80072a2:	2600      	movs	r6, #0
 80072a4:	341a      	adds	r4, #26
 80072a6:	42b5      	cmp	r5, r6
 80072a8:	d11a      	bne.n	80072e0 <_printf_common+0xc8>
 80072aa:	2000      	movs	r0, #0
 80072ac:	e008      	b.n	80072c0 <_printf_common+0xa8>
 80072ae:	2301      	movs	r3, #1
 80072b0:	4652      	mov	r2, sl
 80072b2:	4649      	mov	r1, r9
 80072b4:	4638      	mov	r0, r7
 80072b6:	47c0      	blx	r8
 80072b8:	3001      	adds	r0, #1
 80072ba:	d103      	bne.n	80072c4 <_printf_common+0xac>
 80072bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072c4:	3501      	adds	r5, #1
 80072c6:	e7c6      	b.n	8007256 <_printf_common+0x3e>
 80072c8:	18e1      	adds	r1, r4, r3
 80072ca:	1c5a      	adds	r2, r3, #1
 80072cc:	2030      	movs	r0, #48	; 0x30
 80072ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072d2:	4422      	add	r2, r4
 80072d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072dc:	3302      	adds	r3, #2
 80072de:	e7c7      	b.n	8007270 <_printf_common+0x58>
 80072e0:	2301      	movs	r3, #1
 80072e2:	4622      	mov	r2, r4
 80072e4:	4649      	mov	r1, r9
 80072e6:	4638      	mov	r0, r7
 80072e8:	47c0      	blx	r8
 80072ea:	3001      	adds	r0, #1
 80072ec:	d0e6      	beq.n	80072bc <_printf_common+0xa4>
 80072ee:	3601      	adds	r6, #1
 80072f0:	e7d9      	b.n	80072a6 <_printf_common+0x8e>
	...

080072f4 <_printf_i>:
 80072f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072f8:	7e0f      	ldrb	r7, [r1, #24]
 80072fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072fc:	2f78      	cmp	r7, #120	; 0x78
 80072fe:	4691      	mov	r9, r2
 8007300:	4680      	mov	r8, r0
 8007302:	460c      	mov	r4, r1
 8007304:	469a      	mov	sl, r3
 8007306:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800730a:	d807      	bhi.n	800731c <_printf_i+0x28>
 800730c:	2f62      	cmp	r7, #98	; 0x62
 800730e:	d80a      	bhi.n	8007326 <_printf_i+0x32>
 8007310:	2f00      	cmp	r7, #0
 8007312:	f000 80d8 	beq.w	80074c6 <_printf_i+0x1d2>
 8007316:	2f58      	cmp	r7, #88	; 0x58
 8007318:	f000 80a3 	beq.w	8007462 <_printf_i+0x16e>
 800731c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007320:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007324:	e03a      	b.n	800739c <_printf_i+0xa8>
 8007326:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800732a:	2b15      	cmp	r3, #21
 800732c:	d8f6      	bhi.n	800731c <_printf_i+0x28>
 800732e:	a101      	add	r1, pc, #4	; (adr r1, 8007334 <_printf_i+0x40>)
 8007330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007334:	0800738d 	.word	0x0800738d
 8007338:	080073a1 	.word	0x080073a1
 800733c:	0800731d 	.word	0x0800731d
 8007340:	0800731d 	.word	0x0800731d
 8007344:	0800731d 	.word	0x0800731d
 8007348:	0800731d 	.word	0x0800731d
 800734c:	080073a1 	.word	0x080073a1
 8007350:	0800731d 	.word	0x0800731d
 8007354:	0800731d 	.word	0x0800731d
 8007358:	0800731d 	.word	0x0800731d
 800735c:	0800731d 	.word	0x0800731d
 8007360:	080074ad 	.word	0x080074ad
 8007364:	080073d1 	.word	0x080073d1
 8007368:	0800748f 	.word	0x0800748f
 800736c:	0800731d 	.word	0x0800731d
 8007370:	0800731d 	.word	0x0800731d
 8007374:	080074cf 	.word	0x080074cf
 8007378:	0800731d 	.word	0x0800731d
 800737c:	080073d1 	.word	0x080073d1
 8007380:	0800731d 	.word	0x0800731d
 8007384:	0800731d 	.word	0x0800731d
 8007388:	08007497 	.word	0x08007497
 800738c:	682b      	ldr	r3, [r5, #0]
 800738e:	1d1a      	adds	r2, r3, #4
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	602a      	str	r2, [r5, #0]
 8007394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800739c:	2301      	movs	r3, #1
 800739e:	e0a3      	b.n	80074e8 <_printf_i+0x1f4>
 80073a0:	6820      	ldr	r0, [r4, #0]
 80073a2:	6829      	ldr	r1, [r5, #0]
 80073a4:	0606      	lsls	r6, r0, #24
 80073a6:	f101 0304 	add.w	r3, r1, #4
 80073aa:	d50a      	bpl.n	80073c2 <_printf_i+0xce>
 80073ac:	680e      	ldr	r6, [r1, #0]
 80073ae:	602b      	str	r3, [r5, #0]
 80073b0:	2e00      	cmp	r6, #0
 80073b2:	da03      	bge.n	80073bc <_printf_i+0xc8>
 80073b4:	232d      	movs	r3, #45	; 0x2d
 80073b6:	4276      	negs	r6, r6
 80073b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073bc:	485e      	ldr	r0, [pc, #376]	; (8007538 <_printf_i+0x244>)
 80073be:	230a      	movs	r3, #10
 80073c0:	e019      	b.n	80073f6 <_printf_i+0x102>
 80073c2:	680e      	ldr	r6, [r1, #0]
 80073c4:	602b      	str	r3, [r5, #0]
 80073c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073ca:	bf18      	it	ne
 80073cc:	b236      	sxthne	r6, r6
 80073ce:	e7ef      	b.n	80073b0 <_printf_i+0xbc>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	6820      	ldr	r0, [r4, #0]
 80073d4:	1d19      	adds	r1, r3, #4
 80073d6:	6029      	str	r1, [r5, #0]
 80073d8:	0601      	lsls	r1, r0, #24
 80073da:	d501      	bpl.n	80073e0 <_printf_i+0xec>
 80073dc:	681e      	ldr	r6, [r3, #0]
 80073de:	e002      	b.n	80073e6 <_printf_i+0xf2>
 80073e0:	0646      	lsls	r6, r0, #25
 80073e2:	d5fb      	bpl.n	80073dc <_printf_i+0xe8>
 80073e4:	881e      	ldrh	r6, [r3, #0]
 80073e6:	4854      	ldr	r0, [pc, #336]	; (8007538 <_printf_i+0x244>)
 80073e8:	2f6f      	cmp	r7, #111	; 0x6f
 80073ea:	bf0c      	ite	eq
 80073ec:	2308      	moveq	r3, #8
 80073ee:	230a      	movne	r3, #10
 80073f0:	2100      	movs	r1, #0
 80073f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073f6:	6865      	ldr	r5, [r4, #4]
 80073f8:	60a5      	str	r5, [r4, #8]
 80073fa:	2d00      	cmp	r5, #0
 80073fc:	bfa2      	ittt	ge
 80073fe:	6821      	ldrge	r1, [r4, #0]
 8007400:	f021 0104 	bicge.w	r1, r1, #4
 8007404:	6021      	strge	r1, [r4, #0]
 8007406:	b90e      	cbnz	r6, 800740c <_printf_i+0x118>
 8007408:	2d00      	cmp	r5, #0
 800740a:	d04d      	beq.n	80074a8 <_printf_i+0x1b4>
 800740c:	4615      	mov	r5, r2
 800740e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007412:	fb03 6711 	mls	r7, r3, r1, r6
 8007416:	5dc7      	ldrb	r7, [r0, r7]
 8007418:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800741c:	4637      	mov	r7, r6
 800741e:	42bb      	cmp	r3, r7
 8007420:	460e      	mov	r6, r1
 8007422:	d9f4      	bls.n	800740e <_printf_i+0x11a>
 8007424:	2b08      	cmp	r3, #8
 8007426:	d10b      	bne.n	8007440 <_printf_i+0x14c>
 8007428:	6823      	ldr	r3, [r4, #0]
 800742a:	07de      	lsls	r6, r3, #31
 800742c:	d508      	bpl.n	8007440 <_printf_i+0x14c>
 800742e:	6923      	ldr	r3, [r4, #16]
 8007430:	6861      	ldr	r1, [r4, #4]
 8007432:	4299      	cmp	r1, r3
 8007434:	bfde      	ittt	le
 8007436:	2330      	movle	r3, #48	; 0x30
 8007438:	f805 3c01 	strble.w	r3, [r5, #-1]
 800743c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007440:	1b52      	subs	r2, r2, r5
 8007442:	6122      	str	r2, [r4, #16]
 8007444:	f8cd a000 	str.w	sl, [sp]
 8007448:	464b      	mov	r3, r9
 800744a:	aa03      	add	r2, sp, #12
 800744c:	4621      	mov	r1, r4
 800744e:	4640      	mov	r0, r8
 8007450:	f7ff fee2 	bl	8007218 <_printf_common>
 8007454:	3001      	adds	r0, #1
 8007456:	d14c      	bne.n	80074f2 <_printf_i+0x1fe>
 8007458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800745c:	b004      	add	sp, #16
 800745e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007462:	4835      	ldr	r0, [pc, #212]	; (8007538 <_printf_i+0x244>)
 8007464:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007468:	6829      	ldr	r1, [r5, #0]
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007470:	6029      	str	r1, [r5, #0]
 8007472:	061d      	lsls	r5, r3, #24
 8007474:	d514      	bpl.n	80074a0 <_printf_i+0x1ac>
 8007476:	07df      	lsls	r7, r3, #31
 8007478:	bf44      	itt	mi
 800747a:	f043 0320 	orrmi.w	r3, r3, #32
 800747e:	6023      	strmi	r3, [r4, #0]
 8007480:	b91e      	cbnz	r6, 800748a <_printf_i+0x196>
 8007482:	6823      	ldr	r3, [r4, #0]
 8007484:	f023 0320 	bic.w	r3, r3, #32
 8007488:	6023      	str	r3, [r4, #0]
 800748a:	2310      	movs	r3, #16
 800748c:	e7b0      	b.n	80073f0 <_printf_i+0xfc>
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	f043 0320 	orr.w	r3, r3, #32
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	2378      	movs	r3, #120	; 0x78
 8007498:	4828      	ldr	r0, [pc, #160]	; (800753c <_printf_i+0x248>)
 800749a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800749e:	e7e3      	b.n	8007468 <_printf_i+0x174>
 80074a0:	0659      	lsls	r1, r3, #25
 80074a2:	bf48      	it	mi
 80074a4:	b2b6      	uxthmi	r6, r6
 80074a6:	e7e6      	b.n	8007476 <_printf_i+0x182>
 80074a8:	4615      	mov	r5, r2
 80074aa:	e7bb      	b.n	8007424 <_printf_i+0x130>
 80074ac:	682b      	ldr	r3, [r5, #0]
 80074ae:	6826      	ldr	r6, [r4, #0]
 80074b0:	6961      	ldr	r1, [r4, #20]
 80074b2:	1d18      	adds	r0, r3, #4
 80074b4:	6028      	str	r0, [r5, #0]
 80074b6:	0635      	lsls	r5, r6, #24
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	d501      	bpl.n	80074c0 <_printf_i+0x1cc>
 80074bc:	6019      	str	r1, [r3, #0]
 80074be:	e002      	b.n	80074c6 <_printf_i+0x1d2>
 80074c0:	0670      	lsls	r0, r6, #25
 80074c2:	d5fb      	bpl.n	80074bc <_printf_i+0x1c8>
 80074c4:	8019      	strh	r1, [r3, #0]
 80074c6:	2300      	movs	r3, #0
 80074c8:	6123      	str	r3, [r4, #16]
 80074ca:	4615      	mov	r5, r2
 80074cc:	e7ba      	b.n	8007444 <_printf_i+0x150>
 80074ce:	682b      	ldr	r3, [r5, #0]
 80074d0:	1d1a      	adds	r2, r3, #4
 80074d2:	602a      	str	r2, [r5, #0]
 80074d4:	681d      	ldr	r5, [r3, #0]
 80074d6:	6862      	ldr	r2, [r4, #4]
 80074d8:	2100      	movs	r1, #0
 80074da:	4628      	mov	r0, r5
 80074dc:	f7f8 fe78 	bl	80001d0 <memchr>
 80074e0:	b108      	cbz	r0, 80074e6 <_printf_i+0x1f2>
 80074e2:	1b40      	subs	r0, r0, r5
 80074e4:	6060      	str	r0, [r4, #4]
 80074e6:	6863      	ldr	r3, [r4, #4]
 80074e8:	6123      	str	r3, [r4, #16]
 80074ea:	2300      	movs	r3, #0
 80074ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074f0:	e7a8      	b.n	8007444 <_printf_i+0x150>
 80074f2:	6923      	ldr	r3, [r4, #16]
 80074f4:	462a      	mov	r2, r5
 80074f6:	4649      	mov	r1, r9
 80074f8:	4640      	mov	r0, r8
 80074fa:	47d0      	blx	sl
 80074fc:	3001      	adds	r0, #1
 80074fe:	d0ab      	beq.n	8007458 <_printf_i+0x164>
 8007500:	6823      	ldr	r3, [r4, #0]
 8007502:	079b      	lsls	r3, r3, #30
 8007504:	d413      	bmi.n	800752e <_printf_i+0x23a>
 8007506:	68e0      	ldr	r0, [r4, #12]
 8007508:	9b03      	ldr	r3, [sp, #12]
 800750a:	4298      	cmp	r0, r3
 800750c:	bfb8      	it	lt
 800750e:	4618      	movlt	r0, r3
 8007510:	e7a4      	b.n	800745c <_printf_i+0x168>
 8007512:	2301      	movs	r3, #1
 8007514:	4632      	mov	r2, r6
 8007516:	4649      	mov	r1, r9
 8007518:	4640      	mov	r0, r8
 800751a:	47d0      	blx	sl
 800751c:	3001      	adds	r0, #1
 800751e:	d09b      	beq.n	8007458 <_printf_i+0x164>
 8007520:	3501      	adds	r5, #1
 8007522:	68e3      	ldr	r3, [r4, #12]
 8007524:	9903      	ldr	r1, [sp, #12]
 8007526:	1a5b      	subs	r3, r3, r1
 8007528:	42ab      	cmp	r3, r5
 800752a:	dcf2      	bgt.n	8007512 <_printf_i+0x21e>
 800752c:	e7eb      	b.n	8007506 <_printf_i+0x212>
 800752e:	2500      	movs	r5, #0
 8007530:	f104 0619 	add.w	r6, r4, #25
 8007534:	e7f5      	b.n	8007522 <_printf_i+0x22e>
 8007536:	bf00      	nop
 8007538:	08007bb1 	.word	0x08007bb1
 800753c:	08007bc2 	.word	0x08007bc2

08007540 <_sbrk_r>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	4d06      	ldr	r5, [pc, #24]	; (800755c <_sbrk_r+0x1c>)
 8007544:	2300      	movs	r3, #0
 8007546:	4604      	mov	r4, r0
 8007548:	4608      	mov	r0, r1
 800754a:	602b      	str	r3, [r5, #0]
 800754c:	f7f9 fef0 	bl	8001330 <_sbrk>
 8007550:	1c43      	adds	r3, r0, #1
 8007552:	d102      	bne.n	800755a <_sbrk_r+0x1a>
 8007554:	682b      	ldr	r3, [r5, #0]
 8007556:	b103      	cbz	r3, 800755a <_sbrk_r+0x1a>
 8007558:	6023      	str	r3, [r4, #0]
 800755a:	bd38      	pop	{r3, r4, r5, pc}
 800755c:	200008ec 	.word	0x200008ec

08007560 <__sread>:
 8007560:	b510      	push	{r4, lr}
 8007562:	460c      	mov	r4, r1
 8007564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007568:	f000 f8a0 	bl	80076ac <_read_r>
 800756c:	2800      	cmp	r0, #0
 800756e:	bfab      	itete	ge
 8007570:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007572:	89a3      	ldrhlt	r3, [r4, #12]
 8007574:	181b      	addge	r3, r3, r0
 8007576:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800757a:	bfac      	ite	ge
 800757c:	6563      	strge	r3, [r4, #84]	; 0x54
 800757e:	81a3      	strhlt	r3, [r4, #12]
 8007580:	bd10      	pop	{r4, pc}

08007582 <__swrite>:
 8007582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007586:	461f      	mov	r7, r3
 8007588:	898b      	ldrh	r3, [r1, #12]
 800758a:	05db      	lsls	r3, r3, #23
 800758c:	4605      	mov	r5, r0
 800758e:	460c      	mov	r4, r1
 8007590:	4616      	mov	r6, r2
 8007592:	d505      	bpl.n	80075a0 <__swrite+0x1e>
 8007594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007598:	2302      	movs	r3, #2
 800759a:	2200      	movs	r2, #0
 800759c:	f000 f868 	bl	8007670 <_lseek_r>
 80075a0:	89a3      	ldrh	r3, [r4, #12]
 80075a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075aa:	81a3      	strh	r3, [r4, #12]
 80075ac:	4632      	mov	r2, r6
 80075ae:	463b      	mov	r3, r7
 80075b0:	4628      	mov	r0, r5
 80075b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075b6:	f000 b817 	b.w	80075e8 <_write_r>

080075ba <__sseek>:
 80075ba:	b510      	push	{r4, lr}
 80075bc:	460c      	mov	r4, r1
 80075be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c2:	f000 f855 	bl	8007670 <_lseek_r>
 80075c6:	1c43      	adds	r3, r0, #1
 80075c8:	89a3      	ldrh	r3, [r4, #12]
 80075ca:	bf15      	itete	ne
 80075cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80075ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075d6:	81a3      	strheq	r3, [r4, #12]
 80075d8:	bf18      	it	ne
 80075da:	81a3      	strhne	r3, [r4, #12]
 80075dc:	bd10      	pop	{r4, pc}

080075de <__sclose>:
 80075de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075e2:	f000 b813 	b.w	800760c <_close_r>
	...

080075e8 <_write_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4d07      	ldr	r5, [pc, #28]	; (8007608 <_write_r+0x20>)
 80075ec:	4604      	mov	r4, r0
 80075ee:	4608      	mov	r0, r1
 80075f0:	4611      	mov	r1, r2
 80075f2:	2200      	movs	r2, #0
 80075f4:	602a      	str	r2, [r5, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	f7f9 fd08 	bl	800100c <_write>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	d102      	bne.n	8007606 <_write_r+0x1e>
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	b103      	cbz	r3, 8007606 <_write_r+0x1e>
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	bd38      	pop	{r3, r4, r5, pc}
 8007608:	200008ec 	.word	0x200008ec

0800760c <_close_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4d06      	ldr	r5, [pc, #24]	; (8007628 <_close_r+0x1c>)
 8007610:	2300      	movs	r3, #0
 8007612:	4604      	mov	r4, r0
 8007614:	4608      	mov	r0, r1
 8007616:	602b      	str	r3, [r5, #0]
 8007618:	f7f9 fe55 	bl	80012c6 <_close>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	d102      	bne.n	8007626 <_close_r+0x1a>
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	b103      	cbz	r3, 8007626 <_close_r+0x1a>
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	bd38      	pop	{r3, r4, r5, pc}
 8007628:	200008ec 	.word	0x200008ec

0800762c <_fstat_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	4d07      	ldr	r5, [pc, #28]	; (800764c <_fstat_r+0x20>)
 8007630:	2300      	movs	r3, #0
 8007632:	4604      	mov	r4, r0
 8007634:	4608      	mov	r0, r1
 8007636:	4611      	mov	r1, r2
 8007638:	602b      	str	r3, [r5, #0]
 800763a:	f7f9 fe50 	bl	80012de <_fstat>
 800763e:	1c43      	adds	r3, r0, #1
 8007640:	d102      	bne.n	8007648 <_fstat_r+0x1c>
 8007642:	682b      	ldr	r3, [r5, #0]
 8007644:	b103      	cbz	r3, 8007648 <_fstat_r+0x1c>
 8007646:	6023      	str	r3, [r4, #0]
 8007648:	bd38      	pop	{r3, r4, r5, pc}
 800764a:	bf00      	nop
 800764c:	200008ec 	.word	0x200008ec

08007650 <_isatty_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4d06      	ldr	r5, [pc, #24]	; (800766c <_isatty_r+0x1c>)
 8007654:	2300      	movs	r3, #0
 8007656:	4604      	mov	r4, r0
 8007658:	4608      	mov	r0, r1
 800765a:	602b      	str	r3, [r5, #0]
 800765c:	f7f9 fe4f 	bl	80012fe <_isatty>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d102      	bne.n	800766a <_isatty_r+0x1a>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	b103      	cbz	r3, 800766a <_isatty_r+0x1a>
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	bd38      	pop	{r3, r4, r5, pc}
 800766c:	200008ec 	.word	0x200008ec

08007670 <_lseek_r>:
 8007670:	b538      	push	{r3, r4, r5, lr}
 8007672:	4d07      	ldr	r5, [pc, #28]	; (8007690 <_lseek_r+0x20>)
 8007674:	4604      	mov	r4, r0
 8007676:	4608      	mov	r0, r1
 8007678:	4611      	mov	r1, r2
 800767a:	2200      	movs	r2, #0
 800767c:	602a      	str	r2, [r5, #0]
 800767e:	461a      	mov	r2, r3
 8007680:	f7f9 fe48 	bl	8001314 <_lseek>
 8007684:	1c43      	adds	r3, r0, #1
 8007686:	d102      	bne.n	800768e <_lseek_r+0x1e>
 8007688:	682b      	ldr	r3, [r5, #0]
 800768a:	b103      	cbz	r3, 800768e <_lseek_r+0x1e>
 800768c:	6023      	str	r3, [r4, #0]
 800768e:	bd38      	pop	{r3, r4, r5, pc}
 8007690:	200008ec 	.word	0x200008ec

08007694 <__malloc_lock>:
 8007694:	4801      	ldr	r0, [pc, #4]	; (800769c <__malloc_lock+0x8>)
 8007696:	f7ff bb15 	b.w	8006cc4 <__retarget_lock_acquire_recursive>
 800769a:	bf00      	nop
 800769c:	200008e0 	.word	0x200008e0

080076a0 <__malloc_unlock>:
 80076a0:	4801      	ldr	r0, [pc, #4]	; (80076a8 <__malloc_unlock+0x8>)
 80076a2:	f7ff bb10 	b.w	8006cc6 <__retarget_lock_release_recursive>
 80076a6:	bf00      	nop
 80076a8:	200008e0 	.word	0x200008e0

080076ac <_read_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	4d07      	ldr	r5, [pc, #28]	; (80076cc <_read_r+0x20>)
 80076b0:	4604      	mov	r4, r0
 80076b2:	4608      	mov	r0, r1
 80076b4:	4611      	mov	r1, r2
 80076b6:	2200      	movs	r2, #0
 80076b8:	602a      	str	r2, [r5, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	f7f9 fde6 	bl	800128c <_read>
 80076c0:	1c43      	adds	r3, r0, #1
 80076c2:	d102      	bne.n	80076ca <_read_r+0x1e>
 80076c4:	682b      	ldr	r3, [r5, #0]
 80076c6:	b103      	cbz	r3, 80076ca <_read_r+0x1e>
 80076c8:	6023      	str	r3, [r4, #0]
 80076ca:	bd38      	pop	{r3, r4, r5, pc}
 80076cc:	200008ec 	.word	0x200008ec

080076d0 <_init>:
 80076d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d2:	bf00      	nop
 80076d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d6:	bc08      	pop	{r3}
 80076d8:	469e      	mov	lr, r3
 80076da:	4770      	bx	lr

080076dc <_fini>:
 80076dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076de:	bf00      	nop
 80076e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076e2:	bc08      	pop	{r3}
 80076e4:	469e      	mov	lr, r3
 80076e6:	4770      	bx	lr
