
TMC_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002944  08002944  00012944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800298c  0800298c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800298c  0800298c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800298c  0800298c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800298c  0800298c  0001298c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002990  08002990  00012990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000070  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000007c  2000007c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006a30  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001466  00000000  00000000  00026a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005f8  00000000  00000000  00027ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000550  00000000  00000000  000284d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a61d  00000000  00000000  00028a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007948  00000000  00000000  0004303d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a0af  00000000  00000000  0004a985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e4a34  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000016b8  00000000  00000000  000e4a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800292c 	.word	0x0800292c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800292c 	.word	0x0800292c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b590      	push	{r4, r7, lr}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 f97f 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f819 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f87f 	bl	80002d8 <MX_GPIO_Init>
  MX_USART2_Init();
 80001da:	f000 f851 	bl	8000280 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */

  char msg[] ="Hello STM32\r\n";
 80001de:	4b08      	ldr	r3, [pc, #32]	; (8000200 <main+0x38>)
 80001e0:	463c      	mov	r4, r7
 80001e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001e4:	c407      	stmia	r4!, {r0, r1, r2}
 80001e6:	8023      	strh	r3, [r4, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_USART_Transmit(&husart2,(uint8_t *)msg,sizeof(msg),3000);
 80001e8:	4639      	mov	r1, r7
 80001ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80001ee:	220e      	movs	r2, #14
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <main+0x3c>)
 80001f2:	f001 ff77 	bl	80020e4 <HAL_USART_Transmit>
	  HAL_Delay(1000);
 80001f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001fa:	f000 f9cf 	bl	800059c <HAL_Delay>
	  HAL_USART_Transmit(&husart2,(uint8_t *)msg,sizeof(msg),3000);
 80001fe:	e7f3      	b.n	80001e8 <main+0x20>
 8000200:	08002944 	.word	0x08002944
 8000204:	20000028 	.word	0x20000028

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b090      	sub	sp, #64	; 0x40
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0318 	add.w	r3, r7, #24
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fb80 	bl	800291c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022a:	2302      	movs	r3, #2
 800022c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022e:	2301      	movs	r3, #1
 8000230:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000232:	2310      	movs	r3, #16
 8000234:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000236:	2300      	movs	r3, #0
 8000238:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023a:	f107 0318 	add.w	r3, r7, #24
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fc92 	bl	8000b68 <HAL_RCC_OscConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800024a:	f000 f85d 	bl	8000308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024e:	230f      	movs	r3, #15
 8000250:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f001 fcbc 	bl	8001be4 <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000272:	f000 f849 	bl	8000308 <Error_Handler>
  }
}
 8000276:	bf00      	nop
 8000278:	3740      	adds	r7, #64	; 0x40
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <MX_USART2_Init+0x50>)
 8000286:	4a13      	ldr	r2, [pc, #76]	; (80002d4 <MX_USART2_Init+0x54>)
 8000288:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <MX_USART2_Init+0x50>)
 800028c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000290:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8000292:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <MX_USART2_Init+0x50>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000298:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <MX_USART2_Init+0x50>)
 800029a:	2200      	movs	r2, #0
 800029c:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 800029e:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <MX_USART2_Init+0x50>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80002a4:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <MX_USART2_Init+0x50>)
 80002a6:	220c      	movs	r2, #12
 80002a8:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80002aa:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <MX_USART2_Init+0x50>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80002b0:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <MX_USART2_Init+0x50>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80002b6:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <MX_USART2_Init+0x50>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <MX_USART2_Init+0x50>)
 80002be:	f001 fec7 	bl	8002050 <HAL_USART_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 80002c8:	f000 f81e 	bl	8000308 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	20000028 	.word	0x20000028
 80002d4:	40004400 	.word	0x40004400

080002d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <MX_GPIO_Init+0x2c>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a08      	ldr	r2, [pc, #32]	; (8000304 <MX_GPIO_Init+0x2c>)
 80002e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b06      	ldr	r3, [pc, #24]	; (8000304 <MX_GPIO_Init+0x2c>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]

}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000

08000308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800030c:	b672      	cpsid	i
}
 800030e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000310:	e7fe      	b.n	8000310 <Error_Handler+0x8>
	...

08000314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800031a:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <HAL_MspInit+0x44>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <HAL_MspInit+0x44>)
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	6193      	str	r3, [r2, #24]
 8000326:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <HAL_MspInit+0x44>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	f003 0301 	and.w	r3, r3, #1
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000332:	4b09      	ldr	r3, [pc, #36]	; (8000358 <HAL_MspInit+0x44>)
 8000334:	69db      	ldr	r3, [r3, #28]
 8000336:	4a08      	ldr	r2, [pc, #32]	; (8000358 <HAL_MspInit+0x44>)
 8000338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800033c:	61d3      	str	r3, [r2, #28]
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <HAL_MspInit+0x44>)
 8000340:	69db      	ldr	r3, [r3, #28]
 8000342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000346:	603b      	str	r3, [r7, #0]
 8000348:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800034a:	2007      	movs	r0, #7
 800034c:	f000 fa1a 	bl	8000784 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000350:	bf00      	nop
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40021000 	.word	0x40021000

0800035c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b08a      	sub	sp, #40	; 0x28
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000364:	f107 0314 	add.w	r3, r7, #20
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	60da      	str	r2, [r3, #12]
 8000372:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a1b      	ldr	r2, [pc, #108]	; (80003e8 <HAL_USART_MspInit+0x8c>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d130      	bne.n	80003e0 <HAL_USART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800037e:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <HAL_USART_MspInit+0x90>)
 8000380:	69db      	ldr	r3, [r3, #28]
 8000382:	4a1a      	ldr	r2, [pc, #104]	; (80003ec <HAL_USART_MspInit+0x90>)
 8000384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000388:	61d3      	str	r3, [r2, #28]
 800038a:	4b18      	ldr	r3, [pc, #96]	; (80003ec <HAL_USART_MspInit+0x90>)
 800038c:	69db      	ldr	r3, [r3, #28]
 800038e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000392:	613b      	str	r3, [r7, #16]
 8000394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000396:	4b15      	ldr	r3, [pc, #84]	; (80003ec <HAL_USART_MspInit+0x90>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a14      	ldr	r2, [pc, #80]	; (80003ec <HAL_USART_MspInit+0x90>)
 800039c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003a0:	6153      	str	r3, [r2, #20]
 80003a2:	4b12      	ldr	r3, [pc, #72]	; (80003ec <HAL_USART_MspInit+0x90>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80003ae:	231c      	movs	r3, #28
 80003b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003b2:	2302      	movs	r3, #2
 80003b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	2300      	movs	r3, #0
 80003b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ba:	2303      	movs	r3, #3
 80003bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80003be:	2307      	movs	r3, #7
 80003c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	4619      	mov	r1, r3
 80003c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003cc:	f000 fa5a 	bl	8000884 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 80003d0:	2201      	movs	r2, #1
 80003d2:	2100      	movs	r1, #0
 80003d4:	2026      	movs	r0, #38	; 0x26
 80003d6:	f000 f9e0 	bl	800079a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80003da:	2026      	movs	r0, #38	; 0x26
 80003dc:	f000 f9f9 	bl	80007d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80003e0:	bf00      	nop
 80003e2:	3728      	adds	r7, #40	; 0x28
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40004400 	.word	0x40004400
 80003ec:	40021000 	.word	0x40021000

080003f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <NMI_Handler+0x4>

080003f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003fa:	e7fe      	b.n	80003fa <HardFault_Handler+0x4>

080003fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000400:	e7fe      	b.n	8000400 <MemManage_Handler+0x4>

08000402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000406:	e7fe      	b.n	8000406 <BusFault_Handler+0x4>

08000408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800040c:	e7fe      	b.n	800040c <UsageFault_Handler+0x4>

0800040e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800040e:	b480      	push	{r7}
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000412:	bf00      	nop
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr

0800042a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800043c:	f000 f88e 	bl	800055c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}

08000444 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 8000448:	4802      	ldr	r0, [pc, #8]	; (8000454 <USART2_IRQHandler+0x10>)
 800044a:	f001 fef5 	bl	8002238 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000028 	.word	0x20000028

08000458 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <SystemInit+0x20>)
 800045e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000462:	4a05      	ldr	r2, [pc, #20]	; (8000478 <SystemInit+0x20>)
 8000464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	e000ed00 	.word	0xe000ed00

0800047c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800047c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004b4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000480:	480d      	ldr	r0, [pc, #52]	; (80004b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000482:	490e      	ldr	r1, [pc, #56]	; (80004bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000484:	4a0e      	ldr	r2, [pc, #56]	; (80004c0 <LoopForever+0xe>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000488:	e002      	b.n	8000490 <LoopCopyDataInit>

0800048a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800048c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048e:	3304      	adds	r3, #4

08000490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000494:	d3f9      	bcc.n	800048a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000496:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000498:	4c0b      	ldr	r4, [pc, #44]	; (80004c8 <LoopForever+0x16>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800049c:	e001      	b.n	80004a2 <LoopFillZerobss>

0800049e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a0:	3204      	adds	r2, #4

080004a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a4:	d3fb      	bcc.n	800049e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004a6:	f7ff ffd7 	bl	8000458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004aa:	f002 fa13 	bl	80028d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004ae:	f7ff fe8b 	bl	80001c8 <main>

080004b2 <LoopForever>:

LoopForever:
    b LoopForever
 80004b2:	e7fe      	b.n	80004b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004b4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80004b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004c0:	08002994 	.word	0x08002994
  ldr r2, =_sbss
 80004c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004c8:	2000007c 	.word	0x2000007c

080004cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004cc:	e7fe      	b.n	80004cc <ADC1_2_IRQHandler>
	...

080004d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <HAL_Init+0x28>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <HAL_Init+0x28>)
 80004da:	f043 0310 	orr.w	r3, r3, #16
 80004de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e0:	2003      	movs	r0, #3
 80004e2:	f000 f94f 	bl	8000784 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004e6:	2000      	movs	r0, #0
 80004e8:	f000 f808 	bl	80004fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004ec:	f7ff ff12 	bl	8000314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004f0:	2300      	movs	r3, #0
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40022000 	.word	0x40022000

080004fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <HAL_InitTick+0x54>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_InitTick+0x58>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	4619      	mov	r1, r3
 800050e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000512:	fbb3 f3f1 	udiv	r3, r3, r1
 8000516:	fbb2 f3f3 	udiv	r3, r2, r3
 800051a:	4618      	mov	r0, r3
 800051c:	f000 f967 	bl	80007ee <HAL_SYSTICK_Config>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000526:	2301      	movs	r3, #1
 8000528:	e00e      	b.n	8000548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b0f      	cmp	r3, #15
 800052e:	d80a      	bhi.n	8000546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000530:	2200      	movs	r2, #0
 8000532:	6879      	ldr	r1, [r7, #4]
 8000534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000538:	f000 f92f 	bl	800079a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <HAL_InitTick+0x5c>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000542:	2300      	movs	r3, #0
 8000544:	e000      	b.n	8000548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
}
 8000548:	4618      	mov	r0, r3
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000000 	.word	0x20000000
 8000554:	20000008 	.word	0x20000008
 8000558:	20000004 	.word	0x20000004

0800055c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <HAL_IncTick+0x20>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <HAL_IncTick+0x24>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4413      	add	r3, r2
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <HAL_IncTick+0x24>)
 800056e:	6013      	str	r3, [r2, #0]
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000008 	.word	0x20000008
 8000580:	20000078 	.word	0x20000078

08000584 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  return uwTick;  
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <HAL_GetTick+0x14>)
 800058a:	681b      	ldr	r3, [r3, #0]
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000078 	.word	0x20000078

0800059c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005a4:	f7ff ffee 	bl	8000584 <HAL_GetTick>
 80005a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005b4:	d005      	beq.n	80005c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <HAL_Delay+0x44>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	461a      	mov	r2, r3
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4413      	add	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005c2:	bf00      	nop
 80005c4:	f7ff ffde 	bl	8000584 <HAL_GetTick>
 80005c8:	4602      	mov	r2, r0
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d8f7      	bhi.n	80005c4 <HAL_Delay+0x28>
  {
  }
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000008 	.word	0x20000008

080005e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f003 0307 	and.w	r3, r3, #7
 80005f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__NVIC_SetPriorityGrouping+0x44>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fa:	68ba      	ldr	r2, [r7, #8]
 80005fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000600:	4013      	ands	r3, r2
 8000602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800060c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000616:	4a04      	ldr	r2, [pc, #16]	; (8000628 <__NVIC_SetPriorityGrouping+0x44>)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	60d3      	str	r3, [r2, #12]
}
 800061c:	bf00      	nop
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <__NVIC_GetPriorityGrouping+0x18>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	0a1b      	lsrs	r3, r3, #8
 8000636:	f003 0307 	and.w	r3, r3, #7
}
 800063a:	4618      	mov	r0, r3
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	2b00      	cmp	r3, #0
 8000658:	db0b      	blt.n	8000672 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	f003 021f 	and.w	r2, r3, #31
 8000660:	4907      	ldr	r1, [pc, #28]	; (8000680 <__NVIC_EnableIRQ+0x38>)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	095b      	lsrs	r3, r3, #5
 8000668:	2001      	movs	r0, #1
 800066a:	fa00 f202 	lsl.w	r2, r0, r2
 800066e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	e000e100 	.word	0xe000e100

08000684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	6039      	str	r1, [r7, #0]
 800068e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000694:	2b00      	cmp	r3, #0
 8000696:	db0a      	blt.n	80006ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	b2da      	uxtb	r2, r3
 800069c:	490c      	ldr	r1, [pc, #48]	; (80006d0 <__NVIC_SetPriority+0x4c>)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	0112      	lsls	r2, r2, #4
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	440b      	add	r3, r1
 80006a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ac:	e00a      	b.n	80006c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4908      	ldr	r1, [pc, #32]	; (80006d4 <__NVIC_SetPriority+0x50>)
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	f003 030f 	and.w	r3, r3, #15
 80006ba:	3b04      	subs	r3, #4
 80006bc:	0112      	lsls	r2, r2, #4
 80006be:	b2d2      	uxtb	r2, r2
 80006c0:	440b      	add	r3, r1
 80006c2:	761a      	strb	r2, [r3, #24]
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000e100 	.word	0xe000e100
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b089      	sub	sp, #36	; 0x24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	f1c3 0307 	rsb	r3, r3, #7
 80006f2:	2b04      	cmp	r3, #4
 80006f4:	bf28      	it	cs
 80006f6:	2304      	movcs	r3, #4
 80006f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	3304      	adds	r3, #4
 80006fe:	2b06      	cmp	r3, #6
 8000700:	d902      	bls.n	8000708 <NVIC_EncodePriority+0x30>
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	3b03      	subs	r3, #3
 8000706:	e000      	b.n	800070a <NVIC_EncodePriority+0x32>
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	fa02 f303 	lsl.w	r3, r2, r3
 8000716:	43da      	mvns	r2, r3
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	401a      	ands	r2, r3
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000720:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	fa01 f303 	lsl.w	r3, r1, r3
 800072a:	43d9      	mvns	r1, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	4313      	orrs	r3, r2
         );
}
 8000732:	4618      	mov	r0, r3
 8000734:	3724      	adds	r7, #36	; 0x24
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
	...

08000740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3b01      	subs	r3, #1
 800074c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000750:	d301      	bcc.n	8000756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000752:	2301      	movs	r3, #1
 8000754:	e00f      	b.n	8000776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <SysTick_Config+0x40>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800075e:	210f      	movs	r1, #15
 8000760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000764:	f7ff ff8e 	bl	8000684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <SysTick_Config+0x40>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <SysTick_Config+0x40>)
 8000770:	2207      	movs	r2, #7
 8000772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	e000e010 	.word	0xe000e010

08000784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff ff29 	bl	80005e4 <__NVIC_SetPriorityGrouping>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b086      	sub	sp, #24
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	60b9      	str	r1, [r7, #8]
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007ac:	f7ff ff3e 	bl	800062c <__NVIC_GetPriorityGrouping>
 80007b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	68b9      	ldr	r1, [r7, #8]
 80007b6:	6978      	ldr	r0, [r7, #20]
 80007b8:	f7ff ff8e 	bl	80006d8 <NVIC_EncodePriority>
 80007bc:	4602      	mov	r2, r0
 80007be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff5d 	bl	8000684 <__NVIC_SetPriority>
}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	4603      	mov	r3, r0
 80007da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff31 	bl	8000648 <__NVIC_EnableIRQ>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ffa2 	bl	8000740 <SysTick_Config>
 80007fc:	4603      	mov	r3, r0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000806:	b580      	push	{r7, lr}
 8000808:	b084      	sub	sp, #16
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000818:	2b02      	cmp	r3, #2
 800081a:	d005      	beq.n	8000828 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2204      	movs	r2, #4
 8000820:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	73fb      	strb	r3, [r7, #15]
 8000826:	e027      	b.n	8000878 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f022 020e 	bic.w	r2, r2, #14
 8000836:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f022 0201 	bic.w	r2, r2, #1
 8000846:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000850:	2101      	movs	r1, #1
 8000852:	fa01 f202 	lsl.w	r2, r1, r2
 8000856:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2201      	movs	r2, #1
 800085c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2200      	movs	r2, #0
 8000864:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800086c:	2b00      	cmp	r3, #0
 800086e:	d003      	beq.n	8000878 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	4798      	blx	r3
    } 
  }
  return status;
 8000878:	7bfb      	ldrb	r3, [r7, #15]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000884:	b480      	push	{r7}
 8000886:	b087      	sub	sp, #28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000892:	e14e      	b.n	8000b32 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	2101      	movs	r1, #1
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	fa01 f303 	lsl.w	r3, r1, r3
 80008a0:	4013      	ands	r3, r2
 80008a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	f000 8140 	beq.w	8000b2c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	f003 0303 	and.w	r3, r3, #3
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d005      	beq.n	80008c4 <HAL_GPIO_Init+0x40>
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f003 0303 	and.w	r3, r3, #3
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d130      	bne.n	8000926 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	2203      	movs	r2, #3
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	43db      	mvns	r3, r3
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	4013      	ands	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	68da      	ldr	r2, [r3, #12]
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008fa:	2201      	movs	r2, #1
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43db      	mvns	r3, r3
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	4013      	ands	r3, r2
 8000908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	091b      	lsrs	r3, r3, #4
 8000910:	f003 0201 	and.w	r2, r3, #1
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	4313      	orrs	r3, r2
 800091e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	f003 0303 	and.w	r3, r3, #3
 800092e:	2b03      	cmp	r3, #3
 8000930:	d017      	beq.n	8000962 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	2203      	movs	r2, #3
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4013      	ands	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	689a      	ldr	r2, [r3, #8]
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4313      	orrs	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f003 0303 	and.w	r3, r3, #3
 800096a:	2b02      	cmp	r3, #2
 800096c:	d123      	bne.n	80009b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	08da      	lsrs	r2, r3, #3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3208      	adds	r2, #8
 8000976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800097a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	220f      	movs	r2, #15
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	4013      	ands	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	691a      	ldr	r2, [r3, #16]
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	f003 0307 	and.w	r3, r3, #7
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	08da      	lsrs	r2, r3, #3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3208      	adds	r2, #8
 80009b0:	6939      	ldr	r1, [r7, #16]
 80009b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	2203      	movs	r2, #3
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f003 0203 	and.w	r2, r3, #3
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	f000 809a 	beq.w	8000b2c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f8:	4b55      	ldr	r3, [pc, #340]	; (8000b50 <HAL_GPIO_Init+0x2cc>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a54      	ldr	r2, [pc, #336]	; (8000b50 <HAL_GPIO_Init+0x2cc>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b52      	ldr	r3, [pc, #328]	; (8000b50 <HAL_GPIO_Init+0x2cc>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a10:	4a50      	ldr	r2, [pc, #320]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	089b      	lsrs	r3, r3, #2
 8000a16:	3302      	adds	r3, #2
 8000a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	f003 0303 	and.w	r3, r3, #3
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	220f      	movs	r2, #15
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4013      	ands	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a3a:	d013      	beq.n	8000a64 <HAL_GPIO_Init+0x1e0>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a46      	ldr	r2, [pc, #280]	; (8000b58 <HAL_GPIO_Init+0x2d4>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d00d      	beq.n	8000a60 <HAL_GPIO_Init+0x1dc>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a45      	ldr	r2, [pc, #276]	; (8000b5c <HAL_GPIO_Init+0x2d8>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d007      	beq.n	8000a5c <HAL_GPIO_Init+0x1d8>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a44      	ldr	r2, [pc, #272]	; (8000b60 <HAL_GPIO_Init+0x2dc>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d101      	bne.n	8000a58 <HAL_GPIO_Init+0x1d4>
 8000a54:	2303      	movs	r3, #3
 8000a56:	e006      	b.n	8000a66 <HAL_GPIO_Init+0x1e2>
 8000a58:	2305      	movs	r3, #5
 8000a5a:	e004      	b.n	8000a66 <HAL_GPIO_Init+0x1e2>
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	e002      	b.n	8000a66 <HAL_GPIO_Init+0x1e2>
 8000a60:	2301      	movs	r3, #1
 8000a62:	e000      	b.n	8000a66 <HAL_GPIO_Init+0x1e2>
 8000a64:	2300      	movs	r3, #0
 8000a66:	697a      	ldr	r2, [r7, #20]
 8000a68:	f002 0203 	and.w	r2, r2, #3
 8000a6c:	0092      	lsls	r2, r2, #2
 8000a6e:	4093      	lsls	r3, r2
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a76:	4937      	ldr	r1, [pc, #220]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	089b      	lsrs	r3, r3, #2
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a84:	4b37      	ldr	r3, [pc, #220]	; (8000b64 <HAL_GPIO_Init+0x2e0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000aa8:	4a2e      	ldr	r2, [pc, #184]	; (8000b64 <HAL_GPIO_Init+0x2e0>)
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000aae:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <HAL_GPIO_Init+0x2e0>)
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ad2:	4a24      	ldr	r2, [pc, #144]	; (8000b64 <HAL_GPIO_Init+0x2e0>)
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ad8:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <HAL_GPIO_Init+0x2e0>)
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000afc:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <HAL_GPIO_Init+0x2e0>)
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_GPIO_Init+0x2e0>)
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b26:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <HAL_GPIO_Init+0x2e0>)
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	fa22 f303 	lsr.w	r3, r2, r3
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	f47f aea9 	bne.w	8000894 <HAL_GPIO_Init+0x10>
  }
}
 8000b42:	bf00      	nop
 8000b44:	bf00      	nop
 8000b46:	371c      	adds	r7, #28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40010000 	.word	0x40010000
 8000b58:	48000400 	.word	0x48000400
 8000b5c:	48000800 	.word	0x48000800
 8000b60:	48000c00 	.word	0x48000c00
 8000b64:	40010400 	.word	0x40010400

08000b68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b78:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d102      	bne.n	8000b8e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	f001 b823 	b.w	8001bd4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f000 817d 	beq.w	8000e9e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ba4:	4bbc      	ldr	r3, [pc, #752]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 030c 	and.w	r3, r3, #12
 8000bac:	2b04      	cmp	r3, #4
 8000bae:	d00c      	beq.n	8000bca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bb0:	4bb9      	ldr	r3, [pc, #740]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 030c 	and.w	r3, r3, #12
 8000bb8:	2b08      	cmp	r3, #8
 8000bba:	d15c      	bne.n	8000c76 <HAL_RCC_OscConfig+0x10e>
 8000bbc:	4bb6      	ldr	r3, [pc, #728]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc8:	d155      	bne.n	8000c76 <HAL_RCC_OscConfig+0x10e>
 8000bca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bce:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bd2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000bd6:	fa93 f3a3 	rbit	r3, r3
 8000bda:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000bde:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be2:	fab3 f383 	clz	r3, r3
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	095b      	lsrs	r3, r3, #5
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d102      	bne.n	8000bfc <HAL_RCC_OscConfig+0x94>
 8000bf6:	4ba8      	ldr	r3, [pc, #672]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	e015      	b.n	8000c28 <HAL_RCC_OscConfig+0xc0>
 8000bfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c00:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c04:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000c08:	fa93 f3a3 	rbit	r3, r3
 8000c0c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000c10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c14:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c18:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000c1c:	fa93 f3a3 	rbit	r3, r3
 8000c20:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000c24:	4b9c      	ldr	r3, [pc, #624]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c2c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000c30:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c34:	fa92 f2a2 	rbit	r2, r2
 8000c38:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000c3c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	f042 0220 	orr.w	r2, r2, #32
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	f002 021f 	and.w	r2, r2, #31
 8000c50:	2101      	movs	r1, #1
 8000c52:	fa01 f202 	lsl.w	r2, r1, r2
 8000c56:	4013      	ands	r3, r2
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f000 811f 	beq.w	8000e9c <HAL_RCC_OscConfig+0x334>
 8000c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f040 8116 	bne.w	8000e9c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	f000 bfaf 	b.w	8001bd4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c86:	d106      	bne.n	8000c96 <HAL_RCC_OscConfig+0x12e>
 8000c88:	4b83      	ldr	r3, [pc, #524]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a82      	ldr	r2, [pc, #520]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c92:	6013      	str	r3, [r2, #0]
 8000c94:	e036      	b.n	8000d04 <HAL_RCC_OscConfig+0x19c>
 8000c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10c      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x158>
 8000ca6:	4b7c      	ldr	r3, [pc, #496]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a7b      	ldr	r2, [pc, #492]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	4b79      	ldr	r3, [pc, #484]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a78      	ldr	r2, [pc, #480]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000cb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	e021      	b.n	8000d04 <HAL_RCC_OscConfig+0x19c>
 8000cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cd0:	d10c      	bne.n	8000cec <HAL_RCC_OscConfig+0x184>
 8000cd2:	4b71      	ldr	r3, [pc, #452]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a70      	ldr	r2, [pc, #448]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	4b6e      	ldr	r3, [pc, #440]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a6d      	ldr	r2, [pc, #436]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	e00b      	b.n	8000d04 <HAL_RCC_OscConfig+0x19c>
 8000cec:	4b6a      	ldr	r3, [pc, #424]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a69      	ldr	r2, [pc, #420]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	4b67      	ldr	r3, [pc, #412]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a66      	ldr	r2, [pc, #408]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d02:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d04:	4b64      	ldr	r3, [pc, #400]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d08:	f023 020f 	bic.w	r2, r3, #15
 8000d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	495f      	ldr	r1, [pc, #380]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d059      	beq.n	8000de2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2e:	f7ff fc29 	bl	8000584 <HAL_GetTick>
 8000d32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d36:	e00a      	b.n	8000d4e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d38:	f7ff fc24 	bl	8000584 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	2b64      	cmp	r3, #100	; 0x64
 8000d46:	d902      	bls.n	8000d4e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	f000 bf43 	b.w	8001bd4 <HAL_RCC_OscConfig+0x106c>
 8000d4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d52:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d56:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000d5a:	fa93 f3a3 	rbit	r3, r3
 8000d5e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000d62:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d66:	fab3 f383 	clz	r3, r3
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	095b      	lsrs	r3, r3, #5
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d102      	bne.n	8000d80 <HAL_RCC_OscConfig+0x218>
 8000d7a:	4b47      	ldr	r3, [pc, #284]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	e015      	b.n	8000dac <HAL_RCC_OscConfig+0x244>
 8000d80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d84:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d88:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000d8c:	fa93 f3a3 	rbit	r3, r3
 8000d90:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000d94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d98:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000d9c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000da0:	fa93 f3a3 	rbit	r3, r3
 8000da4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000da8:	4b3b      	ldr	r3, [pc, #236]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000db0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000db4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000db8:	fa92 f2a2 	rbit	r2, r2
 8000dbc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000dc0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	f042 0220 	orr.w	r2, r2, #32
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	f002 021f 	and.w	r2, r2, #31
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dda:	4013      	ands	r3, r2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0ab      	beq.n	8000d38 <HAL_RCC_OscConfig+0x1d0>
 8000de0:	e05d      	b.n	8000e9e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de2:	f7ff fbcf 	bl	8000584 <HAL_GetTick>
 8000de6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dea:	e00a      	b.n	8000e02 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dec:	f7ff fbca 	bl	8000584 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	2b64      	cmp	r3, #100	; 0x64
 8000dfa:	d902      	bls.n	8000e02 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	f000 bee9 	b.w	8001bd4 <HAL_RCC_OscConfig+0x106c>
 8000e02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e06:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e0a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000e0e:	fa93 f3a3 	rbit	r3, r3
 8000e12:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000e16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e1a:	fab3 f383 	clz	r3, r3
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	095b      	lsrs	r3, r3, #5
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d102      	bne.n	8000e34 <HAL_RCC_OscConfig+0x2cc>
 8000e2e:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	e015      	b.n	8000e60 <HAL_RCC_OscConfig+0x2f8>
 8000e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e38:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000e40:	fa93 f3a3 	rbit	r3, r3
 8000e44:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e4c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e50:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000e54:	fa93 f3a3 	rbit	r3, r3
 8000e58:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_RCC_OscConfig+0x330>)
 8000e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e64:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000e68:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e6c:	fa92 f2a2 	rbit	r2, r2
 8000e70:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000e74:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000e78:	fab2 f282 	clz	r2, r2
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	f042 0220 	orr.w	r2, r2, #32
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	f002 021f 	and.w	r2, r2, #31
 8000e88:	2101      	movs	r1, #1
 8000e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8e:	4013      	ands	r3, r2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d1ab      	bne.n	8000dec <HAL_RCC_OscConfig+0x284>
 8000e94:	e003      	b.n	8000e9e <HAL_RCC_OscConfig+0x336>
 8000e96:	bf00      	nop
 8000e98:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ea2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 817d 	beq.w	80011ae <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000eb4:	4ba6      	ldr	r3, [pc, #664]	; (8001150 <HAL_RCC_OscConfig+0x5e8>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 030c 	and.w	r3, r3, #12
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00b      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ec0:	4ba3      	ldr	r3, [pc, #652]	; (8001150 <HAL_RCC_OscConfig+0x5e8>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 030c 	and.w	r3, r3, #12
 8000ec8:	2b08      	cmp	r3, #8
 8000eca:	d172      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x44a>
 8000ecc:	4ba0      	ldr	r3, [pc, #640]	; (8001150 <HAL_RCC_OscConfig+0x5e8>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d16c      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x44a>
 8000ed8:	2302      	movs	r3, #2
 8000eda:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ede:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000ee2:	fa93 f3a3 	rbit	r3, r3
 8000ee6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000eea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eee:	fab3 f383 	clz	r3, r3
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	095b      	lsrs	r3, r3, #5
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d102      	bne.n	8000f08 <HAL_RCC_OscConfig+0x3a0>
 8000f02:	4b93      	ldr	r3, [pc, #588]	; (8001150 <HAL_RCC_OscConfig+0x5e8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	e013      	b.n	8000f30 <HAL_RCC_OscConfig+0x3c8>
 8000f08:	2302      	movs	r3, #2
 8000f0a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000f12:	fa93 f3a3 	rbit	r3, r3
 8000f16:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000f20:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000f24:	fa93 f3a3 	rbit	r3, r3
 8000f28:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000f2c:	4b88      	ldr	r3, [pc, #544]	; (8001150 <HAL_RCC_OscConfig+0x5e8>)
 8000f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f30:	2202      	movs	r2, #2
 8000f32:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000f36:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f3a:	fa92 f2a2 	rbit	r2, r2
 8000f3e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000f42:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000f46:	fab2 f282 	clz	r2, r2
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	f042 0220 	orr.w	r2, r2, #32
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	f002 021f 	and.w	r2, r2, #31
 8000f56:	2101      	movs	r1, #1
 8000f58:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00a      	beq.n	8000f78 <HAL_RCC_OscConfig+0x410>
 8000f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d002      	beq.n	8000f78 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	f000 be2e 	b.w	8001bd4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f78:	4b75      	ldr	r3, [pc, #468]	; (8001150 <HAL_RCC_OscConfig+0x5e8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	21f8      	movs	r1, #248	; 0xf8
 8000f8e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f92:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000f96:	fa91 f1a1 	rbit	r1, r1
 8000f9a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000f9e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000fa2:	fab1 f181 	clz	r1, r1
 8000fa6:	b2c9      	uxtb	r1, r1
 8000fa8:	408b      	lsls	r3, r1
 8000faa:	4969      	ldr	r1, [pc, #420]	; (8001150 <HAL_RCC_OscConfig+0x5e8>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb0:	e0fd      	b.n	80011ae <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 8088 	beq.w	80010d4 <HAL_RCC_OscConfig+0x56c>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000fce:	fa93 f3a3 	rbit	r3, r3
 8000fd2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000fd6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fda:	fab3 f383 	clz	r3, r3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fe4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	461a      	mov	r2, r3
 8000fec:	2301      	movs	r3, #1
 8000fee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fac8 	bl	8000584 <HAL_GetTick>
 8000ff4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff8:	e00a      	b.n	8001010 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ffa:	f7ff fac3 	bl	8000584 <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d902      	bls.n	8001010 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	f000 bde2 	b.w	8001bd4 <HAL_RCC_OscConfig+0x106c>
 8001010:	2302      	movs	r3, #2
 8001012:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001016:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800101a:	fa93 f3a3 	rbit	r3, r3
 800101e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001022:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001026:	fab3 f383 	clz	r3, r3
 800102a:	b2db      	uxtb	r3, r3
 800102c:	095b      	lsrs	r3, r3, #5
 800102e:	b2db      	uxtb	r3, r3
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b01      	cmp	r3, #1
 8001038:	d102      	bne.n	8001040 <HAL_RCC_OscConfig+0x4d8>
 800103a:	4b45      	ldr	r3, [pc, #276]	; (8001150 <HAL_RCC_OscConfig+0x5e8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	e013      	b.n	8001068 <HAL_RCC_OscConfig+0x500>
 8001040:	2302      	movs	r3, #2
 8001042:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001046:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001052:	2302      	movs	r3, #2
 8001054:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001058:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800105c:	fa93 f3a3 	rbit	r3, r3
 8001060:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001064:	4b3a      	ldr	r3, [pc, #232]	; (8001150 <HAL_RCC_OscConfig+0x5e8>)
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	2202      	movs	r2, #2
 800106a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800106e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001072:	fa92 f2a2 	rbit	r2, r2
 8001076:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800107a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800107e:	fab2 f282 	clz	r2, r2
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	f042 0220 	orr.w	r2, r2, #32
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	f002 021f 	and.w	r2, r2, #31
 800108e:	2101      	movs	r1, #1
 8001090:	fa01 f202 	lsl.w	r2, r1, r2
 8001094:	4013      	ands	r3, r2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0af      	beq.n	8000ffa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109a:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <HAL_RCC_OscConfig+0x5e8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	21f8      	movs	r1, #248	; 0xf8
 80010b0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80010b8:	fa91 f1a1 	rbit	r1, r1
 80010bc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80010c0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80010c4:	fab1 f181 	clz	r1, r1
 80010c8:	b2c9      	uxtb	r1, r1
 80010ca:	408b      	lsls	r3, r1
 80010cc:	4920      	ldr	r1, [pc, #128]	; (8001150 <HAL_RCC_OscConfig+0x5e8>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	600b      	str	r3, [r1, #0]
 80010d2:	e06c      	b.n	80011ae <HAL_RCC_OscConfig+0x646>
 80010d4:	2301      	movs	r3, #1
 80010d6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80010de:	fa93 f3a3 	rbit	r3, r3
 80010e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80010e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ea:	fab3 f383 	clz	r3, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	461a      	mov	r2, r3
 80010fc:	2300      	movs	r3, #0
 80010fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001100:	f7ff fa40 	bl	8000584 <HAL_GetTick>
 8001104:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001108:	e00a      	b.n	8001120 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800110a:	f7ff fa3b 	bl	8000584 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d902      	bls.n	8001120 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	f000 bd5a 	b.w	8001bd4 <HAL_RCC_OscConfig+0x106c>
 8001120:	2302      	movs	r3, #2
 8001122:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001126:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800112a:	fa93 f3a3 	rbit	r3, r3
 800112e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001136:	fab3 f383 	clz	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	095b      	lsrs	r3, r3, #5
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b01      	cmp	r3, #1
 8001148:	d104      	bne.n	8001154 <HAL_RCC_OscConfig+0x5ec>
 800114a:	4b01      	ldr	r3, [pc, #4]	; (8001150 <HAL_RCC_OscConfig+0x5e8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	e015      	b.n	800117c <HAL_RCC_OscConfig+0x614>
 8001150:	40021000 	.word	0x40021000
 8001154:	2302      	movs	r3, #2
 8001156:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800115e:	fa93 f3a3 	rbit	r3, r3
 8001162:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001166:	2302      	movs	r3, #2
 8001168:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800116c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001170:	fa93 f3a3 	rbit	r3, r3
 8001174:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001178:	4bc8      	ldr	r3, [pc, #800]	; (800149c <HAL_RCC_OscConfig+0x934>)
 800117a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117c:	2202      	movs	r2, #2
 800117e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001182:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001186:	fa92 f2a2 	rbit	r2, r2
 800118a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800118e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001192:	fab2 f282 	clz	r2, r2
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	f042 0220 	orr.w	r2, r2, #32
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	f002 021f 	and.w	r2, r2, #31
 80011a2:	2101      	movs	r1, #1
 80011a4:	fa01 f202 	lsl.w	r2, r1, r2
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1ad      	bne.n	800110a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 8110 	beq.w	80013e4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d079      	beq.n	80012c8 <HAL_RCC_OscConfig+0x760>
 80011d4:	2301      	movs	r3, #1
 80011d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80011de:	fa93 f3a3 	rbit	r3, r3
 80011e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80011e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ea:	fab3 f383 	clz	r3, r3
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	461a      	mov	r2, r3
 80011f2:	4bab      	ldr	r3, [pc, #684]	; (80014a0 <HAL_RCC_OscConfig+0x938>)
 80011f4:	4413      	add	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	461a      	mov	r2, r3
 80011fa:	2301      	movs	r3, #1
 80011fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fe:	f7ff f9c1 	bl	8000584 <HAL_GetTick>
 8001202:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001206:	e00a      	b.n	800121e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001208:	f7ff f9bc 	bl	8000584 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d902      	bls.n	800121e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	f000 bcdb 	b.w	8001bd4 <HAL_RCC_OscConfig+0x106c>
 800121e:	2302      	movs	r3, #2
 8001220:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001224:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001228:	fa93 f3a3 	rbit	r3, r3
 800122c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001234:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001238:	2202      	movs	r2, #2
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001240:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	fa93 f2a3 	rbit	r2, r3
 800124a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800124e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800125c:	2202      	movs	r2, #2
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	fa93 f2a3 	rbit	r2, r3
 800126e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001272:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001276:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001278:	4b88      	ldr	r3, [pc, #544]	; (800149c <HAL_RCC_OscConfig+0x934>)
 800127a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800127c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001280:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001284:	2102      	movs	r1, #2
 8001286:	6019      	str	r1, [r3, #0]
 8001288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800128c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	fa93 f1a3 	rbit	r1, r3
 8001296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800129a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800129e:	6019      	str	r1, [r3, #0]
  return result;
 80012a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	fab3 f383 	clz	r3, r3
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	f003 031f 	and.w	r3, r3, #31
 80012ba:	2101      	movs	r1, #1
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0a0      	beq.n	8001208 <HAL_RCC_OscConfig+0x6a0>
 80012c6:	e08d      	b.n	80013e4 <HAL_RCC_OscConfig+0x87c>
 80012c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80012d0:	2201      	movs	r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	fa93 f2a3 	rbit	r2, r3
 80012e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80012ea:	601a      	str	r2, [r3, #0]
  return result;
 80012ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80012f4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f6:	fab3 f383 	clz	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b68      	ldr	r3, [pc, #416]	; (80014a0 <HAL_RCC_OscConfig+0x938>)
 8001300:	4413      	add	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	461a      	mov	r2, r3
 8001306:	2300      	movs	r3, #0
 8001308:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130a:	f7ff f93b 	bl	8000584 <HAL_GetTick>
 800130e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001312:	e00a      	b.n	800132a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001314:	f7ff f936 	bl	8000584 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d902      	bls.n	800132a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	f000 bc55 	b.w	8001bd4 <HAL_RCC_OscConfig+0x106c>
 800132a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800132e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001332:	2202      	movs	r2, #2
 8001334:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800133a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	fa93 f2a3 	rbit	r2, r3
 8001344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001348:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001352:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001356:	2202      	movs	r2, #2
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800135e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	fa93 f2a3 	rbit	r2, r3
 8001368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800136c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001376:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800137a:	2202      	movs	r2, #2
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001382:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	fa93 f2a3 	rbit	r2, r3
 800138c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001390:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001394:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001396:	4b41      	ldr	r3, [pc, #260]	; (800149c <HAL_RCC_OscConfig+0x934>)
 8001398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800139a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800139e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80013a2:	2102      	movs	r1, #2
 80013a4:	6019      	str	r1, [r3, #0]
 80013a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	fa93 f1a3 	rbit	r1, r3
 80013b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80013bc:	6019      	str	r1, [r3, #0]
  return result;
 80013be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	fab3 f383 	clz	r3, r3
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	f003 031f 	and.w	r3, r3, #31
 80013d8:	2101      	movs	r1, #1
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	4013      	ands	r3, r2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d197      	bne.n	8001314 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 81a1 	beq.w	800173c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001400:	4b26      	ldr	r3, [pc, #152]	; (800149c <HAL_RCC_OscConfig+0x934>)
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d116      	bne.n	800143a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800140c:	4b23      	ldr	r3, [pc, #140]	; (800149c <HAL_RCC_OscConfig+0x934>)
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	4a22      	ldr	r2, [pc, #136]	; (800149c <HAL_RCC_OscConfig+0x934>)
 8001412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001416:	61d3      	str	r3, [r2, #28]
 8001418:	4b20      	ldr	r3, [pc, #128]	; (800149c <HAL_RCC_OscConfig+0x934>)
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001424:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001432:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001434:	2301      	movs	r3, #1
 8001436:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <HAL_RCC_OscConfig+0x93c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001442:	2b00      	cmp	r3, #0
 8001444:	d11a      	bne.n	800147c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <HAL_RCC_OscConfig+0x93c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a16      	ldr	r2, [pc, #88]	; (80014a4 <HAL_RCC_OscConfig+0x93c>)
 800144c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001450:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001452:	f7ff f897 	bl	8000584 <HAL_GetTick>
 8001456:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145a:	e009      	b.n	8001470 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800145c:	f7ff f892 	bl	8000584 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b64      	cmp	r3, #100	; 0x64
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e3b1      	b.n	8001bd4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_RCC_OscConfig+0x93c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0ef      	beq.n	800145c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001480:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d10d      	bne.n	80014a8 <HAL_RCC_OscConfig+0x940>
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <HAL_RCC_OscConfig+0x934>)
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	4a02      	ldr	r2, [pc, #8]	; (800149c <HAL_RCC_OscConfig+0x934>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6213      	str	r3, [r2, #32]
 8001498:	e03c      	b.n	8001514 <HAL_RCC_OscConfig+0x9ac>
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000
 80014a0:	10908120 	.word	0x10908120
 80014a4:	40007000 	.word	0x40007000
 80014a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10c      	bne.n	80014d2 <HAL_RCC_OscConfig+0x96a>
 80014b8:	4bc1      	ldr	r3, [pc, #772]	; (80017c0 <HAL_RCC_OscConfig+0xc58>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4ac0      	ldr	r2, [pc, #768]	; (80017c0 <HAL_RCC_OscConfig+0xc58>)
 80014be:	f023 0301 	bic.w	r3, r3, #1
 80014c2:	6213      	str	r3, [r2, #32]
 80014c4:	4bbe      	ldr	r3, [pc, #760]	; (80017c0 <HAL_RCC_OscConfig+0xc58>)
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4abd      	ldr	r2, [pc, #756]	; (80017c0 <HAL_RCC_OscConfig+0xc58>)
 80014ca:	f023 0304 	bic.w	r3, r3, #4
 80014ce:	6213      	str	r3, [r2, #32]
 80014d0:	e020      	b.n	8001514 <HAL_RCC_OscConfig+0x9ac>
 80014d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0x994>
 80014e2:	4bb7      	ldr	r3, [pc, #732]	; (80017c0 <HAL_RCC_OscConfig+0xc58>)
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	4ab6      	ldr	r2, [pc, #728]	; (80017c0 <HAL_RCC_OscConfig+0xc58>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6213      	str	r3, [r2, #32]
 80014ee:	4bb4      	ldr	r3, [pc, #720]	; (80017c0 <HAL_RCC_OscConfig+0xc58>)
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	4ab3      	ldr	r2, [pc, #716]	; (80017c0 <HAL_RCC_OscConfig+0xc58>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6213      	str	r3, [r2, #32]
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0x9ac>
 80014fc:	4bb0      	ldr	r3, [pc, #704]	; (80017c0 <HAL_RCC_OscConfig+0xc58>)
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	4aaf      	ldr	r2, [pc, #700]	; (80017c0 <HAL_RCC_OscConfig+0xc58>)
 8001502:	f023 0301 	bic.w	r3, r3, #1
 8001506:	6213      	str	r3, [r2, #32]
 8001508:	4bad      	ldr	r3, [pc, #692]	; (80017c0 <HAL_RCC_OscConfig+0xc58>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	4aac      	ldr	r2, [pc, #688]	; (80017c0 <HAL_RCC_OscConfig+0xc58>)
 800150e:	f023 0304 	bic.w	r3, r3, #4
 8001512:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001518:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 8081 	beq.w	8001628 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001526:	f7ff f82d 	bl	8000584 <HAL_GetTick>
 800152a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152e:	e00b      	b.n	8001548 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001530:	f7ff f828 	bl	8000584 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001540:	4293      	cmp	r3, r2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e345      	b.n	8001bd4 <HAL_RCC_OscConfig+0x106c>
 8001548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001550:	2202      	movs	r2, #2
 8001552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001558:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	fa93 f2a3 	rbit	r2, r3
 8001562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001566:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001570:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001574:	2202      	movs	r2, #2
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	fa93 f2a3 	rbit	r2, r3
 8001586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800158e:	601a      	str	r2, [r3, #0]
  return result;
 8001590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001594:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001598:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159a:	fab3 f383 	clz	r3, r3
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	095b      	lsrs	r3, r3, #5
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d102      	bne.n	80015b4 <HAL_RCC_OscConfig+0xa4c>
 80015ae:	4b84      	ldr	r3, [pc, #528]	; (80017c0 <HAL_RCC_OscConfig+0xc58>)
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	e013      	b.n	80015dc <HAL_RCC_OscConfig+0xa74>
 80015b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80015bc:	2202      	movs	r2, #2
 80015be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	fa93 f2a3 	rbit	r2, r3
 80015ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	4b79      	ldr	r3, [pc, #484]	; (80017c0 <HAL_RCC_OscConfig+0xc58>)
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015e0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80015e4:	2102      	movs	r1, #2
 80015e6:	6011      	str	r1, [r2, #0]
 80015e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	fa92 f1a2 	rbit	r1, r2
 80015f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015fa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80015fe:	6011      	str	r1, [r2, #0]
  return result;
 8001600:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001604:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	fab2 f282 	clz	r2, r2
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	f002 021f 	and.w	r2, r2, #31
 800161a:	2101      	movs	r1, #1
 800161c:	fa01 f202 	lsl.w	r2, r1, r2
 8001620:	4013      	ands	r3, r2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d084      	beq.n	8001530 <HAL_RCC_OscConfig+0x9c8>
 8001626:	e07f      	b.n	8001728 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001628:	f7fe ffac 	bl	8000584 <HAL_GetTick>
 800162c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001630:	e00b      	b.n	800164a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001632:	f7fe ffa7 	bl	8000584 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001642:	4293      	cmp	r3, r2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e2c4      	b.n	8001bd4 <HAL_RCC_OscConfig+0x106c>
 800164a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001652:	2202      	movs	r2, #2
 8001654:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	fa93 f2a3 	rbit	r2, r3
 8001664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001668:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001672:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001676:	2202      	movs	r2, #2
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	fa93 f2a3 	rbit	r2, r3
 8001688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001690:	601a      	str	r2, [r3, #0]
  return result;
 8001692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001696:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800169a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169c:	fab3 f383 	clz	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	f043 0302 	orr.w	r3, r3, #2
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d102      	bne.n	80016b6 <HAL_RCC_OscConfig+0xb4e>
 80016b0:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <HAL_RCC_OscConfig+0xc58>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	e013      	b.n	80016de <HAL_RCC_OscConfig+0xb76>
 80016b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80016be:	2202      	movs	r2, #2
 80016c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	fa93 f2a3 	rbit	r2, r3
 80016d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	4b39      	ldr	r3, [pc, #228]	; (80017c0 <HAL_RCC_OscConfig+0xc58>)
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016e2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80016e6:	2102      	movs	r1, #2
 80016e8:	6011      	str	r1, [r2, #0]
 80016ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	fa92 f1a2 	rbit	r1, r2
 80016f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016fc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001700:	6011      	str	r1, [r2, #0]
  return result;
 8001702:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001706:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	fab2 f282 	clz	r2, r2
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	f002 021f 	and.w	r2, r2, #31
 800171c:	2101      	movs	r1, #1
 800171e:	fa01 f202 	lsl.w	r2, r1, r2
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d184      	bne.n	8001632 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001728:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800172c:	2b01      	cmp	r3, #1
 800172e:	d105      	bne.n	800173c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001730:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <HAL_RCC_OscConfig+0xc58>)
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	4a22      	ldr	r2, [pc, #136]	; (80017c0 <HAL_RCC_OscConfig+0xc58>)
 8001736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800173a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800173c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001740:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 8242 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800174e:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <HAL_RCC_OscConfig+0xc58>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b08      	cmp	r3, #8
 8001758:	f000 8213 	beq.w	8001b82 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800175c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001760:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	2b02      	cmp	r3, #2
 800176a:	f040 8162 	bne.w	8001a32 <HAL_RCC_OscConfig+0xeca>
 800176e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001772:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001776:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800177a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001780:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	fa93 f2a3 	rbit	r2, r3
 800178a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001792:	601a      	str	r2, [r3, #0]
  return result;
 8001794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001798:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800179c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179e:	fab3 f383 	clz	r3, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	461a      	mov	r2, r3
 80017b0:	2300      	movs	r3, #0
 80017b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7fe fee6 	bl	8000584 <HAL_GetTick>
 80017b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017bc:	e00c      	b.n	80017d8 <HAL_RCC_OscConfig+0xc70>
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c4:	f7fe fede 	bl	8000584 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e1fd      	b.n	8001bd4 <HAL_RCC_OscConfig+0x106c>
 80017d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80017e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	fa93 f2a3 	rbit	r2, r3
 80017f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80017fc:	601a      	str	r2, [r3, #0]
  return result;
 80017fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001802:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001806:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001808:	fab3 f383 	clz	r3, r3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b01      	cmp	r3, #1
 800181a:	d102      	bne.n	8001822 <HAL_RCC_OscConfig+0xcba>
 800181c:	4bb0      	ldr	r3, [pc, #704]	; (8001ae0 <HAL_RCC_OscConfig+0xf78>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	e027      	b.n	8001872 <HAL_RCC_OscConfig+0xd0a>
 8001822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001826:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800182a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800182e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001834:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	fa93 f2a3 	rbit	r2, r3
 800183e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001842:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001850:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fa93 f2a3 	rbit	r2, r3
 8001864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001868:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	4b9c      	ldr	r3, [pc, #624]	; (8001ae0 <HAL_RCC_OscConfig+0xf78>)
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001876:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800187a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800187e:	6011      	str	r1, [r2, #0]
 8001880:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001884:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	fa92 f1a2 	rbit	r1, r2
 800188e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001892:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001896:	6011      	str	r1, [r2, #0]
  return result;
 8001898:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800189c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	fab2 f282 	clz	r2, r2
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	f042 0220 	orr.w	r2, r2, #32
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	f002 021f 	and.w	r2, r2, #31
 80018b2:	2101      	movs	r1, #1
 80018b4:	fa01 f202 	lsl.w	r2, r1, r2
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d182      	bne.n	80017c4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018be:	4b88      	ldr	r3, [pc, #544]	; (8001ae0 <HAL_RCC_OscConfig+0xf78>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80018d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	430b      	orrs	r3, r1
 80018e0:	497f      	ldr	r1, [pc, #508]	; (8001ae0 <HAL_RCC_OscConfig+0xf78>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]
 80018e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ea:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80018ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	fa93 f2a3 	rbit	r2, r3
 8001902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001906:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800190a:	601a      	str	r2, [r3, #0]
  return result;
 800190c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001910:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001914:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001920:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	461a      	mov	r2, r3
 8001928:	2301      	movs	r3, #1
 800192a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7fe fe2a 	bl	8000584 <HAL_GetTick>
 8001930:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001934:	e009      	b.n	800194a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001936:	f7fe fe25 	bl	8000584 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e144      	b.n	8001bd4 <HAL_RCC_OscConfig+0x106c>
 800194a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001952:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001956:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	fa93 f2a3 	rbit	r2, r3
 8001966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800196e:	601a      	str	r2, [r3, #0]
  return result;
 8001970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001974:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001978:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800197a:	fab3 f383 	clz	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	095b      	lsrs	r3, r3, #5
 8001982:	b2db      	uxtb	r3, r3
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b01      	cmp	r3, #1
 800198c:	d102      	bne.n	8001994 <HAL_RCC_OscConfig+0xe2c>
 800198e:	4b54      	ldr	r3, [pc, #336]	; (8001ae0 <HAL_RCC_OscConfig+0xf78>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	e027      	b.n	80019e4 <HAL_RCC_OscConfig+0xe7c>
 8001994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001998:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800199c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	fa93 f2a3 	rbit	r2, r3
 80019b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019be:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80019c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019cc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	fa93 f2a3 	rbit	r2, r3
 80019d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019da:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	4b3f      	ldr	r3, [pc, #252]	; (8001ae0 <HAL_RCC_OscConfig+0xf78>)
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019e8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80019ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019f0:	6011      	str	r1, [r2, #0]
 80019f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019f6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	fa92 f1a2 	rbit	r1, r2
 8001a00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a04:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001a08:	6011      	str	r1, [r2, #0]
  return result;
 8001a0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a0e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	fab2 f282 	clz	r2, r2
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	f042 0220 	orr.w	r2, r2, #32
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	f002 021f 	and.w	r2, r2, #31
 8001a24:	2101      	movs	r1, #1
 8001a26:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d082      	beq.n	8001936 <HAL_RCC_OscConfig+0xdce>
 8001a30:	e0cf      	b.n	8001bd2 <HAL_RCC_OscConfig+0x106a>
 8001a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a36:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001a3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a44:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	fa93 f2a3 	rbit	r2, r3
 8001a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a52:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001a56:	601a      	str	r2, [r3, #0]
  return result;
 8001a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001a60:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	461a      	mov	r2, r3
 8001a74:	2300      	movs	r3, #0
 8001a76:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7fe fd84 	bl	8000584 <HAL_GetTick>
 8001a7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a80:	e009      	b.n	8001a96 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a82:	f7fe fd7f 	bl	8000584 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e09e      	b.n	8001bd4 <HAL_RCC_OscConfig+0x106c>
 8001a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001a9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	fa93 f2a3 	rbit	r2, r3
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001aba:	601a      	str	r2, [r3, #0]
  return result;
 8001abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ac4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac6:	fab3 f383 	clz	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	095b      	lsrs	r3, r3, #5
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d104      	bne.n	8001ae4 <HAL_RCC_OscConfig+0xf7c>
 8001ada:	4b01      	ldr	r3, [pc, #4]	; (8001ae0 <HAL_RCC_OscConfig+0xf78>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	e029      	b.n	8001b34 <HAL_RCC_OscConfig+0xfcc>
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001aec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	fa93 f2a3 	rbit	r2, r3
 8001b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b04:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001b12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	fa93 f2a3 	rbit	r2, r3
 8001b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <HAL_RCC_OscConfig+0x1078>)
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b38:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001b3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b40:	6011      	str	r1, [r2, #0]
 8001b42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b46:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	fa92 f1a2 	rbit	r1, r2
 8001b50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b54:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001b58:	6011      	str	r1, [r2, #0]
  return result;
 8001b5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b5e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	fab2 f282 	clz	r2, r2
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	f042 0220 	orr.w	r2, r2, #32
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	f002 021f 	and.w	r2, r2, #31
 8001b74:	2101      	movs	r1, #1
 8001b76:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d180      	bne.n	8001a82 <HAL_RCC_OscConfig+0xf1a>
 8001b80:	e027      	b.n	8001bd2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e01e      	b.n	8001bd4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_RCC_OscConfig+0x1078>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ba2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001baa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d10b      	bne.n	8001bce <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001bb6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d001      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000

08001be4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b09e      	sub	sp, #120	; 0x78
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e162      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b90      	ldr	r3, [pc, #576]	; (8001e40 <HAL_RCC_ClockConfig+0x25c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d910      	bls.n	8001c2c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b8d      	ldr	r3, [pc, #564]	; (8001e40 <HAL_RCC_ClockConfig+0x25c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 0207 	bic.w	r2, r3, #7
 8001c12:	498b      	ldr	r1, [pc, #556]	; (8001e40 <HAL_RCC_ClockConfig+0x25c>)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b89      	ldr	r3, [pc, #548]	; (8001e40 <HAL_RCC_ClockConfig+0x25c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e14a      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b82      	ldr	r3, [pc, #520]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	497f      	ldr	r1, [pc, #508]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 80dc 	beq.w	8001e10 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d13c      	bne.n	8001cda <HAL_RCC_ClockConfig+0xf6>
 8001c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c64:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d102      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xa6>
 8001c84:	4b6f      	ldr	r3, [pc, #444]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	e00f      	b.n	8001caa <HAL_RCC_ClockConfig+0xc6>
 8001c8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c92:	fa93 f3a3 	rbit	r3, r3
 8001c96:	667b      	str	r3, [r7, #100]	; 0x64
 8001c98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c9c:	663b      	str	r3, [r7, #96]	; 0x60
 8001c9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ca6:	4b67      	ldr	r3, [pc, #412]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cae:	65ba      	str	r2, [r7, #88]	; 0x58
 8001cb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001cb2:	fa92 f2a2 	rbit	r2, r2
 8001cb6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001cb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cba:	fab2 f282 	clz	r2, r2
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	f042 0220 	orr.w	r2, r2, #32
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	f002 021f 	and.w	r2, r2, #31
 8001cca:	2101      	movs	r1, #1
 8001ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d17b      	bne.n	8001dce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e0f3      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d13c      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x178>
 8001ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	095b      	lsrs	r3, r3, #5
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d102      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x128>
 8001d06:	4b4f      	ldr	r3, [pc, #316]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	e00f      	b.n	8001d2c <HAL_RCC_ClockConfig+0x148>
 8001d0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d14:	fa93 f3a3 	rbit	r3, r3
 8001d18:	647b      	str	r3, [r7, #68]	; 0x44
 8001d1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d1e:	643b      	str	r3, [r7, #64]	; 0x40
 8001d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d28:	4b46      	ldr	r3, [pc, #280]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d30:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d34:	fa92 f2a2 	rbit	r2, r2
 8001d38:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d3c:	fab2 f282 	clz	r2, r2
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f042 0220 	orr.w	r2, r2, #32
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	f002 021f 	and.w	r2, r2, #31
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d13a      	bne.n	8001dce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0b2      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x2de>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	095b      	lsrs	r3, r3, #5
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d102      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x1a0>
 8001d7e:	4b31      	ldr	r3, [pc, #196]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	e00d      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1bc>
 8001d84:	2302      	movs	r3, #2
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d90:	2302      	movs	r3, #2
 8001d92:	623b      	str	r3, [r7, #32]
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	2202      	movs	r2, #2
 8001da2:	61ba      	str	r2, [r7, #24]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	fa92 f2a2 	rbit	r2, r2
 8001daa:	617a      	str	r2, [r7, #20]
  return result;
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	fab2 f282 	clz	r2, r2
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	f042 0220 	orr.w	r2, r2, #32
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	f002 021f 	and.w	r2, r2, #31
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e079      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dce:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f023 0203 	bic.w	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	491a      	ldr	r1, [pc, #104]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de0:	f7fe fbd0 	bl	8000584 <HAL_GetTick>
 8001de4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de6:	e00a      	b.n	8001dfe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de8:	f7fe fbcc 	bl	8000584 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e061      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_RCC_ClockConfig+0x260>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 020c 	and.w	r2, r3, #12
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d1eb      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_RCC_ClockConfig+0x25c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d214      	bcs.n	8001e48 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_RCC_ClockConfig+0x25c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 0207 	bic.w	r2, r3, #7
 8001e26:	4906      	ldr	r1, [pc, #24]	; (8001e40 <HAL_RCC_ClockConfig+0x25c>)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2e:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <HAL_RCC_ClockConfig+0x25c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e040      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x2de>
 8001e40:	40022000 	.word	0x40022000
 8001e44:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e54:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <HAL_RCC_ClockConfig+0x2e8>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	491a      	ldr	r1, [pc, #104]	; (8001ecc <HAL_RCC_ClockConfig+0x2e8>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <HAL_RCC_ClockConfig+0x2e8>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4912      	ldr	r1, [pc, #72]	; (8001ecc <HAL_RCC_ClockConfig+0x2e8>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e86:	f000 f829 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001e8a:	4601      	mov	r1, r0
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_RCC_ClockConfig+0x2e8>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e94:	22f0      	movs	r2, #240	; 0xf0
 8001e96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	fa92 f2a2 	rbit	r2, r2
 8001e9e:	60fa      	str	r2, [r7, #12]
  return result;
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	fab2 f282 	clz	r2, r2
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	40d3      	lsrs	r3, r2
 8001eaa:	4a09      	ldr	r2, [pc, #36]	; (8001ed0 <HAL_RCC_ClockConfig+0x2ec>)
 8001eac:	5cd3      	ldrb	r3, [r2, r3]
 8001eae:	fa21 f303 	lsr.w	r3, r1, r3
 8001eb2:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <HAL_RCC_ClockConfig+0x2f0>)
 8001eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <HAL_RCC_ClockConfig+0x2f4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fb1e 	bl	80004fc <HAL_InitTick>
  
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3778      	adds	r7, #120	; 0x78
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	08002954 	.word	0x08002954
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	20000004 	.word	0x20000004

08001edc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b08b      	sub	sp, #44	; 0x2c
 8001ee0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001ef6:	4b29      	ldr	r3, [pc, #164]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d002      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x30>
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d003      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x36>
 8001f0a:	e03c      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f0c:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f0e:	623b      	str	r3, [r7, #32]
      break;
 8001f10:	e03c      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f18:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f1c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	fa92 f2a2 	rbit	r2, r2
 8001f24:	607a      	str	r2, [r7, #4]
  return result;
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	fab2 f282 	clz	r2, r2
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	40d3      	lsrs	r3, r2
 8001f30:	4a1c      	ldr	r2, [pc, #112]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f32:	5cd3      	ldrb	r3, [r2, r3]
 8001f34:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	220f      	movs	r2, #15
 8001f40:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	fa92 f2a2 	rbit	r2, r2
 8001f48:	60fa      	str	r2, [r7, #12]
  return result;
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	fab2 f282 	clz	r2, r2
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	40d3      	lsrs	r3, r2
 8001f54:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f56:	5cd3      	ldrb	r3, [r2, r3]
 8001f58:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d008      	beq.n	8001f76 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f64:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fb02 f303 	mul.w	r3, r2, r3
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
 8001f74:	e004      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	4a0c      	ldr	r2, [pc, #48]	; (8001fac <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f7a:	fb02 f303 	mul.w	r3, r2, r3
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	623b      	str	r3, [r7, #32]
      break;
 8001f84:	e002      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f88:	623b      	str	r3, [r7, #32]
      break;
 8001f8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	372c      	adds	r7, #44	; 0x2c
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	007a1200 	.word	0x007a1200
 8001fa4:	0800296c 	.word	0x0800296c
 8001fa8:	0800297c 	.word	0x0800297c
 8001fac:	003d0900 	.word	0x003d0900

08001fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000000 	.word	0x20000000

08001fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001fce:	f7ff ffef 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001fd2:	4601      	mov	r1, r0
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fdc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fe0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	fa92 f2a2 	rbit	r2, r2
 8001fe8:	603a      	str	r2, [r7, #0]
  return result;
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	fab2 f282 	clz	r2, r2
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	40d3      	lsrs	r3, r2
 8001ff4:	4a04      	ldr	r2, [pc, #16]	; (8002008 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001ff6:	5cd3      	ldrb	r3, [r2, r3]
 8001ff8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021000 	.word	0x40021000
 8002008:	08002964 	.word	0x08002964

0800200c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002012:	f7ff ffcd 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8002016:	4601      	mov	r1, r0
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002020:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002024:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	fa92 f2a2 	rbit	r2, r2
 800202c:	603a      	str	r2, [r7, #0]
  return result;
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	fab2 f282 	clz	r2, r2
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	40d3      	lsrs	r3, r2
 8002038:	4a04      	ldr	r2, [pc, #16]	; (800204c <HAL_RCC_GetPCLK2Freq+0x40>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40021000 	.word	0x40021000
 800204c:	08002964 	.word	0x08002964

08002050 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e03c      	b.n	80020dc <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d106      	bne.n	800207c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe f970 	bl	800035c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0201 	bic.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 fa93 	bl	80025c0 <USART_SetConfig>
 800209a:	4603      	mov	r3, r0
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e01b      	b.n	80020dc <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020b2:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020c2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0201 	orr.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fb79 	bl	80027cc <USART_CheckIdleState>
 80020da:	4603      	mov	r3, r0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08a      	sub	sp, #40	; 0x28
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	4613      	mov	r3, r2
 80020f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	f040 8096 	bne.w	800222e <HAL_USART_Transmit+0x14a>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <HAL_USART_Transmit+0x2a>
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e08e      	b.n	8002230 <HAL_USART_Transmit+0x14c>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_USART_Transmit+0x3c>
 800211c:	2302      	movs	r3, #2
 800211e:	e087      	b.n	8002230 <HAL_USART_Transmit+0x14c>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2212      	movs	r2, #18
 8002132:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002136:	f7fe fa25 	bl	8000584 <HAL_GetTick>
 800213a:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	88fa      	ldrh	r2, [r7, #6]
 8002140:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	88fa      	ldrh	r2, [r7, #6]
 8002146:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002150:	d108      	bne.n	8002164 <HAL_USART_Transmit+0x80>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d104      	bne.n	8002164 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	61bb      	str	r3, [r7, #24]
 8002162:	e003      	b.n	800216c <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800216c:	e02b      	b.n	80021c6 <HAL_USART_Transmit+0xe2>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2200      	movs	r2, #0
 8002176:	2180      	movs	r1, #128	; 0x80
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 f9eb 	bl	8002554 <USART_WaitOnFlagUntilTimeout>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e053      	b.n	8002230 <HAL_USART_Transmit+0x14c>
      }
      if (ptxdata8bits == NULL)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10b      	bne.n	80021a6 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	881a      	ldrh	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800219a:	b292      	uxth	r2, r2
 800219c:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	3302      	adds	r3, #2
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	e008      	b.n	80021b8 <HAL_USART_Transmit+0xd4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	781a      	ldrb	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	b292      	uxth	r2, r2
 80021b0:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3301      	adds	r3, #1
 80021b6:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021bc:	b29b      	uxth	r3, r3
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1ce      	bne.n	800216e <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2200      	movs	r2, #0
 80021d8:	2140      	movs	r1, #64	; 0x40
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 f9ba 	bl	8002554 <USART_WaitOnFlagUntilTimeout>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_USART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e022      	b.n	8002230 <HAL_USART_Transmit+0x14c>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2240      	movs	r2, #64	; 0x40
 80021f0:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2208      	movs	r2, #8
 80021f8:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699a      	ldr	r2, [r3, #24]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0208 	orr.w	r2, r2, #8
 8002208:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699a      	ldr	r2, [r3, #24]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0210 	orr.w	r2, r2, #16
 8002218:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <HAL_USART_Transmit+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800222e:	2302      	movs	r3, #2
  }
}
 8002230:	4618      	mov	r0, r3
 8002232:	3720      	adds	r7, #32
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002258:	69fa      	ldr	r2, [r7, #28]
 800225a:	f640 030f 	movw	r3, #2063	; 0x80f
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d113      	bne.n	8002290 <HAL_USART_IRQHandler+0x58>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00e      	beq.n	8002290 <HAL_USART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b00      	cmp	r3, #0
 800227a:	d009      	beq.n	8002290 <HAL_USART_IRQHandler+0x58>
    {
      if (husart->RxISR != NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 810d 	beq.w	80024a0 <HAL_USART_IRQHandler+0x268>
      {
        husart->RxISR(husart);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	4798      	blx	r3
      }
      return;
 800228e:	e107      	b.n	80024a0 <HAL_USART_IRQHandler+0x268>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80e3 	beq.w	800245e <HAL_USART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d105      	bne.n	80022ae <HAL_USART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80d8 	beq.w	800245e <HAL_USART_IRQHandler+0x226>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00e      	beq.n	80022d6 <HAL_USART_IRQHandler+0x9e>
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <HAL_USART_IRQHandler+0x9e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2201      	movs	r2, #1
 80022c8:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ce:	f043 0201 	orr.w	r2, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00e      	beq.n	80022fe <HAL_USART_IRQHandler+0xc6>
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <HAL_USART_IRQHandler+0xc6>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2202      	movs	r2, #2
 80022f0:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	f043 0204 	orr.w	r2, r3, #4
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00e      	beq.n	8002326 <HAL_USART_IRQHandler+0xee>
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <HAL_USART_IRQHandler+0xee>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2204      	movs	r2, #4
 8002318:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231e:	f043 0202 	orr.w	r2, r3, #2
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	2b00      	cmp	r3, #0
 800232e:	d013      	beq.n	8002358 <HAL_USART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	2b00      	cmp	r3, #0
 8002338:	d104      	bne.n	8002344 <HAL_USART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002340:	2b00      	cmp	r3, #0
 8002342:	d009      	beq.n	8002358 <HAL_USART_IRQHandler+0x120>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2208      	movs	r2, #8
 800234a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002350:	f043 0208 	orr.w	r2, r3, #8
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00f      	beq.n	8002382 <HAL_USART_IRQHandler+0x14a>
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00a      	beq.n	8002382 <HAL_USART_IRQHandler+0x14a>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002374:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	64da      	str	r2, [r3, #76]	; 0x4c
    }


    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 808c 	beq.w	80024a4 <HAL_USART_IRQHandler+0x26c>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0320 	and.w	r3, r3, #32
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00c      	beq.n	80023b0 <HAL_USART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	2b00      	cmp	r3, #0
 800239e:	d007      	beq.n	80023b0 <HAL_USART_IRQHandler+0x178>
      {
        if (husart->RxISR != NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_USART_IRQHandler+0x178>
        {
          husart->RxISR(husart);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d002      	beq.n	80023ce <HAL_USART_IRQHandler+0x196>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d03e      	beq.n	800244c <HAL_USART_IRQHandler+0x214>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f88e 	bl	80024f0 <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023de:	2b40      	cmp	r3, #64	; 0x40
 80023e0:	d130      	bne.n	8002444 <HAL_USART_IRQHandler+0x20c>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023f0:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <HAL_USART_IRQHandler+0x1d4>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	2200      	movs	r2, #0
 8002400:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe f9fd 	bl	8000806 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002410:	2b00      	cmp	r3, #0
 8002412:	d013      	beq.n	800243c <HAL_USART_IRQHandler+0x204>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002418:	4a25      	ldr	r2, [pc, #148]	; (80024b0 <HAL_USART_IRQHandler+0x278>)
 800241a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f9f0 	bl	8000806 <HAL_DMA_Abort_IT>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d016      	beq.n	800245a <HAL_USART_IRQHandler+0x222>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002436:	4610      	mov	r0, r2
 8002438:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800243a:	e00e      	b.n	800245a <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f84d 	bl	80024dc <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002442:	e00a      	b.n	800245a <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f849 	bl	80024dc <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800244a:	e006      	b.n	800245a <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f845 	bl	80024dc <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
    return;
 8002458:	e024      	b.n	80024a4 <HAL_USART_IRQHandler+0x26c>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800245a:	bf00      	nop
    return;
 800245c:	e022      	b.n	80024a4 <HAL_USART_IRQHandler+0x26c>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00d      	beq.n	8002484 <HAL_USART_IRQHandler+0x24c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <HAL_USART_IRQHandler+0x24c>
  {
    if (husart->TxISR != NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d016      	beq.n	80024a8 <HAL_USART_IRQHandler+0x270>
    {
      husart->TxISR(husart);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	4798      	blx	r3
    }
    return;
 8002482:	e011      	b.n	80024a8 <HAL_USART_IRQHandler+0x270>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00d      	beq.n	80024aa <HAL_USART_IRQHandler+0x272>
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_USART_IRQHandler+0x272>
  {
    USART_EndTransmit_IT(husart);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f9da 	bl	8002852 <USART_EndTransmit_IT>
    return;
 800249e:	e004      	b.n	80024aa <HAL_USART_IRQHandler+0x272>
      return;
 80024a0:	bf00      	nop
 80024a2:	e002      	b.n	80024aa <HAL_USART_IRQHandler+0x272>
    return;
 80024a4:	bf00      	nop
 80024a6:	e000      	b.n	80024aa <HAL_USART_IRQHandler+0x272>
    return;
 80024a8:	bf00      	nop
  }

}
 80024aa:	3720      	adds	r7, #32
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	0800252d 	.word	0x0800252d

080024b4 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8002506:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0U;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f7ff ffc8 	bl	80024dc <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800254c:	bf00      	nop
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	4613      	mov	r3, r2
 8002562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002564:	e018      	b.n	8002598 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800256c:	d014      	beq.n	8002598 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800256e:	f7fe f809 	bl	8000584 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	429a      	cmp	r2, r3
 800257c:	d302      	bcc.n	8002584 <USART_WaitOnFlagUntilTimeout+0x30>
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d109      	bne.n	8002598 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e00f      	b.n	80025b8 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69da      	ldr	r2, [r3, #28]
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	4013      	ands	r3, r2
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	bf0c      	ite	eq
 80025a8:	2301      	moveq	r3, #1
 80025aa:	2300      	movne	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d0d7      	beq.n	8002566 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80025cc:	2300      	movs	r3, #0
 80025ce:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	4313      	orrs	r3, r2
 80025e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4b72      	ldr	r3, [pc, #456]	; (80027b8 <USART_SetConfig+0x1f8>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	6979      	ldr	r1, [r7, #20]
 80025f6:	430b      	orrs	r3, r1
 80025f8:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80025fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025fe:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	4313      	orrs	r3, r2
 8002608:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699a      	ldr	r2, [r3, #24]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	4313      	orrs	r3, r2
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4313      	orrs	r3, r2
 8002622:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	430a      	orrs	r2, r1
 8002636:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a5f      	ldr	r2, [pc, #380]	; (80027bc <USART_SetConfig+0x1fc>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d11f      	bne.n	8002682 <USART_SetConfig+0xc2>
 8002642:	4b5f      	ldr	r3, [pc, #380]	; (80027c0 <USART_SetConfig+0x200>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b03      	cmp	r3, #3
 800264c:	d816      	bhi.n	800267c <USART_SetConfig+0xbc>
 800264e:	a201      	add	r2, pc, #4	; (adr r2, 8002654 <USART_SetConfig+0x94>)
 8002650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002654:	08002665 	.word	0x08002665
 8002658:	08002671 	.word	0x08002671
 800265c:	08002677 	.word	0x08002677
 8002660:	0800266b 	.word	0x0800266b
 8002664:	2300      	movs	r3, #0
 8002666:	77fb      	strb	r3, [r7, #31]
 8002668:	e01d      	b.n	80026a6 <USART_SetConfig+0xe6>
 800266a:	2302      	movs	r3, #2
 800266c:	77fb      	strb	r3, [r7, #31]
 800266e:	e01a      	b.n	80026a6 <USART_SetConfig+0xe6>
 8002670:	2304      	movs	r3, #4
 8002672:	77fb      	strb	r3, [r7, #31]
 8002674:	e017      	b.n	80026a6 <USART_SetConfig+0xe6>
 8002676:	2308      	movs	r3, #8
 8002678:	77fb      	strb	r3, [r7, #31]
 800267a:	e014      	b.n	80026a6 <USART_SetConfig+0xe6>
 800267c:	2310      	movs	r3, #16
 800267e:	77fb      	strb	r3, [r7, #31]
 8002680:	e011      	b.n	80026a6 <USART_SetConfig+0xe6>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a4f      	ldr	r2, [pc, #316]	; (80027c4 <USART_SetConfig+0x204>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d102      	bne.n	8002692 <USART_SetConfig+0xd2>
 800268c:	2300      	movs	r3, #0
 800268e:	77fb      	strb	r3, [r7, #31]
 8002690:	e009      	b.n	80026a6 <USART_SetConfig+0xe6>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a4c      	ldr	r2, [pc, #304]	; (80027c8 <USART_SetConfig+0x208>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d102      	bne.n	80026a2 <USART_SetConfig+0xe2>
 800269c:	2300      	movs	r3, #0
 800269e:	77fb      	strb	r3, [r7, #31]
 80026a0:	e001      	b.n	80026a6 <USART_SetConfig+0xe6>
 80026a2:	2310      	movs	r3, #16
 80026a4:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 80026a6:	7ffb      	ldrb	r3, [r7, #31]
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d85a      	bhi.n	8002762 <USART_SetConfig+0x1a2>
 80026ac:	a201      	add	r2, pc, #4	; (adr r2, 80026b4 <USART_SetConfig+0xf4>)
 80026ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b2:	bf00      	nop
 80026b4:	080026d9 	.word	0x080026d9
 80026b8:	080026f7 	.word	0x080026f7
 80026bc:	08002715 	.word	0x08002715
 80026c0:	08002763 	.word	0x08002763
 80026c4:	0800272f 	.word	0x0800272f
 80026c8:	08002763 	.word	0x08002763
 80026cc:	08002763 	.word	0x08002763
 80026d0:	08002763 	.word	0x08002763
 80026d4:	0800274d 	.word	0x0800274d
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80026d8:	f7ff fc76 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 80026dc:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	005a      	lsls	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	085b      	lsrs	r3, r3, #1
 80026e8:	441a      	add	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f2:	61bb      	str	r3, [r7, #24]
      break;
 80026f4:	e038      	b.n	8002768 <USART_SetConfig+0x1a8>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 80026f6:	f7ff fc89 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 80026fa:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	005a      	lsls	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	085b      	lsrs	r3, r3, #1
 8002706:	441a      	add	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002710:	61bb      	str	r3, [r7, #24]
      break;
 8002712:	e029      	b.n	8002768 <USART_SetConfig+0x1a8>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	085b      	lsrs	r3, r3, #1
 800271a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800271e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6852      	ldr	r2, [r2, #4]
 8002726:	fbb3 f3f2 	udiv	r3, r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
      break;
 800272c:	e01c      	b.n	8002768 <USART_SetConfig+0x1a8>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800272e:	f7ff fbd5 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8002732:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	005a      	lsls	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	085b      	lsrs	r3, r3, #1
 800273e:	441a      	add	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	fbb2 f3f3 	udiv	r3, r2, r3
 8002748:	61bb      	str	r3, [r7, #24]
      break;
 800274a:	e00d      	b.n	8002768 <USART_SetConfig+0x1a8>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	085b      	lsrs	r3, r3, #1
 8002752:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	fbb2 f3f3 	udiv	r3, r2, r3
 800275e:	61bb      	str	r3, [r7, #24]
      break;
 8002760:	e002      	b.n	8002768 <USART_SetConfig+0x1a8>
    default:
      ret = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	77bb      	strb	r3, [r7, #30]
      break;
 8002766:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b0f      	cmp	r3, #15
 800276c:	d916      	bls.n	800279c <USART_SetConfig+0x1dc>
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002774:	d212      	bcs.n	800279c <USART_SetConfig+0x1dc>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	b29b      	uxth	r3, r3
 800277a:	f023 030f 	bic.w	r3, r3, #15
 800277e:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	085b      	lsrs	r3, r3, #1
 8002784:	b29b      	uxth	r3, r3
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	b29a      	uxth	r2, r3
 800278c:	89fb      	ldrh	r3, [r7, #14]
 800278e:	4313      	orrs	r3, r2
 8002790:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	89fa      	ldrh	r2, [r7, #14]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	e001      	b.n	80027a0 <USART_SetConfig+0x1e0>
  }
  else
  {
    ret = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	77bb      	strb	r3, [r7, #30]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 80027ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3720      	adds	r7, #32
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	efff69f3 	.word	0xefff69f3
 80027bc:	40013800 	.word	0x40013800
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40004400 	.word	0x40004400
 80027c8:	40004800 	.word	0x40004800

080027cc <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80027da:	f7fd fed3 	bl	8000584 <HAL_GetTick>
 80027de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d10e      	bne.n	800280c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80027ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff fea9 	bl	8002554 <USART_WaitOnFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e01e      	b.n	800284a <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b04      	cmp	r3, #4
 8002818:	d10e      	bne.n	8002838 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800281a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff fe93 	bl	8002554 <USART_WaitOnFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e008      	b.n	800284a <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002868:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0201 	bic.w	r2, r2, #1
 8002878:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	63da      	str	r2, [r3, #60]	; 0x3c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b12      	cmp	r3, #18
 800288a:	d113      	bne.n	80028b4 <USART_EndTransmit_IT+0x62>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2208      	movs	r2, #8
 8002892:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699a      	ldr	r2, [r3, #24]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0208 	orr.w	r2, r2, #8
 80028a2:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff fe01 	bl	80024b4 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80028b2:	e00b      	b.n	80028cc <USART_EndTransmit_IT+0x7a>
  else if (husart->RxXferCount == 0U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <USART_EndTransmit_IT+0x7a>
    husart->State = HAL_USART_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    HAL_USART_TxRxCpltCallback(husart);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff fdfe 	bl	80024c8 <HAL_USART_TxRxCpltCallback>
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <__libc_init_array>:
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	4d0d      	ldr	r5, [pc, #52]	; (800290c <__libc_init_array+0x38>)
 80028d8:	4c0d      	ldr	r4, [pc, #52]	; (8002910 <__libc_init_array+0x3c>)
 80028da:	1b64      	subs	r4, r4, r5
 80028dc:	10a4      	asrs	r4, r4, #2
 80028de:	2600      	movs	r6, #0
 80028e0:	42a6      	cmp	r6, r4
 80028e2:	d109      	bne.n	80028f8 <__libc_init_array+0x24>
 80028e4:	4d0b      	ldr	r5, [pc, #44]	; (8002914 <__libc_init_array+0x40>)
 80028e6:	4c0c      	ldr	r4, [pc, #48]	; (8002918 <__libc_init_array+0x44>)
 80028e8:	f000 f820 	bl	800292c <_init>
 80028ec:	1b64      	subs	r4, r4, r5
 80028ee:	10a4      	asrs	r4, r4, #2
 80028f0:	2600      	movs	r6, #0
 80028f2:	42a6      	cmp	r6, r4
 80028f4:	d105      	bne.n	8002902 <__libc_init_array+0x2e>
 80028f6:	bd70      	pop	{r4, r5, r6, pc}
 80028f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80028fc:	4798      	blx	r3
 80028fe:	3601      	adds	r6, #1
 8002900:	e7ee      	b.n	80028e0 <__libc_init_array+0xc>
 8002902:	f855 3b04 	ldr.w	r3, [r5], #4
 8002906:	4798      	blx	r3
 8002908:	3601      	adds	r6, #1
 800290a:	e7f2      	b.n	80028f2 <__libc_init_array+0x1e>
 800290c:	0800298c 	.word	0x0800298c
 8002910:	0800298c 	.word	0x0800298c
 8002914:	0800298c 	.word	0x0800298c
 8002918:	08002990 	.word	0x08002990

0800291c <memset>:
 800291c:	4402      	add	r2, r0
 800291e:	4603      	mov	r3, r0
 8002920:	4293      	cmp	r3, r2
 8002922:	d100      	bne.n	8002926 <memset+0xa>
 8002924:	4770      	bx	lr
 8002926:	f803 1b01 	strb.w	r1, [r3], #1
 800292a:	e7f9      	b.n	8002920 <memset+0x4>

0800292c <_init>:
 800292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292e:	bf00      	nop
 8002930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002932:	bc08      	pop	{r3}
 8002934:	469e      	mov	lr, r3
 8002936:	4770      	bx	lr

08002938 <_fini>:
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	bf00      	nop
 800293c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293e:	bc08      	pop	{r3}
 8002940:	469e      	mov	lr, r3
 8002942:	4770      	bx	lr
