
STM32F303_TMC2209_daikeia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08006c1c  08006c1c  00016c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070b8  080070b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080070b8  080070b8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070b8  080070b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070b8  080070b8  000170b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070bc  080070bc  000170bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080070c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000082c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000089c  2000089c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a1b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000267d  00000000  00000000  00031abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  00034138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000de0  00000000  00000000  00035010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d1bb  00000000  00000000  00035df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012322  00000000  00000000  00052fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a985a  00000000  00000000  000652cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010eb27  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004624  00000000  00000000  0010eb78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c04 	.word	0x08006c04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006c04 	.word	0x08006c04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <tmc2209_readWriteArray>:
    if (htim == &htim3){ //htim3に設定したタイマー割り込みの時間で発火する
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);//ピンの出力を切り替え
    }
}*/
void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	60b9      	str	r1, [r7, #8]
 8000278:	607a      	str	r2, [r7, #4]
 800027a:	603b      	str	r3, [r7, #0]
 800027c:	4603      	mov	r3, r0
 800027e:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8000280:	480e      	ldr	r0, [pc, #56]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000282:	f004 fc39 	bl	8004af8 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, data, writeLength,3000);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	b29a      	uxth	r2, r3
 800028a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800028e:	68b9      	ldr	r1, [r7, #8]
 8000290:	480a      	ldr	r0, [pc, #40]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000292:	f003 ffcd 	bl	8004230 <HAL_UART_Transmit>

	if(readLength > 0){
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d00a      	beq.n	80002b2 <tmc2209_readWriteArray+0x42>
		HAL_HalfDuplex_EnableReceiver(&huart1);
 800029c:	4807      	ldr	r0, [pc, #28]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 800029e:	f004 fc7d 	bl	8004b9c <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart1, data, readLength, 3000);
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002aa:	68b9      	ldr	r1, [r7, #8]
 80002ac:	4803      	ldr	r0, [pc, #12]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 80002ae:	f004 f853 	bl	8004358 <HAL_UART_Receive>
	}
}
 80002b2:	bf00      	nop
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	200000d8 	.word	0x200000d8

080002c0 <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 80002ca:	2201      	movs	r2, #1
 80002cc:	6839      	ldr	r1, [r7, #0]
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f005 f900 	bl	80054d4 <tmc_CRC8>
 80002d4:	4603      	mov	r3, r0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <reset>:
//
//	//StepDir_periodicJob(0);
//}

static uint8_t reset()
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	//StepDir_init(STEPDIR_PRECISION);
	//StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);

	return tmc2209_reset(&TMC2209);
 80002e4:	4802      	ldr	r0, [pc, #8]	; (80002f0 <reset+0x10>)
 80002e6:	f005 fb2d 	bl	8005944 <tmc2209_reset>
 80002ea:	4603      	mov	r3, r0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	200001e0 	.word	0x200001e0

080002f4 <restore>:

static uint8_t restore()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 80002f8:	4802      	ldr	r0, [pc, #8]	; (8000304 <restore+0x10>)
 80002fa:	f005 fb5d 	bl	80059b8 <tmc2209_restore>
 80002fe:	4603      	mov	r3, r0
}
 8000300:	4618      	mov	r0, r3
 8000302:	bd80      	pop	{r7, pc}
 8000304:	200001e0 	.word	0x200001e0

08000308 <TMC2209_INIT>:


void TMC2209_INIT()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 800030e:	2201      	movs	r2, #1
 8000310:	2101      	movs	r1, #1
 8000312:	2007      	movs	r0, #7
 8000314:	f005 f826 	bl	8005364 <tmc_fillCRC8Table>

	TMC2209_config.reset = reset;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <TMC2209_INIT+0x38>)
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <TMC2209_INIT+0x3c>)
 800031c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config.restore = restore;
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <TMC2209_INIT+0x38>)
 8000322:	4a09      	ldr	r2, [pc, #36]	; (8000348 <TMC2209_INIT+0x40>)
 8000324:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <TMC2209_INIT+0x44>)
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <TMC2209_INIT+0x38>)
 800032e:	2200      	movs	r2, #0
 8000330:	2100      	movs	r1, #0
 8000332:	4807      	ldr	r0, [pc, #28]	; (8000350 <TMC2209_INIT+0x48>)
 8000334:	f005 fa22 	bl	800577c <tmc2209_init>


	//restore();
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000468 	.word	0x20000468
 8000344:	080002e1 	.word	0x080002e1
 8000348:	080002f5 	.word	0x080002f5
 800034c:	08006d68 	.word	0x08006d68
 8000350:	200001e0 	.word	0x200001e0

08000354 <HAL_GPIO_EXTI_Callback>:

	return &TMC2209;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	80fb      	strh	r3, [r7, #6]

	//stepper 0 end stop senssor
	if(GPIO_Pin == GPIO_PIN_6 ){
 800035e:	88fb      	ldrh	r3, [r7, #6]
 8000360:	2b40      	cmp	r3, #64	; 0x40
 8000362:	d11c      	bne.n	800039e <HAL_GPIO_EXTI_Callback+0x4a>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){	//
 8000364:	2140      	movs	r1, #64	; 0x40
 8000366:	4810      	ldr	r0, [pc, #64]	; (80003a8 <HAL_GPIO_EXTI_Callback+0x54>)
 8000368:	f001 fb54 	bl	8001a14 <HAL_GPIO_ReadPin>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d107      	bne.n	8000382 <HAL_GPIO_EXTI_Callback+0x2e>
			end_stop_state |= 1;					//右辺が1ならend_stop_stateに1を代入
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <HAL_GPIO_EXTI_Callback+0x58>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	b2da      	uxtb	r2, r3
 800037c:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <HAL_GPIO_EXTI_Callback+0x58>)
 800037e:	701a      	strb	r2, [r3, #0]
		}
		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
			end_stop_state &= ~1;					//右辺（1）の歩数が0ならend_stop_stateに0を代入
		}
	}
}
 8000380:	e00d      	b.n	800039e <HAL_GPIO_EXTI_Callback+0x4a>
		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 8000382:	2140      	movs	r1, #64	; 0x40
 8000384:	4808      	ldr	r0, [pc, #32]	; (80003a8 <HAL_GPIO_EXTI_Callback+0x54>)
 8000386:	f001 fb45 	bl	8001a14 <HAL_GPIO_ReadPin>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d006      	beq.n	800039e <HAL_GPIO_EXTI_Callback+0x4a>
			end_stop_state &= ~1;					//右辺（1）の歩数が0ならend_stop_stateに0を代入
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <HAL_GPIO_EXTI_Callback+0x58>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	f023 0301 	bic.w	r3, r3, #1
 8000398:	b2da      	uxtb	r2, r3
 800039a:	4b04      	ldr	r3, [pc, #16]	; (80003ac <HAL_GPIO_EXTI_Callback+0x58>)
 800039c:	701a      	strb	r2, [r3, #0]
}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	48000400 	.word	0x48000400
 80003ac:	2000067c 	.word	0x2000067c

080003b0 <Step0>:


void Step0(){                                       //step pin
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	//pull+

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2120      	movs	r1, #32
 80003b8:	4804      	ldr	r0, [pc, #16]	; (80003cc <Step0+0x1c>)
 80003ba:	f001 fb43 	bl	8001a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80003be:	2201      	movs	r2, #1
 80003c0:	2120      	movs	r1, #32
 80003c2:	4802      	ldr	r0, [pc, #8]	; (80003cc <Step0+0x1c>)
 80003c4:	f001 fb3e 	bl	8001a44 <HAL_GPIO_WritePin>
	/*
	 * pull-
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
	 * HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
	 */
}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	48000400 	.word	0x48000400

080003d0 <Dir0>:

void Dir0(int dir){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dir); //Dir0関数にdirピンを指定して格納
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	461a      	mov	r2, r3
 80003de:	2110      	movs	r1, #16
 80003e0:	4803      	ldr	r0, [pc, #12]	; (80003f0 <Dir0+0x20>)
 80003e2:	f001 fb2f 	bl	8001a44 <HAL_GPIO_WritePin>
}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	48000400 	.word	0x48000400

080003f4 <resetStepper>:
	si->stepPosition = 0;
	si->movementDone = 0;
}


void resetStepper(volatile stepperInfo* si){    //resetStepper関数に引数をstepperInfo構造隊にポイント型変数siとして与える
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	si->c0 = si->acceleration;      //変数*siがメンバc0にアクセス.した値に変数*siがメンバaccelerationにアクセス.した値を代入する
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	edd3 7a00 	vldr	s15, [r3]
 8000402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000406:	ee17 2a90 	vmov	r2, s15
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	615a      	str	r2, [r3, #20]
	si->d = si->c0;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	ee07 3a90 	vmov	s15, r3
 8000416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	si->di = si->d;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8000426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800042a:	ee17 2a90 	vmov	r2, s15
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	645a      	str	r2, [r3, #68]	; 0x44
	si->stepCount = 0;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2200      	movs	r2, #0
 8000436:	649a      	str	r2, [r3, #72]	; 0x48
	si->n = 0;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2200      	movs	r2, #0
 800043c:	63da      	str	r2, [r3, #60]	; 0x3c
	si->rampUpStepCount = 0;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2200      	movs	r2, #0
 8000442:	639a      	str	r2, [r3, #56]	; 0x38
	si->movementDone = 0;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2200      	movs	r2, #0
 8000448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <prepareMovement>:

//volatile uint8_t remainingSteppersFlag = 0; //remainingSteppersFlagをuint8_t型で定義し、初期化

void prepareMovement(int steps){  //prepareMovementで与えられたステップ数だけモータを回す（ホーミング時）
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	if(steps == 0){                               //prepareMovementの第2引数が0なら
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d031      	beq.n	80004ca <prepareMovement+0x72>
		return;                                   //何も返さない
	}
	volatile stepperInfo* si = &steppers[0];   //stepperInfo型のポイント型変数siにsteppersの配列をwhichMotorのアドレスとして所得して代入
 8000466:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <prepareMovement+0x7c>)
 8000468:	60fb      	str	r3, [r7, #12]
	if(si->dir_inv){                                    //dirの方向がsiと同じなら
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	6a1b      	ldr	r3, [r3, #32]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d011      	beq.n	8000496 <prepareMovement+0x3e>
		si->dirFunc( steps < 0 ? 0 : 1);                //stepsが0より小さければ0を代入（方向変えない)
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	43d2      	mvns	r2, r2
 800047a:	0fd2      	lsrs	r2, r2, #31
 800047c:	b2d2      	uxtb	r2, r2
 800047e:	4610      	mov	r0, r2
 8000480:	4798      	blx	r3
		si->dir = steps > 0 ? -1:1;                     //stepsが0より大きければ、dirに-1を代入
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	2b00      	cmp	r3, #0
 8000486:	dd02      	ble.n	800048e <prepareMovement+0x36>
 8000488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800048c:	e000      	b.n	8000490 <prepareMovement+0x38>
 800048e:	2201      	movs	r2, #1
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	61da      	str	r2, [r3, #28]
 8000494:	e00e      	b.n	80004b4 <prepareMovement+0x5c>
	}else{
		si->dirFunc( steps < 0 ? 1 : 0);
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	0fd2      	lsrs	r2, r2, #31
 800049e:	4610      	mov	r0, r2
 80004a0:	4798      	blx	r3
		si->dir = steps > 0 ? 1:-1;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	dd01      	ble.n	80004ac <prepareMovement+0x54>
 80004a8:	2201      	movs	r2, #1
 80004aa:	e001      	b.n	80004b0 <prepareMovement+0x58>
 80004ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	61da      	str	r2, [r3, #28]
	}
	si->totalSteps = abs(steps);                        //ポイント型変数siがメンバtotalStepsにアクセスし、stepsを引数にするabsを代入
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	bfb8      	it	lt
 80004ba:	425b      	neglt	r3, r3
 80004bc:	461a      	mov	r2, r3
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	631a      	str	r2, [r3, #48]	; 0x30
	resetStepper(si);                                   //resetStepperにsiを引数として入れる
 80004c2:	68f8      	ldr	r0, [r7, #12]
 80004c4:	f7ff ff96 	bl	80003f4 <resetStepper>
 80004c8:	e000      	b.n	80004cc <prepareMovement+0x74>
		return;                                   //何も返さない
 80004ca:	bf00      	nop
	//remainingSteppersFlag |= (1 << whichMotor);         //whichMotorの値を右側に1ビットシフトした値かremainingSteppersFlagの値が1なら、remainingSteppersFlagに1を代入
}
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	2000067c 	.word	0x2000067c

080004d8 <prepareAbsoluteMovement>:

void prepareAbsoluteMovement(int absolute_steps){   //prepareAbsoluteMovementで与えられたステップ数だけモータを回す(main文から）
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	volatile stepperInfo* si = &steppers[0];	//steppers[0]のアドレスをstepperInfo* si に代入
 80004e0:	4b13      	ldr	r3, [pc, #76]	; (8000530 <prepareAbsoluteMovement+0x58>)
 80004e2:	60fb      	str	r3, [r7, #12]
	int steps = absolute_steps - si->stepPosition;	//目標値から
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	1ad3      	subs	r3, r2, r3
 80004ec:	60bb      	str	r3, [r7, #8]
	if(steps == 0){
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d019      	beq.n	8000528 <prepareAbsoluteMovement+0x50>
		return;
	}
	si->dirFunc( steps < 0 ? 1 : 0);
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	0fd2      	lsrs	r2, r2, #31
 80004fc:	4610      	mov	r0, r2
 80004fe:	4798      	blx	r3
	si->dir = steps > 0 ? 1:-1;
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	2b00      	cmp	r3, #0
 8000504:	dd01      	ble.n	800050a <prepareAbsoluteMovement+0x32>
 8000506:	2201      	movs	r2, #1
 8000508:	e001      	b.n	800050e <prepareAbsoluteMovement+0x36>
 800050a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	61da      	str	r2, [r3, #28]
	si->totalSteps = abs(steps);
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	2b00      	cmp	r3, #0
 8000516:	bfb8      	it	lt
 8000518:	425b      	neglt	r3, r3
 800051a:	461a      	mov	r2, r3
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	631a      	str	r2, [r3, #48]	; 0x30
	resetStepper(si);
 8000520:	68f8      	ldr	r0, [r7, #12]
 8000522:	f7ff ff67 	bl	80003f4 <resetStepper>
 8000526:	e000      	b.n	800052a <prepareAbsoluteMovement+0x52>
		return;
 8000528:	bf00      	nop
	//remainingSteppersFlag |= (1 << whichMotor);
}
 800052a:	3710      	adds	r7, #16
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	2000067c 	.word	0x2000067c

08000534 <setNextInterruptInterval>:


volatile uint8_t nextStepperFlag = 0;

void setNextInterruptInterval(){
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0

	unsigned int mind = 999999;
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <setNextInterruptInterval+0x48>)
 800053c:	607b      	str	r3, [r7, #4]

		if( steppers[0].di < mind ){
 800053e:	4b10      	ldr	r3, [pc, #64]	; (8000580 <setNextInterruptInterval+0x4c>)
 8000540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	429a      	cmp	r2, r3
 8000546:	d902      	bls.n	800054e <setNextInterruptInterval+0x1a>
			mind = steppers[0].di;
 8000548:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <setNextInterruptInterval+0x4c>)
 800054a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800054c:	607b      	str	r3, [r7, #4]
		}


	nextStepperFlag = 0;
 800054e:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <setNextInterruptInterval+0x50>)
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]

		if( steppers[0].di == mind ){
 8000554:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <setNextInterruptInterval+0x4c>)
 8000556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	429a      	cmp	r2, r3
 800055c:	d108      	bne.n	8000570 <setNextInterruptInterval+0x3c>
			nextStepperFlag |= (1 << 0);
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <setNextInterruptInterval+0x50>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	b2db      	uxtb	r3, r3
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <setNextInterruptInterval+0x50>)
 800056c:	701a      	strb	r2, [r3, #0]
//	if (remainingSteppersFlag == 0){
//		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);    //65500→コンペアマッチさせない
//	}

	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mind);
	return;
 800056e:	bf00      	nop
 8000570:	bf00      	nop

}
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	000f423f 	.word	0x000f423f
 8000580:	2000067c 	.word	0x2000067c
 8000584:	2000067d 	.word	0x2000067d

08000588 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){      //指定したコンペアを超えた時発火
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	//HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
	unsigned int tmpCtr = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);
 8000590:	4b5b      	ldr	r3, [pc, #364]	; (8000700 <HAL_TIM_OC_DelayElapsedCallback+0x178>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000596:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 65500);
 8000598:	4b59      	ldr	r3, [pc, #356]	; (8000700 <HAL_TIM_OC_DelayElapsedCallback+0x178>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80005a0:	635a      	str	r2, [r3, #52]	; 0x34

		if ( ! (nextStepperFlag) ){
 80005a2:	4b58      	ldr	r3, [pc, #352]	; (8000704 <HAL_TIM_OC_DelayElapsedCallback+0x17c>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d105      	bne.n	80005b8 <HAL_TIM_OC_DelayElapsedCallback+0x30>
			steppers[0].di -= tmpCtr;           //compareの値から1引いた値をsteppers[0].diに代入
 80005ac:	4b56      	ldr	r3, [pc, #344]	; (8000708 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 80005ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	1ad3      	subs	r3, r2, r3
 80005b4:	4a54      	ldr	r2, [pc, #336]	; (8000708 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 80005b6:	6453      	str	r3, [r2, #68]	; 0x44
		}

		volatile stepperInfo* s = &steppers[0];
 80005b8:	4b53      	ldr	r3, [pc, #332]	; (8000708 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 80005ba:	60bb      	str	r3, [r7, #8]

		if( (s->stepCount) < (s->totalSteps) ){
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d218      	bcs.n	80005fa <HAL_TIM_OC_DelayElapsedCallback+0x72>
			s->stepFunc();
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	4798      	blx	r3
			s->stepCount++;
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005d2:	1c5a      	adds	r2, r3, #1
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	649a      	str	r2, [r3, #72]	; 0x48
			s->stepPosition += s->dir;
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	69da      	ldr	r2, [r3, #28]
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	441a      	add	r2, r3
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	619a      	str	r2, [r3, #24]
			if ( (s->stepCount) >= (s->totalSteps) ){
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d303      	bcc.n	80005fa <HAL_TIM_OC_DelayElapsedCallback+0x72>
				s->movementDone = 1;
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	2201      	movs	r2, #1
 80005f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			}
		}

		if (s->rampUpStepCount == 0){
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d142      	bne.n	8000688 <HAL_TIM_OC_DelayElapsedCallback+0x100>
			s->n++;
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000606:	1c5a      	adds	r2, r3, #1
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	63da      	str	r2, [r3, #60]	; 0x3c
			s->d = s->d - (2*s->d) / (4*s->n +1);	//加速の式
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8000618:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	3301      	adds	r3, #1
 8000624:	ee07 3a90 	vmov	s15, r3
 8000628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800062c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			if (s->d <= s->minStepInterval ){
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	ee07 3a90 	vmov	s15, r3
 8000648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800064c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000654:	d80c      	bhi.n	8000670 <HAL_TIM_OC_DelayElapsedCallback+0xe8>
				s->d = s->minStepInterval;
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	ee07 3a90 	vmov	s15, r3
 800065e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
				s->rampUpStepCount = s->stepCount;
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	639a      	str	r2, [r3, #56]	; 0x38
			}
			if (s->stepCount >= (s->totalSteps / 2) ){
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000678:	085b      	lsrs	r3, r3, #1
 800067a:	429a      	cmp	r2, r3
 800067c:	d32c      	bcc.n	80006d8 <HAL_TIM_OC_DelayElapsedCallback+0x150>
				s->rampUpStepCount = s->stepCount;
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	639a      	str	r2, [r3, #56]	; 0x38
 8000686:	e027      	b.n	80006d8 <HAL_TIM_OC_DelayElapsedCallback+0x150>
			}
		} else if ( s->stepCount >= s->totalSteps - s->rampUpStepCount) {
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000694:	1acb      	subs	r3, r1, r3
 8000696:	429a      	cmp	r2, r3
 8000698:	d31e      	bcc.n	80006d8 <HAL_TIM_OC_DelayElapsedCallback+0x150>
			s->d = (s->d * (4 * s->n + 1)) / (4 * s->n + 1 -2);
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	3301      	adds	r3, #1
 80006a8:	ee07 3a90 	vmov	s15, r3
 80006ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006b0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	3b01      	subs	r3, #1
 80006bc:	ee07 3a90 	vmov	s15, r3
 80006c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			s->n--;
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006d2:	1e5a      	subs	r2, r3, #1
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		s->di = s->d;	//計算結果sをstepperInfoのメンバdに代入したものをメンバdiに代入
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80006de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006e2:	ee17 2a90 	vmov	r2, s15
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	645a      	str	r2, [r3, #68]	; 0x44


	setNextInterruptInterval();
 80006ea:	f7ff ff23 	bl	8000534 <setNextInterruptInterval>

	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80006ee:	4b04      	ldr	r3, [pc, #16]	; (8000700 <HAL_TIM_OC_DelayElapsedCallback+0x178>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24


}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	2000008c 	.word	0x2000008c
 8000704:	2000067d 	.word	0x2000067d
 8000708:	2000067c 	.word	0x2000067c

0800070c <runAndWait>:
	if( ! HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){	//割り込みピンが真でない(1でない=0なら)
		end_stop_state |= 1;					//end_stop_stateに左辺か右辺が1なら1を代入
	}
}

void runAndWait(){
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	setNextInterruptInterval();
 8000710:	f7ff ff10 	bl	8000534 <setNextInterruptInterval>
	//while(remainingSteppersFlag);
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}

08000718 <TMCsetup>:
	steppers[0].stepPosition = 0;
	steppers[0].homing = 1;
	steppers[0].minStepInterval = 100;
}

void TMCsetup(){
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
	int32_t mstep_value = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
	int32_t toff_value = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
	int32_t microstep_value = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
	int32_t stanby_value = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
	int32_t max_value = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
	mstep_value = TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK,TMC2209_MSTEP_REG_SELECT_SHIFT);	//uartでのmicrostepの有効化
 8000732:	2100      	movs	r1, #0
 8000734:	4886      	ldr	r0, [pc, #536]	; (8000950 <TMCsetup+0x238>)
 8000736:	f004 ffbe 	bl	80056b6 <tmc2209_readInt>
 800073a:	4603      	mov	r3, r0
 800073c:	11db      	asrs	r3, r3, #7
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	617b      	str	r3, [r7, #20]
	printf("mstep_before : %ld\r\n", mstep_value);
 8000744:	6979      	ldr	r1, [r7, #20]
 8000746:	4883      	ldr	r0, [pc, #524]	; (8000954 <TMCsetup+0x23c>)
 8000748:	f005 f982 	bl	8005a50 <iprintf>
	mstep_value = 1;
 800074c:	2301      	movs	r3, #1
 800074e:	617b      	str	r3, [r7, #20]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT,mstep_value);
 8000750:	2100      	movs	r1, #0
 8000752:	487f      	ldr	r0, [pc, #508]	; (8000950 <TMCsetup+0x238>)
 8000754:	f004 ffaf 	bl	80056b6 <tmc2209_readInt>
 8000758:	4603      	mov	r3, r0
 800075a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	01db      	lsls	r3, r3, #7
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4313      	orrs	r3, r2
 8000766:	461a      	mov	r2, r3
 8000768:	2100      	movs	r1, #0
 800076a:	4879      	ldr	r0, [pc, #484]	; (8000950 <TMCsetup+0x238>)
 800076c:	f004 ff53 	bl	8005616 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000770:	f000 fe26 	bl	80013c0 <HAL_GetTick>
 8000774:	4603      	mov	r3, r0
 8000776:	4619      	mov	r1, r3
 8000778:	4875      	ldr	r0, [pc, #468]	; (8000950 <TMCsetup+0x238>)
 800077a:	f005 f8d2 	bl	8005922 <tmc2209_periodicJob>
	mstep_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_GCONF, TMC2209_MSTEP_REG_SELECT_MASK, TMC2209_MSTEP_REG_SELECT_SHIFT);
 800077e:	2100      	movs	r1, #0
 8000780:	4873      	ldr	r0, [pc, #460]	; (8000950 <TMCsetup+0x238>)
 8000782:	f004 ff98 	bl	80056b6 <tmc2209_readInt>
 8000786:	4603      	mov	r3, r0
 8000788:	11db      	asrs	r3, r3, #7
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	617b      	str	r3, [r7, #20]
	printf("mstep_after : %ld\r\n", mstep_value);
 8000790:	6979      	ldr	r1, [r7, #20]
 8000792:	4871      	ldr	r0, [pc, #452]	; (8000958 <TMCsetup+0x240>)
 8000794:	f005 f95c 	bl	8005a50 <iprintf>

	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);	//保持トルクの設定
 8000798:	216c      	movs	r1, #108	; 0x6c
 800079a:	486d      	ldr	r0, [pc, #436]	; (8000950 <TMCsetup+0x238>)
 800079c:	f004 ff8b 	bl	80056b6 <tmc2209_readInt>
 80007a0:	4603      	mov	r3, r0
 80007a2:	f003 030f 	and.w	r3, r3, #15
 80007a6:	613b      	str	r3, [r7, #16]
	printf("toff_before : %ld\r\n", toff_value);
 80007a8:	6939      	ldr	r1, [r7, #16]
 80007aa:	486c      	ldr	r0, [pc, #432]	; (800095c <TMCsetup+0x244>)
 80007ac:	f005 f950 	bl	8005a50 <iprintf>
	toff_value = 3;
 80007b0:	2303      	movs	r3, #3
 80007b2:	613b      	str	r3, [r7, #16]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT,toff_value);
 80007b4:	216c      	movs	r1, #108	; 0x6c
 80007b6:	4866      	ldr	r0, [pc, #408]	; (8000950 <TMCsetup+0x238>)
 80007b8:	f004 ff7d 	bl	80056b6 <tmc2209_readInt>
 80007bc:	4603      	mov	r3, r0
 80007be:	f023 020f 	bic.w	r2, r3, #15
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	f003 030f 	and.w	r3, r3, #15
 80007c8:	4313      	orrs	r3, r2
 80007ca:	461a      	mov	r2, r3
 80007cc:	216c      	movs	r1, #108	; 0x6c
 80007ce:	4860      	ldr	r0, [pc, #384]	; (8000950 <TMCsetup+0x238>)
 80007d0:	f004 ff21 	bl	8005616 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80007d4:	f000 fdf4 	bl	80013c0 <HAL_GetTick>
 80007d8:	4603      	mov	r3, r0
 80007da:	4619      	mov	r1, r3
 80007dc:	485c      	ldr	r0, [pc, #368]	; (8000950 <TMCsetup+0x238>)
 80007de:	f005 f8a0 	bl	8005922 <tmc2209_periodicJob>
	toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 80007e2:	216c      	movs	r1, #108	; 0x6c
 80007e4:	485a      	ldr	r0, [pc, #360]	; (8000950 <TMCsetup+0x238>)
 80007e6:	f004 ff66 	bl	80056b6 <tmc2209_readInt>
 80007ea:	4603      	mov	r3, r0
 80007ec:	f003 030f 	and.w	r3, r3, #15
 80007f0:	613b      	str	r3, [r7, #16]
	printf("toff_after : %ld\r\n", toff_value);
 80007f2:	6939      	ldr	r1, [r7, #16]
 80007f4:	485a      	ldr	r0, [pc, #360]	; (8000960 <TMCsetup+0x248>)
 80007f6:	f005 f92b 	bl	8005a50 <iprintf>

	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);	//microstepの設定
 80007fa:	216c      	movs	r1, #108	; 0x6c
 80007fc:	4854      	ldr	r0, [pc, #336]	; (8000950 <TMCsetup+0x238>)
 80007fe:	f004 ff5a 	bl	80056b6 <tmc2209_readInt>
 8000802:	4603      	mov	r3, r0
 8000804:	161b      	asrs	r3, r3, #24
 8000806:	f003 030f 	and.w	r3, r3, #15
 800080a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800080e:	fa42 f303 	asr.w	r3, r2, r3
 8000812:	60fb      	str	r3, [r7, #12]
	printf("microstep_before : %ld\r\n", microstep_value);
 8000814:	68f9      	ldr	r1, [r7, #12]
 8000816:	4853      	ldr	r0, [pc, #332]	; (8000964 <TMCsetup+0x24c>)
 8000818:	f005 f91a 	bl	8005a50 <iprintf>
	microstep_value = 4;
 800081c:	2304      	movs	r3, #4
 800081e:	60fb      	str	r3, [r7, #12]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT,microstep_value);
 8000820:	216c      	movs	r1, #108	; 0x6c
 8000822:	484b      	ldr	r0, [pc, #300]	; (8000950 <TMCsetup+0x238>)
 8000824:	f004 ff47 	bl	80056b6 <tmc2209_readInt>
 8000828:	4603      	mov	r3, r0
 800082a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	061b      	lsls	r3, r3, #24
 8000832:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000836:	4313      	orrs	r3, r2
 8000838:	461a      	mov	r2, r3
 800083a:	216c      	movs	r1, #108	; 0x6c
 800083c:	4844      	ldr	r0, [pc, #272]	; (8000950 <TMCsetup+0x238>)
 800083e:	f004 feea 	bl	8005616 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000842:	f000 fdbd 	bl	80013c0 <HAL_GetTick>
 8000846:	4603      	mov	r3, r0
 8000848:	4619      	mov	r1, r3
 800084a:	4841      	ldr	r0, [pc, #260]	; (8000950 <TMCsetup+0x238>)
 800084c:	f005 f869 	bl	8005922 <tmc2209_periodicJob>
	microstep_value = 256 >> TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);
 8000850:	216c      	movs	r1, #108	; 0x6c
 8000852:	483f      	ldr	r0, [pc, #252]	; (8000950 <TMCsetup+0x238>)
 8000854:	f004 ff2f 	bl	80056b6 <tmc2209_readInt>
 8000858:	4603      	mov	r3, r0
 800085a:	161b      	asrs	r3, r3, #24
 800085c:	f003 030f 	and.w	r3, r3, #15
 8000860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000864:	fa42 f303 	asr.w	r3, r2, r3
 8000868:	60fb      	str	r3, [r7, #12]
	printf("microstep_after : %ld\r\n", microstep_value);
 800086a:	68f9      	ldr	r1, [r7, #12]
 800086c:	483e      	ldr	r0, [pc, #248]	; (8000968 <TMCsetup+0x250>)
 800086e:	f005 f8ef 	bl	8005a50 <iprintf>

	stanby_value=TMC2209_FIELD_READ(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);	//待機電流の設定
 8000872:	2110      	movs	r1, #16
 8000874:	4836      	ldr	r0, [pc, #216]	; (8000950 <TMCsetup+0x238>)
 8000876:	f004 ff1e 	bl	80056b6 <tmc2209_readInt>
 800087a:	4603      	mov	r3, r0
 800087c:	f003 031f 	and.w	r3, r3, #31
 8000880:	60bb      	str	r3, [r7, #8]
	printf("stanbycurrent_before: %ld\r\n", stanby_value);
 8000882:	68b9      	ldr	r1, [r7, #8]
 8000884:	4839      	ldr	r0, [pc, #228]	; (800096c <TMCsetup+0x254>)
 8000886:	f005 f8e3 	bl	8005a50 <iprintf>
	stanby_value = 10;
 800088a:	230a      	movs	r3, #10
 800088c:	60bb      	str	r3, [r7, #8]
	TMC2209_FIELD_UPDATE(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, stanby_value);
 800088e:	2110      	movs	r1, #16
 8000890:	482f      	ldr	r0, [pc, #188]	; (8000950 <TMCsetup+0x238>)
 8000892:	f004 ff10 	bl	80056b6 <tmc2209_readInt>
 8000896:	4603      	mov	r3, r0
 8000898:	f023 021f 	bic.w	r2, r3, #31
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	f003 031f 	and.w	r3, r3, #31
 80008a2:	4313      	orrs	r3, r2
 80008a4:	461a      	mov	r2, r3
 80008a6:	2110      	movs	r1, #16
 80008a8:	4829      	ldr	r0, [pc, #164]	; (8000950 <TMCsetup+0x238>)
 80008aa:	f004 feb4 	bl	8005616 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 80008ae:	f000 fd87 	bl	80013c0 <HAL_GetTick>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4619      	mov	r1, r3
 80008b6:	4826      	ldr	r0, [pc, #152]	; (8000950 <TMCsetup+0x238>)
 80008b8:	f005 f833 	bl	8005922 <tmc2209_periodicJob>
	HAL_Delay(200);
 80008bc:	20c8      	movs	r0, #200	; 0xc8
 80008be:	f000 fd8b 	bl	80013d8 <HAL_Delay>
	stanby_value=TMC2209_FIELD_READ(&TMC2209,TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);
 80008c2:	2110      	movs	r1, #16
 80008c4:	4822      	ldr	r0, [pc, #136]	; (8000950 <TMCsetup+0x238>)
 80008c6:	f004 fef6 	bl	80056b6 <tmc2209_readInt>
 80008ca:	4603      	mov	r3, r0
 80008cc:	f003 031f 	and.w	r3, r3, #31
 80008d0:	60bb      	str	r3, [r7, #8]
	printf("stanbycurrent_after: %ld\r\n", stanby_value);
 80008d2:	68b9      	ldr	r1, [r7, #8]
 80008d4:	4826      	ldr	r0, [pc, #152]	; (8000970 <TMCsetup+0x258>)
 80008d6:	f005 f8bb 	bl	8005a50 <iprintf>

	max_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);	//最大電流の設定
 80008da:	2110      	movs	r1, #16
 80008dc:	481c      	ldr	r0, [pc, #112]	; (8000950 <TMCsetup+0x238>)
 80008de:	f004 feea 	bl	80056b6 <tmc2209_readInt>
 80008e2:	4603      	mov	r3, r0
 80008e4:	121b      	asrs	r3, r3, #8
 80008e6:	f003 031f 	and.w	r3, r3, #31
 80008ea:	607b      	str	r3, [r7, #4]
	printf("maxumum_before: %ld\r\n", max_value);
 80008ec:	6879      	ldr	r1, [r7, #4]
 80008ee:	4821      	ldr	r0, [pc, #132]	; (8000974 <TMCsetup+0x25c>)
 80008f0:	f005 f8ae 	bl	8005a50 <iprintf>
	max_value = 10;
 80008f4:	230a      	movs	r3, #10
 80008f6:	607b      	str	r3, [r7, #4]
	TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, max_value);
 80008f8:	2110      	movs	r1, #16
 80008fa:	4815      	ldr	r0, [pc, #84]	; (8000950 <TMCsetup+0x238>)
 80008fc:	f004 fedb 	bl	80056b6 <tmc2209_readInt>
 8000900:	4603      	mov	r3, r0
 8000902:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800090e:	4313      	orrs	r3, r2
 8000910:	461a      	mov	r2, r3
 8000912:	2110      	movs	r1, #16
 8000914:	480e      	ldr	r0, [pc, #56]	; (8000950 <TMCsetup+0x238>)
 8000916:	f004 fe7e 	bl	8005616 <tmc2209_writeInt>
	tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 800091a:	f000 fd51 	bl	80013c0 <HAL_GetTick>
 800091e:	4603      	mov	r3, r0
 8000920:	4619      	mov	r1, r3
 8000922:	480b      	ldr	r0, [pc, #44]	; (8000950 <TMCsetup+0x238>)
 8000924:	f004 fffd 	bl	8005922 <tmc2209_periodicJob>
	HAL_Delay(200);
 8000928:	20c8      	movs	r0, #200	; 0xc8
 800092a:	f000 fd55 	bl	80013d8 <HAL_Delay>
	max_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
 800092e:	2110      	movs	r1, #16
 8000930:	4807      	ldr	r0, [pc, #28]	; (8000950 <TMCsetup+0x238>)
 8000932:	f004 fec0 	bl	80056b6 <tmc2209_readInt>
 8000936:	4603      	mov	r3, r0
 8000938:	121b      	asrs	r3, r3, #8
 800093a:	f003 031f 	and.w	r3, r3, #31
 800093e:	607b      	str	r3, [r7, #4]
	printf("maxumum_after: %ld\r\n", max_value);
 8000940:	6879      	ldr	r1, [r7, #4]
 8000942:	480d      	ldr	r0, [pc, #52]	; (8000978 <TMCsetup+0x260>)
 8000944:	f005 f884 	bl	8005a50 <iprintf>

}
 8000948:	bf00      	nop
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200001e0 	.word	0x200001e0
 8000954:	08006c1c 	.word	0x08006c1c
 8000958:	08006c34 	.word	0x08006c34
 800095c:	08006c48 	.word	0x08006c48
 8000960:	08006c5c 	.word	0x08006c5c
 8000964:	08006c70 	.word	0x08006c70
 8000968:	08006c8c 	.word	0x08006c8c
 800096c:	08006ca4 	.word	0x08006ca4
 8000970:	08006cc0 	.word	0x08006cc0
 8000974:	08006cdc 	.word	0x08006cdc
 8000978:	08006cf4 	.word	0x08006cf4

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b094      	sub	sp, #80	; 0x50
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8000982:	4b94      	ldr	r3, [pc, #592]	; (8000bd4 <main+0x258>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f005 f8ee 	bl	8005b6c <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000990:	f000 fcbc 	bl	800130c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000994:	f000 f942 	bl	8000c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000998:	f000 fa6c 	bl	8000e74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800099c:	f000 fa3a 	bl	8000e14 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80009a0:	f000 fa08 	bl	8000db4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80009a4:	f000 f992 	bl	8000ccc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //int getserial=0;
  TMC2209_INIT();
 80009a8:	f7ff fcae 	bl	8000308 <TMC2209_INIT>
  TMCsetup();
 80009ac:	f7ff feb4 	bl	8000718 <TMCsetup>
  printf("Hello\r\n");
 80009b0:	4889      	ldr	r0, [pc, #548]	; (8000bd8 <main+0x25c>)
 80009b2:	f005 f8d3 	bl	8005b5c <puts>

  //int i;
   char rxbuf[1];
   char start[] ="1:front,2:back\r\n";
 80009b6:	4b89      	ldr	r3, [pc, #548]	; (8000bdc <main+0x260>)
 80009b8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80009bc:	461d      	mov	r5, r3
 80009be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c2:	682b      	ldr	r3, [r5, #0]
 80009c4:	7023      	strb	r3, [r4, #0]
   char front[] ="front turn\r\n";
 80009c6:	4b86      	ldr	r3, [pc, #536]	; (8000be0 <main+0x264>)
 80009c8:	f107 0420 	add.w	r4, r7, #32
 80009cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009ce:	c407      	stmia	r4!, {r0, r1, r2}
 80009d0:	7023      	strb	r3, [r4, #0]
   char back[] ="back turn\r\n";
 80009d2:	4a84      	ldr	r2, [pc, #528]	; (8000be4 <main+0x268>)
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80009da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   char nonans[] ="Not Understand \r\n";
 80009de:	4b82      	ldr	r3, [pc, #520]	; (8000be8 <main+0x26c>)
 80009e0:	463c      	mov	r4, r7
 80009e2:	461d      	mov	r5, r3
 80009e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e8:	682b      	ldr	r3, [r5, #0]
 80009ea:	8023      	strh	r3, [r4, #0]


   HAL_UART_Transmit(&huart2,(uint8_t *)start,sizeof(start),3000);
 80009ec:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80009f0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009f4:	2211      	movs	r2, #17
 80009f6:	487d      	ldr	r0, [pc, #500]	; (8000bec <main+0x270>)
 80009f8:	f003 fc1a 	bl	8004230 <HAL_UART_Transmit>
  //uint8_t rxbuf[1];
   //int32_t *value=3;

   //TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT, 3 );
   //Set stepper 1
   steppers[0].dirFunc = Dir0;
 80009fc:	4b7c      	ldr	r3, [pc, #496]	; (8000bf0 <main+0x274>)
 80009fe:	4a7d      	ldr	r2, [pc, #500]	; (8000bf4 <main+0x278>)
 8000a00:	609a      	str	r2, [r3, #8]
   steppers[0].stepFunc = Step0;
 8000a02:	4b7b      	ldr	r3, [pc, #492]	; (8000bf0 <main+0x274>)
 8000a04:	4a7c      	ldr	r2, [pc, #496]	; (8000bf8 <main+0x27c>)
 8000a06:	60da      	str	r2, [r3, #12]
   steppers[0].acceleration = 5000;
 8000a08:	4b79      	ldr	r3, [pc, #484]	; (8000bf0 <main+0x274>)
 8000a0a:	4a7c      	ldr	r2, [pc, #496]	; (8000bfc <main+0x280>)
 8000a0c:	601a      	str	r2, [r3, #0]
   steppers[0].minStepInterval = 100;
 8000a0e:	4b78      	ldr	r3, [pc, #480]	; (8000bf0 <main+0x274>)
 8000a10:	2264      	movs	r2, #100	; 0x64
 8000a12:	605a      	str	r2, [r3, #4]
   steppers[0].homing = 0;
 8000a14:	4b76      	ldr	r3, [pc, #472]	; (8000bf0 <main+0x274>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	741a      	strb	r2, [r3, #16]
   steppers[0].dir_inv = 1;
 8000a1a:	4b75      	ldr	r3, [pc, #468]	; (8000bf0 <main+0x274>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	621a      	str	r2, [r3, #32]
   steppers[0].seeking_vel = 100;
 8000a20:	4b73      	ldr	r3, [pc, #460]	; (8000bf0 <main+0x274>)
 8000a22:	2264      	movs	r2, #100	; 0x64
 8000a24:	629a      	str	r2, [r3, #40]	; 0x28
   steppers[0].homing_vel = 200;
 8000a26:	4b72      	ldr	r3, [pc, #456]	; (8000bf0 <main+0x274>)
 8000a28:	22c8      	movs	r2, #200	; 0xc8
 8000a2a:	62da      	str	r2, [r3, #44]	; 0x2c
   steppers[0].pull_off = 500;
 8000a2c:	4b70      	ldr	r3, [pc, #448]	; (8000bf0 <main+0x274>)
 8000a2e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a32:	625a      	str	r2, [r3, #36]	; 0x24
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //example read register value
	  //int32_t value = 0;
	  HAL_UART_Receive(&huart2,(uint8_t *)rxbuf, sizeof(rxbuf), 100);
 8000a34:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000a38:	2364      	movs	r3, #100	; 0x64
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	486b      	ldr	r0, [pc, #428]	; (8000bec <main+0x270>)
 8000a3e:	f003 fc8b 	bl	8004358 <HAL_UART_Receive>
	  	  if (rxbuf[0] != 0){
 8000a42:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d0f4      	beq.n	8000a34 <main+0xb8>

	  		  HAL_UART_Transmit(&huart2,(uint8_t *)start, sizeof(start),3000);
 8000a4a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000a4e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a52:	2211      	movs	r2, #17
 8000a54:	4865      	ldr	r0, [pc, #404]	; (8000bec <main+0x270>)
 8000a56:	f003 fbeb 	bl	8004230 <HAL_UART_Transmit>
	  		  //tmc2209_writeInt(motorToIC(motor), TMC2209_TPWMTHRS, *value);
	  		  if(rxbuf[0] == '1'){
 8000a5a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000a5e:	2b31      	cmp	r3, #49	; 0x31
 8000a60:	d11e      	bne.n	8000aa0 <main+0x124>
	  			  HAL_UART_Transmit(&huart2,(uint8_t *)front, sizeof(front),3000);
 8000a62:	f107 0120 	add.w	r1, r7, #32
 8000a66:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a6a:	220d      	movs	r2, #13
 8000a6c:	485f      	ldr	r0, [pc, #380]	; (8000bec <main+0x270>)
 8000a6e:	f003 fbdf 	bl	8004230 <HAL_UART_Transmit>
	  			  printf("1:start");
 8000a72:	4863      	ldr	r0, [pc, #396]	; (8000c00 <main+0x284>)
 8000a74:	f004 ffec 	bl	8005a50 <iprintf>
	  			  prepareAbsoluteMovement(10000);
 8000a78:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a7c:	f7ff fd2c 	bl	80004d8 <prepareAbsoluteMovement>
	  			  //runAndWait();
	  			  HAL_Delay(100);
 8000a80:	2064      	movs	r0, #100	; 0x64
 8000a82:	f000 fca9 	bl	80013d8 <HAL_Delay>
	  			  prepareAbsoluteMovement(-10000);
 8000a86:	485f      	ldr	r0, [pc, #380]	; (8000c04 <main+0x288>)
 8000a88:	f7ff fd26 	bl	80004d8 <prepareAbsoluteMovement>
	  			  //runAndWait();
	  			  HAL_Delay(100);
 8000a8c:	2064      	movs	r0, #100	; 0x64
 8000a8e:	f000 fca3 	bl	80013d8 <HAL_Delay>
	  			  printf("1:end");
 8000a92:	485d      	ldr	r0, [pc, #372]	; (8000c08 <main+0x28c>)
 8000a94:	f004 ffdc 	bl	8005a50 <iprintf>


	  		  	  rxbuf[0]=0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8000a9e:	e7c9      	b.n	8000a34 <main+0xb8>
	  		  }
	  		  else if(rxbuf[0] == '2'){
 8000aa0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000aa4:	2b32      	cmp	r3, #50	; 0x32
 8000aa6:	d113      	bne.n	8000ad0 <main+0x154>

	  			  HAL_UART_Transmit(&huart2,(uint8_t *)back, sizeof(back),3000);
 8000aa8:	f107 0114 	add.w	r1, r7, #20
 8000aac:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000ab0:	220c      	movs	r2, #12
 8000ab2:	484e      	ldr	r0, [pc, #312]	; (8000bec <main+0x270>)
 8000ab4:	f003 fbbc 	bl	8004230 <HAL_UART_Transmit>
	  			  prepareMovement(-100000);
 8000ab8:	4854      	ldr	r0, [pc, #336]	; (8000c0c <main+0x290>)
 8000aba:	f7ff fccd 	bl	8000458 <prepareMovement>
	  			  runAndWait();
 8000abe:	f7ff fe25 	bl	800070c <runAndWait>
	  			  HAL_Delay(100);
 8000ac2:	2064      	movs	r0, #100	; 0x64
 8000ac4:	f000 fc88 	bl	80013d8 <HAL_Delay>
	  			  	  //HAL_Delay(100);

	  			  rxbuf[0]=0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8000ace:	e7b1      	b.n	8000a34 <main+0xb8>
	  		  }
	  		  else if(rxbuf[0] == '3'){
 8000ad0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000ad4:	2b33      	cmp	r3, #51	; 0x33
 8000ad6:	d136      	bne.n	8000b46 <main+0x1ca>
	  			  int32_t toff_value = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	64bb      	str	r3, [r7, #72]	; 0x48

				  toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 8000adc:	216c      	movs	r1, #108	; 0x6c
 8000ade:	484c      	ldr	r0, [pc, #304]	; (8000c10 <main+0x294>)
 8000ae0:	f004 fde9 	bl	80056b6 <tmc2209_readInt>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	f003 030f 	and.w	r3, r3, #15
 8000aea:	64bb      	str	r3, [r7, #72]	; 0x48
				  printf("toff_before : %ld\r\n", toff_value);
 8000aec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000aee:	4849      	ldr	r0, [pc, #292]	; (8000c14 <main+0x298>)
 8000af0:	f004 ffae 	bl	8005a50 <iprintf>
				  toff_value = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	64bb      	str	r3, [r7, #72]	; 0x48
				  TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT,toff_value);
 8000af8:	216c      	movs	r1, #108	; 0x6c
 8000afa:	4845      	ldr	r0, [pc, #276]	; (8000c10 <main+0x294>)
 8000afc:	f004 fddb 	bl	80056b6 <tmc2209_readInt>
 8000b00:	4603      	mov	r3, r0
 8000b02:	f023 020f 	bic.w	r2, r3, #15
 8000b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b08:	f003 030f 	and.w	r3, r3, #15
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	461a      	mov	r2, r3
 8000b10:	216c      	movs	r1, #108	; 0x6c
 8000b12:	483f      	ldr	r0, [pc, #252]	; (8000c10 <main+0x294>)
 8000b14:	f004 fd7f 	bl	8005616 <tmc2209_writeInt>
				  tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000b18:	f000 fc52 	bl	80013c0 <HAL_GetTick>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4619      	mov	r1, r3
 8000b20:	483b      	ldr	r0, [pc, #236]	; (8000c10 <main+0x294>)
 8000b22:	f004 fefe 	bl	8005922 <tmc2209_periodicJob>
				  toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 8000b26:	216c      	movs	r1, #108	; 0x6c
 8000b28:	4839      	ldr	r0, [pc, #228]	; (8000c10 <main+0x294>)
 8000b2a:	f004 fdc4 	bl	80056b6 <tmc2209_readInt>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	f003 030f 	and.w	r3, r3, #15
 8000b34:	64bb      	str	r3, [r7, #72]	; 0x48
				  printf("toff_after : %ld\r\n", toff_value);
 8000b36:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000b38:	4837      	ldr	r0, [pc, #220]	; (8000c18 <main+0x29c>)
 8000b3a:	f004 ff89 	bl	8005a50 <iprintf>

				  rxbuf[0]=0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8000b44:	e776      	b.n	8000a34 <main+0xb8>
	  		  }
	  		  else if(rxbuf[0] == '4'){
 8000b46:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000b4a:	2b34      	cmp	r3, #52	; 0x34
 8000b4c:	d136      	bne.n	8000bbc <main+0x240>
	  			  int32_t toff_value = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	64fb      	str	r3, [r7, #76]	; 0x4c

	  			  toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 8000b52:	216c      	movs	r1, #108	; 0x6c
 8000b54:	482e      	ldr	r0, [pc, #184]	; (8000c10 <main+0x294>)
 8000b56:	f004 fdae 	bl	80056b6 <tmc2209_readInt>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f003 030f 	and.w	r3, r3, #15
 8000b60:	64fb      	str	r3, [r7, #76]	; 0x4c
	  			  printf("toff_before : %ld\r\n", toff_value);
 8000b62:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000b64:	482b      	ldr	r0, [pc, #172]	; (8000c14 <main+0x298>)
 8000b66:	f004 ff73 	bl	8005a50 <iprintf>
	  			  toff_value = 3;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  			  TMC2209_FIELD_UPDATE(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT,toff_value);
 8000b6e:	216c      	movs	r1, #108	; 0x6c
 8000b70:	4827      	ldr	r0, [pc, #156]	; (8000c10 <main+0x294>)
 8000b72:	f004 fda0 	bl	80056b6 <tmc2209_readInt>
 8000b76:	4603      	mov	r3, r0
 8000b78:	f023 020f 	bic.w	r2, r3, #15
 8000b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	4313      	orrs	r3, r2
 8000b84:	461a      	mov	r2, r3
 8000b86:	216c      	movs	r1, #108	; 0x6c
 8000b88:	4821      	ldr	r0, [pc, #132]	; (8000c10 <main+0x294>)
 8000b8a:	f004 fd44 	bl	8005616 <tmc2209_writeInt>
	  			  tmc2209_periodicJob(&TMC2209, HAL_GetTick());
 8000b8e:	f000 fc17 	bl	80013c0 <HAL_GetTick>
 8000b92:	4603      	mov	r3, r0
 8000b94:	4619      	mov	r1, r3
 8000b96:	481e      	ldr	r0, [pc, #120]	; (8000c10 <main+0x294>)
 8000b98:	f004 fec3 	bl	8005922 <tmc2209_periodicJob>
	  			  toff_value=TMC2209_FIELD_READ(&TMC2209, TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
 8000b9c:	216c      	movs	r1, #108	; 0x6c
 8000b9e:	481c      	ldr	r0, [pc, #112]	; (8000c10 <main+0x294>)
 8000ba0:	f004 fd89 	bl	80056b6 <tmc2209_readInt>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	64fb      	str	r3, [r7, #76]	; 0x4c
	  			  printf("toff_after : %ld\r\n", toff_value);
 8000bac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000bae:	481a      	ldr	r0, [pc, #104]	; (8000c18 <main+0x29c>)
 8000bb0:	f004 ff4e 	bl	8005a50 <iprintf>

	  			  rxbuf[0]=0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8000bba:	e73b      	b.n	8000a34 <main+0xb8>
	  			  		  }
	  		  else{
	  			  HAL_UART_Transmit(&huart2,(uint8_t *)nonans, sizeof(nonans),3000);
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000bc2:	2212      	movs	r2, #18
 8000bc4:	4809      	ldr	r0, [pc, #36]	; (8000bec <main+0x270>)
 8000bc6:	f003 fb33 	bl	8004230 <HAL_UART_Transmit>
	  			  rxbuf[0]=0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	  HAL_UART_Receive(&huart2,(uint8_t *)rxbuf, sizeof(rxbuf), 100);
 8000bd0:	e730      	b.n	8000a34 <main+0xb8>
 8000bd2:	bf00      	nop
 8000bd4:	2000000c 	.word	0x2000000c
 8000bd8:	08006d0c 	.word	0x08006d0c
 8000bdc:	08006d24 	.word	0x08006d24
 8000be0:	08006d38 	.word	0x08006d38
 8000be4:	08006d48 	.word	0x08006d48
 8000be8:	08006d54 	.word	0x08006d54
 8000bec:	2000015c 	.word	0x2000015c
 8000bf0:	2000067c 	.word	0x2000067c
 8000bf4:	080003d1 	.word	0x080003d1
 8000bf8:	080003b1 	.word	0x080003b1
 8000bfc:	459c4000 	.word	0x459c4000
 8000c00:	08006d14 	.word	0x08006d14
 8000c04:	ffffd8f0 	.word	0xffffd8f0
 8000c08:	08006d1c 	.word	0x08006d1c
 8000c0c:	fffe7960 	.word	0xfffe7960
 8000c10:	200001e0 	.word	0x200001e0
 8000c14:	08006c48 	.word	0x08006c48
 8000c18:	08006c5c 	.word	0x08006c5c

08000c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b096      	sub	sp, #88	; 0x58
 8000c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c26:	2228      	movs	r2, #40	; 0x28
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f004 ff08 	bl	8005a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]
 8000c4e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c50:	2302      	movs	r3, #2
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c54:	2301      	movs	r3, #1
 8000c56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c58:	2310      	movs	r3, #16
 8000c5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c60:	2300      	movs	r3, #0
 8000c62:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c64:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c68:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 ff18 	bl	8001aa4 <HAL_RCC_OscConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000c7a:	f000 f96f 	bl	8000f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7e:	230f      	movs	r3, #15
 8000c80:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c82:	2302      	movs	r3, #2
 8000c84:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	2102      	movs	r1, #2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f001 ff40 	bl	8002b20 <HAL_RCC_ClockConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ca6:	f000 f959 	bl	8000f5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f002 f969 	bl	8002f8c <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000cc0:	f000 f94c 	bl	8000f5c <Error_Handler>
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	3758      	adds	r7, #88	; 0x58
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08e      	sub	sp, #56	; 0x38
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cec:	463b      	mov	r3, r7
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cfe:	4b2b      	ldr	r3, [pc, #172]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d00:	4a2b      	ldr	r2, [pc, #172]	; (8000db0 <MX_TIM3_Init+0xe4>)
 8000d02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 128-1;
 8000d04:	4b29      	ldr	r3, [pc, #164]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d06:	227f      	movs	r2, #127	; 0x7f
 8000d08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b28      	ldr	r3, [pc, #160]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d10:	4b26      	ldr	r3, [pc, #152]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b24      	ldr	r3, [pc, #144]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1e:	4b23      	ldr	r3, [pc, #140]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d24:	4821      	ldr	r0, [pc, #132]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d26:	f002 fa57 	bl	80031d8 <HAL_TIM_Base_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d30:	f000 f914 	bl	8000f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	481a      	ldr	r0, [pc, #104]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d42:	f002 fc9b 	bl	800367c <HAL_TIM_ConfigClockSource>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000d4c:	f000 f906 	bl	8000f5c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000d50:	4816      	ldr	r0, [pc, #88]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d52:	f002 fa98 	bl	8003286 <HAL_TIM_OC_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000d5c:	f000 f8fe 	bl	8000f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480f      	ldr	r0, [pc, #60]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d70:	f003 f92e 	bl	8003fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000d7a:	f000 f8ef 	bl	8000f5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2200      	movs	r2, #0
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000d96:	f002 fbf7 	bl	8003588 <HAL_TIM_OC_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000da0:	f000 f8dc 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	3738      	adds	r7, #56	; 0x38
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	2000008c 	.word	0x2000008c
 8000db0:	40000400 	.word	0x40000400

08000db4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000dba:	4a15      	ldr	r2, [pc, #84]	; (8000e10 <MX_USART1_UART_Init+0x5c>)
 8000dbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dbe:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000dc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000df8:	f003 f9c4 	bl	8004184 <HAL_HalfDuplex_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e02:	f000 f8ab 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200000d8 	.word	0x200000d8
 8000e10:	40013800 	.word	0x40013800

08000e14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_USART2_UART_Init+0x58>)
 8000e1a:	4a15      	ldr	r2, [pc, #84]	; (8000e70 <MX_USART2_UART_Init+0x5c>)
 8000e1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <MX_USART2_UART_Init+0x58>)
 8000e20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_USART2_UART_Init+0x58>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_USART2_UART_Init+0x58>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <MX_USART2_UART_Init+0x58>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <MX_USART2_UART_Init+0x58>)
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <MX_USART2_UART_Init+0x58>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <MX_USART2_UART_Init+0x58>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <MX_USART2_UART_Init+0x58>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <MX_USART2_UART_Init+0x58>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_USART2_UART_Init+0x58>)
 8000e58:	f003 f946 	bl	80040e8 <HAL_UART_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e62:	f000 f87b 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2000015c 	.word	0x2000015c
 8000e70:	40004400 	.word	0x40004400

08000e74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e8a:	4b28      	ldr	r3, [pc, #160]	; (8000f2c <MX_GPIO_Init+0xb8>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	4a27      	ldr	r2, [pc, #156]	; (8000f2c <MX_GPIO_Init+0xb8>)
 8000e90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e94:	6153      	str	r3, [r2, #20]
 8000e96:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <MX_GPIO_Init+0xb8>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <MX_GPIO_Init+0xb8>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a21      	ldr	r2, [pc, #132]	; (8000f2c <MX_GPIO_Init+0xb8>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
 8000eae:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <MX_GPIO_Init+0xb8>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <MX_GPIO_Init+0xb8>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	4a1b      	ldr	r2, [pc, #108]	; (8000f2c <MX_GPIO_Init+0xb8>)
 8000ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec4:	6153      	str	r3, [r2, #20]
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <MX_GPIO_Init+0xb8>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2130      	movs	r1, #48	; 0x30
 8000ed6:	4816      	ldr	r0, [pc, #88]	; (8000f30 <MX_GPIO_Init+0xbc>)
 8000ed8:	f000 fdb4 	bl	8001a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000edc:	2330      	movs	r3, #48	; 0x30
 8000ede:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480f      	ldr	r0, [pc, #60]	; (8000f30 <MX_GPIO_Init+0xbc>)
 8000ef4:	f000 fc1c 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ef8:	2340      	movs	r3, #64	; 0x40
 8000efa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000efc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4808      	ldr	r0, [pc, #32]	; (8000f30 <MX_GPIO_Init+0xbc>)
 8000f0e:	f000 fc0f 	bl	8001730 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	2017      	movs	r0, #23
 8000f18:	f000 fb5d 	bl	80015d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f1c:	2017      	movs	r0, #23
 8000f1e:	f000 fb76 	bl	800160e <HAL_NVIC_EnableIRQ>

}
 8000f22:	bf00      	nop
 8000f24:	3720      	adds	r7, #32
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	48000400 	.word	0x48000400

08000f34 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	230a      	movs	r3, #10
 8000f46:	68b9      	ldr	r1, [r7, #8]
 8000f48:	4803      	ldr	r0, [pc, #12]	; (8000f58 <_write+0x24>)
 8000f4a:	f003 f971 	bl	8004230 <HAL_UART_Transmit>
  return len;
 8000f4e:	687b      	ldr	r3, [r7, #4]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	2000015c 	.word	0x2000015c

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
}
 8000f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <Error_Handler+0x8>
	...

08000f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <HAL_MspInit+0x44>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <HAL_MspInit+0x44>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6193      	str	r3, [r2, #24]
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <HAL_MspInit+0x44>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_MspInit+0x44>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_MspInit+0x44>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f90:	61d3      	str	r3, [r2, #28]
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_MspInit+0x44>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000

08000fb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <HAL_TIM_Base_MspInit+0x44>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d113      	bne.n	8000fea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <HAL_TIM_Base_MspInit+0x48>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	4a0c      	ldr	r2, [pc, #48]	; (8000ff8 <HAL_TIM_Base_MspInit+0x48>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	61d3      	str	r3, [r2, #28]
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_TIM_Base_MspInit+0x48>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	201d      	movs	r0, #29
 8000fe0:	f000 faf9 	bl	80015d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fe4:	201d      	movs	r0, #29
 8000fe6:	f000 fb12 	bl	800160e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40000400 	.word	0x40000400
 8000ff8:	40021000 	.word	0x40021000

08000ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	; 0x30
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a34      	ldr	r2, [pc, #208]	; (80010ec <HAL_UART_MspInit+0xf0>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d12a      	bne.n	8001074 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800101e:	4b34      	ldr	r3, [pc, #208]	; (80010f0 <HAL_UART_MspInit+0xf4>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	4a33      	ldr	r2, [pc, #204]	; (80010f0 <HAL_UART_MspInit+0xf4>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001028:	6193      	str	r3, [r2, #24]
 800102a:	4b31      	ldr	r3, [pc, #196]	; (80010f0 <HAL_UART_MspInit+0xf4>)
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001032:	61bb      	str	r3, [r7, #24]
 8001034:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b2e      	ldr	r3, [pc, #184]	; (80010f0 <HAL_UART_MspInit+0xf4>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	4a2d      	ldr	r2, [pc, #180]	; (80010f0 <HAL_UART_MspInit+0xf4>)
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	6153      	str	r3, [r2, #20]
 8001042:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <HAL_UART_MspInit+0xf4>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800104e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001054:	2312      	movs	r3, #18
 8001056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001060:	2307      	movs	r3, #7
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4619      	mov	r1, r3
 800106a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106e:	f000 fb5f 	bl	8001730 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001072:	e036      	b.n	80010e2 <HAL_UART_MspInit+0xe6>
  else if(huart->Instance==USART2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a1e      	ldr	r2, [pc, #120]	; (80010f4 <HAL_UART_MspInit+0xf8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d131      	bne.n	80010e2 <HAL_UART_MspInit+0xe6>
    __HAL_RCC_USART2_CLK_ENABLE();
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <HAL_UART_MspInit+0xf4>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <HAL_UART_MspInit+0xf4>)
 8001084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001088:	61d3      	str	r3, [r2, #28]
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_UART_MspInit+0xf4>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <HAL_UART_MspInit+0xf4>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	4a15      	ldr	r2, [pc, #84]	; (80010f0 <HAL_UART_MspInit+0xf4>)
 800109c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a0:	6153      	str	r3, [r2, #20]
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <HAL_UART_MspInit+0xf4>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80010ae:	f248 0304 	movw	r3, #32772	; 0x8004
 80010b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010c0:	2307      	movs	r3, #7
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4619      	mov	r1, r3
 80010ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ce:	f000 fb2f 	bl	8001730 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2026      	movs	r0, #38	; 0x26
 80010d8:	f000 fa7d 	bl	80015d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010dc:	2026      	movs	r0, #38	; 0x26
 80010de:	f000 fa96 	bl	800160e <HAL_NVIC_EnableIRQ>
}
 80010e2:	bf00      	nop
 80010e4:	3730      	adds	r7, #48	; 0x30
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40013800 	.word	0x40013800
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40004400 	.word	0x40004400

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <NMI_Handler+0x4>

080010fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <HardFault_Handler+0x4>

08001104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <MemManage_Handler+0x4>

0800110a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <UsageFault_Handler+0x4>

08001116 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001144:	f000 f928 	bl	8001398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001150:	2040      	movs	r0, #64	; 0x40
 8001152:	f000 fc8f 	bl	8001a74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <TIM3_IRQHandler+0x10>)
 8001162:	f002 f8f1 	bl	8003348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000008c 	.word	0x2000008c

08001170 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <USART2_IRQHandler+0x10>)
 8001176:	f003 f9c1 	bl	80044fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2000015c 	.word	0x2000015c

08001184 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	e00a      	b.n	80011ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001196:	f3af 8000 	nop.w
 800119a:	4601      	mov	r1, r0
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	60ba      	str	r2, [r7, #8]
 80011a2:	b2ca      	uxtb	r2, r1
 80011a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3301      	adds	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	dbf0      	blt.n	8001196 <_read+0x12>
	}

return len;
 80011b4:	687b      	ldr	r3, [r7, #4]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_close>:
	}
	return len;
}

int _close(int file)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
	return -1;
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011e6:	605a      	str	r2, [r3, #4]
	return 0;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <_isatty>:

int _isatty(int file)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
	return 1;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
	return 0;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001230:	4a14      	ldr	r2, [pc, #80]	; (8001284 <_sbrk+0x5c>)
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <_sbrk+0x60>)
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <_sbrk+0x64>)
 8001246:	4a12      	ldr	r2, [pc, #72]	; (8001290 <_sbrk+0x68>)
 8001248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	429a      	cmp	r2, r3
 8001256:	d207      	bcs.n	8001268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001258:	f004 fbc8 	bl	80059ec <__errno>
 800125c:	4603      	mov	r3, r0
 800125e:	220c      	movs	r2, #12
 8001260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001266:	e009      	b.n	800127c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <_sbrk+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	4a05      	ldr	r2, [pc, #20]	; (800128c <_sbrk+0x64>)
 8001278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800127a:	68fb      	ldr	r3, [r7, #12]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20003000 	.word	0x20003000
 8001288:	00000400 	.word	0x00000400
 800128c:	20000680 	.word	0x20000680
 8001290:	200008a0 	.word	0x200008a0

08001294 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <SystemInit+0x20>)
 800129a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <SystemInit+0x20>)
 80012a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012bc:	480d      	ldr	r0, [pc, #52]	; (80012f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80012be:	490e      	ldr	r1, [pc, #56]	; (80012f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c0:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <LoopForever+0xe>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c4:	e002      	b.n	80012cc <LoopCopyDataInit>

080012c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ca:	3304      	adds	r3, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d0:	d3f9      	bcc.n	80012c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d2:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d4:	4c0b      	ldr	r4, [pc, #44]	; (8001304 <LoopForever+0x16>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d8:	e001      	b.n	80012de <LoopFillZerobss>

080012da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012dc:	3204      	adds	r2, #4

080012de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e0:	d3fb      	bcc.n	80012da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012e2:	f7ff ffd7 	bl	8001294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012e6:	f004 fb87 	bl	80059f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ea:	f7ff fb47 	bl	800097c <main>

080012ee <LoopForever>:

LoopForever:
    b LoopForever
 80012ee:	e7fe      	b.n	80012ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012f0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012fc:	080070c0 	.word	0x080070c0
  ldr r2, =_sbss
 8001300:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001304:	2000089c 	.word	0x2000089c

08001308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC1_2_IRQHandler>
	...

0800130c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_Init+0x28>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_Init+0x28>)
 8001316:	f043 0310 	orr.w	r3, r3, #16
 800131a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 f94f 	bl	80015c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001322:	2000      	movs	r0, #0
 8001324:	f000 f808 	bl	8001338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001328:	f7ff fe1e 	bl	8000f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40022000 	.word	0x40022000

08001338 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x54>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x58>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f967 	bl	800162a <HAL_SYSTICK_Config>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e00e      	b.n	8001384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d80a      	bhi.n	8001382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001374:	f000 f92f 	bl	80015d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <HAL_InitTick+0x5c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e000      	b.n	8001384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000000 	.word	0x20000000
 8001390:	20000008 	.word	0x20000008
 8001394:	20000004 	.word	0x20000004

08001398 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_IncTick+0x20>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_IncTick+0x24>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_IncTick+0x24>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000008 	.word	0x20000008
 80013bc:	20000684 	.word	0x20000684

080013c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_GetTick+0x14>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000684 	.word	0x20000684

080013d8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e0:	f7ff ffee 	bl	80013c0 <HAL_GetTick>
 80013e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013f0:	d005      	beq.n	80013fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <HAL_Delay+0x44>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013fe:	bf00      	nop
 8001400:	f7ff ffde 	bl	80013c0 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	429a      	cmp	r2, r3
 800140e:	d8f7      	bhi.n	8001400 <HAL_Delay+0x28>
  {
  }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000008 	.word	0x20000008

08001420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800143c:	4013      	ands	r3, r2
 800143e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800144c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001452:	4a04      	ldr	r2, [pc, #16]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	60d3      	str	r3, [r2, #12]
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <__NVIC_GetPriorityGrouping+0x18>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	f003 0307 	and.w	r3, r3, #7
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	2b00      	cmp	r3, #0
 8001494:	db0b      	blt.n	80014ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	f003 021f 	and.w	r2, r3, #31
 800149c:	4907      	ldr	r1, [pc, #28]	; (80014bc <__NVIC_EnableIRQ+0x38>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	095b      	lsrs	r3, r3, #5
 80014a4:	2001      	movs	r0, #1
 80014a6:	fa00 f202 	lsl.w	r2, r0, r2
 80014aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000e100 	.word	0xe000e100

080014c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	db0a      	blt.n	80014ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	490c      	ldr	r1, [pc, #48]	; (800150c <__NVIC_SetPriority+0x4c>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	0112      	lsls	r2, r2, #4
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	440b      	add	r3, r1
 80014e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e8:	e00a      	b.n	8001500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4908      	ldr	r1, [pc, #32]	; (8001510 <__NVIC_SetPriority+0x50>)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	3b04      	subs	r3, #4
 80014f8:	0112      	lsls	r2, r2, #4
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	440b      	add	r3, r1
 80014fe:	761a      	strb	r2, [r3, #24]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000e100 	.word	0xe000e100
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f1c3 0307 	rsb	r3, r3, #7
 800152e:	2b04      	cmp	r3, #4
 8001530:	bf28      	it	cs
 8001532:	2304      	movcs	r3, #4
 8001534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3304      	adds	r3, #4
 800153a:	2b06      	cmp	r3, #6
 800153c:	d902      	bls.n	8001544 <NVIC_EncodePriority+0x30>
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3b03      	subs	r3, #3
 8001542:	e000      	b.n	8001546 <NVIC_EncodePriority+0x32>
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800155c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43d9      	mvns	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	4313      	orrs	r3, r2
         );
}
 800156e:	4618      	mov	r0, r3
 8001570:	3724      	adds	r7, #36	; 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800158c:	d301      	bcc.n	8001592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158e:	2301      	movs	r3, #1
 8001590:	e00f      	b.n	80015b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <SysTick_Config+0x40>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159a:	210f      	movs	r1, #15
 800159c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015a0:	f7ff ff8e 	bl	80014c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <SysTick_Config+0x40>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015aa:	4b04      	ldr	r3, [pc, #16]	; (80015bc <SysTick_Config+0x40>)
 80015ac:	2207      	movs	r2, #7
 80015ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	e000e010 	.word	0xe000e010

080015c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff29 	bl	8001420 <__NVIC_SetPriorityGrouping>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e8:	f7ff ff3e 	bl	8001468 <__NVIC_GetPriorityGrouping>
 80015ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	6978      	ldr	r0, [r7, #20]
 80015f4:	f7ff ff8e 	bl	8001514 <NVIC_EncodePriority>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff5d 	bl	80014c0 <__NVIC_SetPriority>
}
 8001606:	bf00      	nop
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff31 	bl	8001484 <__NVIC_EnableIRQ>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ffa2 	bl	800157c <SysTick_Config>
 8001638:	4603      	mov	r3, r0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001650:	2b02      	cmp	r3, #2
 8001652:	d008      	beq.n	8001666 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2204      	movs	r2, #4
 8001658:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e020      	b.n	80016a8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 020e 	bic.w	r2, r2, #14
 8001674:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0201 	bic.w	r2, r2, #1
 8001684:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168e:	2101      	movs	r1, #1
 8001690:	fa01 f202 	lsl.w	r2, r1, r2
 8001694:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d005      	beq.n	80016d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2204      	movs	r2, #4
 80016ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	e027      	b.n	8001726 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 020e 	bic.w	r2, r2, #14
 80016e4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0201 	bic.w	r2, r2, #1
 80016f4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fe:	2101      	movs	r1, #1
 8001700:	fa01 f202 	lsl.w	r2, r1, r2
 8001704:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	4798      	blx	r3
    } 
  }
  return status;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173e:	e14e      	b.n	80019de <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	2101      	movs	r1, #1
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	fa01 f303 	lsl.w	r3, r1, r3
 800174c:	4013      	ands	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 8140 	beq.w	80019d8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	2b01      	cmp	r3, #1
 8001762:	d005      	beq.n	8001770 <HAL_GPIO_Init+0x40>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d130      	bne.n	80017d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a6:	2201      	movs	r2, #1
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	f003 0201 	and.w	r2, r3, #1
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d017      	beq.n	800180e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	2203      	movs	r2, #3
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d123      	bne.n	8001862 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	08da      	lsrs	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3208      	adds	r2, #8
 8001822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001826:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	220f      	movs	r2, #15
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	691a      	ldr	r2, [r3, #16]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	08da      	lsrs	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3208      	adds	r2, #8
 800185c:	6939      	ldr	r1, [r7, #16]
 800185e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2203      	movs	r2, #3
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 0203 	and.w	r2, r3, #3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 809a 	beq.w	80019d8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a4:	4b55      	ldr	r3, [pc, #340]	; (80019fc <HAL_GPIO_Init+0x2cc>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a54      	ldr	r2, [pc, #336]	; (80019fc <HAL_GPIO_Init+0x2cc>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b52      	ldr	r3, [pc, #328]	; (80019fc <HAL_GPIO_Init+0x2cc>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018bc:	4a50      	ldr	r2, [pc, #320]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	3302      	adds	r3, #2
 80018c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	220f      	movs	r2, #15
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018e6:	d013      	beq.n	8001910 <HAL_GPIO_Init+0x1e0>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a46      	ldr	r2, [pc, #280]	; (8001a04 <HAL_GPIO_Init+0x2d4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d00d      	beq.n	800190c <HAL_GPIO_Init+0x1dc>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a45      	ldr	r2, [pc, #276]	; (8001a08 <HAL_GPIO_Init+0x2d8>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d007      	beq.n	8001908 <HAL_GPIO_Init+0x1d8>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a44      	ldr	r2, [pc, #272]	; (8001a0c <HAL_GPIO_Init+0x2dc>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d101      	bne.n	8001904 <HAL_GPIO_Init+0x1d4>
 8001900:	2303      	movs	r3, #3
 8001902:	e006      	b.n	8001912 <HAL_GPIO_Init+0x1e2>
 8001904:	2305      	movs	r3, #5
 8001906:	e004      	b.n	8001912 <HAL_GPIO_Init+0x1e2>
 8001908:	2302      	movs	r3, #2
 800190a:	e002      	b.n	8001912 <HAL_GPIO_Init+0x1e2>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <HAL_GPIO_Init+0x1e2>
 8001910:	2300      	movs	r3, #0
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	f002 0203 	and.w	r2, r2, #3
 8001918:	0092      	lsls	r2, r2, #2
 800191a:	4093      	lsls	r3, r2
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001922:	4937      	ldr	r1, [pc, #220]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	3302      	adds	r3, #2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001930:	4b37      	ldr	r3, [pc, #220]	; (8001a10 <HAL_GPIO_Init+0x2e0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001954:	4a2e      	ldr	r2, [pc, #184]	; (8001a10 <HAL_GPIO_Init+0x2e0>)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800195a:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <HAL_GPIO_Init+0x2e0>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800197e:	4a24      	ldr	r2, [pc, #144]	; (8001a10 <HAL_GPIO_Init+0x2e0>)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001984:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <HAL_GPIO_Init+0x2e0>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	43db      	mvns	r3, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019a8:	4a19      	ldr	r2, [pc, #100]	; (8001a10 <HAL_GPIO_Init+0x2e0>)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <HAL_GPIO_Init+0x2e0>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019d2:	4a0f      	ldr	r2, [pc, #60]	; (8001a10 <HAL_GPIO_Init+0x2e0>)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	3301      	adds	r3, #1
 80019dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	fa22 f303 	lsr.w	r3, r2, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f47f aea9 	bne.w	8001740 <HAL_GPIO_Init+0x10>
  }
}
 80019ee:	bf00      	nop
 80019f0:	bf00      	nop
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010000 	.word	0x40010000
 8001a04:	48000400 	.word	0x48000400
 8001a08:	48000800 	.word	0x48000800
 8001a0c:	48000c00 	.word	0x48000c00
 8001a10:	40010400 	.word	0x40010400

08001a14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	887b      	ldrh	r3, [r7, #2]
 8001a26:	4013      	ands	r3, r2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d002      	beq.n	8001a32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	73fb      	strb	r3, [r7, #15]
 8001a30:	e001      	b.n	8001a36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	807b      	strh	r3, [r7, #2]
 8001a50:	4613      	mov	r3, r2
 8001a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a54:	787b      	ldrb	r3, [r7, #1]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a5a:	887a      	ldrh	r2, [r7, #2]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a60:	e002      	b.n	8001a68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a80:	695a      	ldr	r2, [r3, #20]
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d006      	beq.n	8001a98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a8a:	4a05      	ldr	r2, [pc, #20]	; (8001aa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fc5e 	bl	8000354 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40010400 	.word	0x40010400

08001aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ab4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f001 b823 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ace:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 817d 	beq.w	8001dda <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ae0:	4bbc      	ldr	r3, [pc, #752]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d00c      	beq.n	8001b06 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aec:	4bb9      	ldr	r3, [pc, #740]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 030c 	and.w	r3, r3, #12
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d15c      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x10e>
 8001af8:	4bb6      	ldr	r3, [pc, #728]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b04:	d155      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x10e>
 8001b06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b0a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b1a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	095b      	lsrs	r3, r3, #5
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d102      	bne.n	8001b38 <HAL_RCC_OscConfig+0x94>
 8001b32:	4ba8      	ldr	r3, [pc, #672]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	e015      	b.n	8001b64 <HAL_RCC_OscConfig+0xc0>
 8001b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b3c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b50:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b54:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001b58:	fa93 f3a3 	rbit	r3, r3
 8001b5c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001b60:	4b9c      	ldr	r3, [pc, #624]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b68:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001b6c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b70:	fa92 f2a2 	rbit	r2, r2
 8001b74:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001b78:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001b7c:	fab2 f282 	clz	r2, r2
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	f042 0220 	orr.w	r2, r2, #32
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	f002 021f 	and.w	r2, r2, #31
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 811f 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x334>
 8001b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 8116 	bne.w	8001dd8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	f000 bfaf 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x12e>
 8001bc4:	4b83      	ldr	r3, [pc, #524]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a82      	ldr	r2, [pc, #520]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	e036      	b.n	8001c40 <HAL_RCC_OscConfig+0x19c>
 8001bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x158>
 8001be2:	4b7c      	ldr	r3, [pc, #496]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a7b      	ldr	r2, [pc, #492]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b79      	ldr	r3, [pc, #484]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a78      	ldr	r2, [pc, #480]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e021      	b.n	8001c40 <HAL_RCC_OscConfig+0x19c>
 8001bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x184>
 8001c0e:	4b71      	ldr	r3, [pc, #452]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a70      	ldr	r2, [pc, #448]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b6e      	ldr	r3, [pc, #440]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a6d      	ldr	r2, [pc, #436]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e00b      	b.n	8001c40 <HAL_RCC_OscConfig+0x19c>
 8001c28:	4b6a      	ldr	r3, [pc, #424]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a69      	ldr	r2, [pc, #420]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b67      	ldr	r3, [pc, #412]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a66      	ldr	r2, [pc, #408]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c3e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c40:	4b64      	ldr	r3, [pc, #400]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	f023 020f 	bic.w	r2, r3, #15
 8001c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	495f      	ldr	r1, [pc, #380]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d059      	beq.n	8001d1e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6a:	f7ff fba9 	bl	80013c0 <HAL_GetTick>
 8001c6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	e00a      	b.n	8001c8a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c74:	f7ff fba4 	bl	80013c0 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b64      	cmp	r3, #100	; 0x64
 8001c82:	d902      	bls.n	8001c8a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	f000 bf43 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
 8001c8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c8e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001c9e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	095b      	lsrs	r3, r3, #5
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d102      	bne.n	8001cbc <HAL_RCC_OscConfig+0x218>
 8001cb6:	4b47      	ldr	r3, [pc, #284]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	e015      	b.n	8001ce8 <HAL_RCC_OscConfig+0x244>
 8001cbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cc0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001cd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cd4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001cd8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001ce4:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cec:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001cf0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001cf4:	fa92 f2a2 	rbit	r2, r2
 8001cf8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001cfc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001d00:	fab2 f282 	clz	r2, r2
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	f042 0220 	orr.w	r2, r2, #32
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	f002 021f 	and.w	r2, r2, #31
 8001d10:	2101      	movs	r1, #1
 8001d12:	fa01 f202 	lsl.w	r2, r1, r2
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0ab      	beq.n	8001c74 <HAL_RCC_OscConfig+0x1d0>
 8001d1c:	e05d      	b.n	8001dda <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1e:	f7ff fb4f 	bl	80013c0 <HAL_GetTick>
 8001d22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	e00a      	b.n	8001d3e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff fb4a 	bl	80013c0 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b64      	cmp	r3, #100	; 0x64
 8001d36:	d902      	bls.n	8001d3e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	f000 bee9 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
 8001d3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d42:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001d52:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	095b      	lsrs	r3, r3, #5
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d102      	bne.n	8001d70 <HAL_RCC_OscConfig+0x2cc>
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	e015      	b.n	8001d9c <HAL_RCC_OscConfig+0x2f8>
 8001d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d74:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d88:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d8c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001d90:	fa93 f3a3 	rbit	r3, r3
 8001d94:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001d98:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001da0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001da4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001da8:	fa92 f2a2 	rbit	r2, r2
 8001dac:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001db0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001db4:	fab2 f282 	clz	r2, r2
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	f042 0220 	orr.w	r2, r2, #32
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	f002 021f 	and.w	r2, r2, #31
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1ab      	bne.n	8001d28 <HAL_RCC_OscConfig+0x284>
 8001dd0:	e003      	b.n	8001dda <HAL_RCC_OscConfig+0x336>
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 817d 	beq.w	80020ea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001df0:	4ba6      	ldr	r3, [pc, #664]	; (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00b      	beq.n	8001e14 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dfc:	4ba3      	ldr	r3, [pc, #652]	; (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d172      	bne.n	8001eee <HAL_RCC_OscConfig+0x44a>
 8001e08:	4ba0      	ldr	r3, [pc, #640]	; (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d16c      	bne.n	8001eee <HAL_RCC_OscConfig+0x44a>
 8001e14:	2302      	movs	r3, #2
 8001e16:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001e1e:	fa93 f3a3 	rbit	r3, r3
 8001e22:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001e26:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	095b      	lsrs	r3, r3, #5
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d102      	bne.n	8001e44 <HAL_RCC_OscConfig+0x3a0>
 8001e3e:	4b93      	ldr	r3, [pc, #588]	; (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	e013      	b.n	8001e6c <HAL_RCC_OscConfig+0x3c8>
 8001e44:	2302      	movs	r3, #2
 8001e46:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e56:	2302      	movs	r3, #2
 8001e58:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e5c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001e68:	4b88      	ldr	r3, [pc, #544]	; (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001e72:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e76:	fa92 f2a2 	rbit	r2, r2
 8001e7a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001e7e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001e82:	fab2 f282 	clz	r2, r2
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	f042 0220 	orr.w	r2, r2, #32
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	f002 021f 	and.w	r2, r2, #31
 8001e92:	2101      	movs	r1, #1
 8001e94:	fa01 f202 	lsl.w	r2, r1, r2
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00a      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x410>
 8001e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d002      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	f000 be2e 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb4:	4b75      	ldr	r3, [pc, #468]	; (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	21f8      	movs	r1, #248	; 0xf8
 8001eca:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ed2:	fa91 f1a1 	rbit	r1, r1
 8001ed6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001eda:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001ede:	fab1 f181 	clz	r1, r1
 8001ee2:	b2c9      	uxtb	r1, r1
 8001ee4:	408b      	lsls	r3, r1
 8001ee6:	4969      	ldr	r1, [pc, #420]	; (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eec:	e0fd      	b.n	80020ea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8088 	beq.w	8002010 <HAL_RCC_OscConfig+0x56c>
 8001f00:	2301      	movs	r3, #1
 8001f02:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001f12:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	461a      	mov	r2, r3
 8001f28:	2301      	movs	r3, #1
 8001f2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fa48 	bl	80013c0 <HAL_GetTick>
 8001f30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f34:	e00a      	b.n	8001f4c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f36:	f7ff fa43 	bl	80013c0 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d902      	bls.n	8001f4c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	f000 bde2 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001f5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	095b      	lsrs	r3, r3, #5
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d102      	bne.n	8001f7c <HAL_RCC_OscConfig+0x4d8>
 8001f76:	4b45      	ldr	r3, [pc, #276]	; (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	e013      	b.n	8001fa4 <HAL_RCC_OscConfig+0x500>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f8e:	2302      	movs	r3, #2
 8001f90:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f94:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001fa0:	4b3a      	ldr	r3, [pc, #232]	; (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001faa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001fae:	fa92 f2a2 	rbit	r2, r2
 8001fb2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001fb6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001fba:	fab2 f282 	clz	r2, r2
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	f042 0220 	orr.w	r2, r2, #32
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	f002 021f 	and.w	r2, r2, #31
 8001fca:	2101      	movs	r1, #1
 8001fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0af      	beq.n	8001f36 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd6:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	21f8      	movs	r1, #248	; 0xf8
 8001fec:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ff4:	fa91 f1a1 	rbit	r1, r1
 8001ff8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001ffc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002000:	fab1 f181 	clz	r1, r1
 8002004:	b2c9      	uxtb	r1, r1
 8002006:	408b      	lsls	r3, r1
 8002008:	4920      	ldr	r1, [pc, #128]	; (800208c <HAL_RCC_OscConfig+0x5e8>)
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]
 800200e:	e06c      	b.n	80020ea <HAL_RCC_OscConfig+0x646>
 8002010:	2301      	movs	r3, #1
 8002012:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002022:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002026:	fab3 f383 	clz	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002030:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	461a      	mov	r2, r3
 8002038:	2300      	movs	r3, #0
 800203a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7ff f9c0 	bl	80013c0 <HAL_GetTick>
 8002040:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002044:	e00a      	b.n	800205c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002046:	f7ff f9bb 	bl	80013c0 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d902      	bls.n	800205c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	f000 bd5a 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
 800205c:	2302      	movs	r3, #2
 800205e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800206e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	095b      	lsrs	r3, r3, #5
 800207a:	b2db      	uxtb	r3, r3
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d104      	bne.n	8002090 <HAL_RCC_OscConfig+0x5ec>
 8002086:	4b01      	ldr	r3, [pc, #4]	; (800208c <HAL_RCC_OscConfig+0x5e8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	e015      	b.n	80020b8 <HAL_RCC_OscConfig+0x614>
 800208c:	40021000 	.word	0x40021000
 8002090:	2302      	movs	r3, #2
 8002092:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80020a2:	2302      	movs	r3, #2
 80020a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80020a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80020b4:	4bc8      	ldr	r3, [pc, #800]	; (80023d8 <HAL_RCC_OscConfig+0x934>)
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	2202      	movs	r2, #2
 80020ba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80020be:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80020c2:	fa92 f2a2 	rbit	r2, r2
 80020c6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80020ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80020ce:	fab2 f282 	clz	r2, r2
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	f042 0220 	orr.w	r2, r2, #32
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	f002 021f 	and.w	r2, r2, #31
 80020de:	2101      	movs	r1, #1
 80020e0:	fa01 f202 	lsl.w	r2, r1, r2
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1ad      	bne.n	8002046 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8110 	beq.w	8002320 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002104:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d079      	beq.n	8002204 <HAL_RCC_OscConfig+0x760>
 8002110:	2301      	movs	r3, #1
 8002112:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002126:	fab3 f383 	clz	r3, r3
 800212a:	b2db      	uxtb	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	4bab      	ldr	r3, [pc, #684]	; (80023dc <HAL_RCC_OscConfig+0x938>)
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	461a      	mov	r2, r3
 8002136:	2301      	movs	r3, #1
 8002138:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213a:	f7ff f941 	bl	80013c0 <HAL_GetTick>
 800213e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002142:	e00a      	b.n	800215a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002144:	f7ff f93c 	bl	80013c0 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d902      	bls.n	800215a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	f000 bcdb 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
 800215a:	2302      	movs	r3, #2
 800215c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800216c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002170:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002174:	2202      	movs	r2, #2
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	fa93 f2a3 	rbit	r2, r3
 8002186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002198:	2202      	movs	r2, #2
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	fa93 f2a3 	rbit	r2, r3
 80021aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b4:	4b88      	ldr	r3, [pc, #544]	; (80023d8 <HAL_RCC_OscConfig+0x934>)
 80021b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021c0:	2102      	movs	r1, #2
 80021c2:	6019      	str	r1, [r3, #0]
 80021c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	fa93 f1a3 	rbit	r1, r3
 80021d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80021da:	6019      	str	r1, [r3, #0]
  return result;
 80021dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0a0      	beq.n	8002144 <HAL_RCC_OscConfig+0x6a0>
 8002202:	e08d      	b.n	8002320 <HAL_RCC_OscConfig+0x87c>
 8002204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002208:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002214:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	fa93 f2a3 	rbit	r2, r3
 800221e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002222:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002226:	601a      	str	r2, [r3, #0]
  return result;
 8002228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002230:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	461a      	mov	r2, r3
 800223a:	4b68      	ldr	r3, [pc, #416]	; (80023dc <HAL_RCC_OscConfig+0x938>)
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	461a      	mov	r2, r3
 8002242:	2300      	movs	r3, #0
 8002244:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002246:	f7ff f8bb 	bl	80013c0 <HAL_GetTick>
 800224a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224e:	e00a      	b.n	8002266 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002250:	f7ff f8b6 	bl	80013c0 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d902      	bls.n	8002266 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	f000 bc55 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
 8002266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800226e:	2202      	movs	r2, #2
 8002270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002276:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	fa93 f2a3 	rbit	r2, r3
 8002280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002284:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002292:	2202      	movs	r2, #2
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	fa93 f2a3 	rbit	r2, r3
 80022a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022b6:	2202      	movs	r2, #2
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	fa93 f2a3 	rbit	r2, r3
 80022c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80022d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d2:	4b41      	ldr	r3, [pc, #260]	; (80023d8 <HAL_RCC_OscConfig+0x934>)
 80022d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80022de:	2102      	movs	r1, #2
 80022e0:	6019      	str	r1, [r3, #0]
 80022e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	fa93 f1a3 	rbit	r1, r3
 80022f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80022f8:	6019      	str	r1, [r3, #0]
  return result;
 80022fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	2101      	movs	r1, #1
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d197      	bne.n	8002250 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002324:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 81a1 	beq.w	8002678 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233c:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <HAL_RCC_OscConfig+0x934>)
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d116      	bne.n	8002376 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002348:	4b23      	ldr	r3, [pc, #140]	; (80023d8 <HAL_RCC_OscConfig+0x934>)
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	4a22      	ldr	r2, [pc, #136]	; (80023d8 <HAL_RCC_OscConfig+0x934>)
 800234e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002352:	61d3      	str	r3, [r2, #28]
 8002354:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <HAL_RCC_OscConfig+0x934>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800235c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002360:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800236e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002370:	2301      	movs	r3, #1
 8002372:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002376:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <HAL_RCC_OscConfig+0x93c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d11a      	bne.n	80023b8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002382:	4b17      	ldr	r3, [pc, #92]	; (80023e0 <HAL_RCC_OscConfig+0x93c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a16      	ldr	r2, [pc, #88]	; (80023e0 <HAL_RCC_OscConfig+0x93c>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238e:	f7ff f817 	bl	80013c0 <HAL_GetTick>
 8002392:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002396:	e009      	b.n	80023ac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002398:	f7ff f812 	bl	80013c0 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b64      	cmp	r3, #100	; 0x64
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e3b1      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ac:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <HAL_RCC_OscConfig+0x93c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0ef      	beq.n	8002398 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d10d      	bne.n	80023e4 <HAL_RCC_OscConfig+0x940>
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <HAL_RCC_OscConfig+0x934>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4a02      	ldr	r2, [pc, #8]	; (80023d8 <HAL_RCC_OscConfig+0x934>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6213      	str	r3, [r2, #32]
 80023d4:	e03c      	b.n	8002450 <HAL_RCC_OscConfig+0x9ac>
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	10908120 	.word	0x10908120
 80023e0:	40007000 	.word	0x40007000
 80023e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10c      	bne.n	800240e <HAL_RCC_OscConfig+0x96a>
 80023f4:	4bc1      	ldr	r3, [pc, #772]	; (80026fc <HAL_RCC_OscConfig+0xc58>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4ac0      	ldr	r2, [pc, #768]	; (80026fc <HAL_RCC_OscConfig+0xc58>)
 80023fa:	f023 0301 	bic.w	r3, r3, #1
 80023fe:	6213      	str	r3, [r2, #32]
 8002400:	4bbe      	ldr	r3, [pc, #760]	; (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4abd      	ldr	r2, [pc, #756]	; (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002406:	f023 0304 	bic.w	r3, r3, #4
 800240a:	6213      	str	r3, [r2, #32]
 800240c:	e020      	b.n	8002450 <HAL_RCC_OscConfig+0x9ac>
 800240e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002412:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2b05      	cmp	r3, #5
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x994>
 800241e:	4bb7      	ldr	r3, [pc, #732]	; (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4ab6      	ldr	r2, [pc, #728]	; (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	6213      	str	r3, [r2, #32]
 800242a:	4bb4      	ldr	r3, [pc, #720]	; (80026fc <HAL_RCC_OscConfig+0xc58>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4ab3      	ldr	r2, [pc, #716]	; (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6213      	str	r3, [r2, #32]
 8002436:	e00b      	b.n	8002450 <HAL_RCC_OscConfig+0x9ac>
 8002438:	4bb0      	ldr	r3, [pc, #704]	; (80026fc <HAL_RCC_OscConfig+0xc58>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4aaf      	ldr	r2, [pc, #700]	; (80026fc <HAL_RCC_OscConfig+0xc58>)
 800243e:	f023 0301 	bic.w	r3, r3, #1
 8002442:	6213      	str	r3, [r2, #32]
 8002444:	4bad      	ldr	r3, [pc, #692]	; (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4aac      	ldr	r2, [pc, #688]	; (80026fc <HAL_RCC_OscConfig+0xc58>)
 800244a:	f023 0304 	bic.w	r3, r3, #4
 800244e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002454:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 8081 	beq.w	8002564 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002462:	f7fe ffad 	bl	80013c0 <HAL_GetTick>
 8002466:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246a:	e00b      	b.n	8002484 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246c:	f7fe ffa8 	bl	80013c0 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f241 3288 	movw	r2, #5000	; 0x1388
 800247c:	4293      	cmp	r3, r2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e345      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
 8002484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002488:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800248c:	2202      	movs	r2, #2
 800248e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002494:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	fa93 f2a3 	rbit	r2, r3
 800249e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80024b0:	2202      	movs	r2, #2
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fa93 f2a3 	rbit	r2, r3
 80024c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80024ca:	601a      	str	r2, [r3, #0]
  return result;
 80024cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80024d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	095b      	lsrs	r3, r3, #5
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d102      	bne.n	80024f0 <HAL_RCC_OscConfig+0xa4c>
 80024ea:	4b84      	ldr	r3, [pc, #528]	; (80026fc <HAL_RCC_OscConfig+0xc58>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	e013      	b.n	8002518 <HAL_RCC_OscConfig+0xa74>
 80024f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80024f8:	2202      	movs	r2, #2
 80024fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002500:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	fa93 f2a3 	rbit	r2, r3
 800250a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	4b79      	ldr	r3, [pc, #484]	; (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800251c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002520:	2102      	movs	r1, #2
 8002522:	6011      	str	r1, [r2, #0]
 8002524:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002528:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	fa92 f1a2 	rbit	r1, r2
 8002532:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002536:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800253a:	6011      	str	r1, [r2, #0]
  return result;
 800253c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002540:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	fab2 f282 	clz	r2, r2
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	f002 021f 	and.w	r2, r2, #31
 8002556:	2101      	movs	r1, #1
 8002558:	fa01 f202 	lsl.w	r2, r1, r2
 800255c:	4013      	ands	r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d084      	beq.n	800246c <HAL_RCC_OscConfig+0x9c8>
 8002562:	e07f      	b.n	8002664 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002564:	f7fe ff2c 	bl	80013c0 <HAL_GetTick>
 8002568:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256c:	e00b      	b.n	8002586 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800256e:	f7fe ff27 	bl	80013c0 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e2c4      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
 8002586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800258e:	2202      	movs	r2, #2
 8002590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002596:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	fa93 f2a3 	rbit	r2, r3
 80025a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80025b2:	2202      	movs	r2, #2
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	fa93 f2a3 	rbit	r2, r3
 80025c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80025cc:	601a      	str	r2, [r3, #0]
  return result;
 80025ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80025d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f043 0302 	orr.w	r3, r3, #2
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d102      	bne.n	80025f2 <HAL_RCC_OscConfig+0xb4e>
 80025ec:	4b43      	ldr	r3, [pc, #268]	; (80026fc <HAL_RCC_OscConfig+0xc58>)
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	e013      	b.n	800261a <HAL_RCC_OscConfig+0xb76>
 80025f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80025fa:	2202      	movs	r2, #2
 80025fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002602:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	fa93 f2a3 	rbit	r2, r3
 800260c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002610:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	4b39      	ldr	r3, [pc, #228]	; (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800261e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002622:	2102      	movs	r1, #2
 8002624:	6011      	str	r1, [r2, #0]
 8002626:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800262a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	fa92 f1a2 	rbit	r1, r2
 8002634:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002638:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800263c:	6011      	str	r1, [r2, #0]
  return result;
 800263e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002642:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	fab2 f282 	clz	r2, r2
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	f002 021f 	and.w	r2, r2, #31
 8002658:	2101      	movs	r1, #1
 800265a:	fa01 f202 	lsl.w	r2, r1, r2
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d184      	bne.n	800256e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002664:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002668:	2b01      	cmp	r3, #1
 800266a:	d105      	bne.n	8002678 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266c:	4b23      	ldr	r3, [pc, #140]	; (80026fc <HAL_RCC_OscConfig+0xc58>)
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	4a22      	ldr	r2, [pc, #136]	; (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002676:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8242 	beq.w	8002b0e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800268a:	4b1c      	ldr	r3, [pc, #112]	; (80026fc <HAL_RCC_OscConfig+0xc58>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b08      	cmp	r3, #8
 8002694:	f000 8213 	beq.w	8002abe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	f040 8162 	bne.w	800296e <HAL_RCC_OscConfig+0xeca>
 80026aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ae:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80026b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026bc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	fa93 f2a3 	rbit	r2, r3
 80026c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80026ce:	601a      	str	r2, [r3, #0]
  return result;
 80026d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80026d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026da:	fab3 f383 	clz	r3, r3
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	461a      	mov	r2, r3
 80026ec:	2300      	movs	r3, #0
 80026ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f0:	f7fe fe66 	bl	80013c0 <HAL_GetTick>
 80026f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f8:	e00c      	b.n	8002714 <HAL_RCC_OscConfig+0xc70>
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002700:	f7fe fe5e 	bl	80013c0 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e1fd      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
 8002714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002718:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800271c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002720:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002726:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	fa93 f2a3 	rbit	r2, r3
 8002730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002734:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002738:	601a      	str	r2, [r3, #0]
  return result;
 800273a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002742:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002744:	fab3 f383 	clz	r3, r3
 8002748:	b2db      	uxtb	r3, r3
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b01      	cmp	r3, #1
 8002756:	d102      	bne.n	800275e <HAL_RCC_OscConfig+0xcba>
 8002758:	4bb0      	ldr	r3, [pc, #704]	; (8002a1c <HAL_RCC_OscConfig+0xf78>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	e027      	b.n	80027ae <HAL_RCC_OscConfig+0xd0a>
 800275e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002762:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002766:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800276a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002770:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	fa93 f2a3 	rbit	r2, r3
 800277a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002788:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800278c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002796:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	fa93 f2a3 	rbit	r2, r3
 80027a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	4b9c      	ldr	r3, [pc, #624]	; (8002a1c <HAL_RCC_OscConfig+0xf78>)
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027b2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80027b6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027ba:	6011      	str	r1, [r2, #0]
 80027bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027c0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	fa92 f1a2 	rbit	r1, r2
 80027ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ce:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80027d2:	6011      	str	r1, [r2, #0]
  return result;
 80027d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027d8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	fab2 f282 	clz	r2, r2
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	f042 0220 	orr.w	r2, r2, #32
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	f002 021f 	and.w	r2, r2, #31
 80027ee:	2101      	movs	r1, #1
 80027f0:	fa01 f202 	lsl.w	r2, r1, r2
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d182      	bne.n	8002700 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027fa:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <HAL_RCC_OscConfig+0xf78>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002806:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	430b      	orrs	r3, r1
 800281c:	497f      	ldr	r1, [pc, #508]	; (8002a1c <HAL_RCC_OscConfig+0xf78>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
 8002822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002826:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800282a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800282e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002834:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	fa93 f2a3 	rbit	r2, r3
 800283e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002842:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002846:	601a      	str	r2, [r3, #0]
  return result;
 8002848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002850:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800285c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	461a      	mov	r2, r3
 8002864:	2301      	movs	r3, #1
 8002866:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7fe fdaa 	bl	80013c0 <HAL_GetTick>
 800286c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002870:	e009      	b.n	8002886 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002872:	f7fe fda5 	bl	80013c0 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e144      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
 8002886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800288e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002898:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	fa93 f2a3 	rbit	r2, r3
 80028a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80028aa:	601a      	str	r2, [r3, #0]
  return result;
 80028ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80028b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d102      	bne.n	80028d0 <HAL_RCC_OscConfig+0xe2c>
 80028ca:	4b54      	ldr	r3, [pc, #336]	; (8002a1c <HAL_RCC_OscConfig+0xf78>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	e027      	b.n	8002920 <HAL_RCC_OscConfig+0xe7c>
 80028d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80028d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	fa93 f2a3 	rbit	r2, r3
 80028ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80028fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002908:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	fa93 f2a3 	rbit	r2, r3
 8002912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002916:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	4b3f      	ldr	r3, [pc, #252]	; (8002a1c <HAL_RCC_OscConfig+0xf78>)
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002924:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002928:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800292c:	6011      	str	r1, [r2, #0]
 800292e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002932:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	fa92 f1a2 	rbit	r1, r2
 800293c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002940:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002944:	6011      	str	r1, [r2, #0]
  return result;
 8002946:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800294a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	fab2 f282 	clz	r2, r2
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	f042 0220 	orr.w	r2, r2, #32
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	f002 021f 	and.w	r2, r2, #31
 8002960:	2101      	movs	r1, #1
 8002962:	fa01 f202 	lsl.w	r2, r1, r2
 8002966:	4013      	ands	r3, r2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d082      	beq.n	8002872 <HAL_RCC_OscConfig+0xdce>
 800296c:	e0cf      	b.n	8002b0e <HAL_RCC_OscConfig+0x106a>
 800296e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002972:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002976:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800297a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002980:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	fa93 f2a3 	rbit	r2, r3
 800298a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002992:	601a      	str	r2, [r3, #0]
  return result;
 8002994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002998:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800299c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	461a      	mov	r2, r3
 80029b0:	2300      	movs	r3, #0
 80029b2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7fe fd04 	bl	80013c0 <HAL_GetTick>
 80029b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029bc:	e009      	b.n	80029d2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029be:	f7fe fcff 	bl	80013c0 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e09e      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
 80029d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80029da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	fa93 f2a3 	rbit	r2, r3
 80029ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80029f6:	601a      	str	r2, [r3, #0]
  return result;
 80029f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d104      	bne.n	8002a20 <HAL_RCC_OscConfig+0xf7c>
 8002a16:	4b01      	ldr	r3, [pc, #4]	; (8002a1c <HAL_RCC_OscConfig+0xf78>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	e029      	b.n	8002a70 <HAL_RCC_OscConfig+0xfcc>
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a24:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a32:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	fa93 f2a3 	rbit	r2, r3
 8002a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a40:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a58:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	fa93 f2a3 	rbit	r2, r3
 8002a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a66:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	4b2b      	ldr	r3, [pc, #172]	; (8002b1c <HAL_RCC_OscConfig+0x1078>)
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a74:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a7c:	6011      	str	r1, [r2, #0]
 8002a7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a82:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	fa92 f1a2 	rbit	r1, r2
 8002a8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a90:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a94:	6011      	str	r1, [r2, #0]
  return result;
 8002a96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a9a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	fab2 f282 	clz	r2, r2
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	f042 0220 	orr.w	r2, r2, #32
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	f002 021f 	and.w	r2, r2, #31
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d180      	bne.n	80029be <HAL_RCC_OscConfig+0xf1a>
 8002abc:	e027      	b.n	8002b0e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e01e      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ad2:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <HAL_RCC_OscConfig+0x1078>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ada:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ade:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d10b      	bne.n	8002b0a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002af2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002af6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000

08002b20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b09e      	sub	sp, #120	; 0x78
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e162      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b38:	4b90      	ldr	r3, [pc, #576]	; (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d910      	bls.n	8002b68 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b8d      	ldr	r3, [pc, #564]	; (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 0207 	bic.w	r2, r3, #7
 8002b4e:	498b      	ldr	r1, [pc, #556]	; (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b89      	ldr	r3, [pc, #548]	; (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e14a      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b74:	4b82      	ldr	r3, [pc, #520]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	497f      	ldr	r1, [pc, #508]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 80dc 	beq.w	8002d4c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d13c      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xf6>
 8002b9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ba0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d102      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xa6>
 8002bc0:	4b6f      	ldr	r3, [pc, #444]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	e00f      	b.n	8002be6 <HAL_RCC_ClockConfig+0xc6>
 8002bc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	667b      	str	r3, [r7, #100]	; 0x64
 8002bd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd8:	663b      	str	r3, [r7, #96]	; 0x60
 8002bda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002be2:	4b67      	ldr	r3, [pc, #412]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bea:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bee:	fa92 f2a2 	rbit	r2, r2
 8002bf2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002bf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bf6:	fab2 f282 	clz	r2, r2
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	f042 0220 	orr.w	r2, r2, #32
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	f002 021f 	and.w	r2, r2, #31
 8002c06:	2101      	movs	r1, #1
 8002c08:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d17b      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e0f3      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d13c      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x178>
 8002c1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d102      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x128>
 8002c42:	4b4f      	ldr	r3, [pc, #316]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	e00f      	b.n	8002c68 <HAL_RCC_ClockConfig+0x148>
 8002c48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c4c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	647b      	str	r3, [r7, #68]	; 0x44
 8002c56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c5a:	643b      	str	r3, [r7, #64]	; 0x40
 8002c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c64:	4b46      	ldr	r3, [pc, #280]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c6c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c70:	fa92 f2a2 	rbit	r2, r2
 8002c74:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c78:	fab2 f282 	clz	r2, r2
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	f042 0220 	orr.w	r2, r2, #32
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	f002 021f 	and.w	r2, r2, #31
 8002c88:	2101      	movs	r1, #1
 8002c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d13a      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0b2      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d102      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x1a0>
 8002cba:	4b31      	ldr	r3, [pc, #196]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	e00d      	b.n	8002cdc <HAL_RCC_ClockConfig+0x1bc>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ccc:	2302      	movs	r3, #2
 8002cce:	623b      	str	r3, [r7, #32]
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	4b29      	ldr	r3, [pc, #164]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	2202      	movs	r2, #2
 8002cde:	61ba      	str	r2, [r7, #24]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	fa92 f2a2 	rbit	r2, r2
 8002ce6:	617a      	str	r2, [r7, #20]
  return result;
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	fab2 f282 	clz	r2, r2
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	f042 0220 	orr.w	r2, r2, #32
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	f002 021f 	and.w	r2, r2, #31
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e079      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d0a:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f023 0203 	bic.w	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	491a      	ldr	r1, [pc, #104]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d1c:	f7fe fb50 	bl	80013c0 <HAL_GetTick>
 8002d20:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d24:	f7fe fb4c 	bl	80013c0 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e061      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3a:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 020c 	and.w	r2, r3, #12
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d1eb      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d214      	bcs.n	8002d84 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 0207 	bic.w	r2, r3, #7
 8002d62:	4906      	ldr	r1, [pc, #24]	; (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e040      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
 8002d7c:	40022000 	.word	0x40022000
 8002d80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d90:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <HAL_RCC_ClockConfig+0x2e8>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	491a      	ldr	r1, [pc, #104]	; (8002e08 <HAL_RCC_ClockConfig+0x2e8>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dae:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <HAL_RCC_ClockConfig+0x2e8>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4912      	ldr	r1, [pc, #72]	; (8002e08 <HAL_RCC_ClockConfig+0x2e8>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002dc2:	f000 f829 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8002dc6:	4601      	mov	r1, r0
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <HAL_RCC_ClockConfig+0x2e8>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dd0:	22f0      	movs	r2, #240	; 0xf0
 8002dd2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	fa92 f2a2 	rbit	r2, r2
 8002dda:	60fa      	str	r2, [r7, #12]
  return result;
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	fab2 f282 	clz	r2, r2
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	40d3      	lsrs	r3, r2
 8002de6:	4a09      	ldr	r2, [pc, #36]	; (8002e0c <HAL_RCC_ClockConfig+0x2ec>)
 8002de8:	5cd3      	ldrb	r3, [r2, r3]
 8002dea:	fa21 f303 	lsr.w	r3, r1, r3
 8002dee:	4a08      	ldr	r2, [pc, #32]	; (8002e10 <HAL_RCC_ClockConfig+0x2f0>)
 8002df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002df2:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <HAL_RCC_ClockConfig+0x2f4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe fa9e 	bl	8001338 <HAL_InitTick>
  
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3778      	adds	r7, #120	; 0x78
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	08006f68 	.word	0x08006f68
 8002e10:	20000000 	.word	0x20000000
 8002e14:	20000004 	.word	0x20000004

08002e18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b08b      	sub	sp, #44	; 0x2c
 8002e1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
 8002e22:	2300      	movs	r3, #0
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	2300      	movs	r3, #0
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002e32:	4b29      	ldr	r3, [pc, #164]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d002      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x30>
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d003      	beq.n	8002e4e <HAL_RCC_GetSysClockFreq+0x36>
 8002e46:	e03c      	b.n	8002ec2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e48:	4b24      	ldr	r3, [pc, #144]	; (8002edc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e4a:	623b      	str	r3, [r7, #32]
      break;
 8002e4c:	e03c      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e54:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002e58:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	fa92 f2a2 	rbit	r2, r2
 8002e60:	607a      	str	r2, [r7, #4]
  return result;
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	fab2 f282 	clz	r2, r2
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	40d3      	lsrs	r3, r2
 8002e6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e6e:	5cd3      	ldrb	r3, [r2, r3]
 8002e70:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e72:	4b19      	ldr	r3, [pc, #100]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	220f      	movs	r2, #15
 8002e7c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	fa92 f2a2 	rbit	r2, r2
 8002e84:	60fa      	str	r2, [r7, #12]
  return result;
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	fab2 f282 	clz	r2, r2
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	40d3      	lsrs	r3, r2
 8002e90:	4a14      	ldr	r2, [pc, #80]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e92:	5cd3      	ldrb	r3, [r2, r3]
 8002e94:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ea0:	4a0e      	ldr	r2, [pc, #56]	; (8002edc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	fb02 f303 	mul.w	r3, r2, r3
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb0:	e004      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	4a0c      	ldr	r2, [pc, #48]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002eb6:	fb02 f303 	mul.w	r3, r2, r3
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	623b      	str	r3, [r7, #32]
      break;
 8002ec0:	e002      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ec2:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ec4:	623b      	str	r3, [r7, #32]
      break;
 8002ec6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	372c      	adds	r7, #44	; 0x2c
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	007a1200 	.word	0x007a1200
 8002ee0:	08006f80 	.word	0x08006f80
 8002ee4:	08006f90 	.word	0x08006f90
 8002ee8:	003d0900 	.word	0x003d0900

08002eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ef0:	4b03      	ldr	r3, [pc, #12]	; (8002f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	20000000 	.word	0x20000000

08002f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f0a:	f7ff ffef 	bl	8002eec <HAL_RCC_GetHCLKFreq>
 8002f0e:	4601      	mov	r1, r0
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f18:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	fa92 f2a2 	rbit	r2, r2
 8002f24:	603a      	str	r2, [r7, #0]
  return result;
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	fab2 f282 	clz	r2, r2
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	40d3      	lsrs	r3, r2
 8002f30:	4a04      	ldr	r2, [pc, #16]	; (8002f44 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f32:	5cd3      	ldrb	r3, [r2, r3]
 8002f34:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40021000 	.word	0x40021000
 8002f44:	08006f78 	.word	0x08006f78

08002f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f4e:	f7ff ffcd 	bl	8002eec <HAL_RCC_GetHCLKFreq>
 8002f52:	4601      	mov	r1, r0
 8002f54:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002f5c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002f60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	fa92 f2a2 	rbit	r2, r2
 8002f68:	603a      	str	r2, [r7, #0]
  return result;
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	fab2 f282 	clz	r2, r2
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	40d3      	lsrs	r3, r2
 8002f74:	4a04      	ldr	r2, [pc, #16]	; (8002f88 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f76:	5cd3      	ldrb	r3, [r2, r3]
 8002f78:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40021000 	.word	0x40021000
 8002f88:	08006f78 	.word	0x08006f78

08002f8c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b092      	sub	sp, #72	; 0x48
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80cd 	beq.w	800314a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb0:	4b86      	ldr	r3, [pc, #536]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10e      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fbc:	4b83      	ldr	r3, [pc, #524]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	4a82      	ldr	r2, [pc, #520]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	61d3      	str	r3, [r2, #28]
 8002fc8:	4b80      	ldr	r3, [pc, #512]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fda:	4b7d      	ldr	r3, [pc, #500]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d118      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fe6:	4b7a      	ldr	r3, [pc, #488]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a79      	ldr	r2, [pc, #484]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff2:	f7fe f9e5 	bl	80013c0 <HAL_GetTick>
 8002ff6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff8:	e008      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffa:	f7fe f9e1 	bl	80013c0 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b64      	cmp	r3, #100	; 0x64
 8003006:	d901      	bls.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e0db      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300c:	4b70      	ldr	r3, [pc, #448]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003018:	4b6c      	ldr	r3, [pc, #432]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003020:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003024:	2b00      	cmp	r3, #0
 8003026:	d07d      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003030:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003032:	429a      	cmp	r2, r3
 8003034:	d076      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003036:	4b65      	ldr	r3, [pc, #404]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800303e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003040:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003044:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003048:	fa93 f3a3 	rbit	r3, r3
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003050:	fab3 f383 	clz	r3, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	4b5e      	ldr	r3, [pc, #376]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	461a      	mov	r2, r3
 8003060:	2301      	movs	r3, #1
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003068:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003074:	fab3 f383 	clz	r3, r3
 8003078:	b2db      	uxtb	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	4b55      	ldr	r3, [pc, #340]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800307e:	4413      	add	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	461a      	mov	r2, r3
 8003084:	2300      	movs	r3, #0
 8003086:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003088:	4a50      	ldr	r2, [pc, #320]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800308a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800308c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800308e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d045      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7fe f992 	bl	80013c0 <HAL_GetTick>
 800309c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309e:	e00a      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a0:	f7fe f98e 	bl	80013c0 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e086      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80030b6:	2302      	movs	r3, #2
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
 80030c2:	2302      	movs	r3, #2
 80030c4:	623b      	str	r3, [r7, #32]
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	61fb      	str	r3, [r7, #28]
  return result;
 80030ce:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d0:	fab3 f383 	clz	r3, r3
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f043 0302 	orr.w	r3, r3, #2
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d102      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80030e4:	4b39      	ldr	r3, [pc, #228]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	e007      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80030ea:	2302      	movs	r3, #2
 80030ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	4b35      	ldr	r3, [pc, #212]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	2202      	movs	r2, #2
 80030fc:	613a      	str	r2, [r7, #16]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	fa92 f2a2 	rbit	r2, r2
 8003104:	60fa      	str	r2, [r7, #12]
  return result;
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	fab2 f282 	clz	r2, r2
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	f002 021f 	and.w	r2, r2, #31
 8003118:	2101      	movs	r1, #1
 800311a:	fa01 f202 	lsl.w	r2, r1, r2
 800311e:	4013      	ands	r3, r2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0bd      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003124:	4b29      	ldr	r3, [pc, #164]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4926      	ldr	r1, [pc, #152]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003132:	4313      	orrs	r3, r2
 8003134:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003136:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800313a:	2b01      	cmp	r3, #1
 800313c:	d105      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800313e:	4b23      	ldr	r3, [pc, #140]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	4a22      	ldr	r2, [pc, #136]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003148:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003156:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	f023 0203 	bic.w	r2, r3, #3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	491a      	ldr	r1, [pc, #104]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003164:	4313      	orrs	r3, r2
 8003166:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003174:	4b15      	ldr	r3, [pc, #84]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	f023 0210 	bic.w	r2, r3, #16
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4912      	ldr	r1, [pc, #72]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003182:	4313      	orrs	r3, r2
 8003184:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318e:	2b00      	cmp	r3, #0
 8003190:	d008      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003192:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003196:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	490b      	ldr	r1, [pc, #44]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	4903      	ldr	r1, [pc, #12]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3748      	adds	r7, #72	; 0x48
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40021000 	.word	0x40021000
 80031d0:	40007000 	.word	0x40007000
 80031d4:	10908100 	.word	0x10908100

080031d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e049      	b.n	800327e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fd fed6 	bl	8000fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3304      	adds	r3, #4
 8003214:	4619      	mov	r1, r3
 8003216:	4610      	mov	r0, r2
 8003218:	f000 fb22 	bl	8003860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e049      	b.n	800332c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d106      	bne.n	80032b2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f841 	bl	8003334 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2202      	movs	r2, #2
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3304      	adds	r3, #4
 80032c2:	4619      	mov	r1, r3
 80032c4:	4610      	mov	r0, r2
 80032c6:	f000 facb 	bl	8003860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b02      	cmp	r3, #2
 800335c:	d122      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b02      	cmp	r3, #2
 800336a:	d11b      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0202 	mvn.w	r2, #2
 8003374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fa49 	bl	8003822 <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7fd f8f8 	bl	8000588 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fa4c 	bl	8003836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d122      	bne.n	80033f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d11b      	bne.n	80033f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0204 	mvn.w	r2, #4
 80033c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2202      	movs	r2, #2
 80033ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fa1f 	bl	8003822 <HAL_TIM_IC_CaptureCallback>
 80033e4:	e005      	b.n	80033f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fd f8ce 	bl	8000588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fa22 	bl	8003836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b08      	cmp	r3, #8
 8003404:	d122      	bne.n	800344c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b08      	cmp	r3, #8
 8003412:	d11b      	bne.n	800344c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0208 	mvn.w	r2, #8
 800341c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2204      	movs	r2, #4
 8003422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f9f5 	bl	8003822 <HAL_TIM_IC_CaptureCallback>
 8003438:	e005      	b.n	8003446 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fd f8a4 	bl	8000588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f9f8 	bl	8003836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b10      	cmp	r3, #16
 8003458:	d122      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b10      	cmp	r3, #16
 8003466:	d11b      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0210 	mvn.w	r2, #16
 8003470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2208      	movs	r2, #8
 8003476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f9cb 	bl	8003822 <HAL_TIM_IC_CaptureCallback>
 800348c:	e005      	b.n	800349a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fd f87a 	bl	8000588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f9ce 	bl	8003836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d10e      	bne.n	80034cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d107      	bne.n	80034cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0201 	mvn.w	r2, #1
 80034c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f9a1 	bl	800380e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d6:	2b80      	cmp	r3, #128	; 0x80
 80034d8:	d10e      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e4:	2b80      	cmp	r3, #128	; 0x80
 80034e6:	d107      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fde4 	bl	80040c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003506:	d10e      	bne.n	8003526 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003512:	2b80      	cmp	r3, #128	; 0x80
 8003514:	d107      	bne.n	8003526 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800351e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fdd7 	bl	80040d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003530:	2b40      	cmp	r3, #64	; 0x40
 8003532:	d10e      	bne.n	8003552 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353e:	2b40      	cmp	r3, #64	; 0x40
 8003540:	d107      	bne.n	8003552 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800354a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f97c 	bl	800384a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f003 0320 	and.w	r3, r3, #32
 800355c:	2b20      	cmp	r3, #32
 800355e:	d10e      	bne.n	800357e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b20      	cmp	r3, #32
 800356c:	d107      	bne.n	800357e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f06f 0220 	mvn.w	r2, #32
 8003576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 fd97 	bl	80040ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e066      	b.n	8003674 <HAL_TIM_OC_ConfigChannel+0xec>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b14      	cmp	r3, #20
 80035b2:	d857      	bhi.n	8003664 <HAL_TIM_OC_ConfigChannel+0xdc>
 80035b4:	a201      	add	r2, pc, #4	; (adr r2, 80035bc <HAL_TIM_OC_ConfigChannel+0x34>)
 80035b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ba:	bf00      	nop
 80035bc:	08003611 	.word	0x08003611
 80035c0:	08003665 	.word	0x08003665
 80035c4:	08003665 	.word	0x08003665
 80035c8:	08003665 	.word	0x08003665
 80035cc:	0800361f 	.word	0x0800361f
 80035d0:	08003665 	.word	0x08003665
 80035d4:	08003665 	.word	0x08003665
 80035d8:	08003665 	.word	0x08003665
 80035dc:	0800362d 	.word	0x0800362d
 80035e0:	08003665 	.word	0x08003665
 80035e4:	08003665 	.word	0x08003665
 80035e8:	08003665 	.word	0x08003665
 80035ec:	0800363b 	.word	0x0800363b
 80035f0:	08003665 	.word	0x08003665
 80035f4:	08003665 	.word	0x08003665
 80035f8:	08003665 	.word	0x08003665
 80035fc:	08003649 	.word	0x08003649
 8003600:	08003665 	.word	0x08003665
 8003604:	08003665 	.word	0x08003665
 8003608:	08003665 	.word	0x08003665
 800360c:	08003657 	.word	0x08003657
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68b9      	ldr	r1, [r7, #8]
 8003616:	4618      	mov	r0, r3
 8003618:	f000 f99a 	bl	8003950 <TIM_OC1_SetConfig>
      break;
 800361c:	e025      	b.n	800366a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68b9      	ldr	r1, [r7, #8]
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fa19 	bl	8003a5c <TIM_OC2_SetConfig>
      break;
 800362a:	e01e      	b.n	800366a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	4618      	mov	r0, r3
 8003634:	f000 fa92 	bl	8003b5c <TIM_OC3_SetConfig>
      break;
 8003638:	e017      	b.n	800366a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fb09 	bl	8003c58 <TIM_OC4_SetConfig>
      break;
 8003646:	e010      	b.n	800366a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68b9      	ldr	r1, [r7, #8]
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fb66 	bl	8003d20 <TIM_OC5_SetConfig>
      break;
 8003654:	e009      	b.n	800366a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68b9      	ldr	r1, [r7, #8]
 800365c:	4618      	mov	r0, r3
 800365e:	f000 fbbd 	bl	8003ddc <TIM_OC6_SetConfig>
      break;
 8003662:	e002      	b.n	800366a <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	75fb      	strb	r3, [r7, #23]
      break;
 8003668:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003672:	7dfb      	ldrb	r3, [r7, #23]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_TIM_ConfigClockSource+0x1c>
 8003694:	2302      	movs	r3, #2
 8003696:	e0b6      	b.n	8003806 <HAL_TIM_ConfigClockSource+0x18a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d4:	d03e      	beq.n	8003754 <HAL_TIM_ConfigClockSource+0xd8>
 80036d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036da:	f200 8087 	bhi.w	80037ec <HAL_TIM_ConfigClockSource+0x170>
 80036de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e2:	f000 8086 	beq.w	80037f2 <HAL_TIM_ConfigClockSource+0x176>
 80036e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ea:	d87f      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x170>
 80036ec:	2b70      	cmp	r3, #112	; 0x70
 80036ee:	d01a      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0xaa>
 80036f0:	2b70      	cmp	r3, #112	; 0x70
 80036f2:	d87b      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x170>
 80036f4:	2b60      	cmp	r3, #96	; 0x60
 80036f6:	d050      	beq.n	800379a <HAL_TIM_ConfigClockSource+0x11e>
 80036f8:	2b60      	cmp	r3, #96	; 0x60
 80036fa:	d877      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x170>
 80036fc:	2b50      	cmp	r3, #80	; 0x50
 80036fe:	d03c      	beq.n	800377a <HAL_TIM_ConfigClockSource+0xfe>
 8003700:	2b50      	cmp	r3, #80	; 0x50
 8003702:	d873      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x170>
 8003704:	2b40      	cmp	r3, #64	; 0x40
 8003706:	d058      	beq.n	80037ba <HAL_TIM_ConfigClockSource+0x13e>
 8003708:	2b40      	cmp	r3, #64	; 0x40
 800370a:	d86f      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x170>
 800370c:	2b30      	cmp	r3, #48	; 0x30
 800370e:	d064      	beq.n	80037da <HAL_TIM_ConfigClockSource+0x15e>
 8003710:	2b30      	cmp	r3, #48	; 0x30
 8003712:	d86b      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x170>
 8003714:	2b20      	cmp	r3, #32
 8003716:	d060      	beq.n	80037da <HAL_TIM_ConfigClockSource+0x15e>
 8003718:	2b20      	cmp	r3, #32
 800371a:	d867      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x170>
 800371c:	2b00      	cmp	r3, #0
 800371e:	d05c      	beq.n	80037da <HAL_TIM_ConfigClockSource+0x15e>
 8003720:	2b10      	cmp	r3, #16
 8003722:	d05a      	beq.n	80037da <HAL_TIM_ConfigClockSource+0x15e>
 8003724:	e062      	b.n	80037ec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6899      	ldr	r1, [r3, #8]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f000 fc2b 	bl	8003f90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003748:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	609a      	str	r2, [r3, #8]
      break;
 8003752:	e04f      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	6899      	ldr	r1, [r3, #8]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f000 fc14 	bl	8003f90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003776:	609a      	str	r2, [r3, #8]
      break;
 8003778:	e03c      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	6859      	ldr	r1, [r3, #4]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	461a      	mov	r2, r3
 8003788:	f000 fb88 	bl	8003e9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2150      	movs	r1, #80	; 0x50
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fbe1 	bl	8003f5a <TIM_ITRx_SetConfig>
      break;
 8003798:	e02c      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	6859      	ldr	r1, [r3, #4]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	461a      	mov	r2, r3
 80037a8:	f000 fba7 	bl	8003efa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2160      	movs	r1, #96	; 0x60
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fbd1 	bl	8003f5a <TIM_ITRx_SetConfig>
      break;
 80037b8:	e01c      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6859      	ldr	r1, [r3, #4]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	461a      	mov	r2, r3
 80037c8:	f000 fb68 	bl	8003e9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2140      	movs	r1, #64	; 0x40
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fbc1 	bl	8003f5a <TIM_ITRx_SetConfig>
      break;
 80037d8:	e00c      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4619      	mov	r1, r3
 80037e4:	4610      	mov	r0, r2
 80037e6:	f000 fbb8 	bl	8003f5a <TIM_ITRx_SetConfig>
      break;
 80037ea:	e003      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
      break;
 80037f0:	e000      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80037f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003804:	7bfb      	ldrb	r3, [r7, #15]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a32      	ldr	r2, [pc, #200]	; (800393c <TIM_Base_SetConfig+0xdc>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d007      	beq.n	8003888 <TIM_Base_SetConfig+0x28>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387e:	d003      	beq.n	8003888 <TIM_Base_SetConfig+0x28>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a2f      	ldr	r2, [pc, #188]	; (8003940 <TIM_Base_SetConfig+0xe0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d108      	bne.n	800389a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a27      	ldr	r2, [pc, #156]	; (800393c <TIM_Base_SetConfig+0xdc>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d013      	beq.n	80038ca <TIM_Base_SetConfig+0x6a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a8:	d00f      	beq.n	80038ca <TIM_Base_SetConfig+0x6a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a24      	ldr	r2, [pc, #144]	; (8003940 <TIM_Base_SetConfig+0xe0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00b      	beq.n	80038ca <TIM_Base_SetConfig+0x6a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a23      	ldr	r2, [pc, #140]	; (8003944 <TIM_Base_SetConfig+0xe4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d007      	beq.n	80038ca <TIM_Base_SetConfig+0x6a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a22      	ldr	r2, [pc, #136]	; (8003948 <TIM_Base_SetConfig+0xe8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d003      	beq.n	80038ca <TIM_Base_SetConfig+0x6a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a21      	ldr	r2, [pc, #132]	; (800394c <TIM_Base_SetConfig+0xec>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d108      	bne.n	80038dc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a0e      	ldr	r2, [pc, #56]	; (800393c <TIM_Base_SetConfig+0xdc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00b      	beq.n	8003920 <TIM_Base_SetConfig+0xc0>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a0e      	ldr	r2, [pc, #56]	; (8003944 <TIM_Base_SetConfig+0xe4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d007      	beq.n	8003920 <TIM_Base_SetConfig+0xc0>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a0d      	ldr	r2, [pc, #52]	; (8003948 <TIM_Base_SetConfig+0xe8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d003      	beq.n	8003920 <TIM_Base_SetConfig+0xc0>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a0c      	ldr	r2, [pc, #48]	; (800394c <TIM_Base_SetConfig+0xec>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d103      	bne.n	8003928 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	615a      	str	r2, [r3, #20]
}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40012c00 	.word	0x40012c00
 8003940:	40000400 	.word	0x40000400
 8003944:	40014000 	.word	0x40014000
 8003948:	40014400 	.word	0x40014400
 800394c:	40014800 	.word	0x40014800

08003950 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	f023 0201 	bic.w	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f023 0303 	bic.w	r3, r3, #3
 800398a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f023 0302 	bic.w	r3, r3, #2
 800399c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a28      	ldr	r2, [pc, #160]	; (8003a4c <TIM_OC1_SetConfig+0xfc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00b      	beq.n	80039c8 <TIM_OC1_SetConfig+0x78>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a27      	ldr	r2, [pc, #156]	; (8003a50 <TIM_OC1_SetConfig+0x100>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d007      	beq.n	80039c8 <TIM_OC1_SetConfig+0x78>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a26      	ldr	r2, [pc, #152]	; (8003a54 <TIM_OC1_SetConfig+0x104>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d003      	beq.n	80039c8 <TIM_OC1_SetConfig+0x78>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a25      	ldr	r2, [pc, #148]	; (8003a58 <TIM_OC1_SetConfig+0x108>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d10c      	bne.n	80039e2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f023 0308 	bic.w	r3, r3, #8
 80039ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f023 0304 	bic.w	r3, r3, #4
 80039e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a19      	ldr	r2, [pc, #100]	; (8003a4c <TIM_OC1_SetConfig+0xfc>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00b      	beq.n	8003a02 <TIM_OC1_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a18      	ldr	r2, [pc, #96]	; (8003a50 <TIM_OC1_SetConfig+0x100>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d007      	beq.n	8003a02 <TIM_OC1_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a17      	ldr	r2, [pc, #92]	; (8003a54 <TIM_OC1_SetConfig+0x104>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d003      	beq.n	8003a02 <TIM_OC1_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a16      	ldr	r2, [pc, #88]	; (8003a58 <TIM_OC1_SetConfig+0x108>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d111      	bne.n	8003a26 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	621a      	str	r2, [r3, #32]
}
 8003a40:	bf00      	nop
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	40014000 	.word	0x40014000
 8003a54:	40014400 	.word	0x40014400
 8003a58:	40014800 	.word	0x40014800

08003a5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	f023 0210 	bic.w	r2, r3, #16
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	021b      	lsls	r3, r3, #8
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f023 0320 	bic.w	r3, r3, #32
 8003aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a24      	ldr	r2, [pc, #144]	; (8003b4c <TIM_OC2_SetConfig+0xf0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d10d      	bne.n	8003adc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ada:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a1b      	ldr	r2, [pc, #108]	; (8003b4c <TIM_OC2_SetConfig+0xf0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d00b      	beq.n	8003afc <TIM_OC2_SetConfig+0xa0>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a1a      	ldr	r2, [pc, #104]	; (8003b50 <TIM_OC2_SetConfig+0xf4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d007      	beq.n	8003afc <TIM_OC2_SetConfig+0xa0>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a19      	ldr	r2, [pc, #100]	; (8003b54 <TIM_OC2_SetConfig+0xf8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d003      	beq.n	8003afc <TIM_OC2_SetConfig+0xa0>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a18      	ldr	r2, [pc, #96]	; (8003b58 <TIM_OC2_SetConfig+0xfc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d113      	bne.n	8003b24 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b02:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b0a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	621a      	str	r2, [r3, #32]
}
 8003b3e:	bf00      	nop
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40012c00 	.word	0x40012c00
 8003b50:	40014000 	.word	0x40014000
 8003b54:	40014400 	.word	0x40014400
 8003b58:	40014800 	.word	0x40014800

08003b5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0303 	bic.w	r3, r3, #3
 8003b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a23      	ldr	r2, [pc, #140]	; (8003c48 <TIM_OC3_SetConfig+0xec>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d10d      	bne.n	8003bda <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bd8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a1a      	ldr	r2, [pc, #104]	; (8003c48 <TIM_OC3_SetConfig+0xec>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00b      	beq.n	8003bfa <TIM_OC3_SetConfig+0x9e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a19      	ldr	r2, [pc, #100]	; (8003c4c <TIM_OC3_SetConfig+0xf0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d007      	beq.n	8003bfa <TIM_OC3_SetConfig+0x9e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a18      	ldr	r2, [pc, #96]	; (8003c50 <TIM_OC3_SetConfig+0xf4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d003      	beq.n	8003bfa <TIM_OC3_SetConfig+0x9e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a17      	ldr	r2, [pc, #92]	; (8003c54 <TIM_OC3_SetConfig+0xf8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d113      	bne.n	8003c22 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	621a      	str	r2, [r3, #32]
}
 8003c3c:	bf00      	nop
 8003c3e:	371c      	adds	r7, #28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	40014000 	.word	0x40014000
 8003c50:	40014400 	.word	0x40014400
 8003c54:	40014800 	.word	0x40014800

08003c58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	021b      	lsls	r3, r3, #8
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ca6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	031b      	lsls	r3, r3, #12
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a16      	ldr	r2, [pc, #88]	; (8003d10 <TIM_OC4_SetConfig+0xb8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00b      	beq.n	8003cd4 <TIM_OC4_SetConfig+0x7c>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a15      	ldr	r2, [pc, #84]	; (8003d14 <TIM_OC4_SetConfig+0xbc>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d007      	beq.n	8003cd4 <TIM_OC4_SetConfig+0x7c>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a14      	ldr	r2, [pc, #80]	; (8003d18 <TIM_OC4_SetConfig+0xc0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d003      	beq.n	8003cd4 <TIM_OC4_SetConfig+0x7c>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a13      	ldr	r2, [pc, #76]	; (8003d1c <TIM_OC4_SetConfig+0xc4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d109      	bne.n	8003ce8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	019b      	lsls	r3, r3, #6
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	621a      	str	r2, [r3, #32]
}
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40012c00 	.word	0x40012c00
 8003d14:	40014000 	.word	0x40014000
 8003d18:	40014400 	.word	0x40014400
 8003d1c:	40014800 	.word	0x40014800

08003d20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003d64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	041b      	lsls	r3, r3, #16
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a15      	ldr	r2, [pc, #84]	; (8003dcc <TIM_OC5_SetConfig+0xac>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00b      	beq.n	8003d92 <TIM_OC5_SetConfig+0x72>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a14      	ldr	r2, [pc, #80]	; (8003dd0 <TIM_OC5_SetConfig+0xb0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d007      	beq.n	8003d92 <TIM_OC5_SetConfig+0x72>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a13      	ldr	r2, [pc, #76]	; (8003dd4 <TIM_OC5_SetConfig+0xb4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d003      	beq.n	8003d92 <TIM_OC5_SetConfig+0x72>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a12      	ldr	r2, [pc, #72]	; (8003dd8 <TIM_OC5_SetConfig+0xb8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d109      	bne.n	8003da6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	021b      	lsls	r3, r3, #8
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	621a      	str	r2, [r3, #32]
}
 8003dc0:	bf00      	nop
 8003dc2:	371c      	adds	r7, #28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	40012c00 	.word	0x40012c00
 8003dd0:	40014000 	.word	0x40014000
 8003dd4:	40014400 	.word	0x40014400
 8003dd8:	40014800 	.word	0x40014800

08003ddc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	021b      	lsls	r3, r3, #8
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	051b      	lsls	r3, r3, #20
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a16      	ldr	r2, [pc, #88]	; (8003e8c <TIM_OC6_SetConfig+0xb0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00b      	beq.n	8003e50 <TIM_OC6_SetConfig+0x74>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a15      	ldr	r2, [pc, #84]	; (8003e90 <TIM_OC6_SetConfig+0xb4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d007      	beq.n	8003e50 <TIM_OC6_SetConfig+0x74>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <TIM_OC6_SetConfig+0xb8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d003      	beq.n	8003e50 <TIM_OC6_SetConfig+0x74>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a13      	ldr	r2, [pc, #76]	; (8003e98 <TIM_OC6_SetConfig+0xbc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d109      	bne.n	8003e64 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	029b      	lsls	r3, r3, #10
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	621a      	str	r2, [r3, #32]
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40012c00 	.word	0x40012c00
 8003e90:	40014000 	.word	0x40014000
 8003e94:	40014400 	.word	0x40014400
 8003e98:	40014800 	.word	0x40014800

08003e9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	f023 0201 	bic.w	r2, r3, #1
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f023 030a 	bic.w	r3, r3, #10
 8003ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b087      	sub	sp, #28
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	f023 0210 	bic.w	r2, r3, #16
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	031b      	lsls	r3, r3, #12
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	621a      	str	r2, [r3, #32]
}
 8003f4e:	bf00      	nop
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b085      	sub	sp, #20
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f043 0307 	orr.w	r3, r3, #7
 8003f7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	609a      	str	r2, [r3, #8]
}
 8003f84:	bf00      	nop
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003faa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	021a      	lsls	r2, r3, #8
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	609a      	str	r2, [r3, #8]
}
 8003fc4:	bf00      	nop
 8003fc6:	371c      	adds	r7, #28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e054      	b.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a24      	ldr	r2, [pc, #144]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d108      	bne.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004018:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a17      	ldr	r2, [pc, #92]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00e      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004050:	d009      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d004      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a11      	ldr	r2, [pc, #68]	; (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d10c      	bne.n	8004080 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800406c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	4313      	orrs	r3, r2
 8004076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40012c00 	.word	0x40012c00
 80040a4:	40000400 	.word	0x40000400
 80040a8:	40014000 	.word	0x40014000

080040ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e040      	b.n	800417c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fc ff76 	bl	8000ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2224      	movs	r2, #36	; 0x24
 8004114:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0201 	bic.w	r2, r2, #1
 8004124:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fd8a 	bl	8004c40 <UART_SetConfig>
 800412c:	4603      	mov	r3, r0
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e022      	b.n	800417c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 feb4 	bl	8004eac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004152:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689a      	ldr	r2, [r3, #8]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004162:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 ff3b 	bl	8004ff0 <UART_CheckIdleState>
 800417a:	4603      	mov	r3, r0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e048      	b.n	8004228 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fc ff28 	bl	8000ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2224      	movs	r2, #36	; 0x24
 80041b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0201 	bic.w	r2, r2, #1
 80041c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fd3c 	bl	8004c40 <UART_SetConfig>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e02a      	b.n	8004228 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fe66 	bl	8004eac <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80041fe:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0208 	orr.w	r2, r2, #8
 800420e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0201 	orr.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fee5 	bl	8004ff0 <UART_CheckIdleState>
 8004226:	4603      	mov	r3, r0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	; 0x28
 8004234:	af02      	add	r7, sp, #8
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	4613      	mov	r3, r2
 800423e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004244:	2b20      	cmp	r3, #32
 8004246:	f040 8082 	bne.w	800434e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <HAL_UART_Transmit+0x26>
 8004250:	88fb      	ldrh	r3, [r7, #6]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e07a      	b.n	8004350 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_UART_Transmit+0x38>
 8004264:	2302      	movs	r3, #2
 8004266:	e073      	b.n	8004350 <HAL_UART_Transmit+0x120>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2221      	movs	r2, #33	; 0x21
 800427c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800427e:	f7fd f89f 	bl	80013c0 <HAL_GetTick>
 8004282:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	88fa      	ldrh	r2, [r7, #6]
 8004288:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	88fa      	ldrh	r2, [r7, #6]
 8004290:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429c:	d108      	bne.n	80042b0 <HAL_UART_Transmit+0x80>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d104      	bne.n	80042b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	61bb      	str	r3, [r7, #24]
 80042ae:	e003      	b.n	80042b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80042c0:	e02d      	b.n	800431e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2200      	movs	r2, #0
 80042ca:	2180      	movs	r1, #128	; 0x80
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 fed8 	bl	8005082 <UART_WaitOnFlagUntilTimeout>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e039      	b.n	8004350 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10b      	bne.n	80042fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	881a      	ldrh	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042ee:	b292      	uxth	r2, r2
 80042f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	3302      	adds	r3, #2
 80042f6:	61bb      	str	r3, [r7, #24]
 80042f8:	e008      	b.n	800430c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	781a      	ldrb	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	b292      	uxth	r2, r2
 8004304:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	3301      	adds	r3, #1
 800430a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1cb      	bne.n	80042c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2200      	movs	r2, #0
 8004332:	2140      	movs	r1, #64	; 0x40
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 fea4 	bl	8005082 <UART_WaitOnFlagUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e005      	b.n	8004350 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2220      	movs	r2, #32
 8004348:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	e000      	b.n	8004350 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800434e:	2302      	movs	r3, #2
  }
}
 8004350:	4618      	mov	r0, r3
 8004352:	3720      	adds	r7, #32
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08a      	sub	sp, #40	; 0x28
 800435c:	af02      	add	r7, sp, #8
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	4613      	mov	r3, r2
 8004366:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800436c:	2b20      	cmp	r3, #32
 800436e:	f040 80bf 	bne.w	80044f0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <HAL_UART_Receive+0x26>
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e0b7      	b.n	80044f2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_UART_Receive+0x38>
 800438c:	2302      	movs	r3, #2
 800438e:	e0b0      	b.n	80044f2 <HAL_UART_Receive+0x19a>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2222      	movs	r2, #34	; 0x22
 80043a4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ac:	f7fd f808 	bl	80013c0 <HAL_GetTick>
 80043b0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	88fa      	ldrh	r2, [r7, #6]
 80043b6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	88fa      	ldrh	r2, [r7, #6]
 80043be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ca:	d10e      	bne.n	80043ea <HAL_UART_Receive+0x92>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d105      	bne.n	80043e0 <HAL_UART_Receive+0x88>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80043da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043de:	e02d      	b.n	800443c <HAL_UART_Receive+0xe4>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	22ff      	movs	r2, #255	; 0xff
 80043e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043e8:	e028      	b.n	800443c <HAL_UART_Receive+0xe4>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10d      	bne.n	800440e <HAL_UART_Receive+0xb6>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d104      	bne.n	8004404 <HAL_UART_Receive+0xac>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	22ff      	movs	r2, #255	; 0xff
 80043fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004402:	e01b      	b.n	800443c <HAL_UART_Receive+0xe4>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	227f      	movs	r2, #127	; 0x7f
 8004408:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800440c:	e016      	b.n	800443c <HAL_UART_Receive+0xe4>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004416:	d10d      	bne.n	8004434 <HAL_UART_Receive+0xdc>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d104      	bne.n	800442a <HAL_UART_Receive+0xd2>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	227f      	movs	r2, #127	; 0x7f
 8004424:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004428:	e008      	b.n	800443c <HAL_UART_Receive+0xe4>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	223f      	movs	r2, #63	; 0x3f
 800442e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004432:	e003      	b.n	800443c <HAL_UART_Receive+0xe4>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004442:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444c:	d108      	bne.n	8004460 <HAL_UART_Receive+0x108>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d104      	bne.n	8004460 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	e003      	b.n	8004468 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004464:	2300      	movs	r3, #0
 8004466:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004470:	e033      	b.n	80044da <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2200      	movs	r2, #0
 800447a:	2120      	movs	r1, #32
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 fe00 	bl	8005082 <UART_WaitOnFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e032      	b.n	80044f2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10c      	bne.n	80044ac <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004498:	b29a      	uxth	r2, r3
 800449a:	8a7b      	ldrh	r3, [r7, #18]
 800449c:	4013      	ands	r3, r2
 800449e:	b29a      	uxth	r2, r3
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	3302      	adds	r3, #2
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	e00d      	b.n	80044c8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	8a7b      	ldrh	r3, [r7, #18]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	4013      	ands	r3, r2
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	3301      	adds	r3, #1
 80044c6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1c5      	bne.n	8004472 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2220      	movs	r2, #32
 80044ea:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	e000      	b.n	80044f2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80044f0:	2302      	movs	r3, #2
  }
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3720      	adds	r7, #32
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b0ba      	sub	sp, #232	; 0xe8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004522:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004526:	f640 030f 	movw	r3, #2063	; 0x80f
 800452a:	4013      	ands	r3, r2
 800452c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004530:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004534:	2b00      	cmp	r3, #0
 8004536:	d115      	bne.n	8004564 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00f      	beq.n	8004564 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d009      	beq.n	8004564 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 82a3 	beq.w	8004aa0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	4798      	blx	r3
      }
      return;
 8004562:	e29d      	b.n	8004aa0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8117 	beq.w	800479c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800456e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800457a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800457e:	4b85      	ldr	r3, [pc, #532]	; (8004794 <HAL_UART_IRQHandler+0x298>)
 8004580:	4013      	ands	r3, r2
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 810a 	beq.w	800479c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d011      	beq.n	80045b8 <HAL_UART_IRQHandler+0xbc>
 8004594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00b      	beq.n	80045b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2201      	movs	r2, #1
 80045a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ae:	f043 0201 	orr.w	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d011      	beq.n	80045e8 <HAL_UART_IRQHandler+0xec>
 80045c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00b      	beq.n	80045e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2202      	movs	r2, #2
 80045d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045de:	f043 0204 	orr.w	r2, r3, #4
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d011      	beq.n	8004618 <HAL_UART_IRQHandler+0x11c>
 80045f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00b      	beq.n	8004618 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2204      	movs	r2, #4
 8004606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800460e:	f043 0202 	orr.w	r2, r3, #2
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b00      	cmp	r3, #0
 8004622:	d017      	beq.n	8004654 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d105      	bne.n	800463c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004634:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00b      	beq.n	8004654 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2208      	movs	r2, #8
 8004642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800464a:	f043 0208 	orr.w	r2, r3, #8
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800465c:	2b00      	cmp	r3, #0
 800465e:	d012      	beq.n	8004686 <HAL_UART_IRQHandler+0x18a>
 8004660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004664:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00c      	beq.n	8004686 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004674:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800467c:	f043 0220 	orr.w	r2, r3, #32
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 8209 	beq.w	8004aa4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00d      	beq.n	80046ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800469e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046a2:	f003 0320 	and.w	r3, r3, #32
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d007      	beq.n	80046ba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ce:	2b40      	cmp	r3, #64	; 0x40
 80046d0:	d005      	beq.n	80046de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d04f      	beq.n	800477e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fd93 	bl	800520a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	d141      	bne.n	8004776 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3308      	adds	r3, #8
 80046f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004708:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800470c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004710:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3308      	adds	r3, #8
 800471a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800471e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004722:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800472a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800472e:	e841 2300 	strex	r3, r2, [r1]
 8004732:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004736:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1d9      	bne.n	80046f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	2b00      	cmp	r3, #0
 8004744:	d013      	beq.n	800476e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474a:	4a13      	ldr	r2, [pc, #76]	; (8004798 <HAL_UART_IRQHandler+0x29c>)
 800474c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004752:	4618      	mov	r0, r3
 8004754:	f7fc ffae 	bl	80016b4 <HAL_DMA_Abort_IT>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d017      	beq.n	800478e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004768:	4610      	mov	r0, r2
 800476a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800476c:	e00f      	b.n	800478e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f9ac 	bl	8004acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004774:	e00b      	b.n	800478e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f9a8 	bl	8004acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800477c:	e007      	b.n	800478e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f9a4 	bl	8004acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800478c:	e18a      	b.n	8004aa4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478e:	bf00      	nop
    return;
 8004790:	e188      	b.n	8004aa4 <HAL_UART_IRQHandler+0x5a8>
 8004792:	bf00      	nop
 8004794:	04000120 	.word	0x04000120
 8004798:	080052d1 	.word	0x080052d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	f040 8143 	bne.w	8004a2c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 813c 	beq.w	8004a2c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 8135 	beq.w	8004a2c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2210      	movs	r2, #16
 80047c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d4:	2b40      	cmp	r3, #64	; 0x40
 80047d6:	f040 80b1 	bne.w	800493c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 815c 	beq.w	8004aa8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047fa:	429a      	cmp	r2, r3
 80047fc:	f080 8154 	bcs.w	8004aa8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004806:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	2b20      	cmp	r3, #32
 8004812:	f000 8085 	beq.w	8004920 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004822:	e853 3f00 	ldrex	r3, [r3]
 8004826:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800482a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800482e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004832:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004840:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004844:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004848:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800484c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004850:	e841 2300 	strex	r3, r2, [r1]
 8004854:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004858:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1da      	bne.n	8004816 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3308      	adds	r3, #8
 8004866:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800486a:	e853 3f00 	ldrex	r3, [r3]
 800486e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004870:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004872:	f023 0301 	bic.w	r3, r3, #1
 8004876:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3308      	adds	r3, #8
 8004880:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004884:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004888:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800488c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004890:	e841 2300 	strex	r3, r2, [r1]
 8004894:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e1      	bne.n	8004860 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3308      	adds	r3, #8
 80048a2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3308      	adds	r3, #8
 80048bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048c0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048c8:	e841 2300 	strex	r3, r2, [r1]
 80048cc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e3      	bne.n	800489c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2220      	movs	r2, #32
 80048d8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048f0:	f023 0310 	bic.w	r3, r3, #16
 80048f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	461a      	mov	r2, r3
 80048fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004902:	65bb      	str	r3, [r7, #88]	; 0x58
 8004904:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004908:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e4      	bne.n	80048e0 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491a:	4618      	mov	r0, r3
 800491c:	f7fc fe91 	bl	8001642 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800492c:	b29b      	uxth	r3, r3
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	b29b      	uxth	r3, r3
 8004932:	4619      	mov	r1, r3
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f8d3 	bl	8004ae0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800493a:	e0b5      	b.n	8004aa8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004948:	b29b      	uxth	r3, r3
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80a7 	beq.w	8004aac <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800495e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 80a2 	beq.w	8004aac <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004978:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800497c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800498a:	647b      	str	r3, [r7, #68]	; 0x44
 800498c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004990:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1e4      	bne.n	8004968 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3308      	adds	r3, #8
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	e853 3f00 	ldrex	r3, [r3]
 80049ac:	623b      	str	r3, [r7, #32]
   return(result);
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	f023 0301 	bic.w	r3, r3, #1
 80049b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3308      	adds	r3, #8
 80049be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049c2:	633a      	str	r2, [r7, #48]	; 0x30
 80049c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ca:	e841 2300 	strex	r3, r2, [r1]
 80049ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1e3      	bne.n	800499e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2220      	movs	r2, #32
 80049da:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f023 0310 	bic.w	r3, r3, #16
 80049fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a0a:	61fb      	str	r3, [r7, #28]
 8004a0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	69b9      	ldr	r1, [r7, #24]
 8004a10:	69fa      	ldr	r2, [r7, #28]
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	617b      	str	r3, [r7, #20]
   return(result);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e4      	bne.n	80049e8 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a22:	4619      	mov	r1, r3
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f85b 	bl	8004ae0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a2a:	e03f      	b.n	8004aac <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00e      	beq.n	8004a56 <HAL_UART_IRQHandler+0x55a>
 8004a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fc7e 	bl	8005350 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a54:	e02d      	b.n	8004ab2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00e      	beq.n	8004a80 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d008      	beq.n	8004a80 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d01c      	beq.n	8004ab0 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	4798      	blx	r3
    }
    return;
 8004a7e:	e017      	b.n	8004ab0 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d012      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x5b6>
 8004a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00c      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fc2f 	bl	80052fc <UART_EndTransmit_IT>
    return;
 8004a9e:	e008      	b.n	8004ab2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004aa0:	bf00      	nop
 8004aa2:	e006      	b.n	8004ab2 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004aa4:	bf00      	nop
 8004aa6:	e004      	b.n	8004ab2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004aa8:	bf00      	nop
 8004aaa:	e002      	b.n	8004ab2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004aac:	bf00      	nop
 8004aae:	e000      	b.n	8004ab2 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004ab0:	bf00      	nop
  }

}
 8004ab2:	37e8      	adds	r7, #232	; 0xe8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b08f      	sub	sp, #60	; 0x3c
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_HalfDuplex_EnableTransmitter+0x16>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	e040      	b.n	8004b90 <HAL_HalfDuplex_EnableTransmitter+0x98>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2224      	movs	r2, #36	; 0x24
 8004b1a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	e853 3f00 	ldrex	r3, [r3]
 8004b28:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	f023 030c 	bic.w	r3, r3, #12
 8004b30:	637b      	str	r3, [r7, #52]	; 0x34
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b3c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1e6      	bne.n	8004b1c <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	e853 3f00 	ldrex	r3, [r3]
 8004b5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f043 0308 	orr.w	r3, r3, #8
 8004b62:	633b      	str	r3, [r7, #48]	; 0x30
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	61bb      	str	r3, [r7, #24]
 8004b6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b70:	6979      	ldr	r1, [r7, #20]
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	e841 2300 	strex	r3, r2, [r1]
 8004b78:	613b      	str	r3, [r7, #16]
   return(result);
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e6      	bne.n	8004b4e <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	373c      	adds	r7, #60	; 0x3c
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b08f      	sub	sp, #60	; 0x3c
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <HAL_HalfDuplex_EnableReceiver+0x16>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e040      	b.n	8004c34 <HAL_HalfDuplex_EnableReceiver+0x98>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2224      	movs	r2, #36	; 0x24
 8004bbe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	e853 3f00 	ldrex	r3, [r3]
 8004bcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	f023 030c 	bic.w	r3, r3, #12
 8004bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004be0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004be6:	e841 2300 	strex	r3, r2, [r1]
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1e6      	bne.n	8004bc0 <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f043 0304 	orr.w	r3, r3, #4
 8004c06:	633b      	str	r3, [r7, #48]	; 0x30
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	61bb      	str	r3, [r7, #24]
 8004c12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6979      	ldr	r1, [r7, #20]
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e6      	bne.n	8004bf2 <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	373c      	adds	r7, #60	; 0x3c
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	4b8a      	ldr	r3, [pc, #552]	; (8004e94 <UART_SetConfig+0x254>)
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6812      	ldr	r2, [r2, #0]
 8004c72:	6979      	ldr	r1, [r7, #20]
 8004c74:	430b      	orrs	r3, r1
 8004c76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a78      	ldr	r2, [pc, #480]	; (8004e98 <UART_SetConfig+0x258>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d120      	bne.n	8004cfe <UART_SetConfig+0xbe>
 8004cbc:	4b77      	ldr	r3, [pc, #476]	; (8004e9c <UART_SetConfig+0x25c>)
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	f003 0303 	and.w	r3, r3, #3
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d817      	bhi.n	8004cf8 <UART_SetConfig+0xb8>
 8004cc8:	a201      	add	r2, pc, #4	; (adr r2, 8004cd0 <UART_SetConfig+0x90>)
 8004cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cce:	bf00      	nop
 8004cd0:	08004ce1 	.word	0x08004ce1
 8004cd4:	08004ced 	.word	0x08004ced
 8004cd8:	08004cf3 	.word	0x08004cf3
 8004cdc:	08004ce7 	.word	0x08004ce7
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	e01d      	b.n	8004d22 <UART_SetConfig+0xe2>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	77fb      	strb	r3, [r7, #31]
 8004cea:	e01a      	b.n	8004d22 <UART_SetConfig+0xe2>
 8004cec:	2304      	movs	r3, #4
 8004cee:	77fb      	strb	r3, [r7, #31]
 8004cf0:	e017      	b.n	8004d22 <UART_SetConfig+0xe2>
 8004cf2:	2308      	movs	r3, #8
 8004cf4:	77fb      	strb	r3, [r7, #31]
 8004cf6:	e014      	b.n	8004d22 <UART_SetConfig+0xe2>
 8004cf8:	2310      	movs	r3, #16
 8004cfa:	77fb      	strb	r3, [r7, #31]
 8004cfc:	e011      	b.n	8004d22 <UART_SetConfig+0xe2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a67      	ldr	r2, [pc, #412]	; (8004ea0 <UART_SetConfig+0x260>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d102      	bne.n	8004d0e <UART_SetConfig+0xce>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	77fb      	strb	r3, [r7, #31]
 8004d0c:	e009      	b.n	8004d22 <UART_SetConfig+0xe2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a64      	ldr	r2, [pc, #400]	; (8004ea4 <UART_SetConfig+0x264>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d102      	bne.n	8004d1e <UART_SetConfig+0xde>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	77fb      	strb	r3, [r7, #31]
 8004d1c:	e001      	b.n	8004d22 <UART_SetConfig+0xe2>
 8004d1e:	2310      	movs	r3, #16
 8004d20:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d2a:	d15b      	bne.n	8004de4 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004d2c:	7ffb      	ldrb	r3, [r7, #31]
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d827      	bhi.n	8004d82 <UART_SetConfig+0x142>
 8004d32:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <UART_SetConfig+0xf8>)
 8004d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d38:	08004d5d 	.word	0x08004d5d
 8004d3c:	08004d65 	.word	0x08004d65
 8004d40:	08004d6d 	.word	0x08004d6d
 8004d44:	08004d83 	.word	0x08004d83
 8004d48:	08004d73 	.word	0x08004d73
 8004d4c:	08004d83 	.word	0x08004d83
 8004d50:	08004d83 	.word	0x08004d83
 8004d54:	08004d83 	.word	0x08004d83
 8004d58:	08004d7b 	.word	0x08004d7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d5c:	f7fe f8d2 	bl	8002f04 <HAL_RCC_GetPCLK1Freq>
 8004d60:	61b8      	str	r0, [r7, #24]
        break;
 8004d62:	e013      	b.n	8004d8c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d64:	f7fe f8f0 	bl	8002f48 <HAL_RCC_GetPCLK2Freq>
 8004d68:	61b8      	str	r0, [r7, #24]
        break;
 8004d6a:	e00f      	b.n	8004d8c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d6c:	4b4e      	ldr	r3, [pc, #312]	; (8004ea8 <UART_SetConfig+0x268>)
 8004d6e:	61bb      	str	r3, [r7, #24]
        break;
 8004d70:	e00c      	b.n	8004d8c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d72:	f7fe f851 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8004d76:	61b8      	str	r0, [r7, #24]
        break;
 8004d78:	e008      	b.n	8004d8c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d7e:	61bb      	str	r3, [r7, #24]
        break;
 8004d80:	e004      	b.n	8004d8c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	77bb      	strb	r3, [r7, #30]
        break;
 8004d8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d074      	beq.n	8004e7c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	005a      	lsls	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	085b      	lsrs	r3, r3, #1
 8004d9c:	441a      	add	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	2b0f      	cmp	r3, #15
 8004dae:	d916      	bls.n	8004dde <UART_SetConfig+0x19e>
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db6:	d212      	bcs.n	8004dde <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	f023 030f 	bic.w	r3, r3, #15
 8004dc0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	085b      	lsrs	r3, r3, #1
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	89fb      	ldrh	r3, [r7, #14]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	89fa      	ldrh	r2, [r7, #14]
 8004dda:	60da      	str	r2, [r3, #12]
 8004ddc:	e04e      	b.n	8004e7c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	77bb      	strb	r3, [r7, #30]
 8004de2:	e04b      	b.n	8004e7c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004de4:	7ffb      	ldrb	r3, [r7, #31]
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d827      	bhi.n	8004e3a <UART_SetConfig+0x1fa>
 8004dea:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <UART_SetConfig+0x1b0>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e15 	.word	0x08004e15
 8004df4:	08004e1d 	.word	0x08004e1d
 8004df8:	08004e25 	.word	0x08004e25
 8004dfc:	08004e3b 	.word	0x08004e3b
 8004e00:	08004e2b 	.word	0x08004e2b
 8004e04:	08004e3b 	.word	0x08004e3b
 8004e08:	08004e3b 	.word	0x08004e3b
 8004e0c:	08004e3b 	.word	0x08004e3b
 8004e10:	08004e33 	.word	0x08004e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e14:	f7fe f876 	bl	8002f04 <HAL_RCC_GetPCLK1Freq>
 8004e18:	61b8      	str	r0, [r7, #24]
        break;
 8004e1a:	e013      	b.n	8004e44 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e1c:	f7fe f894 	bl	8002f48 <HAL_RCC_GetPCLK2Freq>
 8004e20:	61b8      	str	r0, [r7, #24]
        break;
 8004e22:	e00f      	b.n	8004e44 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e24:	4b20      	ldr	r3, [pc, #128]	; (8004ea8 <UART_SetConfig+0x268>)
 8004e26:	61bb      	str	r3, [r7, #24]
        break;
 8004e28:	e00c      	b.n	8004e44 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e2a:	f7fd fff5 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8004e2e:	61b8      	str	r0, [r7, #24]
        break;
 8004e30:	e008      	b.n	8004e44 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e36:	61bb      	str	r3, [r7, #24]
        break;
 8004e38:	e004      	b.n	8004e44 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	77bb      	strb	r3, [r7, #30]
        break;
 8004e42:	bf00      	nop
    }

    if (pclk != 0U)
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d018      	beq.n	8004e7c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	085a      	lsrs	r2, r3, #1
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	441a      	add	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	2b0f      	cmp	r3, #15
 8004e64:	d908      	bls.n	8004e78 <UART_SetConfig+0x238>
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e6c:	d204      	bcs.n	8004e78 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	60da      	str	r2, [r3, #12]
 8004e76:	e001      	b.n	8004e7c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e88:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	efff69f3 	.word	0xefff69f3
 8004e98:	40013800 	.word	0x40013800
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	40004400 	.word	0x40004400
 8004ea4:	40004800 	.word	0x40004800
 8004ea8:	007a1200 	.word	0x007a1200

08004eac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	f003 0320 	and.w	r3, r3, #32
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01a      	beq.n	8004fc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004faa:	d10a      	bne.n	8004fc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	605a      	str	r2, [r3, #4]
  }
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005000:	f7fc f9de 	bl	80013c0 <HAL_GetTick>
 8005004:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	2b08      	cmp	r3, #8
 8005012:	d10e      	bne.n	8005032 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005014:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f82d 	bl	8005082 <UART_WaitOnFlagUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e023      	b.n	800507a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b04      	cmp	r3, #4
 800503e:	d10e      	bne.n	800505e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f817 	bl	8005082 <UART_WaitOnFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e00d      	b.n	800507a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2220      	movs	r2, #32
 8005068:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b09c      	sub	sp, #112	; 0x70
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	603b      	str	r3, [r7, #0]
 800508e:	4613      	mov	r3, r2
 8005090:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005092:	e0a5      	b.n	80051e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800509a:	f000 80a1 	beq.w	80051e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800509e:	f7fc f98f 	bl	80013c0 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d302      	bcc.n	80050b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80050ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d13e      	bne.n	8005132 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050bc:	e853 3f00 	ldrex	r3, [r3]
 80050c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050c8:	667b      	str	r3, [r7, #100]	; 0x64
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80050e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1e6      	bne.n	80050b4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3308      	adds	r3, #8
 80050ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f8:	f023 0301 	bic.w	r3, r3, #1
 80050fc:	663b      	str	r3, [r7, #96]	; 0x60
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3308      	adds	r3, #8
 8005104:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005106:	64ba      	str	r2, [r7, #72]	; 0x48
 8005108:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800510c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e5      	bne.n	80050e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e067      	b.n	8005202 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d04f      	beq.n	80051e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800514a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800514e:	d147      	bne.n	80051e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005158:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	e853 3f00 	ldrex	r3, [r3]
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800516e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	461a      	mov	r2, r3
 8005176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005178:	637b      	str	r3, [r7, #52]	; 0x34
 800517a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800517e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e6      	bne.n	800515a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3308      	adds	r3, #8
 8005192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	613b      	str	r3, [r7, #16]
   return(result);
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f023 0301 	bic.w	r3, r3, #1
 80051a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3308      	adds	r3, #8
 80051aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051ac:	623a      	str	r2, [r7, #32]
 80051ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	69f9      	ldr	r1, [r7, #28]
 80051b2:	6a3a      	ldr	r2, [r7, #32]
 80051b4:	e841 2300 	strex	r3, r2, [r1]
 80051b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e5      	bne.n	800518c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2220      	movs	r2, #32
 80051c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2220      	movs	r2, #32
 80051ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e010      	b.n	8005202 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	69da      	ldr	r2, [r3, #28]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	4013      	ands	r3, r2
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	bf0c      	ite	eq
 80051f0:	2301      	moveq	r3, #1
 80051f2:	2300      	movne	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	461a      	mov	r2, r3
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	f43f af4a 	beq.w	8005094 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3770      	adds	r7, #112	; 0x70
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800520a:	b480      	push	{r7}
 800520c:	b095      	sub	sp, #84	; 0x54
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521a:	e853 3f00 	ldrex	r3, [r3]
 800521e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	461a      	mov	r2, r3
 800522e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005230:	643b      	str	r3, [r7, #64]	; 0x40
 8005232:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005234:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005236:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005238:	e841 2300 	strex	r3, r2, [r1]
 800523c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800523e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e6      	bne.n	8005212 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3308      	adds	r3, #8
 800524a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	e853 3f00 	ldrex	r3, [r3]
 8005252:	61fb      	str	r3, [r7, #28]
   return(result);
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f023 0301 	bic.w	r3, r3, #1
 800525a:	64bb      	str	r3, [r7, #72]	; 0x48
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3308      	adds	r3, #8
 8005262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005264:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800526a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800526c:	e841 2300 	strex	r3, r2, [r1]
 8005270:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1e5      	bne.n	8005244 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800527c:	2b01      	cmp	r3, #1
 800527e:	d118      	bne.n	80052b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	60bb      	str	r3, [r7, #8]
   return(result);
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f023 0310 	bic.w	r3, r3, #16
 8005294:	647b      	str	r3, [r7, #68]	; 0x44
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800529e:	61bb      	str	r3, [r7, #24]
 80052a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	6979      	ldr	r1, [r7, #20]
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	e841 2300 	strex	r3, r2, [r1]
 80052aa:	613b      	str	r3, [r7, #16]
   return(result);
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1e6      	bne.n	8005280 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2220      	movs	r2, #32
 80052b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80052c4:	bf00      	nop
 80052c6:	3754      	adds	r7, #84	; 0x54
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f7ff fbec 	bl	8004acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052f4:	bf00      	nop
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	60bb      	str	r3, [r7, #8]
   return(result);
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005318:	61fb      	str	r3, [r7, #28]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	61bb      	str	r3, [r7, #24]
 8005324:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	6979      	ldr	r1, [r7, #20]
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	613b      	str	r3, [r7, #16]
   return(result);
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e6      	bne.n	8005304 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2220      	movs	r2, #32
 800533a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff fbb8 	bl	8004ab8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005348:	bf00      	nop
 800534a:	3720      	adds	r7, #32
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af00      	add	r7, sp, #0
 800536a:	4603      	mov	r3, r0
 800536c:	71fb      	strb	r3, [r7, #7]
 800536e:	460b      	mov	r3, r1
 8005370:	71bb      	strb	r3, [r7, #6]
 8005372:	4613      	mov	r3, r2
 8005374:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8005376:	797b      	ldrb	r3, [r7, #5]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d901      	bls.n	8005380 <tmc_fillCRC8Table+0x1c>
		return 0;
 800537c:	2300      	movs	r3, #0
 800537e:	e09e      	b.n	80054be <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 8005380:	797a      	ldrb	r2, [r7, #5]
 8005382:	4951      	ldr	r1, [pc, #324]	; (80054c8 <tmc_fillCRC8Table+0x164>)
 8005384:	4613      	mov	r3, r2
 8005386:	01db      	lsls	r3, r3, #7
 8005388:	4413      	add	r3, r2
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	440b      	add	r3, r1
 800538e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005392:	79fa      	ldrb	r2, [r7, #7]
 8005394:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 8005396:	797a      	ldrb	r2, [r7, #5]
 8005398:	494b      	ldr	r1, [pc, #300]	; (80054c8 <tmc_fillCRC8Table+0x164>)
 800539a:	4613      	mov	r3, r2
 800539c:	01db      	lsls	r3, r3, #7
 800539e:	4413      	add	r3, r2
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	440b      	add	r3, r1
 80053a4:	f203 1301 	addw	r3, r3, #257	; 0x101
 80053a8:	79ba      	ldrb	r2, [r7, #6]
 80053aa:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 80053ac:	797a      	ldrb	r2, [r7, #5]
 80053ae:	4613      	mov	r3, r2
 80053b0:	01db      	lsls	r3, r3, #7
 80053b2:	4413      	add	r3, r2
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	4a44      	ldr	r2, [pc, #272]	; (80054c8 <tmc_fillCRC8Table+0x164>)
 80053b8:	4413      	add	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c2:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 80053c4:	4b41      	ldr	r3, [pc, #260]	; (80054cc <tmc_fillCRC8Table+0x168>)
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	e074      	b.n	80054b4 <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 80053ca:	79bb      	ldrb	r3, [r7, #6]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d004      	beq.n	80053da <tmc_fillCRC8Table+0x76>
 80053d0:	6978      	ldr	r0, [r7, #20]
 80053d2:	f000 f8f7 	bl	80055c4 <flipBitsInBytes>
 80053d6:	4603      	mov	r3, r0
 80053d8:	e000      	b.n	80053dc <tmc_fillCRC8Table+0x78>
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 80053de:	2300      	movs	r3, #0
 80053e0:	613b      	str	r3, [r7, #16]
 80053e2:	e035      	b.n	8005450 <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	0fdb      	lsrs	r3, r3, #31
 80053e8:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <tmc_fillCRC8Table+0x9a>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	e000      	b.n	8005400 <tmc_fillCRC8Table+0x9c>
 80053fe:	2300      	movs	r3, #0
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	4053      	eors	r3, r2
 8005404:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <tmc_fillCRC8Table+0xb2>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	021b      	lsls	r3, r3, #8
 8005414:	e000      	b.n	8005418 <tmc_fillCRC8Table+0xb4>
 8005416:	2300      	movs	r3, #0
 8005418:	69fa      	ldr	r2, [r7, #28]
 800541a:	4053      	eors	r3, r2
 800541c:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <tmc_fillCRC8Table+0xca>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	041b      	lsls	r3, r3, #16
 800542c:	e000      	b.n	8005430 <tmc_fillCRC8Table+0xcc>
 800542e:	2300      	movs	r3, #0
 8005430:	69fa      	ldr	r2, [r7, #28]
 8005432:	4053      	eors	r3, r2
 8005434:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 8005436:	7afb      	ldrb	r3, [r7, #11]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <tmc_fillCRC8Table+0xde>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	061b      	lsls	r3, r3, #24
 8005440:	e000      	b.n	8005444 <tmc_fillCRC8Table+0xe0>
 8005442:	2300      	movs	r3, #0
 8005444:	69fa      	ldr	r2, [r7, #28]
 8005446:	4053      	eors	r3, r2
 8005448:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	3301      	adds	r3, #1
 800544e:	613b      	str	r3, [r7, #16]
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	2b07      	cmp	r3, #7
 8005454:	ddc6      	ble.n	80053e4 <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 8005456:	79bb      	ldrb	r3, [r7, #6]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d004      	beq.n	8005466 <tmc_fillCRC8Table+0x102>
 800545c:	69f8      	ldr	r0, [r7, #28]
 800545e:	f000 f8b1 	bl	80055c4 <flipBitsInBytes>
 8005462:	4603      	mov	r3, r0
 8005464:	e000      	b.n	8005468 <tmc_fillCRC8Table+0x104>
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	61ba      	str	r2, [r7, #24]
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	0a1b      	lsrs	r3, r3, #8
 800547a:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	61ba      	str	r2, [r7, #24]
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	b2d2      	uxtb	r2, r2
 8005486:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	0a1b      	lsrs	r3, r3, #8
 800548c:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	61ba      	str	r2, [r7, #24]
 8005494:	69fa      	ldr	r2, [r7, #28]
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	0a1b      	lsrs	r3, r3, #8
 800549e:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	61ba      	str	r2, [r7, #24]
 80054a6:	69fa      	ldr	r2, [r7, #28]
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	4a06      	ldr	r2, [pc, #24]	; (80054d0 <tmc_fillCRC8Table+0x16c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d186      	bne.n	80053ca <tmc_fillCRC8Table+0x66>
	}

	return 1;
 80054bc:	2301      	movs	r3, #1
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3720      	adds	r7, #32
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000688 	.word	0x20000688
 80054cc:	03020100 	.word	0x03020100
 80054d0:	04030200 	.word	0x04030200

080054d4 <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	4613      	mov	r3, r2
 80054e0:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 80054e2:	2300      	movs	r3, #0
 80054e4:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d901      	bls.n	80054f0 <tmc_CRC8+0x1c>
		return 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	e02c      	b.n	800554a <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 80054f0:	79fa      	ldrb	r2, [r7, #7]
 80054f2:	4613      	mov	r3, r2
 80054f4:	01db      	lsls	r3, r3, #7
 80054f6:	4413      	add	r3, r2
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	4a16      	ldr	r2, [pc, #88]	; (8005554 <tmc_CRC8+0x80>)
 80054fc:	4413      	add	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]

	while(bytes--)
 8005500:	e00b      	b.n	800551a <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	60fa      	str	r2, [r7, #12]
 8005508:	781a      	ldrb	r2, [r3, #0]
 800550a:	7dfb      	ldrb	r3, [r7, #23]
 800550c:	4053      	eors	r3, r2
 800550e:	b2db      	uxtb	r3, r3
 8005510:	461a      	mov	r2, r3
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	4413      	add	r3, r2
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	1e5a      	subs	r2, r3, #1
 800551e:	60ba      	str	r2, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1ee      	bne.n	8005502 <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 8005524:	79fa      	ldrb	r2, [r7, #7]
 8005526:	490b      	ldr	r1, [pc, #44]	; (8005554 <tmc_CRC8+0x80>)
 8005528:	4613      	mov	r3, r2
 800552a:	01db      	lsls	r3, r3, #7
 800552c:	4413      	add	r3, r2
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	440b      	add	r3, r1
 8005532:	f203 1301 	addw	r3, r3, #257	; 0x101
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d005      	beq.n	8005548 <tmc_CRC8+0x74>
 800553c:	7dfb      	ldrb	r3, [r7, #23]
 800553e:	4618      	mov	r0, r3
 8005540:	f000 f80a 	bl	8005558 <flipByte>
 8005544:	4603      	mov	r3, r0
 8005546:	e000      	b.n	800554a <tmc_CRC8+0x76>
 8005548:	7dfb      	ldrb	r3, [r7, #23]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	20000688 	.word	0x20000688

08005558 <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 8005562:	79fb      	ldrb	r3, [r7, #7]
 8005564:	085b      	lsrs	r3, r3, #1
 8005566:	b2db      	uxtb	r3, r3
 8005568:	b25b      	sxtb	r3, r3
 800556a:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800556e:	b25a      	sxtb	r2, r3
 8005570:	79fb      	ldrb	r3, [r7, #7]
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	b25b      	sxtb	r3, r3
 8005576:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 800557a:	b25b      	sxtb	r3, r3
 800557c:	4313      	orrs	r3, r2
 800557e:	b25b      	sxtb	r3, r3
 8005580:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	089b      	lsrs	r3, r3, #2
 8005586:	b2db      	uxtb	r3, r3
 8005588:	b25b      	sxtb	r3, r3
 800558a:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800558e:	b25a      	sxtb	r2, r3
 8005590:	79fb      	ldrb	r3, [r7, #7]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	b25b      	sxtb	r3, r3
 8005596:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 800559a:	b25b      	sxtb	r3, r3
 800559c:	4313      	orrs	r3, r2
 800559e:	b25b      	sxtb	r3, r3
 80055a0:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	091b      	lsrs	r3, r3, #4
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	b25a      	sxtb	r2, r3
 80055aa:	79fb      	ldrb	r3, [r7, #7]
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	b25b      	sxtb	r3, r3
 80055b0:	4313      	orrs	r3, r2
 80055b2:	b25b      	sxtb	r3, r3
 80055b4:	71fb      	strb	r3, [r7, #7]

	return value;
 80055b6:	79fb      	ldrb	r3, [r7, #7]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	085b      	lsrs	r3, r3, #1
 80055d0:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 80055dc:	4313      	orrs	r3, r2
 80055de:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	089b      	lsrs	r3, r3, #2
 80055e4:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 80055f0:	4313      	orrs	r3, r2
 80055f2:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	091b      	lsrs	r3, r3, #4
 80055f8:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8005604:	4313      	orrs	r3, r2
 8005606:	607b      	str	r3, [r7, #4]

	return value;
 8005608:	687b      	ldr	r3, [r7, #4]
}
 800560a:	4618      	mov	r0, r3
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b086      	sub	sp, #24
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	460b      	mov	r3, r1
 8005620:	607a      	str	r2, [r7, #4]
 8005622:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];

	data[0] = 0x05;
 8005624:	2305      	movs	r3, #5
 8005626:	743b      	strb	r3, [r7, #16]
	data[1] = tmc2209->slaveAddress;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 800562e:	747b      	strb	r3, [r7, #17]
	data[2] = address | TMC_WRITE_BIT;
 8005630:	7afb      	ldrb	r3, [r7, #11]
 8005632:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005636:	b2db      	uxtb	r3, r3
 8005638:	74bb      	strb	r3, [r7, #18]
	data[3] = (value >> 24) & 0xFF;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	0e1b      	lsrs	r3, r3, #24
 800563e:	b2db      	uxtb	r3, r3
 8005640:	74fb      	strb	r3, [r7, #19]
	data[4] = (value >> 16) & 0xFF;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	141b      	asrs	r3, r3, #16
 8005646:	b2db      	uxtb	r3, r3
 8005648:	753b      	strb	r3, [r7, #20]
	data[5] = (value >> 8 ) & 0xFF;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	121b      	asrs	r3, r3, #8
 800564e:	b2db      	uxtb	r3, r3
 8005650:	757b      	strb	r3, [r7, #21]
	data[6] = (value      ) & 0xFF;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	75bb      	strb	r3, [r7, #22]
	data[7] = tmc2209_CRC8(data, 7);
 8005658:	f107 0310 	add.w	r3, r7, #16
 800565c:	2107      	movs	r1, #7
 800565e:	4618      	mov	r0, r3
 8005660:	f7fa fe2e 	bl	80002c0 <tmc2209_CRC8>
 8005664:	4603      	mov	r3, r0
 8005666:	75fb      	strb	r3, [r7, #23]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 8005670:	f107 0110 	add.w	r1, r7, #16
 8005674:	2300      	movs	r3, #0
 8005676:	2208      	movs	r2, #8
 8005678:	f7fa fdfa 	bl	8000270 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
 800567c:	7afb      	ldrb	r3, [r7, #11]
 800567e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005682:	72fb      	strb	r3, [r7, #11]
	tmc2209->config->shadowRegister[address] = value;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	7afb      	ldrb	r3, [r7, #11]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	605a      	str	r2, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
 8005692:	7afb      	ldrb	r3, [r7, #11]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4413      	add	r3, r2
 8005698:	f893 2204 	ldrb.w	r2, [r3, #516]	; 0x204
 800569c:	7afb      	ldrb	r3, [r7, #11]
 800569e:	f042 0208 	orr.w	r2, r2, #8
 80056a2:	b2d1      	uxtb	r1, r2
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	460a      	mov	r2, r1
 80056aa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 80056ae:	bf00      	nop
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 80056b6:	b590      	push	{r4, r7, lr}
 80056b8:	b085      	sub	sp, #20
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	460b      	mov	r3, r1
 80056c0:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 80056c2:	2300      	movs	r3, #0
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 80056ca:	78fb      	ldrb	r3, [r7, #3]
 80056cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056d0:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 80056d2:	78fb      	ldrb	r3, [r7, #3]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	4413      	add	r3, r2
 80056d8:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d106      	bne.n	80056f2 <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	e03f      	b.n	8005772 <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 80056f2:	2305      	movs	r3, #5
 80056f4:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 80056fc:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 80056fe:	78fb      	ldrb	r3, [r7, #3]
 8005700:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 8005702:	f107 0308 	add.w	r3, r7, #8
 8005706:	2103      	movs	r1, #3
 8005708:	4618      	mov	r0, r3
 800570a:	f7fa fdd9 	bl	80002c0 <tmc2209_CRC8>
 800570e:	4603      	mov	r3, r0
 8005710:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 800571a:	f107 0108 	add.w	r1, r7, #8
 800571e:	2308      	movs	r3, #8
 8005720:	2204      	movs	r2, #4
 8005722:	f7fa fda5 	bl	8000270 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 8005726:	7a3b      	ldrb	r3, [r7, #8]
 8005728:	2b05      	cmp	r3, #5
 800572a:	d001      	beq.n	8005730 <tmc2209_readInt+0x7a>
		return 0;
 800572c:	2300      	movs	r3, #0
 800572e:	e020      	b.n	8005772 <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 8005730:	7a7b      	ldrb	r3, [r7, #9]
 8005732:	2bff      	cmp	r3, #255	; 0xff
 8005734:	d001      	beq.n	800573a <tmc2209_readInt+0x84>
		return 0;
 8005736:	2300      	movs	r3, #0
 8005738:	e01b      	b.n	8005772 <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 800573a:	7abb      	ldrb	r3, [r7, #10]
 800573c:	78fa      	ldrb	r2, [r7, #3]
 800573e:	429a      	cmp	r2, r3
 8005740:	d001      	beq.n	8005746 <tmc2209_readInt+0x90>
		return 0;
 8005742:	2300      	movs	r3, #0
 8005744:	e015      	b.n	8005772 <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 8005746:	7bfc      	ldrb	r4, [r7, #15]
 8005748:	f107 0308 	add.w	r3, r7, #8
 800574c:	2107      	movs	r1, #7
 800574e:	4618      	mov	r0, r3
 8005750:	f7fa fdb6 	bl	80002c0 <tmc2209_CRC8>
 8005754:	4603      	mov	r3, r0
 8005756:	429c      	cmp	r4, r3
 8005758:	d001      	beq.n	800575e <tmc2209_readInt+0xa8>
		return 0;
 800575a:	2300      	movs	r3, #0
 800575c:	e009      	b.n	8005772 <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 800575e:	7afb      	ldrb	r3, [r7, #11]
 8005760:	061a      	lsls	r2, r3, #24
 8005762:	7b3b      	ldrb	r3, [r7, #12]
 8005764:	041b      	lsls	r3, r3, #16
 8005766:	4313      	orrs	r3, r2
 8005768:	7b7a      	ldrb	r2, [r7, #13]
 800576a:	0212      	lsls	r2, r2, #8
 800576c:	4313      	orrs	r3, r2
 800576e:	7bba      	ldrb	r2, [r7, #14]
 8005770:	4313      	orrs	r3, r2
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	bd90      	pop	{r4, r7, pc}
	...

0800577c <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	607b      	str	r3, [r7, #4]
 8005786:	460b      	mov	r3, r1
 8005788:	72fb      	strb	r3, [r7, #11]
 800578a:	4613      	mov	r3, r2
 800578c:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	7aba      	ldrb	r2, [r7, #10]
 8005792:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	7afa      	ldrb	r2, [r7, #11]
 80057ac:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2200      	movs	r2, #0
 80057b6:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2200      	movs	r2, #0
 80057be:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80057c0:	2300      	movs	r3, #0
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	e017      	b.n	80057f6 <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 80057c6:	4a11      	ldr	r2, [pc, #68]	; (800580c <tmc2209_init+0x90>)
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	4413      	add	r3, r2
 80057cc:	7819      	ldrb	r1, [r3, #0]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80057d8:	460a      	mov	r2, r1
 80057da:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	6a3a      	ldr	r2, [r7, #32]
 80057e2:	4413      	add	r3, r2
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68f9      	ldr	r1, [r7, #12]
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	440b      	add	r3, r1
 80057ee:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	3301      	adds	r3, #1
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2b7f      	cmp	r3, #127	; 0x7f
 80057fa:	d9e4      	bls.n	80057c6 <tmc2209_init+0x4a>
	}
}
 80057fc:	bf00      	nop
 80057fe:	bf00      	nop
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	08006fa0 	.word	0x08006fa0

08005810 <writeConfiguration>:

static void writeConfiguration(TMC2209TypeDef *tmc2209)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
	uint8_t *ptr = &tmc2209->config->configIndex;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3301      	adds	r3, #1
 800581e:	60bb      	str	r3, [r7, #8]
	const int32_t *settings;

	if(tmc2209->config->state == CONFIG_RESTORE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b02      	cmp	r3, #2
 8005828:	d131      	bne.n	800588e <writeConfiguration+0x7e>
	{
		settings = tmc2209->config->shadowRegister;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3304      	adds	r3, #4
 8005830:	60fb      	str	r3, [r7, #12]
		// Find the next restorable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8005832:	e005      	b.n	8005840 <writeConfiguration+0x30>
		{
			(*ptr)++;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	3301      	adds	r3, #1
 800583a:	b2da      	uxtb	r2, r3
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	b25b      	sxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	db3b      	blt.n	80058c2 <writeConfiguration+0xb2>
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4413      	add	r3, r2
 8005854:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0e9      	beq.n	8005834 <writeConfiguration+0x24>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	461a      	mov	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4413      	add	r3, r2
 800586a:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800586e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005872:	2b00      	cmp	r3, #0
 8005874:	d025      	beq.n	80058c2 <writeConfiguration+0xb2>
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4413      	add	r3, r2
 8005880:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	2b00      	cmp	r3, #0
 800588a:	d0d3      	beq.n	8005834 <writeConfiguration+0x24>
 800588c:	e019      	b.n	80058c2 <writeConfiguration+0xb2>
		}
	}
	else
	{
		settings = tmc2209->registerResetState;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3304      	adds	r3, #4
 8005892:	60fb      	str	r3, [r7, #12]
		// Find the next resettable register
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 8005894:	e005      	b.n	80058a2 <writeConfiguration+0x92>
		{
			(*ptr)++;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	3301      	adds	r3, #1
 800589c:	b2da      	uxtb	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	701a      	strb	r2, [r3, #0]
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	b25b      	sxtb	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	db0a      	blt.n	80058c2 <writeConfiguration+0xb2>
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	461a      	mov	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4413      	add	r3, r2
 80058b6:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80058ba:	f003 0342 	and.w	r3, r3, #66	; 0x42
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d1e9      	bne.n	8005896 <writeConfiguration+0x86>
		}
	}

	if(*ptr < TMC2209_REGISTER_COUNT)
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	b25b      	sxtb	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	db12      	blt.n	80058f2 <writeConfiguration+0xe2>
	{
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	7819      	ldrb	r1, [r3, #0]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4413      	add	r3, r2
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	461a      	mov	r2, r3
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7ff fe99 	bl	8005616 <tmc2209_writeInt>
		(*ptr)++;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	3301      	adds	r3, #1
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	701a      	strb	r2, [r3, #0]
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
		}

		tmc2209->config->state = CONFIG_READY;
	}
}
 80058f0:	e013      	b.n	800591a <writeConfiguration+0x10a>
		if(tmc2209->config->callback)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d009      	beq.n	8005912 <writeConfiguration+0x102>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6812      	ldr	r2, [r2, #0]
 800590a:	7812      	ldrb	r2, [r2, #0]
 800590c:	4611      	mov	r1, r2
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2200      	movs	r2, #0
 8005918:	701a      	strb	r2, [r3, #0]
}
 800591a:	bf00      	nop
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <tmc2209_periodicJob>:

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b082      	sub	sp, #8
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	6039      	str	r1, [r7, #0]
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <tmc2209_periodicJob+0x1c>
	{
		writeConfiguration(tmc2209);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7ff ff6a 	bl	8005810 <writeConfiguration>
		return;
 800593c:	bf00      	nop
	}
}
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <tmc2209_reset+0x16>
		return false;
 8005956:	2300      	movs	r3, #0
 8005958:	e028      	b.n	80059ac <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	e019      	b.n	8005994 <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4413      	add	r3, r2
 8005966:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	f023 0308 	bic.w	r3, r3, #8
 8005970:	b2d9      	uxtb	r1, r3
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4413      	add	r3, r2
 8005978:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800597c:	460a      	mov	r2, r1
 800597e:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	2200      	movs	r2, #0
 800598c:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3301      	adds	r3, #1
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b7f      	cmp	r3, #127	; 0x7f
 8005998:	d9e2      	bls.n	8005960 <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2201      	movs	r2, #1
 80059a0:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2200      	movs	r2, #0
 80059a8:	705a      	strb	r2, [r3, #1]

	return true;
 80059aa:	2301      	movs	r3, #1
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <tmc2209_restore+0x16>
		return false;
 80059ca:	2300      	movs	r3, #0
 80059cc:	e008      	b.n	80059e0 <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2202      	movs	r2, #2
 80059d4:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2200      	movs	r2, #0
 80059dc:	705a      	strb	r2, [r3, #1]

	return true;
 80059de:	2301      	movs	r3, #1
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <__errno>:
 80059ec:	4b01      	ldr	r3, [pc, #4]	; (80059f4 <__errno+0x8>)
 80059ee:	6818      	ldr	r0, [r3, #0]
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	2000000c 	.word	0x2000000c

080059f8 <__libc_init_array>:
 80059f8:	b570      	push	{r4, r5, r6, lr}
 80059fa:	4d0d      	ldr	r5, [pc, #52]	; (8005a30 <__libc_init_array+0x38>)
 80059fc:	4c0d      	ldr	r4, [pc, #52]	; (8005a34 <__libc_init_array+0x3c>)
 80059fe:	1b64      	subs	r4, r4, r5
 8005a00:	10a4      	asrs	r4, r4, #2
 8005a02:	2600      	movs	r6, #0
 8005a04:	42a6      	cmp	r6, r4
 8005a06:	d109      	bne.n	8005a1c <__libc_init_array+0x24>
 8005a08:	4d0b      	ldr	r5, [pc, #44]	; (8005a38 <__libc_init_array+0x40>)
 8005a0a:	4c0c      	ldr	r4, [pc, #48]	; (8005a3c <__libc_init_array+0x44>)
 8005a0c:	f001 f8fa 	bl	8006c04 <_init>
 8005a10:	1b64      	subs	r4, r4, r5
 8005a12:	10a4      	asrs	r4, r4, #2
 8005a14:	2600      	movs	r6, #0
 8005a16:	42a6      	cmp	r6, r4
 8005a18:	d105      	bne.n	8005a26 <__libc_init_array+0x2e>
 8005a1a:	bd70      	pop	{r4, r5, r6, pc}
 8005a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a20:	4798      	blx	r3
 8005a22:	3601      	adds	r6, #1
 8005a24:	e7ee      	b.n	8005a04 <__libc_init_array+0xc>
 8005a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a2a:	4798      	blx	r3
 8005a2c:	3601      	adds	r6, #1
 8005a2e:	e7f2      	b.n	8005a16 <__libc_init_array+0x1e>
 8005a30:	080070b8 	.word	0x080070b8
 8005a34:	080070b8 	.word	0x080070b8
 8005a38:	080070b8 	.word	0x080070b8
 8005a3c:	080070bc 	.word	0x080070bc

08005a40 <memset>:
 8005a40:	4402      	add	r2, r0
 8005a42:	4603      	mov	r3, r0
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d100      	bne.n	8005a4a <memset+0xa>
 8005a48:	4770      	bx	lr
 8005a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a4e:	e7f9      	b.n	8005a44 <memset+0x4>

08005a50 <iprintf>:
 8005a50:	b40f      	push	{r0, r1, r2, r3}
 8005a52:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <iprintf+0x2c>)
 8005a54:	b513      	push	{r0, r1, r4, lr}
 8005a56:	681c      	ldr	r4, [r3, #0]
 8005a58:	b124      	cbz	r4, 8005a64 <iprintf+0x14>
 8005a5a:	69a3      	ldr	r3, [r4, #24]
 8005a5c:	b913      	cbnz	r3, 8005a64 <iprintf+0x14>
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f000 fb2c 	bl	80060bc <__sinit>
 8005a64:	ab05      	add	r3, sp, #20
 8005a66:	9a04      	ldr	r2, [sp, #16]
 8005a68:	68a1      	ldr	r1, [r4, #8]
 8005a6a:	9301      	str	r3, [sp, #4]
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f000 fd3d 	bl	80064ec <_vfiprintf_r>
 8005a72:	b002      	add	sp, #8
 8005a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a78:	b004      	add	sp, #16
 8005a7a:	4770      	bx	lr
 8005a7c:	2000000c 	.word	0x2000000c

08005a80 <_puts_r>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	460e      	mov	r6, r1
 8005a84:	4605      	mov	r5, r0
 8005a86:	b118      	cbz	r0, 8005a90 <_puts_r+0x10>
 8005a88:	6983      	ldr	r3, [r0, #24]
 8005a8a:	b90b      	cbnz	r3, 8005a90 <_puts_r+0x10>
 8005a8c:	f000 fb16 	bl	80060bc <__sinit>
 8005a90:	69ab      	ldr	r3, [r5, #24]
 8005a92:	68ac      	ldr	r4, [r5, #8]
 8005a94:	b913      	cbnz	r3, 8005a9c <_puts_r+0x1c>
 8005a96:	4628      	mov	r0, r5
 8005a98:	f000 fb10 	bl	80060bc <__sinit>
 8005a9c:	4b2c      	ldr	r3, [pc, #176]	; (8005b50 <_puts_r+0xd0>)
 8005a9e:	429c      	cmp	r4, r3
 8005aa0:	d120      	bne.n	8005ae4 <_puts_r+0x64>
 8005aa2:	686c      	ldr	r4, [r5, #4]
 8005aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005aa6:	07db      	lsls	r3, r3, #31
 8005aa8:	d405      	bmi.n	8005ab6 <_puts_r+0x36>
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	0598      	lsls	r0, r3, #22
 8005aae:	d402      	bmi.n	8005ab6 <_puts_r+0x36>
 8005ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ab2:	f000 fba1 	bl	80061f8 <__retarget_lock_acquire_recursive>
 8005ab6:	89a3      	ldrh	r3, [r4, #12]
 8005ab8:	0719      	lsls	r1, r3, #28
 8005aba:	d51d      	bpl.n	8005af8 <_puts_r+0x78>
 8005abc:	6923      	ldr	r3, [r4, #16]
 8005abe:	b1db      	cbz	r3, 8005af8 <_puts_r+0x78>
 8005ac0:	3e01      	subs	r6, #1
 8005ac2:	68a3      	ldr	r3, [r4, #8]
 8005ac4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	60a3      	str	r3, [r4, #8]
 8005acc:	bb39      	cbnz	r1, 8005b1e <_puts_r+0x9e>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	da38      	bge.n	8005b44 <_puts_r+0xc4>
 8005ad2:	4622      	mov	r2, r4
 8005ad4:	210a      	movs	r1, #10
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	f000 f916 	bl	8005d08 <__swbuf_r>
 8005adc:	3001      	adds	r0, #1
 8005ade:	d011      	beq.n	8005b04 <_puts_r+0x84>
 8005ae0:	250a      	movs	r5, #10
 8005ae2:	e011      	b.n	8005b08 <_puts_r+0x88>
 8005ae4:	4b1b      	ldr	r3, [pc, #108]	; (8005b54 <_puts_r+0xd4>)
 8005ae6:	429c      	cmp	r4, r3
 8005ae8:	d101      	bne.n	8005aee <_puts_r+0x6e>
 8005aea:	68ac      	ldr	r4, [r5, #8]
 8005aec:	e7da      	b.n	8005aa4 <_puts_r+0x24>
 8005aee:	4b1a      	ldr	r3, [pc, #104]	; (8005b58 <_puts_r+0xd8>)
 8005af0:	429c      	cmp	r4, r3
 8005af2:	bf08      	it	eq
 8005af4:	68ec      	ldreq	r4, [r5, #12]
 8005af6:	e7d5      	b.n	8005aa4 <_puts_r+0x24>
 8005af8:	4621      	mov	r1, r4
 8005afa:	4628      	mov	r0, r5
 8005afc:	f000 f956 	bl	8005dac <__swsetup_r>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d0dd      	beq.n	8005ac0 <_puts_r+0x40>
 8005b04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005b08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b0a:	07da      	lsls	r2, r3, #31
 8005b0c:	d405      	bmi.n	8005b1a <_puts_r+0x9a>
 8005b0e:	89a3      	ldrh	r3, [r4, #12]
 8005b10:	059b      	lsls	r3, r3, #22
 8005b12:	d402      	bmi.n	8005b1a <_puts_r+0x9a>
 8005b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b16:	f000 fb70 	bl	80061fa <__retarget_lock_release_recursive>
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	bd70      	pop	{r4, r5, r6, pc}
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	da04      	bge.n	8005b2c <_puts_r+0xac>
 8005b22:	69a2      	ldr	r2, [r4, #24]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	dc06      	bgt.n	8005b36 <_puts_r+0xb6>
 8005b28:	290a      	cmp	r1, #10
 8005b2a:	d004      	beq.n	8005b36 <_puts_r+0xb6>
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	6022      	str	r2, [r4, #0]
 8005b32:	7019      	strb	r1, [r3, #0]
 8005b34:	e7c5      	b.n	8005ac2 <_puts_r+0x42>
 8005b36:	4622      	mov	r2, r4
 8005b38:	4628      	mov	r0, r5
 8005b3a:	f000 f8e5 	bl	8005d08 <__swbuf_r>
 8005b3e:	3001      	adds	r0, #1
 8005b40:	d1bf      	bne.n	8005ac2 <_puts_r+0x42>
 8005b42:	e7df      	b.n	8005b04 <_puts_r+0x84>
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	250a      	movs	r5, #10
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	6022      	str	r2, [r4, #0]
 8005b4c:	701d      	strb	r5, [r3, #0]
 8005b4e:	e7db      	b.n	8005b08 <_puts_r+0x88>
 8005b50:	08007044 	.word	0x08007044
 8005b54:	08007064 	.word	0x08007064
 8005b58:	08007024 	.word	0x08007024

08005b5c <puts>:
 8005b5c:	4b02      	ldr	r3, [pc, #8]	; (8005b68 <puts+0xc>)
 8005b5e:	4601      	mov	r1, r0
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	f7ff bf8d 	b.w	8005a80 <_puts_r>
 8005b66:	bf00      	nop
 8005b68:	2000000c 	.word	0x2000000c

08005b6c <setbuf>:
 8005b6c:	2900      	cmp	r1, #0
 8005b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b72:	bf0c      	ite	eq
 8005b74:	2202      	moveq	r2, #2
 8005b76:	2200      	movne	r2, #0
 8005b78:	f000 b800 	b.w	8005b7c <setvbuf>

08005b7c <setvbuf>:
 8005b7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b80:	461d      	mov	r5, r3
 8005b82:	4b5d      	ldr	r3, [pc, #372]	; (8005cf8 <setvbuf+0x17c>)
 8005b84:	681f      	ldr	r7, [r3, #0]
 8005b86:	4604      	mov	r4, r0
 8005b88:	460e      	mov	r6, r1
 8005b8a:	4690      	mov	r8, r2
 8005b8c:	b127      	cbz	r7, 8005b98 <setvbuf+0x1c>
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	b913      	cbnz	r3, 8005b98 <setvbuf+0x1c>
 8005b92:	4638      	mov	r0, r7
 8005b94:	f000 fa92 	bl	80060bc <__sinit>
 8005b98:	4b58      	ldr	r3, [pc, #352]	; (8005cfc <setvbuf+0x180>)
 8005b9a:	429c      	cmp	r4, r3
 8005b9c:	d167      	bne.n	8005c6e <setvbuf+0xf2>
 8005b9e:	687c      	ldr	r4, [r7, #4]
 8005ba0:	f1b8 0f02 	cmp.w	r8, #2
 8005ba4:	d006      	beq.n	8005bb4 <setvbuf+0x38>
 8005ba6:	f1b8 0f01 	cmp.w	r8, #1
 8005baa:	f200 809f 	bhi.w	8005cec <setvbuf+0x170>
 8005bae:	2d00      	cmp	r5, #0
 8005bb0:	f2c0 809c 	blt.w	8005cec <setvbuf+0x170>
 8005bb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bb6:	07db      	lsls	r3, r3, #31
 8005bb8:	d405      	bmi.n	8005bc6 <setvbuf+0x4a>
 8005bba:	89a3      	ldrh	r3, [r4, #12]
 8005bbc:	0598      	lsls	r0, r3, #22
 8005bbe:	d402      	bmi.n	8005bc6 <setvbuf+0x4a>
 8005bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bc2:	f000 fb19 	bl	80061f8 <__retarget_lock_acquire_recursive>
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	4638      	mov	r0, r7
 8005bca:	f000 f9e3 	bl	8005f94 <_fflush_r>
 8005bce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bd0:	b141      	cbz	r1, 8005be4 <setvbuf+0x68>
 8005bd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bd6:	4299      	cmp	r1, r3
 8005bd8:	d002      	beq.n	8005be0 <setvbuf+0x64>
 8005bda:	4638      	mov	r0, r7
 8005bdc:	f000 fb7c 	bl	80062d8 <_free_r>
 8005be0:	2300      	movs	r3, #0
 8005be2:	6363      	str	r3, [r4, #52]	; 0x34
 8005be4:	2300      	movs	r3, #0
 8005be6:	61a3      	str	r3, [r4, #24]
 8005be8:	6063      	str	r3, [r4, #4]
 8005bea:	89a3      	ldrh	r3, [r4, #12]
 8005bec:	0619      	lsls	r1, r3, #24
 8005bee:	d503      	bpl.n	8005bf8 <setvbuf+0x7c>
 8005bf0:	6921      	ldr	r1, [r4, #16]
 8005bf2:	4638      	mov	r0, r7
 8005bf4:	f000 fb70 	bl	80062d8 <_free_r>
 8005bf8:	89a3      	ldrh	r3, [r4, #12]
 8005bfa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005bfe:	f023 0303 	bic.w	r3, r3, #3
 8005c02:	f1b8 0f02 	cmp.w	r8, #2
 8005c06:	81a3      	strh	r3, [r4, #12]
 8005c08:	d06c      	beq.n	8005ce4 <setvbuf+0x168>
 8005c0a:	ab01      	add	r3, sp, #4
 8005c0c:	466a      	mov	r2, sp
 8005c0e:	4621      	mov	r1, r4
 8005c10:	4638      	mov	r0, r7
 8005c12:	f000 faf3 	bl	80061fc <__swhatbuf_r>
 8005c16:	89a3      	ldrh	r3, [r4, #12]
 8005c18:	4318      	orrs	r0, r3
 8005c1a:	81a0      	strh	r0, [r4, #12]
 8005c1c:	2d00      	cmp	r5, #0
 8005c1e:	d130      	bne.n	8005c82 <setvbuf+0x106>
 8005c20:	9d00      	ldr	r5, [sp, #0]
 8005c22:	4628      	mov	r0, r5
 8005c24:	f000 fb50 	bl	80062c8 <malloc>
 8005c28:	4606      	mov	r6, r0
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	d155      	bne.n	8005cda <setvbuf+0x15e>
 8005c2e:	f8dd 9000 	ldr.w	r9, [sp]
 8005c32:	45a9      	cmp	r9, r5
 8005c34:	d14a      	bne.n	8005ccc <setvbuf+0x150>
 8005c36:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	60a2      	str	r2, [r4, #8]
 8005c3e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005c42:	6022      	str	r2, [r4, #0]
 8005c44:	6122      	str	r2, [r4, #16]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c4c:	6162      	str	r2, [r4, #20]
 8005c4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c50:	f043 0302 	orr.w	r3, r3, #2
 8005c54:	07d2      	lsls	r2, r2, #31
 8005c56:	81a3      	strh	r3, [r4, #12]
 8005c58:	d405      	bmi.n	8005c66 <setvbuf+0xea>
 8005c5a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005c5e:	d102      	bne.n	8005c66 <setvbuf+0xea>
 8005c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c62:	f000 faca 	bl	80061fa <__retarget_lock_release_recursive>
 8005c66:	4628      	mov	r0, r5
 8005c68:	b003      	add	sp, #12
 8005c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c6e:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <setvbuf+0x184>)
 8005c70:	429c      	cmp	r4, r3
 8005c72:	d101      	bne.n	8005c78 <setvbuf+0xfc>
 8005c74:	68bc      	ldr	r4, [r7, #8]
 8005c76:	e793      	b.n	8005ba0 <setvbuf+0x24>
 8005c78:	4b22      	ldr	r3, [pc, #136]	; (8005d04 <setvbuf+0x188>)
 8005c7a:	429c      	cmp	r4, r3
 8005c7c:	bf08      	it	eq
 8005c7e:	68fc      	ldreq	r4, [r7, #12]
 8005c80:	e78e      	b.n	8005ba0 <setvbuf+0x24>
 8005c82:	2e00      	cmp	r6, #0
 8005c84:	d0cd      	beq.n	8005c22 <setvbuf+0xa6>
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	b913      	cbnz	r3, 8005c90 <setvbuf+0x114>
 8005c8a:	4638      	mov	r0, r7
 8005c8c:	f000 fa16 	bl	80060bc <__sinit>
 8005c90:	f1b8 0f01 	cmp.w	r8, #1
 8005c94:	bf08      	it	eq
 8005c96:	89a3      	ldrheq	r3, [r4, #12]
 8005c98:	6026      	str	r6, [r4, #0]
 8005c9a:	bf04      	itt	eq
 8005c9c:	f043 0301 	orreq.w	r3, r3, #1
 8005ca0:	81a3      	strheq	r3, [r4, #12]
 8005ca2:	89a2      	ldrh	r2, [r4, #12]
 8005ca4:	f012 0308 	ands.w	r3, r2, #8
 8005ca8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005cac:	d01c      	beq.n	8005ce8 <setvbuf+0x16c>
 8005cae:	07d3      	lsls	r3, r2, #31
 8005cb0:	bf41      	itttt	mi
 8005cb2:	2300      	movmi	r3, #0
 8005cb4:	426d      	negmi	r5, r5
 8005cb6:	60a3      	strmi	r3, [r4, #8]
 8005cb8:	61a5      	strmi	r5, [r4, #24]
 8005cba:	bf58      	it	pl
 8005cbc:	60a5      	strpl	r5, [r4, #8]
 8005cbe:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005cc0:	f015 0501 	ands.w	r5, r5, #1
 8005cc4:	d115      	bne.n	8005cf2 <setvbuf+0x176>
 8005cc6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005cca:	e7c8      	b.n	8005c5e <setvbuf+0xe2>
 8005ccc:	4648      	mov	r0, r9
 8005cce:	f000 fafb 	bl	80062c8 <malloc>
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d0ae      	beq.n	8005c36 <setvbuf+0xba>
 8005cd8:	464d      	mov	r5, r9
 8005cda:	89a3      	ldrh	r3, [r4, #12]
 8005cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce0:	81a3      	strh	r3, [r4, #12]
 8005ce2:	e7d0      	b.n	8005c86 <setvbuf+0x10a>
 8005ce4:	2500      	movs	r5, #0
 8005ce6:	e7a8      	b.n	8005c3a <setvbuf+0xbe>
 8005ce8:	60a3      	str	r3, [r4, #8]
 8005cea:	e7e8      	b.n	8005cbe <setvbuf+0x142>
 8005cec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005cf0:	e7b9      	b.n	8005c66 <setvbuf+0xea>
 8005cf2:	2500      	movs	r5, #0
 8005cf4:	e7b7      	b.n	8005c66 <setvbuf+0xea>
 8005cf6:	bf00      	nop
 8005cf8:	2000000c 	.word	0x2000000c
 8005cfc:	08007044 	.word	0x08007044
 8005d00:	08007064 	.word	0x08007064
 8005d04:	08007024 	.word	0x08007024

08005d08 <__swbuf_r>:
 8005d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0a:	460e      	mov	r6, r1
 8005d0c:	4614      	mov	r4, r2
 8005d0e:	4605      	mov	r5, r0
 8005d10:	b118      	cbz	r0, 8005d1a <__swbuf_r+0x12>
 8005d12:	6983      	ldr	r3, [r0, #24]
 8005d14:	b90b      	cbnz	r3, 8005d1a <__swbuf_r+0x12>
 8005d16:	f000 f9d1 	bl	80060bc <__sinit>
 8005d1a:	4b21      	ldr	r3, [pc, #132]	; (8005da0 <__swbuf_r+0x98>)
 8005d1c:	429c      	cmp	r4, r3
 8005d1e:	d12b      	bne.n	8005d78 <__swbuf_r+0x70>
 8005d20:	686c      	ldr	r4, [r5, #4]
 8005d22:	69a3      	ldr	r3, [r4, #24]
 8005d24:	60a3      	str	r3, [r4, #8]
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	071a      	lsls	r2, r3, #28
 8005d2a:	d52f      	bpl.n	8005d8c <__swbuf_r+0x84>
 8005d2c:	6923      	ldr	r3, [r4, #16]
 8005d2e:	b36b      	cbz	r3, 8005d8c <__swbuf_r+0x84>
 8005d30:	6923      	ldr	r3, [r4, #16]
 8005d32:	6820      	ldr	r0, [r4, #0]
 8005d34:	1ac0      	subs	r0, r0, r3
 8005d36:	6963      	ldr	r3, [r4, #20]
 8005d38:	b2f6      	uxtb	r6, r6
 8005d3a:	4283      	cmp	r3, r0
 8005d3c:	4637      	mov	r7, r6
 8005d3e:	dc04      	bgt.n	8005d4a <__swbuf_r+0x42>
 8005d40:	4621      	mov	r1, r4
 8005d42:	4628      	mov	r0, r5
 8005d44:	f000 f926 	bl	8005f94 <_fflush_r>
 8005d48:	bb30      	cbnz	r0, 8005d98 <__swbuf_r+0x90>
 8005d4a:	68a3      	ldr	r3, [r4, #8]
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	60a3      	str	r3, [r4, #8]
 8005d50:	6823      	ldr	r3, [r4, #0]
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	6022      	str	r2, [r4, #0]
 8005d56:	701e      	strb	r6, [r3, #0]
 8005d58:	6963      	ldr	r3, [r4, #20]
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	4283      	cmp	r3, r0
 8005d5e:	d004      	beq.n	8005d6a <__swbuf_r+0x62>
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	07db      	lsls	r3, r3, #31
 8005d64:	d506      	bpl.n	8005d74 <__swbuf_r+0x6c>
 8005d66:	2e0a      	cmp	r6, #10
 8005d68:	d104      	bne.n	8005d74 <__swbuf_r+0x6c>
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	f000 f911 	bl	8005f94 <_fflush_r>
 8005d72:	b988      	cbnz	r0, 8005d98 <__swbuf_r+0x90>
 8005d74:	4638      	mov	r0, r7
 8005d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d78:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <__swbuf_r+0x9c>)
 8005d7a:	429c      	cmp	r4, r3
 8005d7c:	d101      	bne.n	8005d82 <__swbuf_r+0x7a>
 8005d7e:	68ac      	ldr	r4, [r5, #8]
 8005d80:	e7cf      	b.n	8005d22 <__swbuf_r+0x1a>
 8005d82:	4b09      	ldr	r3, [pc, #36]	; (8005da8 <__swbuf_r+0xa0>)
 8005d84:	429c      	cmp	r4, r3
 8005d86:	bf08      	it	eq
 8005d88:	68ec      	ldreq	r4, [r5, #12]
 8005d8a:	e7ca      	b.n	8005d22 <__swbuf_r+0x1a>
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	4628      	mov	r0, r5
 8005d90:	f000 f80c 	bl	8005dac <__swsetup_r>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d0cb      	beq.n	8005d30 <__swbuf_r+0x28>
 8005d98:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005d9c:	e7ea      	b.n	8005d74 <__swbuf_r+0x6c>
 8005d9e:	bf00      	nop
 8005da0:	08007044 	.word	0x08007044
 8005da4:	08007064 	.word	0x08007064
 8005da8:	08007024 	.word	0x08007024

08005dac <__swsetup_r>:
 8005dac:	4b32      	ldr	r3, [pc, #200]	; (8005e78 <__swsetup_r+0xcc>)
 8005dae:	b570      	push	{r4, r5, r6, lr}
 8005db0:	681d      	ldr	r5, [r3, #0]
 8005db2:	4606      	mov	r6, r0
 8005db4:	460c      	mov	r4, r1
 8005db6:	b125      	cbz	r5, 8005dc2 <__swsetup_r+0x16>
 8005db8:	69ab      	ldr	r3, [r5, #24]
 8005dba:	b913      	cbnz	r3, 8005dc2 <__swsetup_r+0x16>
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	f000 f97d 	bl	80060bc <__sinit>
 8005dc2:	4b2e      	ldr	r3, [pc, #184]	; (8005e7c <__swsetup_r+0xd0>)
 8005dc4:	429c      	cmp	r4, r3
 8005dc6:	d10f      	bne.n	8005de8 <__swsetup_r+0x3c>
 8005dc8:	686c      	ldr	r4, [r5, #4]
 8005dca:	89a3      	ldrh	r3, [r4, #12]
 8005dcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dd0:	0719      	lsls	r1, r3, #28
 8005dd2:	d42c      	bmi.n	8005e2e <__swsetup_r+0x82>
 8005dd4:	06dd      	lsls	r5, r3, #27
 8005dd6:	d411      	bmi.n	8005dfc <__swsetup_r+0x50>
 8005dd8:	2309      	movs	r3, #9
 8005dda:	6033      	str	r3, [r6, #0]
 8005ddc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005de0:	81a3      	strh	r3, [r4, #12]
 8005de2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005de6:	e03e      	b.n	8005e66 <__swsetup_r+0xba>
 8005de8:	4b25      	ldr	r3, [pc, #148]	; (8005e80 <__swsetup_r+0xd4>)
 8005dea:	429c      	cmp	r4, r3
 8005dec:	d101      	bne.n	8005df2 <__swsetup_r+0x46>
 8005dee:	68ac      	ldr	r4, [r5, #8]
 8005df0:	e7eb      	b.n	8005dca <__swsetup_r+0x1e>
 8005df2:	4b24      	ldr	r3, [pc, #144]	; (8005e84 <__swsetup_r+0xd8>)
 8005df4:	429c      	cmp	r4, r3
 8005df6:	bf08      	it	eq
 8005df8:	68ec      	ldreq	r4, [r5, #12]
 8005dfa:	e7e6      	b.n	8005dca <__swsetup_r+0x1e>
 8005dfc:	0758      	lsls	r0, r3, #29
 8005dfe:	d512      	bpl.n	8005e26 <__swsetup_r+0x7a>
 8005e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e02:	b141      	cbz	r1, 8005e16 <__swsetup_r+0x6a>
 8005e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e08:	4299      	cmp	r1, r3
 8005e0a:	d002      	beq.n	8005e12 <__swsetup_r+0x66>
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f000 fa63 	bl	80062d8 <_free_r>
 8005e12:	2300      	movs	r3, #0
 8005e14:	6363      	str	r3, [r4, #52]	; 0x34
 8005e16:	89a3      	ldrh	r3, [r4, #12]
 8005e18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e1c:	81a3      	strh	r3, [r4, #12]
 8005e1e:	2300      	movs	r3, #0
 8005e20:	6063      	str	r3, [r4, #4]
 8005e22:	6923      	ldr	r3, [r4, #16]
 8005e24:	6023      	str	r3, [r4, #0]
 8005e26:	89a3      	ldrh	r3, [r4, #12]
 8005e28:	f043 0308 	orr.w	r3, r3, #8
 8005e2c:	81a3      	strh	r3, [r4, #12]
 8005e2e:	6923      	ldr	r3, [r4, #16]
 8005e30:	b94b      	cbnz	r3, 8005e46 <__swsetup_r+0x9a>
 8005e32:	89a3      	ldrh	r3, [r4, #12]
 8005e34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e3c:	d003      	beq.n	8005e46 <__swsetup_r+0x9a>
 8005e3e:	4621      	mov	r1, r4
 8005e40:	4630      	mov	r0, r6
 8005e42:	f000 fa01 	bl	8006248 <__smakebuf_r>
 8005e46:	89a0      	ldrh	r0, [r4, #12]
 8005e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e4c:	f010 0301 	ands.w	r3, r0, #1
 8005e50:	d00a      	beq.n	8005e68 <__swsetup_r+0xbc>
 8005e52:	2300      	movs	r3, #0
 8005e54:	60a3      	str	r3, [r4, #8]
 8005e56:	6963      	ldr	r3, [r4, #20]
 8005e58:	425b      	negs	r3, r3
 8005e5a:	61a3      	str	r3, [r4, #24]
 8005e5c:	6923      	ldr	r3, [r4, #16]
 8005e5e:	b943      	cbnz	r3, 8005e72 <__swsetup_r+0xc6>
 8005e60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e64:	d1ba      	bne.n	8005ddc <__swsetup_r+0x30>
 8005e66:	bd70      	pop	{r4, r5, r6, pc}
 8005e68:	0781      	lsls	r1, r0, #30
 8005e6a:	bf58      	it	pl
 8005e6c:	6963      	ldrpl	r3, [r4, #20]
 8005e6e:	60a3      	str	r3, [r4, #8]
 8005e70:	e7f4      	b.n	8005e5c <__swsetup_r+0xb0>
 8005e72:	2000      	movs	r0, #0
 8005e74:	e7f7      	b.n	8005e66 <__swsetup_r+0xba>
 8005e76:	bf00      	nop
 8005e78:	2000000c 	.word	0x2000000c
 8005e7c:	08007044 	.word	0x08007044
 8005e80:	08007064 	.word	0x08007064
 8005e84:	08007024 	.word	0x08007024

08005e88 <__sflush_r>:
 8005e88:	898a      	ldrh	r2, [r1, #12]
 8005e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e8e:	4605      	mov	r5, r0
 8005e90:	0710      	lsls	r0, r2, #28
 8005e92:	460c      	mov	r4, r1
 8005e94:	d458      	bmi.n	8005f48 <__sflush_r+0xc0>
 8005e96:	684b      	ldr	r3, [r1, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	dc05      	bgt.n	8005ea8 <__sflush_r+0x20>
 8005e9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	dc02      	bgt.n	8005ea8 <__sflush_r+0x20>
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ea8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005eaa:	2e00      	cmp	r6, #0
 8005eac:	d0f9      	beq.n	8005ea2 <__sflush_r+0x1a>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005eb4:	682f      	ldr	r7, [r5, #0]
 8005eb6:	602b      	str	r3, [r5, #0]
 8005eb8:	d032      	beq.n	8005f20 <__sflush_r+0x98>
 8005eba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ebc:	89a3      	ldrh	r3, [r4, #12]
 8005ebe:	075a      	lsls	r2, r3, #29
 8005ec0:	d505      	bpl.n	8005ece <__sflush_r+0x46>
 8005ec2:	6863      	ldr	r3, [r4, #4]
 8005ec4:	1ac0      	subs	r0, r0, r3
 8005ec6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ec8:	b10b      	cbz	r3, 8005ece <__sflush_r+0x46>
 8005eca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ecc:	1ac0      	subs	r0, r0, r3
 8005ece:	2300      	movs	r3, #0
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ed4:	6a21      	ldr	r1, [r4, #32]
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	47b0      	blx	r6
 8005eda:	1c43      	adds	r3, r0, #1
 8005edc:	89a3      	ldrh	r3, [r4, #12]
 8005ede:	d106      	bne.n	8005eee <__sflush_r+0x66>
 8005ee0:	6829      	ldr	r1, [r5, #0]
 8005ee2:	291d      	cmp	r1, #29
 8005ee4:	d82c      	bhi.n	8005f40 <__sflush_r+0xb8>
 8005ee6:	4a2a      	ldr	r2, [pc, #168]	; (8005f90 <__sflush_r+0x108>)
 8005ee8:	40ca      	lsrs	r2, r1
 8005eea:	07d6      	lsls	r6, r2, #31
 8005eec:	d528      	bpl.n	8005f40 <__sflush_r+0xb8>
 8005eee:	2200      	movs	r2, #0
 8005ef0:	6062      	str	r2, [r4, #4]
 8005ef2:	04d9      	lsls	r1, r3, #19
 8005ef4:	6922      	ldr	r2, [r4, #16]
 8005ef6:	6022      	str	r2, [r4, #0]
 8005ef8:	d504      	bpl.n	8005f04 <__sflush_r+0x7c>
 8005efa:	1c42      	adds	r2, r0, #1
 8005efc:	d101      	bne.n	8005f02 <__sflush_r+0x7a>
 8005efe:	682b      	ldr	r3, [r5, #0]
 8005f00:	b903      	cbnz	r3, 8005f04 <__sflush_r+0x7c>
 8005f02:	6560      	str	r0, [r4, #84]	; 0x54
 8005f04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f06:	602f      	str	r7, [r5, #0]
 8005f08:	2900      	cmp	r1, #0
 8005f0a:	d0ca      	beq.n	8005ea2 <__sflush_r+0x1a>
 8005f0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f10:	4299      	cmp	r1, r3
 8005f12:	d002      	beq.n	8005f1a <__sflush_r+0x92>
 8005f14:	4628      	mov	r0, r5
 8005f16:	f000 f9df 	bl	80062d8 <_free_r>
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	6360      	str	r0, [r4, #52]	; 0x34
 8005f1e:	e7c1      	b.n	8005ea4 <__sflush_r+0x1c>
 8005f20:	6a21      	ldr	r1, [r4, #32]
 8005f22:	2301      	movs	r3, #1
 8005f24:	4628      	mov	r0, r5
 8005f26:	47b0      	blx	r6
 8005f28:	1c41      	adds	r1, r0, #1
 8005f2a:	d1c7      	bne.n	8005ebc <__sflush_r+0x34>
 8005f2c:	682b      	ldr	r3, [r5, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d0c4      	beq.n	8005ebc <__sflush_r+0x34>
 8005f32:	2b1d      	cmp	r3, #29
 8005f34:	d001      	beq.n	8005f3a <__sflush_r+0xb2>
 8005f36:	2b16      	cmp	r3, #22
 8005f38:	d101      	bne.n	8005f3e <__sflush_r+0xb6>
 8005f3a:	602f      	str	r7, [r5, #0]
 8005f3c:	e7b1      	b.n	8005ea2 <__sflush_r+0x1a>
 8005f3e:	89a3      	ldrh	r3, [r4, #12]
 8005f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f44:	81a3      	strh	r3, [r4, #12]
 8005f46:	e7ad      	b.n	8005ea4 <__sflush_r+0x1c>
 8005f48:	690f      	ldr	r7, [r1, #16]
 8005f4a:	2f00      	cmp	r7, #0
 8005f4c:	d0a9      	beq.n	8005ea2 <__sflush_r+0x1a>
 8005f4e:	0793      	lsls	r3, r2, #30
 8005f50:	680e      	ldr	r6, [r1, #0]
 8005f52:	bf08      	it	eq
 8005f54:	694b      	ldreq	r3, [r1, #20]
 8005f56:	600f      	str	r7, [r1, #0]
 8005f58:	bf18      	it	ne
 8005f5a:	2300      	movne	r3, #0
 8005f5c:	eba6 0807 	sub.w	r8, r6, r7
 8005f60:	608b      	str	r3, [r1, #8]
 8005f62:	f1b8 0f00 	cmp.w	r8, #0
 8005f66:	dd9c      	ble.n	8005ea2 <__sflush_r+0x1a>
 8005f68:	6a21      	ldr	r1, [r4, #32]
 8005f6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f6c:	4643      	mov	r3, r8
 8005f6e:	463a      	mov	r2, r7
 8005f70:	4628      	mov	r0, r5
 8005f72:	47b0      	blx	r6
 8005f74:	2800      	cmp	r0, #0
 8005f76:	dc06      	bgt.n	8005f86 <__sflush_r+0xfe>
 8005f78:	89a3      	ldrh	r3, [r4, #12]
 8005f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f7e:	81a3      	strh	r3, [r4, #12]
 8005f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f84:	e78e      	b.n	8005ea4 <__sflush_r+0x1c>
 8005f86:	4407      	add	r7, r0
 8005f88:	eba8 0800 	sub.w	r8, r8, r0
 8005f8c:	e7e9      	b.n	8005f62 <__sflush_r+0xda>
 8005f8e:	bf00      	nop
 8005f90:	20400001 	.word	0x20400001

08005f94 <_fflush_r>:
 8005f94:	b538      	push	{r3, r4, r5, lr}
 8005f96:	690b      	ldr	r3, [r1, #16]
 8005f98:	4605      	mov	r5, r0
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	b913      	cbnz	r3, 8005fa4 <_fflush_r+0x10>
 8005f9e:	2500      	movs	r5, #0
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	bd38      	pop	{r3, r4, r5, pc}
 8005fa4:	b118      	cbz	r0, 8005fae <_fflush_r+0x1a>
 8005fa6:	6983      	ldr	r3, [r0, #24]
 8005fa8:	b90b      	cbnz	r3, 8005fae <_fflush_r+0x1a>
 8005faa:	f000 f887 	bl	80060bc <__sinit>
 8005fae:	4b14      	ldr	r3, [pc, #80]	; (8006000 <_fflush_r+0x6c>)
 8005fb0:	429c      	cmp	r4, r3
 8005fb2:	d11b      	bne.n	8005fec <_fflush_r+0x58>
 8005fb4:	686c      	ldr	r4, [r5, #4]
 8005fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d0ef      	beq.n	8005f9e <_fflush_r+0xa>
 8005fbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005fc0:	07d0      	lsls	r0, r2, #31
 8005fc2:	d404      	bmi.n	8005fce <_fflush_r+0x3a>
 8005fc4:	0599      	lsls	r1, r3, #22
 8005fc6:	d402      	bmi.n	8005fce <_fflush_r+0x3a>
 8005fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fca:	f000 f915 	bl	80061f8 <__retarget_lock_acquire_recursive>
 8005fce:	4628      	mov	r0, r5
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	f7ff ff59 	bl	8005e88 <__sflush_r>
 8005fd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fd8:	07da      	lsls	r2, r3, #31
 8005fda:	4605      	mov	r5, r0
 8005fdc:	d4e0      	bmi.n	8005fa0 <_fflush_r+0xc>
 8005fde:	89a3      	ldrh	r3, [r4, #12]
 8005fe0:	059b      	lsls	r3, r3, #22
 8005fe2:	d4dd      	bmi.n	8005fa0 <_fflush_r+0xc>
 8005fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fe6:	f000 f908 	bl	80061fa <__retarget_lock_release_recursive>
 8005fea:	e7d9      	b.n	8005fa0 <_fflush_r+0xc>
 8005fec:	4b05      	ldr	r3, [pc, #20]	; (8006004 <_fflush_r+0x70>)
 8005fee:	429c      	cmp	r4, r3
 8005ff0:	d101      	bne.n	8005ff6 <_fflush_r+0x62>
 8005ff2:	68ac      	ldr	r4, [r5, #8]
 8005ff4:	e7df      	b.n	8005fb6 <_fflush_r+0x22>
 8005ff6:	4b04      	ldr	r3, [pc, #16]	; (8006008 <_fflush_r+0x74>)
 8005ff8:	429c      	cmp	r4, r3
 8005ffa:	bf08      	it	eq
 8005ffc:	68ec      	ldreq	r4, [r5, #12]
 8005ffe:	e7da      	b.n	8005fb6 <_fflush_r+0x22>
 8006000:	08007044 	.word	0x08007044
 8006004:	08007064 	.word	0x08007064
 8006008:	08007024 	.word	0x08007024

0800600c <std>:
 800600c:	2300      	movs	r3, #0
 800600e:	b510      	push	{r4, lr}
 8006010:	4604      	mov	r4, r0
 8006012:	e9c0 3300 	strd	r3, r3, [r0]
 8006016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800601a:	6083      	str	r3, [r0, #8]
 800601c:	8181      	strh	r1, [r0, #12]
 800601e:	6643      	str	r3, [r0, #100]	; 0x64
 8006020:	81c2      	strh	r2, [r0, #14]
 8006022:	6183      	str	r3, [r0, #24]
 8006024:	4619      	mov	r1, r3
 8006026:	2208      	movs	r2, #8
 8006028:	305c      	adds	r0, #92	; 0x5c
 800602a:	f7ff fd09 	bl	8005a40 <memset>
 800602e:	4b05      	ldr	r3, [pc, #20]	; (8006044 <std+0x38>)
 8006030:	6263      	str	r3, [r4, #36]	; 0x24
 8006032:	4b05      	ldr	r3, [pc, #20]	; (8006048 <std+0x3c>)
 8006034:	62a3      	str	r3, [r4, #40]	; 0x28
 8006036:	4b05      	ldr	r3, [pc, #20]	; (800604c <std+0x40>)
 8006038:	62e3      	str	r3, [r4, #44]	; 0x2c
 800603a:	4b05      	ldr	r3, [pc, #20]	; (8006050 <std+0x44>)
 800603c:	6224      	str	r4, [r4, #32]
 800603e:	6323      	str	r3, [r4, #48]	; 0x30
 8006040:	bd10      	pop	{r4, pc}
 8006042:	bf00      	nop
 8006044:	08006a95 	.word	0x08006a95
 8006048:	08006ab7 	.word	0x08006ab7
 800604c:	08006aef 	.word	0x08006aef
 8006050:	08006b13 	.word	0x08006b13

08006054 <_cleanup_r>:
 8006054:	4901      	ldr	r1, [pc, #4]	; (800605c <_cleanup_r+0x8>)
 8006056:	f000 b8af 	b.w	80061b8 <_fwalk_reent>
 800605a:	bf00      	nop
 800605c:	08005f95 	.word	0x08005f95

08006060 <__sfmoreglue>:
 8006060:	b570      	push	{r4, r5, r6, lr}
 8006062:	2268      	movs	r2, #104	; 0x68
 8006064:	1e4d      	subs	r5, r1, #1
 8006066:	4355      	muls	r5, r2
 8006068:	460e      	mov	r6, r1
 800606a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800606e:	f000 f99f 	bl	80063b0 <_malloc_r>
 8006072:	4604      	mov	r4, r0
 8006074:	b140      	cbz	r0, 8006088 <__sfmoreglue+0x28>
 8006076:	2100      	movs	r1, #0
 8006078:	e9c0 1600 	strd	r1, r6, [r0]
 800607c:	300c      	adds	r0, #12
 800607e:	60a0      	str	r0, [r4, #8]
 8006080:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006084:	f7ff fcdc 	bl	8005a40 <memset>
 8006088:	4620      	mov	r0, r4
 800608a:	bd70      	pop	{r4, r5, r6, pc}

0800608c <__sfp_lock_acquire>:
 800608c:	4801      	ldr	r0, [pc, #4]	; (8006094 <__sfp_lock_acquire+0x8>)
 800608e:	f000 b8b3 	b.w	80061f8 <__retarget_lock_acquire_recursive>
 8006092:	bf00      	nop
 8006094:	2000088d 	.word	0x2000088d

08006098 <__sfp_lock_release>:
 8006098:	4801      	ldr	r0, [pc, #4]	; (80060a0 <__sfp_lock_release+0x8>)
 800609a:	f000 b8ae 	b.w	80061fa <__retarget_lock_release_recursive>
 800609e:	bf00      	nop
 80060a0:	2000088d 	.word	0x2000088d

080060a4 <__sinit_lock_acquire>:
 80060a4:	4801      	ldr	r0, [pc, #4]	; (80060ac <__sinit_lock_acquire+0x8>)
 80060a6:	f000 b8a7 	b.w	80061f8 <__retarget_lock_acquire_recursive>
 80060aa:	bf00      	nop
 80060ac:	2000088e 	.word	0x2000088e

080060b0 <__sinit_lock_release>:
 80060b0:	4801      	ldr	r0, [pc, #4]	; (80060b8 <__sinit_lock_release+0x8>)
 80060b2:	f000 b8a2 	b.w	80061fa <__retarget_lock_release_recursive>
 80060b6:	bf00      	nop
 80060b8:	2000088e 	.word	0x2000088e

080060bc <__sinit>:
 80060bc:	b510      	push	{r4, lr}
 80060be:	4604      	mov	r4, r0
 80060c0:	f7ff fff0 	bl	80060a4 <__sinit_lock_acquire>
 80060c4:	69a3      	ldr	r3, [r4, #24]
 80060c6:	b11b      	cbz	r3, 80060d0 <__sinit+0x14>
 80060c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060cc:	f7ff bff0 	b.w	80060b0 <__sinit_lock_release>
 80060d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80060d4:	6523      	str	r3, [r4, #80]	; 0x50
 80060d6:	4b13      	ldr	r3, [pc, #76]	; (8006124 <__sinit+0x68>)
 80060d8:	4a13      	ldr	r2, [pc, #76]	; (8006128 <__sinit+0x6c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80060de:	42a3      	cmp	r3, r4
 80060e0:	bf04      	itt	eq
 80060e2:	2301      	moveq	r3, #1
 80060e4:	61a3      	streq	r3, [r4, #24]
 80060e6:	4620      	mov	r0, r4
 80060e8:	f000 f820 	bl	800612c <__sfp>
 80060ec:	6060      	str	r0, [r4, #4]
 80060ee:	4620      	mov	r0, r4
 80060f0:	f000 f81c 	bl	800612c <__sfp>
 80060f4:	60a0      	str	r0, [r4, #8]
 80060f6:	4620      	mov	r0, r4
 80060f8:	f000 f818 	bl	800612c <__sfp>
 80060fc:	2200      	movs	r2, #0
 80060fe:	60e0      	str	r0, [r4, #12]
 8006100:	2104      	movs	r1, #4
 8006102:	6860      	ldr	r0, [r4, #4]
 8006104:	f7ff ff82 	bl	800600c <std>
 8006108:	68a0      	ldr	r0, [r4, #8]
 800610a:	2201      	movs	r2, #1
 800610c:	2109      	movs	r1, #9
 800610e:	f7ff ff7d 	bl	800600c <std>
 8006112:	68e0      	ldr	r0, [r4, #12]
 8006114:	2202      	movs	r2, #2
 8006116:	2112      	movs	r1, #18
 8006118:	f7ff ff78 	bl	800600c <std>
 800611c:	2301      	movs	r3, #1
 800611e:	61a3      	str	r3, [r4, #24]
 8006120:	e7d2      	b.n	80060c8 <__sinit+0xc>
 8006122:	bf00      	nop
 8006124:	08007020 	.word	0x08007020
 8006128:	08006055 	.word	0x08006055

0800612c <__sfp>:
 800612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612e:	4607      	mov	r7, r0
 8006130:	f7ff ffac 	bl	800608c <__sfp_lock_acquire>
 8006134:	4b1e      	ldr	r3, [pc, #120]	; (80061b0 <__sfp+0x84>)
 8006136:	681e      	ldr	r6, [r3, #0]
 8006138:	69b3      	ldr	r3, [r6, #24]
 800613a:	b913      	cbnz	r3, 8006142 <__sfp+0x16>
 800613c:	4630      	mov	r0, r6
 800613e:	f7ff ffbd 	bl	80060bc <__sinit>
 8006142:	3648      	adds	r6, #72	; 0x48
 8006144:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006148:	3b01      	subs	r3, #1
 800614a:	d503      	bpl.n	8006154 <__sfp+0x28>
 800614c:	6833      	ldr	r3, [r6, #0]
 800614e:	b30b      	cbz	r3, 8006194 <__sfp+0x68>
 8006150:	6836      	ldr	r6, [r6, #0]
 8006152:	e7f7      	b.n	8006144 <__sfp+0x18>
 8006154:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006158:	b9d5      	cbnz	r5, 8006190 <__sfp+0x64>
 800615a:	4b16      	ldr	r3, [pc, #88]	; (80061b4 <__sfp+0x88>)
 800615c:	60e3      	str	r3, [r4, #12]
 800615e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006162:	6665      	str	r5, [r4, #100]	; 0x64
 8006164:	f000 f847 	bl	80061f6 <__retarget_lock_init_recursive>
 8006168:	f7ff ff96 	bl	8006098 <__sfp_lock_release>
 800616c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006170:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006174:	6025      	str	r5, [r4, #0]
 8006176:	61a5      	str	r5, [r4, #24]
 8006178:	2208      	movs	r2, #8
 800617a:	4629      	mov	r1, r5
 800617c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006180:	f7ff fc5e 	bl	8005a40 <memset>
 8006184:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006188:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800618c:	4620      	mov	r0, r4
 800618e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006190:	3468      	adds	r4, #104	; 0x68
 8006192:	e7d9      	b.n	8006148 <__sfp+0x1c>
 8006194:	2104      	movs	r1, #4
 8006196:	4638      	mov	r0, r7
 8006198:	f7ff ff62 	bl	8006060 <__sfmoreglue>
 800619c:	4604      	mov	r4, r0
 800619e:	6030      	str	r0, [r6, #0]
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d1d5      	bne.n	8006150 <__sfp+0x24>
 80061a4:	f7ff ff78 	bl	8006098 <__sfp_lock_release>
 80061a8:	230c      	movs	r3, #12
 80061aa:	603b      	str	r3, [r7, #0]
 80061ac:	e7ee      	b.n	800618c <__sfp+0x60>
 80061ae:	bf00      	nop
 80061b0:	08007020 	.word	0x08007020
 80061b4:	ffff0001 	.word	0xffff0001

080061b8 <_fwalk_reent>:
 80061b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061bc:	4606      	mov	r6, r0
 80061be:	4688      	mov	r8, r1
 80061c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061c4:	2700      	movs	r7, #0
 80061c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061ca:	f1b9 0901 	subs.w	r9, r9, #1
 80061ce:	d505      	bpl.n	80061dc <_fwalk_reent+0x24>
 80061d0:	6824      	ldr	r4, [r4, #0]
 80061d2:	2c00      	cmp	r4, #0
 80061d4:	d1f7      	bne.n	80061c6 <_fwalk_reent+0xe>
 80061d6:	4638      	mov	r0, r7
 80061d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061dc:	89ab      	ldrh	r3, [r5, #12]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d907      	bls.n	80061f2 <_fwalk_reent+0x3a>
 80061e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061e6:	3301      	adds	r3, #1
 80061e8:	d003      	beq.n	80061f2 <_fwalk_reent+0x3a>
 80061ea:	4629      	mov	r1, r5
 80061ec:	4630      	mov	r0, r6
 80061ee:	47c0      	blx	r8
 80061f0:	4307      	orrs	r7, r0
 80061f2:	3568      	adds	r5, #104	; 0x68
 80061f4:	e7e9      	b.n	80061ca <_fwalk_reent+0x12>

080061f6 <__retarget_lock_init_recursive>:
 80061f6:	4770      	bx	lr

080061f8 <__retarget_lock_acquire_recursive>:
 80061f8:	4770      	bx	lr

080061fa <__retarget_lock_release_recursive>:
 80061fa:	4770      	bx	lr

080061fc <__swhatbuf_r>:
 80061fc:	b570      	push	{r4, r5, r6, lr}
 80061fe:	460e      	mov	r6, r1
 8006200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006204:	2900      	cmp	r1, #0
 8006206:	b096      	sub	sp, #88	; 0x58
 8006208:	4614      	mov	r4, r2
 800620a:	461d      	mov	r5, r3
 800620c:	da08      	bge.n	8006220 <__swhatbuf_r+0x24>
 800620e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	602a      	str	r2, [r5, #0]
 8006216:	061a      	lsls	r2, r3, #24
 8006218:	d410      	bmi.n	800623c <__swhatbuf_r+0x40>
 800621a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800621e:	e00e      	b.n	800623e <__swhatbuf_r+0x42>
 8006220:	466a      	mov	r2, sp
 8006222:	f000 fc9d 	bl	8006b60 <_fstat_r>
 8006226:	2800      	cmp	r0, #0
 8006228:	dbf1      	blt.n	800620e <__swhatbuf_r+0x12>
 800622a:	9a01      	ldr	r2, [sp, #4]
 800622c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006230:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006234:	425a      	negs	r2, r3
 8006236:	415a      	adcs	r2, r3
 8006238:	602a      	str	r2, [r5, #0]
 800623a:	e7ee      	b.n	800621a <__swhatbuf_r+0x1e>
 800623c:	2340      	movs	r3, #64	; 0x40
 800623e:	2000      	movs	r0, #0
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	b016      	add	sp, #88	; 0x58
 8006244:	bd70      	pop	{r4, r5, r6, pc}
	...

08006248 <__smakebuf_r>:
 8006248:	898b      	ldrh	r3, [r1, #12]
 800624a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800624c:	079d      	lsls	r5, r3, #30
 800624e:	4606      	mov	r6, r0
 8006250:	460c      	mov	r4, r1
 8006252:	d507      	bpl.n	8006264 <__smakebuf_r+0x1c>
 8006254:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	6123      	str	r3, [r4, #16]
 800625c:	2301      	movs	r3, #1
 800625e:	6163      	str	r3, [r4, #20]
 8006260:	b002      	add	sp, #8
 8006262:	bd70      	pop	{r4, r5, r6, pc}
 8006264:	ab01      	add	r3, sp, #4
 8006266:	466a      	mov	r2, sp
 8006268:	f7ff ffc8 	bl	80061fc <__swhatbuf_r>
 800626c:	9900      	ldr	r1, [sp, #0]
 800626e:	4605      	mov	r5, r0
 8006270:	4630      	mov	r0, r6
 8006272:	f000 f89d 	bl	80063b0 <_malloc_r>
 8006276:	b948      	cbnz	r0, 800628c <__smakebuf_r+0x44>
 8006278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800627c:	059a      	lsls	r2, r3, #22
 800627e:	d4ef      	bmi.n	8006260 <__smakebuf_r+0x18>
 8006280:	f023 0303 	bic.w	r3, r3, #3
 8006284:	f043 0302 	orr.w	r3, r3, #2
 8006288:	81a3      	strh	r3, [r4, #12]
 800628a:	e7e3      	b.n	8006254 <__smakebuf_r+0xc>
 800628c:	4b0d      	ldr	r3, [pc, #52]	; (80062c4 <__smakebuf_r+0x7c>)
 800628e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006290:	89a3      	ldrh	r3, [r4, #12]
 8006292:	6020      	str	r0, [r4, #0]
 8006294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006298:	81a3      	strh	r3, [r4, #12]
 800629a:	9b00      	ldr	r3, [sp, #0]
 800629c:	6163      	str	r3, [r4, #20]
 800629e:	9b01      	ldr	r3, [sp, #4]
 80062a0:	6120      	str	r0, [r4, #16]
 80062a2:	b15b      	cbz	r3, 80062bc <__smakebuf_r+0x74>
 80062a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062a8:	4630      	mov	r0, r6
 80062aa:	f000 fc6b 	bl	8006b84 <_isatty_r>
 80062ae:	b128      	cbz	r0, 80062bc <__smakebuf_r+0x74>
 80062b0:	89a3      	ldrh	r3, [r4, #12]
 80062b2:	f023 0303 	bic.w	r3, r3, #3
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	81a3      	strh	r3, [r4, #12]
 80062bc:	89a0      	ldrh	r0, [r4, #12]
 80062be:	4305      	orrs	r5, r0
 80062c0:	81a5      	strh	r5, [r4, #12]
 80062c2:	e7cd      	b.n	8006260 <__smakebuf_r+0x18>
 80062c4:	08006055 	.word	0x08006055

080062c8 <malloc>:
 80062c8:	4b02      	ldr	r3, [pc, #8]	; (80062d4 <malloc+0xc>)
 80062ca:	4601      	mov	r1, r0
 80062cc:	6818      	ldr	r0, [r3, #0]
 80062ce:	f000 b86f 	b.w	80063b0 <_malloc_r>
 80062d2:	bf00      	nop
 80062d4:	2000000c 	.word	0x2000000c

080062d8 <_free_r>:
 80062d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062da:	2900      	cmp	r1, #0
 80062dc:	d044      	beq.n	8006368 <_free_r+0x90>
 80062de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062e2:	9001      	str	r0, [sp, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f1a1 0404 	sub.w	r4, r1, #4
 80062ea:	bfb8      	it	lt
 80062ec:	18e4      	addlt	r4, r4, r3
 80062ee:	f000 fc6b 	bl	8006bc8 <__malloc_lock>
 80062f2:	4a1e      	ldr	r2, [pc, #120]	; (800636c <_free_r+0x94>)
 80062f4:	9801      	ldr	r0, [sp, #4]
 80062f6:	6813      	ldr	r3, [r2, #0]
 80062f8:	b933      	cbnz	r3, 8006308 <_free_r+0x30>
 80062fa:	6063      	str	r3, [r4, #4]
 80062fc:	6014      	str	r4, [r2, #0]
 80062fe:	b003      	add	sp, #12
 8006300:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006304:	f000 bc66 	b.w	8006bd4 <__malloc_unlock>
 8006308:	42a3      	cmp	r3, r4
 800630a:	d908      	bls.n	800631e <_free_r+0x46>
 800630c:	6825      	ldr	r5, [r4, #0]
 800630e:	1961      	adds	r1, r4, r5
 8006310:	428b      	cmp	r3, r1
 8006312:	bf01      	itttt	eq
 8006314:	6819      	ldreq	r1, [r3, #0]
 8006316:	685b      	ldreq	r3, [r3, #4]
 8006318:	1949      	addeq	r1, r1, r5
 800631a:	6021      	streq	r1, [r4, #0]
 800631c:	e7ed      	b.n	80062fa <_free_r+0x22>
 800631e:	461a      	mov	r2, r3
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	b10b      	cbz	r3, 8006328 <_free_r+0x50>
 8006324:	42a3      	cmp	r3, r4
 8006326:	d9fa      	bls.n	800631e <_free_r+0x46>
 8006328:	6811      	ldr	r1, [r2, #0]
 800632a:	1855      	adds	r5, r2, r1
 800632c:	42a5      	cmp	r5, r4
 800632e:	d10b      	bne.n	8006348 <_free_r+0x70>
 8006330:	6824      	ldr	r4, [r4, #0]
 8006332:	4421      	add	r1, r4
 8006334:	1854      	adds	r4, r2, r1
 8006336:	42a3      	cmp	r3, r4
 8006338:	6011      	str	r1, [r2, #0]
 800633a:	d1e0      	bne.n	80062fe <_free_r+0x26>
 800633c:	681c      	ldr	r4, [r3, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	6053      	str	r3, [r2, #4]
 8006342:	4421      	add	r1, r4
 8006344:	6011      	str	r1, [r2, #0]
 8006346:	e7da      	b.n	80062fe <_free_r+0x26>
 8006348:	d902      	bls.n	8006350 <_free_r+0x78>
 800634a:	230c      	movs	r3, #12
 800634c:	6003      	str	r3, [r0, #0]
 800634e:	e7d6      	b.n	80062fe <_free_r+0x26>
 8006350:	6825      	ldr	r5, [r4, #0]
 8006352:	1961      	adds	r1, r4, r5
 8006354:	428b      	cmp	r3, r1
 8006356:	bf04      	itt	eq
 8006358:	6819      	ldreq	r1, [r3, #0]
 800635a:	685b      	ldreq	r3, [r3, #4]
 800635c:	6063      	str	r3, [r4, #4]
 800635e:	bf04      	itt	eq
 8006360:	1949      	addeq	r1, r1, r5
 8006362:	6021      	streq	r1, [r4, #0]
 8006364:	6054      	str	r4, [r2, #4]
 8006366:	e7ca      	b.n	80062fe <_free_r+0x26>
 8006368:	b003      	add	sp, #12
 800636a:	bd30      	pop	{r4, r5, pc}
 800636c:	20000890 	.word	0x20000890

08006370 <sbrk_aligned>:
 8006370:	b570      	push	{r4, r5, r6, lr}
 8006372:	4e0e      	ldr	r6, [pc, #56]	; (80063ac <sbrk_aligned+0x3c>)
 8006374:	460c      	mov	r4, r1
 8006376:	6831      	ldr	r1, [r6, #0]
 8006378:	4605      	mov	r5, r0
 800637a:	b911      	cbnz	r1, 8006382 <sbrk_aligned+0x12>
 800637c:	f000 fb7a 	bl	8006a74 <_sbrk_r>
 8006380:	6030      	str	r0, [r6, #0]
 8006382:	4621      	mov	r1, r4
 8006384:	4628      	mov	r0, r5
 8006386:	f000 fb75 	bl	8006a74 <_sbrk_r>
 800638a:	1c43      	adds	r3, r0, #1
 800638c:	d00a      	beq.n	80063a4 <sbrk_aligned+0x34>
 800638e:	1cc4      	adds	r4, r0, #3
 8006390:	f024 0403 	bic.w	r4, r4, #3
 8006394:	42a0      	cmp	r0, r4
 8006396:	d007      	beq.n	80063a8 <sbrk_aligned+0x38>
 8006398:	1a21      	subs	r1, r4, r0
 800639a:	4628      	mov	r0, r5
 800639c:	f000 fb6a 	bl	8006a74 <_sbrk_r>
 80063a0:	3001      	adds	r0, #1
 80063a2:	d101      	bne.n	80063a8 <sbrk_aligned+0x38>
 80063a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80063a8:	4620      	mov	r0, r4
 80063aa:	bd70      	pop	{r4, r5, r6, pc}
 80063ac:	20000894 	.word	0x20000894

080063b0 <_malloc_r>:
 80063b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063b4:	1ccd      	adds	r5, r1, #3
 80063b6:	f025 0503 	bic.w	r5, r5, #3
 80063ba:	3508      	adds	r5, #8
 80063bc:	2d0c      	cmp	r5, #12
 80063be:	bf38      	it	cc
 80063c0:	250c      	movcc	r5, #12
 80063c2:	2d00      	cmp	r5, #0
 80063c4:	4607      	mov	r7, r0
 80063c6:	db01      	blt.n	80063cc <_malloc_r+0x1c>
 80063c8:	42a9      	cmp	r1, r5
 80063ca:	d905      	bls.n	80063d8 <_malloc_r+0x28>
 80063cc:	230c      	movs	r3, #12
 80063ce:	603b      	str	r3, [r7, #0]
 80063d0:	2600      	movs	r6, #0
 80063d2:	4630      	mov	r0, r6
 80063d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063d8:	4e2e      	ldr	r6, [pc, #184]	; (8006494 <_malloc_r+0xe4>)
 80063da:	f000 fbf5 	bl	8006bc8 <__malloc_lock>
 80063de:	6833      	ldr	r3, [r6, #0]
 80063e0:	461c      	mov	r4, r3
 80063e2:	bb34      	cbnz	r4, 8006432 <_malloc_r+0x82>
 80063e4:	4629      	mov	r1, r5
 80063e6:	4638      	mov	r0, r7
 80063e8:	f7ff ffc2 	bl	8006370 <sbrk_aligned>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	4604      	mov	r4, r0
 80063f0:	d14d      	bne.n	800648e <_malloc_r+0xde>
 80063f2:	6834      	ldr	r4, [r6, #0]
 80063f4:	4626      	mov	r6, r4
 80063f6:	2e00      	cmp	r6, #0
 80063f8:	d140      	bne.n	800647c <_malloc_r+0xcc>
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	4631      	mov	r1, r6
 80063fe:	4638      	mov	r0, r7
 8006400:	eb04 0803 	add.w	r8, r4, r3
 8006404:	f000 fb36 	bl	8006a74 <_sbrk_r>
 8006408:	4580      	cmp	r8, r0
 800640a:	d13a      	bne.n	8006482 <_malloc_r+0xd2>
 800640c:	6821      	ldr	r1, [r4, #0]
 800640e:	3503      	adds	r5, #3
 8006410:	1a6d      	subs	r5, r5, r1
 8006412:	f025 0503 	bic.w	r5, r5, #3
 8006416:	3508      	adds	r5, #8
 8006418:	2d0c      	cmp	r5, #12
 800641a:	bf38      	it	cc
 800641c:	250c      	movcc	r5, #12
 800641e:	4629      	mov	r1, r5
 8006420:	4638      	mov	r0, r7
 8006422:	f7ff ffa5 	bl	8006370 <sbrk_aligned>
 8006426:	3001      	adds	r0, #1
 8006428:	d02b      	beq.n	8006482 <_malloc_r+0xd2>
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	442b      	add	r3, r5
 800642e:	6023      	str	r3, [r4, #0]
 8006430:	e00e      	b.n	8006450 <_malloc_r+0xa0>
 8006432:	6822      	ldr	r2, [r4, #0]
 8006434:	1b52      	subs	r2, r2, r5
 8006436:	d41e      	bmi.n	8006476 <_malloc_r+0xc6>
 8006438:	2a0b      	cmp	r2, #11
 800643a:	d916      	bls.n	800646a <_malloc_r+0xba>
 800643c:	1961      	adds	r1, r4, r5
 800643e:	42a3      	cmp	r3, r4
 8006440:	6025      	str	r5, [r4, #0]
 8006442:	bf18      	it	ne
 8006444:	6059      	strne	r1, [r3, #4]
 8006446:	6863      	ldr	r3, [r4, #4]
 8006448:	bf08      	it	eq
 800644a:	6031      	streq	r1, [r6, #0]
 800644c:	5162      	str	r2, [r4, r5]
 800644e:	604b      	str	r3, [r1, #4]
 8006450:	4638      	mov	r0, r7
 8006452:	f104 060b 	add.w	r6, r4, #11
 8006456:	f000 fbbd 	bl	8006bd4 <__malloc_unlock>
 800645a:	f026 0607 	bic.w	r6, r6, #7
 800645e:	1d23      	adds	r3, r4, #4
 8006460:	1af2      	subs	r2, r6, r3
 8006462:	d0b6      	beq.n	80063d2 <_malloc_r+0x22>
 8006464:	1b9b      	subs	r3, r3, r6
 8006466:	50a3      	str	r3, [r4, r2]
 8006468:	e7b3      	b.n	80063d2 <_malloc_r+0x22>
 800646a:	6862      	ldr	r2, [r4, #4]
 800646c:	42a3      	cmp	r3, r4
 800646e:	bf0c      	ite	eq
 8006470:	6032      	streq	r2, [r6, #0]
 8006472:	605a      	strne	r2, [r3, #4]
 8006474:	e7ec      	b.n	8006450 <_malloc_r+0xa0>
 8006476:	4623      	mov	r3, r4
 8006478:	6864      	ldr	r4, [r4, #4]
 800647a:	e7b2      	b.n	80063e2 <_malloc_r+0x32>
 800647c:	4634      	mov	r4, r6
 800647e:	6876      	ldr	r6, [r6, #4]
 8006480:	e7b9      	b.n	80063f6 <_malloc_r+0x46>
 8006482:	230c      	movs	r3, #12
 8006484:	603b      	str	r3, [r7, #0]
 8006486:	4638      	mov	r0, r7
 8006488:	f000 fba4 	bl	8006bd4 <__malloc_unlock>
 800648c:	e7a1      	b.n	80063d2 <_malloc_r+0x22>
 800648e:	6025      	str	r5, [r4, #0]
 8006490:	e7de      	b.n	8006450 <_malloc_r+0xa0>
 8006492:	bf00      	nop
 8006494:	20000890 	.word	0x20000890

08006498 <__sfputc_r>:
 8006498:	6893      	ldr	r3, [r2, #8]
 800649a:	3b01      	subs	r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	b410      	push	{r4}
 80064a0:	6093      	str	r3, [r2, #8]
 80064a2:	da08      	bge.n	80064b6 <__sfputc_r+0x1e>
 80064a4:	6994      	ldr	r4, [r2, #24]
 80064a6:	42a3      	cmp	r3, r4
 80064a8:	db01      	blt.n	80064ae <__sfputc_r+0x16>
 80064aa:	290a      	cmp	r1, #10
 80064ac:	d103      	bne.n	80064b6 <__sfputc_r+0x1e>
 80064ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064b2:	f7ff bc29 	b.w	8005d08 <__swbuf_r>
 80064b6:	6813      	ldr	r3, [r2, #0]
 80064b8:	1c58      	adds	r0, r3, #1
 80064ba:	6010      	str	r0, [r2, #0]
 80064bc:	7019      	strb	r1, [r3, #0]
 80064be:	4608      	mov	r0, r1
 80064c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <__sfputs_r>:
 80064c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c8:	4606      	mov	r6, r0
 80064ca:	460f      	mov	r7, r1
 80064cc:	4614      	mov	r4, r2
 80064ce:	18d5      	adds	r5, r2, r3
 80064d0:	42ac      	cmp	r4, r5
 80064d2:	d101      	bne.n	80064d8 <__sfputs_r+0x12>
 80064d4:	2000      	movs	r0, #0
 80064d6:	e007      	b.n	80064e8 <__sfputs_r+0x22>
 80064d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064dc:	463a      	mov	r2, r7
 80064de:	4630      	mov	r0, r6
 80064e0:	f7ff ffda 	bl	8006498 <__sfputc_r>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d1f3      	bne.n	80064d0 <__sfputs_r+0xa>
 80064e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064ec <_vfiprintf_r>:
 80064ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f0:	460d      	mov	r5, r1
 80064f2:	b09d      	sub	sp, #116	; 0x74
 80064f4:	4614      	mov	r4, r2
 80064f6:	4698      	mov	r8, r3
 80064f8:	4606      	mov	r6, r0
 80064fa:	b118      	cbz	r0, 8006504 <_vfiprintf_r+0x18>
 80064fc:	6983      	ldr	r3, [r0, #24]
 80064fe:	b90b      	cbnz	r3, 8006504 <_vfiprintf_r+0x18>
 8006500:	f7ff fddc 	bl	80060bc <__sinit>
 8006504:	4b89      	ldr	r3, [pc, #548]	; (800672c <_vfiprintf_r+0x240>)
 8006506:	429d      	cmp	r5, r3
 8006508:	d11b      	bne.n	8006542 <_vfiprintf_r+0x56>
 800650a:	6875      	ldr	r5, [r6, #4]
 800650c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800650e:	07d9      	lsls	r1, r3, #31
 8006510:	d405      	bmi.n	800651e <_vfiprintf_r+0x32>
 8006512:	89ab      	ldrh	r3, [r5, #12]
 8006514:	059a      	lsls	r2, r3, #22
 8006516:	d402      	bmi.n	800651e <_vfiprintf_r+0x32>
 8006518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800651a:	f7ff fe6d 	bl	80061f8 <__retarget_lock_acquire_recursive>
 800651e:	89ab      	ldrh	r3, [r5, #12]
 8006520:	071b      	lsls	r3, r3, #28
 8006522:	d501      	bpl.n	8006528 <_vfiprintf_r+0x3c>
 8006524:	692b      	ldr	r3, [r5, #16]
 8006526:	b9eb      	cbnz	r3, 8006564 <_vfiprintf_r+0x78>
 8006528:	4629      	mov	r1, r5
 800652a:	4630      	mov	r0, r6
 800652c:	f7ff fc3e 	bl	8005dac <__swsetup_r>
 8006530:	b1c0      	cbz	r0, 8006564 <_vfiprintf_r+0x78>
 8006532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006534:	07dc      	lsls	r4, r3, #31
 8006536:	d50e      	bpl.n	8006556 <_vfiprintf_r+0x6a>
 8006538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800653c:	b01d      	add	sp, #116	; 0x74
 800653e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006542:	4b7b      	ldr	r3, [pc, #492]	; (8006730 <_vfiprintf_r+0x244>)
 8006544:	429d      	cmp	r5, r3
 8006546:	d101      	bne.n	800654c <_vfiprintf_r+0x60>
 8006548:	68b5      	ldr	r5, [r6, #8]
 800654a:	e7df      	b.n	800650c <_vfiprintf_r+0x20>
 800654c:	4b79      	ldr	r3, [pc, #484]	; (8006734 <_vfiprintf_r+0x248>)
 800654e:	429d      	cmp	r5, r3
 8006550:	bf08      	it	eq
 8006552:	68f5      	ldreq	r5, [r6, #12]
 8006554:	e7da      	b.n	800650c <_vfiprintf_r+0x20>
 8006556:	89ab      	ldrh	r3, [r5, #12]
 8006558:	0598      	lsls	r0, r3, #22
 800655a:	d4ed      	bmi.n	8006538 <_vfiprintf_r+0x4c>
 800655c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800655e:	f7ff fe4c 	bl	80061fa <__retarget_lock_release_recursive>
 8006562:	e7e9      	b.n	8006538 <_vfiprintf_r+0x4c>
 8006564:	2300      	movs	r3, #0
 8006566:	9309      	str	r3, [sp, #36]	; 0x24
 8006568:	2320      	movs	r3, #32
 800656a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800656e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006572:	2330      	movs	r3, #48	; 0x30
 8006574:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006738 <_vfiprintf_r+0x24c>
 8006578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800657c:	f04f 0901 	mov.w	r9, #1
 8006580:	4623      	mov	r3, r4
 8006582:	469a      	mov	sl, r3
 8006584:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006588:	b10a      	cbz	r2, 800658e <_vfiprintf_r+0xa2>
 800658a:	2a25      	cmp	r2, #37	; 0x25
 800658c:	d1f9      	bne.n	8006582 <_vfiprintf_r+0x96>
 800658e:	ebba 0b04 	subs.w	fp, sl, r4
 8006592:	d00b      	beq.n	80065ac <_vfiprintf_r+0xc0>
 8006594:	465b      	mov	r3, fp
 8006596:	4622      	mov	r2, r4
 8006598:	4629      	mov	r1, r5
 800659a:	4630      	mov	r0, r6
 800659c:	f7ff ff93 	bl	80064c6 <__sfputs_r>
 80065a0:	3001      	adds	r0, #1
 80065a2:	f000 80aa 	beq.w	80066fa <_vfiprintf_r+0x20e>
 80065a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065a8:	445a      	add	r2, fp
 80065aa:	9209      	str	r2, [sp, #36]	; 0x24
 80065ac:	f89a 3000 	ldrb.w	r3, [sl]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 80a2 	beq.w	80066fa <_vfiprintf_r+0x20e>
 80065b6:	2300      	movs	r3, #0
 80065b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065c0:	f10a 0a01 	add.w	sl, sl, #1
 80065c4:	9304      	str	r3, [sp, #16]
 80065c6:	9307      	str	r3, [sp, #28]
 80065c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065cc:	931a      	str	r3, [sp, #104]	; 0x68
 80065ce:	4654      	mov	r4, sl
 80065d0:	2205      	movs	r2, #5
 80065d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065d6:	4858      	ldr	r0, [pc, #352]	; (8006738 <_vfiprintf_r+0x24c>)
 80065d8:	f7f9 fdfa 	bl	80001d0 <memchr>
 80065dc:	9a04      	ldr	r2, [sp, #16]
 80065de:	b9d8      	cbnz	r0, 8006618 <_vfiprintf_r+0x12c>
 80065e0:	06d1      	lsls	r1, r2, #27
 80065e2:	bf44      	itt	mi
 80065e4:	2320      	movmi	r3, #32
 80065e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065ea:	0713      	lsls	r3, r2, #28
 80065ec:	bf44      	itt	mi
 80065ee:	232b      	movmi	r3, #43	; 0x2b
 80065f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065f4:	f89a 3000 	ldrb.w	r3, [sl]
 80065f8:	2b2a      	cmp	r3, #42	; 0x2a
 80065fa:	d015      	beq.n	8006628 <_vfiprintf_r+0x13c>
 80065fc:	9a07      	ldr	r2, [sp, #28]
 80065fe:	4654      	mov	r4, sl
 8006600:	2000      	movs	r0, #0
 8006602:	f04f 0c0a 	mov.w	ip, #10
 8006606:	4621      	mov	r1, r4
 8006608:	f811 3b01 	ldrb.w	r3, [r1], #1
 800660c:	3b30      	subs	r3, #48	; 0x30
 800660e:	2b09      	cmp	r3, #9
 8006610:	d94e      	bls.n	80066b0 <_vfiprintf_r+0x1c4>
 8006612:	b1b0      	cbz	r0, 8006642 <_vfiprintf_r+0x156>
 8006614:	9207      	str	r2, [sp, #28]
 8006616:	e014      	b.n	8006642 <_vfiprintf_r+0x156>
 8006618:	eba0 0308 	sub.w	r3, r0, r8
 800661c:	fa09 f303 	lsl.w	r3, r9, r3
 8006620:	4313      	orrs	r3, r2
 8006622:	9304      	str	r3, [sp, #16]
 8006624:	46a2      	mov	sl, r4
 8006626:	e7d2      	b.n	80065ce <_vfiprintf_r+0xe2>
 8006628:	9b03      	ldr	r3, [sp, #12]
 800662a:	1d19      	adds	r1, r3, #4
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	9103      	str	r1, [sp, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	bfbb      	ittet	lt
 8006634:	425b      	neglt	r3, r3
 8006636:	f042 0202 	orrlt.w	r2, r2, #2
 800663a:	9307      	strge	r3, [sp, #28]
 800663c:	9307      	strlt	r3, [sp, #28]
 800663e:	bfb8      	it	lt
 8006640:	9204      	strlt	r2, [sp, #16]
 8006642:	7823      	ldrb	r3, [r4, #0]
 8006644:	2b2e      	cmp	r3, #46	; 0x2e
 8006646:	d10c      	bne.n	8006662 <_vfiprintf_r+0x176>
 8006648:	7863      	ldrb	r3, [r4, #1]
 800664a:	2b2a      	cmp	r3, #42	; 0x2a
 800664c:	d135      	bne.n	80066ba <_vfiprintf_r+0x1ce>
 800664e:	9b03      	ldr	r3, [sp, #12]
 8006650:	1d1a      	adds	r2, r3, #4
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	9203      	str	r2, [sp, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	bfb8      	it	lt
 800665a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800665e:	3402      	adds	r4, #2
 8006660:	9305      	str	r3, [sp, #20]
 8006662:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006748 <_vfiprintf_r+0x25c>
 8006666:	7821      	ldrb	r1, [r4, #0]
 8006668:	2203      	movs	r2, #3
 800666a:	4650      	mov	r0, sl
 800666c:	f7f9 fdb0 	bl	80001d0 <memchr>
 8006670:	b140      	cbz	r0, 8006684 <_vfiprintf_r+0x198>
 8006672:	2340      	movs	r3, #64	; 0x40
 8006674:	eba0 000a 	sub.w	r0, r0, sl
 8006678:	fa03 f000 	lsl.w	r0, r3, r0
 800667c:	9b04      	ldr	r3, [sp, #16]
 800667e:	4303      	orrs	r3, r0
 8006680:	3401      	adds	r4, #1
 8006682:	9304      	str	r3, [sp, #16]
 8006684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006688:	482c      	ldr	r0, [pc, #176]	; (800673c <_vfiprintf_r+0x250>)
 800668a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800668e:	2206      	movs	r2, #6
 8006690:	f7f9 fd9e 	bl	80001d0 <memchr>
 8006694:	2800      	cmp	r0, #0
 8006696:	d03f      	beq.n	8006718 <_vfiprintf_r+0x22c>
 8006698:	4b29      	ldr	r3, [pc, #164]	; (8006740 <_vfiprintf_r+0x254>)
 800669a:	bb1b      	cbnz	r3, 80066e4 <_vfiprintf_r+0x1f8>
 800669c:	9b03      	ldr	r3, [sp, #12]
 800669e:	3307      	adds	r3, #7
 80066a0:	f023 0307 	bic.w	r3, r3, #7
 80066a4:	3308      	adds	r3, #8
 80066a6:	9303      	str	r3, [sp, #12]
 80066a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066aa:	443b      	add	r3, r7
 80066ac:	9309      	str	r3, [sp, #36]	; 0x24
 80066ae:	e767      	b.n	8006580 <_vfiprintf_r+0x94>
 80066b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80066b4:	460c      	mov	r4, r1
 80066b6:	2001      	movs	r0, #1
 80066b8:	e7a5      	b.n	8006606 <_vfiprintf_r+0x11a>
 80066ba:	2300      	movs	r3, #0
 80066bc:	3401      	adds	r4, #1
 80066be:	9305      	str	r3, [sp, #20]
 80066c0:	4619      	mov	r1, r3
 80066c2:	f04f 0c0a 	mov.w	ip, #10
 80066c6:	4620      	mov	r0, r4
 80066c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066cc:	3a30      	subs	r2, #48	; 0x30
 80066ce:	2a09      	cmp	r2, #9
 80066d0:	d903      	bls.n	80066da <_vfiprintf_r+0x1ee>
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d0c5      	beq.n	8006662 <_vfiprintf_r+0x176>
 80066d6:	9105      	str	r1, [sp, #20]
 80066d8:	e7c3      	b.n	8006662 <_vfiprintf_r+0x176>
 80066da:	fb0c 2101 	mla	r1, ip, r1, r2
 80066de:	4604      	mov	r4, r0
 80066e0:	2301      	movs	r3, #1
 80066e2:	e7f0      	b.n	80066c6 <_vfiprintf_r+0x1da>
 80066e4:	ab03      	add	r3, sp, #12
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	462a      	mov	r2, r5
 80066ea:	4b16      	ldr	r3, [pc, #88]	; (8006744 <_vfiprintf_r+0x258>)
 80066ec:	a904      	add	r1, sp, #16
 80066ee:	4630      	mov	r0, r6
 80066f0:	f3af 8000 	nop.w
 80066f4:	4607      	mov	r7, r0
 80066f6:	1c78      	adds	r0, r7, #1
 80066f8:	d1d6      	bne.n	80066a8 <_vfiprintf_r+0x1bc>
 80066fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066fc:	07d9      	lsls	r1, r3, #31
 80066fe:	d405      	bmi.n	800670c <_vfiprintf_r+0x220>
 8006700:	89ab      	ldrh	r3, [r5, #12]
 8006702:	059a      	lsls	r2, r3, #22
 8006704:	d402      	bmi.n	800670c <_vfiprintf_r+0x220>
 8006706:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006708:	f7ff fd77 	bl	80061fa <__retarget_lock_release_recursive>
 800670c:	89ab      	ldrh	r3, [r5, #12]
 800670e:	065b      	lsls	r3, r3, #25
 8006710:	f53f af12 	bmi.w	8006538 <_vfiprintf_r+0x4c>
 8006714:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006716:	e711      	b.n	800653c <_vfiprintf_r+0x50>
 8006718:	ab03      	add	r3, sp, #12
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	462a      	mov	r2, r5
 800671e:	4b09      	ldr	r3, [pc, #36]	; (8006744 <_vfiprintf_r+0x258>)
 8006720:	a904      	add	r1, sp, #16
 8006722:	4630      	mov	r0, r6
 8006724:	f000 f880 	bl	8006828 <_printf_i>
 8006728:	e7e4      	b.n	80066f4 <_vfiprintf_r+0x208>
 800672a:	bf00      	nop
 800672c:	08007044 	.word	0x08007044
 8006730:	08007064 	.word	0x08007064
 8006734:	08007024 	.word	0x08007024
 8006738:	08007084 	.word	0x08007084
 800673c:	0800708e 	.word	0x0800708e
 8006740:	00000000 	.word	0x00000000
 8006744:	080064c7 	.word	0x080064c7
 8006748:	0800708a 	.word	0x0800708a

0800674c <_printf_common>:
 800674c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006750:	4616      	mov	r6, r2
 8006752:	4699      	mov	r9, r3
 8006754:	688a      	ldr	r2, [r1, #8]
 8006756:	690b      	ldr	r3, [r1, #16]
 8006758:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800675c:	4293      	cmp	r3, r2
 800675e:	bfb8      	it	lt
 8006760:	4613      	movlt	r3, r2
 8006762:	6033      	str	r3, [r6, #0]
 8006764:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006768:	4607      	mov	r7, r0
 800676a:	460c      	mov	r4, r1
 800676c:	b10a      	cbz	r2, 8006772 <_printf_common+0x26>
 800676e:	3301      	adds	r3, #1
 8006770:	6033      	str	r3, [r6, #0]
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	0699      	lsls	r1, r3, #26
 8006776:	bf42      	ittt	mi
 8006778:	6833      	ldrmi	r3, [r6, #0]
 800677a:	3302      	addmi	r3, #2
 800677c:	6033      	strmi	r3, [r6, #0]
 800677e:	6825      	ldr	r5, [r4, #0]
 8006780:	f015 0506 	ands.w	r5, r5, #6
 8006784:	d106      	bne.n	8006794 <_printf_common+0x48>
 8006786:	f104 0a19 	add.w	sl, r4, #25
 800678a:	68e3      	ldr	r3, [r4, #12]
 800678c:	6832      	ldr	r2, [r6, #0]
 800678e:	1a9b      	subs	r3, r3, r2
 8006790:	42ab      	cmp	r3, r5
 8006792:	dc26      	bgt.n	80067e2 <_printf_common+0x96>
 8006794:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006798:	1e13      	subs	r3, r2, #0
 800679a:	6822      	ldr	r2, [r4, #0]
 800679c:	bf18      	it	ne
 800679e:	2301      	movne	r3, #1
 80067a0:	0692      	lsls	r2, r2, #26
 80067a2:	d42b      	bmi.n	80067fc <_printf_common+0xb0>
 80067a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067a8:	4649      	mov	r1, r9
 80067aa:	4638      	mov	r0, r7
 80067ac:	47c0      	blx	r8
 80067ae:	3001      	adds	r0, #1
 80067b0:	d01e      	beq.n	80067f0 <_printf_common+0xa4>
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	68e5      	ldr	r5, [r4, #12]
 80067b6:	6832      	ldr	r2, [r6, #0]
 80067b8:	f003 0306 	and.w	r3, r3, #6
 80067bc:	2b04      	cmp	r3, #4
 80067be:	bf08      	it	eq
 80067c0:	1aad      	subeq	r5, r5, r2
 80067c2:	68a3      	ldr	r3, [r4, #8]
 80067c4:	6922      	ldr	r2, [r4, #16]
 80067c6:	bf0c      	ite	eq
 80067c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067cc:	2500      	movne	r5, #0
 80067ce:	4293      	cmp	r3, r2
 80067d0:	bfc4      	itt	gt
 80067d2:	1a9b      	subgt	r3, r3, r2
 80067d4:	18ed      	addgt	r5, r5, r3
 80067d6:	2600      	movs	r6, #0
 80067d8:	341a      	adds	r4, #26
 80067da:	42b5      	cmp	r5, r6
 80067dc:	d11a      	bne.n	8006814 <_printf_common+0xc8>
 80067de:	2000      	movs	r0, #0
 80067e0:	e008      	b.n	80067f4 <_printf_common+0xa8>
 80067e2:	2301      	movs	r3, #1
 80067e4:	4652      	mov	r2, sl
 80067e6:	4649      	mov	r1, r9
 80067e8:	4638      	mov	r0, r7
 80067ea:	47c0      	blx	r8
 80067ec:	3001      	adds	r0, #1
 80067ee:	d103      	bne.n	80067f8 <_printf_common+0xac>
 80067f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f8:	3501      	adds	r5, #1
 80067fa:	e7c6      	b.n	800678a <_printf_common+0x3e>
 80067fc:	18e1      	adds	r1, r4, r3
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	2030      	movs	r0, #48	; 0x30
 8006802:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006806:	4422      	add	r2, r4
 8006808:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800680c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006810:	3302      	adds	r3, #2
 8006812:	e7c7      	b.n	80067a4 <_printf_common+0x58>
 8006814:	2301      	movs	r3, #1
 8006816:	4622      	mov	r2, r4
 8006818:	4649      	mov	r1, r9
 800681a:	4638      	mov	r0, r7
 800681c:	47c0      	blx	r8
 800681e:	3001      	adds	r0, #1
 8006820:	d0e6      	beq.n	80067f0 <_printf_common+0xa4>
 8006822:	3601      	adds	r6, #1
 8006824:	e7d9      	b.n	80067da <_printf_common+0x8e>
	...

08006828 <_printf_i>:
 8006828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800682c:	7e0f      	ldrb	r7, [r1, #24]
 800682e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006830:	2f78      	cmp	r7, #120	; 0x78
 8006832:	4691      	mov	r9, r2
 8006834:	4680      	mov	r8, r0
 8006836:	460c      	mov	r4, r1
 8006838:	469a      	mov	sl, r3
 800683a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800683e:	d807      	bhi.n	8006850 <_printf_i+0x28>
 8006840:	2f62      	cmp	r7, #98	; 0x62
 8006842:	d80a      	bhi.n	800685a <_printf_i+0x32>
 8006844:	2f00      	cmp	r7, #0
 8006846:	f000 80d8 	beq.w	80069fa <_printf_i+0x1d2>
 800684a:	2f58      	cmp	r7, #88	; 0x58
 800684c:	f000 80a3 	beq.w	8006996 <_printf_i+0x16e>
 8006850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006854:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006858:	e03a      	b.n	80068d0 <_printf_i+0xa8>
 800685a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800685e:	2b15      	cmp	r3, #21
 8006860:	d8f6      	bhi.n	8006850 <_printf_i+0x28>
 8006862:	a101      	add	r1, pc, #4	; (adr r1, 8006868 <_printf_i+0x40>)
 8006864:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006868:	080068c1 	.word	0x080068c1
 800686c:	080068d5 	.word	0x080068d5
 8006870:	08006851 	.word	0x08006851
 8006874:	08006851 	.word	0x08006851
 8006878:	08006851 	.word	0x08006851
 800687c:	08006851 	.word	0x08006851
 8006880:	080068d5 	.word	0x080068d5
 8006884:	08006851 	.word	0x08006851
 8006888:	08006851 	.word	0x08006851
 800688c:	08006851 	.word	0x08006851
 8006890:	08006851 	.word	0x08006851
 8006894:	080069e1 	.word	0x080069e1
 8006898:	08006905 	.word	0x08006905
 800689c:	080069c3 	.word	0x080069c3
 80068a0:	08006851 	.word	0x08006851
 80068a4:	08006851 	.word	0x08006851
 80068a8:	08006a03 	.word	0x08006a03
 80068ac:	08006851 	.word	0x08006851
 80068b0:	08006905 	.word	0x08006905
 80068b4:	08006851 	.word	0x08006851
 80068b8:	08006851 	.word	0x08006851
 80068bc:	080069cb 	.word	0x080069cb
 80068c0:	682b      	ldr	r3, [r5, #0]
 80068c2:	1d1a      	adds	r2, r3, #4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	602a      	str	r2, [r5, #0]
 80068c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068d0:	2301      	movs	r3, #1
 80068d2:	e0a3      	b.n	8006a1c <_printf_i+0x1f4>
 80068d4:	6820      	ldr	r0, [r4, #0]
 80068d6:	6829      	ldr	r1, [r5, #0]
 80068d8:	0606      	lsls	r6, r0, #24
 80068da:	f101 0304 	add.w	r3, r1, #4
 80068de:	d50a      	bpl.n	80068f6 <_printf_i+0xce>
 80068e0:	680e      	ldr	r6, [r1, #0]
 80068e2:	602b      	str	r3, [r5, #0]
 80068e4:	2e00      	cmp	r6, #0
 80068e6:	da03      	bge.n	80068f0 <_printf_i+0xc8>
 80068e8:	232d      	movs	r3, #45	; 0x2d
 80068ea:	4276      	negs	r6, r6
 80068ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068f0:	485e      	ldr	r0, [pc, #376]	; (8006a6c <_printf_i+0x244>)
 80068f2:	230a      	movs	r3, #10
 80068f4:	e019      	b.n	800692a <_printf_i+0x102>
 80068f6:	680e      	ldr	r6, [r1, #0]
 80068f8:	602b      	str	r3, [r5, #0]
 80068fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068fe:	bf18      	it	ne
 8006900:	b236      	sxthne	r6, r6
 8006902:	e7ef      	b.n	80068e4 <_printf_i+0xbc>
 8006904:	682b      	ldr	r3, [r5, #0]
 8006906:	6820      	ldr	r0, [r4, #0]
 8006908:	1d19      	adds	r1, r3, #4
 800690a:	6029      	str	r1, [r5, #0]
 800690c:	0601      	lsls	r1, r0, #24
 800690e:	d501      	bpl.n	8006914 <_printf_i+0xec>
 8006910:	681e      	ldr	r6, [r3, #0]
 8006912:	e002      	b.n	800691a <_printf_i+0xf2>
 8006914:	0646      	lsls	r6, r0, #25
 8006916:	d5fb      	bpl.n	8006910 <_printf_i+0xe8>
 8006918:	881e      	ldrh	r6, [r3, #0]
 800691a:	4854      	ldr	r0, [pc, #336]	; (8006a6c <_printf_i+0x244>)
 800691c:	2f6f      	cmp	r7, #111	; 0x6f
 800691e:	bf0c      	ite	eq
 8006920:	2308      	moveq	r3, #8
 8006922:	230a      	movne	r3, #10
 8006924:	2100      	movs	r1, #0
 8006926:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800692a:	6865      	ldr	r5, [r4, #4]
 800692c:	60a5      	str	r5, [r4, #8]
 800692e:	2d00      	cmp	r5, #0
 8006930:	bfa2      	ittt	ge
 8006932:	6821      	ldrge	r1, [r4, #0]
 8006934:	f021 0104 	bicge.w	r1, r1, #4
 8006938:	6021      	strge	r1, [r4, #0]
 800693a:	b90e      	cbnz	r6, 8006940 <_printf_i+0x118>
 800693c:	2d00      	cmp	r5, #0
 800693e:	d04d      	beq.n	80069dc <_printf_i+0x1b4>
 8006940:	4615      	mov	r5, r2
 8006942:	fbb6 f1f3 	udiv	r1, r6, r3
 8006946:	fb03 6711 	mls	r7, r3, r1, r6
 800694a:	5dc7      	ldrb	r7, [r0, r7]
 800694c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006950:	4637      	mov	r7, r6
 8006952:	42bb      	cmp	r3, r7
 8006954:	460e      	mov	r6, r1
 8006956:	d9f4      	bls.n	8006942 <_printf_i+0x11a>
 8006958:	2b08      	cmp	r3, #8
 800695a:	d10b      	bne.n	8006974 <_printf_i+0x14c>
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	07de      	lsls	r6, r3, #31
 8006960:	d508      	bpl.n	8006974 <_printf_i+0x14c>
 8006962:	6923      	ldr	r3, [r4, #16]
 8006964:	6861      	ldr	r1, [r4, #4]
 8006966:	4299      	cmp	r1, r3
 8006968:	bfde      	ittt	le
 800696a:	2330      	movle	r3, #48	; 0x30
 800696c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006970:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006974:	1b52      	subs	r2, r2, r5
 8006976:	6122      	str	r2, [r4, #16]
 8006978:	f8cd a000 	str.w	sl, [sp]
 800697c:	464b      	mov	r3, r9
 800697e:	aa03      	add	r2, sp, #12
 8006980:	4621      	mov	r1, r4
 8006982:	4640      	mov	r0, r8
 8006984:	f7ff fee2 	bl	800674c <_printf_common>
 8006988:	3001      	adds	r0, #1
 800698a:	d14c      	bne.n	8006a26 <_printf_i+0x1fe>
 800698c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006990:	b004      	add	sp, #16
 8006992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006996:	4835      	ldr	r0, [pc, #212]	; (8006a6c <_printf_i+0x244>)
 8006998:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800699c:	6829      	ldr	r1, [r5, #0]
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80069a4:	6029      	str	r1, [r5, #0]
 80069a6:	061d      	lsls	r5, r3, #24
 80069a8:	d514      	bpl.n	80069d4 <_printf_i+0x1ac>
 80069aa:	07df      	lsls	r7, r3, #31
 80069ac:	bf44      	itt	mi
 80069ae:	f043 0320 	orrmi.w	r3, r3, #32
 80069b2:	6023      	strmi	r3, [r4, #0]
 80069b4:	b91e      	cbnz	r6, 80069be <_printf_i+0x196>
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	f023 0320 	bic.w	r3, r3, #32
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	2310      	movs	r3, #16
 80069c0:	e7b0      	b.n	8006924 <_printf_i+0xfc>
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	f043 0320 	orr.w	r3, r3, #32
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	2378      	movs	r3, #120	; 0x78
 80069cc:	4828      	ldr	r0, [pc, #160]	; (8006a70 <_printf_i+0x248>)
 80069ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069d2:	e7e3      	b.n	800699c <_printf_i+0x174>
 80069d4:	0659      	lsls	r1, r3, #25
 80069d6:	bf48      	it	mi
 80069d8:	b2b6      	uxthmi	r6, r6
 80069da:	e7e6      	b.n	80069aa <_printf_i+0x182>
 80069dc:	4615      	mov	r5, r2
 80069de:	e7bb      	b.n	8006958 <_printf_i+0x130>
 80069e0:	682b      	ldr	r3, [r5, #0]
 80069e2:	6826      	ldr	r6, [r4, #0]
 80069e4:	6961      	ldr	r1, [r4, #20]
 80069e6:	1d18      	adds	r0, r3, #4
 80069e8:	6028      	str	r0, [r5, #0]
 80069ea:	0635      	lsls	r5, r6, #24
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	d501      	bpl.n	80069f4 <_printf_i+0x1cc>
 80069f0:	6019      	str	r1, [r3, #0]
 80069f2:	e002      	b.n	80069fa <_printf_i+0x1d2>
 80069f4:	0670      	lsls	r0, r6, #25
 80069f6:	d5fb      	bpl.n	80069f0 <_printf_i+0x1c8>
 80069f8:	8019      	strh	r1, [r3, #0]
 80069fa:	2300      	movs	r3, #0
 80069fc:	6123      	str	r3, [r4, #16]
 80069fe:	4615      	mov	r5, r2
 8006a00:	e7ba      	b.n	8006978 <_printf_i+0x150>
 8006a02:	682b      	ldr	r3, [r5, #0]
 8006a04:	1d1a      	adds	r2, r3, #4
 8006a06:	602a      	str	r2, [r5, #0]
 8006a08:	681d      	ldr	r5, [r3, #0]
 8006a0a:	6862      	ldr	r2, [r4, #4]
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	4628      	mov	r0, r5
 8006a10:	f7f9 fbde 	bl	80001d0 <memchr>
 8006a14:	b108      	cbz	r0, 8006a1a <_printf_i+0x1f2>
 8006a16:	1b40      	subs	r0, r0, r5
 8006a18:	6060      	str	r0, [r4, #4]
 8006a1a:	6863      	ldr	r3, [r4, #4]
 8006a1c:	6123      	str	r3, [r4, #16]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a24:	e7a8      	b.n	8006978 <_printf_i+0x150>
 8006a26:	6923      	ldr	r3, [r4, #16]
 8006a28:	462a      	mov	r2, r5
 8006a2a:	4649      	mov	r1, r9
 8006a2c:	4640      	mov	r0, r8
 8006a2e:	47d0      	blx	sl
 8006a30:	3001      	adds	r0, #1
 8006a32:	d0ab      	beq.n	800698c <_printf_i+0x164>
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	079b      	lsls	r3, r3, #30
 8006a38:	d413      	bmi.n	8006a62 <_printf_i+0x23a>
 8006a3a:	68e0      	ldr	r0, [r4, #12]
 8006a3c:	9b03      	ldr	r3, [sp, #12]
 8006a3e:	4298      	cmp	r0, r3
 8006a40:	bfb8      	it	lt
 8006a42:	4618      	movlt	r0, r3
 8006a44:	e7a4      	b.n	8006990 <_printf_i+0x168>
 8006a46:	2301      	movs	r3, #1
 8006a48:	4632      	mov	r2, r6
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	4640      	mov	r0, r8
 8006a4e:	47d0      	blx	sl
 8006a50:	3001      	adds	r0, #1
 8006a52:	d09b      	beq.n	800698c <_printf_i+0x164>
 8006a54:	3501      	adds	r5, #1
 8006a56:	68e3      	ldr	r3, [r4, #12]
 8006a58:	9903      	ldr	r1, [sp, #12]
 8006a5a:	1a5b      	subs	r3, r3, r1
 8006a5c:	42ab      	cmp	r3, r5
 8006a5e:	dcf2      	bgt.n	8006a46 <_printf_i+0x21e>
 8006a60:	e7eb      	b.n	8006a3a <_printf_i+0x212>
 8006a62:	2500      	movs	r5, #0
 8006a64:	f104 0619 	add.w	r6, r4, #25
 8006a68:	e7f5      	b.n	8006a56 <_printf_i+0x22e>
 8006a6a:	bf00      	nop
 8006a6c:	08007095 	.word	0x08007095
 8006a70:	080070a6 	.word	0x080070a6

08006a74 <_sbrk_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	4d06      	ldr	r5, [pc, #24]	; (8006a90 <_sbrk_r+0x1c>)
 8006a78:	2300      	movs	r3, #0
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	4608      	mov	r0, r1
 8006a7e:	602b      	str	r3, [r5, #0]
 8006a80:	f7fa fbd2 	bl	8001228 <_sbrk>
 8006a84:	1c43      	adds	r3, r0, #1
 8006a86:	d102      	bne.n	8006a8e <_sbrk_r+0x1a>
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	b103      	cbz	r3, 8006a8e <_sbrk_r+0x1a>
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	bd38      	pop	{r3, r4, r5, pc}
 8006a90:	20000898 	.word	0x20000898

08006a94 <__sread>:
 8006a94:	b510      	push	{r4, lr}
 8006a96:	460c      	mov	r4, r1
 8006a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a9c:	f000 f8a0 	bl	8006be0 <_read_r>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	bfab      	itete	ge
 8006aa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006aa6:	89a3      	ldrhlt	r3, [r4, #12]
 8006aa8:	181b      	addge	r3, r3, r0
 8006aaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006aae:	bfac      	ite	ge
 8006ab0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ab2:	81a3      	strhlt	r3, [r4, #12]
 8006ab4:	bd10      	pop	{r4, pc}

08006ab6 <__swrite>:
 8006ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aba:	461f      	mov	r7, r3
 8006abc:	898b      	ldrh	r3, [r1, #12]
 8006abe:	05db      	lsls	r3, r3, #23
 8006ac0:	4605      	mov	r5, r0
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	4616      	mov	r6, r2
 8006ac6:	d505      	bpl.n	8006ad4 <__swrite+0x1e>
 8006ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006acc:	2302      	movs	r3, #2
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f000 f868 	bl	8006ba4 <_lseek_r>
 8006ad4:	89a3      	ldrh	r3, [r4, #12]
 8006ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ade:	81a3      	strh	r3, [r4, #12]
 8006ae0:	4632      	mov	r2, r6
 8006ae2:	463b      	mov	r3, r7
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aea:	f000 b817 	b.w	8006b1c <_write_r>

08006aee <__sseek>:
 8006aee:	b510      	push	{r4, lr}
 8006af0:	460c      	mov	r4, r1
 8006af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af6:	f000 f855 	bl	8006ba4 <_lseek_r>
 8006afa:	1c43      	adds	r3, r0, #1
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	bf15      	itete	ne
 8006b00:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b0a:	81a3      	strheq	r3, [r4, #12]
 8006b0c:	bf18      	it	ne
 8006b0e:	81a3      	strhne	r3, [r4, #12]
 8006b10:	bd10      	pop	{r4, pc}

08006b12 <__sclose>:
 8006b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b16:	f000 b813 	b.w	8006b40 <_close_r>
	...

08006b1c <_write_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	4d07      	ldr	r5, [pc, #28]	; (8006b3c <_write_r+0x20>)
 8006b20:	4604      	mov	r4, r0
 8006b22:	4608      	mov	r0, r1
 8006b24:	4611      	mov	r1, r2
 8006b26:	2200      	movs	r2, #0
 8006b28:	602a      	str	r2, [r5, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f7fa fa02 	bl	8000f34 <_write>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d102      	bne.n	8006b3a <_write_r+0x1e>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	b103      	cbz	r3, 8006b3a <_write_r+0x1e>
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	20000898 	.word	0x20000898

08006b40 <_close_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4d06      	ldr	r5, [pc, #24]	; (8006b5c <_close_r+0x1c>)
 8006b44:	2300      	movs	r3, #0
 8006b46:	4604      	mov	r4, r0
 8006b48:	4608      	mov	r0, r1
 8006b4a:	602b      	str	r3, [r5, #0]
 8006b4c:	f7fa fb37 	bl	80011be <_close>
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	d102      	bne.n	8006b5a <_close_r+0x1a>
 8006b54:	682b      	ldr	r3, [r5, #0]
 8006b56:	b103      	cbz	r3, 8006b5a <_close_r+0x1a>
 8006b58:	6023      	str	r3, [r4, #0]
 8006b5a:	bd38      	pop	{r3, r4, r5, pc}
 8006b5c:	20000898 	.word	0x20000898

08006b60 <_fstat_r>:
 8006b60:	b538      	push	{r3, r4, r5, lr}
 8006b62:	4d07      	ldr	r5, [pc, #28]	; (8006b80 <_fstat_r+0x20>)
 8006b64:	2300      	movs	r3, #0
 8006b66:	4604      	mov	r4, r0
 8006b68:	4608      	mov	r0, r1
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	602b      	str	r3, [r5, #0]
 8006b6e:	f7fa fb32 	bl	80011d6 <_fstat>
 8006b72:	1c43      	adds	r3, r0, #1
 8006b74:	d102      	bne.n	8006b7c <_fstat_r+0x1c>
 8006b76:	682b      	ldr	r3, [r5, #0]
 8006b78:	b103      	cbz	r3, 8006b7c <_fstat_r+0x1c>
 8006b7a:	6023      	str	r3, [r4, #0]
 8006b7c:	bd38      	pop	{r3, r4, r5, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000898 	.word	0x20000898

08006b84 <_isatty_r>:
 8006b84:	b538      	push	{r3, r4, r5, lr}
 8006b86:	4d06      	ldr	r5, [pc, #24]	; (8006ba0 <_isatty_r+0x1c>)
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	4608      	mov	r0, r1
 8006b8e:	602b      	str	r3, [r5, #0]
 8006b90:	f7fa fb31 	bl	80011f6 <_isatty>
 8006b94:	1c43      	adds	r3, r0, #1
 8006b96:	d102      	bne.n	8006b9e <_isatty_r+0x1a>
 8006b98:	682b      	ldr	r3, [r5, #0]
 8006b9a:	b103      	cbz	r3, 8006b9e <_isatty_r+0x1a>
 8006b9c:	6023      	str	r3, [r4, #0]
 8006b9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ba0:	20000898 	.word	0x20000898

08006ba4 <_lseek_r>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	4d07      	ldr	r5, [pc, #28]	; (8006bc4 <_lseek_r+0x20>)
 8006ba8:	4604      	mov	r4, r0
 8006baa:	4608      	mov	r0, r1
 8006bac:	4611      	mov	r1, r2
 8006bae:	2200      	movs	r2, #0
 8006bb0:	602a      	str	r2, [r5, #0]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	f7fa fb2a 	bl	800120c <_lseek>
 8006bb8:	1c43      	adds	r3, r0, #1
 8006bba:	d102      	bne.n	8006bc2 <_lseek_r+0x1e>
 8006bbc:	682b      	ldr	r3, [r5, #0]
 8006bbe:	b103      	cbz	r3, 8006bc2 <_lseek_r+0x1e>
 8006bc0:	6023      	str	r3, [r4, #0]
 8006bc2:	bd38      	pop	{r3, r4, r5, pc}
 8006bc4:	20000898 	.word	0x20000898

08006bc8 <__malloc_lock>:
 8006bc8:	4801      	ldr	r0, [pc, #4]	; (8006bd0 <__malloc_lock+0x8>)
 8006bca:	f7ff bb15 	b.w	80061f8 <__retarget_lock_acquire_recursive>
 8006bce:	bf00      	nop
 8006bd0:	2000088c 	.word	0x2000088c

08006bd4 <__malloc_unlock>:
 8006bd4:	4801      	ldr	r0, [pc, #4]	; (8006bdc <__malloc_unlock+0x8>)
 8006bd6:	f7ff bb10 	b.w	80061fa <__retarget_lock_release_recursive>
 8006bda:	bf00      	nop
 8006bdc:	2000088c 	.word	0x2000088c

08006be0 <_read_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	4d07      	ldr	r5, [pc, #28]	; (8006c00 <_read_r+0x20>)
 8006be4:	4604      	mov	r4, r0
 8006be6:	4608      	mov	r0, r1
 8006be8:	4611      	mov	r1, r2
 8006bea:	2200      	movs	r2, #0
 8006bec:	602a      	str	r2, [r5, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f7fa fac8 	bl	8001184 <_read>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d102      	bne.n	8006bfe <_read_r+0x1e>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	b103      	cbz	r3, 8006bfe <_read_r+0x1e>
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	20000898 	.word	0x20000898

08006c04 <_init>:
 8006c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c06:	bf00      	nop
 8006c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c0a:	bc08      	pop	{r3}
 8006c0c:	469e      	mov	lr, r3
 8006c0e:	4770      	bx	lr

08006c10 <_fini>:
 8006c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c12:	bf00      	nop
 8006c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c16:	bc08      	pop	{r3}
 8006c18:	469e      	mov	lr, r3
 8006c1a:	4770      	bx	lr
